
Rover_Motor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005684  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005840  08005840  00015840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058b0  080058b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080058b0  080058b0  000158b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058b8  080058b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001290  2000000c  080058cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000129c  080058cc  0002129c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020167  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032e3  00000000  00000000  000401a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  00043488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  00044bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000349f1  00000000  00000000  000462a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7ac  00000000  00000000  0007ac99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013aff1  00000000  00000000  00097445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d2436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064bc  00000000  00000000  001d248c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08005828 	.word	0x08005828

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08005828 	.word	0x08005828

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
	HAL_UART_Transmit(&huart4, (uint8_t*)&ch, 1, 0xFFFF);
	return ch;
}

int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	HAL_Init();
 80004f8:	f000 fe76 	bl	80011e8 <HAL_Init>

	SystemClock_Config();
 80004fc:	f000 f814 	bl	8000528 <SystemClock_Config>

	MX_GPIO_Init();
 8000500:	f000 fa36 	bl	8000970 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000504:	f000 f874 	bl	80005f0 <MX_I2C1_Init>
	MX_I2C4_Init();
 8000508:	f000 f8b2 	bl	8000670 <MX_I2C4_Init>
	MX_TIM16_Init();
 800050c:	f000 f942 	bl	8000794 <MX_TIM16_Init>
	MX_UART4_Init();
 8000510:	f000 f9b8 	bl	8000884 <MX_UART4_Init>
	MX_RTC_Init();
 8000514:	f000 f8ec 	bl	80006f0 <MX_RTC_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000518:	f000 fa00 	bl	800091c <MX_USB_OTG_FS_PCD_Init>


	// start loop 3
	SetMotors(MOVE_START);
 800051c:	20a5      	movs	r0, #165	; 0xa5
 800051e:	f000 fdcf 	bl	80010c0 <SetMotors>
 8000522:	2300      	movs	r3, #0
}
 8000524:	4618      	mov	r0, r3
 8000526:	bd80      	pop	{r7, pc}

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	; 0x58
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2244      	movs	r2, #68	; 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f005 f96e 	bl	8005818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800054a:	2000      	movs	r0, #0
 800054c:	f001 fc12 	bl	8001d74 <HAL_PWREx_ControlVoltageScaling>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000556:	f000 fb11 	bl	8000b7c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800055a:	f001 fbdb 	bl	8001d14 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800055e:	4b23      	ldr	r3, [pc, #140]	; (80005ec <SystemClock_Config+0xc4>)
 8000560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xc4>)
 8000566:	f023 0318 	bic.w	r3, r3, #24
 800056a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800056e:	231c      	movs	r3, #28
 8000570:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000572:	2301      	movs	r3, #1
 8000574:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000576:	2301      	movs	r3, #1
 8000578:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800057a:	2301      	movs	r3, #1
 800057c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000582:	2360      	movs	r3, #96	; 0x60
 8000584:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800058a:	2301      	movs	r3, #1
 800058c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800058e:	2301      	movs	r3, #1
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000592:	233c      	movs	r3, #60	; 0x3c
 8000594:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000596:	2302      	movs	r3, #2
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fca8 	bl	8001efc <HAL_RCC_OscConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005b2:	f000 fae3 	bl	8000b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b6:	230f      	movs	r3, #15
 80005b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ba:	2303      	movs	r3, #3
 80005bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	2105      	movs	r1, #5
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 f8ba 	bl	8002748 <HAL_RCC_ClockConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005da:	f000 facf 	bl	8000b7c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005de:	f002 fef5 	bl	80033cc <HAL_RCCEx_EnableMSIPLLMode>
}
 80005e2:	bf00      	nop
 80005e4:	3758      	adds	r7, #88	; 0x58
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000

080005f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_I2C1_Init+0x74>)
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <MX_I2C1_Init+0x78>)
 80005f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_I2C1_Init+0x74>)
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <MX_I2C1_Init+0x7c>)
 80005fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_I2C1_Init+0x74>)
 8000608:	2201      	movs	r2, #1
 800060a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_I2C1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_I2C1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <MX_I2C1_Init+0x74>)
 800062c:	f001 f904 	bl	8001838 <HAL_I2C_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000636:	f000 faa1 	bl	8000b7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800063a:	2100      	movs	r1, #0
 800063c:	4809      	ldr	r0, [pc, #36]	; (8000664 <MX_I2C1_Init+0x74>)
 800063e:	f001 f98a 	bl	8001956 <HAL_I2CEx_ConfigAnalogFilter>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000648:	f000 fa98 	bl	8000b7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800064c:	2100      	movs	r1, #0
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_I2C1_Init+0x74>)
 8000650:	f001 f9cc 	bl	80019ec <HAL_I2CEx_ConfigDigitalFilter>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800065a:	f000 fa8f 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000d00 	.word	0x20000d00
 8000668:	40005400 	.word	0x40005400
 800066c:	307075b1 	.word	0x307075b1

08000670 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_I2C4_Init+0x74>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <MX_I2C4_Init+0x78>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_I2C4_Init+0x74>)
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <MX_I2C4_Init+0x7c>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_I2C4_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_I2C4_Init+0x74>)
 8000688:	2201      	movs	r2, #1
 800068a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_I2C4_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000692:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_I2C4_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2C4_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_I2C4_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a4:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2C4_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80006aa:	480e      	ldr	r0, [pc, #56]	; (80006e4 <MX_I2C4_Init+0x74>)
 80006ac:	f001 f8c4 	bl	8001838 <HAL_I2C_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80006b6:	f000 fa61 	bl	8000b7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ba:	2100      	movs	r1, #0
 80006bc:	4809      	ldr	r0, [pc, #36]	; (80006e4 <MX_I2C4_Init+0x74>)
 80006be:	f001 f94a 	bl	8001956 <HAL_I2CEx_ConfigAnalogFilter>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80006c8:	f000 fa58 	bl	8000b7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80006cc:	2100      	movs	r1, #0
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_I2C4_Init+0x74>)
 80006d0:	f001 f98c 	bl	80019ec <HAL_I2CEx_ConfigDigitalFilter>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80006da:	f000 fa4f 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000c8c 	.word	0x20000c8c
 80006e8:	40008400 	.word	0x40008400
 80006ec:	307075b1 	.word	0x307075b1

080006f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	RTC_TimeTypeDef time = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = {0};
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_RTC_Init+0x9c>)
 800070a:	4a21      	ldr	r2, [pc, #132]	; (8000790 <MX_RTC_Init+0xa0>)
 800070c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_RTC_Init+0x9c>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_RTC_Init+0x9c>)
 8000716:	227f      	movs	r2, #127	; 0x7f
 8000718:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_RTC_Init+0x9c>)
 800071c:	22ff      	movs	r2, #255	; 0xff
 800071e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_RTC_Init+0x9c>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_RTC_Init+0x9c>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_RTC_Init+0x9c>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_RTC_Init+0x9c>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000738:	4814      	ldr	r0, [pc, #80]	; (800078c <MX_RTC_Init+0x9c>)
 800073a:	f003 f83f 	bl	80037bc <HAL_RTC_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000744:	f000 fa1a 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	time.Hours = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	713b      	strb	r3, [r7, #4]
	time.Minutes = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	717b      	strb	r3, [r7, #5]
	time.Seconds = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	71bb      	strb	r3, [r7, #6]
	time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
	time.StoreOperation = RTC_STOREOPERATION_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BCD) != HAL_OK)
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2201      	movs	r2, #1
 8000760:	4619      	mov	r1, r3
 8000762:	480a      	ldr	r0, [pc, #40]	; (800078c <MX_RTC_Init+0x9c>)
 8000764:	f003 f8a5 	bl	80038b2 <HAL_RTC_SetTime>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_RTC_Init+0x82>
	{
		Error_Handler();
 800076e:	f000 fa05 	bl	8000b7c <Error_Handler>
	}
	date.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000772:	2303      	movs	r3, #3
 8000774:	703b      	strb	r3, [r7, #0]
	date.Month = RTC_MONTH_APRIL;
 8000776:	2304      	movs	r3, #4
 8000778:	707b      	strb	r3, [r7, #1]
	date.Date = 6;
 800077a:	2306      	movs	r3, #6
 800077c:	70bb      	strb	r3, [r7, #2]
	date.Year = 22;
 800077e:	2316      	movs	r3, #22
 8000780:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END RTC_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20001170 	.word	0x20001170
 8000790:	40002800 	.word	0x40002800

08000794 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b092      	sub	sp, #72	; 0x48
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800079a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]
 80007aa:	615a      	str	r2, [r3, #20]
 80007ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	222c      	movs	r2, #44	; 0x2c
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f005 f82f 	bl	8005818 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007ba:	4b30      	ldr	r3, [pc, #192]	; (800087c <MX_TIM16_Init+0xe8>)
 80007bc:	4a30      	ldr	r2, [pc, #192]	; (8000880 <MX_TIM16_Init+0xec>)
 80007be:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80007c0:	4b2e      	ldr	r3, [pc, #184]	; (800087c <MX_TIM16_Init+0xe8>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_TIM16_Init+0xe8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <MX_TIM16_Init+0xe8>)
 80007ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007d2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d4:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_TIM16_Init+0xe8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80007da:	4b28      	ldr	r3, [pc, #160]	; (800087c <MX_TIM16_Init+0xe8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_TIM16_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007e6:	4825      	ldr	r0, [pc, #148]	; (800087c <MX_TIM16_Init+0xe8>)
 80007e8:	f003 f9b8 	bl	8003b5c <HAL_TIM_Base_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80007f2:	f000 f9c3 	bl	8000b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80007f6:	4821      	ldr	r0, [pc, #132]	; (800087c <MX_TIM16_Init+0xe8>)
 80007f8:	f003 fa07 	bl	8003c0a <HAL_TIM_PWM_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000802:	f000 f9bb 	bl	8000b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000806:	2360      	movs	r3, #96	; 0x60
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080e:	2300      	movs	r3, #0
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000812:	2300      	movs	r3, #0
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000826:	2200      	movs	r2, #0
 8000828:	4619      	mov	r1, r3
 800082a:	4814      	ldr	r0, [pc, #80]	; (800087c <MX_TIM16_Init+0xe8>)
 800082c:	f003 fa4e 	bl	8003ccc <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000836:	f000 f9a1 	bl	8000b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800084e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000852:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000854:	2300      	movs	r3, #0
 8000856:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4807      	ldr	r0, [pc, #28]	; (800087c <MX_TIM16_Init+0xe8>)
 800085e:	f003 feb9 	bl	80045d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8000868:	f000 f988 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800086c:	4803      	ldr	r0, [pc, #12]	; (800087c <MX_TIM16_Init+0xe8>)
 800086e:	f000 faa5 	bl	8000dbc <HAL_TIM_MspPostInit>

}
 8000872:	bf00      	nop
 8000874:	3748      	adds	r7, #72	; 0x48
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20001248 	.word	0x20001248
 8000880:	40014400 	.word	0x40014400

08000884 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_UART4_Init+0x90>)
 800088a:	4a23      	ldr	r2, [pc, #140]	; (8000918 <MX_UART4_Init+0x94>)
 800088c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_UART4_Init+0x90>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_UART4_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_UART4_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_UART4_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_UART4_Init+0x90>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_UART4_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_UART4_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_UART4_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_UART4_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_UART4_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_UART4_Init+0x90>)
 80008ce:	f003 feff 	bl	80046d0 <HAL_UART_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80008d8:	f000 f950 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_UART4_Init+0x90>)
 80008e0:	f004 fbfc 	bl	80050dc <HAL_UARTEx_SetTxFifoThreshold>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80008ea:	f000 f947 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4808      	ldr	r0, [pc, #32]	; (8000914 <MX_UART4_Init+0x90>)
 80008f2:	f004 fc31 	bl	8005158 <HAL_UARTEx_SetRxFifoThreshold>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80008fc:	f000 f93e 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_UART4_Init+0x90>)
 8000902:	f004 fbb2 	bl	800506a <HAL_UARTEx_DisableFifoMode>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800090c:	f000 f936 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20001194 	.word	0x20001194
 8000918:	40004c00 	.word	0x40004c00

0800091c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000922:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000926:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800092a:	2206      	movs	r2, #6
 800092c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000930:	2202      	movs	r2, #2
 8000932:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000934:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800093a:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000940:	4b0a      	ldr	r3, [pc, #40]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000954:	2200      	movs	r2, #0
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	; (800096c <MX_USB_OTG_FS_PCD_Init+0x50>)
 800095a:	f001 f893 	bl	8001a84 <HAL_PCD_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000964:	f000 f90a 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000d60 	.word	0x20000d60

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08c      	sub	sp, #48	; 0x30
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000986:	4b76      	ldr	r3, [pc, #472]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a75      	ldr	r2, [pc, #468]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 800098c:	f043 0310 	orr.w	r3, r3, #16
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b73      	ldr	r3, [pc, #460]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0310 	and.w	r3, r3, #16
 800099a:	61bb      	str	r3, [r7, #24]
 800099c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	4b70      	ldr	r3, [pc, #448]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	4a6f      	ldr	r2, [pc, #444]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009aa:	4b6d      	ldr	r3, [pc, #436]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009b6:	4b6a      	ldr	r3, [pc, #424]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	4a69      	ldr	r2, [pc, #420]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 80009bc:	f043 0320 	orr.w	r3, r3, #32
 80009c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c2:	4b67      	ldr	r3, [pc, #412]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	f003 0320 	and.w	r3, r3, #32
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	4b64      	ldr	r3, [pc, #400]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	4a63      	ldr	r2, [pc, #396]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009da:	4b61      	ldr	r3, [pc, #388]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	4b5e      	ldr	r3, [pc, #376]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a5d      	ldr	r2, [pc, #372]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b5b      	ldr	r3, [pc, #364]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fe:	4b58      	ldr	r3, [pc, #352]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a57      	ldr	r2, [pc, #348]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b55      	ldr	r3, [pc, #340]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a16:	4b52      	ldr	r3, [pc, #328]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4a51      	ldr	r2, [pc, #324]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 8000a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4b4f      	ldr	r3, [pc, #316]	; (8000b60 <MX_GPIO_Init+0x1f0>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000a2e:	f001 fa55 	bl	8001edc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_11
 8000a32:	2200      	movs	r2, #0
 8000a34:	f646 2118 	movw	r1, #27160	; 0x6a18
 8000a38:	484a      	ldr	r0, [pc, #296]	; (8000b64 <MX_GPIO_Init+0x1f4>)
 8000a3a:	f000 fee5 	bl	8001808 <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	21c0      	movs	r1, #192	; 0xc0
 8000a42:	4849      	ldr	r0, [pc, #292]	; (8000b68 <MX_GPIO_Init+0x1f8>)
 8000a44:	f000 fee0 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000a48:	2200      	movs	r2, #0
 8000a4a:	21bc      	movs	r1, #188	; 0xbc
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a50:	f000 feda 	bl	8001808 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	21d0      	movs	r1, #208	; 0xd0
 8000a58:	4844      	ldr	r0, [pc, #272]	; (8000b6c <MX_GPIO_Init+0x1fc>)
 8000a5a:	f000 fed5 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2103      	movs	r1, #3
 8000a62:	4843      	ldr	r0, [pc, #268]	; (8000b70 <MX_GPIO_Init+0x200>)
 8000a64:	f000 fed0 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000a6e:	4841      	ldr	r0, [pc, #260]	; (8000b74 <MX_GPIO_Init+0x204>)
 8000a70:	f000 feca 	bl	8001808 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE9 PE11
                           PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_11
 8000a74:	f646 2318 	movw	r3, #27160	; 0x6a18
 8000a78:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4835      	ldr	r0, [pc, #212]	; (8000b64 <MX_GPIO_Init+0x1f4>)
 8000a8e:	f000 fd29 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a92:	23c0      	movs	r3, #192	; 0xc0
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	482f      	ldr	r0, [pc, #188]	; (8000b68 <MX_GPIO_Init+0x1f8>)
 8000aaa:	f000 fd1b 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000aae:	23bc      	movs	r3, #188	; 0xbc
 8000ab0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac8:	f000 fd0c 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000acc:	23d0      	movs	r3, #208	; 0xd0
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4822      	ldr	r0, [pc, #136]	; (8000b6c <MX_GPIO_Init+0x1fc>)
 8000ae4:	f000 fcfe 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	481c      	ldr	r0, [pc, #112]	; (8000b70 <MX_GPIO_Init+0x200>)
 8000b00:	f000 fcf0 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4815      	ldr	r0, [pc, #84]	; (8000b70 <MX_GPIO_Init+0x200>)
 8000b1c:	f000 fce2 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000b20:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	480e      	ldr	r0, [pc, #56]	; (8000b74 <MX_GPIO_Init+0x204>)
 8000b3a:	f000 fcd3 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4809      	ldr	r0, [pc, #36]	; (8000b78 <MX_GPIO_Init+0x208>)
 8000b54:	f000 fcc6 	bl	80014e4 <HAL_GPIO_Init>

}
 8000b58:	bf00      	nop
 8000b5a:	3730      	adds	r7, #48	; 0x30
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40021000 	.word	0x40021000
 8000b64:	48001000 	.word	0x48001000
 8000b68:	48001400 	.word	0x48001400
 8000b6c:	48000800 	.word	0x48000800
 8000b70:	48000400 	.word	0x48000400
 8000b74:	48000c00 	.word	0x48000c00
 8000b78:	48001800 	.word	0x48001800

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <HAL_MspInit+0x44>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	4a0e      	ldr	r2, [pc, #56]	; (8000bcc <HAL_MspInit+0x44>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <HAL_MspInit+0x44>)
 8000ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <HAL_MspInit+0x44>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b0b2      	sub	sp, #200	; 0xc8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be8:	f107 0318 	add.w	r3, r7, #24
 8000bec:	229c      	movs	r2, #156	; 0x9c
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f004 fe11 	bl	8005818 <memset>
  if(hi2c->Instance==I2C1)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a42      	ldr	r2, [pc, #264]	; (8000d04 <HAL_I2C_MspInit+0x134>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d13b      	bne.n	8000c78 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c00:	2340      	movs	r3, #64	; 0x40
 8000c02:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c08:	f107 0318 	add.w	r3, r7, #24
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f002 f84d 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c18:	f7ff ffb0 	bl	8000b7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b3a      	ldr	r3, [pc, #232]	; (8000d08 <HAL_I2C_MspInit+0x138>)
 8000c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c20:	4a39      	ldr	r2, [pc, #228]	; (8000d08 <HAL_I2C_MspInit+0x138>)
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c28:	4b37      	ldr	r3, [pc, #220]	; (8000d08 <HAL_I2C_MspInit+0x138>)
 8000c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c34:	23c0      	movs	r3, #192	; 0xc0
 8000c36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c3a:	2312      	movs	r3, #18
 8000c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000c56:	4619      	mov	r1, r3
 8000c58:	482c      	ldr	r0, [pc, #176]	; (8000d0c <HAL_I2C_MspInit+0x13c>)
 8000c5a:	f000 fc43 	bl	80014e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c5e:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <HAL_I2C_MspInit+0x138>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	4a29      	ldr	r2, [pc, #164]	; (8000d08 <HAL_I2C_MspInit+0x138>)
 8000c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c68:	6593      	str	r3, [r2, #88]	; 0x58
 8000c6a:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <HAL_I2C_MspInit+0x138>)
 8000c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000c76:	e041      	b.n	8000cfc <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C4)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a24      	ldr	r2, [pc, #144]	; (8000d10 <HAL_I2C_MspInit+0x140>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d13c      	bne.n	8000cfc <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000c82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c86:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c8c:	f107 0318 	add.w	r3, r7, #24
 8000c90:	4618      	mov	r0, r3
 8000c92:	f002 f80b 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8000c9c:	f7ff ff6e 	bl	8000b7c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_I2C_MspInit+0x138>)
 8000ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca4:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <HAL_I2C_MspInit+0x138>)
 8000ca6:	f043 0320 	orr.w	r3, r3, #32
 8000caa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_I2C_MspInit+0x138>)
 8000cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb0:	f003 0320 	and.w	r3, r3, #32
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000cb8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc0:	2312      	movs	r3, #18
 8000cc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <HAL_I2C_MspInit+0x144>)
 8000ce0:	f000 fc00 	bl	80014e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_I2C_MspInit+0x138>)
 8000ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_I2C_MspInit+0x138>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000cf0:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_I2C_MspInit+0x138>)
 8000cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
}
 8000cfc:	bf00      	nop
 8000cfe:	37c8      	adds	r7, #200	; 0xc8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40005400 	.word	0x40005400
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	48000400 	.word	0x48000400
 8000d10:	40008400 	.word	0x40008400
 8000d14:	48001400 	.word	0x48001400

08000d18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0aa      	sub	sp, #168	; 0xa8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	229c      	movs	r2, #156	; 0x9c
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f004 fd75 	bl	8005818 <memset>
  if(hrtc->Instance==RTC)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <HAL_RTC_MspInit+0x5c>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d118      	bne.n	8000d6a <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d3c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 ffae 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d56:	f7ff ff11 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d5a:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <HAL_RTC_MspInit+0x60>)
 8000d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d60:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <HAL_RTC_MspInit+0x60>)
 8000d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	37a8      	adds	r7, #168	; 0xa8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40002800 	.word	0x40002800
 8000d78:	40021000 	.word	0x40021000

08000d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_TIM_Base_MspInit+0x38>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10b      	bne.n	8000da6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_TIM_Base_MspInit+0x3c>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <HAL_TIM_Base_MspInit+0x3c>)
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <HAL_TIM_Base_MspInit+0x3c>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000da6:	bf00      	nop
 8000da8:	3714      	adds	r7, #20
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40014400 	.word	0x40014400
 8000db8:	40021000 	.word	0x40021000

08000dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b088      	sub	sp, #32
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <HAL_TIM_MspPostInit+0x64>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d11c      	bne.n	8000e18 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <HAL_TIM_MspPostInit+0x68>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a10      	ldr	r2, [pc, #64]	; (8000e24 <HAL_TIM_MspPostInit+0x68>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_TIM_MspPostInit+0x68>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000df6:	2340      	movs	r3, #64	; 0x40
 8000df8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8000e06:	230e      	movs	r3, #14
 8000e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f000 fb66 	bl	80014e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40014400 	.word	0x40014400
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0b0      	sub	sp, #192	; 0xc0
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	229c      	movs	r2, #156	; 0x9c
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f004 fce5 	bl	8005818 <memset>
  if(huart->Instance==UART4)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <HAL_UART_MspInit+0xb0>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d13b      	bne.n	8000ed0 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	4618      	mov	r0, r3
 8000e66:	f001 ff21 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e70:	f7ff fe84 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <HAL_UART_MspInit+0xb4>)
 8000e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e78:	4a18      	ldr	r2, [pc, #96]	; (8000edc <HAL_UART_MspInit+0xb4>)
 8000e7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <HAL_UART_MspInit+0xb4>)
 8000e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <HAL_UART_MspInit+0xb4>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e90:	4a12      	ldr	r2, [pc, #72]	; (8000edc <HAL_UART_MspInit+0xb4>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_UART_MspInit+0xb4>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ebc:	2308      	movs	r3, #8
 8000ebe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f000 fb0a 	bl	80014e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000ed0:	bf00      	nop
 8000ed2:	37c0      	adds	r7, #192	; 0xc0
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40004c00 	.word	0x40004c00
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b0b2      	sub	sp, #200	; 0xc8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef8:	f107 0318 	add.w	r3, r7, #24
 8000efc:	229c      	movs	r2, #156	; 0x9c
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f004 fc89 	bl	8005818 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f0e:	d16b      	bne.n	8000fe8 <HAL_PCD_MspInit+0x108>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f14:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000f16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000f26:	2318      	movs	r3, #24
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000f32:	2302      	movs	r3, #2
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000f36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3c:	f107 0318 	add.w	r3, r7, #24
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 feb3 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000f4c:	f7ff fe16 	bl	8000b7c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b27      	ldr	r3, [pc, #156]	; (8000ff0 <HAL_PCD_MspInit+0x110>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	4a26      	ldr	r2, [pc, #152]	; (8000ff0 <HAL_PCD_MspInit+0x110>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5c:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <HAL_PCD_MspInit+0x110>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f68:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f82:	230a      	movs	r3, #10
 8000f84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f92:	f000 faa7 	bl	80014e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_PCD_MspInit+0x110>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <HAL_PCD_MspInit+0x110>)
 8000f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <HAL_PCD_MspInit+0x110>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_PCD_MspInit+0x110>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d114      	bne.n	8000fe4 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <HAL_PCD_MspInit+0x110>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <HAL_PCD_MspInit+0x110>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_PCD_MspInit+0x110>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8000fd2:	f000 ff73 	bl	8001ebc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_PCD_MspInit+0x110>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <HAL_PCD_MspInit+0x110>)
 8000fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fe2:	e001      	b.n	8000fe8 <HAL_PCD_MspInit+0x108>
      HAL_PWREx_EnableVddUSB();
 8000fe4:	f000 ff6a 	bl	8001ebc <HAL_PWREx_EnableVddUSB>
}
 8000fe8:	bf00      	nop
 8000fea:	37c8      	adds	r7, #200	; 0xc8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <HardFault_Handler+0x4>

08001000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001004:	e7fe      	b.n	8001004 <MemManage_Handler+0x4>

08001006 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001006:	b480      	push	{r7}
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100a:	e7fe      	b.n	800100a <BusFault_Handler+0x4>

0800100c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <UsageFault_Handler+0x4>

08001012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001040:	f000 f926 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <SystemInit+0x20>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a05      	ldr	r2, [pc, #20]	; (8001068 <SystemInit+0x20>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800106c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001070:	f7ff ffea 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001076:	490d      	ldr	r1, [pc, #52]	; (80010ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <LoopForever+0xe>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800108c:	4c0a      	ldr	r4, [pc, #40]	; (80010b8 <LoopForever+0x16>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109a:	f004 fb99 	bl	80057d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109e:	f7ff fa29 	bl	80004f4 <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010a4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010b0:	080058c0 	.word	0x080058c0
  ldr r2, =_sbss
 80010b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010b8:	2000129c 	.word	0x2000129c

080010bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_IRQHandler>
	...

080010c0 <SetMotors>:
	HAL_Delay(50);
	SetMotors(MOTOR_STOP);
}

void SetMotors(int i)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d816      	bhi.n	80010fc <SetMotors+0x3c>
 80010ce:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <SetMotors+0x14>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	080010e5 	.word	0x080010e5
 80010d8:	080010eb 	.word	0x080010eb
 80010dc:	080010f1 	.word	0x080010f1
 80010e0:	080010f7 	.word	0x080010f7
	int mask;
	switch(i)
	{
	case MOTOR_START:
		mask = MOVE_START;
 80010e4:	23a5      	movs	r3, #165	; 0xa5
 80010e6:	61fb      	str	r3, [r7, #28]
		break;
 80010e8:	e008      	b.n	80010fc <SetMotors+0x3c>
	case MOTOR_STOP:
		mask = MOVE_STOP;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
		break;
 80010ee:	e005      	b.n	80010fc <SetMotors+0x3c>
	case MOTOR_LEFT:
		mask = MOVE_LEFT;
 80010f0:	23aa      	movs	r3, #170	; 0xaa
 80010f2:	61fb      	str	r3, [r7, #28]
		break;
 80010f4:	e002      	b.n	80010fc <SetMotors+0x3c>
	case MOTOR_RIGHT:
		mask = MOVE_RIGHT;
 80010f6:	2355      	movs	r3, #85	; 0x55
 80010f8:	61fb      	str	r3, [r7, #28]
		break;
 80010fa:	bf00      	nop
	}

	for (int i = 0; i < 8; i++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	e065      	b.n	80011ce <SetMotors+0x10e>
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	2b07      	cmp	r3, #7
 8001106:	d843      	bhi.n	8001190 <SetMotors+0xd0>
 8001108:	a201      	add	r2, pc, #4	; (adr r2, 8001110 <SetMotors+0x50>)
 800110a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800110e:	bf00      	nop
 8001110:	08001131 	.word	0x08001131
 8001114:	0800113d 	.word	0x0800113d
 8001118:	08001149 	.word	0x08001149
 800111c:	08001155 	.word	0x08001155
 8001120:	08001161 	.word	0x08001161
 8001124:	0800116d 	.word	0x0800116d
 8001128:	08001179 	.word	0x08001179
 800112c:	08001185 	.word	0x08001185
		GPIO_TypeDef *port;
		int pin;
		switch(i)
		{
		case 0:
			port = GPIO_MOTOR0A_PORT;
 8001130:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001134:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR0A_PIN;
 8001136:	2304      	movs	r3, #4
 8001138:	613b      	str	r3, [r7, #16]
			break;
 800113a:	e029      	b.n	8001190 <SetMotors+0xd0>
		case 1:
			port = GPIO_MOTOR0B_PORT;
 800113c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001140:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR0B_PIN;
 8001142:	2308      	movs	r3, #8
 8001144:	613b      	str	r3, [r7, #16]
			break;
 8001146:	e023      	b.n	8001190 <SetMotors+0xd0>
		case 2:
			port = GPIO_MOTOR1A_PORT;
 8001148:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800114c:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR1A_PIN;
 800114e:	2310      	movs	r3, #16
 8001150:	613b      	str	r3, [r7, #16]
			break;
 8001152:	e01d      	b.n	8001190 <SetMotors+0xd0>
		case 3:
			port = GPIO_MOTOR1B_PORT;
 8001154:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001158:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR1B_PIN;
 800115a:	2320      	movs	r3, #32
 800115c:	613b      	str	r3, [r7, #16]
			break;
 800115e:	e017      	b.n	8001190 <SetMotors+0xd0>
		case 4:
			port = GPIO_MOTOR2A_PORT;
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <SetMotors+0x124>)
 8001162:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR2A_PIN;
 8001164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001168:	613b      	str	r3, [r7, #16]
			break;
 800116a:	e011      	b.n	8001190 <SetMotors+0xd0>
		case 5:
			port = GPIO_MOTOR2B_PORT;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <SetMotors+0x124>)
 800116e:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR2B_PIN;
 8001170:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001174:	613b      	str	r3, [r7, #16]
			break;
 8001176:	e00b      	b.n	8001190 <SetMotors+0xd0>
		case 6:
			port = GPIO_MOTOR3A_PORT;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <SetMotors+0x124>)
 800117a:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR3A_PIN;
 800117c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001180:	613b      	str	r3, [r7, #16]
			break;
 8001182:	e005      	b.n	8001190 <SetMotors+0xd0>
		case 7:
			port = GPIO_MOTOR3B_PORT;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <SetMotors+0x124>)
 8001186:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR3B_PIN;
 8001188:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800118c:	613b      	str	r3, [r7, #16]
			break;
 800118e:	bf00      	nop
		}

		int temp = mask && 1;
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2b00      	cmp	r3, #0
 8001194:	bf14      	ite	ne
 8001196:	2301      	movne	r3, #1
 8001198:	2300      	moveq	r3, #0
 800119a:	b2db      	uxtb	r3, r3
 800119c:	60fb      	str	r3, [r7, #12]
		if (temp > 0)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	dd07      	ble.n	80011b4 <SetMotors+0xf4>
			HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	2201      	movs	r2, #1
 80011aa:	4619      	mov	r1, r3
 80011ac:	6978      	ldr	r0, [r7, #20]
 80011ae:	f000 fb2b 	bl	8001808 <HAL_GPIO_WritePin>
 80011b2:	e006      	b.n	80011c2 <SetMotors+0x102>
		else
			HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	6978      	ldr	r0, [r7, #20]
 80011be:	f000 fb23 	bl	8001808 <HAL_GPIO_WritePin>
		mask = mask >> 1;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	105b      	asrs	r3, r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 8; i++)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	3301      	adds	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	2b07      	cmp	r3, #7
 80011d2:	dd96      	ble.n	8001102 <SetMotors+0x42>
	}

	HAL_Delay(20);
 80011d4:	2014      	movs	r0, #20
 80011d6:	f000 f87b 	bl	80012d0 <HAL_Delay>
}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	48001000 	.word	0x48001000

080011e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f2:	2003      	movs	r0, #3
 80011f4:	f000 f942 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f8:	200f      	movs	r0, #15
 80011fa:	f000 f80d 	bl	8001218 <HAL_InitTick>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	e001      	b.n	800120e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800120a:	f7ff fcbd 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800120e:	79fb      	ldrb	r3, [r7, #7]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001224:	4b17      	ldr	r3, [pc, #92]	; (8001284 <HAL_InitTick+0x6c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d023      	beq.n	8001274 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <HAL_InitTick+0x70>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HAL_InitTick+0x6c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f941 	bl	80014ca <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10f      	bne.n	800126e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d809      	bhi.n	8001268 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f000 f919 	bl	8001492 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001260:	4a0a      	ldr	r2, [pc, #40]	; (800128c <HAL_InitTick+0x74>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e007      	b.n	8001278 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e004      	b.n	8001278 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	e001      	b.n	8001278 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008
 8001288:	20000000 	.word	0x20000000
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008
 80012b4:	20001298 	.word	0x20001298

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20001298 	.word	0x20001298

080012d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d8:	f7ff ffee 	bl	80012b8 <HAL_GetTick>
 80012dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e8:	d005      	beq.n	80012f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_Delay+0x44>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f6:	bf00      	nop
 80012f8:	f7ff ffde 	bl	80012b8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	429a      	cmp	r2, r3
 8001306:	d8f7      	bhi.n	80012f8 <HAL_Delay+0x28>
  {
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008

08001318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <__NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff47 	bl	8001318 <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff5c 	bl	8001360 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff8e 	bl	80013d0 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5d 	bl	800137c <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ffb0 	bl	8001438 <SysTick_Config>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f2:	e166      	b.n	80017c2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	2101      	movs	r1, #1
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001500:	4013      	ands	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8158 	beq.w	80017bc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b01      	cmp	r3, #1
 8001516:	d005      	beq.n	8001524 <HAL_GPIO_Init+0x40>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d130      	bne.n	8001586 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	2203      	movs	r2, #3
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800155a:	2201      	movs	r2, #1
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	091b      	lsrs	r3, r3, #4
 8001570:	f003 0201 	and.w	r2, r3, #1
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b03      	cmp	r3, #3
 8001590:	d017      	beq.n	80015c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	2203      	movs	r2, #3
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d123      	bne.n	8001616 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	08da      	lsrs	r2, r3, #3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3208      	adds	r2, #8
 80015d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	220f      	movs	r2, #15
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	691a      	ldr	r2, [r3, #16]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	08da      	lsrs	r2, r3, #3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3208      	adds	r2, #8
 8001610:	6939      	ldr	r1, [r7, #16]
 8001612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	2203      	movs	r2, #3
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0203 	and.w	r2, r3, #3
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 80b2 	beq.w	80017bc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001658:	4b61      	ldr	r3, [pc, #388]	; (80017e0 <HAL_GPIO_Init+0x2fc>)
 800165a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165c:	4a60      	ldr	r2, [pc, #384]	; (80017e0 <HAL_GPIO_Init+0x2fc>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6613      	str	r3, [r2, #96]	; 0x60
 8001664:	4b5e      	ldr	r3, [pc, #376]	; (80017e0 <HAL_GPIO_Init+0x2fc>)
 8001666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001670:	4a5c      	ldr	r2, [pc, #368]	; (80017e4 <HAL_GPIO_Init+0x300>)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800169a:	d02b      	beq.n	80016f4 <HAL_GPIO_Init+0x210>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a52      	ldr	r2, [pc, #328]	; (80017e8 <HAL_GPIO_Init+0x304>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d025      	beq.n	80016f0 <HAL_GPIO_Init+0x20c>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a51      	ldr	r2, [pc, #324]	; (80017ec <HAL_GPIO_Init+0x308>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d01f      	beq.n	80016ec <HAL_GPIO_Init+0x208>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a50      	ldr	r2, [pc, #320]	; (80017f0 <HAL_GPIO_Init+0x30c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d019      	beq.n	80016e8 <HAL_GPIO_Init+0x204>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a4f      	ldr	r2, [pc, #316]	; (80017f4 <HAL_GPIO_Init+0x310>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d013      	beq.n	80016e4 <HAL_GPIO_Init+0x200>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a4e      	ldr	r2, [pc, #312]	; (80017f8 <HAL_GPIO_Init+0x314>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d00d      	beq.n	80016e0 <HAL_GPIO_Init+0x1fc>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4a4d      	ldr	r2, [pc, #308]	; (80017fc <HAL_GPIO_Init+0x318>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d007      	beq.n	80016dc <HAL_GPIO_Init+0x1f8>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a4c      	ldr	r2, [pc, #304]	; (8001800 <HAL_GPIO_Init+0x31c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d101      	bne.n	80016d8 <HAL_GPIO_Init+0x1f4>
 80016d4:	2307      	movs	r3, #7
 80016d6:	e00e      	b.n	80016f6 <HAL_GPIO_Init+0x212>
 80016d8:	2308      	movs	r3, #8
 80016da:	e00c      	b.n	80016f6 <HAL_GPIO_Init+0x212>
 80016dc:	2306      	movs	r3, #6
 80016de:	e00a      	b.n	80016f6 <HAL_GPIO_Init+0x212>
 80016e0:	2305      	movs	r3, #5
 80016e2:	e008      	b.n	80016f6 <HAL_GPIO_Init+0x212>
 80016e4:	2304      	movs	r3, #4
 80016e6:	e006      	b.n	80016f6 <HAL_GPIO_Init+0x212>
 80016e8:	2303      	movs	r3, #3
 80016ea:	e004      	b.n	80016f6 <HAL_GPIO_Init+0x212>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e002      	b.n	80016f6 <HAL_GPIO_Init+0x212>
 80016f0:	2301      	movs	r3, #1
 80016f2:	e000      	b.n	80016f6 <HAL_GPIO_Init+0x212>
 80016f4:	2300      	movs	r3, #0
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	f002 0203 	and.w	r2, r2, #3
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	4093      	lsls	r3, r2
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001706:	4937      	ldr	r1, [pc, #220]	; (80017e4 <HAL_GPIO_Init+0x300>)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001714:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <HAL_GPIO_Init+0x320>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43db      	mvns	r3, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001738:	4a32      	ldr	r2, [pc, #200]	; (8001804 <HAL_GPIO_Init+0x320>)
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800173e:	4b31      	ldr	r3, [pc, #196]	; (8001804 <HAL_GPIO_Init+0x320>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001762:	4a28      	ldr	r2, [pc, #160]	; (8001804 <HAL_GPIO_Init+0x320>)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_GPIO_Init+0x320>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800178c:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <HAL_GPIO_Init+0x320>)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001792:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <HAL_GPIO_Init+0x320>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017b6:	4a13      	ldr	r2, [pc, #76]	; (8001804 <HAL_GPIO_Init+0x320>)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f47f ae91 	bne.w	80014f4 <HAL_GPIO_Init+0x10>
  }
}
 80017d2:	bf00      	nop
 80017d4:	bf00      	nop
 80017d6:	371c      	adds	r7, #28
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40010000 	.word	0x40010000
 80017e8:	48000400 	.word	0x48000400
 80017ec:	48000800 	.word	0x48000800
 80017f0:	48000c00 	.word	0x48000c00
 80017f4:	48001000 	.word	0x48001000
 80017f8:	48001400 	.word	0x48001400
 80017fc:	48001800 	.word	0x48001800
 8001800:	48001c00 	.word	0x48001c00
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	807b      	strh	r3, [r7, #2]
 8001814:	4613      	mov	r3, r2
 8001816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001818:	787b      	ldrb	r3, [r7, #1]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001824:	e002      	b.n	800182c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e081      	b.n	800194e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d106      	bne.n	8001864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff f9b6 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2224      	movs	r2, #36	; 0x24
 8001868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 0201 	bic.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001888:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001898:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d107      	bne.n	80018b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	e006      	b.n	80018c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d104      	bne.n	80018d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	430a      	orrs	r2, r1
 800190e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69d9      	ldr	r1, [r3, #28]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1a      	ldr	r2, [r3, #32]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0201 	orr.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2220      	movs	r2, #32
 800193a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b20      	cmp	r3, #32
 800196a:	d138      	bne.n	80019de <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001976:	2302      	movs	r3, #2
 8001978:	e032      	b.n	80019e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2224      	movs	r2, #36	; 0x24
 8001986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019a8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6819      	ldr	r1, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 0201 	orr.w	r2, r2, #1
 80019c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2220      	movs	r2, #32
 80019ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019da:	2300      	movs	r3, #0
 80019dc:	e000      	b.n	80019e0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019de:	2302      	movs	r3, #2
  }
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b20      	cmp	r3, #32
 8001a00:	d139      	bne.n	8001a76 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e033      	b.n	8001a78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2224      	movs	r2, #36	; 0x24
 8001a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0201 	bic.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a3e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f042 0201 	orr.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2220      	movs	r2, #32
 8001a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a76:	2302      	movs	r3, #2
  }
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a86:	b08f      	sub	sp, #60	; 0x3c
 8001a88:	af0a      	add	r7, sp, #40	; 0x28
 8001a8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e116      	b.n	8001cc4 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d106      	bne.n	8001ab6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fa15 	bl	8000ee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d102      	bne.n	8001ad0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f003 fbf7 	bl	80052c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	687e      	ldr	r6, [r7, #4]
 8001ae2:	466d      	mov	r5, sp
 8001ae4:	f106 0410 	add.w	r4, r6, #16
 8001ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001af0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001af4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001af8:	1d33      	adds	r3, r6, #4
 8001afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001afc:	6838      	ldr	r0, [r7, #0]
 8001afe:	f003 fbb7 	bl	8005270 <USB_CoreInit>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0d7      	b.n	8001cc4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f003 fbe5 	bl	80052ea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b20:	2300      	movs	r3, #0
 8001b22:	73fb      	strb	r3, [r7, #15]
 8001b24:	e04a      	b.n	8001bbc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b26:	7bfa      	ldrb	r2, [r7, #15]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	333d      	adds	r3, #61	; 0x3d
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	1a9b      	subs	r3, r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	333c      	adds	r3, #60	; 0x3c
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	b298      	uxth	r0, r3
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4613      	mov	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	1a9b      	subs	r3, r3, r2
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	440b      	add	r3, r1
 8001b60:	3342      	adds	r3, #66	; 0x42
 8001b62:	4602      	mov	r2, r0
 8001b64:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b66:	7bfa      	ldrb	r2, [r7, #15]
 8001b68:	6879      	ldr	r1, [r7, #4]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	1a9b      	subs	r3, r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	440b      	add	r3, r1
 8001b74:	333f      	adds	r3, #63	; 0x3f
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b7a:	7bfa      	ldrb	r2, [r7, #15]
 8001b7c:	6879      	ldr	r1, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	3344      	adds	r3, #68	; 0x44
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b8e:	7bfa      	ldrb	r2, [r7, #15]
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	4613      	mov	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3348      	adds	r3, #72	; 0x48
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	1a9b      	subs	r3, r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	3350      	adds	r3, #80	; 0x50
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	7bfa      	ldrb	r2, [r7, #15]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d3af      	bcc.n	8001b26 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	73fb      	strb	r3, [r7, #15]
 8001bca:	e044      	b.n	8001c56 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bcc:	7bfa      	ldrb	r2, [r7, #15]
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	440b      	add	r3, r1
 8001bf0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c0e:	7bfa      	ldrb	r2, [r7, #15]
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c24:	7bfa      	ldrb	r2, [r7, #15]
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	1a9b      	subs	r3, r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	1a9b      	subs	r3, r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	440b      	add	r3, r1
 8001c48:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	3301      	adds	r3, #1
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d3b5      	bcc.n	8001bcc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	687e      	ldr	r6, [r7, #4]
 8001c68:	466d      	mov	r5, sp
 8001c6a:	f106 0410 	add.w	r4, r6, #16
 8001c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c7e:	1d33      	adds	r3, r6, #4
 8001c80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c82:	6838      	ldr	r0, [r7, #0]
 8001c84:	f003 fb7e 	bl	8005384 <USB_DevInit>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2202      	movs	r2, #2
 8001c92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e014      	b.n	8001cc4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d102      	bne.n	8001cb8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 f80a 	bl	8001ccc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 fd26 	bl	800570e <USB_DevDisconnect>

  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ccc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	f043 0303 	orr.w	r3, r3, #3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40007000 	.word	0x40007000

08001d34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d44:	d102      	bne.n	8001d4c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d4a:	e00b      	b.n	8001d64 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001d4c:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d5a:	d102      	bne.n	8001d62 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d60:	e000      	b.n	8001d64 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001d62:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40007000 	.word	0x40007000

08001d74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d141      	bne.n	8001e06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d82:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8e:	d131      	bne.n	8001df4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d90:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d96:	4a46      	ldr	r2, [pc, #280]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da0:	4b43      	ldr	r3, [pc, #268]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001da8:	4a41      	ldr	r2, [pc, #260]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001db0:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2232      	movs	r2, #50	; 0x32
 8001db6:	fb02 f303 	mul.w	r3, r2, r3
 8001dba:	4a3f      	ldr	r2, [pc, #252]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	0c9b      	lsrs	r3, r3, #18
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dc6:	e002      	b.n	8001dce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dce:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dda:	d102      	bne.n	8001de2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f2      	bne.n	8001dc8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001de2:	4b33      	ldr	r3, [pc, #204]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dee:	d158      	bne.n	8001ea2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e057      	b.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001df4:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dfa:	4a2d      	ldr	r2, [pc, #180]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e04:	e04d      	b.n	8001ea2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0c:	d141      	bne.n	8001e92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e0e:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1a:	d131      	bne.n	8001e80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e22:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e2c:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e34:	4a1e      	ldr	r2, [pc, #120]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2232      	movs	r2, #50	; 0x32
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	0c9b      	lsrs	r3, r3, #18
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e52:	e002      	b.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e66:	d102      	bne.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f2      	bne.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7a:	d112      	bne.n	8001ea2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e011      	b.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e90:	e007      	b.n	8001ea2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e9a:	4a05      	ldr	r2, [pc, #20]	; (8001eb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	431bde83 	.word	0x431bde83

08001ebc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001ec0:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8001ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eca:	6053      	str	r3, [r2, #4]
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40007000 	.word	0x40007000

08001edc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a04      	ldr	r2, [pc, #16]	; (8001ef8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eea:	6053      	str	r3, [r2, #4]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40007000 	.word	0x40007000

08001efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d102      	bne.n	8001f10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f000 bc16 	b.w	800273c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f10:	4ba0      	ldr	r3, [pc, #640]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 030c 	and.w	r3, r3, #12
 8001f18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1a:	4b9e      	ldr	r3, [pc, #632]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0310 	and.w	r3, r3, #16
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80e4 	beq.w	80020fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_RCC_OscConfig+0x4c>
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	f040 808b 	bne.w	8002056 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	f040 8087 	bne.w	8002056 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f48:	4b92      	ldr	r3, [pc, #584]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_OscConfig+0x64>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e3ed      	b.n	800273c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	4b8b      	ldr	r3, [pc, #556]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <HAL_RCC_OscConfig+0x7e>
 8001f70:	4b88      	ldr	r3, [pc, #544]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f78:	e005      	b.n	8001f86 <HAL_RCC_OscConfig+0x8a>
 8001f7a:	4b86      	ldr	r3, [pc, #536]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d223      	bcs.n	8001fd2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fdca 	bl	8002b28 <RCC_SetFlashLatencyFromMSIRange>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e3ce      	b.n	800273c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f9e:	4b7d      	ldr	r3, [pc, #500]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a7c      	ldr	r2, [pc, #496]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fa4:	f043 0308 	orr.w	r3, r3, #8
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b7a      	ldr	r3, [pc, #488]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4977      	ldr	r1, [pc, #476]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fbc:	4b75      	ldr	r3, [pc, #468]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	4972      	ldr	r1, [pc, #456]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]
 8001fd0:	e025      	b.n	800201e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd2:	4b70      	ldr	r3, [pc, #448]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a6f      	ldr	r2, [pc, #444]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fd8:	f043 0308 	orr.w	r3, r3, #8
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b6d      	ldr	r3, [pc, #436]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	496a      	ldr	r1, [pc, #424]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ff0:	4b68      	ldr	r3, [pc, #416]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	4965      	ldr	r1, [pc, #404]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	4618      	mov	r0, r3
 8002010:	f000 fd8a 	bl	8002b28 <RCC_SetFlashLatencyFromMSIRange>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e38e      	b.n	800273c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800201e:	f000 fcbf 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8002022:	4602      	mov	r2, r0
 8002024:	4b5b      	ldr	r3, [pc, #364]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	495a      	ldr	r1, [pc, #360]	; (8002198 <HAL_RCC_OscConfig+0x29c>)
 8002030:	5ccb      	ldrb	r3, [r1, r3]
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	fa22 f303 	lsr.w	r3, r2, r3
 800203a:	4a58      	ldr	r2, [pc, #352]	; (800219c <HAL_RCC_OscConfig+0x2a0>)
 800203c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800203e:	4b58      	ldr	r3, [pc, #352]	; (80021a0 <HAL_RCC_OscConfig+0x2a4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f8e8 	bl	8001218 <HAL_InitTick>
 8002048:	4603      	mov	r3, r0
 800204a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d052      	beq.n	80020f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	e372      	b.n	800273c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d032      	beq.n	80020c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800205e:	4b4d      	ldr	r3, [pc, #308]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a4c      	ldr	r2, [pc, #304]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800206a:	f7ff f925 	bl	80012b8 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002072:	f7ff f921 	bl	80012b8 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e35b      	b.n	800273c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002084:	4b43      	ldr	r3, [pc, #268]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002090:	4b40      	ldr	r3, [pc, #256]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a3f      	ldr	r2, [pc, #252]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002096:	f043 0308 	orr.w	r3, r3, #8
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	493a      	ldr	r1, [pc, #232]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ae:	4b39      	ldr	r3, [pc, #228]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	4935      	ldr	r1, [pc, #212]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	604b      	str	r3, [r1, #4]
 80020c2:	e01a      	b.n	80020fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020c4:	4b33      	ldr	r3, [pc, #204]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a32      	ldr	r2, [pc, #200]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020d0:	f7ff f8f2 	bl	80012b8 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020d8:	f7ff f8ee 	bl	80012b8 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e328      	b.n	800273c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020ea:	4b2a      	ldr	r3, [pc, #168]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x1dc>
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d073      	beq.n	80021ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	2b08      	cmp	r3, #8
 800210a:	d005      	beq.n	8002118 <HAL_RCC_OscConfig+0x21c>
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d10e      	bne.n	8002130 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	2b03      	cmp	r3, #3
 8002116:	d10b      	bne.n	8002130 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002118:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d063      	beq.n	80021ec <HAL_RCC_OscConfig+0x2f0>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d15f      	bne.n	80021ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e305      	b.n	800273c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002138:	d106      	bne.n	8002148 <HAL_RCC_OscConfig+0x24c>
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a15      	ldr	r2, [pc, #84]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e01d      	b.n	8002184 <HAL_RCC_OscConfig+0x288>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x270>
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0x288>
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a08      	ldr	r2, [pc, #32]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a05      	ldr	r2, [pc, #20]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01b      	beq.n	80021c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff f894 	bl	80012b8 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002192:	e010      	b.n	80021b6 <HAL_RCC_OscConfig+0x2ba>
 8002194:	40021000 	.word	0x40021000
 8002198:	08005840 	.word	0x08005840
 800219c:	20000000 	.word	0x20000000
 80021a0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7ff f888 	bl	80012b8 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e2c2      	b.n	800273c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b6:	4baf      	ldr	r3, [pc, #700]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x2a8>
 80021c2:	e014      	b.n	80021ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7ff f878 	bl	80012b8 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021cc:	f7ff f874 	bl	80012b8 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e2ae      	b.n	800273c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021de:	4ba5      	ldr	r3, [pc, #660]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x2d0>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d060      	beq.n	80022bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d005      	beq.n	800220c <HAL_RCC_OscConfig+0x310>
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b0c      	cmp	r3, #12
 8002204:	d119      	bne.n	800223a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d116      	bne.n	800223a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800220c:	4b99      	ldr	r3, [pc, #612]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <HAL_RCC_OscConfig+0x328>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e28b      	b.n	800273c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b93      	ldr	r3, [pc, #588]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	4990      	ldr	r1, [pc, #576]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002238:	e040      	b.n	80022bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d023      	beq.n	800228a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002242:	4b8c      	ldr	r3, [pc, #560]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a8b      	ldr	r2, [pc, #556]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224e:	f7ff f833 	bl	80012b8 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002256:	f7ff f82f 	bl	80012b8 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e269      	b.n	800273c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002268:	4b82      	ldr	r3, [pc, #520]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002274:	4b7f      	ldr	r3, [pc, #508]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	061b      	lsls	r3, r3, #24
 8002282:	497c      	ldr	r1, [pc, #496]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
 8002288:	e018      	b.n	80022bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800228a:	4b7a      	ldr	r3, [pc, #488]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a79      	ldr	r2, [pc, #484]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7ff f80f 	bl	80012b8 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229e:	f7ff f80b 	bl	80012b8 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e245      	b.n	800273c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b0:	4b70      	ldr	r3, [pc, #448]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1f0      	bne.n	800229e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d03c      	beq.n	8002342 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01c      	beq.n	800230a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d0:	4b68      	ldr	r3, [pc, #416]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 80022d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d6:	4a67      	ldr	r2, [pc, #412]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e0:	f7fe ffea 	bl	80012b8 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e8:	f7fe ffe6 	bl	80012b8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e220      	b.n	800273c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022fa:	4b5e      	ldr	r3, [pc, #376]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 80022fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ef      	beq.n	80022e8 <HAL_RCC_OscConfig+0x3ec>
 8002308:	e01b      	b.n	8002342 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230a:	4b5a      	ldr	r3, [pc, #360]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 800230c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002310:	4a58      	ldr	r2, [pc, #352]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002312:	f023 0301 	bic.w	r3, r3, #1
 8002316:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800231a:	f7fe ffcd 	bl	80012b8 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002322:	f7fe ffc9 	bl	80012b8 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e203      	b.n	800273c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002334:	4b4f      	ldr	r3, [pc, #316]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1ef      	bne.n	8002322 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0304 	and.w	r3, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 80a6 	beq.w	800249c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002350:	2300      	movs	r3, #0
 8002352:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002354:	4b47      	ldr	r3, [pc, #284]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10d      	bne.n	800237c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002360:	4b44      	ldr	r3, [pc, #272]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	4a43      	ldr	r2, [pc, #268]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236a:	6593      	str	r3, [r2, #88]	; 0x58
 800236c:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002378:	2301      	movs	r3, #1
 800237a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237c:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <HAL_RCC_OscConfig+0x57c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002384:	2b00      	cmp	r3, #0
 8002386:	d118      	bne.n	80023ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002388:	4b3b      	ldr	r3, [pc, #236]	; (8002478 <HAL_RCC_OscConfig+0x57c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a3a      	ldr	r2, [pc, #232]	; (8002478 <HAL_RCC_OscConfig+0x57c>)
 800238e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002392:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002394:	f7fe ff90 	bl	80012b8 <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239c:	f7fe ff8c 	bl	80012b8 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e1c6      	b.n	800273c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ae:	4b32      	ldr	r3, [pc, #200]	; (8002478 <HAL_RCC_OscConfig+0x57c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d108      	bne.n	80023d4 <HAL_RCC_OscConfig+0x4d8>
 80023c2:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 80023c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c8:	4a2a      	ldr	r2, [pc, #168]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d2:	e024      	b.n	800241e <HAL_RCC_OscConfig+0x522>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b05      	cmp	r3, #5
 80023da:	d110      	bne.n	80023fe <HAL_RCC_OscConfig+0x502>
 80023dc:	4b25      	ldr	r3, [pc, #148]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	4a24      	ldr	r2, [pc, #144]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023ec:	4b21      	ldr	r3, [pc, #132]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	4a20      	ldr	r2, [pc, #128]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023fc:	e00f      	b.n	800241e <HAL_RCC_OscConfig+0x522>
 80023fe:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002406:	f023 0301 	bic.w	r3, r3, #1
 800240a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800240e:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002416:	f023 0304 	bic.w	r3, r3, #4
 800241a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d016      	beq.n	8002454 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002426:	f7fe ff47 	bl	80012b8 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242e:	f7fe ff43 	bl	80012b8 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	; 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e17b      	b.n	800273c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_OscConfig+0x578>)
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0ed      	beq.n	800242e <HAL_RCC_OscConfig+0x532>
 8002452:	e01a      	b.n	800248a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002454:	f7fe ff30 	bl	80012b8 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800245a:	e00f      	b.n	800247c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245c:	f7fe ff2c 	bl	80012b8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d906      	bls.n	800247c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e164      	b.n	800273c <HAL_RCC_OscConfig+0x840>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800247c:	4ba8      	ldr	r3, [pc, #672]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1e8      	bne.n	800245c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248a:	7ffb      	ldrb	r3, [r7, #31]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d105      	bne.n	800249c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002490:	4ba3      	ldr	r3, [pc, #652]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	4aa2      	ldr	r2, [pc, #648]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 8002496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d03c      	beq.n	8002522 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01c      	beq.n	80024ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024b0:	4b9b      	ldr	r3, [pc, #620]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80024b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024b6:	4a9a      	ldr	r2, [pc, #616]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7fe fefa 	bl	80012b8 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c8:	f7fe fef6 	bl	80012b8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e130      	b.n	800273c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024da:	4b91      	ldr	r3, [pc, #580]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80024dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ef      	beq.n	80024c8 <HAL_RCC_OscConfig+0x5cc>
 80024e8:	e01b      	b.n	8002522 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024ea:	4b8d      	ldr	r3, [pc, #564]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80024ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024f0:	4a8b      	ldr	r2, [pc, #556]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fa:	f7fe fedd 	bl	80012b8 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002502:	f7fe fed9 	bl	80012b8 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e113      	b.n	800273c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002514:	4b82      	ldr	r3, [pc, #520]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 8002516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1ef      	bne.n	8002502 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8107 	beq.w	800273a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002530:	2b02      	cmp	r3, #2
 8002532:	f040 80cb 	bne.w	80026cc <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002536:	4b7a      	ldr	r3, [pc, #488]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 0203 	and.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	429a      	cmp	r2, r3
 8002548:	d12c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	3b01      	subs	r3, #1
 8002556:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d123      	bne.n	80025a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002566:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d11b      	bne.n	80025a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002576:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d113      	bne.n	80025a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	3b01      	subs	r3, #1
 800258a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d109      	bne.n	80025a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	3b01      	subs	r3, #1
 800259e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d06d      	beq.n	8002680 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	2b0c      	cmp	r3, #12
 80025a8:	d068      	beq.n	800267c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025aa:	4b5d      	ldr	r3, [pc, #372]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d105      	bne.n	80025c2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025b6:	4b5a      	ldr	r3, [pc, #360]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0ba      	b.n	800273c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025c6:	4b56      	ldr	r3, [pc, #344]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a55      	ldr	r2, [pc, #340]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80025cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025d2:	f7fe fe71 	bl	80012b8 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025da:	f7fe fe6d 	bl	80012b8 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e0a7      	b.n	800273c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ec:	4b4c      	ldr	r3, [pc, #304]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f0      	bne.n	80025da <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f8:	4b49      	ldr	r3, [pc, #292]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	4b49      	ldr	r3, [pc, #292]	; (8002724 <HAL_RCC_OscConfig+0x828>)
 80025fe:	4013      	ands	r3, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002608:	3a01      	subs	r2, #1
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	4311      	orrs	r1, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002612:	0212      	lsls	r2, r2, #8
 8002614:	4311      	orrs	r1, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800261a:	0852      	lsrs	r2, r2, #1
 800261c:	3a01      	subs	r2, #1
 800261e:	0552      	lsls	r2, r2, #21
 8002620:	4311      	orrs	r1, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002626:	0852      	lsrs	r2, r2, #1
 8002628:	3a01      	subs	r2, #1
 800262a:	0652      	lsls	r2, r2, #25
 800262c:	4311      	orrs	r1, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002632:	06d2      	lsls	r2, r2, #27
 8002634:	430a      	orrs	r2, r1
 8002636:	493a      	ldr	r1, [pc, #232]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 8002638:	4313      	orrs	r3, r2
 800263a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800263c:	4b38      	ldr	r3, [pc, #224]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a37      	ldr	r2, [pc, #220]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 8002642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002646:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002648:	4b35      	ldr	r3, [pc, #212]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a34      	ldr	r2, [pc, #208]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 800264e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002652:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002654:	f7fe fe30 	bl	80012b8 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7fe fe2c 	bl	80012b8 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e066      	b.n	800273c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800267a:	e05e      	b.n	800273a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e05d      	b.n	800273c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d156      	bne.n	800273a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800268c:	4b24      	ldr	r3, [pc, #144]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a23      	ldr	r2, [pc, #140]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 8002692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002696:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002698:	4b21      	ldr	r3, [pc, #132]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a20      	ldr	r2, [pc, #128]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 800269e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026a4:	f7fe fe08 	bl	80012b8 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe fe04 	bl	80012b8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e03e      	b.n	800273c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026be:	4b18      	ldr	r3, [pc, #96]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x7b0>
 80026ca:	e036      	b.n	800273a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d031      	beq.n	8002736 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80026d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4a0c      	ldr	r2, [pc, #48]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80026f0:	f023 0303 	bic.w	r3, r3, #3
 80026f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_RCC_OscConfig+0x824>)
 80026fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002704:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7fe fdd7 	bl	80012b8 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800270c:	e00c      	b.n	8002728 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270e:	f7fe fdd3 	bl	80012b8 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d905      	bls.n	8002728 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e00d      	b.n	800273c <HAL_RCC_OscConfig+0x840>
 8002720:	40021000 	.word	0x40021000
 8002724:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_RCC_OscConfig+0x848>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ec      	bne.n	800270e <HAL_RCC_OscConfig+0x812>
 8002734:	e001      	b.n	800273a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3720      	adds	r7, #32
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000

08002748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e10f      	b.n	8002980 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002760:	4b89      	ldr	r3, [pc, #548]	; (8002988 <HAL_RCC_ClockConfig+0x240>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d910      	bls.n	8002790 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b86      	ldr	r3, [pc, #536]	; (8002988 <HAL_RCC_ClockConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 020f 	bic.w	r2, r3, #15
 8002776:	4984      	ldr	r1, [pc, #528]	; (8002988 <HAL_RCC_ClockConfig+0x240>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b82      	ldr	r3, [pc, #520]	; (8002988 <HAL_RCC_ClockConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d001      	beq.n	8002790 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0f7      	b.n	8002980 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8089 	beq.w	80028b0 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d133      	bne.n	800280e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a6:	4b79      	ldr	r3, [pc, #484]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0e4      	b.n	8002980 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80027b6:	f000 fa11 	bl	8002bdc <RCC_GetSysClockFreqFromPLLSource>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4a74      	ldr	r2, [pc, #464]	; (8002990 <HAL_RCC_ClockConfig+0x248>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d955      	bls.n	800286e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80027c2:	4b72      	ldr	r3, [pc, #456]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10a      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027ce:	4b6f      	ldr	r3, [pc, #444]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027d6:	4a6d      	ldr	r2, [pc, #436]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 80027d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	e044      	b.n	800286e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d03e      	beq.n	800286e <HAL_RCC_ClockConfig+0x126>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d13a      	bne.n	800286e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027f8:	4b64      	ldr	r3, [pc, #400]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002800:	4a62      	ldr	r2, [pc, #392]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 8002802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002806:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	e02f      	b.n	800286e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d107      	bne.n	8002826 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002816:	4b5d      	ldr	r3, [pc, #372]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d115      	bne.n	800284e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0ac      	b.n	8002980 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d107      	bne.n	800283e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800282e:	4b57      	ldr	r3, [pc, #348]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d109      	bne.n	800284e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e0a0      	b.n	8002980 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800283e:	4b53      	ldr	r3, [pc, #332]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e098      	b.n	8002980 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800284e:	f000 f8a7 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8002852:	4603      	mov	r3, r0
 8002854:	4a4e      	ldr	r2, [pc, #312]	; (8002990 <HAL_RCC_ClockConfig+0x248>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d909      	bls.n	800286e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800285a:	4b4c      	ldr	r3, [pc, #304]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002862:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 8002864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002868:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800286e:	4b47      	ldr	r3, [pc, #284]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 0203 	bic.w	r2, r3, #3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4944      	ldr	r1, [pc, #272]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 800287c:	4313      	orrs	r3, r2
 800287e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002880:	f7fe fd1a 	bl	80012b8 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002886:	e00a      	b.n	800289e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002888:	f7fe fd16 	bl	80012b8 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e070      	b.n	8002980 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800289e:	4b3b      	ldr	r3, [pc, #236]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 020c 	and.w	r2, r3, #12
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d1eb      	bne.n	8002888 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d009      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028bc:	4b33      	ldr	r3, [pc, #204]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4930      	ldr	r1, [pc, #192]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b80      	cmp	r3, #128	; 0x80
 80028d4:	d105      	bne.n	80028e2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80028d6:	4b2d      	ldr	r3, [pc, #180]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4a2c      	ldr	r2, [pc, #176]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 80028dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028e2:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_RCC_ClockConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d210      	bcs.n	8002912 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f0:	4b25      	ldr	r3, [pc, #148]	; (8002988 <HAL_RCC_ClockConfig+0x240>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f023 020f 	bic.w	r2, r3, #15
 80028f8:	4923      	ldr	r1, [pc, #140]	; (8002988 <HAL_RCC_ClockConfig+0x240>)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002900:	4b21      	ldr	r3, [pc, #132]	; (8002988 <HAL_RCC_ClockConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d001      	beq.n	8002912 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e036      	b.n	8002980 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d008      	beq.n	8002930 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	4918      	ldr	r1, [pc, #96]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 800292c:	4313      	orrs	r3, r2
 800292e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0308 	and.w	r3, r3, #8
 8002938:	2b00      	cmp	r3, #0
 800293a:	d009      	beq.n	8002950 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800293c:	4b13      	ldr	r3, [pc, #76]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4910      	ldr	r1, [pc, #64]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 800294c:	4313      	orrs	r3, r2
 800294e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002950:	f000 f826 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <HAL_RCC_ClockConfig+0x244>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	091b      	lsrs	r3, r3, #4
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	490c      	ldr	r1, [pc, #48]	; (8002994 <HAL_RCC_ClockConfig+0x24c>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <HAL_RCC_ClockConfig+0x250>)
 800296e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_RCC_ClockConfig+0x254>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7fe fc4f 	bl	8001218 <HAL_InitTick>
 800297a:	4603      	mov	r3, r0
 800297c:	73fb      	strb	r3, [r7, #15]

  return status;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40022000 	.word	0x40022000
 800298c:	40021000 	.word	0x40021000
 8002990:	04c4b400 	.word	0x04c4b400
 8002994:	08005840 	.word	0x08005840
 8002998:	20000000 	.word	0x20000000
 800299c:	20000004 	.word	0x20000004

080029a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029ae:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029b8:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0303 	and.w	r3, r3, #3
 80029c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x34>
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d121      	bne.n	8002a12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d11e      	bne.n	8002a12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029d4:	4b34      	ldr	r3, [pc, #208]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029e0:	4b31      	ldr	r3, [pc, #196]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	e005      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029f0:	4b2d      	ldr	r3, [pc, #180]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029fc:	4a2b      	ldr	r2, [pc, #172]	; (8002aac <HAL_RCC_GetSysClockFreq+0x10c>)
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10d      	bne.n	8002a28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d102      	bne.n	8002a1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	e004      	b.n	8002a28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d101      	bne.n	8002a28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a24:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d134      	bne.n	8002a98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d003      	beq.n	8002a4c <HAL_RCC_GetSysClockFreq+0xac>
 8002a44:	e005      	b.n	8002a52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a46:	4b1a      	ldr	r3, [pc, #104]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a48:	617b      	str	r3, [r7, #20]
      break;
 8002a4a:	e005      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a4e:	617b      	str	r3, [r7, #20]
      break;
 8002a50:	e002      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	617b      	str	r3, [r7, #20]
      break;
 8002a56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a58:	4b13      	ldr	r3, [pc, #76]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	3301      	adds	r3, #1
 8002a64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	fb02 f203 	mul.w	r2, r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	0e5b      	lsrs	r3, r3, #25
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a98:	69bb      	ldr	r3, [r7, #24]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	08005858 	.word	0x08005858
 8002ab0:	00f42400 	.word	0x00f42400
 8002ab4:	007a1200 	.word	0x007a1200

08002ab8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <HAL_RCC_GetHCLKFreq+0x14>)
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000000 	.word	0x20000000

08002ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ad4:	f7ff fff0 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4904      	ldr	r1, [pc, #16]	; (8002af8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	f003 031f 	and.w	r3, r3, #31
 8002aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000
 8002af8:	08005850 	.word	0x08005850

08002afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b00:	f7ff ffda 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	0adb      	lsrs	r3, r3, #11
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	4904      	ldr	r1, [pc, #16]	; (8002b24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	40021000 	.word	0x40021000
 8002b24:	08005850 	.word	0x08005850

08002b28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b34:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b40:	f7ff f8f8 	bl	8001d34 <HAL_PWREx_GetVoltageRange>
 8002b44:	6178      	str	r0, [r7, #20]
 8002b46:	e014      	b.n	8002b72 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b48:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	4a21      	ldr	r2, [pc, #132]	; (8002bd4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b52:	6593      	str	r3, [r2, #88]	; 0x58
 8002b54:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b60:	f7ff f8e8 	bl	8001d34 <HAL_PWREx_GetVoltageRange>
 8002b64:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	4a1a      	ldr	r2, [pc, #104]	; (8002bd4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b70:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b78:	d10b      	bne.n	8002b92 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b80      	cmp	r3, #128	; 0x80
 8002b7e:	d913      	bls.n	8002ba8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2ba0      	cmp	r3, #160	; 0xa0
 8002b84:	d902      	bls.n	8002b8c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b86:	2302      	movs	r3, #2
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	e00d      	b.n	8002ba8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	e00a      	b.n	8002ba8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b7f      	cmp	r3, #127	; 0x7f
 8002b96:	d902      	bls.n	8002b9e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002b98:	2302      	movs	r3, #2
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	e004      	b.n	8002ba8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b70      	cmp	r3, #112	; 0x70
 8002ba2:	d101      	bne.n	8002ba8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 020f 	bic.w	r2, r3, #15
 8002bb0:	4909      	ldr	r1, [pc, #36]	; (8002bd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002bb8:	4b07      	ldr	r3, [pc, #28]	; (8002bd8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d001      	beq.n	8002bca <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40022000 	.word	0x40022000

08002bdc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002be6:	4b2d      	ldr	r3, [pc, #180]	; (8002c9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d118      	bne.n	8002c24 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bf2:	4b2a      	ldr	r3, [pc, #168]	; (8002c9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d107      	bne.n	8002c0e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bfe:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	e005      	b.n	8002c1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c0e:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c1a:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c22:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c24:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d003      	beq.n	8002c3c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d003      	beq.n	8002c42 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8002c3a:	e005      	b.n	8002c48 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002c3e:	613b      	str	r3, [r7, #16]
    break;
 8002c40:	e005      	b.n	8002c4e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002c42:	4b19      	ldr	r3, [pc, #100]	; (8002ca8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002c44:	613b      	str	r3, [r7, #16]
    break;
 8002c46:	e002      	b.n	8002c4e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	613b      	str	r3, [r7, #16]
    break;
 8002c4c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	3301      	adds	r3, #1
 8002c5a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c5c:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	0a1b      	lsrs	r3, r3, #8
 8002c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	fb02 f203 	mul.w	r2, r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	0e5b      	lsrs	r3, r3, #25
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002c8e:	683b      	ldr	r3, [r7, #0]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	371c      	adds	r7, #28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	08005858 	.word	0x08005858
 8002ca4:	00f42400 	.word	0x00f42400
 8002ca8:	007a1200 	.word	0x007a1200

08002cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cb8:	2300      	movs	r3, #0
 8002cba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d040      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ccc:	2b80      	cmp	r3, #128	; 0x80
 8002cce:	d02a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002cd0:	2b80      	cmp	r3, #128	; 0x80
 8002cd2:	d825      	bhi.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002cd4:	2b60      	cmp	r3, #96	; 0x60
 8002cd6:	d026      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002cd8:	2b60      	cmp	r3, #96	; 0x60
 8002cda:	d821      	bhi.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002cdc:	2b40      	cmp	r3, #64	; 0x40
 8002cde:	d006      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002ce0:	2b40      	cmp	r3, #64	; 0x40
 8002ce2:	d81d      	bhi.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d009      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d010      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002cec:	e018      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002cee:	4b89      	ldr	r3, [pc, #548]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4a88      	ldr	r2, [pc, #544]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cfa:	e015      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3304      	adds	r3, #4
 8002d00:	2100      	movs	r1, #0
 8002d02:	4618      	mov	r0, r3
 8002d04:	f000 fb72 	bl	80033ec <RCCEx_PLLSAI1_Config>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d0c:	e00c      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3320      	adds	r3, #32
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fc5d 	bl	80035d4 <RCCEx_PLLSAI2_Config>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d1e:	e003      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	74fb      	strb	r3, [r7, #19]
      break;
 8002d24:	e000      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002d26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d28:	7cfb      	ldrb	r3, [r7, #19]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10b      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d2e:	4b79      	ldr	r3, [pc, #484]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d34:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d3c:	4975      	ldr	r1, [pc, #468]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002d44:	e001      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d047      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5e:	d030      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d64:	d82a      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d6a:	d02a      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002d6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d70:	d824      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d76:	d008      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d7c:	d81e      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d86:	d010      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002d88:	e018      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d8a:	4b62      	ldr	r3, [pc, #392]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	4a61      	ldr	r2, [pc, #388]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d96:	e015      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fb24 	bl	80033ec <RCCEx_PLLSAI1_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002da8:	e00c      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3320      	adds	r3, #32
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fc0f 	bl	80035d4 <RCCEx_PLLSAI2_Config>
 8002db6:	4603      	mov	r3, r0
 8002db8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dba:	e003      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	74fb      	strb	r3, [r7, #19]
      break;
 8002dc0:	e000      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002dc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10b      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002dca:	4b52      	ldr	r3, [pc, #328]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd8:	494e      	ldr	r1, [pc, #312]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002de0:	e001      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 809f 	beq.w	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df4:	2300      	movs	r3, #0
 8002df6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002df8:	4b46      	ldr	r3, [pc, #280]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0e:	4b41      	ldr	r3, [pc, #260]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	4a40      	ldr	r2, [pc, #256]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6593      	str	r3, [r2, #88]	; 0x58
 8002e1a:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	60bb      	str	r3, [r7, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e2a:	4b3b      	ldr	r3, [pc, #236]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a3a      	ldr	r2, [pc, #232]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e36:	f7fe fa3f 	bl	80012b8 <HAL_GetTick>
 8002e3a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e3c:	e009      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e3e:	f7fe fa3b 	bl	80012b8 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d902      	bls.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	74fb      	strb	r3, [r7, #19]
        break;
 8002e50:	e005      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e52:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0ef      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002e5e:	7cfb      	ldrb	r3, [r7, #19]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d15b      	bne.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e6e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01f      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d019      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e82:	4b24      	ldr	r3, [pc, #144]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e8e:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	4a1f      	ldr	r2, [pc, #124]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e9e:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea4:	4a1b      	ldr	r2, [pc, #108]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002eae:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d016      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe f9fa 	bl	80012b8 <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ec6:	e00b      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7fe f9f6 	bl	80012b8 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d902      	bls.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	74fb      	strb	r3, [r7, #19]
            break;
 8002ede:	e006      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0ec      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10c      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f04:	4903      	ldr	r1, [pc, #12]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f0c:	e008      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f0e:	7cfb      	ldrb	r3, [r7, #19]
 8002f10:	74bb      	strb	r3, [r7, #18]
 8002f12:	e005      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1c:	7cfb      	ldrb	r3, [r7, #19]
 8002f1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f20:	7c7b      	ldrb	r3, [r7, #17]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d105      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f26:	4ba0      	ldr	r3, [pc, #640]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	4a9f      	ldr	r2, [pc, #636]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f3e:	4b9a      	ldr	r3, [pc, #616]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f023 0203 	bic.w	r2, r3, #3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4c:	4996      	ldr	r1, [pc, #600]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f60:	4b91      	ldr	r3, [pc, #580]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f023 020c 	bic.w	r2, r3, #12
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	498e      	ldr	r1, [pc, #568]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f82:	4b89      	ldr	r3, [pc, #548]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f90:	4985      	ldr	r1, [pc, #532]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fa4:	4b80      	ldr	r3, [pc, #512]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb2:	497d      	ldr	r1, [pc, #500]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00a      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fc6:	4b78      	ldr	r3, [pc, #480]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd4:	4974      	ldr	r1, [pc, #464]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00a      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fe8:	4b6f      	ldr	r3, [pc, #444]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff6:	496c      	ldr	r1, [pc, #432]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00a      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800300a:	4b67      	ldr	r3, [pc, #412]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800300c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003010:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003018:	4963      	ldr	r1, [pc, #396]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800302c:	4b5e      	ldr	r3, [pc, #376]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003032:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800303a:	495b      	ldr	r1, [pc, #364]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00a      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800304e:	4b56      	ldr	r3, [pc, #344]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003054:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305c:	4952      	ldr	r1, [pc, #328]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003070:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	494a      	ldr	r1, [pc, #296]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003092:	4b45      	ldr	r3, [pc, #276]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a0:	4941      	ldr	r1, [pc, #260]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030b4:	4b3c      	ldr	r3, [pc, #240]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ba:	f023 0203 	bic.w	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030c2:	4939      	ldr	r1, [pc, #228]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d028      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030d6:	4b34      	ldr	r3, [pc, #208]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e4:	4930      	ldr	r1, [pc, #192]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030f4:	d106      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f6:	4b2c      	ldr	r3, [pc, #176]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	4a2b      	ldr	r2, [pc, #172]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003100:	60d3      	str	r3, [r2, #12]
 8003102:	e011      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003108:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800310c:	d10c      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3304      	adds	r3, #4
 8003112:	2101      	movs	r1, #1
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f969 	bl	80033ec <RCCEx_PLLSAI1_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800311e:	7cfb      	ldrb	r3, [r7, #19]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d04d      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003138:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800313c:	d108      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800313e:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003140:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003144:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003146:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800314a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800314e:	e012      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003150:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003152:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003156:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800315c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003166:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800316e:	490e      	ldr	r1, [pc, #56]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800317a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800317e:	d106      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003180:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800318a:	60d3      	str	r3, [r2, #12]
 800318c:	e020      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003196:	d109      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4a02      	ldr	r2, [pc, #8]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800319e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a2:	60d3      	str	r3, [r2, #12]
 80031a4:	e014      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	2101      	movs	r1, #1
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 f915 	bl	80033ec <RCCEx_PLLSAI1_Config>
 80031c2:	4603      	mov	r3, r0
 80031c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031c6:	7cfb      	ldrb	r3, [r7, #19]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d028      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031dc:	4b7a      	ldr	r3, [pc, #488]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80031de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ea:	4977      	ldr	r1, [pc, #476]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031fa:	d106      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031fc:	4b72      	ldr	r3, [pc, #456]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a71      	ldr	r2, [pc, #452]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003206:	60d3      	str	r3, [r2, #12]
 8003208:	e011      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800320e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003212:	d10c      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3304      	adds	r3, #4
 8003218:	2101      	movs	r1, #1
 800321a:	4618      	mov	r0, r3
 800321c:	f000 f8e6 	bl	80033ec <RCCEx_PLLSAI1_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003224:	7cfb      	ldrb	r3, [r7, #19]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800322a:	7cfb      	ldrb	r3, [r7, #19]
 800322c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01e      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800323a:	4b63      	ldr	r3, [pc, #396]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800323c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003240:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800324a:	495f      	ldr	r1, [pc, #380]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003258:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800325c:	d10c      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3304      	adds	r3, #4
 8003262:	2102      	movs	r1, #2
 8003264:	4618      	mov	r0, r3
 8003266:	f000 f8c1 	bl	80033ec <RCCEx_PLLSAI1_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800326e:	7cfb      	ldrb	r3, [r7, #19]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003274:	7cfb      	ldrb	r3, [r7, #19]
 8003276:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00b      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003284:	4b50      	ldr	r3, [pc, #320]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003286:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800328a:	f023 0204 	bic.w	r2, r3, #4
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003294:	494c      	ldr	r1, [pc, #304]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032a8:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80032aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032ae:	f023 0218 	bic.w	r2, r3, #24
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b8:	4943      	ldr	r1, [pc, #268]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d035      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032cc:	4b3e      	ldr	r3, [pc, #248]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a3d      	ldr	r2, [pc, #244]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80032d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d8:	f7fd ffee 	bl	80012b8 <HAL_GetTick>
 80032dc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032de:	e009      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032e0:	f7fd ffea 	bl	80012b8 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d902      	bls.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	74fb      	strb	r3, [r7, #19]
        break;
 80032f2:	e005      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032f4:	4b34      	ldr	r3, [pc, #208]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1ef      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d113      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003306:	4b30      	ldr	r3, [pc, #192]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003308:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800330c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003316:	492c      	ldr	r1, [pc, #176]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3320      	adds	r3, #32
 8003322:	2102      	movs	r1, #2
 8003324:	4618      	mov	r0, r3
 8003326:	f000 f955 	bl	80035d4 <RCCEx_PLLSAI2_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800332e:	7cfb      	ldrb	r3, [r7, #19]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003334:	7cfb      	ldrb	r3, [r7, #19]
 8003336:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01e      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003344:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003346:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800334a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	491c      	ldr	r1, [pc, #112]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003366:	d10c      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3320      	adds	r3, #32
 800336c:	2101      	movs	r1, #1
 800336e:	4618      	mov	r0, r3
 8003370:	f000 f930 	bl	80035d4 <RCCEx_PLLSAI2_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800337e:	7cfb      	ldrb	r3, [r7, #19]
 8003380:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d017      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800338e:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003390:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003394:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339e:	490a      	ldr	r1, [pc, #40]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033b0:	d105      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80033b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033bc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033be:	7cbb      	ldrb	r3, [r7, #18]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	40021000 	.word	0x40021000

080033cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033d6:	f043 0304 	orr.w	r3, r3, #4
 80033da:	6013      	str	r3, [r2, #0]
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000

080033ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033fa:	4b72      	ldr	r3, [pc, #456]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00e      	beq.n	8003424 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003406:	4b6f      	ldr	r3, [pc, #444]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0203 	and.w	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d103      	bne.n	800341e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
       ||
 800341a:	2b00      	cmp	r3, #0
 800341c:	d142      	bne.n	80034a4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
 8003422:	e03f      	b.n	80034a4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d018      	beq.n	800345e <RCCEx_PLLSAI1_Config+0x72>
 800342c:	2b03      	cmp	r3, #3
 800342e:	d825      	bhi.n	800347c <RCCEx_PLLSAI1_Config+0x90>
 8003430:	2b01      	cmp	r3, #1
 8003432:	d002      	beq.n	800343a <RCCEx_PLLSAI1_Config+0x4e>
 8003434:	2b02      	cmp	r3, #2
 8003436:	d009      	beq.n	800344c <RCCEx_PLLSAI1_Config+0x60>
 8003438:	e020      	b.n	800347c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800343a:	4b62      	ldr	r3, [pc, #392]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d11d      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800344a:	e01a      	b.n	8003482 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800344c:	4b5d      	ldr	r3, [pc, #372]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003454:	2b00      	cmp	r3, #0
 8003456:	d116      	bne.n	8003486 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345c:	e013      	b.n	8003486 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800345e:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10f      	bne.n	800348a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800346a:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800347a:	e006      	b.n	800348a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
      break;
 8003480:	e004      	b.n	800348c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003482:	bf00      	nop
 8003484:	e002      	b.n	800348c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003486:	bf00      	nop
 8003488:	e000      	b.n	800348c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800348a:	bf00      	nop
    }

    if(status == HAL_OK)
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d108      	bne.n	80034a4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003492:	4b4c      	ldr	r3, [pc, #304]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f023 0203 	bic.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4949      	ldr	r1, [pc, #292]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 8086 	bne.w	80035b8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034ac:	4b45      	ldr	r3, [pc, #276]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a44      	ldr	r2, [pc, #272]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034b8:	f7fd fefe 	bl	80012b8 <HAL_GetTick>
 80034bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034be:	e009      	b.n	80034d4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034c0:	f7fd fefa 	bl	80012b8 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d902      	bls.n	80034d4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	73fb      	strb	r3, [r7, #15]
        break;
 80034d2:	e005      	b.n	80034e0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034d4:	4b3b      	ldr	r3, [pc, #236]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1ef      	bne.n	80034c0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d168      	bne.n	80035b8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d113      	bne.n	8003514 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034ec:	4b35      	ldr	r3, [pc, #212]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034ee:	691a      	ldr	r2, [r3, #16]
 80034f0:	4b35      	ldr	r3, [pc, #212]	; (80035c8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	6892      	ldr	r2, [r2, #8]
 80034f8:	0211      	lsls	r1, r2, #8
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68d2      	ldr	r2, [r2, #12]
 80034fe:	06d2      	lsls	r2, r2, #27
 8003500:	4311      	orrs	r1, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6852      	ldr	r2, [r2, #4]
 8003506:	3a01      	subs	r2, #1
 8003508:	0112      	lsls	r2, r2, #4
 800350a:	430a      	orrs	r2, r1
 800350c:	492d      	ldr	r1, [pc, #180]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800350e:	4313      	orrs	r3, r2
 8003510:	610b      	str	r3, [r1, #16]
 8003512:	e02d      	b.n	8003570 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d115      	bne.n	8003546 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800351a:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003520:	4013      	ands	r3, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6892      	ldr	r2, [r2, #8]
 8003526:	0211      	lsls	r1, r2, #8
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6912      	ldr	r2, [r2, #16]
 800352c:	0852      	lsrs	r2, r2, #1
 800352e:	3a01      	subs	r2, #1
 8003530:	0552      	lsls	r2, r2, #21
 8003532:	4311      	orrs	r1, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6852      	ldr	r2, [r2, #4]
 8003538:	3a01      	subs	r2, #1
 800353a:	0112      	lsls	r2, r2, #4
 800353c:	430a      	orrs	r2, r1
 800353e:	4921      	ldr	r1, [pc, #132]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003540:	4313      	orrs	r3, r2
 8003542:	610b      	str	r3, [r1, #16]
 8003544:	e014      	b.n	8003570 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003546:	4b1f      	ldr	r3, [pc, #124]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003548:	691a      	ldr	r2, [r3, #16]
 800354a:	4b21      	ldr	r3, [pc, #132]	; (80035d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800354c:	4013      	ands	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6892      	ldr	r2, [r2, #8]
 8003552:	0211      	lsls	r1, r2, #8
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6952      	ldr	r2, [r2, #20]
 8003558:	0852      	lsrs	r2, r2, #1
 800355a:	3a01      	subs	r2, #1
 800355c:	0652      	lsls	r2, r2, #25
 800355e:	4311      	orrs	r1, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6852      	ldr	r2, [r2, #4]
 8003564:	3a01      	subs	r2, #1
 8003566:	0112      	lsls	r2, r2, #4
 8003568:	430a      	orrs	r2, r1
 800356a:	4916      	ldr	r1, [pc, #88]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800356c:	4313      	orrs	r3, r2
 800356e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003570:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a13      	ldr	r2, [pc, #76]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003576:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800357a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fd fe9c 	bl	80012b8 <HAL_GetTick>
 8003580:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003582:	e009      	b.n	8003598 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003584:	f7fd fe98 	bl	80012b8 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d902      	bls.n	8003598 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	73fb      	strb	r3, [r7, #15]
          break;
 8003596:	e005      	b.n	80035a4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ef      	beq.n	8003584 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035aa:	4b06      	ldr	r3, [pc, #24]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	4904      	ldr	r1, [pc, #16]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
 80035c8:	07ff800f 	.word	0x07ff800f
 80035cc:	ff9f800f 	.word	0xff9f800f
 80035d0:	f9ff800f 	.word	0xf9ff800f

080035d4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035e2:	4b72      	ldr	r3, [pc, #456]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00e      	beq.n	800360c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035ee:	4b6f      	ldr	r3, [pc, #444]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f003 0203 	and.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d103      	bne.n	8003606 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
       ||
 8003602:	2b00      	cmp	r3, #0
 8003604:	d142      	bne.n	800368c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
 800360a:	e03f      	b.n	800368c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d018      	beq.n	8003646 <RCCEx_PLLSAI2_Config+0x72>
 8003614:	2b03      	cmp	r3, #3
 8003616:	d825      	bhi.n	8003664 <RCCEx_PLLSAI2_Config+0x90>
 8003618:	2b01      	cmp	r3, #1
 800361a:	d002      	beq.n	8003622 <RCCEx_PLLSAI2_Config+0x4e>
 800361c:	2b02      	cmp	r3, #2
 800361e:	d009      	beq.n	8003634 <RCCEx_PLLSAI2_Config+0x60>
 8003620:	e020      	b.n	8003664 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003622:	4b62      	ldr	r3, [pc, #392]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d11d      	bne.n	800366a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003632:	e01a      	b.n	800366a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003634:	4b5d      	ldr	r3, [pc, #372]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363c:	2b00      	cmp	r3, #0
 800363e:	d116      	bne.n	800366e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003644:	e013      	b.n	800366e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003646:	4b59      	ldr	r3, [pc, #356]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10f      	bne.n	8003672 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003652:	4b56      	ldr	r3, [pc, #344]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003662:	e006      	b.n	8003672 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      break;
 8003668:	e004      	b.n	8003674 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800366a:	bf00      	nop
 800366c:	e002      	b.n	8003674 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003672:	bf00      	nop
    }

    if(status == HAL_OK)
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d108      	bne.n	800368c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800367a:	4b4c      	ldr	r3, [pc, #304]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f023 0203 	bic.w	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4949      	ldr	r1, [pc, #292]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003688:	4313      	orrs	r3, r2
 800368a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f040 8086 	bne.w	80037a0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003694:	4b45      	ldr	r3, [pc, #276]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a44      	ldr	r2, [pc, #272]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800369a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a0:	f7fd fe0a 	bl	80012b8 <HAL_GetTick>
 80036a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036a6:	e009      	b.n	80036bc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036a8:	f7fd fe06 	bl	80012b8 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d902      	bls.n	80036bc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	73fb      	strb	r3, [r7, #15]
        break;
 80036ba:	e005      	b.n	80036c8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036bc:	4b3b      	ldr	r3, [pc, #236]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ef      	bne.n	80036a8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d168      	bne.n	80037a0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d113      	bne.n	80036fc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036d4:	4b35      	ldr	r3, [pc, #212]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80036da:	4013      	ands	r3, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6892      	ldr	r2, [r2, #8]
 80036e0:	0211      	lsls	r1, r2, #8
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68d2      	ldr	r2, [r2, #12]
 80036e6:	06d2      	lsls	r2, r2, #27
 80036e8:	4311      	orrs	r1, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6852      	ldr	r2, [r2, #4]
 80036ee:	3a01      	subs	r2, #1
 80036f0:	0112      	lsls	r2, r2, #4
 80036f2:	430a      	orrs	r2, r1
 80036f4:	492d      	ldr	r1, [pc, #180]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	614b      	str	r3, [r1, #20]
 80036fa:	e02d      	b.n	8003758 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d115      	bne.n	800372e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003702:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	4b2b      	ldr	r3, [pc, #172]	; (80037b4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003708:	4013      	ands	r3, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6892      	ldr	r2, [r2, #8]
 800370e:	0211      	lsls	r1, r2, #8
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6912      	ldr	r2, [r2, #16]
 8003714:	0852      	lsrs	r2, r2, #1
 8003716:	3a01      	subs	r2, #1
 8003718:	0552      	lsls	r2, r2, #21
 800371a:	4311      	orrs	r1, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6852      	ldr	r2, [r2, #4]
 8003720:	3a01      	subs	r2, #1
 8003722:	0112      	lsls	r2, r2, #4
 8003724:	430a      	orrs	r2, r1
 8003726:	4921      	ldr	r1, [pc, #132]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003728:	4313      	orrs	r3, r2
 800372a:	614b      	str	r3, [r1, #20]
 800372c:	e014      	b.n	8003758 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800372e:	4b1f      	ldr	r3, [pc, #124]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6892      	ldr	r2, [r2, #8]
 800373a:	0211      	lsls	r1, r2, #8
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6952      	ldr	r2, [r2, #20]
 8003740:	0852      	lsrs	r2, r2, #1
 8003742:	3a01      	subs	r2, #1
 8003744:	0652      	lsls	r2, r2, #25
 8003746:	4311      	orrs	r1, r2
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6852      	ldr	r2, [r2, #4]
 800374c:	3a01      	subs	r2, #1
 800374e:	0112      	lsls	r2, r2, #4
 8003750:	430a      	orrs	r2, r1
 8003752:	4916      	ldr	r1, [pc, #88]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003754:	4313      	orrs	r3, r2
 8003756:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a13      	ldr	r2, [pc, #76]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800375e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003762:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003764:	f7fd fda8 	bl	80012b8 <HAL_GetTick>
 8003768:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800376a:	e009      	b.n	8003780 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800376c:	f7fd fda4 	bl	80012b8 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d902      	bls.n	8003780 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	73fb      	strb	r3, [r7, #15]
          break;
 800377e:	e005      	b.n	800378c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ef      	beq.n	800376c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	4904      	ldr	r1, [pc, #16]	; (80037ac <RCCEx_PLLSAI2_Config+0x1d8>)
 800379c:	4313      	orrs	r3, r2
 800379e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40021000 	.word	0x40021000
 80037b0:	07ff800f 	.word	0x07ff800f
 80037b4:	ff9f800f 	.word	0xff9f800f
 80037b8:	f9ff800f 	.word	0xf9ff800f

080037bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d06c      	beq.n	80038a8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd fa98 	bl	8000d18 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	22ca      	movs	r2, #202	; 0xca
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2253      	movs	r2, #83	; 0x53
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f919 	bl	8003a38 <RTC_EnterInitMode>
 8003806:	4603      	mov	r3, r0
 8003808:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d14b      	bne.n	80038a8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800381e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003822:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6899      	ldr	r1, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68d2      	ldr	r2, [r2, #12]
 800384a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6919      	ldr	r1, [r3, #16]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	041a      	lsls	r2, r3, #16
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f91d 	bl	8003aa0 <RTC_ExitInitMode>
 8003866:	4603      	mov	r3, r0
 8003868:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d11b      	bne.n	80038a8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0203 	bic.w	r2, r2, #3
 800387e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	22ff      	movs	r2, #255	; 0xff
 800389e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038b2:	b590      	push	{r4, r7, lr}
 80038b4:	b087      	sub	sp, #28
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	60b9      	str	r1, [r7, #8]
 80038bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_RTC_SetTime+0x1a>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e08b      	b.n	80039e4 <HAL_RTC_SetTime+0x132>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	22ca      	movs	r2, #202	; 0xca
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2253      	movs	r2, #83	; 0x53
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f8a3 	bl	8003a38 <RTC_EnterInitMode>
 80038f2:	4603      	mov	r3, r0
 80038f4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d163      	bne.n	80039c4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d126      	bne.n	8003950 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2200      	movs	r2, #0
 8003914:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f000 f8fe 	bl	8003b1c <RTC_ByteToBcd2>
 8003920:	4603      	mov	r3, r0
 8003922:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	785b      	ldrb	r3, [r3, #1]
 8003928:	4618      	mov	r0, r3
 800392a:	f000 f8f7 	bl	8003b1c <RTC_ByteToBcd2>
 800392e:	4603      	mov	r3, r0
 8003930:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003932:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	789b      	ldrb	r3, [r3, #2]
 8003938:	4618      	mov	r0, r3
 800393a:	f000 f8ef 	bl	8003b1c <RTC_ByteToBcd2>
 800393e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003940:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	78db      	ldrb	r3, [r3, #3]
 8003948:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	e018      	b.n	8003982 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2200      	movs	r2, #0
 8003962:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	785b      	ldrb	r3, [r3, #1]
 800396e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003970:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003976:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	78db      	ldrb	r3, [r3, #3]
 800397c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800398c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003990:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6899      	ldr	r1, [r3, #8]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	68da      	ldr	r2, [r3, #12]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f870 	bl	8003aa0 <RTC_ExitInitMode>
 80039c0:	4603      	mov	r3, r0
 80039c2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	22ff      	movs	r2, #255	; 0xff
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80039cc:	7cfb      	ldrb	r3, [r7, #19]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d103      	bne.n	80039da <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80039e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd90      	pop	{r4, r7, pc}

080039ec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a02:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003a04:	f7fd fc58 	bl	80012b8 <HAL_GetTick>
 8003a08:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a0a:	e009      	b.n	8003a20 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a0c:	f7fd fc54 	bl	80012b8 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a1a:	d901      	bls.n	8003a20 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e007      	b.n	8003a30 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0ee      	beq.n	8003a0c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d120      	bne.n	8003a94 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003a5c:	f7fd fc2c 	bl	80012b8 <HAL_GetTick>
 8003a60:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003a62:	e00d      	b.n	8003a80 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003a64:	f7fd fc28 	bl	80012b8 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a72:	d905      	bls.n	8003a80 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <RTC_EnterInitMode+0x5c>
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d1e7      	bne.n	8003a64 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003aac:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <RTC_ExitInitMode+0x78>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <RTC_ExitInitMode+0x78>)
 8003ab2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ab6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003ab8:	4b17      	ldr	r3, [pc, #92]	; (8003b18 <RTC_ExitInitMode+0x78>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10c      	bne.n	8003ade <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff91 	bl	80039ec <HAL_RTC_WaitForSynchro>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01e      	beq.n	8003b0e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	73fb      	strb	r3, [r7, #15]
 8003adc:	e017      	b.n	8003b0e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003ade:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <RTC_ExitInitMode+0x78>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	4a0d      	ldr	r2, [pc, #52]	; (8003b18 <RTC_ExitInitMode+0x78>)
 8003ae4:	f023 0320 	bic.w	r3, r3, #32
 8003ae8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff ff7e 	bl	80039ec <HAL_RTC_WaitForSynchro>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2203      	movs	r2, #3
 8003afa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003b02:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <RTC_ExitInitMode+0x78>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <RTC_ExitInitMode+0x78>)
 8003b08:	f043 0320 	orr.w	r3, r3, #32
 8003b0c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40002800 	.word	0x40002800

08003b1c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003b2e:	e005      	b.n	8003b3c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3301      	adds	r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003b36:	7afb      	ldrb	r3, [r7, #11]
 8003b38:	3b0a      	subs	r3, #10
 8003b3a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003b3c:	7afb      	ldrb	r3, [r7, #11]
 8003b3e:	2b09      	cmp	r3, #9
 8003b40:	d8f6      	bhi.n	8003b30 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	7afb      	ldrb	r3, [r7, #11]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	b2db      	uxtb	r3, r3
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e049      	b.n	8003c02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd f8fa 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f000 f9aa 	bl	8003ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e049      	b.n	8003cb0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d106      	bne.n	8003c36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f841 	bl	8003cb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2202      	movs	r2, #2
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3304      	adds	r3, #4
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f000 f953 	bl	8003ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e0ff      	b.n	8003eea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b14      	cmp	r3, #20
 8003cf6:	f200 80f0 	bhi.w	8003eda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cfa:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d00:	08003d55 	.word	0x08003d55
 8003d04:	08003edb 	.word	0x08003edb
 8003d08:	08003edb 	.word	0x08003edb
 8003d0c:	08003edb 	.word	0x08003edb
 8003d10:	08003d95 	.word	0x08003d95
 8003d14:	08003edb 	.word	0x08003edb
 8003d18:	08003edb 	.word	0x08003edb
 8003d1c:	08003edb 	.word	0x08003edb
 8003d20:	08003dd7 	.word	0x08003dd7
 8003d24:	08003edb 	.word	0x08003edb
 8003d28:	08003edb 	.word	0x08003edb
 8003d2c:	08003edb 	.word	0x08003edb
 8003d30:	08003e17 	.word	0x08003e17
 8003d34:	08003edb 	.word	0x08003edb
 8003d38:	08003edb 	.word	0x08003edb
 8003d3c:	08003edb 	.word	0x08003edb
 8003d40:	08003e59 	.word	0x08003e59
 8003d44:	08003edb 	.word	0x08003edb
 8003d48:	08003edb 	.word	0x08003edb
 8003d4c:	08003edb 	.word	0x08003edb
 8003d50:	08003e99 	.word	0x08003e99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f964 	bl	8004028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0208 	orr.w	r2, r2, #8
 8003d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0204 	bic.w	r2, r2, #4
 8003d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6999      	ldr	r1, [r3, #24]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	619a      	str	r2, [r3, #24]
      break;
 8003d92:	e0a5      	b.n	8003ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 f9d4 	bl	8004148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6999      	ldr	r1, [r3, #24]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	021a      	lsls	r2, r3, #8
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	619a      	str	r2, [r3, #24]
      break;
 8003dd4:	e084      	b.n	8003ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fa3d 	bl	800425c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0208 	orr.w	r2, r2, #8
 8003df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0204 	bic.w	r2, r2, #4
 8003e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69d9      	ldr	r1, [r3, #28]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	61da      	str	r2, [r3, #28]
      break;
 8003e14:	e064      	b.n	8003ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 faa5 	bl	800436c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69d9      	ldr	r1, [r3, #28]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	021a      	lsls	r2, r3, #8
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	61da      	str	r2, [r3, #28]
      break;
 8003e56:	e043      	b.n	8003ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 faee 	bl	8004440 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0208 	orr.w	r2, r2, #8
 8003e72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0204 	bic.w	r2, r2, #4
 8003e82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e96:	e023      	b.n	8003ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fb32 	bl	8004508 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	021a      	lsls	r2, r3, #8
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ed8:	e002      	b.n	8003ee0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	75fb      	strb	r3, [r7, #23]
      break;
 8003ede:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop

08003ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a40      	ldr	r2, [pc, #256]	; (8004008 <TIM_Base_SetConfig+0x114>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d013      	beq.n	8003f34 <TIM_Base_SetConfig+0x40>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f12:	d00f      	beq.n	8003f34 <TIM_Base_SetConfig+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a3d      	ldr	r2, [pc, #244]	; (800400c <TIM_Base_SetConfig+0x118>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00b      	beq.n	8003f34 <TIM_Base_SetConfig+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a3c      	ldr	r2, [pc, #240]	; (8004010 <TIM_Base_SetConfig+0x11c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d007      	beq.n	8003f34 <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a3b      	ldr	r2, [pc, #236]	; (8004014 <TIM_Base_SetConfig+0x120>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <TIM_Base_SetConfig+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a3a      	ldr	r2, [pc, #232]	; (8004018 <TIM_Base_SetConfig+0x124>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d108      	bne.n	8003f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a2f      	ldr	r2, [pc, #188]	; (8004008 <TIM_Base_SetConfig+0x114>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01f      	beq.n	8003f8e <TIM_Base_SetConfig+0x9a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f54:	d01b      	beq.n	8003f8e <TIM_Base_SetConfig+0x9a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a2c      	ldr	r2, [pc, #176]	; (800400c <TIM_Base_SetConfig+0x118>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d017      	beq.n	8003f8e <TIM_Base_SetConfig+0x9a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a2b      	ldr	r2, [pc, #172]	; (8004010 <TIM_Base_SetConfig+0x11c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <TIM_Base_SetConfig+0x9a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a2a      	ldr	r2, [pc, #168]	; (8004014 <TIM_Base_SetConfig+0x120>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00f      	beq.n	8003f8e <TIM_Base_SetConfig+0x9a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a29      	ldr	r2, [pc, #164]	; (8004018 <TIM_Base_SetConfig+0x124>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00b      	beq.n	8003f8e <TIM_Base_SetConfig+0x9a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a28      	ldr	r2, [pc, #160]	; (800401c <TIM_Base_SetConfig+0x128>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d007      	beq.n	8003f8e <TIM_Base_SetConfig+0x9a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a27      	ldr	r2, [pc, #156]	; (8004020 <TIM_Base_SetConfig+0x12c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d003      	beq.n	8003f8e <TIM_Base_SetConfig+0x9a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a26      	ldr	r2, [pc, #152]	; (8004024 <TIM_Base_SetConfig+0x130>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d108      	bne.n	8003fa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a10      	ldr	r2, [pc, #64]	; (8004008 <TIM_Base_SetConfig+0x114>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00f      	beq.n	8003fec <TIM_Base_SetConfig+0xf8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a12      	ldr	r2, [pc, #72]	; (8004018 <TIM_Base_SetConfig+0x124>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d00b      	beq.n	8003fec <TIM_Base_SetConfig+0xf8>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a11      	ldr	r2, [pc, #68]	; (800401c <TIM_Base_SetConfig+0x128>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d007      	beq.n	8003fec <TIM_Base_SetConfig+0xf8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a10      	ldr	r2, [pc, #64]	; (8004020 <TIM_Base_SetConfig+0x12c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <TIM_Base_SetConfig+0xf8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a0f      	ldr	r2, [pc, #60]	; (8004024 <TIM_Base_SetConfig+0x130>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d103      	bne.n	8003ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	615a      	str	r2, [r3, #20]
}
 8003ffa:	bf00      	nop
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40012c00 	.word	0x40012c00
 800400c:	40000400 	.word	0x40000400
 8004010:	40000800 	.word	0x40000800
 8004014:	40000c00 	.word	0x40000c00
 8004018:	40013400 	.word	0x40013400
 800401c:	40014000 	.word	0x40014000
 8004020:	40014400 	.word	0x40014400
 8004024:	40014800 	.word	0x40014800

08004028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f023 0201 	bic.w	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f023 0302 	bic.w	r3, r3, #2
 8004074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	4313      	orrs	r3, r2
 800407e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a2c      	ldr	r2, [pc, #176]	; (8004134 <TIM_OC1_SetConfig+0x10c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00f      	beq.n	80040a8 <TIM_OC1_SetConfig+0x80>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a2b      	ldr	r2, [pc, #172]	; (8004138 <TIM_OC1_SetConfig+0x110>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d00b      	beq.n	80040a8 <TIM_OC1_SetConfig+0x80>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a2a      	ldr	r2, [pc, #168]	; (800413c <TIM_OC1_SetConfig+0x114>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d007      	beq.n	80040a8 <TIM_OC1_SetConfig+0x80>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a29      	ldr	r2, [pc, #164]	; (8004140 <TIM_OC1_SetConfig+0x118>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d003      	beq.n	80040a8 <TIM_OC1_SetConfig+0x80>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a28      	ldr	r2, [pc, #160]	; (8004144 <TIM_OC1_SetConfig+0x11c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d10c      	bne.n	80040c2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f023 0308 	bic.w	r3, r3, #8
 80040ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f023 0304 	bic.w	r3, r3, #4
 80040c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a1b      	ldr	r2, [pc, #108]	; (8004134 <TIM_OC1_SetConfig+0x10c>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d00f      	beq.n	80040ea <TIM_OC1_SetConfig+0xc2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a1a      	ldr	r2, [pc, #104]	; (8004138 <TIM_OC1_SetConfig+0x110>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00b      	beq.n	80040ea <TIM_OC1_SetConfig+0xc2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a19      	ldr	r2, [pc, #100]	; (800413c <TIM_OC1_SetConfig+0x114>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d007      	beq.n	80040ea <TIM_OC1_SetConfig+0xc2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a18      	ldr	r2, [pc, #96]	; (8004140 <TIM_OC1_SetConfig+0x118>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d003      	beq.n	80040ea <TIM_OC1_SetConfig+0xc2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a17      	ldr	r2, [pc, #92]	; (8004144 <TIM_OC1_SetConfig+0x11c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d111      	bne.n	800410e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	621a      	str	r2, [r3, #32]
}
 8004128:	bf00      	nop
 800412a:	371c      	adds	r7, #28
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	40012c00 	.word	0x40012c00
 8004138:	40013400 	.word	0x40013400
 800413c:	40014000 	.word	0x40014000
 8004140:	40014400 	.word	0x40014400
 8004144:	40014800 	.word	0x40014800

08004148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f023 0210 	bic.w	r2, r3, #16
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f023 0320 	bic.w	r3, r3, #32
 8004196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a28      	ldr	r2, [pc, #160]	; (8004248 <TIM_OC2_SetConfig+0x100>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_OC2_SetConfig+0x6c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a27      	ldr	r2, [pc, #156]	; (800424c <TIM_OC2_SetConfig+0x104>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d10d      	bne.n	80041d0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a1d      	ldr	r2, [pc, #116]	; (8004248 <TIM_OC2_SetConfig+0x100>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d00f      	beq.n	80041f8 <TIM_OC2_SetConfig+0xb0>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a1c      	ldr	r2, [pc, #112]	; (800424c <TIM_OC2_SetConfig+0x104>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00b      	beq.n	80041f8 <TIM_OC2_SetConfig+0xb0>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <TIM_OC2_SetConfig+0x108>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d007      	beq.n	80041f8 <TIM_OC2_SetConfig+0xb0>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a1a      	ldr	r2, [pc, #104]	; (8004254 <TIM_OC2_SetConfig+0x10c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_OC2_SetConfig+0xb0>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a19      	ldr	r2, [pc, #100]	; (8004258 <TIM_OC2_SetConfig+0x110>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d113      	bne.n	8004220 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	621a      	str	r2, [r3, #32]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40013400 	.word	0x40013400
 8004250:	40014000 	.word	0x40014000
 8004254:	40014400 	.word	0x40014400
 8004258:	40014800 	.word	0x40014800

0800425c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0303 	bic.w	r3, r3, #3
 8004296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a27      	ldr	r2, [pc, #156]	; (8004358 <TIM_OC3_SetConfig+0xfc>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d003      	beq.n	80042c6 <TIM_OC3_SetConfig+0x6a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a26      	ldr	r2, [pc, #152]	; (800435c <TIM_OC3_SetConfig+0x100>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d10d      	bne.n	80042e2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <TIM_OC3_SetConfig+0xfc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00f      	beq.n	800430a <TIM_OC3_SetConfig+0xae>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a1b      	ldr	r2, [pc, #108]	; (800435c <TIM_OC3_SetConfig+0x100>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00b      	beq.n	800430a <TIM_OC3_SetConfig+0xae>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a1a      	ldr	r2, [pc, #104]	; (8004360 <TIM_OC3_SetConfig+0x104>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d007      	beq.n	800430a <TIM_OC3_SetConfig+0xae>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a19      	ldr	r2, [pc, #100]	; (8004364 <TIM_OC3_SetConfig+0x108>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d003      	beq.n	800430a <TIM_OC3_SetConfig+0xae>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a18      	ldr	r2, [pc, #96]	; (8004368 <TIM_OC3_SetConfig+0x10c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d113      	bne.n	8004332 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	621a      	str	r2, [r3, #32]
}
 800434c:	bf00      	nop
 800434e:	371c      	adds	r7, #28
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	40012c00 	.word	0x40012c00
 800435c:	40013400 	.word	0x40013400
 8004360:	40014000 	.word	0x40014000
 8004364:	40014400 	.word	0x40014400
 8004368:	40014800 	.word	0x40014800

0800436c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800439a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800439e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	031b      	lsls	r3, r3, #12
 80043c2:	693a      	ldr	r2, [r7, #16]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a18      	ldr	r2, [pc, #96]	; (800442c <TIM_OC4_SetConfig+0xc0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00f      	beq.n	80043f0 <TIM_OC4_SetConfig+0x84>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a17      	ldr	r2, [pc, #92]	; (8004430 <TIM_OC4_SetConfig+0xc4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00b      	beq.n	80043f0 <TIM_OC4_SetConfig+0x84>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a16      	ldr	r2, [pc, #88]	; (8004434 <TIM_OC4_SetConfig+0xc8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d007      	beq.n	80043f0 <TIM_OC4_SetConfig+0x84>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a15      	ldr	r2, [pc, #84]	; (8004438 <TIM_OC4_SetConfig+0xcc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d003      	beq.n	80043f0 <TIM_OC4_SetConfig+0x84>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a14      	ldr	r2, [pc, #80]	; (800443c <TIM_OC4_SetConfig+0xd0>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d109      	bne.n	8004404 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	019b      	lsls	r3, r3, #6
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	621a      	str	r2, [r3, #32]
}
 800441e:	bf00      	nop
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40012c00 	.word	0x40012c00
 8004430:	40013400 	.word	0x40013400
 8004434:	40014000 	.word	0x40014000
 8004438:	40014400 	.word	0x40014400
 800443c:	40014800 	.word	0x40014800

08004440 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800446e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004484:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	041b      	lsls	r3, r3, #16
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a17      	ldr	r2, [pc, #92]	; (80044f4 <TIM_OC5_SetConfig+0xb4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d00f      	beq.n	80044ba <TIM_OC5_SetConfig+0x7a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <TIM_OC5_SetConfig+0xb8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00b      	beq.n	80044ba <TIM_OC5_SetConfig+0x7a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a15      	ldr	r2, [pc, #84]	; (80044fc <TIM_OC5_SetConfig+0xbc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d007      	beq.n	80044ba <TIM_OC5_SetConfig+0x7a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a14      	ldr	r2, [pc, #80]	; (8004500 <TIM_OC5_SetConfig+0xc0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d003      	beq.n	80044ba <TIM_OC5_SetConfig+0x7a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a13      	ldr	r2, [pc, #76]	; (8004504 <TIM_OC5_SetConfig+0xc4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d109      	bne.n	80044ce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	021b      	lsls	r3, r3, #8
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	621a      	str	r2, [r3, #32]
}
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40013400 	.word	0x40013400
 80044fc:	40014000 	.word	0x40014000
 8004500:	40014400 	.word	0x40014400
 8004504:	40014800 	.word	0x40014800

08004508 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004536:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800453a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800454e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	051b      	lsls	r3, r3, #20
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <TIM_OC6_SetConfig+0xb8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d00f      	beq.n	8004584 <TIM_OC6_SetConfig+0x7c>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a17      	ldr	r2, [pc, #92]	; (80045c4 <TIM_OC6_SetConfig+0xbc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00b      	beq.n	8004584 <TIM_OC6_SetConfig+0x7c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a16      	ldr	r2, [pc, #88]	; (80045c8 <TIM_OC6_SetConfig+0xc0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d007      	beq.n	8004584 <TIM_OC6_SetConfig+0x7c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a15      	ldr	r2, [pc, #84]	; (80045cc <TIM_OC6_SetConfig+0xc4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_OC6_SetConfig+0x7c>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <TIM_OC6_SetConfig+0xc8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d109      	bne.n	8004598 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800458a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	029b      	lsls	r3, r3, #10
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	621a      	str	r2, [r3, #32]
}
 80045b2:	bf00      	nop
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40013400 	.word	0x40013400
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800

080045d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d101      	bne.n	80045f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045ec:	2302      	movs	r3, #2
 80045ee:	e065      	b.n	80046bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	4313      	orrs	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	041b      	lsls	r3, r3, #16
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a16      	ldr	r2, [pc, #88]	; (80046c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d004      	beq.n	800467e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a14      	ldr	r2, [pc, #80]	; (80046cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d115      	bne.n	80046aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	051b      	lsls	r3, r3, #20
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40013400 	.word	0x40013400

080046d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e042      	b.n	8004768 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7fc fb97 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2224      	movs	r2, #36	; 0x24
 80046fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0201 	bic.w	r2, r2, #1
 8004710:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f82c 	bl	8004770 <UART_SetConfig>
 8004718:	4603      	mov	r3, r0
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e022      	b.n	8004768 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fae8 	bl	8004d00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800473e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800474e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fb6f 	bl	8004e44 <UART_CheckIdleState>
 8004766:	4603      	mov	r3, r0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004770:	b5b0      	push	{r4, r5, r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004778:	2300      	movs	r3, #0
 800477a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	4313      	orrs	r3, r2
 8004792:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	4bb1      	ldr	r3, [pc, #708]	; (8004a60 <UART_SetConfig+0x2f0>)
 800479c:	4013      	ands	r3, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	69f9      	ldr	r1, [r7, #28]
 80047a4:	430b      	orrs	r3, r1
 80047a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4aa6      	ldr	r2, [pc, #664]	; (8004a64 <UART_SetConfig+0x2f4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d004      	beq.n	80047d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80047e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	69f9      	ldr	r1, [r7, #28]
 80047ec:	430b      	orrs	r3, r1
 80047ee:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	f023 010f 	bic.w	r1, r3, #15
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a97      	ldr	r2, [pc, #604]	; (8004a68 <UART_SetConfig+0x2f8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d120      	bne.n	8004852 <UART_SetConfig+0xe2>
 8004810:	4b96      	ldr	r3, [pc, #600]	; (8004a6c <UART_SetConfig+0x2fc>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b03      	cmp	r3, #3
 800481c:	d816      	bhi.n	800484c <UART_SetConfig+0xdc>
 800481e:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <UART_SetConfig+0xb4>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	08004835 	.word	0x08004835
 8004828:	08004841 	.word	0x08004841
 800482c:	0800483b 	.word	0x0800483b
 8004830:	08004847 	.word	0x08004847
 8004834:	2301      	movs	r3, #1
 8004836:	76fb      	strb	r3, [r7, #27]
 8004838:	e0e7      	b.n	8004a0a <UART_SetConfig+0x29a>
 800483a:	2302      	movs	r3, #2
 800483c:	76fb      	strb	r3, [r7, #27]
 800483e:	e0e4      	b.n	8004a0a <UART_SetConfig+0x29a>
 8004840:	2304      	movs	r3, #4
 8004842:	76fb      	strb	r3, [r7, #27]
 8004844:	e0e1      	b.n	8004a0a <UART_SetConfig+0x29a>
 8004846:	2308      	movs	r3, #8
 8004848:	76fb      	strb	r3, [r7, #27]
 800484a:	e0de      	b.n	8004a0a <UART_SetConfig+0x29a>
 800484c:	2310      	movs	r3, #16
 800484e:	76fb      	strb	r3, [r7, #27]
 8004850:	e0db      	b.n	8004a0a <UART_SetConfig+0x29a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a86      	ldr	r2, [pc, #536]	; (8004a70 <UART_SetConfig+0x300>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d132      	bne.n	80048c2 <UART_SetConfig+0x152>
 800485c:	4b83      	ldr	r3, [pc, #524]	; (8004a6c <UART_SetConfig+0x2fc>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f003 030c 	and.w	r3, r3, #12
 8004866:	2b0c      	cmp	r3, #12
 8004868:	d828      	bhi.n	80048bc <UART_SetConfig+0x14c>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <UART_SetConfig+0x100>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	080048a5 	.word	0x080048a5
 8004874:	080048bd 	.word	0x080048bd
 8004878:	080048bd 	.word	0x080048bd
 800487c:	080048bd 	.word	0x080048bd
 8004880:	080048b1 	.word	0x080048b1
 8004884:	080048bd 	.word	0x080048bd
 8004888:	080048bd 	.word	0x080048bd
 800488c:	080048bd 	.word	0x080048bd
 8004890:	080048ab 	.word	0x080048ab
 8004894:	080048bd 	.word	0x080048bd
 8004898:	080048bd 	.word	0x080048bd
 800489c:	080048bd 	.word	0x080048bd
 80048a0:	080048b7 	.word	0x080048b7
 80048a4:	2300      	movs	r3, #0
 80048a6:	76fb      	strb	r3, [r7, #27]
 80048a8:	e0af      	b.n	8004a0a <UART_SetConfig+0x29a>
 80048aa:	2302      	movs	r3, #2
 80048ac:	76fb      	strb	r3, [r7, #27]
 80048ae:	e0ac      	b.n	8004a0a <UART_SetConfig+0x29a>
 80048b0:	2304      	movs	r3, #4
 80048b2:	76fb      	strb	r3, [r7, #27]
 80048b4:	e0a9      	b.n	8004a0a <UART_SetConfig+0x29a>
 80048b6:	2308      	movs	r3, #8
 80048b8:	76fb      	strb	r3, [r7, #27]
 80048ba:	e0a6      	b.n	8004a0a <UART_SetConfig+0x29a>
 80048bc:	2310      	movs	r3, #16
 80048be:	76fb      	strb	r3, [r7, #27]
 80048c0:	e0a3      	b.n	8004a0a <UART_SetConfig+0x29a>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a6b      	ldr	r2, [pc, #428]	; (8004a74 <UART_SetConfig+0x304>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d120      	bne.n	800490e <UART_SetConfig+0x19e>
 80048cc:	4b67      	ldr	r3, [pc, #412]	; (8004a6c <UART_SetConfig+0x2fc>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048d6:	2b30      	cmp	r3, #48	; 0x30
 80048d8:	d013      	beq.n	8004902 <UART_SetConfig+0x192>
 80048da:	2b30      	cmp	r3, #48	; 0x30
 80048dc:	d814      	bhi.n	8004908 <UART_SetConfig+0x198>
 80048de:	2b20      	cmp	r3, #32
 80048e0:	d009      	beq.n	80048f6 <UART_SetConfig+0x186>
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d810      	bhi.n	8004908 <UART_SetConfig+0x198>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <UART_SetConfig+0x180>
 80048ea:	2b10      	cmp	r3, #16
 80048ec:	d006      	beq.n	80048fc <UART_SetConfig+0x18c>
 80048ee:	e00b      	b.n	8004908 <UART_SetConfig+0x198>
 80048f0:	2300      	movs	r3, #0
 80048f2:	76fb      	strb	r3, [r7, #27]
 80048f4:	e089      	b.n	8004a0a <UART_SetConfig+0x29a>
 80048f6:	2302      	movs	r3, #2
 80048f8:	76fb      	strb	r3, [r7, #27]
 80048fa:	e086      	b.n	8004a0a <UART_SetConfig+0x29a>
 80048fc:	2304      	movs	r3, #4
 80048fe:	76fb      	strb	r3, [r7, #27]
 8004900:	e083      	b.n	8004a0a <UART_SetConfig+0x29a>
 8004902:	2308      	movs	r3, #8
 8004904:	76fb      	strb	r3, [r7, #27]
 8004906:	e080      	b.n	8004a0a <UART_SetConfig+0x29a>
 8004908:	2310      	movs	r3, #16
 800490a:	76fb      	strb	r3, [r7, #27]
 800490c:	e07d      	b.n	8004a0a <UART_SetConfig+0x29a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a59      	ldr	r2, [pc, #356]	; (8004a78 <UART_SetConfig+0x308>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d120      	bne.n	800495a <UART_SetConfig+0x1ea>
 8004918:	4b54      	ldr	r3, [pc, #336]	; (8004a6c <UART_SetConfig+0x2fc>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004922:	2bc0      	cmp	r3, #192	; 0xc0
 8004924:	d013      	beq.n	800494e <UART_SetConfig+0x1de>
 8004926:	2bc0      	cmp	r3, #192	; 0xc0
 8004928:	d814      	bhi.n	8004954 <UART_SetConfig+0x1e4>
 800492a:	2b80      	cmp	r3, #128	; 0x80
 800492c:	d009      	beq.n	8004942 <UART_SetConfig+0x1d2>
 800492e:	2b80      	cmp	r3, #128	; 0x80
 8004930:	d810      	bhi.n	8004954 <UART_SetConfig+0x1e4>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <UART_SetConfig+0x1cc>
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d006      	beq.n	8004948 <UART_SetConfig+0x1d8>
 800493a:	e00b      	b.n	8004954 <UART_SetConfig+0x1e4>
 800493c:	2300      	movs	r3, #0
 800493e:	76fb      	strb	r3, [r7, #27]
 8004940:	e063      	b.n	8004a0a <UART_SetConfig+0x29a>
 8004942:	2302      	movs	r3, #2
 8004944:	76fb      	strb	r3, [r7, #27]
 8004946:	e060      	b.n	8004a0a <UART_SetConfig+0x29a>
 8004948:	2304      	movs	r3, #4
 800494a:	76fb      	strb	r3, [r7, #27]
 800494c:	e05d      	b.n	8004a0a <UART_SetConfig+0x29a>
 800494e:	2308      	movs	r3, #8
 8004950:	76fb      	strb	r3, [r7, #27]
 8004952:	e05a      	b.n	8004a0a <UART_SetConfig+0x29a>
 8004954:	2310      	movs	r3, #16
 8004956:	76fb      	strb	r3, [r7, #27]
 8004958:	e057      	b.n	8004a0a <UART_SetConfig+0x29a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a47      	ldr	r2, [pc, #284]	; (8004a7c <UART_SetConfig+0x30c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d125      	bne.n	80049b0 <UART_SetConfig+0x240>
 8004964:	4b41      	ldr	r3, [pc, #260]	; (8004a6c <UART_SetConfig+0x2fc>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800496e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004972:	d017      	beq.n	80049a4 <UART_SetConfig+0x234>
 8004974:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004978:	d817      	bhi.n	80049aa <UART_SetConfig+0x23a>
 800497a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800497e:	d00b      	beq.n	8004998 <UART_SetConfig+0x228>
 8004980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004984:	d811      	bhi.n	80049aa <UART_SetConfig+0x23a>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <UART_SetConfig+0x222>
 800498a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800498e:	d006      	beq.n	800499e <UART_SetConfig+0x22e>
 8004990:	e00b      	b.n	80049aa <UART_SetConfig+0x23a>
 8004992:	2300      	movs	r3, #0
 8004994:	76fb      	strb	r3, [r7, #27]
 8004996:	e038      	b.n	8004a0a <UART_SetConfig+0x29a>
 8004998:	2302      	movs	r3, #2
 800499a:	76fb      	strb	r3, [r7, #27]
 800499c:	e035      	b.n	8004a0a <UART_SetConfig+0x29a>
 800499e:	2304      	movs	r3, #4
 80049a0:	76fb      	strb	r3, [r7, #27]
 80049a2:	e032      	b.n	8004a0a <UART_SetConfig+0x29a>
 80049a4:	2308      	movs	r3, #8
 80049a6:	76fb      	strb	r3, [r7, #27]
 80049a8:	e02f      	b.n	8004a0a <UART_SetConfig+0x29a>
 80049aa:	2310      	movs	r3, #16
 80049ac:	76fb      	strb	r3, [r7, #27]
 80049ae:	e02c      	b.n	8004a0a <UART_SetConfig+0x29a>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a2b      	ldr	r2, [pc, #172]	; (8004a64 <UART_SetConfig+0x2f4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d125      	bne.n	8004a06 <UART_SetConfig+0x296>
 80049ba:	4b2c      	ldr	r3, [pc, #176]	; (8004a6c <UART_SetConfig+0x2fc>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049c8:	d017      	beq.n	80049fa <UART_SetConfig+0x28a>
 80049ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049ce:	d817      	bhi.n	8004a00 <UART_SetConfig+0x290>
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d4:	d00b      	beq.n	80049ee <UART_SetConfig+0x27e>
 80049d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049da:	d811      	bhi.n	8004a00 <UART_SetConfig+0x290>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d003      	beq.n	80049e8 <UART_SetConfig+0x278>
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e4:	d006      	beq.n	80049f4 <UART_SetConfig+0x284>
 80049e6:	e00b      	b.n	8004a00 <UART_SetConfig+0x290>
 80049e8:	2300      	movs	r3, #0
 80049ea:	76fb      	strb	r3, [r7, #27]
 80049ec:	e00d      	b.n	8004a0a <UART_SetConfig+0x29a>
 80049ee:	2302      	movs	r3, #2
 80049f0:	76fb      	strb	r3, [r7, #27]
 80049f2:	e00a      	b.n	8004a0a <UART_SetConfig+0x29a>
 80049f4:	2304      	movs	r3, #4
 80049f6:	76fb      	strb	r3, [r7, #27]
 80049f8:	e007      	b.n	8004a0a <UART_SetConfig+0x29a>
 80049fa:	2308      	movs	r3, #8
 80049fc:	76fb      	strb	r3, [r7, #27]
 80049fe:	e004      	b.n	8004a0a <UART_SetConfig+0x29a>
 8004a00:	2310      	movs	r3, #16
 8004a02:	76fb      	strb	r3, [r7, #27]
 8004a04:	e001      	b.n	8004a0a <UART_SetConfig+0x29a>
 8004a06:	2310      	movs	r3, #16
 8004a08:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a15      	ldr	r2, [pc, #84]	; (8004a64 <UART_SetConfig+0x2f4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	f040 809f 	bne.w	8004b54 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a16:	7efb      	ldrb	r3, [r7, #27]
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d837      	bhi.n	8004a8c <UART_SetConfig+0x31c>
 8004a1c:	a201      	add	r2, pc, #4	; (adr r2, 8004a24 <UART_SetConfig+0x2b4>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004a49 	.word	0x08004a49
 8004a28:	08004a8d 	.word	0x08004a8d
 8004a2c:	08004a51 	.word	0x08004a51
 8004a30:	08004a8d 	.word	0x08004a8d
 8004a34:	08004a57 	.word	0x08004a57
 8004a38:	08004a8d 	.word	0x08004a8d
 8004a3c:	08004a8d 	.word	0x08004a8d
 8004a40:	08004a8d 	.word	0x08004a8d
 8004a44:	08004a85 	.word	0x08004a85
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a48:	f7fe f842 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8004a4c:	6178      	str	r0, [r7, #20]
        break;
 8004a4e:	e022      	b.n	8004a96 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <UART_SetConfig+0x310>)
 8004a52:	617b      	str	r3, [r7, #20]
        break;
 8004a54:	e01f      	b.n	8004a96 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a56:	f7fd ffa3 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8004a5a:	6178      	str	r0, [r7, #20]
        break;
 8004a5c:	e01b      	b.n	8004a96 <UART_SetConfig+0x326>
 8004a5e:	bf00      	nop
 8004a60:	cfff69f3 	.word	0xcfff69f3
 8004a64:	40008000 	.word	0x40008000
 8004a68:	40013800 	.word	0x40013800
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	40004400 	.word	0x40004400
 8004a74:	40004800 	.word	0x40004800
 8004a78:	40004c00 	.word	0x40004c00
 8004a7c:	40005000 	.word	0x40005000
 8004a80:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a88:	617b      	str	r3, [r7, #20]
        break;
 8004a8a:	e004      	b.n	8004a96 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	76bb      	strb	r3, [r7, #26]
        break;
 8004a94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8119 	beq.w	8004cd0 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	4a95      	ldr	r2, [pc, #596]	; (8004cf8 <UART_SetConfig+0x588>)
 8004aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ab0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	4413      	add	r3, r2
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d305      	bcc.n	8004ace <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d902      	bls.n	8004ad4 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	76bb      	strb	r3, [r7, #26]
 8004ad2:	e0fd      	b.n	8004cd0 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f04f 0100 	mov.w	r1, #0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	4a85      	ldr	r2, [pc, #532]	; (8004cf8 <UART_SetConfig+0x588>)
 8004ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	f7fb fb86 	bl	80001fc <__aeabi_uldivmod>
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	4610      	mov	r0, r2
 8004af6:	4619      	mov	r1, r3
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	020b      	lsls	r3, r1, #8
 8004b02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b06:	0202      	lsls	r2, r0, #8
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	6849      	ldr	r1, [r1, #4]
 8004b0c:	0849      	lsrs	r1, r1, #1
 8004b0e:	4608      	mov	r0, r1
 8004b10:	f04f 0100 	mov.w	r1, #0
 8004b14:	1814      	adds	r4, r2, r0
 8004b16:	eb43 0501 	adc.w	r5, r3, r1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	4620      	mov	r0, r4
 8004b26:	4629      	mov	r1, r5
 8004b28:	f7fb fb68 	bl	80001fc <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4613      	mov	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b3a:	d308      	bcc.n	8004b4e <UART_SetConfig+0x3de>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b42:	d204      	bcs.n	8004b4e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	60da      	str	r2, [r3, #12]
 8004b4c:	e0c0      	b.n	8004cd0 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	76bb      	strb	r3, [r7, #26]
 8004b52:	e0bd      	b.n	8004cd0 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b5c:	d164      	bne.n	8004c28 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8004b5e:	7efb      	ldrb	r3, [r7, #27]
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d828      	bhi.n	8004bb6 <UART_SetConfig+0x446>
 8004b64:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <UART_SetConfig+0x3fc>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004b91 	.word	0x08004b91
 8004b70:	08004b99 	.word	0x08004b99
 8004b74:	08004ba1 	.word	0x08004ba1
 8004b78:	08004bb7 	.word	0x08004bb7
 8004b7c:	08004ba7 	.word	0x08004ba7
 8004b80:	08004bb7 	.word	0x08004bb7
 8004b84:	08004bb7 	.word	0x08004bb7
 8004b88:	08004bb7 	.word	0x08004bb7
 8004b8c:	08004baf 	.word	0x08004baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b90:	f7fd ff9e 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8004b94:	6178      	str	r0, [r7, #20]
        break;
 8004b96:	e013      	b.n	8004bc0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b98:	f7fd ffb0 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 8004b9c:	6178      	str	r0, [r7, #20]
        break;
 8004b9e:	e00f      	b.n	8004bc0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ba0:	4b56      	ldr	r3, [pc, #344]	; (8004cfc <UART_SetConfig+0x58c>)
 8004ba2:	617b      	str	r3, [r7, #20]
        break;
 8004ba4:	e00c      	b.n	8004bc0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ba6:	f7fd fefb 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8004baa:	6178      	str	r0, [r7, #20]
        break;
 8004bac:	e008      	b.n	8004bc0 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bb2:	617b      	str	r3, [r7, #20]
        break;
 8004bb4:	e004      	b.n	8004bc0 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	76bb      	strb	r3, [r7, #26]
        break;
 8004bbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8084 	beq.w	8004cd0 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	4a4a      	ldr	r2, [pc, #296]	; (8004cf8 <UART_SetConfig+0x588>)
 8004bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bda:	005a      	lsls	r2, r3, #1
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	085b      	lsrs	r3, r3, #1
 8004be2:	441a      	add	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b0f      	cmp	r3, #15
 8004bf2:	d916      	bls.n	8004c22 <UART_SetConfig+0x4b2>
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfa:	d212      	bcs.n	8004c22 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	f023 030f 	bic.w	r3, r3, #15
 8004c04:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	085b      	lsrs	r3, r3, #1
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	89fb      	ldrh	r3, [r7, #14]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	89fa      	ldrh	r2, [r7, #14]
 8004c1e:	60da      	str	r2, [r3, #12]
 8004c20:	e056      	b.n	8004cd0 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	76bb      	strb	r3, [r7, #26]
 8004c26:	e053      	b.n	8004cd0 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c28:	7efb      	ldrb	r3, [r7, #27]
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d827      	bhi.n	8004c7e <UART_SetConfig+0x50e>
 8004c2e:	a201      	add	r2, pc, #4	; (adr r2, 8004c34 <UART_SetConfig+0x4c4>)
 8004c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c34:	08004c59 	.word	0x08004c59
 8004c38:	08004c61 	.word	0x08004c61
 8004c3c:	08004c69 	.word	0x08004c69
 8004c40:	08004c7f 	.word	0x08004c7f
 8004c44:	08004c6f 	.word	0x08004c6f
 8004c48:	08004c7f 	.word	0x08004c7f
 8004c4c:	08004c7f 	.word	0x08004c7f
 8004c50:	08004c7f 	.word	0x08004c7f
 8004c54:	08004c77 	.word	0x08004c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c58:	f7fd ff3a 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8004c5c:	6178      	str	r0, [r7, #20]
        break;
 8004c5e:	e013      	b.n	8004c88 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c60:	f7fd ff4c 	bl	8002afc <HAL_RCC_GetPCLK2Freq>
 8004c64:	6178      	str	r0, [r7, #20]
        break;
 8004c66:	e00f      	b.n	8004c88 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c68:	4b24      	ldr	r3, [pc, #144]	; (8004cfc <UART_SetConfig+0x58c>)
 8004c6a:	617b      	str	r3, [r7, #20]
        break;
 8004c6c:	e00c      	b.n	8004c88 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c6e:	f7fd fe97 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8004c72:	6178      	str	r0, [r7, #20]
        break;
 8004c74:	e008      	b.n	8004c88 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7a:	617b      	str	r3, [r7, #20]
        break;
 8004c7c:	e004      	b.n	8004c88 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	76bb      	strb	r3, [r7, #26]
        break;
 8004c86:	bf00      	nop
    }

    if (pclk != 0U)
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d020      	beq.n	8004cd0 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	4a19      	ldr	r2, [pc, #100]	; (8004cf8 <UART_SetConfig+0x588>)
 8004c94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	085b      	lsrs	r3, r3, #1
 8004ca6:	441a      	add	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b0f      	cmp	r3, #15
 8004cb6:	d909      	bls.n	8004ccc <UART_SetConfig+0x55c>
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbe:	d205      	bcs.n	8004ccc <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	60da      	str	r2, [r3, #12]
 8004cca:	e001      	b.n	8004cd0 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004cec:	7ebb      	ldrb	r3, [r7, #26]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	08005888 	.word	0x08005888
 8004cfc:	00f42400 	.word	0x00f42400

08004d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01a      	beq.n	8004e16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dfe:	d10a      	bne.n	8004e16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	605a      	str	r2, [r3, #4]
  }
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e54:	f7fc fa30 	bl	80012b8 <HAL_GetTick>
 8004e58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d10e      	bne.n	8004e86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f82f 	bl	8004eda <UART_WaitOnFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e025      	b.n	8004ed2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d10e      	bne.n	8004eb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f819 	bl	8004eda <UART_WaitOnFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e00f      	b.n	8004ed2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b09c      	sub	sp, #112	; 0x70
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	603b      	str	r3, [r7, #0]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eea:	e0a9      	b.n	8005040 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	f000 80a5 	beq.w	8005040 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef6:	f7fc f9df 	bl	80012b8 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d302      	bcc.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x32>
 8004f06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d140      	bne.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f14:	e853 3f00 	ldrex	r3, [r3]
 8004f18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f20:	667b      	str	r3, [r7, #100]	; 0x64
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f2c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f32:	e841 2300 	strex	r3, r2, [r1]
 8004f36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1e6      	bne.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3308      	adds	r3, #8
 8004f44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	663b      	str	r3, [r7, #96]	; 0x60
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1e5      	bne.n	8004f3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e069      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d051      	beq.n	8005040 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004faa:	d149      	bne.n	8005040 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fb4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	e853 3f00 	ldrex	r3, [r3]
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e6      	bne.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3308      	adds	r3, #8
 8004fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f023 0301 	bic.w	r3, r3, #1
 8004ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3308      	adds	r3, #8
 8005006:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005008:	623a      	str	r2, [r7, #32]
 800500a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	69f9      	ldr	r1, [r7, #28]
 800500e:	6a3a      	ldr	r2, [r7, #32]
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	61bb      	str	r3, [r7, #24]
   return(result);
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e5      	bne.n	8004fe8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e010      	b.n	8005062 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69da      	ldr	r2, [r3, #28]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	4013      	ands	r3, r2
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	429a      	cmp	r2, r3
 800504e:	bf0c      	ite	eq
 8005050:	2301      	moveq	r3, #1
 8005052:	2300      	movne	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	79fb      	ldrb	r3, [r7, #7]
 800505a:	429a      	cmp	r2, r3
 800505c:	f43f af46 	beq.w	8004eec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3770      	adds	r7, #112	; 0x70
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800506a:	b480      	push	{r7}
 800506c:	b085      	sub	sp, #20
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005078:	2b01      	cmp	r3, #1
 800507a:	d101      	bne.n	8005080 <HAL_UARTEx_DisableFifoMode+0x16>
 800507c:	2302      	movs	r3, #2
 800507e:	e027      	b.n	80050d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2224      	movs	r2, #36	; 0x24
 800508c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d101      	bne.n	80050f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050f0:	2302      	movs	r3, #2
 80050f2:	e02d      	b.n	8005150 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2224      	movs	r2, #36	; 0x24
 8005100:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0201 	bic.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f84f 	bl	80051d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e02d      	b.n	80051cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2224      	movs	r2, #36	; 0x24
 800517c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f811 	bl	80051d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2220      	movs	r2, #32
 80051be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d108      	bne.n	80051f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80051f4:	e031      	b.n	800525a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80051f6:	2308      	movs	r3, #8
 80051f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051fa:	2308      	movs	r3, #8
 80051fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	0e5b      	lsrs	r3, r3, #25
 8005206:	b2db      	uxtb	r3, r3
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	0f5b      	lsrs	r3, r3, #29
 8005216:	b2db      	uxtb	r3, r3
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800521e:	7bbb      	ldrb	r3, [r7, #14]
 8005220:	7b3a      	ldrb	r2, [r7, #12]
 8005222:	4911      	ldr	r1, [pc, #68]	; (8005268 <UARTEx_SetNbDataToProcess+0x94>)
 8005224:	5c8a      	ldrb	r2, [r1, r2]
 8005226:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800522a:	7b3a      	ldrb	r2, [r7, #12]
 800522c:	490f      	ldr	r1, [pc, #60]	; (800526c <UARTEx_SetNbDataToProcess+0x98>)
 800522e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005230:	fb93 f3f2 	sdiv	r3, r3, r2
 8005234:	b29a      	uxth	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800523c:	7bfb      	ldrb	r3, [r7, #15]
 800523e:	7b7a      	ldrb	r2, [r7, #13]
 8005240:	4909      	ldr	r1, [pc, #36]	; (8005268 <UARTEx_SetNbDataToProcess+0x94>)
 8005242:	5c8a      	ldrb	r2, [r1, r2]
 8005244:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005248:	7b7a      	ldrb	r2, [r7, #13]
 800524a:	4908      	ldr	r1, [pc, #32]	; (800526c <UARTEx_SetNbDataToProcess+0x98>)
 800524c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800524e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005252:	b29a      	uxth	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	080058a0 	.word	0x080058a0
 800526c:	080058a8 	.word	0x080058a8

08005270 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005270:	b084      	sub	sp, #16
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	f107 001c 	add.w	r0, r7, #28
 800527e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fa6c 	bl	800576c <USB_CoreReset>
 8005294:	4603      	mov	r3, r0
 8005296:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	639a      	str	r2, [r3, #56]	; 0x38
 80052aa:	e005      	b.n	80052b8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052c4:	b004      	add	sp, #16
 80052c6:	4770      	bx	lr

080052c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f023 0201 	bic.w	r2, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	460b      	mov	r3, r1
 80052f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005306:	78fb      	ldrb	r3, [r7, #3]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d115      	bne.n	8005338 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005318:	2001      	movs	r0, #1
 800531a:	f7fb ffd9 	bl	80012d0 <HAL_Delay>
      ms++;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3301      	adds	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fa13 	bl	8005750 <USB_GetMode>
 800532a:	4603      	mov	r3, r0
 800532c:	2b01      	cmp	r3, #1
 800532e:	d01e      	beq.n	800536e <USB_SetCurrentMode+0x84>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b31      	cmp	r3, #49	; 0x31
 8005334:	d9f0      	bls.n	8005318 <USB_SetCurrentMode+0x2e>
 8005336:	e01a      	b.n	800536e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d115      	bne.n	800536a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800534a:	2001      	movs	r0, #1
 800534c:	f7fb ffc0 	bl	80012d0 <HAL_Delay>
      ms++;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3301      	adds	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f9fa 	bl	8005750 <USB_GetMode>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <USB_SetCurrentMode+0x84>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b31      	cmp	r3, #49	; 0x31
 8005366:	d9f0      	bls.n	800534a <USB_SetCurrentMode+0x60>
 8005368:	e001      	b.n	800536e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e005      	b.n	800537a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b32      	cmp	r3, #50	; 0x32
 8005372:	d101      	bne.n	8005378 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005384:	b084      	sub	sp, #16
 8005386:	b580      	push	{r7, lr}
 8005388:	b086      	sub	sp, #24
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800539e:	2300      	movs	r3, #0
 80053a0:	613b      	str	r3, [r7, #16]
 80053a2:	e009      	b.n	80053b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	3340      	adds	r3, #64	; 0x40
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	3301      	adds	r3, #1
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2b0e      	cmp	r3, #14
 80053bc:	d9f2      	bls.n	80053a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80053be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d11c      	bne.n	80053fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d2:	f043 0302 	orr.w	r3, r3, #2
 80053d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	e005      	b.n	800540a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005410:	461a      	mov	r2, r3
 8005412:	2300      	movs	r3, #0
 8005414:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541c:	4619      	mov	r1, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005424:	461a      	mov	r2, r3
 8005426:	680b      	ldr	r3, [r1, #0]
 8005428:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800542a:	2103      	movs	r1, #3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f955 	bl	80056dc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005432:	2110      	movs	r1, #16
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f8f1 	bl	800561c <USB_FlushTxFifo>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f91b 	bl	8005680 <USB_FlushRxFifo>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545a:	461a      	mov	r2, r3
 800545c:	2300      	movs	r3, #0
 800545e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005466:	461a      	mov	r2, r3
 8005468:	2300      	movs	r3, #0
 800546a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005472:	461a      	mov	r2, r3
 8005474:	2300      	movs	r3, #0
 8005476:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005478:	2300      	movs	r3, #0
 800547a:	613b      	str	r3, [r7, #16]
 800547c:	e043      	b.n	8005506 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005490:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005494:	d118      	bne.n	80054c8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a8:	461a      	mov	r2, r3
 80054aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e013      	b.n	80054da <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	461a      	mov	r2, r3
 80054c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	e008      	b.n	80054da <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d4:	461a      	mov	r2, r3
 80054d6:	2300      	movs	r3, #0
 80054d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e6:	461a      	mov	r2, r3
 80054e8:	2300      	movs	r3, #0
 80054ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	461a      	mov	r2, r3
 80054fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	3301      	adds	r3, #1
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	429a      	cmp	r2, r3
 800550c:	d3b7      	bcc.n	800547e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800550e:	2300      	movs	r3, #0
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	e043      	b.n	800559c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005526:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800552a:	d118      	bne.n	800555e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	015a      	lsls	r2, r3, #5
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4413      	add	r3, r2
 800553a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553e:	461a      	mov	r2, r3
 8005540:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	e013      	b.n	8005570 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005554:	461a      	mov	r2, r3
 8005556:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800555a:	6013      	str	r3, [r2, #0]
 800555c:	e008      	b.n	8005570 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556a:	461a      	mov	r2, r3
 800556c:	2300      	movs	r3, #0
 800556e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557c:	461a      	mov	r2, r3
 800557e:	2300      	movs	r3, #0
 8005580:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558e:	461a      	mov	r2, r3
 8005590:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005594:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	3301      	adds	r3, #1
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d3b7      	bcc.n	8005514 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80055c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	f043 0210 	orr.w	r2, r3, #16
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	4b10      	ldr	r3, [pc, #64]	; (8005618 <USB_DevInit+0x294>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80055de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d005      	beq.n	80055f0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f043 0208 	orr.w	r2, r3, #8
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d107      	bne.n	8005606 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055fe:	f043 0304 	orr.w	r3, r3, #4
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005606:	7dfb      	ldrb	r3, [r7, #23]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005612:	b004      	add	sp, #16
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	803c3800 	.word	0x803c3800

0800561c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3301      	adds	r3, #1
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	4a12      	ldr	r2, [pc, #72]	; (800567c <USB_FlushTxFifo+0x60>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d901      	bls.n	800563a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e01a      	b.n	8005670 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	daf3      	bge.n	800562a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	019b      	lsls	r3, r3, #6
 800564a:	f043 0220 	orr.w	r2, r3, #32
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	3301      	adds	r3, #1
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	4a08      	ldr	r2, [pc, #32]	; (800567c <USB_FlushTxFifo+0x60>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d901      	bls.n	8005662 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e006      	b.n	8005670 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b20      	cmp	r3, #32
 800566c:	d0f1      	beq.n	8005652 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	00030d40 	.word	0x00030d40

08005680 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3301      	adds	r3, #1
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	4a11      	ldr	r2, [pc, #68]	; (80056d8 <USB_FlushRxFifo+0x58>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d901      	bls.n	800569c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e017      	b.n	80056cc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	daf3      	bge.n	800568c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2210      	movs	r2, #16
 80056ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <USB_FlushRxFifo+0x58>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e006      	b.n	80056cc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0310 	and.w	r3, r3, #16
 80056c6:	2b10      	cmp	r3, #16
 80056c8:	d0f1      	beq.n	80056ae <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	00030d40 	.word	0x00030d40

080056dc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	78fb      	ldrb	r3, [r7, #3]
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056fc:	4313      	orrs	r3, r2
 80056fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800570e:	b480      	push	{r7}
 8005710:	b085      	sub	sp, #20
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005728:	f023 0303 	bic.w	r3, r3, #3
 800572c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800573c:	f043 0302 	orr.w	r3, r3, #2
 8005740:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f003 0301 	and.w	r3, r3, #1
}
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3301      	adds	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	4a13      	ldr	r2, [pc, #76]	; (80057cc <USB_CoreReset+0x60>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d901      	bls.n	8005788 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e01a      	b.n	80057be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	daf3      	bge.n	8005778 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f043 0201 	orr.w	r2, r3, #1
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3301      	adds	r3, #1
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	4a09      	ldr	r2, [pc, #36]	; (80057cc <USB_CoreReset+0x60>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d901      	bls.n	80057b0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e006      	b.n	80057be <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d0f1      	beq.n	80057a0 <USB_CoreReset+0x34>

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	00030d40 	.word	0x00030d40

080057d0 <__libc_init_array>:
 80057d0:	b570      	push	{r4, r5, r6, lr}
 80057d2:	4d0d      	ldr	r5, [pc, #52]	; (8005808 <__libc_init_array+0x38>)
 80057d4:	4c0d      	ldr	r4, [pc, #52]	; (800580c <__libc_init_array+0x3c>)
 80057d6:	1b64      	subs	r4, r4, r5
 80057d8:	10a4      	asrs	r4, r4, #2
 80057da:	2600      	movs	r6, #0
 80057dc:	42a6      	cmp	r6, r4
 80057de:	d109      	bne.n	80057f4 <__libc_init_array+0x24>
 80057e0:	4d0b      	ldr	r5, [pc, #44]	; (8005810 <__libc_init_array+0x40>)
 80057e2:	4c0c      	ldr	r4, [pc, #48]	; (8005814 <__libc_init_array+0x44>)
 80057e4:	f000 f820 	bl	8005828 <_init>
 80057e8:	1b64      	subs	r4, r4, r5
 80057ea:	10a4      	asrs	r4, r4, #2
 80057ec:	2600      	movs	r6, #0
 80057ee:	42a6      	cmp	r6, r4
 80057f0:	d105      	bne.n	80057fe <__libc_init_array+0x2e>
 80057f2:	bd70      	pop	{r4, r5, r6, pc}
 80057f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057f8:	4798      	blx	r3
 80057fa:	3601      	adds	r6, #1
 80057fc:	e7ee      	b.n	80057dc <__libc_init_array+0xc>
 80057fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005802:	4798      	blx	r3
 8005804:	3601      	adds	r6, #1
 8005806:	e7f2      	b.n	80057ee <__libc_init_array+0x1e>
 8005808:	080058b8 	.word	0x080058b8
 800580c:	080058b8 	.word	0x080058b8
 8005810:	080058b8 	.word	0x080058b8
 8005814:	080058bc 	.word	0x080058bc

08005818 <memset>:
 8005818:	4402      	add	r2, r0
 800581a:	4603      	mov	r3, r0
 800581c:	4293      	cmp	r3, r2
 800581e:	d100      	bne.n	8005822 <memset+0xa>
 8005820:	4770      	bx	lr
 8005822:	f803 1b01 	strb.w	r1, [r3], #1
 8005826:	e7f9      	b.n	800581c <memset+0x4>

08005828 <_init>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	bf00      	nop
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr

08005834 <_fini>:
 8005834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005836:	bf00      	nop
 8005838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583a:	bc08      	pop	{r3}
 800583c:	469e      	mov	lr, r3
 800583e:	4770      	bx	lr
