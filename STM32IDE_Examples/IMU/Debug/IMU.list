
IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  08006be0  08006be0  00016be0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800707c  0800707c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800707c  0800707c  0001707c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007084  08007084  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007084  08007084  00017084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800708c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  200001dc  08007268  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08007268  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001175a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002307  00000000  00000000  00031966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  00033c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  000347a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002378f  00000000  00000000  00035220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fdf9  00000000  00000000  000589af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d066a  00000000  00000000  000687a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00138e12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e4c  00000000  00000000  00138e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006bc8 	.word	0x08006bc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08006bc8 	.word	0x08006bc8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <__io_putchar>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8000f88:	1d39      	adds	r1, r7, #4
 8000f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <__io_putchar+0x20>)
 8000f92:	f002 fe34 	bl	8003bfe <HAL_UART_Transmit>
	return ch;
 8000f96:	687b      	ldr	r3, [r7, #4]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20000270 	.word	0x20000270

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0

	HAL_Init();
 8000fa8:	f000 fdcc 	bl	8001b44 <HAL_Init>

	SystemClock_Config();
 8000fac:	f000 f832 	bl	8001014 <SystemClock_Config>

	MX_GPIO_Init();
 8000fb0:	f000 f8f6 	bl	80011a0 <MX_GPIO_Init>
	MX_I2C2_Init();
 8000fb4:	f000 f89c 	bl	80010f0 <MX_I2C2_Init>
	MX_USART2_UART_Init();
 8000fb8:	f000 f8c8 	bl	800114c <MX_USART2_UART_Init>

	// init IMU
	IMU_init(&hi2c2);
 8000fbc:	4810      	ldr	r0, [pc, #64]	; (8001000 <main+0x5c>)
 8000fbe:	f000 fb31 	bl	8001624 <IMU_init>

	while(1)
	{

		// get data
		IMU_getAccurateMag(&hi2c2, mag);
 8000fc2:	4910      	ldr	r1, [pc, #64]	; (8001004 <main+0x60>)
 8000fc4:	480e      	ldr	r0, [pc, #56]	; (8001000 <main+0x5c>)
 8000fc6:	f000 fc0f 	bl	80017e8 <IMU_getAccurateMag>

		printf("magx = %f\n\r", mag[0]);
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <main+0x60>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff fada 	bl	8000588 <__aeabi_f2d>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <main+0x64>)
 8000fda:	f004 f9c1 	bl	8005360 <iprintf>
		printf("magy = %f\n\r", mag[1]);
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <main+0x60>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fad0 	bl	8000588 <__aeabi_f2d>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <main+0x68>)
 8000fee:	f004 f9b7 	bl	8005360 <iprintf>
		printf("\n\r");
 8000ff2:	4807      	ldr	r0, [pc, #28]	; (8001010 <main+0x6c>)
 8000ff4:	f004 f9b4 	bl	8005360 <iprintf>

		// print data

		// delay for 1 sec for next reading
		HAL_Delay(100);
 8000ff8:	2064      	movs	r0, #100	; 0x64
 8000ffa:	f000 fe15 	bl	8001c28 <HAL_Delay>
		IMU_getAccurateMag(&hi2c2, mag);
 8000ffe:	e7e0      	b.n	8000fc2 <main+0x1e>
 8001000:	20000204 	.word	0x20000204
 8001004:	200002b4 	.word	0x200002b4
 8001008:	08006be0 	.word	0x08006be0
 800100c:	08006bec 	.word	0x08006bec
 8001010:	08006bf8 	.word	0x08006bf8

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b094      	sub	sp, #80	; 0x50
 8001018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	2234      	movs	r2, #52	; 0x34
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f003 fb26 	bl	8004674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <SystemClock_Config+0xd4>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	4a29      	ldr	r2, [pc, #164]	; (80010e8 <SystemClock_Config+0xd4>)
 8001042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001046:	6413      	str	r3, [r2, #64]	; 0x40
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <SystemClock_Config+0xd4>)
 800104a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <SystemClock_Config+0xd8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001060:	4a22      	ldr	r2, [pc, #136]	; (80010ec <SystemClock_Config+0xd8>)
 8001062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <SystemClock_Config+0xd8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001074:	2302      	movs	r3, #2
 8001076:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001078:	2301      	movs	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107c:	2310      	movs	r3, #16
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001080:	2302      	movs	r3, #2
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001084:	2300      	movs	r3, #0
 8001086:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001088:	2310      	movs	r3, #16
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800108c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001090:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001092:	2304      	movs	r3, #4
 8001094:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001096:	2302      	movs	r3, #2
 8001098:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800109a:	2302      	movs	r3, #2
 800109c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fac0 	bl	8003628 <HAL_RCC_OscConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010ae:	f000 f8ad 	bl	800120c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b2:	230f      	movs	r3, #15
 80010b4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b6:	2302      	movs	r3, #2
 80010b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	2102      	movs	r1, #2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 ffde 	bl	8003090 <HAL_RCC_ClockConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010da:	f000 f897 	bl	800120c <Error_Handler>
  }
}
 80010de:	bf00      	nop
 80010e0:	3750      	adds	r7, #80	; 0x50
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40007000 	.word	0x40007000

080010f0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010f4:	4b12      	ldr	r3, [pc, #72]	; (8001140 <MX_I2C2_Init+0x50>)
 80010f6:	4a13      	ldr	r2, [pc, #76]	; (8001144 <MX_I2C2_Init+0x54>)
 80010f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_I2C2_Init+0x50>)
 80010fc:	4a12      	ldr	r2, [pc, #72]	; (8001148 <MX_I2C2_Init+0x58>)
 80010fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_I2C2_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_I2C2_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_I2C2_Init+0x50>)
 800110e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001112:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <MX_I2C2_Init+0x50>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_I2C2_Init+0x50>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001120:	4b07      	ldr	r3, [pc, #28]	; (8001140 <MX_I2C2_Init+0x50>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_I2C2_Init+0x50>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <MX_I2C2_Init+0x50>)
 800112e:	f001 f819 	bl	8002164 <HAL_I2C_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001138:	f000 f868 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000204 	.word	0x20000204
 8001144:	40005800 	.word	0x40005800
 8001148:	000186a0 	.word	0x000186a0

0800114c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <MX_USART2_UART_Init+0x50>)
 8001154:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800115c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001172:	220c      	movs	r2, #12
 8001174:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_USART2_UART_Init+0x4c>)
 8001184:	f002 fcee 	bl	8003b64 <HAL_UART_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800118e:	f000 f83d 	bl	800120c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000270 	.word	0x20000270
 800119c:	40004400 	.word	0x40004400

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <MX_GPIO_Init+0x68>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a16      	ldr	r2, [pc, #88]	; (8001208 <MX_GPIO_Init+0x68>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_GPIO_Init+0x68>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_GPIO_Init+0x68>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <MX_GPIO_Init+0x68>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <MX_GPIO_Init+0x68>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_GPIO_Init+0x68>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <MX_GPIO_Init+0x68>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_GPIO_Init+0x68>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

}
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001210:	b672      	cpsid	i
}
 8001212:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001214:	e7fe      	b.n	8001214 <Error_Handler+0x8>
	...

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_MspInit+0x4c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <HAL_MspInit+0x4c>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_MspInit+0x4c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x4c>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x4c>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001256:	2007      	movs	r0, #7
 8001258:	f000 fdbc 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08a      	sub	sp, #40	; 0x28
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a29      	ldr	r2, [pc, #164]	; (800132c <HAL_I2C_MspInit+0xc4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d14b      	bne.n	8001322 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <HAL_I2C_MspInit+0xc8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a27      	ldr	r2, [pc, #156]	; (8001330 <HAL_I2C_MspInit+0xc8>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <HAL_I2C_MspInit+0xc8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <HAL_I2C_MspInit+0xc8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a20      	ldr	r2, [pc, #128]	; (8001330 <HAL_I2C_MspInit+0xc8>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <HAL_I2C_MspInit+0xc8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c8:	2312      	movs	r3, #18
 80012ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012d4:	2304      	movs	r3, #4
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4815      	ldr	r0, [pc, #84]	; (8001334 <HAL_I2C_MspInit+0xcc>)
 80012e0:	f000 fdac 	bl	8001e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ea:	2312      	movs	r3, #18
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012f6:	2304      	movs	r3, #4
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	4619      	mov	r1, r3
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <HAL_I2C_MspInit+0xd0>)
 8001302:	f000 fd9b 	bl	8001e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <HAL_I2C_MspInit+0xc8>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	4a08      	ldr	r2, [pc, #32]	; (8001330 <HAL_I2C_MspInit+0xc8>)
 8001310:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001314:	6413      	str	r3, [r2, #64]	; 0x40
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_I2C_MspInit+0xc8>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	; 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40005800 	.word	0x40005800
 8001330:	40023800 	.word	0x40023800
 8001334:	40020400 	.word	0x40020400
 8001338:	40020800 	.word	0x40020800

0800133c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a19      	ldr	r2, [pc, #100]	; (80013c0 <HAL_UART_MspInit+0x84>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d12b      	bne.n	80013b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <HAL_UART_MspInit+0x88>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_UART_MspInit+0x88>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001396:	230c      	movs	r3, #12
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013a6:	2307      	movs	r3, #7
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_UART_MspInit+0x8c>)
 80013b2:	f000 fd43 	bl	8001e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	; 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40004400 	.word	0x40004400
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <NMI_Handler+0x4>

080013d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler+0x4>

080013d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <MemManage_Handler+0x4>

080013de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e2:	e7fe      	b.n	80013e2 <BusFault_Handler+0x4>

080013e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <UsageFault_Handler+0x4>

080013ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001418:	f000 fbe6 	bl	8001be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
	return 1;
 8001424:	2301      	movs	r3, #1
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_kill>:

int _kill(int pid, int sig)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800143a:	f002 fea9 	bl	8004190 <__errno>
 800143e:	4603      	mov	r3, r0
 8001440:	2216      	movs	r2, #22
 8001442:	601a      	str	r2, [r3, #0]
	return -1;
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_exit>:

void _exit (int status)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ffe7 	bl	8001430 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001462:	e7fe      	b.n	8001462 <_exit+0x12>

08001464 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	e00a      	b.n	800148c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001476:	f3af 8000 	nop.w
 800147a:	4601      	mov	r1, r0
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	1c5a      	adds	r2, r3, #1
 8001480:	60ba      	str	r2, [r7, #8]
 8001482:	b2ca      	uxtb	r2, r1
 8001484:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	3301      	adds	r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	dbf0      	blt.n	8001476 <_read+0x12>
	}

return len;
 8001494:	687b      	ldr	r3, [r7, #4]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e009      	b.n	80014c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fd61 	bl	8000f80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	3301      	adds	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	dbf1      	blt.n	80014b0 <_write+0x12>
	}
	return len;
 80014cc:	687b      	ldr	r3, [r7, #4]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <_close>:

int _close(int file)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
	return -1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <_isatty>:

int _isatty(int file)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
	return 1;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
	return 0;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001548:	4a14      	ldr	r2, [pc, #80]	; (800159c <_sbrk+0x5c>)
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <_sbrk+0x60>)
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <_sbrk+0x64>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <_sbrk+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	429a      	cmp	r2, r3
 800156e:	d207      	bcs.n	8001580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001570:	f002 fe0e 	bl	8004190 <__errno>
 8001574:	4603      	mov	r3, r0
 8001576:	220c      	movs	r2, #12
 8001578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	e009      	b.n	8001594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001580:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <_sbrk+0x64>)
 8001590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20020000 	.word	0x20020000
 80015a0:	00000400 	.word	0x00000400
 80015a4:	200001f8 	.word	0x200001f8
 80015a8:	20000328 	.word	0x20000328

080015ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <SystemInit+0x20>)
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <SystemInit+0x20>)
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001608 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d4:	480d      	ldr	r0, [pc, #52]	; (800160c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015d6:	490e      	ldr	r1, [pc, #56]	; (8001610 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d8:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015ec:	4c0b      	ldr	r4, [pc, #44]	; (800161c <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015fa:	f7ff ffd7 	bl	80015ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fe:	f002 ff97 	bl	8004530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001602:	f7ff fccf 	bl	8000fa4 <main>
  bx  lr    
 8001606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001614:	0800708c 	.word	0x0800708c
  ldr r2, =_sbss
 8001618:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800161c:	20000324 	.word	0x20000324

08001620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC_IRQHandler>
	...

08001624 <IMU_init>:
float asax;
float asay;
float asaz;

int IMU_init(I2C_HandleTypeDef *hi2c2)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af02      	add	r7, sp, #8
 800162a:	6078      	str	r0, [r7, #4]
	int status = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
	uint8_t sensAdjust[3];

	// setup clock
	// set the clock reference to X axis gyroscope to get a better accuracy
	status = WrByte(hi2c2, MPU9250_AD, PWR_MGMT_1_AD, 0x01);
 8001630:	23d0      	movs	r3, #208	; 0xd0
 8001632:	b299      	uxth	r1, r3
 8001634:	2301      	movs	r3, #1
 8001636:	226b      	movs	r2, #107	; 0x6b
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 f9d3 	bl	80019e4 <WrByte>
 800163e:	60f8      	str	r0, [r7, #12]

	// setup gyro and accel
	// Set the accel scale to 4g
	status = WrByte(hi2c2, MPU9250_AD, ACCEL_CONFIG_1_AD, 0x08);
 8001640:	23d0      	movs	r3, #208	; 0xd0
 8001642:	b299      	uxth	r1, r3
 8001644:	2308      	movs	r3, #8
 8001646:	221c      	movs	r2, #28
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f9cb 	bl	80019e4 <WrByte>
 800164e:	60f8      	str	r0, [r7, #12]
	// Set the gyro scale to 500 °/s and FCHOICE_B
	status = WrByte(hi2c2, MPU9250_AD, GYRO_CONFIG_AD, 0x08);
 8001650:	23d0      	movs	r3, #208	; 0xd0
 8001652:	b299      	uxth	r1, r3
 8001654:	2308      	movs	r3, #8
 8001656:	221b      	movs	r2, #27
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f9c3 	bl	80019e4 <WrByte>
 800165e:	60f8      	str	r0, [r7, #12]
	// Turn on the internal low-pass filter for accelerometer with 10.2Hz bandwidth
	status = WrByte(hi2c2, MPU9250_AD, ACCEL_CONFIG_2_AD, 0x05);
 8001660:	23d0      	movs	r3, #208	; 0xd0
 8001662:	b299      	uxth	r1, r3
 8001664:	2305      	movs	r3, #5
 8001666:	221d      	movs	r2, #29
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f9bb 	bl	80019e4 <WrByte>
 800166e:	60f8      	str	r0, [r7, #12]
	// Turn on the internal low-pass filter for gyroscope with 10Hz bandwidth
	status = WrByte(hi2c2, MPU9250_AD, CONFIG_AD, 0x05);
 8001670:	23d0      	movs	r3, #208	; 0xd0
 8001672:	b299      	uxth	r1, r3
 8001674:	2305      	movs	r3, #5
 8001676:	221a      	movs	r2, #26
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f9b3 	bl	80019e4 <WrByte>
 800167e:	60f8      	str	r0, [r7, #12]

	// setup the magnetometer
	// turn on the bypass multiplexer
	status = WrByte(hi2c2, MPU9250_AD, INT_BYPASS_CONFIG_AD, 0x02);
 8001680:	23d0      	movs	r3, #208	; 0xd0
 8001682:	b299      	uxth	r1, r3
 8001684:	2302      	movs	r3, #2
 8001686:	2237      	movs	r2, #55	; 0x37
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 f9ab 	bl	80019e4 <WrByte>
 800168e:	60f8      	str	r0, [r7, #12]

	// setup the Magnetometer to fuse ROM access mode to get the Sensitivity Adjustment values and 16-bit output
	status = WrByte(hi2c2, MAG_AD, CNTL1_AD, 0x1F);
 8001690:	2318      	movs	r3, #24
 8001692:	b299      	uxth	r1, r3
 8001694:	231f      	movs	r3, #31
 8001696:	220a      	movs	r2, #10
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f9a3 	bl	80019e4 <WrByte>
 800169e:	60f8      	str	r0, [r7, #12]
	HAL_Delay(100);  //wait for the mode changes
 80016a0:	2064      	movs	r0, #100	; 0x64
 80016a2:	f000 fac1 	bl	8001c28 <HAL_Delay>

	//read the Sensitivity Adjustment values
	status = ReadMulti(hi2c2, MAG_AD, ASAX_AD, &sensAdjust[0], 3);
 80016a6:	2318      	movs	r3, #24
 80016a8:	b299      	uxth	r1, r3
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	2203      	movs	r2, #3
 80016b0:	9200      	str	r2, [sp, #0]
 80016b2:	2210      	movs	r2, #16
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 fa20 	bl	8001afa <ReadMulti>
 80016ba:	60f8      	str	r0, [r7, #12]
	asax = (sensAdjust[0] -128)*0.5/128+1;
 80016bc:	7a3b      	ldrb	r3, [r7, #8]
 80016be:	3b80      	subs	r3, #128	; 0x80
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ff4f 	bl	8000564 <__aeabi_i2d>
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <IMU_init+0x1ac>)
 80016cc:	f7fe ffb4 	bl	8000638 <__aeabi_dmul>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4610      	mov	r0, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <IMU_init+0x1b0>)
 80016de:	f7ff f8d5 	bl	800088c <__aeabi_ddiv>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b3a      	ldr	r3, [pc, #232]	; (80017d8 <IMU_init+0x1b4>)
 80016f0:	f7fe fdec 	bl	80002cc <__adddf3>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff fa74 	bl	8000be8 <__aeabi_d2f>
 8001700:	4603      	mov	r3, r0
 8001702:	4a36      	ldr	r2, [pc, #216]	; (80017dc <IMU_init+0x1b8>)
 8001704:	6013      	str	r3, [r2, #0]
	asay = (sensAdjust[1] -128)*0.5/128+1;
 8001706:	7a7b      	ldrb	r3, [r7, #9]
 8001708:	3b80      	subs	r3, #128	; 0x80
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff2a 	bl	8000564 <__aeabi_i2d>
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <IMU_init+0x1ac>)
 8001716:	f7fe ff8f 	bl	8000638 <__aeabi_dmul>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <IMU_init+0x1b0>)
 8001728:	f7ff f8b0 	bl	800088c <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <IMU_init+0x1b4>)
 800173a:	f7fe fdc7 	bl	80002cc <__adddf3>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	f7ff fa4f 	bl	8000be8 <__aeabi_d2f>
 800174a:	4603      	mov	r3, r0
 800174c:	4a24      	ldr	r2, [pc, #144]	; (80017e0 <IMU_init+0x1bc>)
 800174e:	6013      	str	r3, [r2, #0]
	asaz = (sensAdjust[2] -128)*0.5/128+1;
 8001750:	7abb      	ldrb	r3, [r7, #10]
 8001752:	3b80      	subs	r3, #128	; 0x80
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe ff05 	bl	8000564 <__aeabi_i2d>
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <IMU_init+0x1ac>)
 8001760:	f7fe ff6a 	bl	8000638 <__aeabi_dmul>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <IMU_init+0x1b0>)
 8001772:	f7ff f88b 	bl	800088c <__aeabi_ddiv>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <IMU_init+0x1b4>)
 8001784:	f7fe fda2 	bl	80002cc <__adddf3>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff fa2a 	bl	8000be8 <__aeabi_d2f>
 8001794:	4603      	mov	r3, r0
 8001796:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <IMU_init+0x1c0>)
 8001798:	6013      	str	r3, [r2, #0]

	//reset the Magnetometer to power down mode
	status = WrByte(hi2c2, MAG_AD, CNTL1_AD, 0x00);
 800179a:	2318      	movs	r3, #24
 800179c:	b299      	uxth	r1, r3
 800179e:	2300      	movs	r3, #0
 80017a0:	220a      	movs	r2, #10
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f91e 	bl	80019e4 <WrByte>
 80017a8:	60f8      	str	r0, [r7, #12]
	HAL_Delay(100);  //wait for the mode changes
 80017aa:	2064      	movs	r0, #100	; 0x64
 80017ac:	f000 fa3c 	bl	8001c28 <HAL_Delay>

	//set the Magnetometer to continuous mode 2（100Hz) and 16-bit output
	status = WrByte(hi2c2, MAG_AD, CNTL1_AD, 0x16);
 80017b0:	2318      	movs	r3, #24
 80017b2:	b299      	uxth	r1, r3
 80017b4:	2316      	movs	r3, #22
 80017b6:	220a      	movs	r2, #10
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f913 	bl	80019e4 <WrByte>
 80017be:	60f8      	str	r0, [r7, #12]
	//wait for the mode changes
	HAL_Delay(100);
 80017c0:	2064      	movs	r0, #100	; 0x64
 80017c2:	f000 fa31 	bl	8001c28 <HAL_Delay>

	return status;
 80017c6:	68fb      	ldr	r3, [r7, #12]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	3fe00000 	.word	0x3fe00000
 80017d4:	40600000 	.word	0x40600000
 80017d8:	3ff00000 	.word	0x3ff00000
 80017dc:	200002cc 	.word	0x200002cc
 80017e0:	200002c4 	.word	0x200002c4
 80017e4:	200002c8 	.word	0x200002c8

080017e8 <IMU_getAccurateMag>:
	accel[2] = tempAccel[2] / ACCEL_SENS;
	return status;
}

int IMU_getAccurateMag(I2C_HandleTypeDef *hi2c2, float *mag)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
	float magData[3];
	for (int i = 0; i < 40; i++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	e026      	b.n	8001846 <IMU_getAccurateMag+0x5e>
	{
		IMU_getMagData(hi2c2, mag);
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f84a 	bl	8001894 <IMU_getMagData>
		magData[0] += mag[0];
 8001800:	ed97 7a02 	vldr	s14, [r7, #8]
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800180e:	edc7 7a02 	vstr	s15, [r7, #8]
		magData[1] += mag[1];
 8001812:	ed97 7a03 	vldr	s14, [r7, #12]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	3304      	adds	r3, #4
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001822:	edc7 7a03 	vstr	s15, [r7, #12]
		magData[2] += mag[2];
 8001826:	ed97 7a04 	vldr	s14, [r7, #16]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	3308      	adds	r3, #8
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	edc7 7a04 	vstr	s15, [r7, #16]
		HAL_Delay(10);
 800183a:	200a      	movs	r0, #10
 800183c:	f000 f9f4 	bl	8001c28 <HAL_Delay>
	for (int i = 0; i < 40; i++)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3301      	adds	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2b27      	cmp	r3, #39	; 0x27
 800184a:	ddd5      	ble.n	80017f8 <IMU_getAccurateMag+0x10>
	}

	mag[0] = magData[0]/40;
 800184c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001850:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001890 <IMU_getAccurateMag+0xa8>
 8001854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	edc3 7a00 	vstr	s15, [r3]
	mag[1] = magData[1]/40;
 800185e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	3304      	adds	r3, #4
 8001866:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001890 <IMU_getAccurateMag+0xa8>
 800186a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186e:	edc3 7a00 	vstr	s15, [r3]
	mag[2] = magData[2]/40;
 8001872:	ed97 7a04 	vldr	s14, [r7, #16]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	3308      	adds	r3, #8
 800187a:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001890 <IMU_getAccurateMag+0xa8>
 800187e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001882:	edc3 7a00 	vstr	s15, [r3]
}
 8001886:	bf00      	nop
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	42200000 	.word	0x42200000

08001894 <IMU_getMagData>:

int IMU_getMagData(I2C_HandleTypeDef *hi2c2, float *mag)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af02      	add	r7, sp, #8
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	int status = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
	uint8_t magBuff[6];
	uint8_t DRDYbit = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	74fb      	strb	r3, [r7, #19]
	uint8_t magicbit = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	74bb      	strb	r3, [r7, #18]

	// wait for data to be ready
	while(!DRDYbit)
 80018aa:	e011      	b.n	80018d0 <IMU_getMagData+0x3c>
	{
		status = RdByte(hi2c2, MAG_AD, STATUS_1_AD, &DRDYbit);
 80018ac:	2318      	movs	r3, #24
 80018ae:	b299      	uxth	r1, r3
 80018b0:	f107 0313 	add.w	r3, r7, #19
 80018b4:	2202      	movs	r2, #2
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f8d8 	bl	8001a6c <RdByte>
 80018bc:	61f8      	str	r0, [r7, #28]
		if (DRDYbit && DATA_READY_MASK)
 80018be:	7cfb      	ldrb	r3, [r7, #19]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d109      	bne.n	80018d8 <IMU_getMagData+0x44>
			break;
		printf("mag data not ready\n\r");
 80018c4:	4841      	ldr	r0, [pc, #260]	; (80019cc <IMU_getMagData+0x138>)
 80018c6:	f003 fd4b 	bl	8005360 <iprintf>
		HAL_Delay(10);
 80018ca:	200a      	movs	r0, #10
 80018cc:	f000 f9ac 	bl	8001c28 <HAL_Delay>
	while(!DRDYbit)
 80018d0:	7cfb      	ldrb	r3, [r7, #19]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0ea      	beq.n	80018ac <IMU_getMagData+0x18>
 80018d6:	e000      	b.n	80018da <IMU_getMagData+0x46>
			break;
 80018d8:	bf00      	nop
	}

	status = ReadMulti(hi2c2, MAG_AD, HXL_AD, &magBuff[0], 6);
 80018da:	2318      	movs	r3, #24
 80018dc:	b299      	uxth	r1, r3
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	2206      	movs	r2, #6
 80018e4:	9200      	str	r2, [sp, #0]
 80018e6:	2203      	movs	r2, #3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f906 	bl	8001afa <ReadMulti>
 80018ee:	61f8      	str	r0, [r7, #28]
	if (status != 0)
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <IMU_getMagData+0x68>
		return -3;
 80018f6:	f06f 0302 	mvn.w	r3, #2
 80018fa:	e062      	b.n	80019c2 <IMU_getMagData+0x12e>
	status = RdByte(hi2c2, MAG_AD, STATUS_2_AD, &magicbit);
 80018fc:	2318      	movs	r3, #24
 80018fe:	b299      	uxth	r1, r3
 8001900:	f107 0312 	add.w	r3, r7, #18
 8001904:	2209      	movs	r2, #9
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f8b0 	bl	8001a6c <RdByte>
 800190c:	61f8      	str	r0, [r7, #28]
	if (!(magicbit && MAGIC_OVERFLOW_MASK))
 800190e:	7cbb      	ldrb	r3, [r7, #18]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <IMU_getMagData+0x86>
		return -4;
 8001914:	f06f 0303 	mvn.w	r3, #3
 8001918:	e053      	b.n	80019c2 <IMU_getMagData+0x12e>

	int16_t tempMag [3];
	tempMag[0] = magBuff[0] | (magBuff[1]<<8);
 800191a:	7d3b      	ldrb	r3, [r7, #20]
 800191c:	b21a      	sxth	r2, r3
 800191e:	7d7b      	ldrb	r3, [r7, #21]
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b21b      	sxth	r3, r3
 8001924:	4313      	orrs	r3, r2
 8001926:	b21b      	sxth	r3, r3
 8001928:	81bb      	strh	r3, [r7, #12]
	tempMag[1] = magBuff[2] | (magBuff[3]<<8);
 800192a:	7dbb      	ldrb	r3, [r7, #22]
 800192c:	b21a      	sxth	r2, r3
 800192e:	7dfb      	ldrb	r3, [r7, #23]
 8001930:	021b      	lsls	r3, r3, #8
 8001932:	b21b      	sxth	r3, r3
 8001934:	4313      	orrs	r3, r2
 8001936:	b21b      	sxth	r3, r3
 8001938:	81fb      	strh	r3, [r7, #14]
	tempMag[2] = magBuff[4] | (magBuff[5]<<8);
 800193a:	7e3b      	ldrb	r3, [r7, #24]
 800193c:	b21a      	sxth	r2, r3
 800193e:	7e7b      	ldrb	r3, [r7, #25]
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	b21b      	sxth	r3, r3
 8001944:	4313      	orrs	r3, r2
 8001946:	b21b      	sxth	r3, r3
 8001948:	823b      	strh	r3, [r7, #16]
	mag[0] = ((tempMag[0] - dest1[0]) * MPU9250mRes*asax);
 800194a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800194e:	ee07 3a90 	vmov	s15, r3
 8001952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001956:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80019d0 <IMU_getMagData+0x13c>
 800195a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800195e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80019d4 <IMU_getMagData+0x140>
 8001962:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001966:	4b1c      	ldr	r3, [pc, #112]	; (80019d8 <IMU_getMagData+0x144>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	edc3 7a00 	vstr	s15, [r3]
	mag[1] = (tempMag[0] - dest1[0]);
 8001976:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001982:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80019d0 <IMU_getMagData+0x13c>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	3304      	adds	r3, #4
 800198a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800198e:	edc3 7a00 	vstr	s15, [r3]
	//mag[1] = ((tempMag[1] - dest1[1]) * MPU9250mRes*asay);
	mag[2] = ((tempMag[2] - dest1[2]) * MPU9250mRes*asaz);
 8001992:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800199e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80019dc <IMU_getMagData+0x148>
 80019a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019a6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80019d4 <IMU_getMagData+0x140>
 80019aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <IMU_getMagData+0x14c>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	3308      	adds	r3, #8
 80019b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019bc:	edc3 7a00 	vstr	s15, [r3]
	return status;
 80019c0:	69fb      	ldr	r3, [r7, #28]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3720      	adds	r7, #32
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	08006bfc 	.word	0x08006bfc
 80019d0:	c2580000 	.word	0xc2580000
 80019d4:	3fbfebff 	.word	0x3fbfebff
 80019d8:	200002cc 	.word	0x200002cc
 80019dc:	c3480000 	.word	0xc3480000
 80019e0:	200002c8 	.word	0x200002c8

080019e4 <WrByte>:

#include "helpful_i2c.h"

uint8_t _I2CBuffer[64];

int WrByte(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t index, uint8_t data) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	4608      	mov	r0, r1
 80019ee:	4611      	mov	r1, r2
 80019f0:	461a      	mov	r2, r3
 80019f2:	4603      	mov	r3, r0
 80019f4:	807b      	strh	r3, [r7, #2]
 80019f6:	460b      	mov	r3, r1
 80019f8:	707b      	strb	r3, [r7, #1]
 80019fa:	4613      	mov	r3, r2
 80019fc:	703b      	strb	r3, [r7, #0]
	int status = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]

    _I2CBuffer[0] = index;
 8001a02:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <WrByte+0x44>)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <WrByte+0x44>)
 8001a0a:	783b      	ldrb	r3, [r7, #0]
 8001a0c:	7053      	strb	r3, [r2, #1]

    status = Brett_I2CWrite(hi2c, DevAddress, _I2CBuffer, 2);
 8001a0e:	8879      	ldrh	r1, [r7, #2]
 8001a10:	2302      	movs	r3, #2
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <WrByte+0x44>)
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f809 	bl	8001a2c <Brett_I2CWrite>
 8001a1a:	60f8      	str	r0, [r7, #12]

    return status;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200002d0 	.word	0x200002d0

08001a2c <Brett_I2CWrite>:

int Brett_I2CWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pdata, uint32_t count) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	817b      	strh	r3, [r7, #10]
	int status = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]

	status = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
    int i2c_time_out = 10+ count* 1;
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	330a      	adds	r3, #10
 8001a48:	613b      	str	r3, [r7, #16]

    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, pdata, count, i2c_time_out);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	8979      	ldrh	r1, [r7, #10]
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	4613      	mov	r3, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 fcc7 	bl	80023ec <HAL_I2C_Master_Transmit>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	617b      	str	r3, [r7, #20]

    return status;
 8001a62:	697b      	ldr	r3, [r7, #20]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <RdByte>:

int RdByte(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t index, uint8_t *data) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	460b      	mov	r3, r1
 8001a78:	817b      	strh	r3, [r7, #10]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	727b      	strb	r3, [r7, #9]
	int status = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]

	status = Brett_I2CWrite(hi2c, DevAddress, &index, 1);
 8001a82:	f107 0209 	add.w	r2, r7, #9
 8001a86:	8979      	ldrh	r1, [r7, #10]
 8001a88:	2301      	movs	r3, #1
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f7ff ffce 	bl	8001a2c <Brett_I2CWrite>
 8001a90:	6178      	str	r0, [r7, #20]
    if(status != 0)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d107      	bne.n	8001aa8 <RdByte+0x3c>
    	goto done;

    status = Brett_I2CRead(hi2c, DevAddress, data, 1);
 8001a98:	8979      	ldrh	r1, [r7, #10]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 f808 	bl	8001ab4 <Brett_I2CRead>
 8001aa4:	6178      	str	r0, [r7, #20]
 8001aa6:	e000      	b.n	8001aaa <RdByte+0x3e>
    	goto done;
 8001aa8:	bf00      	nop

done:
    return status;
 8001aaa:	697b      	ldr	r3, [r7, #20]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <Brett_I2CRead>:

int Brett_I2CRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pdata, uint32_t count) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	817b      	strh	r3, [r7, #10]
	int status = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

	status = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
    int i2c_time_out = 10+ count* 1;
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	330a      	adds	r3, #10
 8001ad0:	613b      	str	r3, [r7, #16]

    status = HAL_I2C_Master_Receive(hi2c, DevAddress|1, pdata, count, i2c_time_out);
 8001ad2:	897b      	ldrh	r3, [r7, #10]
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	b299      	uxth	r1, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 fd7e 	bl	80025e8 <HAL_I2C_Master_Receive>
 8001aec:	4603      	mov	r3, r0
 8001aee:	617b      	str	r3, [r7, #20]

    return status;
 8001af0:	697b      	ldr	r3, [r7, #20]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
int ReadMulti(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t index, uint8_t *pdata, uint32_t count) {
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	817b      	strh	r3, [r7, #10]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	727b      	strb	r3, [r7, #9]
	int status = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

    status = Brett_I2CWrite(hi2c, DevAddress, &index, 1);
 8001b10:	f107 0209 	add.w	r2, r7, #9
 8001b14:	8979      	ldrh	r1, [r7, #10]
 8001b16:	2301      	movs	r3, #1
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7ff ff87 	bl	8001a2c <Brett_I2CWrite>
 8001b1e:	6178      	str	r0, [r7, #20]
    if (status != 0)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d107      	bne.n	8001b36 <ReadMulti+0x3c>
        goto done;

    status = Brett_I2CRead(hi2c, DevAddress, pdata, count);
 8001b26:	8979      	ldrh	r1, [r7, #10]
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f7ff ffc1 	bl	8001ab4 <Brett_I2CRead>
 8001b32:	6178      	str	r0, [r7, #20]
 8001b34:	e000      	b.n	8001b38 <ReadMulti+0x3e>
        goto done;
 8001b36:	bf00      	nop

done:
    return status;
 8001b38:	697b      	ldr	r3, [r7, #20]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <HAL_Init+0x40>)
 8001b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_Init+0x40>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <HAL_Init+0x40>)
 8001b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_Init+0x40>)
 8001b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f000 f931 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f000 f808 	bl	8001b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b78:	f7ff fb4e 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023c00 	.word	0x40023c00

08001b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x54>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_InitTick+0x58>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f93b 	bl	8001e22 <HAL_SYSTICK_Config>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00e      	b.n	8001bd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d80a      	bhi.n	8001bd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f000 f911 	bl	8001dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc8:	4a06      	ldr	r2, [pc, #24]	; (8001be4 <HAL_InitTick+0x5c>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000008 	.word	0x20000008
 8001be4:	20000004 	.word	0x20000004

08001be8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x20>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_IncTick+0x24>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_IncTick+0x24>)
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	20000310 	.word	0x20000310

08001c10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <HAL_GetTick+0x14>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000310 	.word	0x20000310

08001c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c30:	f7ff ffee 	bl	8001c10 <HAL_GetTick>
 8001c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c40:	d005      	beq.n	8001c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_Delay+0x44>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4e:	bf00      	nop
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d8f7      	bhi.n	8001c50 <HAL_Delay+0x28>
  {
  }
}
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000008 	.word	0x20000008

08001c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60d3      	str	r3, [r2, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	f003 0307 	and.w	r3, r3, #7
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	; (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	; (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	; 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	4313      	orrs	r3, r2
         );
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	; 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da0:	d301      	bcc.n	8001da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da2:	2301      	movs	r3, #1
 8001da4:	e00f      	b.n	8001dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001da6:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <SysTick_Config+0x40>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dae:	210f      	movs	r1, #15
 8001db0:	f04f 30ff 	mov.w	r0, #4294967295
 8001db4:	f7ff ff8e 	bl	8001cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <SysTick_Config+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dbe:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <SysTick_Config+0x40>)
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	e000e010 	.word	0xe000e010

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff47 	bl	8001c70 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff5c 	bl	8001cb8 <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ff8e 	bl	8001d28 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff5d 	bl	8001cd4 <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffb0 	bl	8001d90 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
	...

08001e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b089      	sub	sp, #36	; 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e165      	b.n	8002124 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f040 8154 	bne.w	800211e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d005      	beq.n	8001e8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d130      	bne.n	8001ef0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	2203      	movs	r2, #3
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 0201 	and.w	r2, r3, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d017      	beq.n	8001f2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d123      	bne.n	8001f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	69b9      	ldr	r1, [r7, #24]
 8001f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0203 	and.w	r2, r3, #3
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80ae 	beq.w	800211e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b5d      	ldr	r3, [pc, #372]	; (800213c <HAL_GPIO_Init+0x300>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	4a5c      	ldr	r2, [pc, #368]	; (800213c <HAL_GPIO_Init+0x300>)
 8001fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd2:	4b5a      	ldr	r3, [pc, #360]	; (800213c <HAL_GPIO_Init+0x300>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fde:	4a58      	ldr	r2, [pc, #352]	; (8002140 <HAL_GPIO_Init+0x304>)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4f      	ldr	r2, [pc, #316]	; (8002144 <HAL_GPIO_Init+0x308>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d025      	beq.n	8002056 <HAL_GPIO_Init+0x21a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4e      	ldr	r2, [pc, #312]	; (8002148 <HAL_GPIO_Init+0x30c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01f      	beq.n	8002052 <HAL_GPIO_Init+0x216>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4d      	ldr	r2, [pc, #308]	; (800214c <HAL_GPIO_Init+0x310>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d019      	beq.n	800204e <HAL_GPIO_Init+0x212>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4c      	ldr	r2, [pc, #304]	; (8002150 <HAL_GPIO_Init+0x314>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_GPIO_Init+0x20e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4b      	ldr	r2, [pc, #300]	; (8002154 <HAL_GPIO_Init+0x318>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00d      	beq.n	8002046 <HAL_GPIO_Init+0x20a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4a      	ldr	r2, [pc, #296]	; (8002158 <HAL_GPIO_Init+0x31c>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <HAL_GPIO_Init+0x206>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a49      	ldr	r2, [pc, #292]	; (800215c <HAL_GPIO_Init+0x320>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <HAL_GPIO_Init+0x202>
 800203a:	2306      	movs	r3, #6
 800203c:	e00c      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 800203e:	2307      	movs	r3, #7
 8002040:	e00a      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 8002042:	2305      	movs	r3, #5
 8002044:	e008      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 8002046:	2304      	movs	r3, #4
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 800204a:	2303      	movs	r3, #3
 800204c:	e004      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 800204e:	2302      	movs	r3, #2
 8002050:	e002      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <HAL_GPIO_Init+0x21c>
 8002056:	2300      	movs	r3, #0
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	f002 0203 	and.w	r2, r2, #3
 800205e:	0092      	lsls	r2, r2, #2
 8002060:	4093      	lsls	r3, r2
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002068:	4935      	ldr	r1, [pc, #212]	; (8002140 <HAL_GPIO_Init+0x304>)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	3302      	adds	r3, #2
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002076:	4b3a      	ldr	r3, [pc, #232]	; (8002160 <HAL_GPIO_Init+0x324>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800209a:	4a31      	ldr	r2, [pc, #196]	; (8002160 <HAL_GPIO_Init+0x324>)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020a0:	4b2f      	ldr	r3, [pc, #188]	; (8002160 <HAL_GPIO_Init+0x324>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <HAL_GPIO_Init+0x324>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ca:	4b25      	ldr	r3, [pc, #148]	; (8002160 <HAL_GPIO_Init+0x324>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ee:	4a1c      	ldr	r2, [pc, #112]	; (8002160 <HAL_GPIO_Init+0x324>)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020f4:	4b1a      	ldr	r3, [pc, #104]	; (8002160 <HAL_GPIO_Init+0x324>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002118:	4a11      	ldr	r2, [pc, #68]	; (8002160 <HAL_GPIO_Init+0x324>)
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3301      	adds	r3, #1
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2b0f      	cmp	r3, #15
 8002128:	f67f ae96 	bls.w	8001e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3724      	adds	r7, #36	; 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40023800 	.word	0x40023800
 8002140:	40013800 	.word	0x40013800
 8002144:	40020000 	.word	0x40020000
 8002148:	40020400 	.word	0x40020400
 800214c:	40020800 	.word	0x40020800
 8002150:	40020c00 	.word	0x40020c00
 8002154:	40021000 	.word	0x40021000
 8002158:	40021400 	.word	0x40021400
 800215c:	40021800 	.word	0x40021800
 8002160:	40013c00 	.word	0x40013c00

08002164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e12b      	b.n	80023ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff f86c 	bl	8001268 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2224      	movs	r2, #36	; 0x24
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021c8:	f001 f854 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 80021cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4a81      	ldr	r2, [pc, #516]	; (80023d8 <HAL_I2C_Init+0x274>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d807      	bhi.n	80021e8 <HAL_I2C_Init+0x84>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a80      	ldr	r2, [pc, #512]	; (80023dc <HAL_I2C_Init+0x278>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	bf94      	ite	ls
 80021e0:	2301      	movls	r3, #1
 80021e2:	2300      	movhi	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	e006      	b.n	80021f6 <HAL_I2C_Init+0x92>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a7d      	ldr	r2, [pc, #500]	; (80023e0 <HAL_I2C_Init+0x27c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	bf94      	ite	ls
 80021f0:	2301      	movls	r3, #1
 80021f2:	2300      	movhi	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e0e7      	b.n	80023ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4a78      	ldr	r2, [pc, #480]	; (80023e4 <HAL_I2C_Init+0x280>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0c9b      	lsrs	r3, r3, #18
 8002208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	4a6a      	ldr	r2, [pc, #424]	; (80023d8 <HAL_I2C_Init+0x274>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d802      	bhi.n	8002238 <HAL_I2C_Init+0xd4>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	3301      	adds	r3, #1
 8002236:	e009      	b.n	800224c <HAL_I2C_Init+0xe8>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	4a69      	ldr	r2, [pc, #420]	; (80023e8 <HAL_I2C_Init+0x284>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	3301      	adds	r3, #1
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6812      	ldr	r2, [r2, #0]
 8002250:	430b      	orrs	r3, r1
 8002252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800225e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	495c      	ldr	r1, [pc, #368]	; (80023d8 <HAL_I2C_Init+0x274>)
 8002268:	428b      	cmp	r3, r1
 800226a:	d819      	bhi.n	80022a0 <HAL_I2C_Init+0x13c>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1e59      	subs	r1, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	fbb1 f3f3 	udiv	r3, r1, r3
 800227a:	1c59      	adds	r1, r3, #1
 800227c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002280:	400b      	ands	r3, r1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_I2C_Init+0x138>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1e59      	subs	r1, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fbb1 f3f3 	udiv	r3, r1, r3
 8002294:	3301      	adds	r3, #1
 8002296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800229a:	e051      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 800229c:	2304      	movs	r3, #4
 800229e:	e04f      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d111      	bne.n	80022cc <HAL_I2C_Init+0x168>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1e58      	subs	r0, r3, #1
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	440b      	add	r3, r1
 80022b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ba:	3301      	adds	r3, #1
 80022bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	e012      	b.n	80022f2 <HAL_I2C_Init+0x18e>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e58      	subs	r0, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	0099      	lsls	r1, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf0c      	ite	eq
 80022ec:	2301      	moveq	r3, #1
 80022ee:	2300      	movne	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_Init+0x196>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e022      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10e      	bne.n	8002320 <HAL_I2C_Init+0x1bc>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e58      	subs	r0, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	440b      	add	r3, r1
 8002310:	fbb0 f3f3 	udiv	r3, r0, r3
 8002314:	3301      	adds	r3, #1
 8002316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800231e:	e00f      	b.n	8002340 <HAL_I2C_Init+0x1dc>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e58      	subs	r0, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	0099      	lsls	r1, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	fbb0 f3f3 	udiv	r3, r0, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	6809      	ldr	r1, [r1, #0]
 8002344:	4313      	orrs	r3, r2
 8002346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800236e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6911      	ldr	r1, [r2, #16]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68d2      	ldr	r2, [r2, #12]
 800237a:	4311      	orrs	r1, r2
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	430b      	orrs	r3, r1
 8002382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2220      	movs	r2, #32
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	000186a0 	.word	0x000186a0
 80023dc:	001e847f 	.word	0x001e847f
 80023e0:	003d08ff 	.word	0x003d08ff
 80023e4:	431bde83 	.word	0x431bde83
 80023e8:	10624dd3 	.word	0x10624dd3

080023ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	461a      	mov	r2, r3
 80023f8:	460b      	mov	r3, r1
 80023fa:	817b      	strh	r3, [r7, #10]
 80023fc:	4613      	mov	r3, r2
 80023fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002400:	f7ff fc06 	bl	8001c10 <HAL_GetTick>
 8002404:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b20      	cmp	r3, #32
 8002410:	f040 80e0 	bne.w	80025d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2319      	movs	r3, #25
 800241a:	2201      	movs	r2, #1
 800241c:	4970      	ldr	r1, [pc, #448]	; (80025e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fc58 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800242a:	2302      	movs	r3, #2
 800242c:	e0d3      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_I2C_Master_Transmit+0x50>
 8002438:	2302      	movs	r3, #2
 800243a:	e0cc      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d007      	beq.n	8002462 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002470:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2221      	movs	r2, #33	; 0x21
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2210      	movs	r2, #16
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	893a      	ldrh	r2, [r7, #8]
 8002492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a50      	ldr	r2, [pc, #320]	; (80025e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024a4:	8979      	ldrh	r1, [r7, #10]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	6a3a      	ldr	r2, [r7, #32]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 fac2 	bl	8002a34 <I2C_MasterRequestWrite>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e08d      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024d0:	e066      	b.n	80025a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	6a39      	ldr	r1, [r7, #32]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fcd2 	bl	8002e80 <I2C_WaitOnTXEFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00d      	beq.n	80024fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d107      	bne.n	80024fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e06b      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	781a      	ldrb	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002526:	3b01      	subs	r3, #1
 8002528:	b29a      	uxth	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b04      	cmp	r3, #4
 800253a:	d11b      	bne.n	8002574 <HAL_I2C_Master_Transmit+0x188>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	d017      	beq.n	8002574 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800255e:	b29b      	uxth	r3, r3
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800256c:	3b01      	subs	r3, #1
 800256e:	b29a      	uxth	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	6a39      	ldr	r1, [r7, #32]
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fcc2 	bl	8002f02 <I2C_WaitOnBTFFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00d      	beq.n	80025a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	2b04      	cmp	r3, #4
 800258a:	d107      	bne.n	800259c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e01a      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d194      	bne.n	80024d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	00100002 	.word	0x00100002
 80025e4:	ffff0000 	.word	0xffff0000

080025e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08c      	sub	sp, #48	; 0x30
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	461a      	mov	r2, r3
 80025f4:	460b      	mov	r3, r1
 80025f6:	817b      	strh	r3, [r7, #10]
 80025f8:	4613      	mov	r3, r2
 80025fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff fb08 	bl	8001c10 <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b20      	cmp	r3, #32
 800260c:	f040 820b 	bne.w	8002a26 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2319      	movs	r3, #25
 8002616:	2201      	movs	r2, #1
 8002618:	497c      	ldr	r1, [pc, #496]	; (800280c <HAL_I2C_Master_Receive+0x224>)
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fb5a 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002626:	2302      	movs	r3, #2
 8002628:	e1fe      	b.n	8002a28 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_I2C_Master_Receive+0x50>
 8002634:	2302      	movs	r3, #2
 8002636:	e1f7      	b.n	8002a28 <HAL_I2C_Master_Receive+0x440>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d007      	beq.n	800265e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0201 	orr.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800266c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2222      	movs	r2, #34	; 0x22
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2210      	movs	r2, #16
 800267a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	893a      	ldrh	r2, [r7, #8]
 800268e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4a5c      	ldr	r2, [pc, #368]	; (8002810 <HAL_I2C_Master_Receive+0x228>)
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026a0:	8979      	ldrh	r1, [r7, #10]
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fa46 	bl	8002b38 <I2C_MasterRequestRead>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e1b8      	b.n	8002a28 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d113      	bne.n	80026e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	2300      	movs	r3, #0
 80026c0:	623b      	str	r3, [r7, #32]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	623b      	str	r3, [r7, #32]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	623b      	str	r3, [r7, #32]
 80026d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	e18c      	b.n	8002a00 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d11b      	bne.n	8002726 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fe:	2300      	movs	r3, #0
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	e16c      	b.n	8002a00 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	2b02      	cmp	r3, #2
 800272c:	d11b      	bne.n	8002766 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800273c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800274c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	e14c      	b.n	8002a00 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002774:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800278c:	e138      	b.n	8002a00 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002792:	2b03      	cmp	r3, #3
 8002794:	f200 80f1 	bhi.w	800297a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	2b01      	cmp	r3, #1
 800279e:	d123      	bne.n	80027e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fbed 	bl	8002f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e139      	b.n	8002a28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027e6:	e10b      	b.n	8002a00 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d14e      	bne.n	800288e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	2200      	movs	r2, #0
 80027f8:	4906      	ldr	r1, [pc, #24]	; (8002814 <HAL_I2C_Master_Receive+0x22c>)
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fa6a 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d008      	beq.n	8002818 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e10e      	b.n	8002a28 <HAL_I2C_Master_Receive+0x440>
 800280a:	bf00      	nop
 800280c:	00100002 	.word	0x00100002
 8002810:	ffff0000 	.word	0xffff0000
 8002814:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	3b01      	subs	r3, #1
 8002846:	b29a      	uxth	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002876:	3b01      	subs	r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800288c:	e0b8      	b.n	8002a00 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002894:	2200      	movs	r2, #0
 8002896:	4966      	ldr	r1, [pc, #408]	; (8002a30 <HAL_I2C_Master_Receive+0x448>)
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fa1b 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0bf      	b.n	8002a28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691a      	ldr	r2, [r3, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f0:	2200      	movs	r2, #0
 80028f2:	494f      	ldr	r1, [pc, #316]	; (8002a30 <HAL_I2C_Master_Receive+0x448>)
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f9ed 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e091      	b.n	8002a28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002912:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002930:	3b01      	subs	r3, #1
 8002932:	b29a      	uxth	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296e:	b29b      	uxth	r3, r3
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002978:	e042      	b.n	8002a00 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fb00 	bl	8002f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e04c      	b.n	8002a28 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d118      	bne.n	8002a00 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f47f aec2 	bne.w	800278e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
  }
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3728      	adds	r7, #40	; 0x28
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	00010004 	.word	0x00010004

08002a34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af02      	add	r7, sp, #8
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	460b      	mov	r3, r1
 8002a42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d006      	beq.n	8002a5e <I2C_MasterRequestWrite+0x2a>
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d003      	beq.n	8002a5e <I2C_MasterRequestWrite+0x2a>
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a5c:	d108      	bne.n	8002a70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e00b      	b.n	8002a88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	2b12      	cmp	r3, #18
 8002a76:	d107      	bne.n	8002a88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f91d 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00d      	beq.n	8002abc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aae:	d103      	bne.n	8002ab8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e035      	b.n	8002b28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ac4:	d108      	bne.n	8002ad8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ac6:	897b      	ldrh	r3, [r7, #10]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ad4:	611a      	str	r2, [r3, #16]
 8002ad6:	e01b      	b.n	8002b10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ad8:	897b      	ldrh	r3, [r7, #10]
 8002ada:	11db      	asrs	r3, r3, #7
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	f003 0306 	and.w	r3, r3, #6
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	f063 030f 	orn	r3, r3, #15
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	490e      	ldr	r1, [pc, #56]	; (8002b30 <I2C_MasterRequestWrite+0xfc>)
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f943 	bl	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e010      	b.n	8002b28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b06:	897b      	ldrh	r3, [r7, #10]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	4907      	ldr	r1, [pc, #28]	; (8002b34 <I2C_MasterRequestWrite+0x100>)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f933 	bl	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	00010008 	.word	0x00010008
 8002b34:	00010002 	.word	0x00010002

08002b38 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	460b      	mov	r3, r1
 8002b46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b5c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d006      	beq.n	8002b72 <I2C_MasterRequestRead+0x3a>
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d003      	beq.n	8002b72 <I2C_MasterRequestRead+0x3a>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b70:	d108      	bne.n	8002b84 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e00b      	b.n	8002b9c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	2b11      	cmp	r3, #17
 8002b8a:	d107      	bne.n	8002b9c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f893 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00d      	beq.n	8002bd0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc2:	d103      	bne.n	8002bcc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e079      	b.n	8002cc4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd8:	d108      	bne.n	8002bec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002bda:	897b      	ldrh	r3, [r7, #10]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	611a      	str	r2, [r3, #16]
 8002bea:	e05f      	b.n	8002cac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bec:	897b      	ldrh	r3, [r7, #10]
 8002bee:	11db      	asrs	r3, r3, #7
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f003 0306 	and.w	r3, r3, #6
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f063 030f 	orn	r3, r3, #15
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	4930      	ldr	r1, [pc, #192]	; (8002ccc <I2C_MasterRequestRead+0x194>)
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f8b9 	bl	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e054      	b.n	8002cc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c1a:	897b      	ldrh	r3, [r7, #10]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4929      	ldr	r1, [pc, #164]	; (8002cd0 <I2C_MasterRequestRead+0x198>)
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f8a9 	bl	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e044      	b.n	8002cc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c5e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f831 	bl	8002cd4 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00d      	beq.n	8002c94 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c86:	d103      	bne.n	8002c90 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e017      	b.n	8002cc4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c94:	897b      	ldrh	r3, [r7, #10]
 8002c96:	11db      	asrs	r3, r3, #7
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f003 0306 	and.w	r3, r3, #6
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	f063 030e 	orn	r3, r3, #14
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4907      	ldr	r1, [pc, #28]	; (8002cd0 <I2C_MasterRequestRead+0x198>)
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f865 	bl	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	00010008 	.word	0x00010008
 8002cd0:	00010002 	.word	0x00010002

08002cd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ce4:	e025      	b.n	8002d32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d021      	beq.n	8002d32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cee:	f7fe ff8f 	bl	8001c10 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d116      	bne.n	8002d32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f043 0220 	orr.w	r2, r3, #32
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e023      	b.n	8002d7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	0c1b      	lsrs	r3, r3, #16
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d10d      	bne.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	43da      	mvns	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4013      	ands	r3, r2
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	bf0c      	ite	eq
 8002d4e:	2301      	moveq	r3, #1
 8002d50:	2300      	movne	r3, #0
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	461a      	mov	r2, r3
 8002d56:	e00c      	b.n	8002d72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4013      	ands	r3, r2
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bf0c      	ite	eq
 8002d6a:	2301      	moveq	r3, #1
 8002d6c:	2300      	movne	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	461a      	mov	r2, r3
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d0b6      	beq.n	8002ce6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d90:	e051      	b.n	8002e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da0:	d123      	bne.n	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f043 0204 	orr.w	r2, r3, #4
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e046      	b.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d021      	beq.n	8002e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df2:	f7fe ff0d 	bl	8001c10 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d302      	bcc.n	8002e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d116      	bne.n	8002e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f043 0220 	orr.w	r2, r3, #32
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e020      	b.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	0c1b      	lsrs	r3, r3, #16
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d10c      	bne.n	8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	43da      	mvns	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf14      	ite	ne
 8002e52:	2301      	movne	r3, #1
 8002e54:	2300      	moveq	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	e00b      	b.n	8002e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	43da      	mvns	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4013      	ands	r3, r2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf14      	ite	ne
 8002e6c:	2301      	movne	r3, #1
 8002e6e:	2300      	moveq	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d18d      	bne.n	8002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e8c:	e02d      	b.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f8ce 	bl	8003030 <I2C_IsAcknowledgeFailed>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e02d      	b.n	8002efa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d021      	beq.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea6:	f7fe feb3 	bl	8001c10 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d302      	bcc.n	8002ebc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d116      	bne.n	8002eea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	f043 0220 	orr.w	r2, r3, #32
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e007      	b.n	8002efa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef4:	2b80      	cmp	r3, #128	; 0x80
 8002ef6:	d1ca      	bne.n	8002e8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60f8      	str	r0, [r7, #12]
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f0e:	e02d      	b.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f88d 	bl	8003030 <I2C_IsAcknowledgeFailed>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e02d      	b.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f26:	d021      	beq.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f28:	f7fe fe72 	bl	8001c10 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d302      	bcc.n	8002f3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d116      	bne.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	f043 0220 	orr.w	r2, r3, #32
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d1ca      	bne.n	8002f10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f90:	e042      	b.n	8003018 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d119      	bne.n	8002fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0210 	mvn.w	r2, #16
 8002fa8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e029      	b.n	8003028 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd4:	f7fe fe1c 	bl	8001c10 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d302      	bcc.n	8002fea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d116      	bne.n	8003018 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e007      	b.n	8003028 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003022:	2b40      	cmp	r3, #64	; 0x40
 8003024:	d1b5      	bne.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003046:	d11b      	bne.n	8003080 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003050:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f043 0204 	orr.w	r2, r3, #4
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e0cc      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030a4:	4b68      	ldr	r3, [pc, #416]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d90c      	bls.n	80030cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b65      	ldr	r3, [pc, #404]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b63      	ldr	r3, [pc, #396]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0b8      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e4:	4b59      	ldr	r3, [pc, #356]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a58      	ldr	r2, [pc, #352]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030fc:	4b53      	ldr	r3, [pc, #332]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4a52      	ldr	r2, [pc, #328]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003108:	4b50      	ldr	r3, [pc, #320]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	494d      	ldr	r1, [pc, #308]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d044      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312e:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d119      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e07f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d003      	beq.n	800314e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800314a:	2b03      	cmp	r3, #3
 800314c:	d107      	bne.n	800315e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800314e:	4b3f      	ldr	r3, [pc, #252]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e06f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315e:	4b3b      	ldr	r3, [pc, #236]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e067      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800316e:	4b37      	ldr	r3, [pc, #220]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f023 0203 	bic.w	r2, r3, #3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4934      	ldr	r1, [pc, #208]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	4313      	orrs	r3, r2
 800317e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003180:	f7fe fd46 	bl	8001c10 <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003186:	e00a      	b.n	800319e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003188:	f7fe fd42 	bl	8001c10 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	f241 3288 	movw	r2, #5000	; 0x1388
 8003196:	4293      	cmp	r3, r2
 8003198:	d901      	bls.n	800319e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e04f      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319e:	4b2b      	ldr	r3, [pc, #172]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 020c 	and.w	r2, r3, #12
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d1eb      	bne.n	8003188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031b0:	4b25      	ldr	r3, [pc, #148]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d20c      	bcs.n	80031d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b20      	ldr	r3, [pc, #128]	; (8003248 <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e032      	b.n	800323e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	4916      	ldr	r1, [pc, #88]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003202:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	490e      	ldr	r1, [pc, #56]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003216:	f000 f855 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 800321a:	4602      	mov	r2, r0
 800321c:	4b0b      	ldr	r3, [pc, #44]	; (800324c <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	091b      	lsrs	r3, r3, #4
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	490a      	ldr	r1, [pc, #40]	; (8003250 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	5ccb      	ldrb	r3, [r1, r3]
 800322a:	fa22 f303 	lsr.w	r3, r2, r3
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_RCC_ClockConfig+0x1c8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fca6 	bl	8001b88 <HAL_InitTick>

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023c00 	.word	0x40023c00
 800324c:	40023800 	.word	0x40023800
 8003250:	08006c7c 	.word	0x08006c7c
 8003254:	20000000 	.word	0x20000000
 8003258:	20000004 	.word	0x20000004

0800325c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_RCC_GetHCLKFreq+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000000 	.word	0x20000000

08003274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003278:	f7ff fff0 	bl	800325c <HAL_RCC_GetHCLKFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	0a9b      	lsrs	r3, r3, #10
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	4903      	ldr	r1, [pc, #12]	; (8003298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	08006c8c 	.word	0x08006c8c

0800329c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032a0:	f7ff ffdc 	bl	800325c <HAL_RCC_GetHCLKFreq>
 80032a4:	4602      	mov	r2, r0
 80032a6:	4b05      	ldr	r3, [pc, #20]	; (80032bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	0b5b      	lsrs	r3, r3, #13
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	4903      	ldr	r1, [pc, #12]	; (80032c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b2:	5ccb      	ldrb	r3, [r1, r3]
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40023800 	.word	0x40023800
 80032c0:	08006c8c 	.word	0x08006c8c

080032c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c8:	b088      	sub	sp, #32
 80032ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e0:	4bce      	ldr	r3, [pc, #824]	; (800361c <HAL_RCC_GetSysClockFreq+0x358>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 030c 	and.w	r3, r3, #12
 80032e8:	2b0c      	cmp	r3, #12
 80032ea:	f200 818d 	bhi.w	8003608 <HAL_RCC_GetSysClockFreq+0x344>
 80032ee:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <HAL_RCC_GetSysClockFreq+0x30>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003329 	.word	0x08003329
 80032f8:	08003609 	.word	0x08003609
 80032fc:	08003609 	.word	0x08003609
 8003300:	08003609 	.word	0x08003609
 8003304:	0800332f 	.word	0x0800332f
 8003308:	08003609 	.word	0x08003609
 800330c:	08003609 	.word	0x08003609
 8003310:	08003609 	.word	0x08003609
 8003314:	08003335 	.word	0x08003335
 8003318:	08003609 	.word	0x08003609
 800331c:	08003609 	.word	0x08003609
 8003320:	08003609 	.word	0x08003609
 8003324:	080034a9 	.word	0x080034a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003328:	4bbd      	ldr	r3, [pc, #756]	; (8003620 <HAL_RCC_GetSysClockFreq+0x35c>)
 800332a:	61bb      	str	r3, [r7, #24]
       break;
 800332c:	e16f      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800332e:	4bbd      	ldr	r3, [pc, #756]	; (8003624 <HAL_RCC_GetSysClockFreq+0x360>)
 8003330:	61bb      	str	r3, [r7, #24]
      break;
 8003332:	e16c      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003334:	4bb9      	ldr	r3, [pc, #740]	; (800361c <HAL_RCC_GetSysClockFreq+0x358>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800333c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800333e:	4bb7      	ldr	r3, [pc, #732]	; (800361c <HAL_RCC_GetSysClockFreq+0x358>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d053      	beq.n	80033f2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334a:	4bb4      	ldr	r3, [pc, #720]	; (800361c <HAL_RCC_GetSysClockFreq+0x358>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	099b      	lsrs	r3, r3, #6
 8003350:	461a      	mov	r2, r3
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	f240 10ff 	movw	r0, #511	; 0x1ff
 800335a:	f04f 0100 	mov.w	r1, #0
 800335e:	ea02 0400 	and.w	r4, r2, r0
 8003362:	603c      	str	r4, [r7, #0]
 8003364:	400b      	ands	r3, r1
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	e9d7 4500 	ldrd	r4, r5, [r7]
 800336c:	4620      	mov	r0, r4
 800336e:	4629      	mov	r1, r5
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	014b      	lsls	r3, r1, #5
 800337a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800337e:	0142      	lsls	r2, r0, #5
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	4623      	mov	r3, r4
 8003386:	1ac0      	subs	r0, r0, r3
 8003388:	462b      	mov	r3, r5
 800338a:	eb61 0103 	sbc.w	r1, r1, r3
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	018b      	lsls	r3, r1, #6
 8003398:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800339c:	0182      	lsls	r2, r0, #6
 800339e:	1a12      	subs	r2, r2, r0
 80033a0:	eb63 0301 	sbc.w	r3, r3, r1
 80033a4:	f04f 0000 	mov.w	r0, #0
 80033a8:	f04f 0100 	mov.w	r1, #0
 80033ac:	00d9      	lsls	r1, r3, #3
 80033ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033b2:	00d0      	lsls	r0, r2, #3
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4621      	mov	r1, r4
 80033ba:	1852      	adds	r2, r2, r1
 80033bc:	4629      	mov	r1, r5
 80033be:	eb43 0101 	adc.w	r1, r3, r1
 80033c2:	460b      	mov	r3, r1
 80033c4:	f04f 0000 	mov.w	r0, #0
 80033c8:	f04f 0100 	mov.w	r1, #0
 80033cc:	0259      	lsls	r1, r3, #9
 80033ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033d2:	0250      	lsls	r0, r2, #9
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	461a      	mov	r2, r3
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	f7fd fc50 	bl	8000c88 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4613      	mov	r3, r2
 80033ee:	61fb      	str	r3, [r7, #28]
 80033f0:	e04c      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f2:	4b8a      	ldr	r3, [pc, #552]	; (800361c <HAL_RCC_GetSysClockFreq+0x358>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	099b      	lsrs	r3, r3, #6
 80033f8:	461a      	mov	r2, r3
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003402:	f04f 0100 	mov.w	r1, #0
 8003406:	ea02 0a00 	and.w	sl, r2, r0
 800340a:	ea03 0b01 	and.w	fp, r3, r1
 800340e:	4650      	mov	r0, sl
 8003410:	4659      	mov	r1, fp
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	014b      	lsls	r3, r1, #5
 800341c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003420:	0142      	lsls	r2, r0, #5
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	ebb0 000a 	subs.w	r0, r0, sl
 800342a:	eb61 010b 	sbc.w	r1, r1, fp
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	018b      	lsls	r3, r1, #6
 8003438:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800343c:	0182      	lsls	r2, r0, #6
 800343e:	1a12      	subs	r2, r2, r0
 8003440:	eb63 0301 	sbc.w	r3, r3, r1
 8003444:	f04f 0000 	mov.w	r0, #0
 8003448:	f04f 0100 	mov.w	r1, #0
 800344c:	00d9      	lsls	r1, r3, #3
 800344e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003452:	00d0      	lsls	r0, r2, #3
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	eb12 020a 	adds.w	r2, r2, sl
 800345c:	eb43 030b 	adc.w	r3, r3, fp
 8003460:	f04f 0000 	mov.w	r0, #0
 8003464:	f04f 0100 	mov.w	r1, #0
 8003468:	0299      	lsls	r1, r3, #10
 800346a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800346e:	0290      	lsls	r0, r2, #10
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	461a      	mov	r2, r3
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	f7fd fc02 	bl	8000c88 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4613      	mov	r3, r2
 800348a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800348c:	4b63      	ldr	r3, [pc, #396]	; (800361c <HAL_RCC_GetSysClockFreq+0x358>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	3301      	adds	r3, #1
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800349c:	69fa      	ldr	r2, [r7, #28]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	61bb      	str	r3, [r7, #24]
      break;
 80034a6:	e0b2      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a8:	4b5c      	ldr	r3, [pc, #368]	; (800361c <HAL_RCC_GetSysClockFreq+0x358>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b2:	4b5a      	ldr	r3, [pc, #360]	; (800361c <HAL_RCC_GetSysClockFreq+0x358>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d04d      	beq.n	800355a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034be:	4b57      	ldr	r3, [pc, #348]	; (800361c <HAL_RCC_GetSysClockFreq+0x358>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	461a      	mov	r2, r3
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034ce:	f04f 0100 	mov.w	r1, #0
 80034d2:	ea02 0800 	and.w	r8, r2, r0
 80034d6:	ea03 0901 	and.w	r9, r3, r1
 80034da:	4640      	mov	r0, r8
 80034dc:	4649      	mov	r1, r9
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	014b      	lsls	r3, r1, #5
 80034e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034ec:	0142      	lsls	r2, r0, #5
 80034ee:	4610      	mov	r0, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	ebb0 0008 	subs.w	r0, r0, r8
 80034f6:	eb61 0109 	sbc.w	r1, r1, r9
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	018b      	lsls	r3, r1, #6
 8003504:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003508:	0182      	lsls	r2, r0, #6
 800350a:	1a12      	subs	r2, r2, r0
 800350c:	eb63 0301 	sbc.w	r3, r3, r1
 8003510:	f04f 0000 	mov.w	r0, #0
 8003514:	f04f 0100 	mov.w	r1, #0
 8003518:	00d9      	lsls	r1, r3, #3
 800351a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800351e:	00d0      	lsls	r0, r2, #3
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	eb12 0208 	adds.w	r2, r2, r8
 8003528:	eb43 0309 	adc.w	r3, r3, r9
 800352c:	f04f 0000 	mov.w	r0, #0
 8003530:	f04f 0100 	mov.w	r1, #0
 8003534:	0259      	lsls	r1, r3, #9
 8003536:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800353a:	0250      	lsls	r0, r2, #9
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4610      	mov	r0, r2
 8003542:	4619      	mov	r1, r3
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	461a      	mov	r2, r3
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	f7fd fb9c 	bl	8000c88 <__aeabi_uldivmod>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4613      	mov	r3, r2
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	e04a      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355a:	4b30      	ldr	r3, [pc, #192]	; (800361c <HAL_RCC_GetSysClockFreq+0x358>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	099b      	lsrs	r3, r3, #6
 8003560:	461a      	mov	r2, r3
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	f240 10ff 	movw	r0, #511	; 0x1ff
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	ea02 0400 	and.w	r4, r2, r0
 8003572:	ea03 0501 	and.w	r5, r3, r1
 8003576:	4620      	mov	r0, r4
 8003578:	4629      	mov	r1, r5
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	014b      	lsls	r3, r1, #5
 8003584:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003588:	0142      	lsls	r2, r0, #5
 800358a:	4610      	mov	r0, r2
 800358c:	4619      	mov	r1, r3
 800358e:	1b00      	subs	r0, r0, r4
 8003590:	eb61 0105 	sbc.w	r1, r1, r5
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	018b      	lsls	r3, r1, #6
 800359e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035a2:	0182      	lsls	r2, r0, #6
 80035a4:	1a12      	subs	r2, r2, r0
 80035a6:	eb63 0301 	sbc.w	r3, r3, r1
 80035aa:	f04f 0000 	mov.w	r0, #0
 80035ae:	f04f 0100 	mov.w	r1, #0
 80035b2:	00d9      	lsls	r1, r3, #3
 80035b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035b8:	00d0      	lsls	r0, r2, #3
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	1912      	adds	r2, r2, r4
 80035c0:	eb45 0303 	adc.w	r3, r5, r3
 80035c4:	f04f 0000 	mov.w	r0, #0
 80035c8:	f04f 0100 	mov.w	r1, #0
 80035cc:	0299      	lsls	r1, r3, #10
 80035ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035d2:	0290      	lsls	r0, r2, #10
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	461a      	mov	r2, r3
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	f7fd fb50 	bl	8000c88 <__aeabi_uldivmod>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4613      	mov	r3, r2
 80035ee:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <HAL_RCC_GetSysClockFreq+0x358>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	0f1b      	lsrs	r3, r3, #28
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	61bb      	str	r3, [r7, #24]
      break;
 8003606:	e002      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003608:	4b05      	ldr	r3, [pc, #20]	; (8003620 <HAL_RCC_GetSysClockFreq+0x35c>)
 800360a:	61bb      	str	r3, [r7, #24]
      break;
 800360c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360e:	69bb      	ldr	r3, [r7, #24]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800
 8003620:	00f42400 	.word	0x00f42400
 8003624:	007a1200 	.word	0x007a1200

08003628 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e28d      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 8083 	beq.w	800374e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003648:	4b94      	ldr	r3, [pc, #592]	; (800389c <HAL_RCC_OscConfig+0x274>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f003 030c 	and.w	r3, r3, #12
 8003650:	2b04      	cmp	r3, #4
 8003652:	d019      	beq.n	8003688 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003654:	4b91      	ldr	r3, [pc, #580]	; (800389c <HAL_RCC_OscConfig+0x274>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800365c:	2b08      	cmp	r3, #8
 800365e:	d106      	bne.n	800366e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003660:	4b8e      	ldr	r3, [pc, #568]	; (800389c <HAL_RCC_OscConfig+0x274>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003668:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800366c:	d00c      	beq.n	8003688 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800366e:	4b8b      	ldr	r3, [pc, #556]	; (800389c <HAL_RCC_OscConfig+0x274>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003676:	2b0c      	cmp	r3, #12
 8003678:	d112      	bne.n	80036a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800367a:	4b88      	ldr	r3, [pc, #544]	; (800389c <HAL_RCC_OscConfig+0x274>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003686:	d10b      	bne.n	80036a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003688:	4b84      	ldr	r3, [pc, #528]	; (800389c <HAL_RCC_OscConfig+0x274>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d05b      	beq.n	800374c <HAL_RCC_OscConfig+0x124>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d157      	bne.n	800374c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e25a      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a8:	d106      	bne.n	80036b8 <HAL_RCC_OscConfig+0x90>
 80036aa:	4b7c      	ldr	r3, [pc, #496]	; (800389c <HAL_RCC_OscConfig+0x274>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a7b      	ldr	r2, [pc, #492]	; (800389c <HAL_RCC_OscConfig+0x274>)
 80036b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	e01d      	b.n	80036f4 <HAL_RCC_OscConfig+0xcc>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0xb4>
 80036c2:	4b76      	ldr	r3, [pc, #472]	; (800389c <HAL_RCC_OscConfig+0x274>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a75      	ldr	r2, [pc, #468]	; (800389c <HAL_RCC_OscConfig+0x274>)
 80036c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	4b73      	ldr	r3, [pc, #460]	; (800389c <HAL_RCC_OscConfig+0x274>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a72      	ldr	r2, [pc, #456]	; (800389c <HAL_RCC_OscConfig+0x274>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0xcc>
 80036dc:	4b6f      	ldr	r3, [pc, #444]	; (800389c <HAL_RCC_OscConfig+0x274>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a6e      	ldr	r2, [pc, #440]	; (800389c <HAL_RCC_OscConfig+0x274>)
 80036e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b6c      	ldr	r3, [pc, #432]	; (800389c <HAL_RCC_OscConfig+0x274>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a6b      	ldr	r2, [pc, #428]	; (800389c <HAL_RCC_OscConfig+0x274>)
 80036ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d013      	beq.n	8003724 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fe fa88 	bl	8001c10 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003704:	f7fe fa84 	bl	8001c10 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b64      	cmp	r3, #100	; 0x64
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e21f      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003716:	4b61      	ldr	r3, [pc, #388]	; (800389c <HAL_RCC_OscConfig+0x274>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0xdc>
 8003722:	e014      	b.n	800374e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fe fa74 	bl	8001c10 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800372c:	f7fe fa70 	bl	8001c10 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e20b      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800373e:	4b57      	ldr	r3, [pc, #348]	; (800389c <HAL_RCC_OscConfig+0x274>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x104>
 800374a:	e000      	b.n	800374e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d06f      	beq.n	800383a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800375a:	4b50      	ldr	r3, [pc, #320]	; (800389c <HAL_RCC_OscConfig+0x274>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b00      	cmp	r3, #0
 8003764:	d017      	beq.n	8003796 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003766:	4b4d      	ldr	r3, [pc, #308]	; (800389c <HAL_RCC_OscConfig+0x274>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800376e:	2b08      	cmp	r3, #8
 8003770:	d105      	bne.n	800377e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003772:	4b4a      	ldr	r3, [pc, #296]	; (800389c <HAL_RCC_OscConfig+0x274>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00b      	beq.n	8003796 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800377e:	4b47      	ldr	r3, [pc, #284]	; (800389c <HAL_RCC_OscConfig+0x274>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003786:	2b0c      	cmp	r3, #12
 8003788:	d11c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800378a:	4b44      	ldr	r3, [pc, #272]	; (800389c <HAL_RCC_OscConfig+0x274>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d116      	bne.n	80037c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003796:	4b41      	ldr	r3, [pc, #260]	; (800389c <HAL_RCC_OscConfig+0x274>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <HAL_RCC_OscConfig+0x186>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d001      	beq.n	80037ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e1d3      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ae:	4b3b      	ldr	r3, [pc, #236]	; (800389c <HAL_RCC_OscConfig+0x274>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4937      	ldr	r1, [pc, #220]	; (800389c <HAL_RCC_OscConfig+0x274>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c2:	e03a      	b.n	800383a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d020      	beq.n	800380e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037cc:	4b34      	ldr	r3, [pc, #208]	; (80038a0 <HAL_RCC_OscConfig+0x278>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d2:	f7fe fa1d 	bl	8001c10 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037da:	f7fe fa19 	bl	8001c10 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e1b4      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ec:	4b2b      	ldr	r3, [pc, #172]	; (800389c <HAL_RCC_OscConfig+0x274>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f8:	4b28      	ldr	r3, [pc, #160]	; (800389c <HAL_RCC_OscConfig+0x274>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4925      	ldr	r1, [pc, #148]	; (800389c <HAL_RCC_OscConfig+0x274>)
 8003808:	4313      	orrs	r3, r2
 800380a:	600b      	str	r3, [r1, #0]
 800380c:	e015      	b.n	800383a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800380e:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <HAL_RCC_OscConfig+0x278>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003814:	f7fe f9fc 	bl	8001c10 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800381c:	f7fe f9f8 	bl	8001c10 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e193      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800382e:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_RCC_OscConfig+0x274>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d036      	beq.n	80038b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d016      	beq.n	800387c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <HAL_RCC_OscConfig+0x27c>)
 8003850:	2201      	movs	r2, #1
 8003852:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fe f9dc 	bl	8001c10 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800385c:	f7fe f9d8 	bl	8001c10 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e173      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_RCC_OscConfig+0x274>)
 8003870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f0      	beq.n	800385c <HAL_RCC_OscConfig+0x234>
 800387a:	e01b      	b.n	80038b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <HAL_RCC_OscConfig+0x27c>)
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003882:	f7fe f9c5 	bl	8001c10 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003888:	e00e      	b.n	80038a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388a:	f7fe f9c1 	bl	8001c10 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d907      	bls.n	80038a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e15c      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
 800389c:	40023800 	.word	0x40023800
 80038a0:	42470000 	.word	0x42470000
 80038a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a8:	4b8a      	ldr	r3, [pc, #552]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 80038aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1ea      	bne.n	800388a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 8097 	beq.w	80039f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c2:	2300      	movs	r3, #0
 80038c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c6:	4b83      	ldr	r3, [pc, #524]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10f      	bne.n	80038f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	4b7f      	ldr	r3, [pc, #508]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	4a7e      	ldr	r2, [pc, #504]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 80038dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e0:	6413      	str	r3, [r2, #64]	; 0x40
 80038e2:	4b7c      	ldr	r3, [pc, #496]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ee:	2301      	movs	r3, #1
 80038f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f2:	4b79      	ldr	r3, [pc, #484]	; (8003ad8 <HAL_RCC_OscConfig+0x4b0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d118      	bne.n	8003930 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038fe:	4b76      	ldr	r3, [pc, #472]	; (8003ad8 <HAL_RCC_OscConfig+0x4b0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a75      	ldr	r2, [pc, #468]	; (8003ad8 <HAL_RCC_OscConfig+0x4b0>)
 8003904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800390a:	f7fe f981 	bl	8001c10 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003912:	f7fe f97d 	bl	8001c10 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e118      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003924:	4b6c      	ldr	r3, [pc, #432]	; (8003ad8 <HAL_RCC_OscConfig+0x4b0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d106      	bne.n	8003946 <HAL_RCC_OscConfig+0x31e>
 8003938:	4b66      	ldr	r3, [pc, #408]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	4a65      	ldr	r2, [pc, #404]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	6713      	str	r3, [r2, #112]	; 0x70
 8003944:	e01c      	b.n	8003980 <HAL_RCC_OscConfig+0x358>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b05      	cmp	r3, #5
 800394c:	d10c      	bne.n	8003968 <HAL_RCC_OscConfig+0x340>
 800394e:	4b61      	ldr	r3, [pc, #388]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	4a60      	ldr	r2, [pc, #384]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 8003954:	f043 0304 	orr.w	r3, r3, #4
 8003958:	6713      	str	r3, [r2, #112]	; 0x70
 800395a:	4b5e      	ldr	r3, [pc, #376]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	4a5d      	ldr	r2, [pc, #372]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	6713      	str	r3, [r2, #112]	; 0x70
 8003966:	e00b      	b.n	8003980 <HAL_RCC_OscConfig+0x358>
 8003968:	4b5a      	ldr	r3, [pc, #360]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396c:	4a59      	ldr	r2, [pc, #356]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	6713      	str	r3, [r2, #112]	; 0x70
 8003974:	4b57      	ldr	r3, [pc, #348]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	4a56      	ldr	r2, [pc, #344]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 800397a:	f023 0304 	bic.w	r3, r3, #4
 800397e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d015      	beq.n	80039b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fe f942 	bl	8001c10 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003990:	f7fe f93e 	bl	8001c10 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e0d7      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a6:	4b4b      	ldr	r3, [pc, #300]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0ee      	beq.n	8003990 <HAL_RCC_OscConfig+0x368>
 80039b2:	e014      	b.n	80039de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fe f92c 	bl	8001c10 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039bc:	f7fe f928 	bl	8001c10 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e0c1      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d2:	4b40      	ldr	r3, [pc, #256]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1ee      	bne.n	80039bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039de:	7dfb      	ldrb	r3, [r7, #23]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d105      	bne.n	80039f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039e4:	4b3b      	ldr	r3, [pc, #236]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	4a3a      	ldr	r2, [pc, #232]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 80039ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80ad 	beq.w	8003b54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039fa:	4b36      	ldr	r3, [pc, #216]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d060      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d145      	bne.n	8003a9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0e:	4b33      	ldr	r3, [pc, #204]	; (8003adc <HAL_RCC_OscConfig+0x4b4>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a14:	f7fe f8fc 	bl	8001c10 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	e008      	b.n	8003a2e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a1c:	f7fe f8f8 	bl	8001c10 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e093      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2e:	4b29      	ldr	r3, [pc, #164]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f0      	bne.n	8003a1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	019b      	lsls	r3, r3, #6
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	3b01      	subs	r3, #1
 8003a54:	041b      	lsls	r3, r3, #16
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	061b      	lsls	r3, r3, #24
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a64:	071b      	lsls	r3, r3, #28
 8003a66:	491b      	ldr	r1, [pc, #108]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <HAL_RCC_OscConfig+0x4b4>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a72:	f7fe f8cd 	bl	8001c10 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a7a:	f7fe f8c9 	bl	8001c10 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e064      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8c:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x452>
 8003a98:	e05c      	b.n	8003b54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9a:	4b10      	ldr	r3, [pc, #64]	; (8003adc <HAL_RCC_OscConfig+0x4b4>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa0:	f7fe f8b6 	bl	8001c10 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fe f8b2 	bl	8001c10 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e04d      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_RCC_OscConfig+0x4ac>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x480>
 8003ac6:	e045      	b.n	8003b54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e040      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ae0:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <HAL_RCC_OscConfig+0x538>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d030      	beq.n	8003b50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d129      	bne.n	8003b50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d122      	bne.n	8003b50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b10:	4013      	ands	r3, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d119      	bne.n	8003b50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	085b      	lsrs	r3, r3, #1
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d10f      	bne.n	8003b50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d107      	bne.n	8003b50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d001      	beq.n	8003b54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800

08003b64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e03f      	b.n	8003bf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd fbd6 	bl	800133c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2224      	movs	r2, #36	; 0x24
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f929 	bl	8003e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b08a      	sub	sp, #40	; 0x28
 8003c02:	af02      	add	r7, sp, #8
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	60b9      	str	r1, [r7, #8]
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b20      	cmp	r3, #32
 8003c1c:	d17c      	bne.n	8003d18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <HAL_UART_Transmit+0x2c>
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e075      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_UART_Transmit+0x3e>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e06e      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2221      	movs	r2, #33	; 0x21
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c52:	f7fd ffdd 	bl	8001c10 <HAL_GetTick>
 8003c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	88fa      	ldrh	r2, [r7, #6]
 8003c62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6c:	d108      	bne.n	8003c80 <HAL_UART_Transmit+0x82>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d104      	bne.n	8003c80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	61bb      	str	r3, [r7, #24]
 8003c7e:	e003      	b.n	8003c88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c90:	e02a      	b.n	8003ce8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2180      	movs	r1, #128	; 0x80
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f840 	bl	8003d22 <UART_WaitOnFlagUntilTimeout>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e036      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10b      	bne.n	8003cca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	3302      	adds	r3, #2
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	e007      	b.n	8003cda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1cf      	bne.n	8003c92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2140      	movs	r1, #64	; 0x40
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f810 	bl	8003d22 <UART_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e006      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	e000      	b.n	8003d1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d18:	2302      	movs	r3, #2
  }
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b090      	sub	sp, #64	; 0x40
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	603b      	str	r3, [r7, #0]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d32:	e050      	b.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3a:	d04c      	beq.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d42:	f7fd ff65 	bl	8001c10 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d241      	bcs.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	330c      	adds	r3, #12
 8003d58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d72:	637a      	str	r2, [r7, #52]	; 0x34
 8003d74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e5      	bne.n	8003d52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3314      	adds	r3, #20
 8003d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	613b      	str	r3, [r7, #16]
   return(result);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003da6:	623a      	str	r2, [r7, #32]
 8003da8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	69f9      	ldr	r1, [r7, #28]
 8003dac:	6a3a      	ldr	r2, [r7, #32]
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e5      	bne.n	8003d86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e00f      	b.n	8003df6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	4013      	ands	r3, r2
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	bf0c      	ite	eq
 8003de6:	2301      	moveq	r3, #1
 8003de8:	2300      	movne	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d09f      	beq.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3740      	adds	r7, #64	; 0x40
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
	...

08003e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e04:	b09f      	sub	sp, #124	; 0x7c
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e16:	68d9      	ldr	r1, [r3, #12]
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	ea40 0301 	orr.w	r3, r0, r1
 8003e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e44:	f021 010c 	bic.w	r1, r1, #12
 8003e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e4e:	430b      	orrs	r3, r1
 8003e50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5e:	6999      	ldr	r1, [r3, #24]
 8003e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	ea40 0301 	orr.w	r3, r0, r1
 8003e68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	4bc5      	ldr	r3, [pc, #788]	; (8004184 <UART_SetConfig+0x384>)
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d004      	beq.n	8003e7e <UART_SetConfig+0x7e>
 8003e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	4bc3      	ldr	r3, [pc, #780]	; (8004188 <UART_SetConfig+0x388>)
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d103      	bne.n	8003e86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e7e:	f7ff fa0d 	bl	800329c <HAL_RCC_GetPCLK2Freq>
 8003e82:	6778      	str	r0, [r7, #116]	; 0x74
 8003e84:	e002      	b.n	8003e8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e86:	f7ff f9f5 	bl	8003274 <HAL_RCC_GetPCLK1Freq>
 8003e8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e94:	f040 80b6 	bne.w	8004004 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e9a:	461c      	mov	r4, r3
 8003e9c:	f04f 0500 	mov.w	r5, #0
 8003ea0:	4622      	mov	r2, r4
 8003ea2:	462b      	mov	r3, r5
 8003ea4:	1891      	adds	r1, r2, r2
 8003ea6:	6439      	str	r1, [r7, #64]	; 0x40
 8003ea8:	415b      	adcs	r3, r3
 8003eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8003eac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003eb0:	1912      	adds	r2, r2, r4
 8003eb2:	eb45 0303 	adc.w	r3, r5, r3
 8003eb6:	f04f 0000 	mov.w	r0, #0
 8003eba:	f04f 0100 	mov.w	r1, #0
 8003ebe:	00d9      	lsls	r1, r3, #3
 8003ec0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ec4:	00d0      	lsls	r0, r2, #3
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	1911      	adds	r1, r2, r4
 8003ecc:	6639      	str	r1, [r7, #96]	; 0x60
 8003ece:	416b      	adcs	r3, r5
 8003ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	1891      	adds	r1, r2, r2
 8003ede:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ee0:	415b      	adcs	r3, r3
 8003ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ee8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003eec:	f7fc fecc 	bl	8000c88 <__aeabi_uldivmod>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4ba5      	ldr	r3, [pc, #660]	; (800418c <UART_SetConfig+0x38c>)
 8003ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	011e      	lsls	r6, r3, #4
 8003efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f00:	461c      	mov	r4, r3
 8003f02:	f04f 0500 	mov.w	r5, #0
 8003f06:	4622      	mov	r2, r4
 8003f08:	462b      	mov	r3, r5
 8003f0a:	1891      	adds	r1, r2, r2
 8003f0c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f0e:	415b      	adcs	r3, r3
 8003f10:	637b      	str	r3, [r7, #52]	; 0x34
 8003f12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f16:	1912      	adds	r2, r2, r4
 8003f18:	eb45 0303 	adc.w	r3, r5, r3
 8003f1c:	f04f 0000 	mov.w	r0, #0
 8003f20:	f04f 0100 	mov.w	r1, #0
 8003f24:	00d9      	lsls	r1, r3, #3
 8003f26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f2a:	00d0      	lsls	r0, r2, #3
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	460b      	mov	r3, r1
 8003f30:	1911      	adds	r1, r2, r4
 8003f32:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f34:	416b      	adcs	r3, r5
 8003f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	1891      	adds	r1, r2, r2
 8003f44:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f46:	415b      	adcs	r3, r3
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f52:	f7fc fe99 	bl	8000c88 <__aeabi_uldivmod>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4b8c      	ldr	r3, [pc, #560]	; (800418c <UART_SetConfig+0x38c>)
 8003f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f60:	095b      	lsrs	r3, r3, #5
 8003f62:	2164      	movs	r1, #100	; 0x64
 8003f64:	fb01 f303 	mul.w	r3, r1, r3
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	3332      	adds	r3, #50	; 0x32
 8003f6e:	4a87      	ldr	r2, [pc, #540]	; (800418c <UART_SetConfig+0x38c>)
 8003f70:	fba2 2303 	umull	r2, r3, r2, r3
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f7c:	441e      	add	r6, r3
 8003f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f80:	4618      	mov	r0, r3
 8003f82:	f04f 0100 	mov.w	r1, #0
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	1894      	adds	r4, r2, r2
 8003f8c:	623c      	str	r4, [r7, #32]
 8003f8e:	415b      	adcs	r3, r3
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
 8003f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f96:	1812      	adds	r2, r2, r0
 8003f98:	eb41 0303 	adc.w	r3, r1, r3
 8003f9c:	f04f 0400 	mov.w	r4, #0
 8003fa0:	f04f 0500 	mov.w	r5, #0
 8003fa4:	00dd      	lsls	r5, r3, #3
 8003fa6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003faa:	00d4      	lsls	r4, r2, #3
 8003fac:	4622      	mov	r2, r4
 8003fae:	462b      	mov	r3, r5
 8003fb0:	1814      	adds	r4, r2, r0
 8003fb2:	653c      	str	r4, [r7, #80]	; 0x50
 8003fb4:	414b      	adcs	r3, r1
 8003fb6:	657b      	str	r3, [r7, #84]	; 0x54
 8003fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	1891      	adds	r1, r2, r2
 8003fc4:	61b9      	str	r1, [r7, #24]
 8003fc6:	415b      	adcs	r3, r3
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003fd2:	f7fc fe59 	bl	8000c88 <__aeabi_uldivmod>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4b6c      	ldr	r3, [pc, #432]	; (800418c <UART_SetConfig+0x38c>)
 8003fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	2164      	movs	r1, #100	; 0x64
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	3332      	adds	r3, #50	; 0x32
 8003fee:	4a67      	ldr	r2, [pc, #412]	; (800418c <UART_SetConfig+0x38c>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	f003 0207 	and.w	r2, r3, #7
 8003ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4432      	add	r2, r6
 8004000:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004002:	e0b9      	b.n	8004178 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004006:	461c      	mov	r4, r3
 8004008:	f04f 0500 	mov.w	r5, #0
 800400c:	4622      	mov	r2, r4
 800400e:	462b      	mov	r3, r5
 8004010:	1891      	adds	r1, r2, r2
 8004012:	6139      	str	r1, [r7, #16]
 8004014:	415b      	adcs	r3, r3
 8004016:	617b      	str	r3, [r7, #20]
 8004018:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800401c:	1912      	adds	r2, r2, r4
 800401e:	eb45 0303 	adc.w	r3, r5, r3
 8004022:	f04f 0000 	mov.w	r0, #0
 8004026:	f04f 0100 	mov.w	r1, #0
 800402a:	00d9      	lsls	r1, r3, #3
 800402c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004030:	00d0      	lsls	r0, r2, #3
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	eb12 0804 	adds.w	r8, r2, r4
 800403a:	eb43 0905 	adc.w	r9, r3, r5
 800403e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4618      	mov	r0, r3
 8004044:	f04f 0100 	mov.w	r1, #0
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	008b      	lsls	r3, r1, #2
 8004052:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004056:	0082      	lsls	r2, r0, #2
 8004058:	4640      	mov	r0, r8
 800405a:	4649      	mov	r1, r9
 800405c:	f7fc fe14 	bl	8000c88 <__aeabi_uldivmod>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4b49      	ldr	r3, [pc, #292]	; (800418c <UART_SetConfig+0x38c>)
 8004066:	fba3 2302 	umull	r2, r3, r3, r2
 800406a:	095b      	lsrs	r3, r3, #5
 800406c:	011e      	lsls	r6, r3, #4
 800406e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004070:	4618      	mov	r0, r3
 8004072:	f04f 0100 	mov.w	r1, #0
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	1894      	adds	r4, r2, r2
 800407c:	60bc      	str	r4, [r7, #8]
 800407e:	415b      	adcs	r3, r3
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004086:	1812      	adds	r2, r2, r0
 8004088:	eb41 0303 	adc.w	r3, r1, r3
 800408c:	f04f 0400 	mov.w	r4, #0
 8004090:	f04f 0500 	mov.w	r5, #0
 8004094:	00dd      	lsls	r5, r3, #3
 8004096:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800409a:	00d4      	lsls	r4, r2, #3
 800409c:	4622      	mov	r2, r4
 800409e:	462b      	mov	r3, r5
 80040a0:	1814      	adds	r4, r2, r0
 80040a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80040a4:	414b      	adcs	r3, r1
 80040a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f04f 0100 	mov.w	r1, #0
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	008b      	lsls	r3, r1, #2
 80040bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040c0:	0082      	lsls	r2, r0, #2
 80040c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80040c6:	f7fc fddf 	bl	8000c88 <__aeabi_uldivmod>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4b2f      	ldr	r3, [pc, #188]	; (800418c <UART_SetConfig+0x38c>)
 80040d0:	fba3 1302 	umull	r1, r3, r3, r2
 80040d4:	095b      	lsrs	r3, r3, #5
 80040d6:	2164      	movs	r1, #100	; 0x64
 80040d8:	fb01 f303 	mul.w	r3, r1, r3
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	3332      	adds	r3, #50	; 0x32
 80040e2:	4a2a      	ldr	r2, [pc, #168]	; (800418c <UART_SetConfig+0x38c>)
 80040e4:	fba2 2303 	umull	r2, r3, r2, r3
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ee:	441e      	add	r6, r3
 80040f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040f2:	4618      	mov	r0, r3
 80040f4:	f04f 0100 	mov.w	r1, #0
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	1894      	adds	r4, r2, r2
 80040fe:	603c      	str	r4, [r7, #0]
 8004100:	415b      	adcs	r3, r3
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004108:	1812      	adds	r2, r2, r0
 800410a:	eb41 0303 	adc.w	r3, r1, r3
 800410e:	f04f 0400 	mov.w	r4, #0
 8004112:	f04f 0500 	mov.w	r5, #0
 8004116:	00dd      	lsls	r5, r3, #3
 8004118:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800411c:	00d4      	lsls	r4, r2, #3
 800411e:	4622      	mov	r2, r4
 8004120:	462b      	mov	r3, r5
 8004122:	eb12 0a00 	adds.w	sl, r2, r0
 8004126:	eb43 0b01 	adc.w	fp, r3, r1
 800412a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	4618      	mov	r0, r3
 8004130:	f04f 0100 	mov.w	r1, #0
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	008b      	lsls	r3, r1, #2
 800413e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004142:	0082      	lsls	r2, r0, #2
 8004144:	4650      	mov	r0, sl
 8004146:	4659      	mov	r1, fp
 8004148:	f7fc fd9e 	bl	8000c88 <__aeabi_uldivmod>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4b0e      	ldr	r3, [pc, #56]	; (800418c <UART_SetConfig+0x38c>)
 8004152:	fba3 1302 	umull	r1, r3, r3, r2
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	2164      	movs	r1, #100	; 0x64
 800415a:	fb01 f303 	mul.w	r3, r1, r3
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	3332      	adds	r3, #50	; 0x32
 8004164:	4a09      	ldr	r2, [pc, #36]	; (800418c <UART_SetConfig+0x38c>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	f003 020f 	and.w	r2, r3, #15
 8004170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4432      	add	r2, r6
 8004176:	609a      	str	r2, [r3, #8]
}
 8004178:	bf00      	nop
 800417a:	377c      	adds	r7, #124	; 0x7c
 800417c:	46bd      	mov	sp, r7
 800417e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004182:	bf00      	nop
 8004184:	40011000 	.word	0x40011000
 8004188:	40011400 	.word	0x40011400
 800418c:	51eb851f 	.word	0x51eb851f

08004190 <__errno>:
 8004190:	4b01      	ldr	r3, [pc, #4]	; (8004198 <__errno+0x8>)
 8004192:	6818      	ldr	r0, [r3, #0]
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	2000000c 	.word	0x2000000c

0800419c <__sflush_r>:
 800419c:	898a      	ldrh	r2, [r1, #12]
 800419e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a2:	4605      	mov	r5, r0
 80041a4:	0710      	lsls	r0, r2, #28
 80041a6:	460c      	mov	r4, r1
 80041a8:	d458      	bmi.n	800425c <__sflush_r+0xc0>
 80041aa:	684b      	ldr	r3, [r1, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	dc05      	bgt.n	80041bc <__sflush_r+0x20>
 80041b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	dc02      	bgt.n	80041bc <__sflush_r+0x20>
 80041b6:	2000      	movs	r0, #0
 80041b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041be:	2e00      	cmp	r6, #0
 80041c0:	d0f9      	beq.n	80041b6 <__sflush_r+0x1a>
 80041c2:	2300      	movs	r3, #0
 80041c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041c8:	682f      	ldr	r7, [r5, #0]
 80041ca:	602b      	str	r3, [r5, #0]
 80041cc:	d032      	beq.n	8004234 <__sflush_r+0x98>
 80041ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041d0:	89a3      	ldrh	r3, [r4, #12]
 80041d2:	075a      	lsls	r2, r3, #29
 80041d4:	d505      	bpl.n	80041e2 <__sflush_r+0x46>
 80041d6:	6863      	ldr	r3, [r4, #4]
 80041d8:	1ac0      	subs	r0, r0, r3
 80041da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041dc:	b10b      	cbz	r3, 80041e2 <__sflush_r+0x46>
 80041de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041e0:	1ac0      	subs	r0, r0, r3
 80041e2:	2300      	movs	r3, #0
 80041e4:	4602      	mov	r2, r0
 80041e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041e8:	6a21      	ldr	r1, [r4, #32]
 80041ea:	4628      	mov	r0, r5
 80041ec:	47b0      	blx	r6
 80041ee:	1c43      	adds	r3, r0, #1
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	d106      	bne.n	8004202 <__sflush_r+0x66>
 80041f4:	6829      	ldr	r1, [r5, #0]
 80041f6:	291d      	cmp	r1, #29
 80041f8:	d82c      	bhi.n	8004254 <__sflush_r+0xb8>
 80041fa:	4a2a      	ldr	r2, [pc, #168]	; (80042a4 <__sflush_r+0x108>)
 80041fc:	40ca      	lsrs	r2, r1
 80041fe:	07d6      	lsls	r6, r2, #31
 8004200:	d528      	bpl.n	8004254 <__sflush_r+0xb8>
 8004202:	2200      	movs	r2, #0
 8004204:	6062      	str	r2, [r4, #4]
 8004206:	04d9      	lsls	r1, r3, #19
 8004208:	6922      	ldr	r2, [r4, #16]
 800420a:	6022      	str	r2, [r4, #0]
 800420c:	d504      	bpl.n	8004218 <__sflush_r+0x7c>
 800420e:	1c42      	adds	r2, r0, #1
 8004210:	d101      	bne.n	8004216 <__sflush_r+0x7a>
 8004212:	682b      	ldr	r3, [r5, #0]
 8004214:	b903      	cbnz	r3, 8004218 <__sflush_r+0x7c>
 8004216:	6560      	str	r0, [r4, #84]	; 0x54
 8004218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800421a:	602f      	str	r7, [r5, #0]
 800421c:	2900      	cmp	r1, #0
 800421e:	d0ca      	beq.n	80041b6 <__sflush_r+0x1a>
 8004220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004224:	4299      	cmp	r1, r3
 8004226:	d002      	beq.n	800422e <__sflush_r+0x92>
 8004228:	4628      	mov	r0, r5
 800422a:	f000 fa2b 	bl	8004684 <_free_r>
 800422e:	2000      	movs	r0, #0
 8004230:	6360      	str	r0, [r4, #52]	; 0x34
 8004232:	e7c1      	b.n	80041b8 <__sflush_r+0x1c>
 8004234:	6a21      	ldr	r1, [r4, #32]
 8004236:	2301      	movs	r3, #1
 8004238:	4628      	mov	r0, r5
 800423a:	47b0      	blx	r6
 800423c:	1c41      	adds	r1, r0, #1
 800423e:	d1c7      	bne.n	80041d0 <__sflush_r+0x34>
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0c4      	beq.n	80041d0 <__sflush_r+0x34>
 8004246:	2b1d      	cmp	r3, #29
 8004248:	d001      	beq.n	800424e <__sflush_r+0xb2>
 800424a:	2b16      	cmp	r3, #22
 800424c:	d101      	bne.n	8004252 <__sflush_r+0xb6>
 800424e:	602f      	str	r7, [r5, #0]
 8004250:	e7b1      	b.n	80041b6 <__sflush_r+0x1a>
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	e7ad      	b.n	80041b8 <__sflush_r+0x1c>
 800425c:	690f      	ldr	r7, [r1, #16]
 800425e:	2f00      	cmp	r7, #0
 8004260:	d0a9      	beq.n	80041b6 <__sflush_r+0x1a>
 8004262:	0793      	lsls	r3, r2, #30
 8004264:	680e      	ldr	r6, [r1, #0]
 8004266:	bf08      	it	eq
 8004268:	694b      	ldreq	r3, [r1, #20]
 800426a:	600f      	str	r7, [r1, #0]
 800426c:	bf18      	it	ne
 800426e:	2300      	movne	r3, #0
 8004270:	eba6 0807 	sub.w	r8, r6, r7
 8004274:	608b      	str	r3, [r1, #8]
 8004276:	f1b8 0f00 	cmp.w	r8, #0
 800427a:	dd9c      	ble.n	80041b6 <__sflush_r+0x1a>
 800427c:	6a21      	ldr	r1, [r4, #32]
 800427e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004280:	4643      	mov	r3, r8
 8004282:	463a      	mov	r2, r7
 8004284:	4628      	mov	r0, r5
 8004286:	47b0      	blx	r6
 8004288:	2800      	cmp	r0, #0
 800428a:	dc06      	bgt.n	800429a <__sflush_r+0xfe>
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004292:	81a3      	strh	r3, [r4, #12]
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	e78e      	b.n	80041b8 <__sflush_r+0x1c>
 800429a:	4407      	add	r7, r0
 800429c:	eba8 0800 	sub.w	r8, r8, r0
 80042a0:	e7e9      	b.n	8004276 <__sflush_r+0xda>
 80042a2:	bf00      	nop
 80042a4:	20400001 	.word	0x20400001

080042a8 <_fflush_r>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	690b      	ldr	r3, [r1, #16]
 80042ac:	4605      	mov	r5, r0
 80042ae:	460c      	mov	r4, r1
 80042b0:	b913      	cbnz	r3, 80042b8 <_fflush_r+0x10>
 80042b2:	2500      	movs	r5, #0
 80042b4:	4628      	mov	r0, r5
 80042b6:	bd38      	pop	{r3, r4, r5, pc}
 80042b8:	b118      	cbz	r0, 80042c2 <_fflush_r+0x1a>
 80042ba:	6983      	ldr	r3, [r0, #24]
 80042bc:	b90b      	cbnz	r3, 80042c2 <_fflush_r+0x1a>
 80042be:	f000 f887 	bl	80043d0 <__sinit>
 80042c2:	4b14      	ldr	r3, [pc, #80]	; (8004314 <_fflush_r+0x6c>)
 80042c4:	429c      	cmp	r4, r3
 80042c6:	d11b      	bne.n	8004300 <_fflush_r+0x58>
 80042c8:	686c      	ldr	r4, [r5, #4]
 80042ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ef      	beq.n	80042b2 <_fflush_r+0xa>
 80042d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042d4:	07d0      	lsls	r0, r2, #31
 80042d6:	d404      	bmi.n	80042e2 <_fflush_r+0x3a>
 80042d8:	0599      	lsls	r1, r3, #22
 80042da:	d402      	bmi.n	80042e2 <_fflush_r+0x3a>
 80042dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042de:	f000 f94c 	bl	800457a <__retarget_lock_acquire_recursive>
 80042e2:	4628      	mov	r0, r5
 80042e4:	4621      	mov	r1, r4
 80042e6:	f7ff ff59 	bl	800419c <__sflush_r>
 80042ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042ec:	07da      	lsls	r2, r3, #31
 80042ee:	4605      	mov	r5, r0
 80042f0:	d4e0      	bmi.n	80042b4 <_fflush_r+0xc>
 80042f2:	89a3      	ldrh	r3, [r4, #12]
 80042f4:	059b      	lsls	r3, r3, #22
 80042f6:	d4dd      	bmi.n	80042b4 <_fflush_r+0xc>
 80042f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042fa:	f000 f93f 	bl	800457c <__retarget_lock_release_recursive>
 80042fe:	e7d9      	b.n	80042b4 <_fflush_r+0xc>
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <_fflush_r+0x70>)
 8004302:	429c      	cmp	r4, r3
 8004304:	d101      	bne.n	800430a <_fflush_r+0x62>
 8004306:	68ac      	ldr	r4, [r5, #8]
 8004308:	e7df      	b.n	80042ca <_fflush_r+0x22>
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <_fflush_r+0x74>)
 800430c:	429c      	cmp	r4, r3
 800430e:	bf08      	it	eq
 8004310:	68ec      	ldreq	r4, [r5, #12]
 8004312:	e7da      	b.n	80042ca <_fflush_r+0x22>
 8004314:	08006cb4 	.word	0x08006cb4
 8004318:	08006cd4 	.word	0x08006cd4
 800431c:	08006c94 	.word	0x08006c94

08004320 <std>:
 8004320:	2300      	movs	r3, #0
 8004322:	b510      	push	{r4, lr}
 8004324:	4604      	mov	r4, r0
 8004326:	e9c0 3300 	strd	r3, r3, [r0]
 800432a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800432e:	6083      	str	r3, [r0, #8]
 8004330:	8181      	strh	r1, [r0, #12]
 8004332:	6643      	str	r3, [r0, #100]	; 0x64
 8004334:	81c2      	strh	r2, [r0, #14]
 8004336:	6183      	str	r3, [r0, #24]
 8004338:	4619      	mov	r1, r3
 800433a:	2208      	movs	r2, #8
 800433c:	305c      	adds	r0, #92	; 0x5c
 800433e:	f000 f999 	bl	8004674 <memset>
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <std+0x38>)
 8004344:	6263      	str	r3, [r4, #36]	; 0x24
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <std+0x3c>)
 8004348:	62a3      	str	r3, [r4, #40]	; 0x28
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <std+0x40>)
 800434c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800434e:	4b05      	ldr	r3, [pc, #20]	; (8004364 <std+0x44>)
 8004350:	6224      	str	r4, [r4, #32]
 8004352:	6323      	str	r3, [r4, #48]	; 0x30
 8004354:	bd10      	pop	{r4, pc}
 8004356:	bf00      	nop
 8004358:	080053b1 	.word	0x080053b1
 800435c:	080053d3 	.word	0x080053d3
 8004360:	0800540b 	.word	0x0800540b
 8004364:	0800542f 	.word	0x0800542f

08004368 <_cleanup_r>:
 8004368:	4901      	ldr	r1, [pc, #4]	; (8004370 <_cleanup_r+0x8>)
 800436a:	f000 b8c1 	b.w	80044f0 <_fwalk_reent>
 800436e:	bf00      	nop
 8004370:	080042a9 	.word	0x080042a9

08004374 <__sfmoreglue>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	1e4a      	subs	r2, r1, #1
 8004378:	2568      	movs	r5, #104	; 0x68
 800437a:	4355      	muls	r5, r2
 800437c:	460e      	mov	r6, r1
 800437e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004382:	f000 f9cf 	bl	8004724 <_malloc_r>
 8004386:	4604      	mov	r4, r0
 8004388:	b140      	cbz	r0, 800439c <__sfmoreglue+0x28>
 800438a:	2100      	movs	r1, #0
 800438c:	e9c0 1600 	strd	r1, r6, [r0]
 8004390:	300c      	adds	r0, #12
 8004392:	60a0      	str	r0, [r4, #8]
 8004394:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004398:	f000 f96c 	bl	8004674 <memset>
 800439c:	4620      	mov	r0, r4
 800439e:	bd70      	pop	{r4, r5, r6, pc}

080043a0 <__sfp_lock_acquire>:
 80043a0:	4801      	ldr	r0, [pc, #4]	; (80043a8 <__sfp_lock_acquire+0x8>)
 80043a2:	f000 b8ea 	b.w	800457a <__retarget_lock_acquire_recursive>
 80043a6:	bf00      	nop
 80043a8:	2000031c 	.word	0x2000031c

080043ac <__sfp_lock_release>:
 80043ac:	4801      	ldr	r0, [pc, #4]	; (80043b4 <__sfp_lock_release+0x8>)
 80043ae:	f000 b8e5 	b.w	800457c <__retarget_lock_release_recursive>
 80043b2:	bf00      	nop
 80043b4:	2000031c 	.word	0x2000031c

080043b8 <__sinit_lock_acquire>:
 80043b8:	4801      	ldr	r0, [pc, #4]	; (80043c0 <__sinit_lock_acquire+0x8>)
 80043ba:	f000 b8de 	b.w	800457a <__retarget_lock_acquire_recursive>
 80043be:	bf00      	nop
 80043c0:	20000317 	.word	0x20000317

080043c4 <__sinit_lock_release>:
 80043c4:	4801      	ldr	r0, [pc, #4]	; (80043cc <__sinit_lock_release+0x8>)
 80043c6:	f000 b8d9 	b.w	800457c <__retarget_lock_release_recursive>
 80043ca:	bf00      	nop
 80043cc:	20000317 	.word	0x20000317

080043d0 <__sinit>:
 80043d0:	b510      	push	{r4, lr}
 80043d2:	4604      	mov	r4, r0
 80043d4:	f7ff fff0 	bl	80043b8 <__sinit_lock_acquire>
 80043d8:	69a3      	ldr	r3, [r4, #24]
 80043da:	b11b      	cbz	r3, 80043e4 <__sinit+0x14>
 80043dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043e0:	f7ff bff0 	b.w	80043c4 <__sinit_lock_release>
 80043e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80043e8:	6523      	str	r3, [r4, #80]	; 0x50
 80043ea:	4b13      	ldr	r3, [pc, #76]	; (8004438 <__sinit+0x68>)
 80043ec:	4a13      	ldr	r2, [pc, #76]	; (800443c <__sinit+0x6c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80043f2:	42a3      	cmp	r3, r4
 80043f4:	bf04      	itt	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	61a3      	streq	r3, [r4, #24]
 80043fa:	4620      	mov	r0, r4
 80043fc:	f000 f820 	bl	8004440 <__sfp>
 8004400:	6060      	str	r0, [r4, #4]
 8004402:	4620      	mov	r0, r4
 8004404:	f000 f81c 	bl	8004440 <__sfp>
 8004408:	60a0      	str	r0, [r4, #8]
 800440a:	4620      	mov	r0, r4
 800440c:	f000 f818 	bl	8004440 <__sfp>
 8004410:	2200      	movs	r2, #0
 8004412:	60e0      	str	r0, [r4, #12]
 8004414:	2104      	movs	r1, #4
 8004416:	6860      	ldr	r0, [r4, #4]
 8004418:	f7ff ff82 	bl	8004320 <std>
 800441c:	68a0      	ldr	r0, [r4, #8]
 800441e:	2201      	movs	r2, #1
 8004420:	2109      	movs	r1, #9
 8004422:	f7ff ff7d 	bl	8004320 <std>
 8004426:	68e0      	ldr	r0, [r4, #12]
 8004428:	2202      	movs	r2, #2
 800442a:	2112      	movs	r1, #18
 800442c:	f7ff ff78 	bl	8004320 <std>
 8004430:	2301      	movs	r3, #1
 8004432:	61a3      	str	r3, [r4, #24]
 8004434:	e7d2      	b.n	80043dc <__sinit+0xc>
 8004436:	bf00      	nop
 8004438:	08006cf4 	.word	0x08006cf4
 800443c:	08004369 	.word	0x08004369

08004440 <__sfp>:
 8004440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004442:	4607      	mov	r7, r0
 8004444:	f7ff ffac 	bl	80043a0 <__sfp_lock_acquire>
 8004448:	4b1e      	ldr	r3, [pc, #120]	; (80044c4 <__sfp+0x84>)
 800444a:	681e      	ldr	r6, [r3, #0]
 800444c:	69b3      	ldr	r3, [r6, #24]
 800444e:	b913      	cbnz	r3, 8004456 <__sfp+0x16>
 8004450:	4630      	mov	r0, r6
 8004452:	f7ff ffbd 	bl	80043d0 <__sinit>
 8004456:	3648      	adds	r6, #72	; 0x48
 8004458:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800445c:	3b01      	subs	r3, #1
 800445e:	d503      	bpl.n	8004468 <__sfp+0x28>
 8004460:	6833      	ldr	r3, [r6, #0]
 8004462:	b30b      	cbz	r3, 80044a8 <__sfp+0x68>
 8004464:	6836      	ldr	r6, [r6, #0]
 8004466:	e7f7      	b.n	8004458 <__sfp+0x18>
 8004468:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800446c:	b9d5      	cbnz	r5, 80044a4 <__sfp+0x64>
 800446e:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <__sfp+0x88>)
 8004470:	60e3      	str	r3, [r4, #12]
 8004472:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004476:	6665      	str	r5, [r4, #100]	; 0x64
 8004478:	f000 f87e 	bl	8004578 <__retarget_lock_init_recursive>
 800447c:	f7ff ff96 	bl	80043ac <__sfp_lock_release>
 8004480:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004484:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004488:	6025      	str	r5, [r4, #0]
 800448a:	61a5      	str	r5, [r4, #24]
 800448c:	2208      	movs	r2, #8
 800448e:	4629      	mov	r1, r5
 8004490:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004494:	f000 f8ee 	bl	8004674 <memset>
 8004498:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800449c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044a0:	4620      	mov	r0, r4
 80044a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044a4:	3468      	adds	r4, #104	; 0x68
 80044a6:	e7d9      	b.n	800445c <__sfp+0x1c>
 80044a8:	2104      	movs	r1, #4
 80044aa:	4638      	mov	r0, r7
 80044ac:	f7ff ff62 	bl	8004374 <__sfmoreglue>
 80044b0:	4604      	mov	r4, r0
 80044b2:	6030      	str	r0, [r6, #0]
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d1d5      	bne.n	8004464 <__sfp+0x24>
 80044b8:	f7ff ff78 	bl	80043ac <__sfp_lock_release>
 80044bc:	230c      	movs	r3, #12
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	e7ee      	b.n	80044a0 <__sfp+0x60>
 80044c2:	bf00      	nop
 80044c4:	08006cf4 	.word	0x08006cf4
 80044c8:	ffff0001 	.word	0xffff0001

080044cc <fiprintf>:
 80044cc:	b40e      	push	{r1, r2, r3}
 80044ce:	b503      	push	{r0, r1, lr}
 80044d0:	4601      	mov	r1, r0
 80044d2:	ab03      	add	r3, sp, #12
 80044d4:	4805      	ldr	r0, [pc, #20]	; (80044ec <fiprintf+0x20>)
 80044d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80044da:	6800      	ldr	r0, [r0, #0]
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	f000 f9a5 	bl	800482c <_vfiprintf_r>
 80044e2:	b002      	add	sp, #8
 80044e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80044e8:	b003      	add	sp, #12
 80044ea:	4770      	bx	lr
 80044ec:	2000000c 	.word	0x2000000c

080044f0 <_fwalk_reent>:
 80044f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044f4:	4606      	mov	r6, r0
 80044f6:	4688      	mov	r8, r1
 80044f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044fc:	2700      	movs	r7, #0
 80044fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004502:	f1b9 0901 	subs.w	r9, r9, #1
 8004506:	d505      	bpl.n	8004514 <_fwalk_reent+0x24>
 8004508:	6824      	ldr	r4, [r4, #0]
 800450a:	2c00      	cmp	r4, #0
 800450c:	d1f7      	bne.n	80044fe <_fwalk_reent+0xe>
 800450e:	4638      	mov	r0, r7
 8004510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004514:	89ab      	ldrh	r3, [r5, #12]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d907      	bls.n	800452a <_fwalk_reent+0x3a>
 800451a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800451e:	3301      	adds	r3, #1
 8004520:	d003      	beq.n	800452a <_fwalk_reent+0x3a>
 8004522:	4629      	mov	r1, r5
 8004524:	4630      	mov	r0, r6
 8004526:	47c0      	blx	r8
 8004528:	4307      	orrs	r7, r0
 800452a:	3568      	adds	r5, #104	; 0x68
 800452c:	e7e9      	b.n	8004502 <_fwalk_reent+0x12>
	...

08004530 <__libc_init_array>:
 8004530:	b570      	push	{r4, r5, r6, lr}
 8004532:	4d0d      	ldr	r5, [pc, #52]	; (8004568 <__libc_init_array+0x38>)
 8004534:	4c0d      	ldr	r4, [pc, #52]	; (800456c <__libc_init_array+0x3c>)
 8004536:	1b64      	subs	r4, r4, r5
 8004538:	10a4      	asrs	r4, r4, #2
 800453a:	2600      	movs	r6, #0
 800453c:	42a6      	cmp	r6, r4
 800453e:	d109      	bne.n	8004554 <__libc_init_array+0x24>
 8004540:	4d0b      	ldr	r5, [pc, #44]	; (8004570 <__libc_init_array+0x40>)
 8004542:	4c0c      	ldr	r4, [pc, #48]	; (8004574 <__libc_init_array+0x44>)
 8004544:	f002 fb40 	bl	8006bc8 <_init>
 8004548:	1b64      	subs	r4, r4, r5
 800454a:	10a4      	asrs	r4, r4, #2
 800454c:	2600      	movs	r6, #0
 800454e:	42a6      	cmp	r6, r4
 8004550:	d105      	bne.n	800455e <__libc_init_array+0x2e>
 8004552:	bd70      	pop	{r4, r5, r6, pc}
 8004554:	f855 3b04 	ldr.w	r3, [r5], #4
 8004558:	4798      	blx	r3
 800455a:	3601      	adds	r6, #1
 800455c:	e7ee      	b.n	800453c <__libc_init_array+0xc>
 800455e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004562:	4798      	blx	r3
 8004564:	3601      	adds	r6, #1
 8004566:	e7f2      	b.n	800454e <__libc_init_array+0x1e>
 8004568:	08007084 	.word	0x08007084
 800456c:	08007084 	.word	0x08007084
 8004570:	08007084 	.word	0x08007084
 8004574:	08007088 	.word	0x08007088

08004578 <__retarget_lock_init_recursive>:
 8004578:	4770      	bx	lr

0800457a <__retarget_lock_acquire_recursive>:
 800457a:	4770      	bx	lr

0800457c <__retarget_lock_release_recursive>:
 800457c:	4770      	bx	lr

0800457e <__swhatbuf_r>:
 800457e:	b570      	push	{r4, r5, r6, lr}
 8004580:	460e      	mov	r6, r1
 8004582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004586:	2900      	cmp	r1, #0
 8004588:	b096      	sub	sp, #88	; 0x58
 800458a:	4614      	mov	r4, r2
 800458c:	461d      	mov	r5, r3
 800458e:	da07      	bge.n	80045a0 <__swhatbuf_r+0x22>
 8004590:	2300      	movs	r3, #0
 8004592:	602b      	str	r3, [r5, #0]
 8004594:	89b3      	ldrh	r3, [r6, #12]
 8004596:	061a      	lsls	r2, r3, #24
 8004598:	d410      	bmi.n	80045bc <__swhatbuf_r+0x3e>
 800459a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800459e:	e00e      	b.n	80045be <__swhatbuf_r+0x40>
 80045a0:	466a      	mov	r2, sp
 80045a2:	f001 fea5 	bl	80062f0 <_fstat_r>
 80045a6:	2800      	cmp	r0, #0
 80045a8:	dbf2      	blt.n	8004590 <__swhatbuf_r+0x12>
 80045aa:	9a01      	ldr	r2, [sp, #4]
 80045ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045b4:	425a      	negs	r2, r3
 80045b6:	415a      	adcs	r2, r3
 80045b8:	602a      	str	r2, [r5, #0]
 80045ba:	e7ee      	b.n	800459a <__swhatbuf_r+0x1c>
 80045bc:	2340      	movs	r3, #64	; 0x40
 80045be:	2000      	movs	r0, #0
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	b016      	add	sp, #88	; 0x58
 80045c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080045c8 <__smakebuf_r>:
 80045c8:	898b      	ldrh	r3, [r1, #12]
 80045ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045cc:	079d      	lsls	r5, r3, #30
 80045ce:	4606      	mov	r6, r0
 80045d0:	460c      	mov	r4, r1
 80045d2:	d507      	bpl.n	80045e4 <__smakebuf_r+0x1c>
 80045d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	6123      	str	r3, [r4, #16]
 80045dc:	2301      	movs	r3, #1
 80045de:	6163      	str	r3, [r4, #20]
 80045e0:	b002      	add	sp, #8
 80045e2:	bd70      	pop	{r4, r5, r6, pc}
 80045e4:	ab01      	add	r3, sp, #4
 80045e6:	466a      	mov	r2, sp
 80045e8:	f7ff ffc9 	bl	800457e <__swhatbuf_r>
 80045ec:	9900      	ldr	r1, [sp, #0]
 80045ee:	4605      	mov	r5, r0
 80045f0:	4630      	mov	r0, r6
 80045f2:	f000 f897 	bl	8004724 <_malloc_r>
 80045f6:	b948      	cbnz	r0, 800460c <__smakebuf_r+0x44>
 80045f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045fc:	059a      	lsls	r2, r3, #22
 80045fe:	d4ef      	bmi.n	80045e0 <__smakebuf_r+0x18>
 8004600:	f023 0303 	bic.w	r3, r3, #3
 8004604:	f043 0302 	orr.w	r3, r3, #2
 8004608:	81a3      	strh	r3, [r4, #12]
 800460a:	e7e3      	b.n	80045d4 <__smakebuf_r+0xc>
 800460c:	4b0d      	ldr	r3, [pc, #52]	; (8004644 <__smakebuf_r+0x7c>)
 800460e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	6020      	str	r0, [r4, #0]
 8004614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004618:	81a3      	strh	r3, [r4, #12]
 800461a:	9b00      	ldr	r3, [sp, #0]
 800461c:	6163      	str	r3, [r4, #20]
 800461e:	9b01      	ldr	r3, [sp, #4]
 8004620:	6120      	str	r0, [r4, #16]
 8004622:	b15b      	cbz	r3, 800463c <__smakebuf_r+0x74>
 8004624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004628:	4630      	mov	r0, r6
 800462a:	f001 fe73 	bl	8006314 <_isatty_r>
 800462e:	b128      	cbz	r0, 800463c <__smakebuf_r+0x74>
 8004630:	89a3      	ldrh	r3, [r4, #12]
 8004632:	f023 0303 	bic.w	r3, r3, #3
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	81a3      	strh	r3, [r4, #12]
 800463c:	89a0      	ldrh	r0, [r4, #12]
 800463e:	4305      	orrs	r5, r0
 8004640:	81a5      	strh	r5, [r4, #12]
 8004642:	e7cd      	b.n	80045e0 <__smakebuf_r+0x18>
 8004644:	08004369 	.word	0x08004369

08004648 <malloc>:
 8004648:	4b02      	ldr	r3, [pc, #8]	; (8004654 <malloc+0xc>)
 800464a:	4601      	mov	r1, r0
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	f000 b869 	b.w	8004724 <_malloc_r>
 8004652:	bf00      	nop
 8004654:	2000000c 	.word	0x2000000c

08004658 <memcpy>:
 8004658:	440a      	add	r2, r1
 800465a:	4291      	cmp	r1, r2
 800465c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004660:	d100      	bne.n	8004664 <memcpy+0xc>
 8004662:	4770      	bx	lr
 8004664:	b510      	push	{r4, lr}
 8004666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800466a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800466e:	4291      	cmp	r1, r2
 8004670:	d1f9      	bne.n	8004666 <memcpy+0xe>
 8004672:	bd10      	pop	{r4, pc}

08004674 <memset>:
 8004674:	4402      	add	r2, r0
 8004676:	4603      	mov	r3, r0
 8004678:	4293      	cmp	r3, r2
 800467a:	d100      	bne.n	800467e <memset+0xa>
 800467c:	4770      	bx	lr
 800467e:	f803 1b01 	strb.w	r1, [r3], #1
 8004682:	e7f9      	b.n	8004678 <memset+0x4>

08004684 <_free_r>:
 8004684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004686:	2900      	cmp	r1, #0
 8004688:	d048      	beq.n	800471c <_free_r+0x98>
 800468a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800468e:	9001      	str	r0, [sp, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	f1a1 0404 	sub.w	r4, r1, #4
 8004696:	bfb8      	it	lt
 8004698:	18e4      	addlt	r4, r4, r3
 800469a:	f001 fe61 	bl	8006360 <__malloc_lock>
 800469e:	4a20      	ldr	r2, [pc, #128]	; (8004720 <_free_r+0x9c>)
 80046a0:	9801      	ldr	r0, [sp, #4]
 80046a2:	6813      	ldr	r3, [r2, #0]
 80046a4:	4615      	mov	r5, r2
 80046a6:	b933      	cbnz	r3, 80046b6 <_free_r+0x32>
 80046a8:	6063      	str	r3, [r4, #4]
 80046aa:	6014      	str	r4, [r2, #0]
 80046ac:	b003      	add	sp, #12
 80046ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046b2:	f001 be5b 	b.w	800636c <__malloc_unlock>
 80046b6:	42a3      	cmp	r3, r4
 80046b8:	d90b      	bls.n	80046d2 <_free_r+0x4e>
 80046ba:	6821      	ldr	r1, [r4, #0]
 80046bc:	1862      	adds	r2, r4, r1
 80046be:	4293      	cmp	r3, r2
 80046c0:	bf04      	itt	eq
 80046c2:	681a      	ldreq	r2, [r3, #0]
 80046c4:	685b      	ldreq	r3, [r3, #4]
 80046c6:	6063      	str	r3, [r4, #4]
 80046c8:	bf04      	itt	eq
 80046ca:	1852      	addeq	r2, r2, r1
 80046cc:	6022      	streq	r2, [r4, #0]
 80046ce:	602c      	str	r4, [r5, #0]
 80046d0:	e7ec      	b.n	80046ac <_free_r+0x28>
 80046d2:	461a      	mov	r2, r3
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	b10b      	cbz	r3, 80046dc <_free_r+0x58>
 80046d8:	42a3      	cmp	r3, r4
 80046da:	d9fa      	bls.n	80046d2 <_free_r+0x4e>
 80046dc:	6811      	ldr	r1, [r2, #0]
 80046de:	1855      	adds	r5, r2, r1
 80046e0:	42a5      	cmp	r5, r4
 80046e2:	d10b      	bne.n	80046fc <_free_r+0x78>
 80046e4:	6824      	ldr	r4, [r4, #0]
 80046e6:	4421      	add	r1, r4
 80046e8:	1854      	adds	r4, r2, r1
 80046ea:	42a3      	cmp	r3, r4
 80046ec:	6011      	str	r1, [r2, #0]
 80046ee:	d1dd      	bne.n	80046ac <_free_r+0x28>
 80046f0:	681c      	ldr	r4, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	6053      	str	r3, [r2, #4]
 80046f6:	4421      	add	r1, r4
 80046f8:	6011      	str	r1, [r2, #0]
 80046fa:	e7d7      	b.n	80046ac <_free_r+0x28>
 80046fc:	d902      	bls.n	8004704 <_free_r+0x80>
 80046fe:	230c      	movs	r3, #12
 8004700:	6003      	str	r3, [r0, #0]
 8004702:	e7d3      	b.n	80046ac <_free_r+0x28>
 8004704:	6825      	ldr	r5, [r4, #0]
 8004706:	1961      	adds	r1, r4, r5
 8004708:	428b      	cmp	r3, r1
 800470a:	bf04      	itt	eq
 800470c:	6819      	ldreq	r1, [r3, #0]
 800470e:	685b      	ldreq	r3, [r3, #4]
 8004710:	6063      	str	r3, [r4, #4]
 8004712:	bf04      	itt	eq
 8004714:	1949      	addeq	r1, r1, r5
 8004716:	6021      	streq	r1, [r4, #0]
 8004718:	6054      	str	r4, [r2, #4]
 800471a:	e7c7      	b.n	80046ac <_free_r+0x28>
 800471c:	b003      	add	sp, #12
 800471e:	bd30      	pop	{r4, r5, pc}
 8004720:	200001fc 	.word	0x200001fc

08004724 <_malloc_r>:
 8004724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004726:	1ccd      	adds	r5, r1, #3
 8004728:	f025 0503 	bic.w	r5, r5, #3
 800472c:	3508      	adds	r5, #8
 800472e:	2d0c      	cmp	r5, #12
 8004730:	bf38      	it	cc
 8004732:	250c      	movcc	r5, #12
 8004734:	2d00      	cmp	r5, #0
 8004736:	4606      	mov	r6, r0
 8004738:	db01      	blt.n	800473e <_malloc_r+0x1a>
 800473a:	42a9      	cmp	r1, r5
 800473c:	d903      	bls.n	8004746 <_malloc_r+0x22>
 800473e:	230c      	movs	r3, #12
 8004740:	6033      	str	r3, [r6, #0]
 8004742:	2000      	movs	r0, #0
 8004744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004746:	f001 fe0b 	bl	8006360 <__malloc_lock>
 800474a:	4921      	ldr	r1, [pc, #132]	; (80047d0 <_malloc_r+0xac>)
 800474c:	680a      	ldr	r2, [r1, #0]
 800474e:	4614      	mov	r4, r2
 8004750:	b99c      	cbnz	r4, 800477a <_malloc_r+0x56>
 8004752:	4f20      	ldr	r7, [pc, #128]	; (80047d4 <_malloc_r+0xb0>)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	b923      	cbnz	r3, 8004762 <_malloc_r+0x3e>
 8004758:	4621      	mov	r1, r4
 800475a:	4630      	mov	r0, r6
 800475c:	f000 fe18 	bl	8005390 <_sbrk_r>
 8004760:	6038      	str	r0, [r7, #0]
 8004762:	4629      	mov	r1, r5
 8004764:	4630      	mov	r0, r6
 8004766:	f000 fe13 	bl	8005390 <_sbrk_r>
 800476a:	1c43      	adds	r3, r0, #1
 800476c:	d123      	bne.n	80047b6 <_malloc_r+0x92>
 800476e:	230c      	movs	r3, #12
 8004770:	6033      	str	r3, [r6, #0]
 8004772:	4630      	mov	r0, r6
 8004774:	f001 fdfa 	bl	800636c <__malloc_unlock>
 8004778:	e7e3      	b.n	8004742 <_malloc_r+0x1e>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	1b5b      	subs	r3, r3, r5
 800477e:	d417      	bmi.n	80047b0 <_malloc_r+0x8c>
 8004780:	2b0b      	cmp	r3, #11
 8004782:	d903      	bls.n	800478c <_malloc_r+0x68>
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	441c      	add	r4, r3
 8004788:	6025      	str	r5, [r4, #0]
 800478a:	e004      	b.n	8004796 <_malloc_r+0x72>
 800478c:	6863      	ldr	r3, [r4, #4]
 800478e:	42a2      	cmp	r2, r4
 8004790:	bf0c      	ite	eq
 8004792:	600b      	streq	r3, [r1, #0]
 8004794:	6053      	strne	r3, [r2, #4]
 8004796:	4630      	mov	r0, r6
 8004798:	f001 fde8 	bl	800636c <__malloc_unlock>
 800479c:	f104 000b 	add.w	r0, r4, #11
 80047a0:	1d23      	adds	r3, r4, #4
 80047a2:	f020 0007 	bic.w	r0, r0, #7
 80047a6:	1ac2      	subs	r2, r0, r3
 80047a8:	d0cc      	beq.n	8004744 <_malloc_r+0x20>
 80047aa:	1a1b      	subs	r3, r3, r0
 80047ac:	50a3      	str	r3, [r4, r2]
 80047ae:	e7c9      	b.n	8004744 <_malloc_r+0x20>
 80047b0:	4622      	mov	r2, r4
 80047b2:	6864      	ldr	r4, [r4, #4]
 80047b4:	e7cc      	b.n	8004750 <_malloc_r+0x2c>
 80047b6:	1cc4      	adds	r4, r0, #3
 80047b8:	f024 0403 	bic.w	r4, r4, #3
 80047bc:	42a0      	cmp	r0, r4
 80047be:	d0e3      	beq.n	8004788 <_malloc_r+0x64>
 80047c0:	1a21      	subs	r1, r4, r0
 80047c2:	4630      	mov	r0, r6
 80047c4:	f000 fde4 	bl	8005390 <_sbrk_r>
 80047c8:	3001      	adds	r0, #1
 80047ca:	d1dd      	bne.n	8004788 <_malloc_r+0x64>
 80047cc:	e7cf      	b.n	800476e <_malloc_r+0x4a>
 80047ce:	bf00      	nop
 80047d0:	200001fc 	.word	0x200001fc
 80047d4:	20000200 	.word	0x20000200

080047d8 <__sfputc_r>:
 80047d8:	6893      	ldr	r3, [r2, #8]
 80047da:	3b01      	subs	r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	b410      	push	{r4}
 80047e0:	6093      	str	r3, [r2, #8]
 80047e2:	da08      	bge.n	80047f6 <__sfputc_r+0x1e>
 80047e4:	6994      	ldr	r4, [r2, #24]
 80047e6:	42a3      	cmp	r3, r4
 80047e8:	db01      	blt.n	80047ee <__sfputc_r+0x16>
 80047ea:	290a      	cmp	r1, #10
 80047ec:	d103      	bne.n	80047f6 <__sfputc_r+0x1e>
 80047ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047f2:	f000 be21 	b.w	8005438 <__swbuf_r>
 80047f6:	6813      	ldr	r3, [r2, #0]
 80047f8:	1c58      	adds	r0, r3, #1
 80047fa:	6010      	str	r0, [r2, #0]
 80047fc:	7019      	strb	r1, [r3, #0]
 80047fe:	4608      	mov	r0, r1
 8004800:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004804:	4770      	bx	lr

08004806 <__sfputs_r>:
 8004806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004808:	4606      	mov	r6, r0
 800480a:	460f      	mov	r7, r1
 800480c:	4614      	mov	r4, r2
 800480e:	18d5      	adds	r5, r2, r3
 8004810:	42ac      	cmp	r4, r5
 8004812:	d101      	bne.n	8004818 <__sfputs_r+0x12>
 8004814:	2000      	movs	r0, #0
 8004816:	e007      	b.n	8004828 <__sfputs_r+0x22>
 8004818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800481c:	463a      	mov	r2, r7
 800481e:	4630      	mov	r0, r6
 8004820:	f7ff ffda 	bl	80047d8 <__sfputc_r>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d1f3      	bne.n	8004810 <__sfputs_r+0xa>
 8004828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800482c <_vfiprintf_r>:
 800482c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004830:	460d      	mov	r5, r1
 8004832:	b09d      	sub	sp, #116	; 0x74
 8004834:	4614      	mov	r4, r2
 8004836:	4698      	mov	r8, r3
 8004838:	4606      	mov	r6, r0
 800483a:	b118      	cbz	r0, 8004844 <_vfiprintf_r+0x18>
 800483c:	6983      	ldr	r3, [r0, #24]
 800483e:	b90b      	cbnz	r3, 8004844 <_vfiprintf_r+0x18>
 8004840:	f7ff fdc6 	bl	80043d0 <__sinit>
 8004844:	4b89      	ldr	r3, [pc, #548]	; (8004a6c <_vfiprintf_r+0x240>)
 8004846:	429d      	cmp	r5, r3
 8004848:	d11b      	bne.n	8004882 <_vfiprintf_r+0x56>
 800484a:	6875      	ldr	r5, [r6, #4]
 800484c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800484e:	07d9      	lsls	r1, r3, #31
 8004850:	d405      	bmi.n	800485e <_vfiprintf_r+0x32>
 8004852:	89ab      	ldrh	r3, [r5, #12]
 8004854:	059a      	lsls	r2, r3, #22
 8004856:	d402      	bmi.n	800485e <_vfiprintf_r+0x32>
 8004858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800485a:	f7ff fe8e 	bl	800457a <__retarget_lock_acquire_recursive>
 800485e:	89ab      	ldrh	r3, [r5, #12]
 8004860:	071b      	lsls	r3, r3, #28
 8004862:	d501      	bpl.n	8004868 <_vfiprintf_r+0x3c>
 8004864:	692b      	ldr	r3, [r5, #16]
 8004866:	b9eb      	cbnz	r3, 80048a4 <_vfiprintf_r+0x78>
 8004868:	4629      	mov	r1, r5
 800486a:	4630      	mov	r0, r6
 800486c:	f000 fe48 	bl	8005500 <__swsetup_r>
 8004870:	b1c0      	cbz	r0, 80048a4 <_vfiprintf_r+0x78>
 8004872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004874:	07dc      	lsls	r4, r3, #31
 8004876:	d50e      	bpl.n	8004896 <_vfiprintf_r+0x6a>
 8004878:	f04f 30ff 	mov.w	r0, #4294967295
 800487c:	b01d      	add	sp, #116	; 0x74
 800487e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004882:	4b7b      	ldr	r3, [pc, #492]	; (8004a70 <_vfiprintf_r+0x244>)
 8004884:	429d      	cmp	r5, r3
 8004886:	d101      	bne.n	800488c <_vfiprintf_r+0x60>
 8004888:	68b5      	ldr	r5, [r6, #8]
 800488a:	e7df      	b.n	800484c <_vfiprintf_r+0x20>
 800488c:	4b79      	ldr	r3, [pc, #484]	; (8004a74 <_vfiprintf_r+0x248>)
 800488e:	429d      	cmp	r5, r3
 8004890:	bf08      	it	eq
 8004892:	68f5      	ldreq	r5, [r6, #12]
 8004894:	e7da      	b.n	800484c <_vfiprintf_r+0x20>
 8004896:	89ab      	ldrh	r3, [r5, #12]
 8004898:	0598      	lsls	r0, r3, #22
 800489a:	d4ed      	bmi.n	8004878 <_vfiprintf_r+0x4c>
 800489c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800489e:	f7ff fe6d 	bl	800457c <__retarget_lock_release_recursive>
 80048a2:	e7e9      	b.n	8004878 <_vfiprintf_r+0x4c>
 80048a4:	2300      	movs	r3, #0
 80048a6:	9309      	str	r3, [sp, #36]	; 0x24
 80048a8:	2320      	movs	r3, #32
 80048aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80048b2:	2330      	movs	r3, #48	; 0x30
 80048b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004a78 <_vfiprintf_r+0x24c>
 80048b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048bc:	f04f 0901 	mov.w	r9, #1
 80048c0:	4623      	mov	r3, r4
 80048c2:	469a      	mov	sl, r3
 80048c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048c8:	b10a      	cbz	r2, 80048ce <_vfiprintf_r+0xa2>
 80048ca:	2a25      	cmp	r2, #37	; 0x25
 80048cc:	d1f9      	bne.n	80048c2 <_vfiprintf_r+0x96>
 80048ce:	ebba 0b04 	subs.w	fp, sl, r4
 80048d2:	d00b      	beq.n	80048ec <_vfiprintf_r+0xc0>
 80048d4:	465b      	mov	r3, fp
 80048d6:	4622      	mov	r2, r4
 80048d8:	4629      	mov	r1, r5
 80048da:	4630      	mov	r0, r6
 80048dc:	f7ff ff93 	bl	8004806 <__sfputs_r>
 80048e0:	3001      	adds	r0, #1
 80048e2:	f000 80aa 	beq.w	8004a3a <_vfiprintf_r+0x20e>
 80048e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048e8:	445a      	add	r2, fp
 80048ea:	9209      	str	r2, [sp, #36]	; 0x24
 80048ec:	f89a 3000 	ldrb.w	r3, [sl]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80a2 	beq.w	8004a3a <_vfiprintf_r+0x20e>
 80048f6:	2300      	movs	r3, #0
 80048f8:	f04f 32ff 	mov.w	r2, #4294967295
 80048fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004900:	f10a 0a01 	add.w	sl, sl, #1
 8004904:	9304      	str	r3, [sp, #16]
 8004906:	9307      	str	r3, [sp, #28]
 8004908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800490c:	931a      	str	r3, [sp, #104]	; 0x68
 800490e:	4654      	mov	r4, sl
 8004910:	2205      	movs	r2, #5
 8004912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004916:	4858      	ldr	r0, [pc, #352]	; (8004a78 <_vfiprintf_r+0x24c>)
 8004918:	f7fb fc82 	bl	8000220 <memchr>
 800491c:	9a04      	ldr	r2, [sp, #16]
 800491e:	b9d8      	cbnz	r0, 8004958 <_vfiprintf_r+0x12c>
 8004920:	06d1      	lsls	r1, r2, #27
 8004922:	bf44      	itt	mi
 8004924:	2320      	movmi	r3, #32
 8004926:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800492a:	0713      	lsls	r3, r2, #28
 800492c:	bf44      	itt	mi
 800492e:	232b      	movmi	r3, #43	; 0x2b
 8004930:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004934:	f89a 3000 	ldrb.w	r3, [sl]
 8004938:	2b2a      	cmp	r3, #42	; 0x2a
 800493a:	d015      	beq.n	8004968 <_vfiprintf_r+0x13c>
 800493c:	9a07      	ldr	r2, [sp, #28]
 800493e:	4654      	mov	r4, sl
 8004940:	2000      	movs	r0, #0
 8004942:	f04f 0c0a 	mov.w	ip, #10
 8004946:	4621      	mov	r1, r4
 8004948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800494c:	3b30      	subs	r3, #48	; 0x30
 800494e:	2b09      	cmp	r3, #9
 8004950:	d94e      	bls.n	80049f0 <_vfiprintf_r+0x1c4>
 8004952:	b1b0      	cbz	r0, 8004982 <_vfiprintf_r+0x156>
 8004954:	9207      	str	r2, [sp, #28]
 8004956:	e014      	b.n	8004982 <_vfiprintf_r+0x156>
 8004958:	eba0 0308 	sub.w	r3, r0, r8
 800495c:	fa09 f303 	lsl.w	r3, r9, r3
 8004960:	4313      	orrs	r3, r2
 8004962:	9304      	str	r3, [sp, #16]
 8004964:	46a2      	mov	sl, r4
 8004966:	e7d2      	b.n	800490e <_vfiprintf_r+0xe2>
 8004968:	9b03      	ldr	r3, [sp, #12]
 800496a:	1d19      	adds	r1, r3, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	9103      	str	r1, [sp, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	bfbb      	ittet	lt
 8004974:	425b      	neglt	r3, r3
 8004976:	f042 0202 	orrlt.w	r2, r2, #2
 800497a:	9307      	strge	r3, [sp, #28]
 800497c:	9307      	strlt	r3, [sp, #28]
 800497e:	bfb8      	it	lt
 8004980:	9204      	strlt	r2, [sp, #16]
 8004982:	7823      	ldrb	r3, [r4, #0]
 8004984:	2b2e      	cmp	r3, #46	; 0x2e
 8004986:	d10c      	bne.n	80049a2 <_vfiprintf_r+0x176>
 8004988:	7863      	ldrb	r3, [r4, #1]
 800498a:	2b2a      	cmp	r3, #42	; 0x2a
 800498c:	d135      	bne.n	80049fa <_vfiprintf_r+0x1ce>
 800498e:	9b03      	ldr	r3, [sp, #12]
 8004990:	1d1a      	adds	r2, r3, #4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	9203      	str	r2, [sp, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	bfb8      	it	lt
 800499a:	f04f 33ff 	movlt.w	r3, #4294967295
 800499e:	3402      	adds	r4, #2
 80049a0:	9305      	str	r3, [sp, #20]
 80049a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a88 <_vfiprintf_r+0x25c>
 80049a6:	7821      	ldrb	r1, [r4, #0]
 80049a8:	2203      	movs	r2, #3
 80049aa:	4650      	mov	r0, sl
 80049ac:	f7fb fc38 	bl	8000220 <memchr>
 80049b0:	b140      	cbz	r0, 80049c4 <_vfiprintf_r+0x198>
 80049b2:	2340      	movs	r3, #64	; 0x40
 80049b4:	eba0 000a 	sub.w	r0, r0, sl
 80049b8:	fa03 f000 	lsl.w	r0, r3, r0
 80049bc:	9b04      	ldr	r3, [sp, #16]
 80049be:	4303      	orrs	r3, r0
 80049c0:	3401      	adds	r4, #1
 80049c2:	9304      	str	r3, [sp, #16]
 80049c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c8:	482c      	ldr	r0, [pc, #176]	; (8004a7c <_vfiprintf_r+0x250>)
 80049ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049ce:	2206      	movs	r2, #6
 80049d0:	f7fb fc26 	bl	8000220 <memchr>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	d03f      	beq.n	8004a58 <_vfiprintf_r+0x22c>
 80049d8:	4b29      	ldr	r3, [pc, #164]	; (8004a80 <_vfiprintf_r+0x254>)
 80049da:	bb1b      	cbnz	r3, 8004a24 <_vfiprintf_r+0x1f8>
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	3307      	adds	r3, #7
 80049e0:	f023 0307 	bic.w	r3, r3, #7
 80049e4:	3308      	adds	r3, #8
 80049e6:	9303      	str	r3, [sp, #12]
 80049e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ea:	443b      	add	r3, r7
 80049ec:	9309      	str	r3, [sp, #36]	; 0x24
 80049ee:	e767      	b.n	80048c0 <_vfiprintf_r+0x94>
 80049f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80049f4:	460c      	mov	r4, r1
 80049f6:	2001      	movs	r0, #1
 80049f8:	e7a5      	b.n	8004946 <_vfiprintf_r+0x11a>
 80049fa:	2300      	movs	r3, #0
 80049fc:	3401      	adds	r4, #1
 80049fe:	9305      	str	r3, [sp, #20]
 8004a00:	4619      	mov	r1, r3
 8004a02:	f04f 0c0a 	mov.w	ip, #10
 8004a06:	4620      	mov	r0, r4
 8004a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a0c:	3a30      	subs	r2, #48	; 0x30
 8004a0e:	2a09      	cmp	r2, #9
 8004a10:	d903      	bls.n	8004a1a <_vfiprintf_r+0x1ee>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0c5      	beq.n	80049a2 <_vfiprintf_r+0x176>
 8004a16:	9105      	str	r1, [sp, #20]
 8004a18:	e7c3      	b.n	80049a2 <_vfiprintf_r+0x176>
 8004a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a1e:	4604      	mov	r4, r0
 8004a20:	2301      	movs	r3, #1
 8004a22:	e7f0      	b.n	8004a06 <_vfiprintf_r+0x1da>
 8004a24:	ab03      	add	r3, sp, #12
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	462a      	mov	r2, r5
 8004a2a:	4b16      	ldr	r3, [pc, #88]	; (8004a84 <_vfiprintf_r+0x258>)
 8004a2c:	a904      	add	r1, sp, #16
 8004a2e:	4630      	mov	r0, r6
 8004a30:	f000 f8cc 	bl	8004bcc <_printf_float>
 8004a34:	4607      	mov	r7, r0
 8004a36:	1c78      	adds	r0, r7, #1
 8004a38:	d1d6      	bne.n	80049e8 <_vfiprintf_r+0x1bc>
 8004a3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a3c:	07d9      	lsls	r1, r3, #31
 8004a3e:	d405      	bmi.n	8004a4c <_vfiprintf_r+0x220>
 8004a40:	89ab      	ldrh	r3, [r5, #12]
 8004a42:	059a      	lsls	r2, r3, #22
 8004a44:	d402      	bmi.n	8004a4c <_vfiprintf_r+0x220>
 8004a46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a48:	f7ff fd98 	bl	800457c <__retarget_lock_release_recursive>
 8004a4c:	89ab      	ldrh	r3, [r5, #12]
 8004a4e:	065b      	lsls	r3, r3, #25
 8004a50:	f53f af12 	bmi.w	8004878 <_vfiprintf_r+0x4c>
 8004a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a56:	e711      	b.n	800487c <_vfiprintf_r+0x50>
 8004a58:	ab03      	add	r3, sp, #12
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	462a      	mov	r2, r5
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <_vfiprintf_r+0x258>)
 8004a60:	a904      	add	r1, sp, #16
 8004a62:	4630      	mov	r0, r6
 8004a64:	f000 fb56 	bl	8005114 <_printf_i>
 8004a68:	e7e4      	b.n	8004a34 <_vfiprintf_r+0x208>
 8004a6a:	bf00      	nop
 8004a6c:	08006cb4 	.word	0x08006cb4
 8004a70:	08006cd4 	.word	0x08006cd4
 8004a74:	08006c94 	.word	0x08006c94
 8004a78:	08006cf8 	.word	0x08006cf8
 8004a7c:	08006d02 	.word	0x08006d02
 8004a80:	08004bcd 	.word	0x08004bcd
 8004a84:	08004807 	.word	0x08004807
 8004a88:	08006cfe 	.word	0x08006cfe

08004a8c <__cvt>:
 8004a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a90:	ec55 4b10 	vmov	r4, r5, d0
 8004a94:	2d00      	cmp	r5, #0
 8004a96:	460e      	mov	r6, r1
 8004a98:	4619      	mov	r1, r3
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	bfbb      	ittet	lt
 8004a9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004aa2:	461d      	movlt	r5, r3
 8004aa4:	2300      	movge	r3, #0
 8004aa6:	232d      	movlt	r3, #45	; 0x2d
 8004aa8:	700b      	strb	r3, [r1, #0]
 8004aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004aac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ab0:	4691      	mov	r9, r2
 8004ab2:	f023 0820 	bic.w	r8, r3, #32
 8004ab6:	bfbc      	itt	lt
 8004ab8:	4622      	movlt	r2, r4
 8004aba:	4614      	movlt	r4, r2
 8004abc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ac0:	d005      	beq.n	8004ace <__cvt+0x42>
 8004ac2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ac6:	d100      	bne.n	8004aca <__cvt+0x3e>
 8004ac8:	3601      	adds	r6, #1
 8004aca:	2102      	movs	r1, #2
 8004acc:	e000      	b.n	8004ad0 <__cvt+0x44>
 8004ace:	2103      	movs	r1, #3
 8004ad0:	ab03      	add	r3, sp, #12
 8004ad2:	9301      	str	r3, [sp, #4]
 8004ad4:	ab02      	add	r3, sp, #8
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	ec45 4b10 	vmov	d0, r4, r5
 8004adc:	4653      	mov	r3, sl
 8004ade:	4632      	mov	r2, r6
 8004ae0:	f000 fe1a 	bl	8005718 <_dtoa_r>
 8004ae4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004ae8:	4607      	mov	r7, r0
 8004aea:	d102      	bne.n	8004af2 <__cvt+0x66>
 8004aec:	f019 0f01 	tst.w	r9, #1
 8004af0:	d022      	beq.n	8004b38 <__cvt+0xac>
 8004af2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004af6:	eb07 0906 	add.w	r9, r7, r6
 8004afa:	d110      	bne.n	8004b1e <__cvt+0x92>
 8004afc:	783b      	ldrb	r3, [r7, #0]
 8004afe:	2b30      	cmp	r3, #48	; 0x30
 8004b00:	d10a      	bne.n	8004b18 <__cvt+0x8c>
 8004b02:	2200      	movs	r2, #0
 8004b04:	2300      	movs	r3, #0
 8004b06:	4620      	mov	r0, r4
 8004b08:	4629      	mov	r1, r5
 8004b0a:	f7fb fffd 	bl	8000b08 <__aeabi_dcmpeq>
 8004b0e:	b918      	cbnz	r0, 8004b18 <__cvt+0x8c>
 8004b10:	f1c6 0601 	rsb	r6, r6, #1
 8004b14:	f8ca 6000 	str.w	r6, [sl]
 8004b18:	f8da 3000 	ldr.w	r3, [sl]
 8004b1c:	4499      	add	r9, r3
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2300      	movs	r3, #0
 8004b22:	4620      	mov	r0, r4
 8004b24:	4629      	mov	r1, r5
 8004b26:	f7fb ffef 	bl	8000b08 <__aeabi_dcmpeq>
 8004b2a:	b108      	cbz	r0, 8004b30 <__cvt+0xa4>
 8004b2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b30:	2230      	movs	r2, #48	; 0x30
 8004b32:	9b03      	ldr	r3, [sp, #12]
 8004b34:	454b      	cmp	r3, r9
 8004b36:	d307      	bcc.n	8004b48 <__cvt+0xbc>
 8004b38:	9b03      	ldr	r3, [sp, #12]
 8004b3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b3c:	1bdb      	subs	r3, r3, r7
 8004b3e:	4638      	mov	r0, r7
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	b004      	add	sp, #16
 8004b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b48:	1c59      	adds	r1, r3, #1
 8004b4a:	9103      	str	r1, [sp, #12]
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	e7f0      	b.n	8004b32 <__cvt+0xa6>

08004b50 <__exponent>:
 8004b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b52:	4603      	mov	r3, r0
 8004b54:	2900      	cmp	r1, #0
 8004b56:	bfb8      	it	lt
 8004b58:	4249      	neglt	r1, r1
 8004b5a:	f803 2b02 	strb.w	r2, [r3], #2
 8004b5e:	bfb4      	ite	lt
 8004b60:	222d      	movlt	r2, #45	; 0x2d
 8004b62:	222b      	movge	r2, #43	; 0x2b
 8004b64:	2909      	cmp	r1, #9
 8004b66:	7042      	strb	r2, [r0, #1]
 8004b68:	dd2a      	ble.n	8004bc0 <__exponent+0x70>
 8004b6a:	f10d 0407 	add.w	r4, sp, #7
 8004b6e:	46a4      	mov	ip, r4
 8004b70:	270a      	movs	r7, #10
 8004b72:	46a6      	mov	lr, r4
 8004b74:	460a      	mov	r2, r1
 8004b76:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b7a:	fb07 1516 	mls	r5, r7, r6, r1
 8004b7e:	3530      	adds	r5, #48	; 0x30
 8004b80:	2a63      	cmp	r2, #99	; 0x63
 8004b82:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	dcf1      	bgt.n	8004b72 <__exponent+0x22>
 8004b8e:	3130      	adds	r1, #48	; 0x30
 8004b90:	f1ae 0502 	sub.w	r5, lr, #2
 8004b94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b98:	1c44      	adds	r4, r0, #1
 8004b9a:	4629      	mov	r1, r5
 8004b9c:	4561      	cmp	r1, ip
 8004b9e:	d30a      	bcc.n	8004bb6 <__exponent+0x66>
 8004ba0:	f10d 0209 	add.w	r2, sp, #9
 8004ba4:	eba2 020e 	sub.w	r2, r2, lr
 8004ba8:	4565      	cmp	r5, ip
 8004baa:	bf88      	it	hi
 8004bac:	2200      	movhi	r2, #0
 8004bae:	4413      	add	r3, r2
 8004bb0:	1a18      	subs	r0, r3, r0
 8004bb2:	b003      	add	sp, #12
 8004bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004bbe:	e7ed      	b.n	8004b9c <__exponent+0x4c>
 8004bc0:	2330      	movs	r3, #48	; 0x30
 8004bc2:	3130      	adds	r1, #48	; 0x30
 8004bc4:	7083      	strb	r3, [r0, #2]
 8004bc6:	70c1      	strb	r1, [r0, #3]
 8004bc8:	1d03      	adds	r3, r0, #4
 8004bca:	e7f1      	b.n	8004bb0 <__exponent+0x60>

08004bcc <_printf_float>:
 8004bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd0:	ed2d 8b02 	vpush	{d8}
 8004bd4:	b08d      	sub	sp, #52	; 0x34
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004bdc:	4616      	mov	r6, r2
 8004bde:	461f      	mov	r7, r3
 8004be0:	4605      	mov	r5, r0
 8004be2:	f001 fba7 	bl	8006334 <_localeconv_r>
 8004be6:	f8d0 a000 	ldr.w	sl, [r0]
 8004bea:	4650      	mov	r0, sl
 8004bec:	f7fb fb10 	bl	8000210 <strlen>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	9305      	str	r3, [sp, #20]
 8004bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8004bfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004c00:	3307      	adds	r3, #7
 8004c02:	f023 0307 	bic.w	r3, r3, #7
 8004c06:	f103 0208 	add.w	r2, r3, #8
 8004c0a:	f8c8 2000 	str.w	r2, [r8]
 8004c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004c16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004c1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004c1e:	9307      	str	r3, [sp, #28]
 8004c20:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c24:	ee08 0a10 	vmov	s16, r0
 8004c28:	4b9f      	ldr	r3, [pc, #636]	; (8004ea8 <_printf_float+0x2dc>)
 8004c2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c32:	f7fb ff9b 	bl	8000b6c <__aeabi_dcmpun>
 8004c36:	bb88      	cbnz	r0, 8004c9c <_printf_float+0xd0>
 8004c38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c3c:	4b9a      	ldr	r3, [pc, #616]	; (8004ea8 <_printf_float+0x2dc>)
 8004c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c42:	f7fb ff75 	bl	8000b30 <__aeabi_dcmple>
 8004c46:	bb48      	cbnz	r0, 8004c9c <_printf_float+0xd0>
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	4640      	mov	r0, r8
 8004c4e:	4649      	mov	r1, r9
 8004c50:	f7fb ff64 	bl	8000b1c <__aeabi_dcmplt>
 8004c54:	b110      	cbz	r0, 8004c5c <_printf_float+0x90>
 8004c56:	232d      	movs	r3, #45	; 0x2d
 8004c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c5c:	4b93      	ldr	r3, [pc, #588]	; (8004eac <_printf_float+0x2e0>)
 8004c5e:	4894      	ldr	r0, [pc, #592]	; (8004eb0 <_printf_float+0x2e4>)
 8004c60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c64:	bf94      	ite	ls
 8004c66:	4698      	movls	r8, r3
 8004c68:	4680      	movhi	r8, r0
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	6123      	str	r3, [r4, #16]
 8004c6e:	9b05      	ldr	r3, [sp, #20]
 8004c70:	f023 0204 	bic.w	r2, r3, #4
 8004c74:	6022      	str	r2, [r4, #0]
 8004c76:	f04f 0900 	mov.w	r9, #0
 8004c7a:	9700      	str	r7, [sp, #0]
 8004c7c:	4633      	mov	r3, r6
 8004c7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c80:	4621      	mov	r1, r4
 8004c82:	4628      	mov	r0, r5
 8004c84:	f000 f9d8 	bl	8005038 <_printf_common>
 8004c88:	3001      	adds	r0, #1
 8004c8a:	f040 8090 	bne.w	8004dae <_printf_float+0x1e2>
 8004c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c92:	b00d      	add	sp, #52	; 0x34
 8004c94:	ecbd 8b02 	vpop	{d8}
 8004c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	f7fb ff62 	bl	8000b6c <__aeabi_dcmpun>
 8004ca8:	b140      	cbz	r0, 8004cbc <_printf_float+0xf0>
 8004caa:	464b      	mov	r3, r9
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bfbc      	itt	lt
 8004cb0:	232d      	movlt	r3, #45	; 0x2d
 8004cb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004cb6:	487f      	ldr	r0, [pc, #508]	; (8004eb4 <_printf_float+0x2e8>)
 8004cb8:	4b7f      	ldr	r3, [pc, #508]	; (8004eb8 <_printf_float+0x2ec>)
 8004cba:	e7d1      	b.n	8004c60 <_printf_float+0x94>
 8004cbc:	6863      	ldr	r3, [r4, #4]
 8004cbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004cc2:	9206      	str	r2, [sp, #24]
 8004cc4:	1c5a      	adds	r2, r3, #1
 8004cc6:	d13f      	bne.n	8004d48 <_printf_float+0x17c>
 8004cc8:	2306      	movs	r3, #6
 8004cca:	6063      	str	r3, [r4, #4]
 8004ccc:	9b05      	ldr	r3, [sp, #20]
 8004cce:	6861      	ldr	r1, [r4, #4]
 8004cd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	9303      	str	r3, [sp, #12]
 8004cd8:	ab0a      	add	r3, sp, #40	; 0x28
 8004cda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004cde:	ab09      	add	r3, sp, #36	; 0x24
 8004ce0:	ec49 8b10 	vmov	d0, r8, r9
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	6022      	str	r2, [r4, #0]
 8004ce8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004cec:	4628      	mov	r0, r5
 8004cee:	f7ff fecd 	bl	8004a8c <__cvt>
 8004cf2:	9b06      	ldr	r3, [sp, #24]
 8004cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cf6:	2b47      	cmp	r3, #71	; 0x47
 8004cf8:	4680      	mov	r8, r0
 8004cfa:	d108      	bne.n	8004d0e <_printf_float+0x142>
 8004cfc:	1cc8      	adds	r0, r1, #3
 8004cfe:	db02      	blt.n	8004d06 <_printf_float+0x13a>
 8004d00:	6863      	ldr	r3, [r4, #4]
 8004d02:	4299      	cmp	r1, r3
 8004d04:	dd41      	ble.n	8004d8a <_printf_float+0x1be>
 8004d06:	f1ab 0b02 	sub.w	fp, fp, #2
 8004d0a:	fa5f fb8b 	uxtb.w	fp, fp
 8004d0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d12:	d820      	bhi.n	8004d56 <_printf_float+0x18a>
 8004d14:	3901      	subs	r1, #1
 8004d16:	465a      	mov	r2, fp
 8004d18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d1c:	9109      	str	r1, [sp, #36]	; 0x24
 8004d1e:	f7ff ff17 	bl	8004b50 <__exponent>
 8004d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d24:	1813      	adds	r3, r2, r0
 8004d26:	2a01      	cmp	r2, #1
 8004d28:	4681      	mov	r9, r0
 8004d2a:	6123      	str	r3, [r4, #16]
 8004d2c:	dc02      	bgt.n	8004d34 <_printf_float+0x168>
 8004d2e:	6822      	ldr	r2, [r4, #0]
 8004d30:	07d2      	lsls	r2, r2, #31
 8004d32:	d501      	bpl.n	8004d38 <_printf_float+0x16c>
 8004d34:	3301      	adds	r3, #1
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d09c      	beq.n	8004c7a <_printf_float+0xae>
 8004d40:	232d      	movs	r3, #45	; 0x2d
 8004d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d46:	e798      	b.n	8004c7a <_printf_float+0xae>
 8004d48:	9a06      	ldr	r2, [sp, #24]
 8004d4a:	2a47      	cmp	r2, #71	; 0x47
 8004d4c:	d1be      	bne.n	8004ccc <_printf_float+0x100>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1bc      	bne.n	8004ccc <_printf_float+0x100>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e7b9      	b.n	8004cca <_printf_float+0xfe>
 8004d56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004d5a:	d118      	bne.n	8004d8e <_printf_float+0x1c2>
 8004d5c:	2900      	cmp	r1, #0
 8004d5e:	6863      	ldr	r3, [r4, #4]
 8004d60:	dd0b      	ble.n	8004d7a <_printf_float+0x1ae>
 8004d62:	6121      	str	r1, [r4, #16]
 8004d64:	b913      	cbnz	r3, 8004d6c <_printf_float+0x1a0>
 8004d66:	6822      	ldr	r2, [r4, #0]
 8004d68:	07d0      	lsls	r0, r2, #31
 8004d6a:	d502      	bpl.n	8004d72 <_printf_float+0x1a6>
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	440b      	add	r3, r1
 8004d70:	6123      	str	r3, [r4, #16]
 8004d72:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d74:	f04f 0900 	mov.w	r9, #0
 8004d78:	e7de      	b.n	8004d38 <_printf_float+0x16c>
 8004d7a:	b913      	cbnz	r3, 8004d82 <_printf_float+0x1b6>
 8004d7c:	6822      	ldr	r2, [r4, #0]
 8004d7e:	07d2      	lsls	r2, r2, #31
 8004d80:	d501      	bpl.n	8004d86 <_printf_float+0x1ba>
 8004d82:	3302      	adds	r3, #2
 8004d84:	e7f4      	b.n	8004d70 <_printf_float+0x1a4>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e7f2      	b.n	8004d70 <_printf_float+0x1a4>
 8004d8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d90:	4299      	cmp	r1, r3
 8004d92:	db05      	blt.n	8004da0 <_printf_float+0x1d4>
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	6121      	str	r1, [r4, #16]
 8004d98:	07d8      	lsls	r0, r3, #31
 8004d9a:	d5ea      	bpl.n	8004d72 <_printf_float+0x1a6>
 8004d9c:	1c4b      	adds	r3, r1, #1
 8004d9e:	e7e7      	b.n	8004d70 <_printf_float+0x1a4>
 8004da0:	2900      	cmp	r1, #0
 8004da2:	bfd4      	ite	le
 8004da4:	f1c1 0202 	rsble	r2, r1, #2
 8004da8:	2201      	movgt	r2, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	e7e0      	b.n	8004d70 <_printf_float+0x1a4>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	055a      	lsls	r2, r3, #21
 8004db2:	d407      	bmi.n	8004dc4 <_printf_float+0x1f8>
 8004db4:	6923      	ldr	r3, [r4, #16]
 8004db6:	4642      	mov	r2, r8
 8004db8:	4631      	mov	r1, r6
 8004dba:	4628      	mov	r0, r5
 8004dbc:	47b8      	blx	r7
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d12c      	bne.n	8004e1c <_printf_float+0x250>
 8004dc2:	e764      	b.n	8004c8e <_printf_float+0xc2>
 8004dc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004dc8:	f240 80e0 	bls.w	8004f8c <_printf_float+0x3c0>
 8004dcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f7fb fe98 	bl	8000b08 <__aeabi_dcmpeq>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d034      	beq.n	8004e46 <_printf_float+0x27a>
 8004ddc:	4a37      	ldr	r2, [pc, #220]	; (8004ebc <_printf_float+0x2f0>)
 8004dde:	2301      	movs	r3, #1
 8004de0:	4631      	mov	r1, r6
 8004de2:	4628      	mov	r0, r5
 8004de4:	47b8      	blx	r7
 8004de6:	3001      	adds	r0, #1
 8004de8:	f43f af51 	beq.w	8004c8e <_printf_float+0xc2>
 8004dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004df0:	429a      	cmp	r2, r3
 8004df2:	db02      	blt.n	8004dfa <_printf_float+0x22e>
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	07d8      	lsls	r0, r3, #31
 8004df8:	d510      	bpl.n	8004e1c <_printf_float+0x250>
 8004dfa:	ee18 3a10 	vmov	r3, s16
 8004dfe:	4652      	mov	r2, sl
 8004e00:	4631      	mov	r1, r6
 8004e02:	4628      	mov	r0, r5
 8004e04:	47b8      	blx	r7
 8004e06:	3001      	adds	r0, #1
 8004e08:	f43f af41 	beq.w	8004c8e <_printf_float+0xc2>
 8004e0c:	f04f 0800 	mov.w	r8, #0
 8004e10:	f104 091a 	add.w	r9, r4, #26
 8004e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e16:	3b01      	subs	r3, #1
 8004e18:	4543      	cmp	r3, r8
 8004e1a:	dc09      	bgt.n	8004e30 <_printf_float+0x264>
 8004e1c:	6823      	ldr	r3, [r4, #0]
 8004e1e:	079b      	lsls	r3, r3, #30
 8004e20:	f100 8105 	bmi.w	800502e <_printf_float+0x462>
 8004e24:	68e0      	ldr	r0, [r4, #12]
 8004e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e28:	4298      	cmp	r0, r3
 8004e2a:	bfb8      	it	lt
 8004e2c:	4618      	movlt	r0, r3
 8004e2e:	e730      	b.n	8004c92 <_printf_float+0xc6>
 8004e30:	2301      	movs	r3, #1
 8004e32:	464a      	mov	r2, r9
 8004e34:	4631      	mov	r1, r6
 8004e36:	4628      	mov	r0, r5
 8004e38:	47b8      	blx	r7
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	f43f af27 	beq.w	8004c8e <_printf_float+0xc2>
 8004e40:	f108 0801 	add.w	r8, r8, #1
 8004e44:	e7e6      	b.n	8004e14 <_printf_float+0x248>
 8004e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	dc39      	bgt.n	8004ec0 <_printf_float+0x2f4>
 8004e4c:	4a1b      	ldr	r2, [pc, #108]	; (8004ebc <_printf_float+0x2f0>)
 8004e4e:	2301      	movs	r3, #1
 8004e50:	4631      	mov	r1, r6
 8004e52:	4628      	mov	r0, r5
 8004e54:	47b8      	blx	r7
 8004e56:	3001      	adds	r0, #1
 8004e58:	f43f af19 	beq.w	8004c8e <_printf_float+0xc2>
 8004e5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e60:	4313      	orrs	r3, r2
 8004e62:	d102      	bne.n	8004e6a <_printf_float+0x29e>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	07d9      	lsls	r1, r3, #31
 8004e68:	d5d8      	bpl.n	8004e1c <_printf_float+0x250>
 8004e6a:	ee18 3a10 	vmov	r3, s16
 8004e6e:	4652      	mov	r2, sl
 8004e70:	4631      	mov	r1, r6
 8004e72:	4628      	mov	r0, r5
 8004e74:	47b8      	blx	r7
 8004e76:	3001      	adds	r0, #1
 8004e78:	f43f af09 	beq.w	8004c8e <_printf_float+0xc2>
 8004e7c:	f04f 0900 	mov.w	r9, #0
 8004e80:	f104 0a1a 	add.w	sl, r4, #26
 8004e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e86:	425b      	negs	r3, r3
 8004e88:	454b      	cmp	r3, r9
 8004e8a:	dc01      	bgt.n	8004e90 <_printf_float+0x2c4>
 8004e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e8e:	e792      	b.n	8004db6 <_printf_float+0x1ea>
 8004e90:	2301      	movs	r3, #1
 8004e92:	4652      	mov	r2, sl
 8004e94:	4631      	mov	r1, r6
 8004e96:	4628      	mov	r0, r5
 8004e98:	47b8      	blx	r7
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	f43f aef7 	beq.w	8004c8e <_printf_float+0xc2>
 8004ea0:	f109 0901 	add.w	r9, r9, #1
 8004ea4:	e7ee      	b.n	8004e84 <_printf_float+0x2b8>
 8004ea6:	bf00      	nop
 8004ea8:	7fefffff 	.word	0x7fefffff
 8004eac:	08006d09 	.word	0x08006d09
 8004eb0:	08006d0d 	.word	0x08006d0d
 8004eb4:	08006d15 	.word	0x08006d15
 8004eb8:	08006d11 	.word	0x08006d11
 8004ebc:	08006d19 	.word	0x08006d19
 8004ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	bfa8      	it	ge
 8004ec8:	461a      	movge	r2, r3
 8004eca:	2a00      	cmp	r2, #0
 8004ecc:	4691      	mov	r9, r2
 8004ece:	dc37      	bgt.n	8004f40 <_printf_float+0x374>
 8004ed0:	f04f 0b00 	mov.w	fp, #0
 8004ed4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ed8:	f104 021a 	add.w	r2, r4, #26
 8004edc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ede:	9305      	str	r3, [sp, #20]
 8004ee0:	eba3 0309 	sub.w	r3, r3, r9
 8004ee4:	455b      	cmp	r3, fp
 8004ee6:	dc33      	bgt.n	8004f50 <_printf_float+0x384>
 8004ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004eec:	429a      	cmp	r2, r3
 8004eee:	db3b      	blt.n	8004f68 <_printf_float+0x39c>
 8004ef0:	6823      	ldr	r3, [r4, #0]
 8004ef2:	07da      	lsls	r2, r3, #31
 8004ef4:	d438      	bmi.n	8004f68 <_printf_float+0x39c>
 8004ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ef8:	9b05      	ldr	r3, [sp, #20]
 8004efa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	eba2 0901 	sub.w	r9, r2, r1
 8004f02:	4599      	cmp	r9, r3
 8004f04:	bfa8      	it	ge
 8004f06:	4699      	movge	r9, r3
 8004f08:	f1b9 0f00 	cmp.w	r9, #0
 8004f0c:	dc35      	bgt.n	8004f7a <_printf_float+0x3ae>
 8004f0e:	f04f 0800 	mov.w	r8, #0
 8004f12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f16:	f104 0a1a 	add.w	sl, r4, #26
 8004f1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	eba3 0309 	sub.w	r3, r3, r9
 8004f24:	4543      	cmp	r3, r8
 8004f26:	f77f af79 	ble.w	8004e1c <_printf_float+0x250>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4652      	mov	r2, sl
 8004f2e:	4631      	mov	r1, r6
 8004f30:	4628      	mov	r0, r5
 8004f32:	47b8      	blx	r7
 8004f34:	3001      	adds	r0, #1
 8004f36:	f43f aeaa 	beq.w	8004c8e <_printf_float+0xc2>
 8004f3a:	f108 0801 	add.w	r8, r8, #1
 8004f3e:	e7ec      	b.n	8004f1a <_printf_float+0x34e>
 8004f40:	4613      	mov	r3, r2
 8004f42:	4631      	mov	r1, r6
 8004f44:	4642      	mov	r2, r8
 8004f46:	4628      	mov	r0, r5
 8004f48:	47b8      	blx	r7
 8004f4a:	3001      	adds	r0, #1
 8004f4c:	d1c0      	bne.n	8004ed0 <_printf_float+0x304>
 8004f4e:	e69e      	b.n	8004c8e <_printf_float+0xc2>
 8004f50:	2301      	movs	r3, #1
 8004f52:	4631      	mov	r1, r6
 8004f54:	4628      	mov	r0, r5
 8004f56:	9205      	str	r2, [sp, #20]
 8004f58:	47b8      	blx	r7
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	f43f ae97 	beq.w	8004c8e <_printf_float+0xc2>
 8004f60:	9a05      	ldr	r2, [sp, #20]
 8004f62:	f10b 0b01 	add.w	fp, fp, #1
 8004f66:	e7b9      	b.n	8004edc <_printf_float+0x310>
 8004f68:	ee18 3a10 	vmov	r3, s16
 8004f6c:	4652      	mov	r2, sl
 8004f6e:	4631      	mov	r1, r6
 8004f70:	4628      	mov	r0, r5
 8004f72:	47b8      	blx	r7
 8004f74:	3001      	adds	r0, #1
 8004f76:	d1be      	bne.n	8004ef6 <_printf_float+0x32a>
 8004f78:	e689      	b.n	8004c8e <_printf_float+0xc2>
 8004f7a:	9a05      	ldr	r2, [sp, #20]
 8004f7c:	464b      	mov	r3, r9
 8004f7e:	4442      	add	r2, r8
 8004f80:	4631      	mov	r1, r6
 8004f82:	4628      	mov	r0, r5
 8004f84:	47b8      	blx	r7
 8004f86:	3001      	adds	r0, #1
 8004f88:	d1c1      	bne.n	8004f0e <_printf_float+0x342>
 8004f8a:	e680      	b.n	8004c8e <_printf_float+0xc2>
 8004f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f8e:	2a01      	cmp	r2, #1
 8004f90:	dc01      	bgt.n	8004f96 <_printf_float+0x3ca>
 8004f92:	07db      	lsls	r3, r3, #31
 8004f94:	d538      	bpl.n	8005008 <_printf_float+0x43c>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4642      	mov	r2, r8
 8004f9a:	4631      	mov	r1, r6
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	47b8      	blx	r7
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	f43f ae74 	beq.w	8004c8e <_printf_float+0xc2>
 8004fa6:	ee18 3a10 	vmov	r3, s16
 8004faa:	4652      	mov	r2, sl
 8004fac:	4631      	mov	r1, r6
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	f43f ae6b 	beq.w	8004c8e <_printf_float+0xc2>
 8004fb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f7fb fda2 	bl	8000b08 <__aeabi_dcmpeq>
 8004fc4:	b9d8      	cbnz	r0, 8004ffe <_printf_float+0x432>
 8004fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc8:	f108 0201 	add.w	r2, r8, #1
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4631      	mov	r1, r6
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	47b8      	blx	r7
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	d10e      	bne.n	8004ff6 <_printf_float+0x42a>
 8004fd8:	e659      	b.n	8004c8e <_printf_float+0xc2>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4652      	mov	r2, sl
 8004fde:	4631      	mov	r1, r6
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	47b8      	blx	r7
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	f43f ae52 	beq.w	8004c8e <_printf_float+0xc2>
 8004fea:	f108 0801 	add.w	r8, r8, #1
 8004fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	4543      	cmp	r3, r8
 8004ff4:	dcf1      	bgt.n	8004fda <_printf_float+0x40e>
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ffc:	e6dc      	b.n	8004db8 <_printf_float+0x1ec>
 8004ffe:	f04f 0800 	mov.w	r8, #0
 8005002:	f104 0a1a 	add.w	sl, r4, #26
 8005006:	e7f2      	b.n	8004fee <_printf_float+0x422>
 8005008:	2301      	movs	r3, #1
 800500a:	4642      	mov	r2, r8
 800500c:	e7df      	b.n	8004fce <_printf_float+0x402>
 800500e:	2301      	movs	r3, #1
 8005010:	464a      	mov	r2, r9
 8005012:	4631      	mov	r1, r6
 8005014:	4628      	mov	r0, r5
 8005016:	47b8      	blx	r7
 8005018:	3001      	adds	r0, #1
 800501a:	f43f ae38 	beq.w	8004c8e <_printf_float+0xc2>
 800501e:	f108 0801 	add.w	r8, r8, #1
 8005022:	68e3      	ldr	r3, [r4, #12]
 8005024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005026:	1a5b      	subs	r3, r3, r1
 8005028:	4543      	cmp	r3, r8
 800502a:	dcf0      	bgt.n	800500e <_printf_float+0x442>
 800502c:	e6fa      	b.n	8004e24 <_printf_float+0x258>
 800502e:	f04f 0800 	mov.w	r8, #0
 8005032:	f104 0919 	add.w	r9, r4, #25
 8005036:	e7f4      	b.n	8005022 <_printf_float+0x456>

08005038 <_printf_common>:
 8005038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800503c:	4616      	mov	r6, r2
 800503e:	4699      	mov	r9, r3
 8005040:	688a      	ldr	r2, [r1, #8]
 8005042:	690b      	ldr	r3, [r1, #16]
 8005044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005048:	4293      	cmp	r3, r2
 800504a:	bfb8      	it	lt
 800504c:	4613      	movlt	r3, r2
 800504e:	6033      	str	r3, [r6, #0]
 8005050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005054:	4607      	mov	r7, r0
 8005056:	460c      	mov	r4, r1
 8005058:	b10a      	cbz	r2, 800505e <_printf_common+0x26>
 800505a:	3301      	adds	r3, #1
 800505c:	6033      	str	r3, [r6, #0]
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	0699      	lsls	r1, r3, #26
 8005062:	bf42      	ittt	mi
 8005064:	6833      	ldrmi	r3, [r6, #0]
 8005066:	3302      	addmi	r3, #2
 8005068:	6033      	strmi	r3, [r6, #0]
 800506a:	6825      	ldr	r5, [r4, #0]
 800506c:	f015 0506 	ands.w	r5, r5, #6
 8005070:	d106      	bne.n	8005080 <_printf_common+0x48>
 8005072:	f104 0a19 	add.w	sl, r4, #25
 8005076:	68e3      	ldr	r3, [r4, #12]
 8005078:	6832      	ldr	r2, [r6, #0]
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	42ab      	cmp	r3, r5
 800507e:	dc26      	bgt.n	80050ce <_printf_common+0x96>
 8005080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005084:	1e13      	subs	r3, r2, #0
 8005086:	6822      	ldr	r2, [r4, #0]
 8005088:	bf18      	it	ne
 800508a:	2301      	movne	r3, #1
 800508c:	0692      	lsls	r2, r2, #26
 800508e:	d42b      	bmi.n	80050e8 <_printf_common+0xb0>
 8005090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005094:	4649      	mov	r1, r9
 8005096:	4638      	mov	r0, r7
 8005098:	47c0      	blx	r8
 800509a:	3001      	adds	r0, #1
 800509c:	d01e      	beq.n	80050dc <_printf_common+0xa4>
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	68e5      	ldr	r5, [r4, #12]
 80050a2:	6832      	ldr	r2, [r6, #0]
 80050a4:	f003 0306 	and.w	r3, r3, #6
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	bf08      	it	eq
 80050ac:	1aad      	subeq	r5, r5, r2
 80050ae:	68a3      	ldr	r3, [r4, #8]
 80050b0:	6922      	ldr	r2, [r4, #16]
 80050b2:	bf0c      	ite	eq
 80050b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050b8:	2500      	movne	r5, #0
 80050ba:	4293      	cmp	r3, r2
 80050bc:	bfc4      	itt	gt
 80050be:	1a9b      	subgt	r3, r3, r2
 80050c0:	18ed      	addgt	r5, r5, r3
 80050c2:	2600      	movs	r6, #0
 80050c4:	341a      	adds	r4, #26
 80050c6:	42b5      	cmp	r5, r6
 80050c8:	d11a      	bne.n	8005100 <_printf_common+0xc8>
 80050ca:	2000      	movs	r0, #0
 80050cc:	e008      	b.n	80050e0 <_printf_common+0xa8>
 80050ce:	2301      	movs	r3, #1
 80050d0:	4652      	mov	r2, sl
 80050d2:	4649      	mov	r1, r9
 80050d4:	4638      	mov	r0, r7
 80050d6:	47c0      	blx	r8
 80050d8:	3001      	adds	r0, #1
 80050da:	d103      	bne.n	80050e4 <_printf_common+0xac>
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295
 80050e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e4:	3501      	adds	r5, #1
 80050e6:	e7c6      	b.n	8005076 <_printf_common+0x3e>
 80050e8:	18e1      	adds	r1, r4, r3
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	2030      	movs	r0, #48	; 0x30
 80050ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050f2:	4422      	add	r2, r4
 80050f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050fc:	3302      	adds	r3, #2
 80050fe:	e7c7      	b.n	8005090 <_printf_common+0x58>
 8005100:	2301      	movs	r3, #1
 8005102:	4622      	mov	r2, r4
 8005104:	4649      	mov	r1, r9
 8005106:	4638      	mov	r0, r7
 8005108:	47c0      	blx	r8
 800510a:	3001      	adds	r0, #1
 800510c:	d0e6      	beq.n	80050dc <_printf_common+0xa4>
 800510e:	3601      	adds	r6, #1
 8005110:	e7d9      	b.n	80050c6 <_printf_common+0x8e>
	...

08005114 <_printf_i>:
 8005114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005118:	460c      	mov	r4, r1
 800511a:	4691      	mov	r9, r2
 800511c:	7e27      	ldrb	r7, [r4, #24]
 800511e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005120:	2f78      	cmp	r7, #120	; 0x78
 8005122:	4680      	mov	r8, r0
 8005124:	469a      	mov	sl, r3
 8005126:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800512a:	d807      	bhi.n	800513c <_printf_i+0x28>
 800512c:	2f62      	cmp	r7, #98	; 0x62
 800512e:	d80a      	bhi.n	8005146 <_printf_i+0x32>
 8005130:	2f00      	cmp	r7, #0
 8005132:	f000 80d8 	beq.w	80052e6 <_printf_i+0x1d2>
 8005136:	2f58      	cmp	r7, #88	; 0x58
 8005138:	f000 80a3 	beq.w	8005282 <_printf_i+0x16e>
 800513c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005144:	e03a      	b.n	80051bc <_printf_i+0xa8>
 8005146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800514a:	2b15      	cmp	r3, #21
 800514c:	d8f6      	bhi.n	800513c <_printf_i+0x28>
 800514e:	a001      	add	r0, pc, #4	; (adr r0, 8005154 <_printf_i+0x40>)
 8005150:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005154:	080051ad 	.word	0x080051ad
 8005158:	080051c1 	.word	0x080051c1
 800515c:	0800513d 	.word	0x0800513d
 8005160:	0800513d 	.word	0x0800513d
 8005164:	0800513d 	.word	0x0800513d
 8005168:	0800513d 	.word	0x0800513d
 800516c:	080051c1 	.word	0x080051c1
 8005170:	0800513d 	.word	0x0800513d
 8005174:	0800513d 	.word	0x0800513d
 8005178:	0800513d 	.word	0x0800513d
 800517c:	0800513d 	.word	0x0800513d
 8005180:	080052cd 	.word	0x080052cd
 8005184:	080051f1 	.word	0x080051f1
 8005188:	080052af 	.word	0x080052af
 800518c:	0800513d 	.word	0x0800513d
 8005190:	0800513d 	.word	0x0800513d
 8005194:	080052ef 	.word	0x080052ef
 8005198:	0800513d 	.word	0x0800513d
 800519c:	080051f1 	.word	0x080051f1
 80051a0:	0800513d 	.word	0x0800513d
 80051a4:	0800513d 	.word	0x0800513d
 80051a8:	080052b7 	.word	0x080052b7
 80051ac:	680b      	ldr	r3, [r1, #0]
 80051ae:	1d1a      	adds	r2, r3, #4
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	600a      	str	r2, [r1, #0]
 80051b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051bc:	2301      	movs	r3, #1
 80051be:	e0a3      	b.n	8005308 <_printf_i+0x1f4>
 80051c0:	6825      	ldr	r5, [r4, #0]
 80051c2:	6808      	ldr	r0, [r1, #0]
 80051c4:	062e      	lsls	r6, r5, #24
 80051c6:	f100 0304 	add.w	r3, r0, #4
 80051ca:	d50a      	bpl.n	80051e2 <_printf_i+0xce>
 80051cc:	6805      	ldr	r5, [r0, #0]
 80051ce:	600b      	str	r3, [r1, #0]
 80051d0:	2d00      	cmp	r5, #0
 80051d2:	da03      	bge.n	80051dc <_printf_i+0xc8>
 80051d4:	232d      	movs	r3, #45	; 0x2d
 80051d6:	426d      	negs	r5, r5
 80051d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051dc:	485e      	ldr	r0, [pc, #376]	; (8005358 <_printf_i+0x244>)
 80051de:	230a      	movs	r3, #10
 80051e0:	e019      	b.n	8005216 <_printf_i+0x102>
 80051e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051e6:	6805      	ldr	r5, [r0, #0]
 80051e8:	600b      	str	r3, [r1, #0]
 80051ea:	bf18      	it	ne
 80051ec:	b22d      	sxthne	r5, r5
 80051ee:	e7ef      	b.n	80051d0 <_printf_i+0xbc>
 80051f0:	680b      	ldr	r3, [r1, #0]
 80051f2:	6825      	ldr	r5, [r4, #0]
 80051f4:	1d18      	adds	r0, r3, #4
 80051f6:	6008      	str	r0, [r1, #0]
 80051f8:	0628      	lsls	r0, r5, #24
 80051fa:	d501      	bpl.n	8005200 <_printf_i+0xec>
 80051fc:	681d      	ldr	r5, [r3, #0]
 80051fe:	e002      	b.n	8005206 <_printf_i+0xf2>
 8005200:	0669      	lsls	r1, r5, #25
 8005202:	d5fb      	bpl.n	80051fc <_printf_i+0xe8>
 8005204:	881d      	ldrh	r5, [r3, #0]
 8005206:	4854      	ldr	r0, [pc, #336]	; (8005358 <_printf_i+0x244>)
 8005208:	2f6f      	cmp	r7, #111	; 0x6f
 800520a:	bf0c      	ite	eq
 800520c:	2308      	moveq	r3, #8
 800520e:	230a      	movne	r3, #10
 8005210:	2100      	movs	r1, #0
 8005212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005216:	6866      	ldr	r6, [r4, #4]
 8005218:	60a6      	str	r6, [r4, #8]
 800521a:	2e00      	cmp	r6, #0
 800521c:	bfa2      	ittt	ge
 800521e:	6821      	ldrge	r1, [r4, #0]
 8005220:	f021 0104 	bicge.w	r1, r1, #4
 8005224:	6021      	strge	r1, [r4, #0]
 8005226:	b90d      	cbnz	r5, 800522c <_printf_i+0x118>
 8005228:	2e00      	cmp	r6, #0
 800522a:	d04d      	beq.n	80052c8 <_printf_i+0x1b4>
 800522c:	4616      	mov	r6, r2
 800522e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005232:	fb03 5711 	mls	r7, r3, r1, r5
 8005236:	5dc7      	ldrb	r7, [r0, r7]
 8005238:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800523c:	462f      	mov	r7, r5
 800523e:	42bb      	cmp	r3, r7
 8005240:	460d      	mov	r5, r1
 8005242:	d9f4      	bls.n	800522e <_printf_i+0x11a>
 8005244:	2b08      	cmp	r3, #8
 8005246:	d10b      	bne.n	8005260 <_printf_i+0x14c>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	07df      	lsls	r7, r3, #31
 800524c:	d508      	bpl.n	8005260 <_printf_i+0x14c>
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	6861      	ldr	r1, [r4, #4]
 8005252:	4299      	cmp	r1, r3
 8005254:	bfde      	ittt	le
 8005256:	2330      	movle	r3, #48	; 0x30
 8005258:	f806 3c01 	strble.w	r3, [r6, #-1]
 800525c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005260:	1b92      	subs	r2, r2, r6
 8005262:	6122      	str	r2, [r4, #16]
 8005264:	f8cd a000 	str.w	sl, [sp]
 8005268:	464b      	mov	r3, r9
 800526a:	aa03      	add	r2, sp, #12
 800526c:	4621      	mov	r1, r4
 800526e:	4640      	mov	r0, r8
 8005270:	f7ff fee2 	bl	8005038 <_printf_common>
 8005274:	3001      	adds	r0, #1
 8005276:	d14c      	bne.n	8005312 <_printf_i+0x1fe>
 8005278:	f04f 30ff 	mov.w	r0, #4294967295
 800527c:	b004      	add	sp, #16
 800527e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005282:	4835      	ldr	r0, [pc, #212]	; (8005358 <_printf_i+0x244>)
 8005284:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	680e      	ldr	r6, [r1, #0]
 800528c:	061f      	lsls	r7, r3, #24
 800528e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005292:	600e      	str	r6, [r1, #0]
 8005294:	d514      	bpl.n	80052c0 <_printf_i+0x1ac>
 8005296:	07d9      	lsls	r1, r3, #31
 8005298:	bf44      	itt	mi
 800529a:	f043 0320 	orrmi.w	r3, r3, #32
 800529e:	6023      	strmi	r3, [r4, #0]
 80052a0:	b91d      	cbnz	r5, 80052aa <_printf_i+0x196>
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	f023 0320 	bic.w	r3, r3, #32
 80052a8:	6023      	str	r3, [r4, #0]
 80052aa:	2310      	movs	r3, #16
 80052ac:	e7b0      	b.n	8005210 <_printf_i+0xfc>
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	f043 0320 	orr.w	r3, r3, #32
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	2378      	movs	r3, #120	; 0x78
 80052b8:	4828      	ldr	r0, [pc, #160]	; (800535c <_printf_i+0x248>)
 80052ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052be:	e7e3      	b.n	8005288 <_printf_i+0x174>
 80052c0:	065e      	lsls	r6, r3, #25
 80052c2:	bf48      	it	mi
 80052c4:	b2ad      	uxthmi	r5, r5
 80052c6:	e7e6      	b.n	8005296 <_printf_i+0x182>
 80052c8:	4616      	mov	r6, r2
 80052ca:	e7bb      	b.n	8005244 <_printf_i+0x130>
 80052cc:	680b      	ldr	r3, [r1, #0]
 80052ce:	6826      	ldr	r6, [r4, #0]
 80052d0:	6960      	ldr	r0, [r4, #20]
 80052d2:	1d1d      	adds	r5, r3, #4
 80052d4:	600d      	str	r5, [r1, #0]
 80052d6:	0635      	lsls	r5, r6, #24
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	d501      	bpl.n	80052e0 <_printf_i+0x1cc>
 80052dc:	6018      	str	r0, [r3, #0]
 80052de:	e002      	b.n	80052e6 <_printf_i+0x1d2>
 80052e0:	0671      	lsls	r1, r6, #25
 80052e2:	d5fb      	bpl.n	80052dc <_printf_i+0x1c8>
 80052e4:	8018      	strh	r0, [r3, #0]
 80052e6:	2300      	movs	r3, #0
 80052e8:	6123      	str	r3, [r4, #16]
 80052ea:	4616      	mov	r6, r2
 80052ec:	e7ba      	b.n	8005264 <_printf_i+0x150>
 80052ee:	680b      	ldr	r3, [r1, #0]
 80052f0:	1d1a      	adds	r2, r3, #4
 80052f2:	600a      	str	r2, [r1, #0]
 80052f4:	681e      	ldr	r6, [r3, #0]
 80052f6:	6862      	ldr	r2, [r4, #4]
 80052f8:	2100      	movs	r1, #0
 80052fa:	4630      	mov	r0, r6
 80052fc:	f7fa ff90 	bl	8000220 <memchr>
 8005300:	b108      	cbz	r0, 8005306 <_printf_i+0x1f2>
 8005302:	1b80      	subs	r0, r0, r6
 8005304:	6060      	str	r0, [r4, #4]
 8005306:	6863      	ldr	r3, [r4, #4]
 8005308:	6123      	str	r3, [r4, #16]
 800530a:	2300      	movs	r3, #0
 800530c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005310:	e7a8      	b.n	8005264 <_printf_i+0x150>
 8005312:	6923      	ldr	r3, [r4, #16]
 8005314:	4632      	mov	r2, r6
 8005316:	4649      	mov	r1, r9
 8005318:	4640      	mov	r0, r8
 800531a:	47d0      	blx	sl
 800531c:	3001      	adds	r0, #1
 800531e:	d0ab      	beq.n	8005278 <_printf_i+0x164>
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	079b      	lsls	r3, r3, #30
 8005324:	d413      	bmi.n	800534e <_printf_i+0x23a>
 8005326:	68e0      	ldr	r0, [r4, #12]
 8005328:	9b03      	ldr	r3, [sp, #12]
 800532a:	4298      	cmp	r0, r3
 800532c:	bfb8      	it	lt
 800532e:	4618      	movlt	r0, r3
 8005330:	e7a4      	b.n	800527c <_printf_i+0x168>
 8005332:	2301      	movs	r3, #1
 8005334:	4632      	mov	r2, r6
 8005336:	4649      	mov	r1, r9
 8005338:	4640      	mov	r0, r8
 800533a:	47d0      	blx	sl
 800533c:	3001      	adds	r0, #1
 800533e:	d09b      	beq.n	8005278 <_printf_i+0x164>
 8005340:	3501      	adds	r5, #1
 8005342:	68e3      	ldr	r3, [r4, #12]
 8005344:	9903      	ldr	r1, [sp, #12]
 8005346:	1a5b      	subs	r3, r3, r1
 8005348:	42ab      	cmp	r3, r5
 800534a:	dcf2      	bgt.n	8005332 <_printf_i+0x21e>
 800534c:	e7eb      	b.n	8005326 <_printf_i+0x212>
 800534e:	2500      	movs	r5, #0
 8005350:	f104 0619 	add.w	r6, r4, #25
 8005354:	e7f5      	b.n	8005342 <_printf_i+0x22e>
 8005356:	bf00      	nop
 8005358:	08006d1b 	.word	0x08006d1b
 800535c:	08006d2c 	.word	0x08006d2c

08005360 <iprintf>:
 8005360:	b40f      	push	{r0, r1, r2, r3}
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <iprintf+0x2c>)
 8005364:	b513      	push	{r0, r1, r4, lr}
 8005366:	681c      	ldr	r4, [r3, #0]
 8005368:	b124      	cbz	r4, 8005374 <iprintf+0x14>
 800536a:	69a3      	ldr	r3, [r4, #24]
 800536c:	b913      	cbnz	r3, 8005374 <iprintf+0x14>
 800536e:	4620      	mov	r0, r4
 8005370:	f7ff f82e 	bl	80043d0 <__sinit>
 8005374:	ab05      	add	r3, sp, #20
 8005376:	9a04      	ldr	r2, [sp, #16]
 8005378:	68a1      	ldr	r1, [r4, #8]
 800537a:	9301      	str	r3, [sp, #4]
 800537c:	4620      	mov	r0, r4
 800537e:	f7ff fa55 	bl	800482c <_vfiprintf_r>
 8005382:	b002      	add	sp, #8
 8005384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005388:	b004      	add	sp, #16
 800538a:	4770      	bx	lr
 800538c:	2000000c 	.word	0x2000000c

08005390 <_sbrk_r>:
 8005390:	b538      	push	{r3, r4, r5, lr}
 8005392:	4d06      	ldr	r5, [pc, #24]	; (80053ac <_sbrk_r+0x1c>)
 8005394:	2300      	movs	r3, #0
 8005396:	4604      	mov	r4, r0
 8005398:	4608      	mov	r0, r1
 800539a:	602b      	str	r3, [r5, #0]
 800539c:	f7fc f8d0 	bl	8001540 <_sbrk>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d102      	bne.n	80053aa <_sbrk_r+0x1a>
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	b103      	cbz	r3, 80053aa <_sbrk_r+0x1a>
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	20000320 	.word	0x20000320

080053b0 <__sread>:
 80053b0:	b510      	push	{r4, lr}
 80053b2:	460c      	mov	r4, r1
 80053b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b8:	f001 fb6c 	bl	8006a94 <_read_r>
 80053bc:	2800      	cmp	r0, #0
 80053be:	bfab      	itete	ge
 80053c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80053c2:	89a3      	ldrhlt	r3, [r4, #12]
 80053c4:	181b      	addge	r3, r3, r0
 80053c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80053ca:	bfac      	ite	ge
 80053cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80053ce:	81a3      	strhlt	r3, [r4, #12]
 80053d0:	bd10      	pop	{r4, pc}

080053d2 <__swrite>:
 80053d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053d6:	461f      	mov	r7, r3
 80053d8:	898b      	ldrh	r3, [r1, #12]
 80053da:	05db      	lsls	r3, r3, #23
 80053dc:	4605      	mov	r5, r0
 80053de:	460c      	mov	r4, r1
 80053e0:	4616      	mov	r6, r2
 80053e2:	d505      	bpl.n	80053f0 <__swrite+0x1e>
 80053e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e8:	2302      	movs	r3, #2
 80053ea:	2200      	movs	r2, #0
 80053ec:	f000 ffa6 	bl	800633c <_lseek_r>
 80053f0:	89a3      	ldrh	r3, [r4, #12]
 80053f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053fa:	81a3      	strh	r3, [r4, #12]
 80053fc:	4632      	mov	r2, r6
 80053fe:	463b      	mov	r3, r7
 8005400:	4628      	mov	r0, r5
 8005402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005406:	f000 b869 	b.w	80054dc <_write_r>

0800540a <__sseek>:
 800540a:	b510      	push	{r4, lr}
 800540c:	460c      	mov	r4, r1
 800540e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005412:	f000 ff93 	bl	800633c <_lseek_r>
 8005416:	1c43      	adds	r3, r0, #1
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	bf15      	itete	ne
 800541c:	6560      	strne	r0, [r4, #84]	; 0x54
 800541e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005426:	81a3      	strheq	r3, [r4, #12]
 8005428:	bf18      	it	ne
 800542a:	81a3      	strhne	r3, [r4, #12]
 800542c:	bd10      	pop	{r4, pc}

0800542e <__sclose>:
 800542e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005432:	f000 b8d3 	b.w	80055dc <_close_r>
	...

08005438 <__swbuf_r>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	460e      	mov	r6, r1
 800543c:	4614      	mov	r4, r2
 800543e:	4605      	mov	r5, r0
 8005440:	b118      	cbz	r0, 800544a <__swbuf_r+0x12>
 8005442:	6983      	ldr	r3, [r0, #24]
 8005444:	b90b      	cbnz	r3, 800544a <__swbuf_r+0x12>
 8005446:	f7fe ffc3 	bl	80043d0 <__sinit>
 800544a:	4b21      	ldr	r3, [pc, #132]	; (80054d0 <__swbuf_r+0x98>)
 800544c:	429c      	cmp	r4, r3
 800544e:	d12b      	bne.n	80054a8 <__swbuf_r+0x70>
 8005450:	686c      	ldr	r4, [r5, #4]
 8005452:	69a3      	ldr	r3, [r4, #24]
 8005454:	60a3      	str	r3, [r4, #8]
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	071a      	lsls	r2, r3, #28
 800545a:	d52f      	bpl.n	80054bc <__swbuf_r+0x84>
 800545c:	6923      	ldr	r3, [r4, #16]
 800545e:	b36b      	cbz	r3, 80054bc <__swbuf_r+0x84>
 8005460:	6923      	ldr	r3, [r4, #16]
 8005462:	6820      	ldr	r0, [r4, #0]
 8005464:	1ac0      	subs	r0, r0, r3
 8005466:	6963      	ldr	r3, [r4, #20]
 8005468:	b2f6      	uxtb	r6, r6
 800546a:	4283      	cmp	r3, r0
 800546c:	4637      	mov	r7, r6
 800546e:	dc04      	bgt.n	800547a <__swbuf_r+0x42>
 8005470:	4621      	mov	r1, r4
 8005472:	4628      	mov	r0, r5
 8005474:	f7fe ff18 	bl	80042a8 <_fflush_r>
 8005478:	bb30      	cbnz	r0, 80054c8 <__swbuf_r+0x90>
 800547a:	68a3      	ldr	r3, [r4, #8]
 800547c:	3b01      	subs	r3, #1
 800547e:	60a3      	str	r3, [r4, #8]
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	6022      	str	r2, [r4, #0]
 8005486:	701e      	strb	r6, [r3, #0]
 8005488:	6963      	ldr	r3, [r4, #20]
 800548a:	3001      	adds	r0, #1
 800548c:	4283      	cmp	r3, r0
 800548e:	d004      	beq.n	800549a <__swbuf_r+0x62>
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	07db      	lsls	r3, r3, #31
 8005494:	d506      	bpl.n	80054a4 <__swbuf_r+0x6c>
 8005496:	2e0a      	cmp	r6, #10
 8005498:	d104      	bne.n	80054a4 <__swbuf_r+0x6c>
 800549a:	4621      	mov	r1, r4
 800549c:	4628      	mov	r0, r5
 800549e:	f7fe ff03 	bl	80042a8 <_fflush_r>
 80054a2:	b988      	cbnz	r0, 80054c8 <__swbuf_r+0x90>
 80054a4:	4638      	mov	r0, r7
 80054a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a8:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <__swbuf_r+0x9c>)
 80054aa:	429c      	cmp	r4, r3
 80054ac:	d101      	bne.n	80054b2 <__swbuf_r+0x7a>
 80054ae:	68ac      	ldr	r4, [r5, #8]
 80054b0:	e7cf      	b.n	8005452 <__swbuf_r+0x1a>
 80054b2:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <__swbuf_r+0xa0>)
 80054b4:	429c      	cmp	r4, r3
 80054b6:	bf08      	it	eq
 80054b8:	68ec      	ldreq	r4, [r5, #12]
 80054ba:	e7ca      	b.n	8005452 <__swbuf_r+0x1a>
 80054bc:	4621      	mov	r1, r4
 80054be:	4628      	mov	r0, r5
 80054c0:	f000 f81e 	bl	8005500 <__swsetup_r>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d0cb      	beq.n	8005460 <__swbuf_r+0x28>
 80054c8:	f04f 37ff 	mov.w	r7, #4294967295
 80054cc:	e7ea      	b.n	80054a4 <__swbuf_r+0x6c>
 80054ce:	bf00      	nop
 80054d0:	08006cb4 	.word	0x08006cb4
 80054d4:	08006cd4 	.word	0x08006cd4
 80054d8:	08006c94 	.word	0x08006c94

080054dc <_write_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	4d07      	ldr	r5, [pc, #28]	; (80054fc <_write_r+0x20>)
 80054e0:	4604      	mov	r4, r0
 80054e2:	4608      	mov	r0, r1
 80054e4:	4611      	mov	r1, r2
 80054e6:	2200      	movs	r2, #0
 80054e8:	602a      	str	r2, [r5, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f7fb ffd7 	bl	800149e <_write>
 80054f0:	1c43      	adds	r3, r0, #1
 80054f2:	d102      	bne.n	80054fa <_write_r+0x1e>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	b103      	cbz	r3, 80054fa <_write_r+0x1e>
 80054f8:	6023      	str	r3, [r4, #0]
 80054fa:	bd38      	pop	{r3, r4, r5, pc}
 80054fc:	20000320 	.word	0x20000320

08005500 <__swsetup_r>:
 8005500:	4b32      	ldr	r3, [pc, #200]	; (80055cc <__swsetup_r+0xcc>)
 8005502:	b570      	push	{r4, r5, r6, lr}
 8005504:	681d      	ldr	r5, [r3, #0]
 8005506:	4606      	mov	r6, r0
 8005508:	460c      	mov	r4, r1
 800550a:	b125      	cbz	r5, 8005516 <__swsetup_r+0x16>
 800550c:	69ab      	ldr	r3, [r5, #24]
 800550e:	b913      	cbnz	r3, 8005516 <__swsetup_r+0x16>
 8005510:	4628      	mov	r0, r5
 8005512:	f7fe ff5d 	bl	80043d0 <__sinit>
 8005516:	4b2e      	ldr	r3, [pc, #184]	; (80055d0 <__swsetup_r+0xd0>)
 8005518:	429c      	cmp	r4, r3
 800551a:	d10f      	bne.n	800553c <__swsetup_r+0x3c>
 800551c:	686c      	ldr	r4, [r5, #4]
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005524:	0719      	lsls	r1, r3, #28
 8005526:	d42c      	bmi.n	8005582 <__swsetup_r+0x82>
 8005528:	06dd      	lsls	r5, r3, #27
 800552a:	d411      	bmi.n	8005550 <__swsetup_r+0x50>
 800552c:	2309      	movs	r3, #9
 800552e:	6033      	str	r3, [r6, #0]
 8005530:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005534:	81a3      	strh	r3, [r4, #12]
 8005536:	f04f 30ff 	mov.w	r0, #4294967295
 800553a:	e03e      	b.n	80055ba <__swsetup_r+0xba>
 800553c:	4b25      	ldr	r3, [pc, #148]	; (80055d4 <__swsetup_r+0xd4>)
 800553e:	429c      	cmp	r4, r3
 8005540:	d101      	bne.n	8005546 <__swsetup_r+0x46>
 8005542:	68ac      	ldr	r4, [r5, #8]
 8005544:	e7eb      	b.n	800551e <__swsetup_r+0x1e>
 8005546:	4b24      	ldr	r3, [pc, #144]	; (80055d8 <__swsetup_r+0xd8>)
 8005548:	429c      	cmp	r4, r3
 800554a:	bf08      	it	eq
 800554c:	68ec      	ldreq	r4, [r5, #12]
 800554e:	e7e6      	b.n	800551e <__swsetup_r+0x1e>
 8005550:	0758      	lsls	r0, r3, #29
 8005552:	d512      	bpl.n	800557a <__swsetup_r+0x7a>
 8005554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005556:	b141      	cbz	r1, 800556a <__swsetup_r+0x6a>
 8005558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800555c:	4299      	cmp	r1, r3
 800555e:	d002      	beq.n	8005566 <__swsetup_r+0x66>
 8005560:	4630      	mov	r0, r6
 8005562:	f7ff f88f 	bl	8004684 <_free_r>
 8005566:	2300      	movs	r3, #0
 8005568:	6363      	str	r3, [r4, #52]	; 0x34
 800556a:	89a3      	ldrh	r3, [r4, #12]
 800556c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005570:	81a3      	strh	r3, [r4, #12]
 8005572:	2300      	movs	r3, #0
 8005574:	6063      	str	r3, [r4, #4]
 8005576:	6923      	ldr	r3, [r4, #16]
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	89a3      	ldrh	r3, [r4, #12]
 800557c:	f043 0308 	orr.w	r3, r3, #8
 8005580:	81a3      	strh	r3, [r4, #12]
 8005582:	6923      	ldr	r3, [r4, #16]
 8005584:	b94b      	cbnz	r3, 800559a <__swsetup_r+0x9a>
 8005586:	89a3      	ldrh	r3, [r4, #12]
 8005588:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800558c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005590:	d003      	beq.n	800559a <__swsetup_r+0x9a>
 8005592:	4621      	mov	r1, r4
 8005594:	4630      	mov	r0, r6
 8005596:	f7ff f817 	bl	80045c8 <__smakebuf_r>
 800559a:	89a0      	ldrh	r0, [r4, #12]
 800559c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055a0:	f010 0301 	ands.w	r3, r0, #1
 80055a4:	d00a      	beq.n	80055bc <__swsetup_r+0xbc>
 80055a6:	2300      	movs	r3, #0
 80055a8:	60a3      	str	r3, [r4, #8]
 80055aa:	6963      	ldr	r3, [r4, #20]
 80055ac:	425b      	negs	r3, r3
 80055ae:	61a3      	str	r3, [r4, #24]
 80055b0:	6923      	ldr	r3, [r4, #16]
 80055b2:	b943      	cbnz	r3, 80055c6 <__swsetup_r+0xc6>
 80055b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055b8:	d1ba      	bne.n	8005530 <__swsetup_r+0x30>
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
 80055bc:	0781      	lsls	r1, r0, #30
 80055be:	bf58      	it	pl
 80055c0:	6963      	ldrpl	r3, [r4, #20]
 80055c2:	60a3      	str	r3, [r4, #8]
 80055c4:	e7f4      	b.n	80055b0 <__swsetup_r+0xb0>
 80055c6:	2000      	movs	r0, #0
 80055c8:	e7f7      	b.n	80055ba <__swsetup_r+0xba>
 80055ca:	bf00      	nop
 80055cc:	2000000c 	.word	0x2000000c
 80055d0:	08006cb4 	.word	0x08006cb4
 80055d4:	08006cd4 	.word	0x08006cd4
 80055d8:	08006c94 	.word	0x08006c94

080055dc <_close_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4d06      	ldr	r5, [pc, #24]	; (80055f8 <_close_r+0x1c>)
 80055e0:	2300      	movs	r3, #0
 80055e2:	4604      	mov	r4, r0
 80055e4:	4608      	mov	r0, r1
 80055e6:	602b      	str	r3, [r5, #0]
 80055e8:	f7fb ff75 	bl	80014d6 <_close>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d102      	bne.n	80055f6 <_close_r+0x1a>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	b103      	cbz	r3, 80055f6 <_close_r+0x1a>
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	20000320 	.word	0x20000320

080055fc <quorem>:
 80055fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005600:	6903      	ldr	r3, [r0, #16]
 8005602:	690c      	ldr	r4, [r1, #16]
 8005604:	42a3      	cmp	r3, r4
 8005606:	4607      	mov	r7, r0
 8005608:	f2c0 8081 	blt.w	800570e <quorem+0x112>
 800560c:	3c01      	subs	r4, #1
 800560e:	f101 0814 	add.w	r8, r1, #20
 8005612:	f100 0514 	add.w	r5, r0, #20
 8005616:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800561a:	9301      	str	r3, [sp, #4]
 800561c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005620:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005624:	3301      	adds	r3, #1
 8005626:	429a      	cmp	r2, r3
 8005628:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800562c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005630:	fbb2 f6f3 	udiv	r6, r2, r3
 8005634:	d331      	bcc.n	800569a <quorem+0x9e>
 8005636:	f04f 0e00 	mov.w	lr, #0
 800563a:	4640      	mov	r0, r8
 800563c:	46ac      	mov	ip, r5
 800563e:	46f2      	mov	sl, lr
 8005640:	f850 2b04 	ldr.w	r2, [r0], #4
 8005644:	b293      	uxth	r3, r2
 8005646:	fb06 e303 	mla	r3, r6, r3, lr
 800564a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800564e:	b29b      	uxth	r3, r3
 8005650:	ebaa 0303 	sub.w	r3, sl, r3
 8005654:	0c12      	lsrs	r2, r2, #16
 8005656:	f8dc a000 	ldr.w	sl, [ip]
 800565a:	fb06 e202 	mla	r2, r6, r2, lr
 800565e:	fa13 f38a 	uxtah	r3, r3, sl
 8005662:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005666:	fa1f fa82 	uxth.w	sl, r2
 800566a:	f8dc 2000 	ldr.w	r2, [ip]
 800566e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005672:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005676:	b29b      	uxth	r3, r3
 8005678:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800567c:	4581      	cmp	r9, r0
 800567e:	f84c 3b04 	str.w	r3, [ip], #4
 8005682:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005686:	d2db      	bcs.n	8005640 <quorem+0x44>
 8005688:	f855 300b 	ldr.w	r3, [r5, fp]
 800568c:	b92b      	cbnz	r3, 800569a <quorem+0x9e>
 800568e:	9b01      	ldr	r3, [sp, #4]
 8005690:	3b04      	subs	r3, #4
 8005692:	429d      	cmp	r5, r3
 8005694:	461a      	mov	r2, r3
 8005696:	d32e      	bcc.n	80056f6 <quorem+0xfa>
 8005698:	613c      	str	r4, [r7, #16]
 800569a:	4638      	mov	r0, r7
 800569c:	f001 f8ea 	bl	8006874 <__mcmp>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	db24      	blt.n	80056ee <quorem+0xf2>
 80056a4:	3601      	adds	r6, #1
 80056a6:	4628      	mov	r0, r5
 80056a8:	f04f 0c00 	mov.w	ip, #0
 80056ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80056b0:	f8d0 e000 	ldr.w	lr, [r0]
 80056b4:	b293      	uxth	r3, r2
 80056b6:	ebac 0303 	sub.w	r3, ip, r3
 80056ba:	0c12      	lsrs	r2, r2, #16
 80056bc:	fa13 f38e 	uxtah	r3, r3, lr
 80056c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056ce:	45c1      	cmp	r9, r8
 80056d0:	f840 3b04 	str.w	r3, [r0], #4
 80056d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056d8:	d2e8      	bcs.n	80056ac <quorem+0xb0>
 80056da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056e2:	b922      	cbnz	r2, 80056ee <quorem+0xf2>
 80056e4:	3b04      	subs	r3, #4
 80056e6:	429d      	cmp	r5, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	d30a      	bcc.n	8005702 <quorem+0x106>
 80056ec:	613c      	str	r4, [r7, #16]
 80056ee:	4630      	mov	r0, r6
 80056f0:	b003      	add	sp, #12
 80056f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	3b04      	subs	r3, #4
 80056fa:	2a00      	cmp	r2, #0
 80056fc:	d1cc      	bne.n	8005698 <quorem+0x9c>
 80056fe:	3c01      	subs	r4, #1
 8005700:	e7c7      	b.n	8005692 <quorem+0x96>
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	3b04      	subs	r3, #4
 8005706:	2a00      	cmp	r2, #0
 8005708:	d1f0      	bne.n	80056ec <quorem+0xf0>
 800570a:	3c01      	subs	r4, #1
 800570c:	e7eb      	b.n	80056e6 <quorem+0xea>
 800570e:	2000      	movs	r0, #0
 8005710:	e7ee      	b.n	80056f0 <quorem+0xf4>
 8005712:	0000      	movs	r0, r0
 8005714:	0000      	movs	r0, r0
	...

08005718 <_dtoa_r>:
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	ed2d 8b02 	vpush	{d8}
 8005720:	ec57 6b10 	vmov	r6, r7, d0
 8005724:	b095      	sub	sp, #84	; 0x54
 8005726:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005728:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800572c:	9105      	str	r1, [sp, #20]
 800572e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005732:	4604      	mov	r4, r0
 8005734:	9209      	str	r2, [sp, #36]	; 0x24
 8005736:	930f      	str	r3, [sp, #60]	; 0x3c
 8005738:	b975      	cbnz	r5, 8005758 <_dtoa_r+0x40>
 800573a:	2010      	movs	r0, #16
 800573c:	f7fe ff84 	bl	8004648 <malloc>
 8005740:	4602      	mov	r2, r0
 8005742:	6260      	str	r0, [r4, #36]	; 0x24
 8005744:	b920      	cbnz	r0, 8005750 <_dtoa_r+0x38>
 8005746:	4bb2      	ldr	r3, [pc, #712]	; (8005a10 <_dtoa_r+0x2f8>)
 8005748:	21ea      	movs	r1, #234	; 0xea
 800574a:	48b2      	ldr	r0, [pc, #712]	; (8005a14 <_dtoa_r+0x2fc>)
 800574c:	f001 f9b4 	bl	8006ab8 <__assert_func>
 8005750:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005754:	6005      	str	r5, [r0, #0]
 8005756:	60c5      	str	r5, [r0, #12]
 8005758:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800575a:	6819      	ldr	r1, [r3, #0]
 800575c:	b151      	cbz	r1, 8005774 <_dtoa_r+0x5c>
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	604a      	str	r2, [r1, #4]
 8005762:	2301      	movs	r3, #1
 8005764:	4093      	lsls	r3, r2
 8005766:	608b      	str	r3, [r1, #8]
 8005768:	4620      	mov	r0, r4
 800576a:	f000 fe45 	bl	80063f8 <_Bfree>
 800576e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	1e3b      	subs	r3, r7, #0
 8005776:	bfb9      	ittee	lt
 8005778:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800577c:	9303      	strlt	r3, [sp, #12]
 800577e:	2300      	movge	r3, #0
 8005780:	f8c8 3000 	strge.w	r3, [r8]
 8005784:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005788:	4ba3      	ldr	r3, [pc, #652]	; (8005a18 <_dtoa_r+0x300>)
 800578a:	bfbc      	itt	lt
 800578c:	2201      	movlt	r2, #1
 800578e:	f8c8 2000 	strlt.w	r2, [r8]
 8005792:	ea33 0309 	bics.w	r3, r3, r9
 8005796:	d11b      	bne.n	80057d0 <_dtoa_r+0xb8>
 8005798:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800579a:	f242 730f 	movw	r3, #9999	; 0x270f
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057a4:	4333      	orrs	r3, r6
 80057a6:	f000 857a 	beq.w	800629e <_dtoa_r+0xb86>
 80057aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057ac:	b963      	cbnz	r3, 80057c8 <_dtoa_r+0xb0>
 80057ae:	4b9b      	ldr	r3, [pc, #620]	; (8005a1c <_dtoa_r+0x304>)
 80057b0:	e024      	b.n	80057fc <_dtoa_r+0xe4>
 80057b2:	4b9b      	ldr	r3, [pc, #620]	; (8005a20 <_dtoa_r+0x308>)
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	3308      	adds	r3, #8
 80057b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	9800      	ldr	r0, [sp, #0]
 80057be:	b015      	add	sp, #84	; 0x54
 80057c0:	ecbd 8b02 	vpop	{d8}
 80057c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c8:	4b94      	ldr	r3, [pc, #592]	; (8005a1c <_dtoa_r+0x304>)
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	3303      	adds	r3, #3
 80057ce:	e7f3      	b.n	80057b8 <_dtoa_r+0xa0>
 80057d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057d4:	2200      	movs	r2, #0
 80057d6:	ec51 0b17 	vmov	r0, r1, d7
 80057da:	2300      	movs	r3, #0
 80057dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80057e0:	f7fb f992 	bl	8000b08 <__aeabi_dcmpeq>
 80057e4:	4680      	mov	r8, r0
 80057e6:	b158      	cbz	r0, 8005800 <_dtoa_r+0xe8>
 80057e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057ea:	2301      	movs	r3, #1
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 8551 	beq.w	8006298 <_dtoa_r+0xb80>
 80057f6:	488b      	ldr	r0, [pc, #556]	; (8005a24 <_dtoa_r+0x30c>)
 80057f8:	6018      	str	r0, [r3, #0]
 80057fa:	1e43      	subs	r3, r0, #1
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	e7dd      	b.n	80057bc <_dtoa_r+0xa4>
 8005800:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005804:	aa12      	add	r2, sp, #72	; 0x48
 8005806:	a913      	add	r1, sp, #76	; 0x4c
 8005808:	4620      	mov	r0, r4
 800580a:	f001 f8d7 	bl	80069bc <__d2b>
 800580e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005812:	4683      	mov	fp, r0
 8005814:	2d00      	cmp	r5, #0
 8005816:	d07c      	beq.n	8005912 <_dtoa_r+0x1fa>
 8005818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800581a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800581e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005822:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005826:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800582a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800582e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005832:	4b7d      	ldr	r3, [pc, #500]	; (8005a28 <_dtoa_r+0x310>)
 8005834:	2200      	movs	r2, #0
 8005836:	4630      	mov	r0, r6
 8005838:	4639      	mov	r1, r7
 800583a:	f7fa fd45 	bl	80002c8 <__aeabi_dsub>
 800583e:	a36e      	add	r3, pc, #440	; (adr r3, 80059f8 <_dtoa_r+0x2e0>)
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	f7fa fef8 	bl	8000638 <__aeabi_dmul>
 8005848:	a36d      	add	r3, pc, #436	; (adr r3, 8005a00 <_dtoa_r+0x2e8>)
 800584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584e:	f7fa fd3d 	bl	80002cc <__adddf3>
 8005852:	4606      	mov	r6, r0
 8005854:	4628      	mov	r0, r5
 8005856:	460f      	mov	r7, r1
 8005858:	f7fa fe84 	bl	8000564 <__aeabi_i2d>
 800585c:	a36a      	add	r3, pc, #424	; (adr r3, 8005a08 <_dtoa_r+0x2f0>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f7fa fee9 	bl	8000638 <__aeabi_dmul>
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	4630      	mov	r0, r6
 800586c:	4639      	mov	r1, r7
 800586e:	f7fa fd2d 	bl	80002cc <__adddf3>
 8005872:	4606      	mov	r6, r0
 8005874:	460f      	mov	r7, r1
 8005876:	f7fb f98f 	bl	8000b98 <__aeabi_d2iz>
 800587a:	2200      	movs	r2, #0
 800587c:	4682      	mov	sl, r0
 800587e:	2300      	movs	r3, #0
 8005880:	4630      	mov	r0, r6
 8005882:	4639      	mov	r1, r7
 8005884:	f7fb f94a 	bl	8000b1c <__aeabi_dcmplt>
 8005888:	b148      	cbz	r0, 800589e <_dtoa_r+0x186>
 800588a:	4650      	mov	r0, sl
 800588c:	f7fa fe6a 	bl	8000564 <__aeabi_i2d>
 8005890:	4632      	mov	r2, r6
 8005892:	463b      	mov	r3, r7
 8005894:	f7fb f938 	bl	8000b08 <__aeabi_dcmpeq>
 8005898:	b908      	cbnz	r0, 800589e <_dtoa_r+0x186>
 800589a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800589e:	f1ba 0f16 	cmp.w	sl, #22
 80058a2:	d854      	bhi.n	800594e <_dtoa_r+0x236>
 80058a4:	4b61      	ldr	r3, [pc, #388]	; (8005a2c <_dtoa_r+0x314>)
 80058a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80058b2:	f7fb f933 	bl	8000b1c <__aeabi_dcmplt>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d04b      	beq.n	8005952 <_dtoa_r+0x23a>
 80058ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058be:	2300      	movs	r3, #0
 80058c0:	930e      	str	r3, [sp, #56]	; 0x38
 80058c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058c4:	1b5d      	subs	r5, r3, r5
 80058c6:	1e6b      	subs	r3, r5, #1
 80058c8:	9304      	str	r3, [sp, #16]
 80058ca:	bf43      	ittte	mi
 80058cc:	2300      	movmi	r3, #0
 80058ce:	f1c5 0801 	rsbmi	r8, r5, #1
 80058d2:	9304      	strmi	r3, [sp, #16]
 80058d4:	f04f 0800 	movpl.w	r8, #0
 80058d8:	f1ba 0f00 	cmp.w	sl, #0
 80058dc:	db3b      	blt.n	8005956 <_dtoa_r+0x23e>
 80058de:	9b04      	ldr	r3, [sp, #16]
 80058e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80058e4:	4453      	add	r3, sl
 80058e6:	9304      	str	r3, [sp, #16]
 80058e8:	2300      	movs	r3, #0
 80058ea:	9306      	str	r3, [sp, #24]
 80058ec:	9b05      	ldr	r3, [sp, #20]
 80058ee:	2b09      	cmp	r3, #9
 80058f0:	d869      	bhi.n	80059c6 <_dtoa_r+0x2ae>
 80058f2:	2b05      	cmp	r3, #5
 80058f4:	bfc4      	itt	gt
 80058f6:	3b04      	subgt	r3, #4
 80058f8:	9305      	strgt	r3, [sp, #20]
 80058fa:	9b05      	ldr	r3, [sp, #20]
 80058fc:	f1a3 0302 	sub.w	r3, r3, #2
 8005900:	bfcc      	ite	gt
 8005902:	2500      	movgt	r5, #0
 8005904:	2501      	movle	r5, #1
 8005906:	2b03      	cmp	r3, #3
 8005908:	d869      	bhi.n	80059de <_dtoa_r+0x2c6>
 800590a:	e8df f003 	tbb	[pc, r3]
 800590e:	4e2c      	.short	0x4e2c
 8005910:	5a4c      	.short	0x5a4c
 8005912:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005916:	441d      	add	r5, r3
 8005918:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800591c:	2b20      	cmp	r3, #32
 800591e:	bfc1      	itttt	gt
 8005920:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005924:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005928:	fa09 f303 	lslgt.w	r3, r9, r3
 800592c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005930:	bfda      	itte	le
 8005932:	f1c3 0320 	rsble	r3, r3, #32
 8005936:	fa06 f003 	lslle.w	r0, r6, r3
 800593a:	4318      	orrgt	r0, r3
 800593c:	f7fa fe02 	bl	8000544 <__aeabi_ui2d>
 8005940:	2301      	movs	r3, #1
 8005942:	4606      	mov	r6, r0
 8005944:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005948:	3d01      	subs	r5, #1
 800594a:	9310      	str	r3, [sp, #64]	; 0x40
 800594c:	e771      	b.n	8005832 <_dtoa_r+0x11a>
 800594e:	2301      	movs	r3, #1
 8005950:	e7b6      	b.n	80058c0 <_dtoa_r+0x1a8>
 8005952:	900e      	str	r0, [sp, #56]	; 0x38
 8005954:	e7b5      	b.n	80058c2 <_dtoa_r+0x1aa>
 8005956:	f1ca 0300 	rsb	r3, sl, #0
 800595a:	9306      	str	r3, [sp, #24]
 800595c:	2300      	movs	r3, #0
 800595e:	eba8 080a 	sub.w	r8, r8, sl
 8005962:	930d      	str	r3, [sp, #52]	; 0x34
 8005964:	e7c2      	b.n	80058ec <_dtoa_r+0x1d4>
 8005966:	2300      	movs	r3, #0
 8005968:	9308      	str	r3, [sp, #32]
 800596a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800596c:	2b00      	cmp	r3, #0
 800596e:	dc39      	bgt.n	80059e4 <_dtoa_r+0x2cc>
 8005970:	f04f 0901 	mov.w	r9, #1
 8005974:	f8cd 9004 	str.w	r9, [sp, #4]
 8005978:	464b      	mov	r3, r9
 800597a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800597e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005980:	2200      	movs	r2, #0
 8005982:	6042      	str	r2, [r0, #4]
 8005984:	2204      	movs	r2, #4
 8005986:	f102 0614 	add.w	r6, r2, #20
 800598a:	429e      	cmp	r6, r3
 800598c:	6841      	ldr	r1, [r0, #4]
 800598e:	d92f      	bls.n	80059f0 <_dtoa_r+0x2d8>
 8005990:	4620      	mov	r0, r4
 8005992:	f000 fcf1 	bl	8006378 <_Balloc>
 8005996:	9000      	str	r0, [sp, #0]
 8005998:	2800      	cmp	r0, #0
 800599a:	d14b      	bne.n	8005a34 <_dtoa_r+0x31c>
 800599c:	4b24      	ldr	r3, [pc, #144]	; (8005a30 <_dtoa_r+0x318>)
 800599e:	4602      	mov	r2, r0
 80059a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80059a4:	e6d1      	b.n	800574a <_dtoa_r+0x32>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e7de      	b.n	8005968 <_dtoa_r+0x250>
 80059aa:	2300      	movs	r3, #0
 80059ac:	9308      	str	r3, [sp, #32]
 80059ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b0:	eb0a 0903 	add.w	r9, sl, r3
 80059b4:	f109 0301 	add.w	r3, r9, #1
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	bfb8      	it	lt
 80059be:	2301      	movlt	r3, #1
 80059c0:	e7dd      	b.n	800597e <_dtoa_r+0x266>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e7f2      	b.n	80059ac <_dtoa_r+0x294>
 80059c6:	2501      	movs	r5, #1
 80059c8:	2300      	movs	r3, #0
 80059ca:	9305      	str	r3, [sp, #20]
 80059cc:	9508      	str	r5, [sp, #32]
 80059ce:	f04f 39ff 	mov.w	r9, #4294967295
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80059d8:	2312      	movs	r3, #18
 80059da:	9209      	str	r2, [sp, #36]	; 0x24
 80059dc:	e7cf      	b.n	800597e <_dtoa_r+0x266>
 80059de:	2301      	movs	r3, #1
 80059e0:	9308      	str	r3, [sp, #32]
 80059e2:	e7f4      	b.n	80059ce <_dtoa_r+0x2b6>
 80059e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80059e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80059ec:	464b      	mov	r3, r9
 80059ee:	e7c6      	b.n	800597e <_dtoa_r+0x266>
 80059f0:	3101      	adds	r1, #1
 80059f2:	6041      	str	r1, [r0, #4]
 80059f4:	0052      	lsls	r2, r2, #1
 80059f6:	e7c6      	b.n	8005986 <_dtoa_r+0x26e>
 80059f8:	636f4361 	.word	0x636f4361
 80059fc:	3fd287a7 	.word	0x3fd287a7
 8005a00:	8b60c8b3 	.word	0x8b60c8b3
 8005a04:	3fc68a28 	.word	0x3fc68a28
 8005a08:	509f79fb 	.word	0x509f79fb
 8005a0c:	3fd34413 	.word	0x3fd34413
 8005a10:	08006d4a 	.word	0x08006d4a
 8005a14:	08006d61 	.word	0x08006d61
 8005a18:	7ff00000 	.word	0x7ff00000
 8005a1c:	08006d46 	.word	0x08006d46
 8005a20:	08006d3d 	.word	0x08006d3d
 8005a24:	08006d1a 	.word	0x08006d1a
 8005a28:	3ff80000 	.word	0x3ff80000
 8005a2c:	08006e60 	.word	0x08006e60
 8005a30:	08006dc0 	.word	0x08006dc0
 8005a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a36:	9a00      	ldr	r2, [sp, #0]
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	9b01      	ldr	r3, [sp, #4]
 8005a3c:	2b0e      	cmp	r3, #14
 8005a3e:	f200 80ad 	bhi.w	8005b9c <_dtoa_r+0x484>
 8005a42:	2d00      	cmp	r5, #0
 8005a44:	f000 80aa 	beq.w	8005b9c <_dtoa_r+0x484>
 8005a48:	f1ba 0f00 	cmp.w	sl, #0
 8005a4c:	dd36      	ble.n	8005abc <_dtoa_r+0x3a4>
 8005a4e:	4ac3      	ldr	r2, [pc, #780]	; (8005d5c <_dtoa_r+0x644>)
 8005a50:	f00a 030f 	and.w	r3, sl, #15
 8005a54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a58:	ed93 7b00 	vldr	d7, [r3]
 8005a5c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005a60:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005a64:	eeb0 8a47 	vmov.f32	s16, s14
 8005a68:	eef0 8a67 	vmov.f32	s17, s15
 8005a6c:	d016      	beq.n	8005a9c <_dtoa_r+0x384>
 8005a6e:	4bbc      	ldr	r3, [pc, #752]	; (8005d60 <_dtoa_r+0x648>)
 8005a70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a78:	f7fa ff08 	bl	800088c <__aeabi_ddiv>
 8005a7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a80:	f007 070f 	and.w	r7, r7, #15
 8005a84:	2503      	movs	r5, #3
 8005a86:	4eb6      	ldr	r6, [pc, #728]	; (8005d60 <_dtoa_r+0x648>)
 8005a88:	b957      	cbnz	r7, 8005aa0 <_dtoa_r+0x388>
 8005a8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a8e:	ec53 2b18 	vmov	r2, r3, d8
 8005a92:	f7fa fefb 	bl	800088c <__aeabi_ddiv>
 8005a96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a9a:	e029      	b.n	8005af0 <_dtoa_r+0x3d8>
 8005a9c:	2502      	movs	r5, #2
 8005a9e:	e7f2      	b.n	8005a86 <_dtoa_r+0x36e>
 8005aa0:	07f9      	lsls	r1, r7, #31
 8005aa2:	d508      	bpl.n	8005ab6 <_dtoa_r+0x39e>
 8005aa4:	ec51 0b18 	vmov	r0, r1, d8
 8005aa8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005aac:	f7fa fdc4 	bl	8000638 <__aeabi_dmul>
 8005ab0:	ec41 0b18 	vmov	d8, r0, r1
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	107f      	asrs	r7, r7, #1
 8005ab8:	3608      	adds	r6, #8
 8005aba:	e7e5      	b.n	8005a88 <_dtoa_r+0x370>
 8005abc:	f000 80a6 	beq.w	8005c0c <_dtoa_r+0x4f4>
 8005ac0:	f1ca 0600 	rsb	r6, sl, #0
 8005ac4:	4ba5      	ldr	r3, [pc, #660]	; (8005d5c <_dtoa_r+0x644>)
 8005ac6:	4fa6      	ldr	r7, [pc, #664]	; (8005d60 <_dtoa_r+0x648>)
 8005ac8:	f006 020f 	and.w	r2, r6, #15
 8005acc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ad8:	f7fa fdae 	bl	8000638 <__aeabi_dmul>
 8005adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ae0:	1136      	asrs	r6, r6, #4
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2502      	movs	r5, #2
 8005ae6:	2e00      	cmp	r6, #0
 8005ae8:	f040 8085 	bne.w	8005bf6 <_dtoa_r+0x4de>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1d2      	bne.n	8005a96 <_dtoa_r+0x37e>
 8005af0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 808c 	beq.w	8005c10 <_dtoa_r+0x4f8>
 8005af8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005afc:	4b99      	ldr	r3, [pc, #612]	; (8005d64 <_dtoa_r+0x64c>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	4630      	mov	r0, r6
 8005b02:	4639      	mov	r1, r7
 8005b04:	f7fb f80a 	bl	8000b1c <__aeabi_dcmplt>
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	f000 8081 	beq.w	8005c10 <_dtoa_r+0x4f8>
 8005b0e:	9b01      	ldr	r3, [sp, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d07d      	beq.n	8005c10 <_dtoa_r+0x4f8>
 8005b14:	f1b9 0f00 	cmp.w	r9, #0
 8005b18:	dd3c      	ble.n	8005b94 <_dtoa_r+0x47c>
 8005b1a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b1e:	9307      	str	r3, [sp, #28]
 8005b20:	2200      	movs	r2, #0
 8005b22:	4b91      	ldr	r3, [pc, #580]	; (8005d68 <_dtoa_r+0x650>)
 8005b24:	4630      	mov	r0, r6
 8005b26:	4639      	mov	r1, r7
 8005b28:	f7fa fd86 	bl	8000638 <__aeabi_dmul>
 8005b2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b30:	3501      	adds	r5, #1
 8005b32:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005b36:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f7fa fd12 	bl	8000564 <__aeabi_i2d>
 8005b40:	4632      	mov	r2, r6
 8005b42:	463b      	mov	r3, r7
 8005b44:	f7fa fd78 	bl	8000638 <__aeabi_dmul>
 8005b48:	4b88      	ldr	r3, [pc, #544]	; (8005d6c <_dtoa_r+0x654>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f7fa fbbe 	bl	80002cc <__adddf3>
 8005b50:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b58:	9303      	str	r3, [sp, #12]
 8005b5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d15c      	bne.n	8005c1a <_dtoa_r+0x502>
 8005b60:	4b83      	ldr	r3, [pc, #524]	; (8005d70 <_dtoa_r+0x658>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	4630      	mov	r0, r6
 8005b66:	4639      	mov	r1, r7
 8005b68:	f7fa fbae 	bl	80002c8 <__aeabi_dsub>
 8005b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b70:	4606      	mov	r6, r0
 8005b72:	460f      	mov	r7, r1
 8005b74:	f7fa fff0 	bl	8000b58 <__aeabi_dcmpgt>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	f040 8296 	bne.w	80060aa <_dtoa_r+0x992>
 8005b7e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005b82:	4630      	mov	r0, r6
 8005b84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b88:	4639      	mov	r1, r7
 8005b8a:	f7fa ffc7 	bl	8000b1c <__aeabi_dcmplt>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	f040 8288 	bne.w	80060a4 <_dtoa_r+0x98c>
 8005b94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005b9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f2c0 8158 	blt.w	8005e54 <_dtoa_r+0x73c>
 8005ba4:	f1ba 0f0e 	cmp.w	sl, #14
 8005ba8:	f300 8154 	bgt.w	8005e54 <_dtoa_r+0x73c>
 8005bac:	4b6b      	ldr	r3, [pc, #428]	; (8005d5c <_dtoa_r+0x644>)
 8005bae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005bb2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f280 80e3 	bge.w	8005d84 <_dtoa_r+0x66c>
 8005bbe:	9b01      	ldr	r3, [sp, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f300 80df 	bgt.w	8005d84 <_dtoa_r+0x66c>
 8005bc6:	f040 826d 	bne.w	80060a4 <_dtoa_r+0x98c>
 8005bca:	4b69      	ldr	r3, [pc, #420]	; (8005d70 <_dtoa_r+0x658>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4640      	mov	r0, r8
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	f7fa fd31 	bl	8000638 <__aeabi_dmul>
 8005bd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bda:	f7fa ffb3 	bl	8000b44 <__aeabi_dcmpge>
 8005bde:	9e01      	ldr	r6, [sp, #4]
 8005be0:	4637      	mov	r7, r6
 8005be2:	2800      	cmp	r0, #0
 8005be4:	f040 8243 	bne.w	800606e <_dtoa_r+0x956>
 8005be8:	9d00      	ldr	r5, [sp, #0]
 8005bea:	2331      	movs	r3, #49	; 0x31
 8005bec:	f805 3b01 	strb.w	r3, [r5], #1
 8005bf0:	f10a 0a01 	add.w	sl, sl, #1
 8005bf4:	e23f      	b.n	8006076 <_dtoa_r+0x95e>
 8005bf6:	07f2      	lsls	r2, r6, #31
 8005bf8:	d505      	bpl.n	8005c06 <_dtoa_r+0x4ee>
 8005bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bfe:	f7fa fd1b 	bl	8000638 <__aeabi_dmul>
 8005c02:	3501      	adds	r5, #1
 8005c04:	2301      	movs	r3, #1
 8005c06:	1076      	asrs	r6, r6, #1
 8005c08:	3708      	adds	r7, #8
 8005c0a:	e76c      	b.n	8005ae6 <_dtoa_r+0x3ce>
 8005c0c:	2502      	movs	r5, #2
 8005c0e:	e76f      	b.n	8005af0 <_dtoa_r+0x3d8>
 8005c10:	9b01      	ldr	r3, [sp, #4]
 8005c12:	f8cd a01c 	str.w	sl, [sp, #28]
 8005c16:	930c      	str	r3, [sp, #48]	; 0x30
 8005c18:	e78d      	b.n	8005b36 <_dtoa_r+0x41e>
 8005c1a:	9900      	ldr	r1, [sp, #0]
 8005c1c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005c1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c20:	4b4e      	ldr	r3, [pc, #312]	; (8005d5c <_dtoa_r+0x644>)
 8005c22:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c26:	4401      	add	r1, r0
 8005c28:	9102      	str	r1, [sp, #8]
 8005c2a:	9908      	ldr	r1, [sp, #32]
 8005c2c:	eeb0 8a47 	vmov.f32	s16, s14
 8005c30:	eef0 8a67 	vmov.f32	s17, s15
 8005c34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	d045      	beq.n	8005ccc <_dtoa_r+0x5b4>
 8005c40:	494c      	ldr	r1, [pc, #304]	; (8005d74 <_dtoa_r+0x65c>)
 8005c42:	2000      	movs	r0, #0
 8005c44:	f7fa fe22 	bl	800088c <__aeabi_ddiv>
 8005c48:	ec53 2b18 	vmov	r2, r3, d8
 8005c4c:	f7fa fb3c 	bl	80002c8 <__aeabi_dsub>
 8005c50:	9d00      	ldr	r5, [sp, #0]
 8005c52:	ec41 0b18 	vmov	d8, r0, r1
 8005c56:	4639      	mov	r1, r7
 8005c58:	4630      	mov	r0, r6
 8005c5a:	f7fa ff9d 	bl	8000b98 <__aeabi_d2iz>
 8005c5e:	900c      	str	r0, [sp, #48]	; 0x30
 8005c60:	f7fa fc80 	bl	8000564 <__aeabi_i2d>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4630      	mov	r0, r6
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	f7fa fb2c 	bl	80002c8 <__aeabi_dsub>
 8005c70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c72:	3330      	adds	r3, #48	; 0x30
 8005c74:	f805 3b01 	strb.w	r3, [r5], #1
 8005c78:	ec53 2b18 	vmov	r2, r3, d8
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	460f      	mov	r7, r1
 8005c80:	f7fa ff4c 	bl	8000b1c <__aeabi_dcmplt>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	d165      	bne.n	8005d54 <_dtoa_r+0x63c>
 8005c88:	4632      	mov	r2, r6
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	4935      	ldr	r1, [pc, #212]	; (8005d64 <_dtoa_r+0x64c>)
 8005c8e:	2000      	movs	r0, #0
 8005c90:	f7fa fb1a 	bl	80002c8 <__aeabi_dsub>
 8005c94:	ec53 2b18 	vmov	r2, r3, d8
 8005c98:	f7fa ff40 	bl	8000b1c <__aeabi_dcmplt>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	f040 80b9 	bne.w	8005e14 <_dtoa_r+0x6fc>
 8005ca2:	9b02      	ldr	r3, [sp, #8]
 8005ca4:	429d      	cmp	r5, r3
 8005ca6:	f43f af75 	beq.w	8005b94 <_dtoa_r+0x47c>
 8005caa:	4b2f      	ldr	r3, [pc, #188]	; (8005d68 <_dtoa_r+0x650>)
 8005cac:	ec51 0b18 	vmov	r0, r1, d8
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f7fa fcc1 	bl	8000638 <__aeabi_dmul>
 8005cb6:	4b2c      	ldr	r3, [pc, #176]	; (8005d68 <_dtoa_r+0x650>)
 8005cb8:	ec41 0b18 	vmov	d8, r0, r1
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	4639      	mov	r1, r7
 8005cc2:	f7fa fcb9 	bl	8000638 <__aeabi_dmul>
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	460f      	mov	r7, r1
 8005cca:	e7c4      	b.n	8005c56 <_dtoa_r+0x53e>
 8005ccc:	ec51 0b17 	vmov	r0, r1, d7
 8005cd0:	f7fa fcb2 	bl	8000638 <__aeabi_dmul>
 8005cd4:	9b02      	ldr	r3, [sp, #8]
 8005cd6:	9d00      	ldr	r5, [sp, #0]
 8005cd8:	930c      	str	r3, [sp, #48]	; 0x30
 8005cda:	ec41 0b18 	vmov	d8, r0, r1
 8005cde:	4639      	mov	r1, r7
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	f7fa ff59 	bl	8000b98 <__aeabi_d2iz>
 8005ce6:	9011      	str	r0, [sp, #68]	; 0x44
 8005ce8:	f7fa fc3c 	bl	8000564 <__aeabi_i2d>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	4639      	mov	r1, r7
 8005cf4:	f7fa fae8 	bl	80002c8 <__aeabi_dsub>
 8005cf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cfa:	3330      	adds	r3, #48	; 0x30
 8005cfc:	f805 3b01 	strb.w	r3, [r5], #1
 8005d00:	9b02      	ldr	r3, [sp, #8]
 8005d02:	429d      	cmp	r5, r3
 8005d04:	4606      	mov	r6, r0
 8005d06:	460f      	mov	r7, r1
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	d134      	bne.n	8005d78 <_dtoa_r+0x660>
 8005d0e:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <_dtoa_r+0x65c>)
 8005d10:	ec51 0b18 	vmov	r0, r1, d8
 8005d14:	f7fa fada 	bl	80002cc <__adddf3>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	4639      	mov	r1, r7
 8005d20:	f7fa ff1a 	bl	8000b58 <__aeabi_dcmpgt>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	d175      	bne.n	8005e14 <_dtoa_r+0x6fc>
 8005d28:	ec53 2b18 	vmov	r2, r3, d8
 8005d2c:	4911      	ldr	r1, [pc, #68]	; (8005d74 <_dtoa_r+0x65c>)
 8005d2e:	2000      	movs	r0, #0
 8005d30:	f7fa faca 	bl	80002c8 <__aeabi_dsub>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4630      	mov	r0, r6
 8005d3a:	4639      	mov	r1, r7
 8005d3c:	f7fa feee 	bl	8000b1c <__aeabi_dcmplt>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	f43f af27 	beq.w	8005b94 <_dtoa_r+0x47c>
 8005d46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d48:	1e6b      	subs	r3, r5, #1
 8005d4a:	930c      	str	r3, [sp, #48]	; 0x30
 8005d4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d50:	2b30      	cmp	r3, #48	; 0x30
 8005d52:	d0f8      	beq.n	8005d46 <_dtoa_r+0x62e>
 8005d54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005d58:	e04a      	b.n	8005df0 <_dtoa_r+0x6d8>
 8005d5a:	bf00      	nop
 8005d5c:	08006e60 	.word	0x08006e60
 8005d60:	08006e38 	.word	0x08006e38
 8005d64:	3ff00000 	.word	0x3ff00000
 8005d68:	40240000 	.word	0x40240000
 8005d6c:	401c0000 	.word	0x401c0000
 8005d70:	40140000 	.word	0x40140000
 8005d74:	3fe00000 	.word	0x3fe00000
 8005d78:	4baf      	ldr	r3, [pc, #700]	; (8006038 <_dtoa_r+0x920>)
 8005d7a:	f7fa fc5d 	bl	8000638 <__aeabi_dmul>
 8005d7e:	4606      	mov	r6, r0
 8005d80:	460f      	mov	r7, r1
 8005d82:	e7ac      	b.n	8005cde <_dtoa_r+0x5c6>
 8005d84:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d88:	9d00      	ldr	r5, [sp, #0]
 8005d8a:	4642      	mov	r2, r8
 8005d8c:	464b      	mov	r3, r9
 8005d8e:	4630      	mov	r0, r6
 8005d90:	4639      	mov	r1, r7
 8005d92:	f7fa fd7b 	bl	800088c <__aeabi_ddiv>
 8005d96:	f7fa feff 	bl	8000b98 <__aeabi_d2iz>
 8005d9a:	9002      	str	r0, [sp, #8]
 8005d9c:	f7fa fbe2 	bl	8000564 <__aeabi_i2d>
 8005da0:	4642      	mov	r2, r8
 8005da2:	464b      	mov	r3, r9
 8005da4:	f7fa fc48 	bl	8000638 <__aeabi_dmul>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4630      	mov	r0, r6
 8005dae:	4639      	mov	r1, r7
 8005db0:	f7fa fa8a 	bl	80002c8 <__aeabi_dsub>
 8005db4:	9e02      	ldr	r6, [sp, #8]
 8005db6:	9f01      	ldr	r7, [sp, #4]
 8005db8:	3630      	adds	r6, #48	; 0x30
 8005dba:	f805 6b01 	strb.w	r6, [r5], #1
 8005dbe:	9e00      	ldr	r6, [sp, #0]
 8005dc0:	1bae      	subs	r6, r5, r6
 8005dc2:	42b7      	cmp	r7, r6
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	d137      	bne.n	8005e3a <_dtoa_r+0x722>
 8005dca:	f7fa fa7f 	bl	80002cc <__adddf3>
 8005dce:	4642      	mov	r2, r8
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	460f      	mov	r7, r1
 8005dd6:	f7fa febf 	bl	8000b58 <__aeabi_dcmpgt>
 8005dda:	b9c8      	cbnz	r0, 8005e10 <_dtoa_r+0x6f8>
 8005ddc:	4642      	mov	r2, r8
 8005dde:	464b      	mov	r3, r9
 8005de0:	4630      	mov	r0, r6
 8005de2:	4639      	mov	r1, r7
 8005de4:	f7fa fe90 	bl	8000b08 <__aeabi_dcmpeq>
 8005de8:	b110      	cbz	r0, 8005df0 <_dtoa_r+0x6d8>
 8005dea:	9b02      	ldr	r3, [sp, #8]
 8005dec:	07d9      	lsls	r1, r3, #31
 8005dee:	d40f      	bmi.n	8005e10 <_dtoa_r+0x6f8>
 8005df0:	4620      	mov	r0, r4
 8005df2:	4659      	mov	r1, fp
 8005df4:	f000 fb00 	bl	80063f8 <_Bfree>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	702b      	strb	r3, [r5, #0]
 8005dfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dfe:	f10a 0001 	add.w	r0, sl, #1
 8005e02:	6018      	str	r0, [r3, #0]
 8005e04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f43f acd8 	beq.w	80057bc <_dtoa_r+0xa4>
 8005e0c:	601d      	str	r5, [r3, #0]
 8005e0e:	e4d5      	b.n	80057bc <_dtoa_r+0xa4>
 8005e10:	f8cd a01c 	str.w	sl, [sp, #28]
 8005e14:	462b      	mov	r3, r5
 8005e16:	461d      	mov	r5, r3
 8005e18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e1c:	2a39      	cmp	r2, #57	; 0x39
 8005e1e:	d108      	bne.n	8005e32 <_dtoa_r+0x71a>
 8005e20:	9a00      	ldr	r2, [sp, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d1f7      	bne.n	8005e16 <_dtoa_r+0x6fe>
 8005e26:	9a07      	ldr	r2, [sp, #28]
 8005e28:	9900      	ldr	r1, [sp, #0]
 8005e2a:	3201      	adds	r2, #1
 8005e2c:	9207      	str	r2, [sp, #28]
 8005e2e:	2230      	movs	r2, #48	; 0x30
 8005e30:	700a      	strb	r2, [r1, #0]
 8005e32:	781a      	ldrb	r2, [r3, #0]
 8005e34:	3201      	adds	r2, #1
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	e78c      	b.n	8005d54 <_dtoa_r+0x63c>
 8005e3a:	4b7f      	ldr	r3, [pc, #508]	; (8006038 <_dtoa_r+0x920>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f7fa fbfb 	bl	8000638 <__aeabi_dmul>
 8005e42:	2200      	movs	r2, #0
 8005e44:	2300      	movs	r3, #0
 8005e46:	4606      	mov	r6, r0
 8005e48:	460f      	mov	r7, r1
 8005e4a:	f7fa fe5d 	bl	8000b08 <__aeabi_dcmpeq>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d09b      	beq.n	8005d8a <_dtoa_r+0x672>
 8005e52:	e7cd      	b.n	8005df0 <_dtoa_r+0x6d8>
 8005e54:	9a08      	ldr	r2, [sp, #32]
 8005e56:	2a00      	cmp	r2, #0
 8005e58:	f000 80c4 	beq.w	8005fe4 <_dtoa_r+0x8cc>
 8005e5c:	9a05      	ldr	r2, [sp, #20]
 8005e5e:	2a01      	cmp	r2, #1
 8005e60:	f300 80a8 	bgt.w	8005fb4 <_dtoa_r+0x89c>
 8005e64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e66:	2a00      	cmp	r2, #0
 8005e68:	f000 80a0 	beq.w	8005fac <_dtoa_r+0x894>
 8005e6c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e70:	9e06      	ldr	r6, [sp, #24]
 8005e72:	4645      	mov	r5, r8
 8005e74:	9a04      	ldr	r2, [sp, #16]
 8005e76:	2101      	movs	r1, #1
 8005e78:	441a      	add	r2, r3
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	4498      	add	r8, r3
 8005e7e:	9204      	str	r2, [sp, #16]
 8005e80:	f000 fb76 	bl	8006570 <__i2b>
 8005e84:	4607      	mov	r7, r0
 8005e86:	2d00      	cmp	r5, #0
 8005e88:	dd0b      	ble.n	8005ea2 <_dtoa_r+0x78a>
 8005e8a:	9b04      	ldr	r3, [sp, #16]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	dd08      	ble.n	8005ea2 <_dtoa_r+0x78a>
 8005e90:	42ab      	cmp	r3, r5
 8005e92:	9a04      	ldr	r2, [sp, #16]
 8005e94:	bfa8      	it	ge
 8005e96:	462b      	movge	r3, r5
 8005e98:	eba8 0803 	sub.w	r8, r8, r3
 8005e9c:	1aed      	subs	r5, r5, r3
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	9304      	str	r3, [sp, #16]
 8005ea2:	9b06      	ldr	r3, [sp, #24]
 8005ea4:	b1fb      	cbz	r3, 8005ee6 <_dtoa_r+0x7ce>
 8005ea6:	9b08      	ldr	r3, [sp, #32]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 809f 	beq.w	8005fec <_dtoa_r+0x8d4>
 8005eae:	2e00      	cmp	r6, #0
 8005eb0:	dd11      	ble.n	8005ed6 <_dtoa_r+0x7be>
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	4632      	mov	r2, r6
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 fc16 	bl	80066e8 <__pow5mult>
 8005ebc:	465a      	mov	r2, fp
 8005ebe:	4601      	mov	r1, r0
 8005ec0:	4607      	mov	r7, r0
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f000 fb6a 	bl	800659c <__multiply>
 8005ec8:	4659      	mov	r1, fp
 8005eca:	9007      	str	r0, [sp, #28]
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f000 fa93 	bl	80063f8 <_Bfree>
 8005ed2:	9b07      	ldr	r3, [sp, #28]
 8005ed4:	469b      	mov	fp, r3
 8005ed6:	9b06      	ldr	r3, [sp, #24]
 8005ed8:	1b9a      	subs	r2, r3, r6
 8005eda:	d004      	beq.n	8005ee6 <_dtoa_r+0x7ce>
 8005edc:	4659      	mov	r1, fp
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f000 fc02 	bl	80066e8 <__pow5mult>
 8005ee4:	4683      	mov	fp, r0
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f000 fb41 	bl	8006570 <__i2b>
 8005eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	4606      	mov	r6, r0
 8005ef4:	dd7c      	ble.n	8005ff0 <_dtoa_r+0x8d8>
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	4601      	mov	r1, r0
 8005efa:	4620      	mov	r0, r4
 8005efc:	f000 fbf4 	bl	80066e8 <__pow5mult>
 8005f00:	9b05      	ldr	r3, [sp, #20]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	4606      	mov	r6, r0
 8005f06:	dd76      	ble.n	8005ff6 <_dtoa_r+0x8de>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	9306      	str	r3, [sp, #24]
 8005f0c:	6933      	ldr	r3, [r6, #16]
 8005f0e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f12:	6918      	ldr	r0, [r3, #16]
 8005f14:	f000 fadc 	bl	80064d0 <__hi0bits>
 8005f18:	f1c0 0020 	rsb	r0, r0, #32
 8005f1c:	9b04      	ldr	r3, [sp, #16]
 8005f1e:	4418      	add	r0, r3
 8005f20:	f010 001f 	ands.w	r0, r0, #31
 8005f24:	f000 8086 	beq.w	8006034 <_dtoa_r+0x91c>
 8005f28:	f1c0 0320 	rsb	r3, r0, #32
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	dd7f      	ble.n	8006030 <_dtoa_r+0x918>
 8005f30:	f1c0 001c 	rsb	r0, r0, #28
 8005f34:	9b04      	ldr	r3, [sp, #16]
 8005f36:	4403      	add	r3, r0
 8005f38:	4480      	add	r8, r0
 8005f3a:	4405      	add	r5, r0
 8005f3c:	9304      	str	r3, [sp, #16]
 8005f3e:	f1b8 0f00 	cmp.w	r8, #0
 8005f42:	dd05      	ble.n	8005f50 <_dtoa_r+0x838>
 8005f44:	4659      	mov	r1, fp
 8005f46:	4642      	mov	r2, r8
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f000 fc27 	bl	800679c <__lshift>
 8005f4e:	4683      	mov	fp, r0
 8005f50:	9b04      	ldr	r3, [sp, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	dd05      	ble.n	8005f62 <_dtoa_r+0x84a>
 8005f56:	4631      	mov	r1, r6
 8005f58:	461a      	mov	r2, r3
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f000 fc1e 	bl	800679c <__lshift>
 8005f60:	4606      	mov	r6, r0
 8005f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d069      	beq.n	800603c <_dtoa_r+0x924>
 8005f68:	4631      	mov	r1, r6
 8005f6a:	4658      	mov	r0, fp
 8005f6c:	f000 fc82 	bl	8006874 <__mcmp>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	da63      	bge.n	800603c <_dtoa_r+0x924>
 8005f74:	2300      	movs	r3, #0
 8005f76:	4659      	mov	r1, fp
 8005f78:	220a      	movs	r2, #10
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f000 fa5e 	bl	800643c <__multadd>
 8005f80:	9b08      	ldr	r3, [sp, #32]
 8005f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f86:	4683      	mov	fp, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 818f 	beq.w	80062ac <_dtoa_r+0xb94>
 8005f8e:	4639      	mov	r1, r7
 8005f90:	2300      	movs	r3, #0
 8005f92:	220a      	movs	r2, #10
 8005f94:	4620      	mov	r0, r4
 8005f96:	f000 fa51 	bl	800643c <__multadd>
 8005f9a:	f1b9 0f00 	cmp.w	r9, #0
 8005f9e:	4607      	mov	r7, r0
 8005fa0:	f300 808e 	bgt.w	80060c0 <_dtoa_r+0x9a8>
 8005fa4:	9b05      	ldr	r3, [sp, #20]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	dc50      	bgt.n	800604c <_dtoa_r+0x934>
 8005faa:	e089      	b.n	80060c0 <_dtoa_r+0x9a8>
 8005fac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005fb2:	e75d      	b.n	8005e70 <_dtoa_r+0x758>
 8005fb4:	9b01      	ldr	r3, [sp, #4]
 8005fb6:	1e5e      	subs	r6, r3, #1
 8005fb8:	9b06      	ldr	r3, [sp, #24]
 8005fba:	42b3      	cmp	r3, r6
 8005fbc:	bfbf      	itttt	lt
 8005fbe:	9b06      	ldrlt	r3, [sp, #24]
 8005fc0:	9606      	strlt	r6, [sp, #24]
 8005fc2:	1af2      	sublt	r2, r6, r3
 8005fc4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005fc6:	bfb6      	itet	lt
 8005fc8:	189b      	addlt	r3, r3, r2
 8005fca:	1b9e      	subge	r6, r3, r6
 8005fcc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005fce:	9b01      	ldr	r3, [sp, #4]
 8005fd0:	bfb8      	it	lt
 8005fd2:	2600      	movlt	r6, #0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	bfb5      	itete	lt
 8005fd8:	eba8 0503 	sublt.w	r5, r8, r3
 8005fdc:	9b01      	ldrge	r3, [sp, #4]
 8005fde:	2300      	movlt	r3, #0
 8005fe0:	4645      	movge	r5, r8
 8005fe2:	e747      	b.n	8005e74 <_dtoa_r+0x75c>
 8005fe4:	9e06      	ldr	r6, [sp, #24]
 8005fe6:	9f08      	ldr	r7, [sp, #32]
 8005fe8:	4645      	mov	r5, r8
 8005fea:	e74c      	b.n	8005e86 <_dtoa_r+0x76e>
 8005fec:	9a06      	ldr	r2, [sp, #24]
 8005fee:	e775      	b.n	8005edc <_dtoa_r+0x7c4>
 8005ff0:	9b05      	ldr	r3, [sp, #20]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	dc18      	bgt.n	8006028 <_dtoa_r+0x910>
 8005ff6:	9b02      	ldr	r3, [sp, #8]
 8005ff8:	b9b3      	cbnz	r3, 8006028 <_dtoa_r+0x910>
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006000:	b9a3      	cbnz	r3, 800602c <_dtoa_r+0x914>
 8006002:	9b03      	ldr	r3, [sp, #12]
 8006004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006008:	0d1b      	lsrs	r3, r3, #20
 800600a:	051b      	lsls	r3, r3, #20
 800600c:	b12b      	cbz	r3, 800601a <_dtoa_r+0x902>
 800600e:	9b04      	ldr	r3, [sp, #16]
 8006010:	3301      	adds	r3, #1
 8006012:	9304      	str	r3, [sp, #16]
 8006014:	f108 0801 	add.w	r8, r8, #1
 8006018:	2301      	movs	r3, #1
 800601a:	9306      	str	r3, [sp, #24]
 800601c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800601e:	2b00      	cmp	r3, #0
 8006020:	f47f af74 	bne.w	8005f0c <_dtoa_r+0x7f4>
 8006024:	2001      	movs	r0, #1
 8006026:	e779      	b.n	8005f1c <_dtoa_r+0x804>
 8006028:	2300      	movs	r3, #0
 800602a:	e7f6      	b.n	800601a <_dtoa_r+0x902>
 800602c:	9b02      	ldr	r3, [sp, #8]
 800602e:	e7f4      	b.n	800601a <_dtoa_r+0x902>
 8006030:	d085      	beq.n	8005f3e <_dtoa_r+0x826>
 8006032:	4618      	mov	r0, r3
 8006034:	301c      	adds	r0, #28
 8006036:	e77d      	b.n	8005f34 <_dtoa_r+0x81c>
 8006038:	40240000 	.word	0x40240000
 800603c:	9b01      	ldr	r3, [sp, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	dc38      	bgt.n	80060b4 <_dtoa_r+0x99c>
 8006042:	9b05      	ldr	r3, [sp, #20]
 8006044:	2b02      	cmp	r3, #2
 8006046:	dd35      	ble.n	80060b4 <_dtoa_r+0x99c>
 8006048:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800604c:	f1b9 0f00 	cmp.w	r9, #0
 8006050:	d10d      	bne.n	800606e <_dtoa_r+0x956>
 8006052:	4631      	mov	r1, r6
 8006054:	464b      	mov	r3, r9
 8006056:	2205      	movs	r2, #5
 8006058:	4620      	mov	r0, r4
 800605a:	f000 f9ef 	bl	800643c <__multadd>
 800605e:	4601      	mov	r1, r0
 8006060:	4606      	mov	r6, r0
 8006062:	4658      	mov	r0, fp
 8006064:	f000 fc06 	bl	8006874 <__mcmp>
 8006068:	2800      	cmp	r0, #0
 800606a:	f73f adbd 	bgt.w	8005be8 <_dtoa_r+0x4d0>
 800606e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006070:	9d00      	ldr	r5, [sp, #0]
 8006072:	ea6f 0a03 	mvn.w	sl, r3
 8006076:	f04f 0800 	mov.w	r8, #0
 800607a:	4631      	mov	r1, r6
 800607c:	4620      	mov	r0, r4
 800607e:	f000 f9bb 	bl	80063f8 <_Bfree>
 8006082:	2f00      	cmp	r7, #0
 8006084:	f43f aeb4 	beq.w	8005df0 <_dtoa_r+0x6d8>
 8006088:	f1b8 0f00 	cmp.w	r8, #0
 800608c:	d005      	beq.n	800609a <_dtoa_r+0x982>
 800608e:	45b8      	cmp	r8, r7
 8006090:	d003      	beq.n	800609a <_dtoa_r+0x982>
 8006092:	4641      	mov	r1, r8
 8006094:	4620      	mov	r0, r4
 8006096:	f000 f9af 	bl	80063f8 <_Bfree>
 800609a:	4639      	mov	r1, r7
 800609c:	4620      	mov	r0, r4
 800609e:	f000 f9ab 	bl	80063f8 <_Bfree>
 80060a2:	e6a5      	b.n	8005df0 <_dtoa_r+0x6d8>
 80060a4:	2600      	movs	r6, #0
 80060a6:	4637      	mov	r7, r6
 80060a8:	e7e1      	b.n	800606e <_dtoa_r+0x956>
 80060aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80060ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80060b0:	4637      	mov	r7, r6
 80060b2:	e599      	b.n	8005be8 <_dtoa_r+0x4d0>
 80060b4:	9b08      	ldr	r3, [sp, #32]
 80060b6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80fd 	beq.w	80062ba <_dtoa_r+0xba2>
 80060c0:	2d00      	cmp	r5, #0
 80060c2:	dd05      	ble.n	80060d0 <_dtoa_r+0x9b8>
 80060c4:	4639      	mov	r1, r7
 80060c6:	462a      	mov	r2, r5
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 fb67 	bl	800679c <__lshift>
 80060ce:	4607      	mov	r7, r0
 80060d0:	9b06      	ldr	r3, [sp, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d05c      	beq.n	8006190 <_dtoa_r+0xa78>
 80060d6:	6879      	ldr	r1, [r7, #4]
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 f94d 	bl	8006378 <_Balloc>
 80060de:	4605      	mov	r5, r0
 80060e0:	b928      	cbnz	r0, 80060ee <_dtoa_r+0x9d6>
 80060e2:	4b80      	ldr	r3, [pc, #512]	; (80062e4 <_dtoa_r+0xbcc>)
 80060e4:	4602      	mov	r2, r0
 80060e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80060ea:	f7ff bb2e 	b.w	800574a <_dtoa_r+0x32>
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	3202      	adds	r2, #2
 80060f2:	0092      	lsls	r2, r2, #2
 80060f4:	f107 010c 	add.w	r1, r7, #12
 80060f8:	300c      	adds	r0, #12
 80060fa:	f7fe faad 	bl	8004658 <memcpy>
 80060fe:	2201      	movs	r2, #1
 8006100:	4629      	mov	r1, r5
 8006102:	4620      	mov	r0, r4
 8006104:	f000 fb4a 	bl	800679c <__lshift>
 8006108:	9b00      	ldr	r3, [sp, #0]
 800610a:	3301      	adds	r3, #1
 800610c:	9301      	str	r3, [sp, #4]
 800610e:	9b00      	ldr	r3, [sp, #0]
 8006110:	444b      	add	r3, r9
 8006112:	9307      	str	r3, [sp, #28]
 8006114:	9b02      	ldr	r3, [sp, #8]
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	46b8      	mov	r8, r7
 800611c:	9306      	str	r3, [sp, #24]
 800611e:	4607      	mov	r7, r0
 8006120:	9b01      	ldr	r3, [sp, #4]
 8006122:	4631      	mov	r1, r6
 8006124:	3b01      	subs	r3, #1
 8006126:	4658      	mov	r0, fp
 8006128:	9302      	str	r3, [sp, #8]
 800612a:	f7ff fa67 	bl	80055fc <quorem>
 800612e:	4603      	mov	r3, r0
 8006130:	3330      	adds	r3, #48	; 0x30
 8006132:	9004      	str	r0, [sp, #16]
 8006134:	4641      	mov	r1, r8
 8006136:	4658      	mov	r0, fp
 8006138:	9308      	str	r3, [sp, #32]
 800613a:	f000 fb9b 	bl	8006874 <__mcmp>
 800613e:	463a      	mov	r2, r7
 8006140:	4681      	mov	r9, r0
 8006142:	4631      	mov	r1, r6
 8006144:	4620      	mov	r0, r4
 8006146:	f000 fbb1 	bl	80068ac <__mdiff>
 800614a:	68c2      	ldr	r2, [r0, #12]
 800614c:	9b08      	ldr	r3, [sp, #32]
 800614e:	4605      	mov	r5, r0
 8006150:	bb02      	cbnz	r2, 8006194 <_dtoa_r+0xa7c>
 8006152:	4601      	mov	r1, r0
 8006154:	4658      	mov	r0, fp
 8006156:	f000 fb8d 	bl	8006874 <__mcmp>
 800615a:	9b08      	ldr	r3, [sp, #32]
 800615c:	4602      	mov	r2, r0
 800615e:	4629      	mov	r1, r5
 8006160:	4620      	mov	r0, r4
 8006162:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006166:	f000 f947 	bl	80063f8 <_Bfree>
 800616a:	9b05      	ldr	r3, [sp, #20]
 800616c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800616e:	9d01      	ldr	r5, [sp, #4]
 8006170:	ea43 0102 	orr.w	r1, r3, r2
 8006174:	9b06      	ldr	r3, [sp, #24]
 8006176:	430b      	orrs	r3, r1
 8006178:	9b08      	ldr	r3, [sp, #32]
 800617a:	d10d      	bne.n	8006198 <_dtoa_r+0xa80>
 800617c:	2b39      	cmp	r3, #57	; 0x39
 800617e:	d029      	beq.n	80061d4 <_dtoa_r+0xabc>
 8006180:	f1b9 0f00 	cmp.w	r9, #0
 8006184:	dd01      	ble.n	800618a <_dtoa_r+0xa72>
 8006186:	9b04      	ldr	r3, [sp, #16]
 8006188:	3331      	adds	r3, #49	; 0x31
 800618a:	9a02      	ldr	r2, [sp, #8]
 800618c:	7013      	strb	r3, [r2, #0]
 800618e:	e774      	b.n	800607a <_dtoa_r+0x962>
 8006190:	4638      	mov	r0, r7
 8006192:	e7b9      	b.n	8006108 <_dtoa_r+0x9f0>
 8006194:	2201      	movs	r2, #1
 8006196:	e7e2      	b.n	800615e <_dtoa_r+0xa46>
 8006198:	f1b9 0f00 	cmp.w	r9, #0
 800619c:	db06      	blt.n	80061ac <_dtoa_r+0xa94>
 800619e:	9905      	ldr	r1, [sp, #20]
 80061a0:	ea41 0909 	orr.w	r9, r1, r9
 80061a4:	9906      	ldr	r1, [sp, #24]
 80061a6:	ea59 0101 	orrs.w	r1, r9, r1
 80061aa:	d120      	bne.n	80061ee <_dtoa_r+0xad6>
 80061ac:	2a00      	cmp	r2, #0
 80061ae:	ddec      	ble.n	800618a <_dtoa_r+0xa72>
 80061b0:	4659      	mov	r1, fp
 80061b2:	2201      	movs	r2, #1
 80061b4:	4620      	mov	r0, r4
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	f000 faf0 	bl	800679c <__lshift>
 80061bc:	4631      	mov	r1, r6
 80061be:	4683      	mov	fp, r0
 80061c0:	f000 fb58 	bl	8006874 <__mcmp>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	9b01      	ldr	r3, [sp, #4]
 80061c8:	dc02      	bgt.n	80061d0 <_dtoa_r+0xab8>
 80061ca:	d1de      	bne.n	800618a <_dtoa_r+0xa72>
 80061cc:	07da      	lsls	r2, r3, #31
 80061ce:	d5dc      	bpl.n	800618a <_dtoa_r+0xa72>
 80061d0:	2b39      	cmp	r3, #57	; 0x39
 80061d2:	d1d8      	bne.n	8006186 <_dtoa_r+0xa6e>
 80061d4:	9a02      	ldr	r2, [sp, #8]
 80061d6:	2339      	movs	r3, #57	; 0x39
 80061d8:	7013      	strb	r3, [r2, #0]
 80061da:	462b      	mov	r3, r5
 80061dc:	461d      	mov	r5, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80061e4:	2a39      	cmp	r2, #57	; 0x39
 80061e6:	d050      	beq.n	800628a <_dtoa_r+0xb72>
 80061e8:	3201      	adds	r2, #1
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	e745      	b.n	800607a <_dtoa_r+0x962>
 80061ee:	2a00      	cmp	r2, #0
 80061f0:	dd03      	ble.n	80061fa <_dtoa_r+0xae2>
 80061f2:	2b39      	cmp	r3, #57	; 0x39
 80061f4:	d0ee      	beq.n	80061d4 <_dtoa_r+0xabc>
 80061f6:	3301      	adds	r3, #1
 80061f8:	e7c7      	b.n	800618a <_dtoa_r+0xa72>
 80061fa:	9a01      	ldr	r2, [sp, #4]
 80061fc:	9907      	ldr	r1, [sp, #28]
 80061fe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006202:	428a      	cmp	r2, r1
 8006204:	d02a      	beq.n	800625c <_dtoa_r+0xb44>
 8006206:	4659      	mov	r1, fp
 8006208:	2300      	movs	r3, #0
 800620a:	220a      	movs	r2, #10
 800620c:	4620      	mov	r0, r4
 800620e:	f000 f915 	bl	800643c <__multadd>
 8006212:	45b8      	cmp	r8, r7
 8006214:	4683      	mov	fp, r0
 8006216:	f04f 0300 	mov.w	r3, #0
 800621a:	f04f 020a 	mov.w	r2, #10
 800621e:	4641      	mov	r1, r8
 8006220:	4620      	mov	r0, r4
 8006222:	d107      	bne.n	8006234 <_dtoa_r+0xb1c>
 8006224:	f000 f90a 	bl	800643c <__multadd>
 8006228:	4680      	mov	r8, r0
 800622a:	4607      	mov	r7, r0
 800622c:	9b01      	ldr	r3, [sp, #4]
 800622e:	3301      	adds	r3, #1
 8006230:	9301      	str	r3, [sp, #4]
 8006232:	e775      	b.n	8006120 <_dtoa_r+0xa08>
 8006234:	f000 f902 	bl	800643c <__multadd>
 8006238:	4639      	mov	r1, r7
 800623a:	4680      	mov	r8, r0
 800623c:	2300      	movs	r3, #0
 800623e:	220a      	movs	r2, #10
 8006240:	4620      	mov	r0, r4
 8006242:	f000 f8fb 	bl	800643c <__multadd>
 8006246:	4607      	mov	r7, r0
 8006248:	e7f0      	b.n	800622c <_dtoa_r+0xb14>
 800624a:	f1b9 0f00 	cmp.w	r9, #0
 800624e:	9a00      	ldr	r2, [sp, #0]
 8006250:	bfcc      	ite	gt
 8006252:	464d      	movgt	r5, r9
 8006254:	2501      	movle	r5, #1
 8006256:	4415      	add	r5, r2
 8006258:	f04f 0800 	mov.w	r8, #0
 800625c:	4659      	mov	r1, fp
 800625e:	2201      	movs	r2, #1
 8006260:	4620      	mov	r0, r4
 8006262:	9301      	str	r3, [sp, #4]
 8006264:	f000 fa9a 	bl	800679c <__lshift>
 8006268:	4631      	mov	r1, r6
 800626a:	4683      	mov	fp, r0
 800626c:	f000 fb02 	bl	8006874 <__mcmp>
 8006270:	2800      	cmp	r0, #0
 8006272:	dcb2      	bgt.n	80061da <_dtoa_r+0xac2>
 8006274:	d102      	bne.n	800627c <_dtoa_r+0xb64>
 8006276:	9b01      	ldr	r3, [sp, #4]
 8006278:	07db      	lsls	r3, r3, #31
 800627a:	d4ae      	bmi.n	80061da <_dtoa_r+0xac2>
 800627c:	462b      	mov	r3, r5
 800627e:	461d      	mov	r5, r3
 8006280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006284:	2a30      	cmp	r2, #48	; 0x30
 8006286:	d0fa      	beq.n	800627e <_dtoa_r+0xb66>
 8006288:	e6f7      	b.n	800607a <_dtoa_r+0x962>
 800628a:	9a00      	ldr	r2, [sp, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d1a5      	bne.n	80061dc <_dtoa_r+0xac4>
 8006290:	f10a 0a01 	add.w	sl, sl, #1
 8006294:	2331      	movs	r3, #49	; 0x31
 8006296:	e779      	b.n	800618c <_dtoa_r+0xa74>
 8006298:	4b13      	ldr	r3, [pc, #76]	; (80062e8 <_dtoa_r+0xbd0>)
 800629a:	f7ff baaf 	b.w	80057fc <_dtoa_r+0xe4>
 800629e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f47f aa86 	bne.w	80057b2 <_dtoa_r+0x9a>
 80062a6:	4b11      	ldr	r3, [pc, #68]	; (80062ec <_dtoa_r+0xbd4>)
 80062a8:	f7ff baa8 	b.w	80057fc <_dtoa_r+0xe4>
 80062ac:	f1b9 0f00 	cmp.w	r9, #0
 80062b0:	dc03      	bgt.n	80062ba <_dtoa_r+0xba2>
 80062b2:	9b05      	ldr	r3, [sp, #20]
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	f73f aec9 	bgt.w	800604c <_dtoa_r+0x934>
 80062ba:	9d00      	ldr	r5, [sp, #0]
 80062bc:	4631      	mov	r1, r6
 80062be:	4658      	mov	r0, fp
 80062c0:	f7ff f99c 	bl	80055fc <quorem>
 80062c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80062c8:	f805 3b01 	strb.w	r3, [r5], #1
 80062cc:	9a00      	ldr	r2, [sp, #0]
 80062ce:	1aaa      	subs	r2, r5, r2
 80062d0:	4591      	cmp	r9, r2
 80062d2:	ddba      	ble.n	800624a <_dtoa_r+0xb32>
 80062d4:	4659      	mov	r1, fp
 80062d6:	2300      	movs	r3, #0
 80062d8:	220a      	movs	r2, #10
 80062da:	4620      	mov	r0, r4
 80062dc:	f000 f8ae 	bl	800643c <__multadd>
 80062e0:	4683      	mov	fp, r0
 80062e2:	e7eb      	b.n	80062bc <_dtoa_r+0xba4>
 80062e4:	08006dc0 	.word	0x08006dc0
 80062e8:	08006d19 	.word	0x08006d19
 80062ec:	08006d3d 	.word	0x08006d3d

080062f0 <_fstat_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	4d07      	ldr	r5, [pc, #28]	; (8006310 <_fstat_r+0x20>)
 80062f4:	2300      	movs	r3, #0
 80062f6:	4604      	mov	r4, r0
 80062f8:	4608      	mov	r0, r1
 80062fa:	4611      	mov	r1, r2
 80062fc:	602b      	str	r3, [r5, #0]
 80062fe:	f7fb f8f6 	bl	80014ee <_fstat>
 8006302:	1c43      	adds	r3, r0, #1
 8006304:	d102      	bne.n	800630c <_fstat_r+0x1c>
 8006306:	682b      	ldr	r3, [r5, #0]
 8006308:	b103      	cbz	r3, 800630c <_fstat_r+0x1c>
 800630a:	6023      	str	r3, [r4, #0]
 800630c:	bd38      	pop	{r3, r4, r5, pc}
 800630e:	bf00      	nop
 8006310:	20000320 	.word	0x20000320

08006314 <_isatty_r>:
 8006314:	b538      	push	{r3, r4, r5, lr}
 8006316:	4d06      	ldr	r5, [pc, #24]	; (8006330 <_isatty_r+0x1c>)
 8006318:	2300      	movs	r3, #0
 800631a:	4604      	mov	r4, r0
 800631c:	4608      	mov	r0, r1
 800631e:	602b      	str	r3, [r5, #0]
 8006320:	f7fb f8f5 	bl	800150e <_isatty>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d102      	bne.n	800632e <_isatty_r+0x1a>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	b103      	cbz	r3, 800632e <_isatty_r+0x1a>
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	bd38      	pop	{r3, r4, r5, pc}
 8006330:	20000320 	.word	0x20000320

08006334 <_localeconv_r>:
 8006334:	4800      	ldr	r0, [pc, #0]	; (8006338 <_localeconv_r+0x4>)
 8006336:	4770      	bx	lr
 8006338:	20000160 	.word	0x20000160

0800633c <_lseek_r>:
 800633c:	b538      	push	{r3, r4, r5, lr}
 800633e:	4d07      	ldr	r5, [pc, #28]	; (800635c <_lseek_r+0x20>)
 8006340:	4604      	mov	r4, r0
 8006342:	4608      	mov	r0, r1
 8006344:	4611      	mov	r1, r2
 8006346:	2200      	movs	r2, #0
 8006348:	602a      	str	r2, [r5, #0]
 800634a:	461a      	mov	r2, r3
 800634c:	f7fb f8ea 	bl	8001524 <_lseek>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d102      	bne.n	800635a <_lseek_r+0x1e>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b103      	cbz	r3, 800635a <_lseek_r+0x1e>
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	20000320 	.word	0x20000320

08006360 <__malloc_lock>:
 8006360:	4801      	ldr	r0, [pc, #4]	; (8006368 <__malloc_lock+0x8>)
 8006362:	f7fe b90a 	b.w	800457a <__retarget_lock_acquire_recursive>
 8006366:	bf00      	nop
 8006368:	20000318 	.word	0x20000318

0800636c <__malloc_unlock>:
 800636c:	4801      	ldr	r0, [pc, #4]	; (8006374 <__malloc_unlock+0x8>)
 800636e:	f7fe b905 	b.w	800457c <__retarget_lock_release_recursive>
 8006372:	bf00      	nop
 8006374:	20000318 	.word	0x20000318

08006378 <_Balloc>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800637c:	4604      	mov	r4, r0
 800637e:	460d      	mov	r5, r1
 8006380:	b976      	cbnz	r6, 80063a0 <_Balloc+0x28>
 8006382:	2010      	movs	r0, #16
 8006384:	f7fe f960 	bl	8004648 <malloc>
 8006388:	4602      	mov	r2, r0
 800638a:	6260      	str	r0, [r4, #36]	; 0x24
 800638c:	b920      	cbnz	r0, 8006398 <_Balloc+0x20>
 800638e:	4b18      	ldr	r3, [pc, #96]	; (80063f0 <_Balloc+0x78>)
 8006390:	4818      	ldr	r0, [pc, #96]	; (80063f4 <_Balloc+0x7c>)
 8006392:	2166      	movs	r1, #102	; 0x66
 8006394:	f000 fb90 	bl	8006ab8 <__assert_func>
 8006398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800639c:	6006      	str	r6, [r0, #0]
 800639e:	60c6      	str	r6, [r0, #12]
 80063a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80063a2:	68f3      	ldr	r3, [r6, #12]
 80063a4:	b183      	cbz	r3, 80063c8 <_Balloc+0x50>
 80063a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063ae:	b9b8      	cbnz	r0, 80063e0 <_Balloc+0x68>
 80063b0:	2101      	movs	r1, #1
 80063b2:	fa01 f605 	lsl.w	r6, r1, r5
 80063b6:	1d72      	adds	r2, r6, #5
 80063b8:	0092      	lsls	r2, r2, #2
 80063ba:	4620      	mov	r0, r4
 80063bc:	f000 fb5a 	bl	8006a74 <_calloc_r>
 80063c0:	b160      	cbz	r0, 80063dc <_Balloc+0x64>
 80063c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063c6:	e00e      	b.n	80063e6 <_Balloc+0x6e>
 80063c8:	2221      	movs	r2, #33	; 0x21
 80063ca:	2104      	movs	r1, #4
 80063cc:	4620      	mov	r0, r4
 80063ce:	f000 fb51 	bl	8006a74 <_calloc_r>
 80063d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063d4:	60f0      	str	r0, [r6, #12]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e4      	bne.n	80063a6 <_Balloc+0x2e>
 80063dc:	2000      	movs	r0, #0
 80063de:	bd70      	pop	{r4, r5, r6, pc}
 80063e0:	6802      	ldr	r2, [r0, #0]
 80063e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063e6:	2300      	movs	r3, #0
 80063e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063ec:	e7f7      	b.n	80063de <_Balloc+0x66>
 80063ee:	bf00      	nop
 80063f0:	08006d4a 	.word	0x08006d4a
 80063f4:	08006dd1 	.word	0x08006dd1

080063f8 <_Bfree>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063fc:	4605      	mov	r5, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	b976      	cbnz	r6, 8006420 <_Bfree+0x28>
 8006402:	2010      	movs	r0, #16
 8006404:	f7fe f920 	bl	8004648 <malloc>
 8006408:	4602      	mov	r2, r0
 800640a:	6268      	str	r0, [r5, #36]	; 0x24
 800640c:	b920      	cbnz	r0, 8006418 <_Bfree+0x20>
 800640e:	4b09      	ldr	r3, [pc, #36]	; (8006434 <_Bfree+0x3c>)
 8006410:	4809      	ldr	r0, [pc, #36]	; (8006438 <_Bfree+0x40>)
 8006412:	218a      	movs	r1, #138	; 0x8a
 8006414:	f000 fb50 	bl	8006ab8 <__assert_func>
 8006418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800641c:	6006      	str	r6, [r0, #0]
 800641e:	60c6      	str	r6, [r0, #12]
 8006420:	b13c      	cbz	r4, 8006432 <_Bfree+0x3a>
 8006422:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006424:	6862      	ldr	r2, [r4, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800642c:	6021      	str	r1, [r4, #0]
 800642e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006432:	bd70      	pop	{r4, r5, r6, pc}
 8006434:	08006d4a 	.word	0x08006d4a
 8006438:	08006dd1 	.word	0x08006dd1

0800643c <__multadd>:
 800643c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006440:	690e      	ldr	r6, [r1, #16]
 8006442:	4607      	mov	r7, r0
 8006444:	4698      	mov	r8, r3
 8006446:	460c      	mov	r4, r1
 8006448:	f101 0014 	add.w	r0, r1, #20
 800644c:	2300      	movs	r3, #0
 800644e:	6805      	ldr	r5, [r0, #0]
 8006450:	b2a9      	uxth	r1, r5
 8006452:	fb02 8101 	mla	r1, r2, r1, r8
 8006456:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800645a:	0c2d      	lsrs	r5, r5, #16
 800645c:	fb02 c505 	mla	r5, r2, r5, ip
 8006460:	b289      	uxth	r1, r1
 8006462:	3301      	adds	r3, #1
 8006464:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006468:	429e      	cmp	r6, r3
 800646a:	f840 1b04 	str.w	r1, [r0], #4
 800646e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006472:	dcec      	bgt.n	800644e <__multadd+0x12>
 8006474:	f1b8 0f00 	cmp.w	r8, #0
 8006478:	d022      	beq.n	80064c0 <__multadd+0x84>
 800647a:	68a3      	ldr	r3, [r4, #8]
 800647c:	42b3      	cmp	r3, r6
 800647e:	dc19      	bgt.n	80064b4 <__multadd+0x78>
 8006480:	6861      	ldr	r1, [r4, #4]
 8006482:	4638      	mov	r0, r7
 8006484:	3101      	adds	r1, #1
 8006486:	f7ff ff77 	bl	8006378 <_Balloc>
 800648a:	4605      	mov	r5, r0
 800648c:	b928      	cbnz	r0, 800649a <__multadd+0x5e>
 800648e:	4602      	mov	r2, r0
 8006490:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <__multadd+0x8c>)
 8006492:	480e      	ldr	r0, [pc, #56]	; (80064cc <__multadd+0x90>)
 8006494:	21b5      	movs	r1, #181	; 0xb5
 8006496:	f000 fb0f 	bl	8006ab8 <__assert_func>
 800649a:	6922      	ldr	r2, [r4, #16]
 800649c:	3202      	adds	r2, #2
 800649e:	f104 010c 	add.w	r1, r4, #12
 80064a2:	0092      	lsls	r2, r2, #2
 80064a4:	300c      	adds	r0, #12
 80064a6:	f7fe f8d7 	bl	8004658 <memcpy>
 80064aa:	4621      	mov	r1, r4
 80064ac:	4638      	mov	r0, r7
 80064ae:	f7ff ffa3 	bl	80063f8 <_Bfree>
 80064b2:	462c      	mov	r4, r5
 80064b4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80064b8:	3601      	adds	r6, #1
 80064ba:	f8c3 8014 	str.w	r8, [r3, #20]
 80064be:	6126      	str	r6, [r4, #16]
 80064c0:	4620      	mov	r0, r4
 80064c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c6:	bf00      	nop
 80064c8:	08006dc0 	.word	0x08006dc0
 80064cc:	08006dd1 	.word	0x08006dd1

080064d0 <__hi0bits>:
 80064d0:	0c03      	lsrs	r3, r0, #16
 80064d2:	041b      	lsls	r3, r3, #16
 80064d4:	b9d3      	cbnz	r3, 800650c <__hi0bits+0x3c>
 80064d6:	0400      	lsls	r0, r0, #16
 80064d8:	2310      	movs	r3, #16
 80064da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80064de:	bf04      	itt	eq
 80064e0:	0200      	lsleq	r0, r0, #8
 80064e2:	3308      	addeq	r3, #8
 80064e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80064e8:	bf04      	itt	eq
 80064ea:	0100      	lsleq	r0, r0, #4
 80064ec:	3304      	addeq	r3, #4
 80064ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80064f2:	bf04      	itt	eq
 80064f4:	0080      	lsleq	r0, r0, #2
 80064f6:	3302      	addeq	r3, #2
 80064f8:	2800      	cmp	r0, #0
 80064fa:	db05      	blt.n	8006508 <__hi0bits+0x38>
 80064fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006500:	f103 0301 	add.w	r3, r3, #1
 8006504:	bf08      	it	eq
 8006506:	2320      	moveq	r3, #32
 8006508:	4618      	mov	r0, r3
 800650a:	4770      	bx	lr
 800650c:	2300      	movs	r3, #0
 800650e:	e7e4      	b.n	80064da <__hi0bits+0xa>

08006510 <__lo0bits>:
 8006510:	6803      	ldr	r3, [r0, #0]
 8006512:	f013 0207 	ands.w	r2, r3, #7
 8006516:	4601      	mov	r1, r0
 8006518:	d00b      	beq.n	8006532 <__lo0bits+0x22>
 800651a:	07da      	lsls	r2, r3, #31
 800651c:	d424      	bmi.n	8006568 <__lo0bits+0x58>
 800651e:	0798      	lsls	r0, r3, #30
 8006520:	bf49      	itett	mi
 8006522:	085b      	lsrmi	r3, r3, #1
 8006524:	089b      	lsrpl	r3, r3, #2
 8006526:	2001      	movmi	r0, #1
 8006528:	600b      	strmi	r3, [r1, #0]
 800652a:	bf5c      	itt	pl
 800652c:	600b      	strpl	r3, [r1, #0]
 800652e:	2002      	movpl	r0, #2
 8006530:	4770      	bx	lr
 8006532:	b298      	uxth	r0, r3
 8006534:	b9b0      	cbnz	r0, 8006564 <__lo0bits+0x54>
 8006536:	0c1b      	lsrs	r3, r3, #16
 8006538:	2010      	movs	r0, #16
 800653a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800653e:	bf04      	itt	eq
 8006540:	0a1b      	lsreq	r3, r3, #8
 8006542:	3008      	addeq	r0, #8
 8006544:	071a      	lsls	r2, r3, #28
 8006546:	bf04      	itt	eq
 8006548:	091b      	lsreq	r3, r3, #4
 800654a:	3004      	addeq	r0, #4
 800654c:	079a      	lsls	r2, r3, #30
 800654e:	bf04      	itt	eq
 8006550:	089b      	lsreq	r3, r3, #2
 8006552:	3002      	addeq	r0, #2
 8006554:	07da      	lsls	r2, r3, #31
 8006556:	d403      	bmi.n	8006560 <__lo0bits+0x50>
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	f100 0001 	add.w	r0, r0, #1
 800655e:	d005      	beq.n	800656c <__lo0bits+0x5c>
 8006560:	600b      	str	r3, [r1, #0]
 8006562:	4770      	bx	lr
 8006564:	4610      	mov	r0, r2
 8006566:	e7e8      	b.n	800653a <__lo0bits+0x2a>
 8006568:	2000      	movs	r0, #0
 800656a:	4770      	bx	lr
 800656c:	2020      	movs	r0, #32
 800656e:	4770      	bx	lr

08006570 <__i2b>:
 8006570:	b510      	push	{r4, lr}
 8006572:	460c      	mov	r4, r1
 8006574:	2101      	movs	r1, #1
 8006576:	f7ff feff 	bl	8006378 <_Balloc>
 800657a:	4602      	mov	r2, r0
 800657c:	b928      	cbnz	r0, 800658a <__i2b+0x1a>
 800657e:	4b05      	ldr	r3, [pc, #20]	; (8006594 <__i2b+0x24>)
 8006580:	4805      	ldr	r0, [pc, #20]	; (8006598 <__i2b+0x28>)
 8006582:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006586:	f000 fa97 	bl	8006ab8 <__assert_func>
 800658a:	2301      	movs	r3, #1
 800658c:	6144      	str	r4, [r0, #20]
 800658e:	6103      	str	r3, [r0, #16]
 8006590:	bd10      	pop	{r4, pc}
 8006592:	bf00      	nop
 8006594:	08006dc0 	.word	0x08006dc0
 8006598:	08006dd1 	.word	0x08006dd1

0800659c <__multiply>:
 800659c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a0:	4614      	mov	r4, r2
 80065a2:	690a      	ldr	r2, [r1, #16]
 80065a4:	6923      	ldr	r3, [r4, #16]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	bfb8      	it	lt
 80065aa:	460b      	movlt	r3, r1
 80065ac:	460d      	mov	r5, r1
 80065ae:	bfbc      	itt	lt
 80065b0:	4625      	movlt	r5, r4
 80065b2:	461c      	movlt	r4, r3
 80065b4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80065b8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80065bc:	68ab      	ldr	r3, [r5, #8]
 80065be:	6869      	ldr	r1, [r5, #4]
 80065c0:	eb0a 0709 	add.w	r7, sl, r9
 80065c4:	42bb      	cmp	r3, r7
 80065c6:	b085      	sub	sp, #20
 80065c8:	bfb8      	it	lt
 80065ca:	3101      	addlt	r1, #1
 80065cc:	f7ff fed4 	bl	8006378 <_Balloc>
 80065d0:	b930      	cbnz	r0, 80065e0 <__multiply+0x44>
 80065d2:	4602      	mov	r2, r0
 80065d4:	4b42      	ldr	r3, [pc, #264]	; (80066e0 <__multiply+0x144>)
 80065d6:	4843      	ldr	r0, [pc, #268]	; (80066e4 <__multiply+0x148>)
 80065d8:	f240 115d 	movw	r1, #349	; 0x15d
 80065dc:	f000 fa6c 	bl	8006ab8 <__assert_func>
 80065e0:	f100 0614 	add.w	r6, r0, #20
 80065e4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80065e8:	4633      	mov	r3, r6
 80065ea:	2200      	movs	r2, #0
 80065ec:	4543      	cmp	r3, r8
 80065ee:	d31e      	bcc.n	800662e <__multiply+0x92>
 80065f0:	f105 0c14 	add.w	ip, r5, #20
 80065f4:	f104 0314 	add.w	r3, r4, #20
 80065f8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80065fc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006600:	9202      	str	r2, [sp, #8]
 8006602:	ebac 0205 	sub.w	r2, ip, r5
 8006606:	3a15      	subs	r2, #21
 8006608:	f022 0203 	bic.w	r2, r2, #3
 800660c:	3204      	adds	r2, #4
 800660e:	f105 0115 	add.w	r1, r5, #21
 8006612:	458c      	cmp	ip, r1
 8006614:	bf38      	it	cc
 8006616:	2204      	movcc	r2, #4
 8006618:	9201      	str	r2, [sp, #4]
 800661a:	9a02      	ldr	r2, [sp, #8]
 800661c:	9303      	str	r3, [sp, #12]
 800661e:	429a      	cmp	r2, r3
 8006620:	d808      	bhi.n	8006634 <__multiply+0x98>
 8006622:	2f00      	cmp	r7, #0
 8006624:	dc55      	bgt.n	80066d2 <__multiply+0x136>
 8006626:	6107      	str	r7, [r0, #16]
 8006628:	b005      	add	sp, #20
 800662a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662e:	f843 2b04 	str.w	r2, [r3], #4
 8006632:	e7db      	b.n	80065ec <__multiply+0x50>
 8006634:	f8b3 a000 	ldrh.w	sl, [r3]
 8006638:	f1ba 0f00 	cmp.w	sl, #0
 800663c:	d020      	beq.n	8006680 <__multiply+0xe4>
 800663e:	f105 0e14 	add.w	lr, r5, #20
 8006642:	46b1      	mov	r9, r6
 8006644:	2200      	movs	r2, #0
 8006646:	f85e 4b04 	ldr.w	r4, [lr], #4
 800664a:	f8d9 b000 	ldr.w	fp, [r9]
 800664e:	b2a1      	uxth	r1, r4
 8006650:	fa1f fb8b 	uxth.w	fp, fp
 8006654:	fb0a b101 	mla	r1, sl, r1, fp
 8006658:	4411      	add	r1, r2
 800665a:	f8d9 2000 	ldr.w	r2, [r9]
 800665e:	0c24      	lsrs	r4, r4, #16
 8006660:	0c12      	lsrs	r2, r2, #16
 8006662:	fb0a 2404 	mla	r4, sl, r4, r2
 8006666:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800666a:	b289      	uxth	r1, r1
 800666c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006670:	45f4      	cmp	ip, lr
 8006672:	f849 1b04 	str.w	r1, [r9], #4
 8006676:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800667a:	d8e4      	bhi.n	8006646 <__multiply+0xaa>
 800667c:	9901      	ldr	r1, [sp, #4]
 800667e:	5072      	str	r2, [r6, r1]
 8006680:	9a03      	ldr	r2, [sp, #12]
 8006682:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006686:	3304      	adds	r3, #4
 8006688:	f1b9 0f00 	cmp.w	r9, #0
 800668c:	d01f      	beq.n	80066ce <__multiply+0x132>
 800668e:	6834      	ldr	r4, [r6, #0]
 8006690:	f105 0114 	add.w	r1, r5, #20
 8006694:	46b6      	mov	lr, r6
 8006696:	f04f 0a00 	mov.w	sl, #0
 800669a:	880a      	ldrh	r2, [r1, #0]
 800669c:	f8be b002 	ldrh.w	fp, [lr, #2]
 80066a0:	fb09 b202 	mla	r2, r9, r2, fp
 80066a4:	4492      	add	sl, r2
 80066a6:	b2a4      	uxth	r4, r4
 80066a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80066ac:	f84e 4b04 	str.w	r4, [lr], #4
 80066b0:	f851 4b04 	ldr.w	r4, [r1], #4
 80066b4:	f8be 2000 	ldrh.w	r2, [lr]
 80066b8:	0c24      	lsrs	r4, r4, #16
 80066ba:	fb09 2404 	mla	r4, r9, r4, r2
 80066be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80066c2:	458c      	cmp	ip, r1
 80066c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80066c8:	d8e7      	bhi.n	800669a <__multiply+0xfe>
 80066ca:	9a01      	ldr	r2, [sp, #4]
 80066cc:	50b4      	str	r4, [r6, r2]
 80066ce:	3604      	adds	r6, #4
 80066d0:	e7a3      	b.n	800661a <__multiply+0x7e>
 80066d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1a5      	bne.n	8006626 <__multiply+0x8a>
 80066da:	3f01      	subs	r7, #1
 80066dc:	e7a1      	b.n	8006622 <__multiply+0x86>
 80066de:	bf00      	nop
 80066e0:	08006dc0 	.word	0x08006dc0
 80066e4:	08006dd1 	.word	0x08006dd1

080066e8 <__pow5mult>:
 80066e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066ec:	4615      	mov	r5, r2
 80066ee:	f012 0203 	ands.w	r2, r2, #3
 80066f2:	4606      	mov	r6, r0
 80066f4:	460f      	mov	r7, r1
 80066f6:	d007      	beq.n	8006708 <__pow5mult+0x20>
 80066f8:	4c25      	ldr	r4, [pc, #148]	; (8006790 <__pow5mult+0xa8>)
 80066fa:	3a01      	subs	r2, #1
 80066fc:	2300      	movs	r3, #0
 80066fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006702:	f7ff fe9b 	bl	800643c <__multadd>
 8006706:	4607      	mov	r7, r0
 8006708:	10ad      	asrs	r5, r5, #2
 800670a:	d03d      	beq.n	8006788 <__pow5mult+0xa0>
 800670c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800670e:	b97c      	cbnz	r4, 8006730 <__pow5mult+0x48>
 8006710:	2010      	movs	r0, #16
 8006712:	f7fd ff99 	bl	8004648 <malloc>
 8006716:	4602      	mov	r2, r0
 8006718:	6270      	str	r0, [r6, #36]	; 0x24
 800671a:	b928      	cbnz	r0, 8006728 <__pow5mult+0x40>
 800671c:	4b1d      	ldr	r3, [pc, #116]	; (8006794 <__pow5mult+0xac>)
 800671e:	481e      	ldr	r0, [pc, #120]	; (8006798 <__pow5mult+0xb0>)
 8006720:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006724:	f000 f9c8 	bl	8006ab8 <__assert_func>
 8006728:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800672c:	6004      	str	r4, [r0, #0]
 800672e:	60c4      	str	r4, [r0, #12]
 8006730:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006738:	b94c      	cbnz	r4, 800674e <__pow5mult+0x66>
 800673a:	f240 2171 	movw	r1, #625	; 0x271
 800673e:	4630      	mov	r0, r6
 8006740:	f7ff ff16 	bl	8006570 <__i2b>
 8006744:	2300      	movs	r3, #0
 8006746:	f8c8 0008 	str.w	r0, [r8, #8]
 800674a:	4604      	mov	r4, r0
 800674c:	6003      	str	r3, [r0, #0]
 800674e:	f04f 0900 	mov.w	r9, #0
 8006752:	07eb      	lsls	r3, r5, #31
 8006754:	d50a      	bpl.n	800676c <__pow5mult+0x84>
 8006756:	4639      	mov	r1, r7
 8006758:	4622      	mov	r2, r4
 800675a:	4630      	mov	r0, r6
 800675c:	f7ff ff1e 	bl	800659c <__multiply>
 8006760:	4639      	mov	r1, r7
 8006762:	4680      	mov	r8, r0
 8006764:	4630      	mov	r0, r6
 8006766:	f7ff fe47 	bl	80063f8 <_Bfree>
 800676a:	4647      	mov	r7, r8
 800676c:	106d      	asrs	r5, r5, #1
 800676e:	d00b      	beq.n	8006788 <__pow5mult+0xa0>
 8006770:	6820      	ldr	r0, [r4, #0]
 8006772:	b938      	cbnz	r0, 8006784 <__pow5mult+0x9c>
 8006774:	4622      	mov	r2, r4
 8006776:	4621      	mov	r1, r4
 8006778:	4630      	mov	r0, r6
 800677a:	f7ff ff0f 	bl	800659c <__multiply>
 800677e:	6020      	str	r0, [r4, #0]
 8006780:	f8c0 9000 	str.w	r9, [r0]
 8006784:	4604      	mov	r4, r0
 8006786:	e7e4      	b.n	8006752 <__pow5mult+0x6a>
 8006788:	4638      	mov	r0, r7
 800678a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800678e:	bf00      	nop
 8006790:	08006f28 	.word	0x08006f28
 8006794:	08006d4a 	.word	0x08006d4a
 8006798:	08006dd1 	.word	0x08006dd1

0800679c <__lshift>:
 800679c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a0:	460c      	mov	r4, r1
 80067a2:	6849      	ldr	r1, [r1, #4]
 80067a4:	6923      	ldr	r3, [r4, #16]
 80067a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067aa:	68a3      	ldr	r3, [r4, #8]
 80067ac:	4607      	mov	r7, r0
 80067ae:	4691      	mov	r9, r2
 80067b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067b4:	f108 0601 	add.w	r6, r8, #1
 80067b8:	42b3      	cmp	r3, r6
 80067ba:	db0b      	blt.n	80067d4 <__lshift+0x38>
 80067bc:	4638      	mov	r0, r7
 80067be:	f7ff fddb 	bl	8006378 <_Balloc>
 80067c2:	4605      	mov	r5, r0
 80067c4:	b948      	cbnz	r0, 80067da <__lshift+0x3e>
 80067c6:	4602      	mov	r2, r0
 80067c8:	4b28      	ldr	r3, [pc, #160]	; (800686c <__lshift+0xd0>)
 80067ca:	4829      	ldr	r0, [pc, #164]	; (8006870 <__lshift+0xd4>)
 80067cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80067d0:	f000 f972 	bl	8006ab8 <__assert_func>
 80067d4:	3101      	adds	r1, #1
 80067d6:	005b      	lsls	r3, r3, #1
 80067d8:	e7ee      	b.n	80067b8 <__lshift+0x1c>
 80067da:	2300      	movs	r3, #0
 80067dc:	f100 0114 	add.w	r1, r0, #20
 80067e0:	f100 0210 	add.w	r2, r0, #16
 80067e4:	4618      	mov	r0, r3
 80067e6:	4553      	cmp	r3, sl
 80067e8:	db33      	blt.n	8006852 <__lshift+0xb6>
 80067ea:	6920      	ldr	r0, [r4, #16]
 80067ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067f0:	f104 0314 	add.w	r3, r4, #20
 80067f4:	f019 091f 	ands.w	r9, r9, #31
 80067f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006800:	d02b      	beq.n	800685a <__lshift+0xbe>
 8006802:	f1c9 0e20 	rsb	lr, r9, #32
 8006806:	468a      	mov	sl, r1
 8006808:	2200      	movs	r2, #0
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	fa00 f009 	lsl.w	r0, r0, r9
 8006810:	4302      	orrs	r2, r0
 8006812:	f84a 2b04 	str.w	r2, [sl], #4
 8006816:	f853 2b04 	ldr.w	r2, [r3], #4
 800681a:	459c      	cmp	ip, r3
 800681c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006820:	d8f3      	bhi.n	800680a <__lshift+0x6e>
 8006822:	ebac 0304 	sub.w	r3, ip, r4
 8006826:	3b15      	subs	r3, #21
 8006828:	f023 0303 	bic.w	r3, r3, #3
 800682c:	3304      	adds	r3, #4
 800682e:	f104 0015 	add.w	r0, r4, #21
 8006832:	4584      	cmp	ip, r0
 8006834:	bf38      	it	cc
 8006836:	2304      	movcc	r3, #4
 8006838:	50ca      	str	r2, [r1, r3]
 800683a:	b10a      	cbz	r2, 8006840 <__lshift+0xa4>
 800683c:	f108 0602 	add.w	r6, r8, #2
 8006840:	3e01      	subs	r6, #1
 8006842:	4638      	mov	r0, r7
 8006844:	612e      	str	r6, [r5, #16]
 8006846:	4621      	mov	r1, r4
 8006848:	f7ff fdd6 	bl	80063f8 <_Bfree>
 800684c:	4628      	mov	r0, r5
 800684e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006852:	f842 0f04 	str.w	r0, [r2, #4]!
 8006856:	3301      	adds	r3, #1
 8006858:	e7c5      	b.n	80067e6 <__lshift+0x4a>
 800685a:	3904      	subs	r1, #4
 800685c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006860:	f841 2f04 	str.w	r2, [r1, #4]!
 8006864:	459c      	cmp	ip, r3
 8006866:	d8f9      	bhi.n	800685c <__lshift+0xc0>
 8006868:	e7ea      	b.n	8006840 <__lshift+0xa4>
 800686a:	bf00      	nop
 800686c:	08006dc0 	.word	0x08006dc0
 8006870:	08006dd1 	.word	0x08006dd1

08006874 <__mcmp>:
 8006874:	b530      	push	{r4, r5, lr}
 8006876:	6902      	ldr	r2, [r0, #16]
 8006878:	690c      	ldr	r4, [r1, #16]
 800687a:	1b12      	subs	r2, r2, r4
 800687c:	d10e      	bne.n	800689c <__mcmp+0x28>
 800687e:	f100 0314 	add.w	r3, r0, #20
 8006882:	3114      	adds	r1, #20
 8006884:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006888:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800688c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006890:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006894:	42a5      	cmp	r5, r4
 8006896:	d003      	beq.n	80068a0 <__mcmp+0x2c>
 8006898:	d305      	bcc.n	80068a6 <__mcmp+0x32>
 800689a:	2201      	movs	r2, #1
 800689c:	4610      	mov	r0, r2
 800689e:	bd30      	pop	{r4, r5, pc}
 80068a0:	4283      	cmp	r3, r0
 80068a2:	d3f3      	bcc.n	800688c <__mcmp+0x18>
 80068a4:	e7fa      	b.n	800689c <__mcmp+0x28>
 80068a6:	f04f 32ff 	mov.w	r2, #4294967295
 80068aa:	e7f7      	b.n	800689c <__mcmp+0x28>

080068ac <__mdiff>:
 80068ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b0:	460c      	mov	r4, r1
 80068b2:	4606      	mov	r6, r0
 80068b4:	4611      	mov	r1, r2
 80068b6:	4620      	mov	r0, r4
 80068b8:	4617      	mov	r7, r2
 80068ba:	f7ff ffdb 	bl	8006874 <__mcmp>
 80068be:	1e05      	subs	r5, r0, #0
 80068c0:	d110      	bne.n	80068e4 <__mdiff+0x38>
 80068c2:	4629      	mov	r1, r5
 80068c4:	4630      	mov	r0, r6
 80068c6:	f7ff fd57 	bl	8006378 <_Balloc>
 80068ca:	b930      	cbnz	r0, 80068da <__mdiff+0x2e>
 80068cc:	4b39      	ldr	r3, [pc, #228]	; (80069b4 <__mdiff+0x108>)
 80068ce:	4602      	mov	r2, r0
 80068d0:	f240 2132 	movw	r1, #562	; 0x232
 80068d4:	4838      	ldr	r0, [pc, #224]	; (80069b8 <__mdiff+0x10c>)
 80068d6:	f000 f8ef 	bl	8006ab8 <__assert_func>
 80068da:	2301      	movs	r3, #1
 80068dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e4:	bfa4      	itt	ge
 80068e6:	463b      	movge	r3, r7
 80068e8:	4627      	movge	r7, r4
 80068ea:	4630      	mov	r0, r6
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	bfa6      	itte	ge
 80068f0:	461c      	movge	r4, r3
 80068f2:	2500      	movge	r5, #0
 80068f4:	2501      	movlt	r5, #1
 80068f6:	f7ff fd3f 	bl	8006378 <_Balloc>
 80068fa:	b920      	cbnz	r0, 8006906 <__mdiff+0x5a>
 80068fc:	4b2d      	ldr	r3, [pc, #180]	; (80069b4 <__mdiff+0x108>)
 80068fe:	4602      	mov	r2, r0
 8006900:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006904:	e7e6      	b.n	80068d4 <__mdiff+0x28>
 8006906:	693e      	ldr	r6, [r7, #16]
 8006908:	60c5      	str	r5, [r0, #12]
 800690a:	6925      	ldr	r5, [r4, #16]
 800690c:	f107 0114 	add.w	r1, r7, #20
 8006910:	f104 0914 	add.w	r9, r4, #20
 8006914:	f100 0e14 	add.w	lr, r0, #20
 8006918:	f107 0210 	add.w	r2, r7, #16
 800691c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006920:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006924:	46f2      	mov	sl, lr
 8006926:	2700      	movs	r7, #0
 8006928:	f859 3b04 	ldr.w	r3, [r9], #4
 800692c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006930:	fa1f f883 	uxth.w	r8, r3
 8006934:	fa17 f78b 	uxtah	r7, r7, fp
 8006938:	0c1b      	lsrs	r3, r3, #16
 800693a:	eba7 0808 	sub.w	r8, r7, r8
 800693e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006942:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006946:	fa1f f888 	uxth.w	r8, r8
 800694a:	141f      	asrs	r7, r3, #16
 800694c:	454d      	cmp	r5, r9
 800694e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006952:	f84a 3b04 	str.w	r3, [sl], #4
 8006956:	d8e7      	bhi.n	8006928 <__mdiff+0x7c>
 8006958:	1b2b      	subs	r3, r5, r4
 800695a:	3b15      	subs	r3, #21
 800695c:	f023 0303 	bic.w	r3, r3, #3
 8006960:	3304      	adds	r3, #4
 8006962:	3415      	adds	r4, #21
 8006964:	42a5      	cmp	r5, r4
 8006966:	bf38      	it	cc
 8006968:	2304      	movcc	r3, #4
 800696a:	4419      	add	r1, r3
 800696c:	4473      	add	r3, lr
 800696e:	469e      	mov	lr, r3
 8006970:	460d      	mov	r5, r1
 8006972:	4565      	cmp	r5, ip
 8006974:	d30e      	bcc.n	8006994 <__mdiff+0xe8>
 8006976:	f10c 0203 	add.w	r2, ip, #3
 800697a:	1a52      	subs	r2, r2, r1
 800697c:	f022 0203 	bic.w	r2, r2, #3
 8006980:	3903      	subs	r1, #3
 8006982:	458c      	cmp	ip, r1
 8006984:	bf38      	it	cc
 8006986:	2200      	movcc	r2, #0
 8006988:	441a      	add	r2, r3
 800698a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800698e:	b17b      	cbz	r3, 80069b0 <__mdiff+0x104>
 8006990:	6106      	str	r6, [r0, #16]
 8006992:	e7a5      	b.n	80068e0 <__mdiff+0x34>
 8006994:	f855 8b04 	ldr.w	r8, [r5], #4
 8006998:	fa17 f488 	uxtah	r4, r7, r8
 800699c:	1422      	asrs	r2, r4, #16
 800699e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80069a2:	b2a4      	uxth	r4, r4
 80069a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80069a8:	f84e 4b04 	str.w	r4, [lr], #4
 80069ac:	1417      	asrs	r7, r2, #16
 80069ae:	e7e0      	b.n	8006972 <__mdiff+0xc6>
 80069b0:	3e01      	subs	r6, #1
 80069b2:	e7ea      	b.n	800698a <__mdiff+0xde>
 80069b4:	08006dc0 	.word	0x08006dc0
 80069b8:	08006dd1 	.word	0x08006dd1

080069bc <__d2b>:
 80069bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80069c0:	4689      	mov	r9, r1
 80069c2:	2101      	movs	r1, #1
 80069c4:	ec57 6b10 	vmov	r6, r7, d0
 80069c8:	4690      	mov	r8, r2
 80069ca:	f7ff fcd5 	bl	8006378 <_Balloc>
 80069ce:	4604      	mov	r4, r0
 80069d0:	b930      	cbnz	r0, 80069e0 <__d2b+0x24>
 80069d2:	4602      	mov	r2, r0
 80069d4:	4b25      	ldr	r3, [pc, #148]	; (8006a6c <__d2b+0xb0>)
 80069d6:	4826      	ldr	r0, [pc, #152]	; (8006a70 <__d2b+0xb4>)
 80069d8:	f240 310a 	movw	r1, #778	; 0x30a
 80069dc:	f000 f86c 	bl	8006ab8 <__assert_func>
 80069e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80069e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069e8:	bb35      	cbnz	r5, 8006a38 <__d2b+0x7c>
 80069ea:	2e00      	cmp	r6, #0
 80069ec:	9301      	str	r3, [sp, #4]
 80069ee:	d028      	beq.n	8006a42 <__d2b+0x86>
 80069f0:	4668      	mov	r0, sp
 80069f2:	9600      	str	r6, [sp, #0]
 80069f4:	f7ff fd8c 	bl	8006510 <__lo0bits>
 80069f8:	9900      	ldr	r1, [sp, #0]
 80069fa:	b300      	cbz	r0, 8006a3e <__d2b+0x82>
 80069fc:	9a01      	ldr	r2, [sp, #4]
 80069fe:	f1c0 0320 	rsb	r3, r0, #32
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	430b      	orrs	r3, r1
 8006a08:	40c2      	lsrs	r2, r0
 8006a0a:	6163      	str	r3, [r4, #20]
 8006a0c:	9201      	str	r2, [sp, #4]
 8006a0e:	9b01      	ldr	r3, [sp, #4]
 8006a10:	61a3      	str	r3, [r4, #24]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	bf14      	ite	ne
 8006a16:	2202      	movne	r2, #2
 8006a18:	2201      	moveq	r2, #1
 8006a1a:	6122      	str	r2, [r4, #16]
 8006a1c:	b1d5      	cbz	r5, 8006a54 <__d2b+0x98>
 8006a1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a22:	4405      	add	r5, r0
 8006a24:	f8c9 5000 	str.w	r5, [r9]
 8006a28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a2c:	f8c8 0000 	str.w	r0, [r8]
 8006a30:	4620      	mov	r0, r4
 8006a32:	b003      	add	sp, #12
 8006a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a3c:	e7d5      	b.n	80069ea <__d2b+0x2e>
 8006a3e:	6161      	str	r1, [r4, #20]
 8006a40:	e7e5      	b.n	8006a0e <__d2b+0x52>
 8006a42:	a801      	add	r0, sp, #4
 8006a44:	f7ff fd64 	bl	8006510 <__lo0bits>
 8006a48:	9b01      	ldr	r3, [sp, #4]
 8006a4a:	6163      	str	r3, [r4, #20]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	6122      	str	r2, [r4, #16]
 8006a50:	3020      	adds	r0, #32
 8006a52:	e7e3      	b.n	8006a1c <__d2b+0x60>
 8006a54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a5c:	f8c9 0000 	str.w	r0, [r9]
 8006a60:	6918      	ldr	r0, [r3, #16]
 8006a62:	f7ff fd35 	bl	80064d0 <__hi0bits>
 8006a66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a6a:	e7df      	b.n	8006a2c <__d2b+0x70>
 8006a6c:	08006dc0 	.word	0x08006dc0
 8006a70:	08006dd1 	.word	0x08006dd1

08006a74 <_calloc_r>:
 8006a74:	b513      	push	{r0, r1, r4, lr}
 8006a76:	434a      	muls	r2, r1
 8006a78:	4611      	mov	r1, r2
 8006a7a:	9201      	str	r2, [sp, #4]
 8006a7c:	f7fd fe52 	bl	8004724 <_malloc_r>
 8006a80:	4604      	mov	r4, r0
 8006a82:	b118      	cbz	r0, 8006a8c <_calloc_r+0x18>
 8006a84:	9a01      	ldr	r2, [sp, #4]
 8006a86:	2100      	movs	r1, #0
 8006a88:	f7fd fdf4 	bl	8004674 <memset>
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	b002      	add	sp, #8
 8006a90:	bd10      	pop	{r4, pc}
	...

08006a94 <_read_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4d07      	ldr	r5, [pc, #28]	; (8006ab4 <_read_r+0x20>)
 8006a98:	4604      	mov	r4, r0
 8006a9a:	4608      	mov	r0, r1
 8006a9c:	4611      	mov	r1, r2
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	602a      	str	r2, [r5, #0]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	f7fa fcde 	bl	8001464 <_read>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	d102      	bne.n	8006ab2 <_read_r+0x1e>
 8006aac:	682b      	ldr	r3, [r5, #0]
 8006aae:	b103      	cbz	r3, 8006ab2 <_read_r+0x1e>
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	20000320 	.word	0x20000320

08006ab8 <__assert_func>:
 8006ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006aba:	4614      	mov	r4, r2
 8006abc:	461a      	mov	r2, r3
 8006abe:	4b09      	ldr	r3, [pc, #36]	; (8006ae4 <__assert_func+0x2c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	68d8      	ldr	r0, [r3, #12]
 8006ac6:	b14c      	cbz	r4, 8006adc <__assert_func+0x24>
 8006ac8:	4b07      	ldr	r3, [pc, #28]	; (8006ae8 <__assert_func+0x30>)
 8006aca:	9100      	str	r1, [sp, #0]
 8006acc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ad0:	4906      	ldr	r1, [pc, #24]	; (8006aec <__assert_func+0x34>)
 8006ad2:	462b      	mov	r3, r5
 8006ad4:	f7fd fcfa 	bl	80044cc <fiprintf>
 8006ad8:	f000 f82b 	bl	8006b32 <abort>
 8006adc:	4b04      	ldr	r3, [pc, #16]	; (8006af0 <__assert_func+0x38>)
 8006ade:	461c      	mov	r4, r3
 8006ae0:	e7f3      	b.n	8006aca <__assert_func+0x12>
 8006ae2:	bf00      	nop
 8006ae4:	2000000c 	.word	0x2000000c
 8006ae8:	08006f34 	.word	0x08006f34
 8006aec:	08006f41 	.word	0x08006f41
 8006af0:	08006f6f 	.word	0x08006f6f

08006af4 <__ascii_mbtowc>:
 8006af4:	b082      	sub	sp, #8
 8006af6:	b901      	cbnz	r1, 8006afa <__ascii_mbtowc+0x6>
 8006af8:	a901      	add	r1, sp, #4
 8006afa:	b142      	cbz	r2, 8006b0e <__ascii_mbtowc+0x1a>
 8006afc:	b14b      	cbz	r3, 8006b12 <__ascii_mbtowc+0x1e>
 8006afe:	7813      	ldrb	r3, [r2, #0]
 8006b00:	600b      	str	r3, [r1, #0]
 8006b02:	7812      	ldrb	r2, [r2, #0]
 8006b04:	1e10      	subs	r0, r2, #0
 8006b06:	bf18      	it	ne
 8006b08:	2001      	movne	r0, #1
 8006b0a:	b002      	add	sp, #8
 8006b0c:	4770      	bx	lr
 8006b0e:	4610      	mov	r0, r2
 8006b10:	e7fb      	b.n	8006b0a <__ascii_mbtowc+0x16>
 8006b12:	f06f 0001 	mvn.w	r0, #1
 8006b16:	e7f8      	b.n	8006b0a <__ascii_mbtowc+0x16>

08006b18 <__ascii_wctomb>:
 8006b18:	b149      	cbz	r1, 8006b2e <__ascii_wctomb+0x16>
 8006b1a:	2aff      	cmp	r2, #255	; 0xff
 8006b1c:	bf85      	ittet	hi
 8006b1e:	238a      	movhi	r3, #138	; 0x8a
 8006b20:	6003      	strhi	r3, [r0, #0]
 8006b22:	700a      	strbls	r2, [r1, #0]
 8006b24:	f04f 30ff 	movhi.w	r0, #4294967295
 8006b28:	bf98      	it	ls
 8006b2a:	2001      	movls	r0, #1
 8006b2c:	4770      	bx	lr
 8006b2e:	4608      	mov	r0, r1
 8006b30:	4770      	bx	lr

08006b32 <abort>:
 8006b32:	b508      	push	{r3, lr}
 8006b34:	2006      	movs	r0, #6
 8006b36:	f000 f82b 	bl	8006b90 <raise>
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	f7fa fc88 	bl	8001450 <_exit>

08006b40 <_raise_r>:
 8006b40:	291f      	cmp	r1, #31
 8006b42:	b538      	push	{r3, r4, r5, lr}
 8006b44:	4604      	mov	r4, r0
 8006b46:	460d      	mov	r5, r1
 8006b48:	d904      	bls.n	8006b54 <_raise_r+0x14>
 8006b4a:	2316      	movs	r3, #22
 8006b4c:	6003      	str	r3, [r0, #0]
 8006b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006b56:	b112      	cbz	r2, 8006b5e <_raise_r+0x1e>
 8006b58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b5c:	b94b      	cbnz	r3, 8006b72 <_raise_r+0x32>
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f000 f830 	bl	8006bc4 <_getpid_r>
 8006b64:	462a      	mov	r2, r5
 8006b66:	4601      	mov	r1, r0
 8006b68:	4620      	mov	r0, r4
 8006b6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b6e:	f000 b817 	b.w	8006ba0 <_kill_r>
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d00a      	beq.n	8006b8c <_raise_r+0x4c>
 8006b76:	1c59      	adds	r1, r3, #1
 8006b78:	d103      	bne.n	8006b82 <_raise_r+0x42>
 8006b7a:	2316      	movs	r3, #22
 8006b7c:	6003      	str	r3, [r0, #0]
 8006b7e:	2001      	movs	r0, #1
 8006b80:	e7e7      	b.n	8006b52 <_raise_r+0x12>
 8006b82:	2400      	movs	r4, #0
 8006b84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b88:	4628      	mov	r0, r5
 8006b8a:	4798      	blx	r3
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	e7e0      	b.n	8006b52 <_raise_r+0x12>

08006b90 <raise>:
 8006b90:	4b02      	ldr	r3, [pc, #8]	; (8006b9c <raise+0xc>)
 8006b92:	4601      	mov	r1, r0
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	f7ff bfd3 	b.w	8006b40 <_raise_r>
 8006b9a:	bf00      	nop
 8006b9c:	2000000c 	.word	0x2000000c

08006ba0 <_kill_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4d07      	ldr	r5, [pc, #28]	; (8006bc0 <_kill_r+0x20>)
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	4608      	mov	r0, r1
 8006baa:	4611      	mov	r1, r2
 8006bac:	602b      	str	r3, [r5, #0]
 8006bae:	f7fa fc3f 	bl	8001430 <_kill>
 8006bb2:	1c43      	adds	r3, r0, #1
 8006bb4:	d102      	bne.n	8006bbc <_kill_r+0x1c>
 8006bb6:	682b      	ldr	r3, [r5, #0]
 8006bb8:	b103      	cbz	r3, 8006bbc <_kill_r+0x1c>
 8006bba:	6023      	str	r3, [r4, #0]
 8006bbc:	bd38      	pop	{r3, r4, r5, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20000320 	.word	0x20000320

08006bc4 <_getpid_r>:
 8006bc4:	f7fa bc2c 	b.w	8001420 <_getpid>

08006bc8 <_init>:
 8006bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bca:	bf00      	nop
 8006bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bce:	bc08      	pop	{r3}
 8006bd0:	469e      	mov	lr, r3
 8006bd2:	4770      	bx	lr

08006bd4 <_fini>:
 8006bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd6:	bf00      	nop
 8006bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bda:	bc08      	pop	{r3}
 8006bdc:	469e      	mov	lr, r3
 8006bde:	4770      	bx	lr
