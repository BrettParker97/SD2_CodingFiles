
getUARTworking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800bb98  0800bb98  0001bb98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfcc  0800bfcc  0002049c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfcc  0800bfcc  0001bfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfd4  0800bfd4  0002049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfd4  0800bfd4  0001bfd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfd8  0800bfd8  0001bfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  0800bfdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  2000049c  0800c478  0002049c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  0800c478  000208d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a77  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a18  00000000  00000000  00039f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  0003c960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  0003d908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000240e8  00000000  00000000  0003e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b5f  00000000  00000000  000628c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2a50  00000000  00000000  00076427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00148e77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005280  00000000  00000000  00148ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000049c 	.word	0x2000049c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bb80 	.word	0x0800bb80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004a0 	.word	0x200004a0
 800020c:	0800bb80 	.word	0x0800bb80

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <Brett_VL53L0X_StartMultiSensing>:

// vars

//functions
VL53L0X_Error Brett_VL53L0X_StartMultiSensing(VL53L0X_DEV Dev)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]

	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000eec:	2100      	movs	r1, #0
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f003 fc7a 	bl	80047e8 <VL53L0X_SetDeviceMode>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8000ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d104      	bne.n	8000f0a <Brett_VL53L0X_StartMultiSensing+0x2a>
		Status = VL53L0X_StartMeasurement(Dev);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f004 f9fb 	bl	80052fc <VL53L0X_StartMeasurement>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]

	return Status;
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <Brett_VL53L0X_FinishMultiSensing>:

VL53L0X_Error Brett_VL53L0X_FinishMultiSensing(VL53L0X_DEV Dev,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;


	// make sure sensor is done
	if (Status == VL53L0X_ERROR_NONE)
 8000f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d104      	bne.n	8000f36 <Brett_VL53L0X_FinishMultiSensing+0x20>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f005 fc95 	bl	800685c <VL53L0X_measurement_poll_for_completion>
 8000f32:	4603      	mov	r3, r0
 8000f34:	73fb      	strb	r3, [r7, #15]

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8000f36:	f107 030e 	add.w	r3, r7, #14
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f003 fc7f 	bl	8004840 <VL53L0X_GetDeviceMode>
 8000f42:	4603      	mov	r3, r0
 8000f44:	73fb      	strb	r3, [r7, #15]

	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d106      	bne.n	8000f5c <Brett_VL53L0X_FinishMultiSensing+0x46>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d103      	bne.n	8000f5c <Brett_VL53L0X_FinishMultiSensing+0x46>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2203      	movs	r2, #3
 8000f58:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e

	if (Status == VL53L0X_ERROR_NONE)
 8000f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d105      	bne.n	8000f70 <Brett_VL53L0X_FinishMultiSensing+0x5a>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8000f64:	6839      	ldr	r1, [r7, #0]
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f004 faca 	bl	8005500 <VL53L0X_GetRangingMeasurementData>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8000f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d105      	bne.n	8000f84 <Brett_VL53L0X_FinishMultiSensing+0x6e>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f004 fd6e 	bl	8005a5c <VL53L0X_ClearInterruptMask>
 8000f80:	4603      	mov	r3, r0
 8000f82:	73fb      	strb	r3, [r7, #15]

	return Status;
 8000f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <Brett_IR_StartMulti>:

int Brett_IR_StartMulti(VL53L0X_Dev_t devs[], int distances[], int howManyDevs)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b090      	sub	sp, #64	; 0x40
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	int bretts_status = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53L0_DEV Dev;

	// first start each dev measuring
	for (int i = 0; i < howManyDevs; i++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000faa:	e020      	b.n	8000fee <Brett_IR_StartMulti+0x5e>
	{
		// set point to a dev
		Dev = &devs[i];
 8000fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fae:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8000fb2:	fb02 f303 	mul.w	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4413      	add	r3, r2
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c

		// start sensing
		Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fc0:	f003 fc12 	bl	80047e8 <VL53L0X_SetDeviceMode>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		Status = Brett_VL53L0X_StartMultiSensing(Dev);
 8000fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fcc:	f7ff ff88 	bl	8000ee0 <Brett_VL53L0X_StartMultiSensing>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		// return if error happened
		if (Status != VL53L0X_ERROR_NONE)
 8000fd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d004      	beq.n	8000fe8 <Brett_IR_StartMulti+0x58>
			return bretts_status = -1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe6:	e03e      	b.n	8001066 <Brett_IR_StartMulti+0xd6>
	for (int i = 0; i < howManyDevs; i++)
 8000fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fea:	3301      	adds	r3, #1
 8000fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	dbda      	blt.n	8000fac <Brett_IR_StartMulti+0x1c>
	}

	// finally wait for each dev to finish, then store data received
	for (int i = 0; i < howManyDevs; i++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ffa:	e02f      	b.n	800105c <Brett_IR_StartMulti+0xcc>
	{
		// data struct IRs use
		VL53L0X_RangingMeasurementData_t RangingMeasurementData;

		// point to a dev
		Dev = &devs[i];
 8000ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ffe:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c

		// get data from sensor
		Status = Brett_VL53L0X_FinishMultiSensing(Dev, &RangingMeasurementData);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001014:	f7ff ff7f 	bl	8000f16 <Brett_VL53L0X_FinishMultiSensing>
 8001018:	4603      	mov	r3, r0
 800101a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		// if range status isnt 0 then assume max distance
		if (RangingMeasurementData.RangeStatus != 0)
 800101e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <Brett_IR_StartMulti+0xa6>
			distances[i] = 8100;
 8001026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	f641 72a4 	movw	r2, #8100	; 0x1fa4
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e006      	b.n	8001044 <Brett_IR_StartMulti+0xb4>
		else
			distances[i] = RangingMeasurementData.RangeMilliMeter;
 8001036:	8b39      	ldrh	r1, [r7, #24]
 8001038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	4413      	add	r3, r2
 8001040:	460a      	mov	r2, r1
 8001042:	601a      	str	r2, [r3, #0]

		// return if error happened
		if (Status != VL53L0X_ERROR_NONE)
 8001044:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <Brett_IR_StartMulti+0xc6>
			return bretts_status = -2;
 800104c:	f06f 0301 	mvn.w	r3, #1
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
 8001052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001054:	e007      	b.n	8001066 <Brett_IR_StartMulti+0xd6>
	for (int i = 0; i < howManyDevs; i++)
 8001056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001058:	3301      	adds	r3, #1
 800105a:	63bb      	str	r3, [r7, #56]	; 0x38
 800105c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbcb      	blt.n	8000ffc <Brett_IR_StartMulti+0x6c>
	}

	return bretts_status;
 8001064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001066:	4618      	mov	r0, r3
 8001068:	3740      	adds	r7, #64	; 0x40
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <Brett_IR_InitIrSensor>:

// !!FUCNTION NOT COMPLETE YET!!
// uses random GPIO
int Brett_IR_InitIrSensor(VL53L0X_Dev_t devs[], I2C_HandleTypeDef *i2c, int howManyDevs)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;
	uint8_t newi2c = 0x52;
 8001082:	2352      	movs	r3, #82	; 0x52
 8001084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	int bretts_status = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < howManyDevs; i++)
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
 8001090:	e0c0      	b.n	8001214 <Brett_IR_InitIrSensor+0x1a4>
	{
		// point to dev
		VL53L0_DEV	Dev;
		Dev = &devs[i];
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001098:	fb02 f303 	mul.w	r3, r2, r3
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]

		// FOR TESTING ONLY
		// turn on XSHUT
		if (i == 0)
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d105      	bne.n	80010b4 <Brett_IR_InitIrSensor+0x44>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2180      	movs	r1, #128	; 0x80
 80010ac:	485e      	ldr	r0, [pc, #376]	; (8001228 <Brett_IR_InitIrSensor+0x1b8>)
 80010ae:	f000 ff71 	bl	8001f94 <HAL_GPIO_WritePin>
 80010b2:	e005      	b.n	80010c0 <Brett_IR_InitIrSensor+0x50>
		else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ba:	485b      	ldr	r0, [pc, #364]	; (8001228 <Brett_IR_InitIrSensor+0x1b8>)
 80010bc:	f000 ff6a 	bl	8001f94 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80010c0:	200a      	movs	r0, #10
 80010c2:	f000 fcc9 	bl	8001a58 <HAL_Delay>

		// general dev inits
		Dev->comms_type =  1;
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		Dev->I2cDevAddr = 0x52;
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	2252      	movs	r2, #82	; 0x52
 80010d2:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
		Dev->I2cHandle = i2c;
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		Dev->comms_speed_khz = 100;
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	2264      	movs	r2, #100	; 0x64
 80010e2:	f8a3 218a 	strh.w	r2, [r3, #394]	; 0x18a

		// i2c address setting
		newi2c = Dev->I2cDevAddr + (i + 1) * 2;
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	3301      	adds	r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	4413      	add	r3, r2
 80010f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		status = VL53L0X_SetDeviceAddress(Dev, newi2c);
 80010fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001100:	4619      	mov	r1, r3
 8001102:	69b8      	ldr	r0, [r7, #24]
 8001104:	f002 ff89 	bl	800401a <VL53L0X_SetDeviceAddress>
 8001108:	4603      	mov	r3, r0
 800110a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (status != VL53L0X_ERROR_NONE)
 800110e:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001112:	2b00      	cmp	r3, #0
 8001114:	d004      	beq.n	8001120 <Brett_IR_InitIrSensor+0xb0>
			return bretts_status = -3;
 8001116:	f06f 0302 	mvn.w	r3, #2
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	e07f      	b.n	8001220 <Brett_IR_InitIrSensor+0x1b0>
		Dev->I2cDevAddr = newi2c;
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001126:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180

		// base init for all IR devs
		status = VL53L0X_WaitDeviceBooted( Dev );
 800112a:	69b8      	ldr	r0, [r7, #24]
 800112c:	f003 fa98 	bl	8004660 <VL53L0X_WaitDeviceBooted>
 8001130:	4603      	mov	r3, r0
 8001132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_DataInit( Dev );
 8001136:	69b8      	ldr	r0, [r7, #24]
 8001138:	f002 ff88 	bl	800404c <VL53L0X_DataInit>
 800113c:	4603      	mov	r3, r0
 800113e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_StaticInit( Dev );
 8001142:	69b8      	ldr	r0, [r7, #24]
 8001144:	f003 f908 	bl	8004358 <VL53L0X_StaticInit>
 8001148:	4603      	mov	r3, r0
 800114a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 800114e:	f107 0211 	add.w	r2, r7, #17
 8001152:	f107 0312 	add.w	r3, r7, #18
 8001156:	4619      	mov	r1, r3
 8001158:	69b8      	ldr	r0, [r7, #24]
 800115a:	f003 ffc7 	bl	80050ec <VL53L0X_PerformRefCalibration>
 800115e:	4603      	mov	r3, r0
 8001160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8001164:	f107 0213 	add.w	r2, r7, #19
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	69b8      	ldr	r0, [r7, #24]
 8001170:	f004 fcd6 	bl	8005b20 <VL53L0X_PerformRefSpadManagement>
 8001174:	4603      	mov	r3, r0
 8001176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800117a:	2100      	movs	r1, #0
 800117c:	69b8      	ldr	r0, [r7, #24]
 800117e:	f003 fb33 	bl	80047e8 <VL53L0X_SetDeviceMode>
 8001182:	4603      	mov	r3, r0
 8001184:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		// we can break this out later
		// init for long ranging mode
		status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8001188:	2201      	movs	r2, #1
 800118a:	2100      	movs	r1, #0
 800118c:	69b8      	ldr	r0, [r7, #24]
 800118e:	f003 fda7 	bl	8004ce0 <VL53L0X_SetLimitCheckEnable>
 8001192:	4603      	mov	r3, r0
 8001194:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8001198:	2201      	movs	r2, #1
 800119a:	2101      	movs	r1, #1
 800119c:	69b8      	ldr	r0, [r7, #24]
 800119e:	f003 fd9f 	bl	8004ce0 <VL53L0X_SetLimitCheckEnable>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80011a8:	f641 1299 	movw	r2, #6553	; 0x1999
 80011ac:	2101      	movs	r1, #1
 80011ae:	69b8      	ldr	r0, [r7, #24]
 80011b0:	f003 fe46 	bl	8004e40 <VL53L0X_SetLimitCheckValue>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80011ba:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80011be:	2100      	movs	r1, #0
 80011c0:	69b8      	ldr	r0, [r7, #24]
 80011c2:	f003 fe3d 	bl	8004e40 <VL53L0X_SetLimitCheckValue>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 80011cc:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80011d0:	69b8      	ldr	r0, [r7, #24]
 80011d2:	f003 fb67 	bl	80048a4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80011dc:	2212      	movs	r2, #18
 80011de:	2100      	movs	r1, #0
 80011e0:	69b8      	ldr	r0, [r7, #24]
 80011e2:	f003 fb85 	bl	80048f0 <VL53L0X_SetVcselPulsePeriod>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80011ec:	220e      	movs	r2, #14
 80011ee:	2101      	movs	r1, #1
 80011f0:	69b8      	ldr	r0, [r7, #24]
 80011f2:	f003 fb7d 	bl	80048f0 <VL53L0X_SetVcselPulsePeriod>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		// one last status check
		if (status != VL53L0X_ERROR_NONE)
 80011fc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8001200:	2b00      	cmp	r3, #0
 8001202:	d004      	beq.n	800120e <Brett_IR_InitIrSensor+0x19e>
			return bretts_status = -4;
 8001204:	f06f 0303 	mvn.w	r3, #3
 8001208:	61fb      	str	r3, [r7, #28]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	e008      	b.n	8001220 <Brett_IR_InitIrSensor+0x1b0>
	for (int i = 0; i < howManyDevs; i++)
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	3301      	adds	r3, #1
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
 8001214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	429a      	cmp	r2, r3
 800121a:	f6ff af3a 	blt.w	8001092 <Brett_IR_InitIrSensor+0x22>
	}
	return bretts_status;
 800121e:	69fb      	ldr	r3, [r7, #28]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40020000 	.word	0x40020000

0800122c <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8001234:	1d39      	adds	r1, r7, #4
 8001236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800123a:	2201      	movs	r2, #1
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <__io_putchar+0x20>)
 800123e:	f002 fc10 	bl	8003a62 <HAL_UART_Transmit>
	return ch;
 8001242:	687b      	ldr	r3, [r7, #4]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000838 	.word	0x20000838

08001250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001254:	f000 fb8e 	bl	8001974 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001258:	f000 f854 	bl	8001304 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800125c:	f000 f918 	bl	8001490 <MX_GPIO_Init>
	MX_I2C2_Init();
 8001260:	f000 f8be 	bl	80013e0 <MX_I2C2_Init>
	MX_USART2_UART_Init();
 8001264:	f000 f8ea 	bl	800143c <MX_USART2_UART_Init>

	// init IRs
	brett_status = Brett_IR_InitIrSensor(devs, &hi2c2, howManyDevs);
 8001268:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <main+0x90>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	461a      	mov	r2, r3
 800126e:	491d      	ldr	r1, [pc, #116]	; (80012e4 <main+0x94>)
 8001270:	481d      	ldr	r0, [pc, #116]	; (80012e8 <main+0x98>)
 8001272:	f7ff fefd 	bl	8001070 <Brett_IR_InitIrSensor>
 8001276:	4603      	mov	r3, r0
 8001278:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <main+0x9c>)
 800127a:	6013      	str	r3, [r2, #0]
	if (brett_status != 0)
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <main+0x9c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d005      	beq.n	8001290 <main+0x40>
		printf("brett status %i\n\r", brett_status);
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <main+0x9c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	4819      	ldr	r0, [pc, #100]	; (80012f0 <main+0xa0>)
 800128c:	f009 f83c 	bl	800a308 <iprintf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		brett_status = Brett_IR_StartMulti(devs, distances, howManyDevs);
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <main+0x90>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4917      	ldr	r1, [pc, #92]	; (80012f4 <main+0xa4>)
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <main+0x98>)
 800129a:	f7ff fe79 	bl	8000f90 <Brett_IR_StartMulti>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a12      	ldr	r2, [pc, #72]	; (80012ec <main+0x9c>)
 80012a2:	6013      	str	r3, [r2, #0]
		if (brett_status != 0)
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <main+0x9c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <main+0x68>
			printf("brett status %i\n\r", brett_status);
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <main+0x9c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	480f      	ldr	r0, [pc, #60]	; (80012f0 <main+0xa0>)
 80012b4:	f009 f828 	bl	800a308 <iprintf>
		printf("distance 1 %i\n\r", distances[0]);
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <main+0xa4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	480e      	ldr	r0, [pc, #56]	; (80012f8 <main+0xa8>)
 80012c0:	f009 f822 	bl	800a308 <iprintf>
		printf("distance 2 %i\n\r", distances[1]);
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <main+0xa4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4619      	mov	r1, r3
 80012ca:	480c      	ldr	r0, [pc, #48]	; (80012fc <main+0xac>)
 80012cc:	f009 f81c 	bl	800a308 <iprintf>
		printf("\n\r");
 80012d0:	480b      	ldr	r0, [pc, #44]	; (8001300 <main+0xb0>)
 80012d2:	f009 f819 	bl	800a308 <iprintf>
		HAL_Delay(1000);
 80012d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012da:	f000 fbbd 	bl	8001a58 <HAL_Delay>
		brett_status = Brett_IR_StartMulti(devs, distances, howManyDevs);
 80012de:	e7d7      	b.n	8001290 <main+0x40>
 80012e0:	20000000 	.word	0x20000000
 80012e4:	200004c8 	.word	0x200004c8
 80012e8:	20000520 	.word	0x20000520
 80012ec:	200004b8 	.word	0x200004b8
 80012f0:	0800bb98 	.word	0x0800bb98
 80012f4:	2000087c 	.word	0x2000087c
 80012f8:	0800bbac 	.word	0x0800bbac
 80012fc:	0800bbbc 	.word	0x0800bbbc
 8001300:	0800bbcc 	.word	0x0800bbcc

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b094      	sub	sp, #80	; 0x50
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	2234      	movs	r2, #52	; 0x34
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f008 f982 	bl	800961c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	f107 0308 	add.w	r3, r7, #8
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b2a      	ldr	r3, [pc, #168]	; (80013d8 <SystemClock_Config+0xd4>)
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	4a29      	ldr	r2, [pc, #164]	; (80013d8 <SystemClock_Config+0xd4>)
 8001332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001336:	6413      	str	r3, [r2, #64]	; 0x40
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <SystemClock_Config+0xd4>)
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001344:	2300      	movs	r3, #0
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <SystemClock_Config+0xd8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001350:	4a22      	ldr	r2, [pc, #136]	; (80013dc <SystemClock_Config+0xd8>)
 8001352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001356:	6013      	str	r3, [r2, #0]
 8001358:	4b20      	ldr	r3, [pc, #128]	; (80013dc <SystemClock_Config+0xd8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001364:	2302      	movs	r3, #2
 8001366:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001368:	2301      	movs	r3, #1
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136c:	2310      	movs	r3, #16
 800136e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001370:	2302      	movs	r3, #2
 8001372:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001374:	2300      	movs	r3, #0
 8001376:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001378:	2310      	movs	r3, #16
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800137c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001380:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001382:	2304      	movs	r3, #4
 8001384:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001386:	2302      	movs	r3, #2
 8001388:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800138a:	2302      	movs	r3, #2
 800138c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138e:	f107 031c 	add.w	r3, r7, #28
 8001392:	4618      	mov	r0, r3
 8001394:	f002 f87a 	bl	800348c <HAL_RCC_OscConfig>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800139e:	f000 f8dd 	bl	800155c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a2:	230f      	movs	r3, #15
 80013a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a6:	2302      	movs	r3, #2
 80013a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013b8:	f107 0308 	add.w	r3, r7, #8
 80013bc:	2102      	movs	r1, #2
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 fd98 	bl	8002ef4 <HAL_RCC_ClockConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013ca:	f000 f8c7 	bl	800155c <Error_Handler>
  }
}
 80013ce:	bf00      	nop
 80013d0:	3750      	adds	r7, #80	; 0x50
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <MX_I2C2_Init+0x50>)
 80013e6:	4a13      	ldr	r2, [pc, #76]	; (8001434 <MX_I2C2_Init+0x54>)
 80013e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_I2C2_Init+0x50>)
 80013ec:	4a12      	ldr	r2, [pc, #72]	; (8001438 <MX_I2C2_Init+0x58>)
 80013ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_I2C2_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_I2C2_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_I2C2_Init+0x50>)
 80013fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001402:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <MX_I2C2_Init+0x50>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_I2C2_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <MX_I2C2_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_I2C2_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_I2C2_Init+0x50>)
 800141e:	f000 fdd3 	bl	8001fc8 <HAL_I2C_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001428:	f000 f898 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200004c8 	.word	0x200004c8
 8001434:	40005800 	.word	0x40005800
 8001438:	000186a0 	.word	0x000186a0

0800143c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <MX_USART2_UART_Init+0x50>)
 8001444:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_USART2_UART_Init+0x4c>)
 8001474:	f002 faa8 	bl	80039c8 <HAL_UART_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800147e:	f000 f86d 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000838 	.word	0x20000838
 800148c:	40004400 	.word	0x40004400

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <MX_GPIO_Init+0xc4>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a29      	ldr	r2, [pc, #164]	; (8001554 <MX_GPIO_Init+0xc4>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b27      	ldr	r3, [pc, #156]	; (8001554 <MX_GPIO_Init+0xc4>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b23      	ldr	r3, [pc, #140]	; (8001554 <MX_GPIO_Init+0xc4>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a22      	ldr	r2, [pc, #136]	; (8001554 <MX_GPIO_Init+0xc4>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b20      	ldr	r3, [pc, #128]	; (8001554 <MX_GPIO_Init+0xc4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4b1c      	ldr	r3, [pc, #112]	; (8001554 <MX_GPIO_Init+0xc4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a1b      	ldr	r2, [pc, #108]	; (8001554 <MX_GPIO_Init+0xc4>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b19      	ldr	r3, [pc, #100]	; (8001554 <MX_GPIO_Init+0xc4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	4816      	ldr	r0, [pc, #88]	; (8001558 <MX_GPIO_Init+0xc8>)
 8001500:	f000 fd48 	bl	8001f94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150a:	4813      	ldr	r0, [pc, #76]	; (8001558 <MX_GPIO_Init+0xc8>)
 800150c:	f000 fd42 	bl	8001f94 <HAL_GPIO_WritePin>

	// d1pin
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <MX_GPIO_Init+0xc8>)
 8001528:	f000 fba0 	bl	8001c6c <HAL_GPIO_Init>

	// d2pin
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800152c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001530:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4619      	mov	r1, r3
 8001544:	4804      	ldr	r0, [pc, #16]	; (8001558 <MX_GPIO_Init+0xc8>)
 8001546:	f000 fb91 	bl	8001c6c <HAL_GPIO_Init>

}
 800154a:	bf00      	nop
 800154c:	3720      	adds	r7, #32
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40020000 	.word	0x40020000

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	e7fe      	b.n	8001564 <Error_Handler+0x8>
	...

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <HAL_MspInit+0x4c>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <HAL_MspInit+0x4c>)
 8001578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800157c:	6453      	str	r3, [r2, #68]	; 0x44
 800157e:	4b0d      	ldr	r3, [pc, #52]	; (80015b4 <HAL_MspInit+0x4c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	603b      	str	r3, [r7, #0]
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <HAL_MspInit+0x4c>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_MspInit+0x4c>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_MspInit+0x4c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	603b      	str	r3, [r7, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015a6:	2007      	movs	r0, #7
 80015a8:	f000 fb2c 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a29      	ldr	r2, [pc, #164]	; (800167c <HAL_I2C_MspInit+0xc4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d14b      	bne.n	8001672 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b28      	ldr	r3, [pc, #160]	; (8001680 <HAL_I2C_MspInit+0xc8>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_I2C_MspInit+0xc8>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b25      	ldr	r3, [pc, #148]	; (8001680 <HAL_I2C_MspInit+0xc8>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b21      	ldr	r3, [pc, #132]	; (8001680 <HAL_I2C_MspInit+0xc8>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a20      	ldr	r2, [pc, #128]	; (8001680 <HAL_I2C_MspInit+0xc8>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_I2C_MspInit+0xc8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001618:	2312      	movs	r3, #18
 800161a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001620:	2303      	movs	r3, #3
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001624:	2304      	movs	r3, #4
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	4815      	ldr	r0, [pc, #84]	; (8001684 <HAL_I2C_MspInit+0xcc>)
 8001630:	f000 fb1c 	bl	8001c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800163a:	2312      	movs	r3, #18
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001646:	2304      	movs	r3, #4
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <HAL_I2C_MspInit+0xd0>)
 8001652:	f000 fb0b 	bl	8001c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_I2C_MspInit+0xc8>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	4a08      	ldr	r2, [pc, #32]	; (8001680 <HAL_I2C_MspInit+0xc8>)
 8001660:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001664:	6413      	str	r3, [r2, #64]	; 0x40
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_I2C_MspInit+0xc8>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40005800 	.word	0x40005800
 8001680:	40023800 	.word	0x40023800
 8001684:	40020400 	.word	0x40020400
 8001688:	40020800 	.word	0x40020800

0800168c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a19      	ldr	r2, [pc, #100]	; (8001710 <HAL_UART_MspInit+0x84>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d12b      	bne.n	8001706 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_UART_MspInit+0x88>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HAL_UART_MspInit+0x88>)
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_UART_MspInit+0x88>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_UART_MspInit+0x88>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a10      	ldr	r2, [pc, #64]	; (8001714 <HAL_UART_MspInit+0x88>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_UART_MspInit+0x88>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016e6:	230c      	movs	r3, #12
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016f6:	2307      	movs	r3, #7
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	4805      	ldr	r0, [pc, #20]	; (8001718 <HAL_UART_MspInit+0x8c>)
 8001702:	f000 fab3 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40004400 	.word	0x40004400
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <NMI_Handler+0x4>

08001722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <HardFault_Handler+0x4>

08001728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <MemManage_Handler+0x4>

0800172e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <UsageFault_Handler+0x4>

0800173a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001768:	f000 f956 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	return 1;
 8001774:	2301      	movs	r3, #1
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_kill>:

int _kill(int pid, int sig)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800178a:	f007 fcd5 	bl	8009138 <__errno>
 800178e:	4603      	mov	r3, r0
 8001790:	2216      	movs	r2, #22
 8001792:	601a      	str	r2, [r3, #0]
	return -1;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_exit>:

void _exit (int status)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ffe7 	bl	8001780 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017b2:	e7fe      	b.n	80017b2 <_exit+0x12>

080017b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e00a      	b.n	80017dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017c6:	f3af 8000 	nop.w
 80017ca:	4601      	mov	r1, r0
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60ba      	str	r2, [r7, #8]
 80017d2:	b2ca      	uxtb	r2, r1
 80017d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbf0      	blt.n	80017c6 <_read+0x12>
	}

return len;
 80017e4:	687b      	ldr	r3, [r7, #4]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <_write>:



__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	e009      	b.n	8001814 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	60ba      	str	r2, [r7, #8]
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fd0f 	bl	800122c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf1      	blt.n	8001800 <_write+0x12>
	}
	return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_close>:

int _close(int file)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
	return -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800184e:	605a      	str	r2, [r3, #4]
	return 0;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <_isatty>:

int _isatty(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
	return 1;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
	return 0;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001898:	4a14      	ldr	r2, [pc, #80]	; (80018ec <_sbrk+0x5c>)
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <_sbrk+0x60>)
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <_sbrk+0x64>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <_sbrk+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d207      	bcs.n	80018d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c0:	f007 fc3a 	bl	8009138 <__errno>
 80018c4:	4603      	mov	r3, r0
 80018c6:	220c      	movs	r2, #12
 80018c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	e009      	b.n	80018e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <_sbrk+0x64>)
 80018e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20020000 	.word	0x20020000
 80018f0:	00000400 	.word	0x00000400
 80018f4:	200004bc 	.word	0x200004bc
 80018f8:	200008d8 	.word	0x200008d8

080018fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <SystemInit+0x20>)
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <SystemInit+0x20>)
 8001908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800190c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001920:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001958 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001924:	480d      	ldr	r0, [pc, #52]	; (800195c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001926:	490e      	ldr	r1, [pc, #56]	; (8001960 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001928:	4a0e      	ldr	r2, [pc, #56]	; (8001964 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800192c:	e002      	b.n	8001934 <LoopCopyDataInit>

0800192e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001932:	3304      	adds	r3, #4

08001934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001938:	d3f9      	bcc.n	800192e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800193c:	4c0b      	ldr	r4, [pc, #44]	; (800196c <LoopFillZerobss+0x26>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001940:	e001      	b.n	8001946 <LoopFillZerobss>

08001942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001944:	3204      	adds	r2, #4

08001946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001948:	d3fb      	bcc.n	8001942 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800194a:	f7ff ffd7 	bl	80018fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194e:	f007 fdc3 	bl	80094d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001952:	f7ff fc7d 	bl	8001250 <main>
  bx  lr    
 8001956:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001958:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800195c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001960:	2000049c 	.word	0x2000049c
  ldr r2, =_sidata
 8001964:	0800bfdc 	.word	0x0800bfdc
  ldr r2, =_sbss
 8001968:	2000049c 	.word	0x2000049c
  ldr r4, =_ebss
 800196c:	200008d8 	.word	0x200008d8

08001970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001970:	e7fe      	b.n	8001970 <ADC_IRQHandler>
	...

08001974 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <HAL_Init+0x40>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <HAL_Init+0x40>)
 800197e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001982:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <HAL_Init+0x40>)
 800198a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a07      	ldr	r2, [pc, #28]	; (80019b4 <HAL_Init+0x40>)
 8001996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800199c:	2003      	movs	r0, #3
 800199e:	f000 f931 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f000 f808 	bl	80019b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a8:	f7ff fdde 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023c00 	.word	0x40023c00

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_InitTick+0x54>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x58>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f93b 	bl	8001c52 <HAL_SYSTICK_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00e      	b.n	8001a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d80a      	bhi.n	8001a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ec:	2200      	movs	r2, #0
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f000 f911 	bl	8001c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f8:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <HAL_InitTick+0x5c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000004 	.word	0x20000004
 8001a10:	2000000c 	.word	0x2000000c
 8001a14:	20000008 	.word	0x20000008

08001a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x20>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_IncTick+0x24>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	2000000c 	.word	0x2000000c
 8001a3c:	20000884 	.word	0x20000884

08001a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_GetTick+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20000884 	.word	0x20000884

08001a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff ffee 	bl	8001a40 <HAL_GetTick>
 8001a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d005      	beq.n	8001a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_Delay+0x44>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a7e:	bf00      	nop
 8001a80:	f7ff ffde 	bl	8001a40 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d8f7      	bhi.n	8001a80 <HAL_Delay+0x28>
  {
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000000c 	.word	0x2000000c

08001aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001abc:	4013      	ands	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ad2:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60d3      	str	r3, [r2, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <__NVIC_GetPriorityGrouping+0x18>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	f003 0307 	and.w	r3, r3, #7
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f7ff ff8e 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff47 	bl	8001aa0 <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff5c 	bl	8001ae8 <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff8e 	bl	8001b58 <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff5d 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffb0 	bl	8001bc0 <SysTick_Config>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e165      	b.n	8001f54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	f040 8154 	bne.w	8001f4e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d005      	beq.n	8001cbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d130      	bne.n	8001d20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 0201 	and.w	r2, r3, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d017      	beq.n	8001d5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d123      	bne.n	8001db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	08da      	lsrs	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3208      	adds	r2, #8
 8001d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	220f      	movs	r2, #15
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	69b9      	ldr	r1, [r7, #24]
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0203 	and.w	r2, r3, #3
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80ae 	beq.w	8001f4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b5d      	ldr	r3, [pc, #372]	; (8001f6c <HAL_GPIO_Init+0x300>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a5c      	ldr	r2, [pc, #368]	; (8001f6c <HAL_GPIO_Init+0x300>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b5a      	ldr	r3, [pc, #360]	; (8001f6c <HAL_GPIO_Init+0x300>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0e:	4a58      	ldr	r2, [pc, #352]	; (8001f70 <HAL_GPIO_Init+0x304>)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4f      	ldr	r2, [pc, #316]	; (8001f74 <HAL_GPIO_Init+0x308>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d025      	beq.n	8001e86 <HAL_GPIO_Init+0x21a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4e      	ldr	r2, [pc, #312]	; (8001f78 <HAL_GPIO_Init+0x30c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01f      	beq.n	8001e82 <HAL_GPIO_Init+0x216>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4d      	ldr	r2, [pc, #308]	; (8001f7c <HAL_GPIO_Init+0x310>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d019      	beq.n	8001e7e <HAL_GPIO_Init+0x212>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4c      	ldr	r2, [pc, #304]	; (8001f80 <HAL_GPIO_Init+0x314>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_GPIO_Init+0x20e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4b      	ldr	r2, [pc, #300]	; (8001f84 <HAL_GPIO_Init+0x318>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d00d      	beq.n	8001e76 <HAL_GPIO_Init+0x20a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4a      	ldr	r2, [pc, #296]	; (8001f88 <HAL_GPIO_Init+0x31c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d007      	beq.n	8001e72 <HAL_GPIO_Init+0x206>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a49      	ldr	r2, [pc, #292]	; (8001f8c <HAL_GPIO_Init+0x320>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d101      	bne.n	8001e6e <HAL_GPIO_Init+0x202>
 8001e6a:	2306      	movs	r3, #6
 8001e6c:	e00c      	b.n	8001e88 <HAL_GPIO_Init+0x21c>
 8001e6e:	2307      	movs	r3, #7
 8001e70:	e00a      	b.n	8001e88 <HAL_GPIO_Init+0x21c>
 8001e72:	2305      	movs	r3, #5
 8001e74:	e008      	b.n	8001e88 <HAL_GPIO_Init+0x21c>
 8001e76:	2304      	movs	r3, #4
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x21c>
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e004      	b.n	8001e88 <HAL_GPIO_Init+0x21c>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e002      	b.n	8001e88 <HAL_GPIO_Init+0x21c>
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_GPIO_Init+0x21c>
 8001e86:	2300      	movs	r3, #0
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	f002 0203 	and.w	r2, r2, #3
 8001e8e:	0092      	lsls	r2, r2, #2
 8001e90:	4093      	lsls	r3, r2
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e98:	4935      	ldr	r1, [pc, #212]	; (8001f70 <HAL_GPIO_Init+0x304>)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	089b      	lsrs	r3, r3, #2
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eca:	4a31      	ldr	r2, [pc, #196]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ed0:	4b2f      	ldr	r3, [pc, #188]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ef4:	4a26      	ldr	r2, [pc, #152]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efa:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f48:	4a11      	ldr	r2, [pc, #68]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3301      	adds	r3, #1
 8001f52:	61fb      	str	r3, [r7, #28]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	2b0f      	cmp	r3, #15
 8001f58:	f67f ae96 	bls.w	8001c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	bf00      	nop
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40013800 	.word	0x40013800
 8001f74:	40020000 	.word	0x40020000
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	40020800 	.word	0x40020800
 8001f80:	40020c00 	.word	0x40020c00
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40021400 	.word	0x40021400
 8001f8c:	40021800 	.word	0x40021800
 8001f90:	40013c00 	.word	0x40013c00

08001f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fa4:	787b      	ldrb	r3, [r7, #1]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fb0:	e003      	b.n	8001fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	041a      	lsls	r2, r3, #16
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	619a      	str	r2, [r3, #24]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e12b      	b.n	8002232 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d106      	bne.n	8001ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fae2 	bl	80015b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2224      	movs	r2, #36	; 0x24
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800201a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800202a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800202c:	f001 f854 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8002030:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4a81      	ldr	r2, [pc, #516]	; (800223c <HAL_I2C_Init+0x274>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d807      	bhi.n	800204c <HAL_I2C_Init+0x84>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a80      	ldr	r2, [pc, #512]	; (8002240 <HAL_I2C_Init+0x278>)
 8002040:	4293      	cmp	r3, r2
 8002042:	bf94      	ite	ls
 8002044:	2301      	movls	r3, #1
 8002046:	2300      	movhi	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	e006      	b.n	800205a <HAL_I2C_Init+0x92>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a7d      	ldr	r2, [pc, #500]	; (8002244 <HAL_I2C_Init+0x27c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	bf94      	ite	ls
 8002054:	2301      	movls	r3, #1
 8002056:	2300      	movhi	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e0e7      	b.n	8002232 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4a78      	ldr	r2, [pc, #480]	; (8002248 <HAL_I2C_Init+0x280>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0c9b      	lsrs	r3, r3, #18
 800206c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	430a      	orrs	r2, r1
 8002080:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4a6a      	ldr	r2, [pc, #424]	; (800223c <HAL_I2C_Init+0x274>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d802      	bhi.n	800209c <HAL_I2C_Init+0xd4>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3301      	adds	r3, #1
 800209a:	e009      	b.n	80020b0 <HAL_I2C_Init+0xe8>
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020a2:	fb02 f303 	mul.w	r3, r2, r3
 80020a6:	4a69      	ldr	r2, [pc, #420]	; (800224c <HAL_I2C_Init+0x284>)
 80020a8:	fba2 2303 	umull	r2, r3, r2, r3
 80020ac:	099b      	lsrs	r3, r3, #6
 80020ae:	3301      	adds	r3, #1
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	6812      	ldr	r2, [r2, #0]
 80020b4:	430b      	orrs	r3, r1
 80020b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	495c      	ldr	r1, [pc, #368]	; (800223c <HAL_I2C_Init+0x274>)
 80020cc:	428b      	cmp	r3, r1
 80020ce:	d819      	bhi.n	8002104 <HAL_I2C_Init+0x13c>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e59      	subs	r1, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fbb1 f3f3 	udiv	r3, r1, r3
 80020de:	1c59      	adds	r1, r3, #1
 80020e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020e4:	400b      	ands	r3, r1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HAL_I2C_Init+0x138>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1e59      	subs	r1, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020f8:	3301      	adds	r3, #1
 80020fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fe:	e051      	b.n	80021a4 <HAL_I2C_Init+0x1dc>
 8002100:	2304      	movs	r3, #4
 8002102:	e04f      	b.n	80021a4 <HAL_I2C_Init+0x1dc>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d111      	bne.n	8002130 <HAL_I2C_Init+0x168>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1e58      	subs	r0, r3, #1
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6859      	ldr	r1, [r3, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	440b      	add	r3, r1
 800211a:	fbb0 f3f3 	udiv	r3, r0, r3
 800211e:	3301      	adds	r3, #1
 8002120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	e012      	b.n	8002156 <HAL_I2C_Init+0x18e>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1e58      	subs	r0, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	0099      	lsls	r1, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	fbb0 f3f3 	udiv	r3, r0, r3
 8002146:	3301      	adds	r3, #1
 8002148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf0c      	ite	eq
 8002150:	2301      	moveq	r3, #1
 8002152:	2300      	movne	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_I2C_Init+0x196>
 800215a:	2301      	movs	r3, #1
 800215c:	e022      	b.n	80021a4 <HAL_I2C_Init+0x1dc>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10e      	bne.n	8002184 <HAL_I2C_Init+0x1bc>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1e58      	subs	r0, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6859      	ldr	r1, [r3, #4]
 800216e:	460b      	mov	r3, r1
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	440b      	add	r3, r1
 8002174:	fbb0 f3f3 	udiv	r3, r0, r3
 8002178:	3301      	adds	r3, #1
 800217a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002182:	e00f      	b.n	80021a4 <HAL_I2C_Init+0x1dc>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1e58      	subs	r0, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	0099      	lsls	r1, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	fbb0 f3f3 	udiv	r3, r0, r3
 800219a:	3301      	adds	r3, #1
 800219c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	6809      	ldr	r1, [r1, #0]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69da      	ldr	r2, [r3, #28]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6911      	ldr	r1, [r2, #16]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68d2      	ldr	r2, [r2, #12]
 80021de:	4311      	orrs	r1, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	430b      	orrs	r3, r1
 80021e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2220      	movs	r2, #32
 800221e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	000186a0 	.word	0x000186a0
 8002240:	001e847f 	.word	0x001e847f
 8002244:	003d08ff 	.word	0x003d08ff
 8002248:	431bde83 	.word	0x431bde83
 800224c:	10624dd3 	.word	0x10624dd3

08002250 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af02      	add	r7, sp, #8
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	461a      	mov	r2, r3
 800225c:	460b      	mov	r3, r1
 800225e:	817b      	strh	r3, [r7, #10]
 8002260:	4613      	mov	r3, r2
 8002262:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002264:	f7ff fbec 	bl	8001a40 <HAL_GetTick>
 8002268:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b20      	cmp	r3, #32
 8002274:	f040 80e0 	bne.w	8002438 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	2319      	movs	r3, #25
 800227e:	2201      	movs	r2, #1
 8002280:	4970      	ldr	r1, [pc, #448]	; (8002444 <HAL_I2C_Master_Transmit+0x1f4>)
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fc58 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800228e:	2302      	movs	r3, #2
 8002290:	e0d3      	b.n	800243a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_I2C_Master_Transmit+0x50>
 800229c:	2302      	movs	r3, #2
 800229e:	e0cc      	b.n	800243a <HAL_I2C_Master_Transmit+0x1ea>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d007      	beq.n	80022c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f042 0201 	orr.w	r2, r2, #1
 80022c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2221      	movs	r2, #33	; 0x21
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2210      	movs	r2, #16
 80022e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	893a      	ldrh	r2, [r7, #8]
 80022f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4a50      	ldr	r2, [pc, #320]	; (8002448 <HAL_I2C_Master_Transmit+0x1f8>)
 8002306:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002308:	8979      	ldrh	r1, [r7, #10]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	6a3a      	ldr	r2, [r7, #32]
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 fac2 	bl	8002898 <I2C_MasterRequestWrite>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e08d      	b.n	800243a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002334:	e066      	b.n	8002404 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	6a39      	ldr	r1, [r7, #32]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 fcd2 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00d      	beq.n	8002362 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	2b04      	cmp	r3, #4
 800234c:	d107      	bne.n	800235e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e06b      	b.n	800243a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	781a      	ldrb	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b04      	cmp	r3, #4
 800239e:	d11b      	bne.n	80023d8 <HAL_I2C_Master_Transmit+0x188>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d017      	beq.n	80023d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d0:	3b01      	subs	r3, #1
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	6a39      	ldr	r1, [r7, #32]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fcc2 	bl	8002d66 <I2C_WaitOnBTFFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00d      	beq.n	8002404 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d107      	bne.n	8002400 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e01a      	b.n	800243a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	d194      	bne.n	8002336 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e000      	b.n	800243a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002438:	2302      	movs	r3, #2
  }
}
 800243a:	4618      	mov	r0, r3
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	00100002 	.word	0x00100002
 8002448:	ffff0000 	.word	0xffff0000

0800244c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	607a      	str	r2, [r7, #4]
 8002456:	461a      	mov	r2, r3
 8002458:	460b      	mov	r3, r1
 800245a:	817b      	strh	r3, [r7, #10]
 800245c:	4613      	mov	r3, r2
 800245e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002460:	f7ff faee 	bl	8001a40 <HAL_GetTick>
 8002464:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b20      	cmp	r3, #32
 8002470:	f040 820b 	bne.w	800288a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	2319      	movs	r3, #25
 800247a:	2201      	movs	r2, #1
 800247c:	497c      	ldr	r1, [pc, #496]	; (8002670 <HAL_I2C_Master_Receive+0x224>)
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 fb5a 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800248a:	2302      	movs	r3, #2
 800248c:	e1fe      	b.n	800288c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_I2C_Master_Receive+0x50>
 8002498:	2302      	movs	r3, #2
 800249a:	e1f7      	b.n	800288c <HAL_I2C_Master_Receive+0x440>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d007      	beq.n	80024c2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0201 	orr.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2222      	movs	r2, #34	; 0x22
 80024d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2210      	movs	r2, #16
 80024de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	893a      	ldrh	r2, [r7, #8]
 80024f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4a5c      	ldr	r2, [pc, #368]	; (8002674 <HAL_I2C_Master_Receive+0x228>)
 8002502:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002504:	8979      	ldrh	r1, [r7, #10]
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fa46 	bl	800299c <I2C_MasterRequestRead>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e1b8      	b.n	800288c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	2b00      	cmp	r3, #0
 8002520:	d113      	bne.n	800254a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	623b      	str	r3, [r7, #32]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	623b      	str	r3, [r7, #32]
 8002536:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e18c      	b.n	8002864 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	2b01      	cmp	r3, #1
 8002550:	d11b      	bne.n	800258a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002560:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e16c      	b.n	8002864 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	2b02      	cmp	r3, #2
 8002590:	d11b      	bne.n	80025ca <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	61bb      	str	r3, [r7, #24]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	e14c      	b.n	8002864 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	617b      	str	r3, [r7, #20]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025f0:	e138      	b.n	8002864 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	f200 80f1 	bhi.w	80027de <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002600:	2b01      	cmp	r3, #1
 8002602:	d123      	bne.n	800264c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002606:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 fbed 	bl	8002de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e139      	b.n	800288c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	1c5a      	adds	r2, r3, #1
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	3b01      	subs	r3, #1
 8002644:	b29a      	uxth	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	855a      	strh	r2, [r3, #42]	; 0x2a
 800264a:	e10b      	b.n	8002864 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002650:	2b02      	cmp	r3, #2
 8002652:	d14e      	bne.n	80026f2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265a:	2200      	movs	r2, #0
 800265c:	4906      	ldr	r1, [pc, #24]	; (8002678 <HAL_I2C_Master_Receive+0x22c>)
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 fa6a 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e10e      	b.n	800288c <HAL_I2C_Master_Receive+0x440>
 800266e:	bf00      	nop
 8002670:	00100002 	.word	0x00100002
 8002674:	ffff0000 	.word	0xffff0000
 8002678:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800268a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691a      	ldr	r2, [r3, #16]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691a      	ldr	r2, [r3, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	3b01      	subs	r3, #1
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026f0:	e0b8      	b.n	8002864 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f8:	2200      	movs	r2, #0
 80026fa:	4966      	ldr	r1, [pc, #408]	; (8002894 <HAL_I2C_Master_Receive+0x448>)
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 fa1b 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0bf      	b.n	800288c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002738:	3b01      	subs	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	2200      	movs	r2, #0
 8002756:	494f      	ldr	r1, [pc, #316]	; (8002894 <HAL_I2C_Master_Receive+0x448>)
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	f000 f9ed 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e091      	b.n	800288c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	3b01      	subs	r3, #1
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027dc:	e042      	b.n	8002864 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fb00 	bl	8002de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e04c      	b.n	800288c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	691a      	ldr	r2, [r3, #16]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b04      	cmp	r3, #4
 8002830:	d118      	bne.n	8002864 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284e:	3b01      	subs	r3, #1
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	2b00      	cmp	r3, #0
 800286a:	f47f aec2 	bne.w	80025f2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	e000      	b.n	800288c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800288a:	2302      	movs	r3, #2
  }
}
 800288c:	4618      	mov	r0, r3
 800288e:	3728      	adds	r7, #40	; 0x28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	00010004 	.word	0x00010004

08002898 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af02      	add	r7, sp, #8
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	460b      	mov	r3, r1
 80028a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d006      	beq.n	80028c2 <I2C_MasterRequestWrite+0x2a>
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d003      	beq.n	80028c2 <I2C_MasterRequestWrite+0x2a>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80028c0:	d108      	bne.n	80028d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e00b      	b.n	80028ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d8:	2b12      	cmp	r3, #18
 80028da:	d107      	bne.n	80028ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f91d 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00d      	beq.n	8002920 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002912:	d103      	bne.n	800291c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e035      	b.n	800298c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002928:	d108      	bne.n	800293c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800292a:	897b      	ldrh	r3, [r7, #10]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002938:	611a      	str	r2, [r3, #16]
 800293a:	e01b      	b.n	8002974 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800293c:	897b      	ldrh	r3, [r7, #10]
 800293e:	11db      	asrs	r3, r3, #7
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f003 0306 	and.w	r3, r3, #6
 8002946:	b2db      	uxtb	r3, r3
 8002948:	f063 030f 	orn	r3, r3, #15
 800294c:	b2da      	uxtb	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	490e      	ldr	r1, [pc, #56]	; (8002994 <I2C_MasterRequestWrite+0xfc>)
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 f943 	bl	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e010      	b.n	800298c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800296a:	897b      	ldrh	r3, [r7, #10]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	4907      	ldr	r1, [pc, #28]	; (8002998 <I2C_MasterRequestWrite+0x100>)
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f933 	bl	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	00010008 	.word	0x00010008
 8002998:	00010002 	.word	0x00010002

0800299c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	460b      	mov	r3, r1
 80029aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d006      	beq.n	80029d6 <I2C_MasterRequestRead+0x3a>
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d003      	beq.n	80029d6 <I2C_MasterRequestRead+0x3a>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029d4:	d108      	bne.n	80029e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e00b      	b.n	8002a00 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	2b11      	cmp	r3, #17
 80029ee:	d107      	bne.n	8002a00 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f893 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00d      	beq.n	8002a34 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a26:	d103      	bne.n	8002a30 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e079      	b.n	8002b28 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a3c:	d108      	bne.n	8002a50 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a3e:	897b      	ldrh	r3, [r7, #10]
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	611a      	str	r2, [r3, #16]
 8002a4e:	e05f      	b.n	8002b10 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a50:	897b      	ldrh	r3, [r7, #10]
 8002a52:	11db      	asrs	r3, r3, #7
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	f003 0306 	and.w	r3, r3, #6
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f063 030f 	orn	r3, r3, #15
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	4930      	ldr	r1, [pc, #192]	; (8002b30 <I2C_MasterRequestRead+0x194>)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f8b9 	bl	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e054      	b.n	8002b28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a7e:	897b      	ldrh	r3, [r7, #10]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	4929      	ldr	r1, [pc, #164]	; (8002b34 <I2C_MasterRequestRead+0x198>)
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f8a9 	bl	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e044      	b.n	8002b28 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f831 	bl	8002b38 <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aea:	d103      	bne.n	8002af4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e017      	b.n	8002b28 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002af8:	897b      	ldrh	r3, [r7, #10]
 8002afa:	11db      	asrs	r3, r3, #7
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 0306 	and.w	r3, r3, #6
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f063 030e 	orn	r3, r3, #14
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	4907      	ldr	r1, [pc, #28]	; (8002b34 <I2C_MasterRequestRead+0x198>)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f865 	bl	8002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	00010008 	.word	0x00010008
 8002b34:	00010002 	.word	0x00010002

08002b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	4613      	mov	r3, r2
 8002b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b48:	e025      	b.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b50:	d021      	beq.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b52:	f7fe ff75 	bl	8001a40 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d116      	bne.n	8002b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f043 0220 	orr.w	r2, r3, #32
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e023      	b.n	8002bde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d10d      	bne.n	8002bbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4013      	ands	r3, r2
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf0c      	ite	eq
 8002bb2:	2301      	moveq	r3, #1
 8002bb4:	2300      	movne	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	e00c      	b.n	8002bd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	43da      	mvns	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d0b6      	beq.n	8002b4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bf4:	e051      	b.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c04:	d123      	bne.n	8002c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f043 0204 	orr.w	r2, r3, #4
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e046      	b.n	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d021      	beq.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c56:	f7fe fef3 	bl	8001a40 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d302      	bcc.n	8002c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d116      	bne.n	8002c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2220      	movs	r2, #32
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f043 0220 	orr.w	r2, r3, #32
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e020      	b.n	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d10c      	bne.n	8002cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	43da      	mvns	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	bf14      	ite	ne
 8002cb6:	2301      	movne	r3, #1
 8002cb8:	2300      	moveq	r3, #0
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	e00b      	b.n	8002cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	43da      	mvns	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf14      	ite	ne
 8002cd0:	2301      	movne	r3, #1
 8002cd2:	2300      	moveq	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d18d      	bne.n	8002bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cf0:	e02d      	b.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f8ce 	bl	8002e94 <I2C_IsAcknowledgeFailed>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e02d      	b.n	8002d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d021      	beq.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7fe fe99 	bl	8001a40 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d116      	bne.n	8002d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f043 0220 	orr.w	r2, r3, #32
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e007      	b.n	8002d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b80      	cmp	r3, #128	; 0x80
 8002d5a:	d1ca      	bne.n	8002cf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d72:	e02d      	b.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f88d 	bl	8002e94 <I2C_IsAcknowledgeFailed>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e02d      	b.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d021      	beq.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8c:	f7fe fe58 	bl	8001a40 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d302      	bcc.n	8002da2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f043 0220 	orr.w	r2, r3, #32
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e007      	b.n	8002de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d1ca      	bne.n	8002d74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002df4:	e042      	b.n	8002e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d119      	bne.n	8002e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f06f 0210 	mvn.w	r2, #16
 8002e0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e029      	b.n	8002e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e38:	f7fe fe02 	bl	8001a40 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d302      	bcc.n	8002e4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d116      	bne.n	8002e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e007      	b.n	8002e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b40      	cmp	r3, #64	; 0x40
 8002e88:	d1b5      	bne.n	8002df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eaa:	d11b      	bne.n	8002ee4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f043 0204 	orr.w	r2, r3, #4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e000      	b.n	8002ee6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e0cc      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f08:	4b68      	ldr	r3, [pc, #416]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d90c      	bls.n	8002f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b65      	ldr	r3, [pc, #404]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b63      	ldr	r3, [pc, #396]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0b8      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d020      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f48:	4b59      	ldr	r3, [pc, #356]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	4a58      	ldr	r2, [pc, #352]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f60:	4b53      	ldr	r3, [pc, #332]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	4a52      	ldr	r2, [pc, #328]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f6c:	4b50      	ldr	r3, [pc, #320]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	494d      	ldr	r1, [pc, #308]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d044      	beq.n	8003014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b47      	ldr	r3, [pc, #284]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d119      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e07f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d003      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d107      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fb2:	4b3f      	ldr	r3, [pc, #252]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e06f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e067      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd2:	4b37      	ldr	r3, [pc, #220]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 0203 	bic.w	r2, r3, #3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4934      	ldr	r1, [pc, #208]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fe4:	f7fe fd2c 	bl	8001a40 <HAL_GetTick>
 8002fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fec:	f7fe fd28 	bl	8001a40 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e04f      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003002:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 020c 	and.w	r2, r3, #12
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	429a      	cmp	r2, r3
 8003012:	d1eb      	bne.n	8002fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003014:	4b25      	ldr	r3, [pc, #148]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d20c      	bcs.n	800303c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b22      	ldr	r3, [pc, #136]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e032      	b.n	80030a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003048:	4b19      	ldr	r3, [pc, #100]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4916      	ldr	r1, [pc, #88]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	4313      	orrs	r3, r2
 8003058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003066:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	490e      	ldr	r1, [pc, #56]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	4313      	orrs	r3, r2
 8003078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800307a:	f000 f855 	bl	8003128 <HAL_RCC_GetSysClockFreq>
 800307e:	4602      	mov	r2, r0
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	490a      	ldr	r1, [pc, #40]	; (80030b4 <HAL_RCC_ClockConfig+0x1c0>)
 800308c:	5ccb      	ldrb	r3, [r1, r3]
 800308e:	fa22 f303 	lsr.w	r3, r2, r3
 8003092:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <HAL_RCC_ClockConfig+0x1c8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe fc8c 	bl	80019b8 <HAL_InitTick>

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40023c00 	.word	0x40023c00
 80030b0:	40023800 	.word	0x40023800
 80030b4:	0800bbd0 	.word	0x0800bbd0
 80030b8:	20000004 	.word	0x20000004
 80030bc:	20000008 	.word	0x20000008

080030c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	20000004 	.word	0x20000004

080030d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030dc:	f7ff fff0 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	0a9b      	lsrs	r3, r3, #10
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4903      	ldr	r1, [pc, #12]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40023800 	.word	0x40023800
 80030fc:	0800bbe0 	.word	0x0800bbe0

08003100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003104:	f7ff ffdc 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0b5b      	lsrs	r3, r3, #13
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4903      	ldr	r1, [pc, #12]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40023800 	.word	0x40023800
 8003124:	0800bbe0 	.word	0x0800bbe0

08003128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800312c:	b088      	sub	sp, #32
 800312e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003144:	4bce      	ldr	r3, [pc, #824]	; (8003480 <HAL_RCC_GetSysClockFreq+0x358>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 030c 	and.w	r3, r3, #12
 800314c:	2b0c      	cmp	r3, #12
 800314e:	f200 818d 	bhi.w	800346c <HAL_RCC_GetSysClockFreq+0x344>
 8003152:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <HAL_RCC_GetSysClockFreq+0x30>)
 8003154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003158:	0800318d 	.word	0x0800318d
 800315c:	0800346d 	.word	0x0800346d
 8003160:	0800346d 	.word	0x0800346d
 8003164:	0800346d 	.word	0x0800346d
 8003168:	08003193 	.word	0x08003193
 800316c:	0800346d 	.word	0x0800346d
 8003170:	0800346d 	.word	0x0800346d
 8003174:	0800346d 	.word	0x0800346d
 8003178:	08003199 	.word	0x08003199
 800317c:	0800346d 	.word	0x0800346d
 8003180:	0800346d 	.word	0x0800346d
 8003184:	0800346d 	.word	0x0800346d
 8003188:	0800330d 	.word	0x0800330d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800318c:	4bbd      	ldr	r3, [pc, #756]	; (8003484 <HAL_RCC_GetSysClockFreq+0x35c>)
 800318e:	61bb      	str	r3, [r7, #24]
       break;
 8003190:	e16f      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003192:	4bbd      	ldr	r3, [pc, #756]	; (8003488 <HAL_RCC_GetSysClockFreq+0x360>)
 8003194:	61bb      	str	r3, [r7, #24]
      break;
 8003196:	e16c      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003198:	4bb9      	ldr	r3, [pc, #740]	; (8003480 <HAL_RCC_GetSysClockFreq+0x358>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031a0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031a2:	4bb7      	ldr	r3, [pc, #732]	; (8003480 <HAL_RCC_GetSysClockFreq+0x358>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d053      	beq.n	8003256 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ae:	4bb4      	ldr	r3, [pc, #720]	; (8003480 <HAL_RCC_GetSysClockFreq+0x358>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	099b      	lsrs	r3, r3, #6
 80031b4:	461a      	mov	r2, r3
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031be:	f04f 0100 	mov.w	r1, #0
 80031c2:	ea02 0400 	and.w	r4, r2, r0
 80031c6:	603c      	str	r4, [r7, #0]
 80031c8:	400b      	ands	r3, r1
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031d0:	4620      	mov	r0, r4
 80031d2:	4629      	mov	r1, r5
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	014b      	lsls	r3, r1, #5
 80031de:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031e2:	0142      	lsls	r2, r0, #5
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	4623      	mov	r3, r4
 80031ea:	1ac0      	subs	r0, r0, r3
 80031ec:	462b      	mov	r3, r5
 80031ee:	eb61 0103 	sbc.w	r1, r1, r3
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	018b      	lsls	r3, r1, #6
 80031fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003200:	0182      	lsls	r2, r0, #6
 8003202:	1a12      	subs	r2, r2, r0
 8003204:	eb63 0301 	sbc.w	r3, r3, r1
 8003208:	f04f 0000 	mov.w	r0, #0
 800320c:	f04f 0100 	mov.w	r1, #0
 8003210:	00d9      	lsls	r1, r3, #3
 8003212:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003216:	00d0      	lsls	r0, r2, #3
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4621      	mov	r1, r4
 800321e:	1852      	adds	r2, r2, r1
 8003220:	4629      	mov	r1, r5
 8003222:	eb43 0101 	adc.w	r1, r3, r1
 8003226:	460b      	mov	r3, r1
 8003228:	f04f 0000 	mov.w	r0, #0
 800322c:	f04f 0100 	mov.w	r1, #0
 8003230:	0259      	lsls	r1, r3, #9
 8003232:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003236:	0250      	lsls	r0, r2, #9
 8003238:	4602      	mov	r2, r0
 800323a:	460b      	mov	r3, r1
 800323c:	4610      	mov	r0, r2
 800323e:	4619      	mov	r1, r3
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	461a      	mov	r2, r3
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	f7fd fcce 	bl	8000be8 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4613      	mov	r3, r2
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	e04c      	b.n	80032f0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003256:	4b8a      	ldr	r3, [pc, #552]	; (8003480 <HAL_RCC_GetSysClockFreq+0x358>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	099b      	lsrs	r3, r3, #6
 800325c:	461a      	mov	r2, r3
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003266:	f04f 0100 	mov.w	r1, #0
 800326a:	ea02 0a00 	and.w	sl, r2, r0
 800326e:	ea03 0b01 	and.w	fp, r3, r1
 8003272:	4650      	mov	r0, sl
 8003274:	4659      	mov	r1, fp
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	014b      	lsls	r3, r1, #5
 8003280:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003284:	0142      	lsls	r2, r0, #5
 8003286:	4610      	mov	r0, r2
 8003288:	4619      	mov	r1, r3
 800328a:	ebb0 000a 	subs.w	r0, r0, sl
 800328e:	eb61 010b 	sbc.w	r1, r1, fp
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	018b      	lsls	r3, r1, #6
 800329c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032a0:	0182      	lsls	r2, r0, #6
 80032a2:	1a12      	subs	r2, r2, r0
 80032a4:	eb63 0301 	sbc.w	r3, r3, r1
 80032a8:	f04f 0000 	mov.w	r0, #0
 80032ac:	f04f 0100 	mov.w	r1, #0
 80032b0:	00d9      	lsls	r1, r3, #3
 80032b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032b6:	00d0      	lsls	r0, r2, #3
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	eb12 020a 	adds.w	r2, r2, sl
 80032c0:	eb43 030b 	adc.w	r3, r3, fp
 80032c4:	f04f 0000 	mov.w	r0, #0
 80032c8:	f04f 0100 	mov.w	r1, #0
 80032cc:	0299      	lsls	r1, r3, #10
 80032ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80032d2:	0290      	lsls	r0, r2, #10
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4610      	mov	r0, r2
 80032da:	4619      	mov	r1, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	461a      	mov	r2, r3
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	f7fd fc80 	bl	8000be8 <__aeabi_uldivmod>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4613      	mov	r3, r2
 80032ee:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032f0:	4b63      	ldr	r3, [pc, #396]	; (8003480 <HAL_RCC_GetSysClockFreq+0x358>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	3301      	adds	r3, #1
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	fbb2 f3f3 	udiv	r3, r2, r3
 8003308:	61bb      	str	r3, [r7, #24]
      break;
 800330a:	e0b2      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800330c:	4b5c      	ldr	r3, [pc, #368]	; (8003480 <HAL_RCC_GetSysClockFreq+0x358>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003314:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003316:	4b5a      	ldr	r3, [pc, #360]	; (8003480 <HAL_RCC_GetSysClockFreq+0x358>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d04d      	beq.n	80033be <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003322:	4b57      	ldr	r3, [pc, #348]	; (8003480 <HAL_RCC_GetSysClockFreq+0x358>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	099b      	lsrs	r3, r3, #6
 8003328:	461a      	mov	r2, r3
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	ea02 0800 	and.w	r8, r2, r0
 800333a:	ea03 0901 	and.w	r9, r3, r1
 800333e:	4640      	mov	r0, r8
 8003340:	4649      	mov	r1, r9
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	014b      	lsls	r3, r1, #5
 800334c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003350:	0142      	lsls	r2, r0, #5
 8003352:	4610      	mov	r0, r2
 8003354:	4619      	mov	r1, r3
 8003356:	ebb0 0008 	subs.w	r0, r0, r8
 800335a:	eb61 0109 	sbc.w	r1, r1, r9
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	018b      	lsls	r3, r1, #6
 8003368:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800336c:	0182      	lsls	r2, r0, #6
 800336e:	1a12      	subs	r2, r2, r0
 8003370:	eb63 0301 	sbc.w	r3, r3, r1
 8003374:	f04f 0000 	mov.w	r0, #0
 8003378:	f04f 0100 	mov.w	r1, #0
 800337c:	00d9      	lsls	r1, r3, #3
 800337e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003382:	00d0      	lsls	r0, r2, #3
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	eb12 0208 	adds.w	r2, r2, r8
 800338c:	eb43 0309 	adc.w	r3, r3, r9
 8003390:	f04f 0000 	mov.w	r0, #0
 8003394:	f04f 0100 	mov.w	r1, #0
 8003398:	0259      	lsls	r1, r3, #9
 800339a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800339e:	0250      	lsls	r0, r2, #9
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4610      	mov	r0, r2
 80033a6:	4619      	mov	r1, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	461a      	mov	r2, r3
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	f7fd fc1a 	bl	8000be8 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4613      	mov	r3, r2
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	e04a      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033be:	4b30      	ldr	r3, [pc, #192]	; (8003480 <HAL_RCC_GetSysClockFreq+0x358>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	099b      	lsrs	r3, r3, #6
 80033c4:	461a      	mov	r2, r3
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033ce:	f04f 0100 	mov.w	r1, #0
 80033d2:	ea02 0400 	and.w	r4, r2, r0
 80033d6:	ea03 0501 	and.w	r5, r3, r1
 80033da:	4620      	mov	r0, r4
 80033dc:	4629      	mov	r1, r5
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	014b      	lsls	r3, r1, #5
 80033e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033ec:	0142      	lsls	r2, r0, #5
 80033ee:	4610      	mov	r0, r2
 80033f0:	4619      	mov	r1, r3
 80033f2:	1b00      	subs	r0, r0, r4
 80033f4:	eb61 0105 	sbc.w	r1, r1, r5
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	018b      	lsls	r3, r1, #6
 8003402:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003406:	0182      	lsls	r2, r0, #6
 8003408:	1a12      	subs	r2, r2, r0
 800340a:	eb63 0301 	sbc.w	r3, r3, r1
 800340e:	f04f 0000 	mov.w	r0, #0
 8003412:	f04f 0100 	mov.w	r1, #0
 8003416:	00d9      	lsls	r1, r3, #3
 8003418:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800341c:	00d0      	lsls	r0, r2, #3
 800341e:	4602      	mov	r2, r0
 8003420:	460b      	mov	r3, r1
 8003422:	1912      	adds	r2, r2, r4
 8003424:	eb45 0303 	adc.w	r3, r5, r3
 8003428:	f04f 0000 	mov.w	r0, #0
 800342c:	f04f 0100 	mov.w	r1, #0
 8003430:	0299      	lsls	r1, r3, #10
 8003432:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003436:	0290      	lsls	r0, r2, #10
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	461a      	mov	r2, r3
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	f7fd fbce 	bl	8000be8 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4613      	mov	r3, r2
 8003452:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003454:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_RCC_GetSysClockFreq+0x358>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	0f1b      	lsrs	r3, r3, #28
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	fbb2 f3f3 	udiv	r3, r2, r3
 8003468:	61bb      	str	r3, [r7, #24]
      break;
 800346a:	e002      	b.n	8003472 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <HAL_RCC_GetSysClockFreq+0x35c>)
 800346e:	61bb      	str	r3, [r7, #24]
      break;
 8003470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003472:	69bb      	ldr	r3, [r7, #24]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800347e:	bf00      	nop
 8003480:	40023800 	.word	0x40023800
 8003484:	00f42400 	.word	0x00f42400
 8003488:	007a1200 	.word	0x007a1200

0800348c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e28d      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 8083 	beq.w	80035b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034ac:	4b94      	ldr	r3, [pc, #592]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d019      	beq.n	80034ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034b8:	4b91      	ldr	r3, [pc, #580]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034c4:	4b8e      	ldr	r3, [pc, #568]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d0:	d00c      	beq.n	80034ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d2:	4b8b      	ldr	r3, [pc, #556]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	d112      	bne.n	8003504 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034de:	4b88      	ldr	r3, [pc, #544]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034ea:	d10b      	bne.n	8003504 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	4b84      	ldr	r3, [pc, #528]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d05b      	beq.n	80035b0 <HAL_RCC_OscConfig+0x124>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d157      	bne.n	80035b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e25a      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800350c:	d106      	bne.n	800351c <HAL_RCC_OscConfig+0x90>
 800350e:	4b7c      	ldr	r3, [pc, #496]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a7b      	ldr	r2, [pc, #492]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 8003514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e01d      	b.n	8003558 <HAL_RCC_OscConfig+0xcc>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003524:	d10c      	bne.n	8003540 <HAL_RCC_OscConfig+0xb4>
 8003526:	4b76      	ldr	r3, [pc, #472]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a75      	ldr	r2, [pc, #468]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 800352c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	4b73      	ldr	r3, [pc, #460]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a72      	ldr	r2, [pc, #456]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e00b      	b.n	8003558 <HAL_RCC_OscConfig+0xcc>
 8003540:	4b6f      	ldr	r3, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a6e      	ldr	r2, [pc, #440]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 8003546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	4b6c      	ldr	r3, [pc, #432]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a6b      	ldr	r2, [pc, #428]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 8003552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d013      	beq.n	8003588 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe fa6e 	bl	8001a40 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003568:	f7fe fa6a 	bl	8001a40 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b64      	cmp	r3, #100	; 0x64
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e21f      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0xdc>
 8003586:	e014      	b.n	80035b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fe fa5a 	bl	8001a40 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003590:	f7fe fa56 	bl	8001a40 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e20b      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a2:	4b57      	ldr	r3, [pc, #348]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x104>
 80035ae:	e000      	b.n	80035b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d06f      	beq.n	800369e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035be:	4b50      	ldr	r3, [pc, #320]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d017      	beq.n	80035fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035ca:	4b4d      	ldr	r3, [pc, #308]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d105      	bne.n	80035e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035d6:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e2:	4b47      	ldr	r3, [pc, #284]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035ea:	2b0c      	cmp	r3, #12
 80035ec:	d11c      	bne.n	8003628 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ee:	4b44      	ldr	r3, [pc, #272]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d116      	bne.n	8003628 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	4b41      	ldr	r3, [pc, #260]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_RCC_OscConfig+0x186>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d001      	beq.n	8003612 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e1d3      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003612:	4b3b      	ldr	r3, [pc, #236]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4937      	ldr	r1, [pc, #220]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	e03a      	b.n	800369e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d020      	beq.n	8003672 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003630:	4b34      	ldr	r3, [pc, #208]	; (8003704 <HAL_RCC_OscConfig+0x278>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003636:	f7fe fa03 	bl	8001a40 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800363e:	f7fe f9ff 	bl	8001a40 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e1b4      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365c:	4b28      	ldr	r3, [pc, #160]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4925      	ldr	r1, [pc, #148]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 800366c:	4313      	orrs	r3, r2
 800366e:	600b      	str	r3, [r1, #0]
 8003670:	e015      	b.n	800369e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003672:	4b24      	ldr	r3, [pc, #144]	; (8003704 <HAL_RCC_OscConfig+0x278>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fe f9e2 	bl	8001a40 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003680:	f7fe f9de 	bl	8001a40 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e193      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d036      	beq.n	8003718 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d016      	beq.n	80036e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <HAL_RCC_OscConfig+0x27c>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fe f9c2 	bl	8001a40 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c0:	f7fe f9be 	bl	8001a40 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e173      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_RCC_OscConfig+0x274>)
 80036d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x234>
 80036de:	e01b      	b.n	8003718 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e0:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_OscConfig+0x27c>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fe f9ab 	bl	8001a40 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	e00e      	b.n	800370c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ee:	f7fe f9a7 	bl	8001a40 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d907      	bls.n	800370c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e15c      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
 8003700:	40023800 	.word	0x40023800
 8003704:	42470000 	.word	0x42470000
 8003708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370c:	4b8a      	ldr	r3, [pc, #552]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 800370e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ea      	bne.n	80036ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8097 	beq.w	8003854 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372a:	4b83      	ldr	r3, [pc, #524]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10f      	bne.n	8003756 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	4b7f      	ldr	r3, [pc, #508]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	4a7e      	ldr	r2, [pc, #504]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003744:	6413      	str	r3, [r2, #64]	; 0x40
 8003746:	4b7c      	ldr	r3, [pc, #496]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003752:	2301      	movs	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	4b79      	ldr	r3, [pc, #484]	; (800393c <HAL_RCC_OscConfig+0x4b0>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d118      	bne.n	8003794 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003762:	4b76      	ldr	r3, [pc, #472]	; (800393c <HAL_RCC_OscConfig+0x4b0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a75      	ldr	r2, [pc, #468]	; (800393c <HAL_RCC_OscConfig+0x4b0>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376e:	f7fe f967 	bl	8001a40 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003776:	f7fe f963 	bl	8001a40 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e118      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	4b6c      	ldr	r3, [pc, #432]	; (800393c <HAL_RCC_OscConfig+0x4b0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x31e>
 800379c:	4b66      	ldr	r3, [pc, #408]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	4a65      	ldr	r2, [pc, #404]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70
 80037a8:	e01c      	b.n	80037e4 <HAL_RCC_OscConfig+0x358>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x340>
 80037b2:	4b61      	ldr	r3, [pc, #388]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a60      	ldr	r2, [pc, #384]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
 80037be:	4b5e      	ldr	r3, [pc, #376]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	4a5d      	ldr	r2, [pc, #372]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0x358>
 80037cc:	4b5a      	ldr	r3, [pc, #360]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	4a59      	ldr	r2, [pc, #356]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	; 0x70
 80037d8:	4b57      	ldr	r3, [pc, #348]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037dc:	4a56      	ldr	r2, [pc, #344]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 80037de:	f023 0304 	bic.w	r3, r3, #4
 80037e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d015      	beq.n	8003818 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fe f928 	bl	8001a40 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fe f924 	bl	8001a40 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0d7      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	4b4b      	ldr	r3, [pc, #300]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0ee      	beq.n	80037f4 <HAL_RCC_OscConfig+0x368>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7fe f912 	bl	8001a40 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fe f90e 	bl	8001a40 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	; 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0c1      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003836:	4b40      	ldr	r3, [pc, #256]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1ee      	bne.n	8003820 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003842:	7dfb      	ldrb	r3, [r7, #23]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003848:	4b3b      	ldr	r3, [pc, #236]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	4a3a      	ldr	r2, [pc, #232]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 800384e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80ad 	beq.w	80039b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800385e:	4b36      	ldr	r3, [pc, #216]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b08      	cmp	r3, #8
 8003868:	d060      	beq.n	800392c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d145      	bne.n	80038fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003872:	4b33      	ldr	r3, [pc, #204]	; (8003940 <HAL_RCC_OscConfig+0x4b4>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fe f8e2 	bl	8001a40 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003880:	f7fe f8de 	bl	8001a40 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e093      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	4b29      	ldr	r3, [pc, #164]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	019b      	lsls	r3, r3, #6
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	085b      	lsrs	r3, r3, #1
 80038b6:	3b01      	subs	r3, #1
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	061b      	lsls	r3, r3, #24
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	071b      	lsls	r3, r3, #28
 80038ca:	491b      	ldr	r1, [pc, #108]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d0:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <HAL_RCC_OscConfig+0x4b4>)
 80038d2:	2201      	movs	r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7fe f8b3 	bl	8001a40 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038de:	f7fe f8af 	bl	8001a40 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e064      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f0:	4b11      	ldr	r3, [pc, #68]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x452>
 80038fc:	e05c      	b.n	80039b8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038fe:	4b10      	ldr	r3, [pc, #64]	; (8003940 <HAL_RCC_OscConfig+0x4b4>)
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fe f89c 	bl	8001a40 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390c:	f7fe f898 	bl	8001a40 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e04d      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_RCC_OscConfig+0x4ac>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x480>
 800392a:	e045      	b.n	80039b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d107      	bne.n	8003944 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e040      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
 8003938:	40023800 	.word	0x40023800
 800393c:	40007000 	.word	0x40007000
 8003940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003944:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <HAL_RCC_OscConfig+0x538>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d030      	beq.n	80039b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395c:	429a      	cmp	r2, r3
 800395e:	d129      	bne.n	80039b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d122      	bne.n	80039b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003974:	4013      	ands	r3, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800397a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800397c:	4293      	cmp	r3, r2
 800397e:	d119      	bne.n	80039b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	3b01      	subs	r3, #1
 800398e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d10f      	bne.n	80039b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800

080039c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e03f      	b.n	8003a5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d106      	bne.n	80039f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7fd fe4c 	bl	800168c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2224      	movs	r2, #36	; 0x24
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68da      	ldr	r2, [r3, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f929 	bl	8003c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b08a      	sub	sp, #40	; 0x28
 8003a66:	af02      	add	r7, sp, #8
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	603b      	str	r3, [r7, #0]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d17c      	bne.n	8003b7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_UART_Transmit+0x2c>
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e075      	b.n	8003b7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_UART_Transmit+0x3e>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e06e      	b.n	8003b7e <HAL_UART_Transmit+0x11c>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2221      	movs	r2, #33	; 0x21
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ab6:	f7fd ffc3 	bl	8001a40 <HAL_GetTick>
 8003aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	88fa      	ldrh	r2, [r7, #6]
 8003ac0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	88fa      	ldrh	r2, [r7, #6]
 8003ac6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad0:	d108      	bne.n	8003ae4 <HAL_UART_Transmit+0x82>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d104      	bne.n	8003ae4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	e003      	b.n	8003aec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003af4:	e02a      	b.n	8003b4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2200      	movs	r2, #0
 8003afe:	2180      	movs	r1, #128	; 0x80
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f840 	bl	8003b86 <UART_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e036      	b.n	8003b7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	3302      	adds	r3, #2
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	e007      	b.n	8003b3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	781a      	ldrb	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1cf      	bne.n	8003af6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2140      	movs	r1, #64	; 0x40
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f810 	bl	8003b86 <UART_WaitOnFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e006      	b.n	8003b7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e000      	b.n	8003b7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b7c:	2302      	movs	r3, #2
  }
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b090      	sub	sp, #64	; 0x40
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	60b9      	str	r1, [r7, #8]
 8003b90:	603b      	str	r3, [r7, #0]
 8003b92:	4613      	mov	r3, r2
 8003b94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b96:	e050      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9e:	d04c      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d007      	beq.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ba6:	f7fd ff4b 	bl	8001a40 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d241      	bcs.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bd6:	637a      	str	r2, [r7, #52]	; 0x34
 8003bd8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e5      	bne.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3314      	adds	r3, #20
 8003c08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c0a:	623a      	str	r2, [r7, #32]
 8003c0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	69f9      	ldr	r1, [r7, #28]
 8003c10:	6a3a      	ldr	r2, [r7, #32]
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e5      	bne.n	8003bea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e00f      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d09f      	beq.n	8003b98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3740      	adds	r7, #64	; 0x40
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c68:	b09f      	sub	sp, #124	; 0x7c
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7a:	68d9      	ldr	r1, [r3, #12]
 8003c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	ea40 0301 	orr.w	r3, r0, r1
 8003c84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	431a      	orrs	r2, r3
 8003c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ca8:	f021 010c 	bic.w	r1, r1, #12
 8003cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc2:	6999      	ldr	r1, [r3, #24]
 8003cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	ea40 0301 	orr.w	r3, r0, r1
 8003ccc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	4bc5      	ldr	r3, [pc, #788]	; (8003fe8 <UART_SetConfig+0x384>)
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d004      	beq.n	8003ce2 <UART_SetConfig+0x7e>
 8003cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4bc3      	ldr	r3, [pc, #780]	; (8003fec <UART_SetConfig+0x388>)
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d103      	bne.n	8003cea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ce2:	f7ff fa0d 	bl	8003100 <HAL_RCC_GetPCLK2Freq>
 8003ce6:	6778      	str	r0, [r7, #116]	; 0x74
 8003ce8:	e002      	b.n	8003cf0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cea:	f7ff f9f5 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8003cee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cf8:	f040 80b6 	bne.w	8003e68 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cfe:	461c      	mov	r4, r3
 8003d00:	f04f 0500 	mov.w	r5, #0
 8003d04:	4622      	mov	r2, r4
 8003d06:	462b      	mov	r3, r5
 8003d08:	1891      	adds	r1, r2, r2
 8003d0a:	6439      	str	r1, [r7, #64]	; 0x40
 8003d0c:	415b      	adcs	r3, r3
 8003d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d14:	1912      	adds	r2, r2, r4
 8003d16:	eb45 0303 	adc.w	r3, r5, r3
 8003d1a:	f04f 0000 	mov.w	r0, #0
 8003d1e:	f04f 0100 	mov.w	r1, #0
 8003d22:	00d9      	lsls	r1, r3, #3
 8003d24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d28:	00d0      	lsls	r0, r2, #3
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	1911      	adds	r1, r2, r4
 8003d30:	6639      	str	r1, [r7, #96]	; 0x60
 8003d32:	416b      	adcs	r3, r5
 8003d34:	667b      	str	r3, [r7, #100]	; 0x64
 8003d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	1891      	adds	r1, r2, r2
 8003d42:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d44:	415b      	adcs	r3, r3
 8003d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d50:	f7fc ff4a 	bl	8000be8 <__aeabi_uldivmod>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4ba5      	ldr	r3, [pc, #660]	; (8003ff0 <UART_SetConfig+0x38c>)
 8003d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	011e      	lsls	r6, r3, #4
 8003d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d64:	461c      	mov	r4, r3
 8003d66:	f04f 0500 	mov.w	r5, #0
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	462b      	mov	r3, r5
 8003d6e:	1891      	adds	r1, r2, r2
 8003d70:	6339      	str	r1, [r7, #48]	; 0x30
 8003d72:	415b      	adcs	r3, r3
 8003d74:	637b      	str	r3, [r7, #52]	; 0x34
 8003d76:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d7a:	1912      	adds	r2, r2, r4
 8003d7c:	eb45 0303 	adc.w	r3, r5, r3
 8003d80:	f04f 0000 	mov.w	r0, #0
 8003d84:	f04f 0100 	mov.w	r1, #0
 8003d88:	00d9      	lsls	r1, r3, #3
 8003d8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d8e:	00d0      	lsls	r0, r2, #3
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	1911      	adds	r1, r2, r4
 8003d96:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d98:	416b      	adcs	r3, r5
 8003d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	461a      	mov	r2, r3
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	1891      	adds	r1, r2, r2
 8003da8:	62b9      	str	r1, [r7, #40]	; 0x28
 8003daa:	415b      	adcs	r3, r3
 8003dac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003db2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003db6:	f7fc ff17 	bl	8000be8 <__aeabi_uldivmod>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4b8c      	ldr	r3, [pc, #560]	; (8003ff0 <UART_SetConfig+0x38c>)
 8003dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	2164      	movs	r1, #100	; 0x64
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	3332      	adds	r3, #50	; 0x32
 8003dd2:	4a87      	ldr	r2, [pc, #540]	; (8003ff0 <UART_SetConfig+0x38c>)
 8003dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003de0:	441e      	add	r6, r3
 8003de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de4:	4618      	mov	r0, r3
 8003de6:	f04f 0100 	mov.w	r1, #0
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	1894      	adds	r4, r2, r2
 8003df0:	623c      	str	r4, [r7, #32]
 8003df2:	415b      	adcs	r3, r3
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
 8003df6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dfa:	1812      	adds	r2, r2, r0
 8003dfc:	eb41 0303 	adc.w	r3, r1, r3
 8003e00:	f04f 0400 	mov.w	r4, #0
 8003e04:	f04f 0500 	mov.w	r5, #0
 8003e08:	00dd      	lsls	r5, r3, #3
 8003e0a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e0e:	00d4      	lsls	r4, r2, #3
 8003e10:	4622      	mov	r2, r4
 8003e12:	462b      	mov	r3, r5
 8003e14:	1814      	adds	r4, r2, r0
 8003e16:	653c      	str	r4, [r7, #80]	; 0x50
 8003e18:	414b      	adcs	r3, r1
 8003e1a:	657b      	str	r3, [r7, #84]	; 0x54
 8003e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	461a      	mov	r2, r3
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	1891      	adds	r1, r2, r2
 8003e28:	61b9      	str	r1, [r7, #24]
 8003e2a:	415b      	adcs	r3, r3
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e32:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e36:	f7fc fed7 	bl	8000be8 <__aeabi_uldivmod>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4b6c      	ldr	r3, [pc, #432]	; (8003ff0 <UART_SetConfig+0x38c>)
 8003e40:	fba3 1302 	umull	r1, r3, r3, r2
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	2164      	movs	r1, #100	; 0x64
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	3332      	adds	r3, #50	; 0x32
 8003e52:	4a67      	ldr	r2, [pc, #412]	; (8003ff0 <UART_SetConfig+0x38c>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	f003 0207 	and.w	r2, r3, #7
 8003e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4432      	add	r2, r6
 8003e64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e66:	e0b9      	b.n	8003fdc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e6a:	461c      	mov	r4, r3
 8003e6c:	f04f 0500 	mov.w	r5, #0
 8003e70:	4622      	mov	r2, r4
 8003e72:	462b      	mov	r3, r5
 8003e74:	1891      	adds	r1, r2, r2
 8003e76:	6139      	str	r1, [r7, #16]
 8003e78:	415b      	adcs	r3, r3
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e80:	1912      	adds	r2, r2, r4
 8003e82:	eb45 0303 	adc.w	r3, r5, r3
 8003e86:	f04f 0000 	mov.w	r0, #0
 8003e8a:	f04f 0100 	mov.w	r1, #0
 8003e8e:	00d9      	lsls	r1, r3, #3
 8003e90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e94:	00d0      	lsls	r0, r2, #3
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	eb12 0804 	adds.w	r8, r2, r4
 8003e9e:	eb43 0905 	adc.w	r9, r3, r5
 8003ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f04f 0100 	mov.w	r1, #0
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	008b      	lsls	r3, r1, #2
 8003eb6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003eba:	0082      	lsls	r2, r0, #2
 8003ebc:	4640      	mov	r0, r8
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	f7fc fe92 	bl	8000be8 <__aeabi_uldivmod>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	4b49      	ldr	r3, [pc, #292]	; (8003ff0 <UART_SetConfig+0x38c>)
 8003eca:	fba3 2302 	umull	r2, r3, r3, r2
 8003ece:	095b      	lsrs	r3, r3, #5
 8003ed0:	011e      	lsls	r6, r3, #4
 8003ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	1894      	adds	r4, r2, r2
 8003ee0:	60bc      	str	r4, [r7, #8]
 8003ee2:	415b      	adcs	r3, r3
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eea:	1812      	adds	r2, r2, r0
 8003eec:	eb41 0303 	adc.w	r3, r1, r3
 8003ef0:	f04f 0400 	mov.w	r4, #0
 8003ef4:	f04f 0500 	mov.w	r5, #0
 8003ef8:	00dd      	lsls	r5, r3, #3
 8003efa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003efe:	00d4      	lsls	r4, r2, #3
 8003f00:	4622      	mov	r2, r4
 8003f02:	462b      	mov	r3, r5
 8003f04:	1814      	adds	r4, r2, r0
 8003f06:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f08:	414b      	adcs	r3, r1
 8003f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f04f 0100 	mov.w	r1, #0
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	008b      	lsls	r3, r1, #2
 8003f20:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f24:	0082      	lsls	r2, r0, #2
 8003f26:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f2a:	f7fc fe5d 	bl	8000be8 <__aeabi_uldivmod>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4b2f      	ldr	r3, [pc, #188]	; (8003ff0 <UART_SetConfig+0x38c>)
 8003f34:	fba3 1302 	umull	r1, r3, r3, r2
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	2164      	movs	r1, #100	; 0x64
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	3332      	adds	r3, #50	; 0x32
 8003f46:	4a2a      	ldr	r2, [pc, #168]	; (8003ff0 <UART_SetConfig+0x38c>)
 8003f48:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4c:	095b      	lsrs	r3, r3, #5
 8003f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f52:	441e      	add	r6, r3
 8003f54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f56:	4618      	mov	r0, r3
 8003f58:	f04f 0100 	mov.w	r1, #0
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	1894      	adds	r4, r2, r2
 8003f62:	603c      	str	r4, [r7, #0]
 8003f64:	415b      	adcs	r3, r3
 8003f66:	607b      	str	r3, [r7, #4]
 8003f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f6c:	1812      	adds	r2, r2, r0
 8003f6e:	eb41 0303 	adc.w	r3, r1, r3
 8003f72:	f04f 0400 	mov.w	r4, #0
 8003f76:	f04f 0500 	mov.w	r5, #0
 8003f7a:	00dd      	lsls	r5, r3, #3
 8003f7c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f80:	00d4      	lsls	r4, r2, #3
 8003f82:	4622      	mov	r2, r4
 8003f84:	462b      	mov	r3, r5
 8003f86:	eb12 0a00 	adds.w	sl, r2, r0
 8003f8a:	eb43 0b01 	adc.w	fp, r3, r1
 8003f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f04f 0100 	mov.w	r1, #0
 8003f98:	f04f 0200 	mov.w	r2, #0
 8003f9c:	f04f 0300 	mov.w	r3, #0
 8003fa0:	008b      	lsls	r3, r1, #2
 8003fa2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fa6:	0082      	lsls	r2, r0, #2
 8003fa8:	4650      	mov	r0, sl
 8003faa:	4659      	mov	r1, fp
 8003fac:	f7fc fe1c 	bl	8000be8 <__aeabi_uldivmod>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <UART_SetConfig+0x38c>)
 8003fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2164      	movs	r1, #100	; 0x64
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	3332      	adds	r3, #50	; 0x32
 8003fc8:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <UART_SetConfig+0x38c>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	f003 020f 	and.w	r2, r3, #15
 8003fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4432      	add	r2, r6
 8003fda:	609a      	str	r2, [r3, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	377c      	adds	r7, #124	; 0x7c
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40011000 	.word	0x40011000
 8003fec:	40011400 	.word	0x40011400
 8003ff0:	51eb851f 	.word	0x51eb851f

08003ff4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004002:	6839      	ldr	r1, [r7, #0]
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f001 fda0 	bl	8005b4a <VL53L0X_get_offset_calibration_data_micro_meter>
 800400a:	4603      	mov	r3, r0
 800400c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800400e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	460b      	mov	r3, r1
 8004024:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004026:	2300      	movs	r3, #0
 8004028:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	085b      	lsrs	r3, r3, #1
 800402e:	b2db      	uxtb	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	218a      	movs	r1, #138	; 0x8a
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f004 ff4f 	bl	8008ed8 <VL53L0X_WrByte>
 800403a:	4603      	mov	r3, r0
 800403c:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 800403e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b0a4      	sub	sp, #144	; 0x90
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004054:	2300      	movs	r3, #0
 8004056:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800405a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800405e:	2b00      	cmp	r3, #0
 8004060:	d107      	bne.n	8004072 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004062:	2200      	movs	r2, #0
 8004064:	2188      	movs	r1, #136	; 0x88
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f004 ff36 	bl	8008ed8 <VL53L0X_WrByte>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004080:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4aae      	ldr	r2, [pc, #696]	; (8004340 <VL53L0X_DataInit+0x2f4>)
 8004088:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004092:	f107 0310 	add.w	r3, r7, #16
 8004096:	4619      	mov	r1, r3
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 faef 	bl	800467c <VL53L0X_GetDeviceParameters>
 800409e:	4603      	mov	r3, r0
 80040a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 80040a4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d130      	bne.n	800410e <VL53L0X_DataInit+0xc2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 80040ac:	2300      	movs	r3, #0
 80040ae:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 80040b0:	2300      	movs	r3, #0
 80040b2:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 80040b4:	2300      	movs	r3, #0
 80040b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 80040b8:	f04f 6396 	mov.w	r3, #78643200	; 0x4b00000
 80040bc:	66bb      	str	r3, [r7, #104]	; 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 80040be:	f24b 3333 	movw	r3, #45875	; 0xb333
 80040c2:	653b      	str	r3, [r7, #80]	; 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 80040c4:	4b9f      	ldr	r3, [pc, #636]	; (8004344 <VL53L0X_DataInit+0x2f8>)
 80040c6:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 80040c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040cc:	657b      	str	r3, [r7, #84]	; 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 80040ce:	f04f 7361 	mov.w	r3, #58982400	; 0x3840000
 80040d2:	673b      	str	r3, [r7, #112]	; 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 80040d4:	4b9c      	ldr	r3, [pc, #624]	; (8004348 <VL53L0X_DataInit+0x2fc>)
 80040d6:	65bb      	str	r3, [r7, #88]	; 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 80040d8:	4b9c      	ldr	r3, [pc, #624]	; (800434c <VL53L0X_DataInit+0x300>)
 80040da:	677b      	str	r3, [r7, #116]	; 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 80040dc:	4b9c      	ldr	r3, [pc, #624]	; (8004350 <VL53L0X_DataInit+0x304>)
 80040de:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 80040e0:	4b9c      	ldr	r3, [pc, #624]	; (8004354 <VL53L0X_DataInit+0x308>)
 80040e2:	67bb      	str	r3, [r7, #120]	; 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 80040e4:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 80040e8:	663b      	str	r3, [r7, #96]	; 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 80040ea:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 80040ee:	67fb      	str	r3, [r7, #124]	; 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 80040f0:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 80040f4:	667b      	str	r3, [r7, #100]	; 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 80040f6:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
 80040fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	3308      	adds	r3, #8
 8004102:	f107 0110 	add.w	r1, r7, #16
 8004106:	2278      	movs	r2, #120	; 0x78
 8004108:	4618      	mov	r0, r3
 800410a:	f005 fa79 	bl	8009600 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2264      	movs	r2, #100	; 0x64
 8004112:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f44f 7261 	mov.w	r2, #900	; 0x384
 800411c:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004126:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004130:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800413c:	2201      	movs	r2, #1
 800413e:	2180      	movs	r1, #128	; 0x80
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f004 fec9 	bl	8008ed8 <VL53L0X_WrByte>
 8004146:	4603      	mov	r3, r0
 8004148:	461a      	mov	r2, r3
 800414a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800414e:	4313      	orrs	r3, r2
 8004150:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004154:	2201      	movs	r2, #1
 8004156:	21ff      	movs	r1, #255	; 0xff
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f004 febd 	bl	8008ed8 <VL53L0X_WrByte>
 800415e:	4603      	mov	r3, r0
 8004160:	461a      	mov	r2, r3
 8004162:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004166:	4313      	orrs	r3, r2
 8004168:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800416c:	2200      	movs	r2, #0
 800416e:	2100      	movs	r1, #0
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f004 feb1 	bl	8008ed8 <VL53L0X_WrByte>
 8004176:	4603      	mov	r3, r0
 8004178:	461a      	mov	r2, r3
 800417a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800417e:	4313      	orrs	r3, r2
 8004180:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004184:	f107 030f 	add.w	r3, r7, #15
 8004188:	461a      	mov	r2, r3
 800418a:	2191      	movs	r1, #145	; 0x91
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f004 ff25 	bl	8008fdc <VL53L0X_RdByte>
 8004192:	4603      	mov	r3, r0
 8004194:	461a      	mov	r2, r3
 8004196:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800419a:	4313      	orrs	r3, r2
 800419c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80041a0:	7bfa      	ldrb	r2, [r7, #15]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80041a8:	2201      	movs	r2, #1
 80041aa:	2100      	movs	r1, #0
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f004 fe93 	bl	8008ed8 <VL53L0X_WrByte>
 80041b2:	4603      	mov	r3, r0
 80041b4:	461a      	mov	r2, r3
 80041b6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80041c0:	2200      	movs	r2, #0
 80041c2:	21ff      	movs	r1, #255	; 0xff
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f004 fe87 	bl	8008ed8 <VL53L0X_WrByte>
 80041ca:	4603      	mov	r3, r0
 80041cc:	461a      	mov	r2, r3
 80041ce:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80041d8:	2200      	movs	r2, #0
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f004 fe7b 	bl	8008ed8 <VL53L0X_WrByte>
 80041e2:	4603      	mov	r3, r0
 80041e4:	461a      	mov	r2, r3
 80041e6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80041f0:	2300      	movs	r3, #0
 80041f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041f6:	e017      	b.n	8004228 <VL53L0X_DataInit+0x1dc>
		if (Status == VL53L0X_ERROR_NONE)
 80041f8:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d118      	bne.n	8004232 <VL53L0X_DataInit+0x1e6>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004200:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004204:	b29b      	uxth	r3, r3
 8004206:	2201      	movs	r2, #1
 8004208:	4619      	mov	r1, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fd68 	bl	8004ce0 <VL53L0X_SetLimitCheckEnable>
 8004210:	4603      	mov	r3, r0
 8004212:	461a      	mov	r2, r3
 8004214:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004218:	4313      	orrs	r3, r2
 800421a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800421e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004222:	3301      	adds	r3, #1
 8004224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004228:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800422c:	2b05      	cmp	r3, #5
 800422e:	dde3      	ble.n	80041f8 <VL53L0X_DataInit+0x1ac>
 8004230:	e000      	b.n	8004234 <VL53L0X_DataInit+0x1e8>
		else
			break;
 8004232:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004234:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004238:	2b00      	cmp	r3, #0
 800423a:	d107      	bne.n	800424c <VL53L0X_DataInit+0x200>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800423c:	2200      	movs	r2, #0
 800423e:	2102      	movs	r1, #2
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fd4d 	bl	8004ce0 <VL53L0X_SetLimitCheckEnable>
 8004246:	4603      	mov	r3, r0
 8004248:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800424c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004250:	2b00      	cmp	r3, #0
 8004252:	d107      	bne.n	8004264 <VL53L0X_DataInit+0x218>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004254:	2200      	movs	r2, #0
 8004256:	2103      	movs	r1, #3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fd41 	bl	8004ce0 <VL53L0X_SetLimitCheckEnable>
 800425e:	4603      	mov	r3, r0
 8004260:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004264:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004268:	2b00      	cmp	r3, #0
 800426a:	d107      	bne.n	800427c <VL53L0X_DataInit+0x230>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800426c:	2200      	movs	r2, #0
 800426e:	2104      	movs	r1, #4
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fd35 	bl	8004ce0 <VL53L0X_SetLimitCheckEnable>
 8004276:	4603      	mov	r3, r0
 8004278:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800427c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004280:	2b00      	cmp	r3, #0
 8004282:	d107      	bne.n	8004294 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004284:	2200      	movs	r2, #0
 8004286:	2105      	movs	r1, #5
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 fd29 	bl	8004ce0 <VL53L0X_SetLimitCheckEnable>
 800428e:	4603      	mov	r3, r0
 8004290:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004294:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004298:	2b00      	cmp	r3, #0
 800429a:	d108      	bne.n	80042ae <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800429c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80042a0:	2100      	movs	r1, #0
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fdcc 	bl	8004e40 <VL53L0X_SetLimitCheckValue>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80042ae:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d108      	bne.n	80042c8 <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80042b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042ba:	2101      	movs	r1, #1
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fdbf 	bl	8004e40 <VL53L0X_SetLimitCheckValue>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80042c8:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d108      	bne.n	80042e2 <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80042d0:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80042d4:	2102      	movs	r1, #2
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fdb2 	bl	8004e40 <VL53L0X_SetLimitCheckValue>
 80042dc:	4603      	mov	r3, r0
 80042de:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80042e2:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d107      	bne.n	80042fa <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80042ea:	2200      	movs	r2, #0
 80042ec:	2103      	movs	r1, #3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fda6 	bl	8004e40 <VL53L0X_SetLimitCheckValue>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80042fa:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10f      	bne.n	8004322 <VL53L0X_DataInit+0x2d6>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	22ff      	movs	r2, #255	; 0xff
 8004306:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800430a:	22ff      	movs	r2, #255	; 0xff
 800430c:	2101      	movs	r1, #1
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f004 fde2 	bl	8008ed8 <VL53L0X_WrByte>
 8004314:	4603      	mov	r3, r0
 8004316:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004322:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004326:	2b00      	cmp	r3, #0
 8004328:	d103      	bne.n	8004332 <VL53L0X_DataInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 8004332:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 8004336:	4618      	mov	r0, r3
 8004338:	3790      	adds	r7, #144	; 0x90
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	000970a4 	.word	0x000970a4
 8004344:	044c0000 	.word	0x044c0000
 8004348:	0003cccc 	.word	0x0003cccc
 800434c:	02ee0000 	.word	0x02ee0000
 8004350:	00074ccc 	.word	0x00074ccc
 8004354:	02260000 	.word	0x02260000

08004358 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b0ac      	sub	sp, #176	; 0xb0
 800435c:	af02      	add	r7, sp, #8
 800435e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004360:	2300      	movs	r3, #0
 8004362:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8004366:	f107 031c 	add.w	r3, r7, #28
 800436a:	2278      	movs	r2, #120	; 0x78
 800436c:	2100      	movs	r1, #0
 800436e:	4618      	mov	r0, r3
 8004370:	f005 f954 	bl	800961c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800437c:	2300      	movs	r3, #0
 800437e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint32_t count = 0;
 8004382:	2300      	movs	r3, #0
 8004384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint8_t isApertureSpads = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004396:	2101      	movs	r1, #1
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f002 fb2c 	bl	80069f6 <VL53L0X_get_info_from_device>
 800439e:	4603      	mov	r3, r0
 80043a0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80043aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 80043b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80043b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d80f      	bhi.n	80043e0 <VL53L0X_StaticInit+0x88>
 80043c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d103      	bne.n	80043d0 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 80043c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d807      	bhi.n	80043e0 <VL53L0X_StaticInit+0x88>
 80043d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10f      	bne.n	80043f8 <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 80043d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043dc:	2b0c      	cmp	r3, #12
 80043de:	d90b      	bls.n	80043f8 <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80043e0:	f107 0218 	add.w	r2, r7, #24
 80043e4:	f107 0314 	add.w	r3, r7, #20
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f001 fda8 	bl	8005f40 <VL53L0X_perform_ref_spad_management>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80043f6:	e00a      	b.n	800440e <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80043f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80043fc:	461a      	mov	r2, r3
 80043fe:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f001 ffa8 	bl	8006358 <VL53L0X_set_reference_spads>
 8004408:	4603      	mov	r3, r0
 800440a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800440e:	4b93      	ldr	r3, [pc, #588]	; (800465c <VL53L0X_StaticInit+0x304>)
 8004410:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8004414:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004418:	2b00      	cmp	r3, #0
 800441a:	d111      	bne.n	8004440 <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8004422:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004426:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800442a:	2b00      	cmp	r3, #0
 800442c:	d105      	bne.n	800443a <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8004434:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004438:	e002      	b.n	8004440 <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800443a:	4b88      	ldr	r3, [pc, #544]	; (800465c <VL53L0X_StaticInit+0x304>)
 800443c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004440:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004444:	2b00      	cmp	r3, #0
 8004446:	d107      	bne.n	8004458 <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 8004448:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f003 fe6d 	bl	800812c <VL53L0X_load_tuning_settings>
 8004452:	4603      	mov	r3, r0
 8004454:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8004458:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8004460:	2300      	movs	r3, #0
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2304      	movs	r3, #4
 8004466:	2200      	movs	r2, #0
 8004468:	2100      	movs	r1, #0
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f001 f99c 	bl	80057a8 <VL53L0X_SetGpioConfig>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004476:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800447a:	2b00      	cmp	r3, #0
 800447c:	d121      	bne.n	80044c2 <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800447e:	2201      	movs	r2, #1
 8004480:	21ff      	movs	r1, #255	; 0xff
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f004 fd28 	bl	8008ed8 <VL53L0X_WrByte>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800448e:	f107 031a 	add.w	r3, r7, #26
 8004492:	461a      	mov	r2, r3
 8004494:	2184      	movs	r1, #132	; 0x84
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f004 fdca 	bl	8009030 <VL53L0X_RdWord>
 800449c:	4603      	mov	r3, r0
 800449e:	461a      	mov	r2, r3
 80044a0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80044aa:	2200      	movs	r2, #0
 80044ac:	21ff      	movs	r1, #255	; 0xff
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f004 fd12 	bl	8008ed8 <VL53L0X_WrByte>
 80044b4:	4603      	mov	r3, r0
 80044b6:	461a      	mov	r2, r3
 80044b8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80044bc:	4313      	orrs	r3, r2
 80044be:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80044c2:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d105      	bne.n	80044d6 <VL53L0X_StaticInit+0x17e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80044ca:	8b7b      	ldrh	r3, [r7, #26]
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	461a      	mov	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80044d6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d108      	bne.n	80044f0 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80044de:	f107 031c 	add.w	r3, r7, #28
 80044e2:	4619      	mov	r1, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f8c9 	bl	800467c <VL53L0X_GetDeviceParameters>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 80044f0:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d110      	bne.n	800451a <VL53L0X_StaticInit+0x1c2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80044f8:	f107 0319 	add.w	r3, r7, #25
 80044fc:	4619      	mov	r1, r3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f9b1 	bl	8004866 <VL53L0X_GetFractionEnable>
 8004504:	4603      	mov	r3, r0
 8004506:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 800450a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <VL53L0X_StaticInit+0x1c2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8004512:	7e7a      	ldrb	r2, [r7, #25]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 800451a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800451e:	2b00      	cmp	r3, #0
 8004520:	d107      	bne.n	8004532 <VL53L0X_StaticInit+0x1da>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3308      	adds	r3, #8
 8004526:	f107 011c 	add.w	r1, r7, #28
 800452a:	2278      	movs	r2, #120	; 0x78
 800452c:	4618      	mov	r0, r3
 800452e:	f005 f867 	bl	8009600 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8004532:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004536:	2b00      	cmp	r3, #0
 8004538:	d111      	bne.n	800455e <VL53L0X_StaticInit+0x206>
		Status = VL53L0X_RdByte(Dev,
 800453a:	f107 0319 	add.w	r3, r7, #25
 800453e:	461a      	mov	r2, r3
 8004540:	2101      	movs	r1, #1
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f004 fd4a 	bl	8008fdc <VL53L0X_RdByte>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800454e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004552:	2b00      	cmp	r3, #0
 8004554:	d103      	bne.n	800455e <VL53L0X_StaticInit+0x206>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8004556:	7e7a      	ldrb	r2, [r7, #25]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800455e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004562:	2b00      	cmp	r3, #0
 8004564:	d107      	bne.n	8004576 <VL53L0X_StaticInit+0x21e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004566:	2200      	movs	r2, #0
 8004568:	2100      	movs	r1, #0
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f9f0 	bl	8004950 <VL53L0X_SetSequenceStepEnable>
 8004570:	4603      	mov	r3, r0
 8004572:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004576:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800457a:	2b00      	cmp	r3, #0
 800457c:	d107      	bne.n	800458e <VL53L0X_StaticInit+0x236>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800457e:	2200      	movs	r2, #0
 8004580:	2102      	movs	r1, #2
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f9e4 	bl	8004950 <VL53L0X_SetSequenceStepEnable>
 8004588:	4603      	mov	r3, r0
 800458a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800458e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <VL53L0X_StaticInit+0x246>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2203      	movs	r2, #3
 800459a:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800459e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_GetVcselPulsePeriod(
 80045a6:	f107 0313 	add.w	r3, r7, #19
 80045aa:	461a      	mov	r2, r3
 80045ac:	2100      	movs	r1, #0
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f9b6 	bl	8004920 <VL53L0X_GetVcselPulsePeriod>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80045ba:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <VL53L0X_StaticInit+0x272>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80045c2:	7cfa      	ldrb	r2, [r7, #19]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80045ca:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80045d2:	f107 0313 	add.w	r3, r7, #19
 80045d6:	461a      	mov	r2, r3
 80045d8:	2101      	movs	r1, #1
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f9a0 	bl	8004920 <VL53L0X_GetVcselPulsePeriod>
 80045e0:	4603      	mov	r3, r0
 80045e2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80045e6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <VL53L0X_StaticInit+0x29e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80045ee:	7cfa      	ldrb	r2, [r7, #19]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80045f6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d109      	bne.n	8004612 <VL53L0X_StaticInit+0x2ba>
		Status = get_sequence_step_timeout(
 80045fe:	f107 030c 	add.w	r3, r7, #12
 8004602:	461a      	mov	r2, r3
 8004604:	2103      	movs	r1, #3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f002 ff78 	bl	80074fc <get_sequence_step_timeout>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004612:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <VL53L0X_StaticInit+0x2ca>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004622:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 800462a:	f107 030c 	add.w	r3, r7, #12
 800462e:	461a      	mov	r2, r3
 8004630:	2104      	movs	r1, #4
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f002 ff62 	bl	80074fc <get_sequence_step_timeout>
 8004638:	4603      	mov	r3, r0
 800463a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800463e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004642:	2b00      	cmp	r3, #0
 8004644:	d103      	bne.n	800464e <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800464e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 8004652:	4618      	mov	r0, r3
 8004654:	37a8      	adds	r7, #168	; 0xa8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000010 	.word	0x20000010

08004660 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8004668:	239d      	movs	r3, #157	; 0x9d
 800466a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800466c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004686:	2300      	movs	r3, #0
 8004688:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	4619      	mov	r1, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f8d6 	bl	8004840 <VL53L0X_GetDeviceMode>
 8004694:	4603      	mov	r3, r0
 8004696:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d107      	bne.n	80046b0 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	3308      	adds	r3, #8
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fa9e 	bl	8004be8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80046ac:	4603      	mov	r3, r0
 80046ae:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80046b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2200      	movs	r2, #0
 80046bc:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80046be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d107      	bne.n	80046d6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	3310      	adds	r3, #16
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fad4 	bl	8004c7a <VL53L0X_GetXTalkCompensationRateMegaCps>
 80046d2:	4603      	mov	r3, r0
 80046d4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80046d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d107      	bne.n	80046ee <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	3314      	adds	r3, #20
 80046e2:	4619      	mov	r1, r3
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff fc85 	bl	8003ff4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80046ea:	4603      	mov	r3, r0
 80046ec:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80046ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d134      	bne.n	8004760 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	e02a      	b.n	8004752 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80046fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d12a      	bne.n	800475a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	b299      	uxth	r1, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	3308      	adds	r3, #8
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	4413      	add	r3, r2
 8004712:	3304      	adds	r3, #4
 8004714:	461a      	mov	r2, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fbf4 	bl	8004f04 <VL53L0X_GetLimitCheckValue>
 800471c:	4603      	mov	r3, r0
 800471e:	461a      	mov	r2, r3
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	4313      	orrs	r3, r2
 8004724:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8004726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d117      	bne.n	800475e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	b299      	uxth	r1, r3
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	3318      	adds	r3, #24
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	4413      	add	r3, r2
 800473a:	461a      	mov	r2, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fb5b 	bl	8004df8 <VL53L0X_GetLimitCheckEnable>
 8004742:	4603      	mov	r3, r0
 8004744:	461a      	mov	r2, r3
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	4313      	orrs	r3, r2
 800474a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	3301      	adds	r3, #1
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b05      	cmp	r3, #5
 8004756:	ddd1      	ble.n	80046fc <VL53L0X_GetDeviceParameters+0x80>
 8004758:	e002      	b.n	8004760 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800475e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d107      	bne.n	8004778 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	3374      	adds	r3, #116	; 0x74
 800476c:	4619      	mov	r1, r3
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fc56 	bl	8005020 <VL53L0X_GetWrapAroundCheckEnable>
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8004778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d107      	bne.n	8004790 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	3304      	adds	r3, #4
 8004784:	4619      	mov	r1, r3
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f89f 	bl	80048ca <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800478c:	4603      	mov	r3, r0
 800478e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d120      	bne.n	80047da <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8004798:	2300      	movs	r3, #0
 800479a:	60bb      	str	r3, [r7, #8]
 800479c:	e01a      	b.n	80047d4 <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	3310      	adds	r3, #16
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 80047aa:	6839      	ldr	r1, [r7, #0]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	330e      	adds	r3, #14
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	3316      	adds	r3, #22
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 80047c2:	6839      	ldr	r1, [r7, #0]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	3314      	adds	r3, #20
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	3301      	adds	r3, #1
 80047d2:	60bb      	str	r3, [r7, #8]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b06      	cmp	r3, #6
 80047d8:	dde1      	ble.n	800479e <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80047da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	2b15      	cmp	r3, #21
 80047fc:	bf8c      	ite	hi
 80047fe:	2201      	movhi	r2, #1
 8004800:	2200      	movls	r2, #0
 8004802:	b2d2      	uxtb	r2, r2
 8004804:	2a00      	cmp	r2, #0
 8004806:	d10e      	bne.n	8004826 <VL53L0X_SetDeviceMode+0x3e>
 8004808:	2201      	movs	r2, #1
 800480a:	409a      	lsls	r2, r3
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <VL53L0X_SetDeviceMode+0x54>)
 800480e:	4013      	ands	r3, r2
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf14      	ite	ne
 8004814:	2301      	movne	r3, #1
 8004816:	2300      	moveq	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	721a      	strb	r2, [r3, #8]
		break;
 8004824:	e001      	b.n	800482a <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004826:	23f8      	movs	r3, #248	; 0xf8
 8004828:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800482a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	0030000b 	.word	0x0030000b

08004840 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	7a1a      	ldrb	r2, [r3, #8]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004856:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3714      	adds	r7, #20
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b084      	sub	sp, #16
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
 800486e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004870:	2300      	movs	r3, #0
 8004872:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	2109      	movs	r1, #9
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f004 fbaf 	bl	8008fdc <VL53L0X_RdByte>
 800487e:	4603      	mov	r3, r0
 8004880:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	b2da      	uxtb	r2, r3
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004898:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048ae:	2300      	movs	r3, #0
 80048b0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80048b2:	6839      	ldr	r1, [r7, #0]
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f003 fab4 	bl	8007e22 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80048ba:	4603      	mov	r3, r0
 80048bc:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80048be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
 80048d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048d4:	2300      	movs	r3, #0
 80048d6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80048d8:	6839      	ldr	r1, [r7, #0]
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f003 fb74 	bl	8007fc8 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80048e0:	4603      	mov	r3, r0
 80048e2:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80048e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
 80048fc:	4613      	mov	r3, r2
 80048fe:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004900:	2300      	movs	r3, #0
 8004902:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8004904:	78ba      	ldrb	r2, [r7, #2]
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f002 ffc9 	bl	80078a2 <VL53L0X_set_vcsel_pulse_period>
 8004910:	4603      	mov	r3, r0
 8004912:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	460b      	mov	r3, r1
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800492e:	2300      	movs	r3, #0
 8004930:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8004932:	7afb      	ldrb	r3, [r7, #11]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	4619      	mov	r1, r3
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f003 fa3b 	bl	8007db4 <VL53L0X_get_vcsel_pulse_period>
 800493e:	4603      	mov	r3, r0
 8004940:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	70fb      	strb	r3, [r7, #3]
 800495c:	4613      	mov	r3, r2
 800495e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004960:	2300      	movs	r3, #0
 8004962:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800496c:	f107 030f 	add.w	r3, r7, #15
 8004970:	461a      	mov	r2, r3
 8004972:	2101      	movs	r1, #1
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f004 fb31 	bl	8008fdc <VL53L0X_RdByte>
 800497a:	4603      	mov	r3, r0
 800497c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8004982:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d15a      	bne.n	8004a40 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800498a:	78bb      	ldrb	r3, [r7, #2]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d12b      	bne.n	80049e8 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	2b04      	cmp	r3, #4
 8004994:	d825      	bhi.n	80049e2 <VL53L0X_SetSequenceStepEnable+0x92>
 8004996:	a201      	add	r2, pc, #4	; (adr r2, 800499c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049b1 	.word	0x080049b1
 80049a0:	080049bb 	.word	0x080049bb
 80049a4:	080049c5 	.word	0x080049c5
 80049a8:	080049cf 	.word	0x080049cf
 80049ac:	080049d9 	.word	0x080049d9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80049b0:	7dbb      	ldrb	r3, [r7, #22]
 80049b2:	f043 0310 	orr.w	r3, r3, #16
 80049b6:	75bb      	strb	r3, [r7, #22]
				break;
 80049b8:	e043      	b.n	8004a42 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80049ba:	7dbb      	ldrb	r3, [r7, #22]
 80049bc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80049c0:	75bb      	strb	r3, [r7, #22]
				break;
 80049c2:	e03e      	b.n	8004a42 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80049c4:	7dbb      	ldrb	r3, [r7, #22]
 80049c6:	f043 0304 	orr.w	r3, r3, #4
 80049ca:	75bb      	strb	r3, [r7, #22]
				break;
 80049cc:	e039      	b.n	8004a42 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80049ce:	7dbb      	ldrb	r3, [r7, #22]
 80049d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d4:	75bb      	strb	r3, [r7, #22]
				break;
 80049d6:	e034      	b.n	8004a42 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80049d8:	7dbb      	ldrb	r3, [r7, #22]
 80049da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049de:	75bb      	strb	r3, [r7, #22]
				break;
 80049e0:	e02f      	b.n	8004a42 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80049e2:	23fc      	movs	r3, #252	; 0xfc
 80049e4:	75fb      	strb	r3, [r7, #23]
 80049e6:	e02c      	b.n	8004a42 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d825      	bhi.n	8004a3a <VL53L0X_SetSequenceStepEnable+0xea>
 80049ee:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a09 	.word	0x08004a09
 80049f8:	08004a13 	.word	0x08004a13
 80049fc:	08004a1d 	.word	0x08004a1d
 8004a00:	08004a27 	.word	0x08004a27
 8004a04:	08004a31 	.word	0x08004a31
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8004a08:	7dbb      	ldrb	r3, [r7, #22]
 8004a0a:	f023 0310 	bic.w	r3, r3, #16
 8004a0e:	75bb      	strb	r3, [r7, #22]
				break;
 8004a10:	e017      	b.n	8004a42 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8004a12:	7dbb      	ldrb	r3, [r7, #22]
 8004a14:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004a18:	75bb      	strb	r3, [r7, #22]
				break;
 8004a1a:	e012      	b.n	8004a42 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8004a1c:	7dbb      	ldrb	r3, [r7, #22]
 8004a1e:	f023 0304 	bic.w	r3, r3, #4
 8004a22:	75bb      	strb	r3, [r7, #22]
				break;
 8004a24:	e00d      	b.n	8004a42 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8004a26:	7dbb      	ldrb	r3, [r7, #22]
 8004a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a2c:	75bb      	strb	r3, [r7, #22]
				break;
 8004a2e:	e008      	b.n	8004a42 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8004a30:	7dbb      	ldrb	r3, [r7, #22]
 8004a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a36:	75bb      	strb	r3, [r7, #22]
				break;
 8004a38:	e003      	b.n	8004a42 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004a3a:	23fc      	movs	r3, #252	; 0xfc
 8004a3c:	75fb      	strb	r3, [r7, #23]
 8004a3e:	e000      	b.n	8004a42 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8004a40:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	7dba      	ldrb	r2, [r7, #22]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d01e      	beq.n	8004a88 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8004a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d107      	bne.n	8004a62 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8004a52:	7dbb      	ldrb	r3, [r7, #22]
 8004a54:	461a      	mov	r2, r3
 8004a56:	2101      	movs	r1, #1
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f004 fa3d 	bl	8008ed8 <VL53L0X_WrByte>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8004a62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d103      	bne.n	8004a72 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	7dba      	ldrb	r2, [r7, #22]
 8004a6e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8004a72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004a80:	6939      	ldr	r1, [r7, #16]
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff ff0e 	bl	80048a4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	72fb      	strb	r3, [r7, #11]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8004ab0:	7afb      	ldrb	r3, [r7, #11]
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d836      	bhi.n	8004b24 <sequence_step_enabled+0x90>
 8004ab6:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <sequence_step_enabled+0x28>)
 8004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abc:	08004ad1 	.word	0x08004ad1
 8004ac0:	08004ae3 	.word	0x08004ae3
 8004ac4:	08004af5 	.word	0x08004af5
 8004ac8:	08004b07 	.word	0x08004b07
 8004acc:	08004b19 	.word	0x08004b19
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004ad0:	7abb      	ldrb	r3, [r7, #10]
 8004ad2:	111b      	asrs	r3, r3, #4
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	701a      	strb	r2, [r3, #0]
		break;
 8004ae0:	e022      	b.n	8004b28 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8004ae2:	7abb      	ldrb	r3, [r7, #10]
 8004ae4:	10db      	asrs	r3, r3, #3
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	701a      	strb	r2, [r3, #0]
		break;
 8004af2:	e019      	b.n	8004b28 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004af4:	7abb      	ldrb	r3, [r7, #10]
 8004af6:	109b      	asrs	r3, r3, #2
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	701a      	strb	r2, [r3, #0]
		break;
 8004b04:	e010      	b.n	8004b28 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8004b06:	7abb      	ldrb	r3, [r7, #10]
 8004b08:	119b      	asrs	r3, r3, #6
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	b2da      	uxtb	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	701a      	strb	r2, [r3, #0]
		break;
 8004b16:	e007      	b.n	8004b28 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8004b18:	7abb      	ldrb	r3, [r7, #10]
 8004b1a:	09db      	lsrs	r3, r3, #7
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	701a      	strb	r2, [r3, #0]
		break;
 8004b22:	e001      	b.n	8004b28 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004b24:	23fc      	movs	r3, #252	; 0xfc
 8004b26:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004b28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004b4a:	f107 030e 	add.w	r3, r7, #14
 8004b4e:	461a      	mov	r2, r3
 8004b50:	2101      	movs	r1, #1
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f004 fa42 	bl	8008fdc <VL53L0X_RdByte>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d107      	bne.n	8004b74 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004b64:	7bba      	ldrb	r2, [r7, #14]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2100      	movs	r1, #0
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff ff92 	bl	8004a94 <sequence_step_enabled>
 8004b70:	4603      	mov	r3, r0
 8004b72:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d108      	bne.n	8004b8e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8004b7c:	7bba      	ldrb	r2, [r7, #14]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	3302      	adds	r3, #2
 8004b82:	2101      	movs	r1, #1
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f7ff ff85 	bl	8004a94 <sequence_step_enabled>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d108      	bne.n	8004ba8 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8004b96:	7bba      	ldrb	r2, [r7, #14]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	2102      	movs	r1, #2
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7ff ff78 	bl	8004a94 <sequence_step_enabled>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d108      	bne.n	8004bc2 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004bb0:	7bba      	ldrb	r2, [r7, #14]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	3303      	adds	r3, #3
 8004bb6:	2103      	movs	r1, #3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff ff6b 	bl	8004a94 <sequence_step_enabled>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d108      	bne.n	8004bdc <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8004bca:	7bba      	ldrb	r2, [r7, #14]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	2104      	movs	r1, #4
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff ff5e 	bl	8004a94 <sequence_step_enabled>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8004bf6:	f107 030c 	add.w	r3, r7, #12
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	21f8      	movs	r1, #248	; 0xf8
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f004 fa16 	bl	8009030 <VL53L0X_RdWord>
 8004c04:	4603      	mov	r3, r0
 8004c06:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8004c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d108      	bne.n	8004c22 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004c10:	f107 0308 	add.w	r3, r7, #8
 8004c14:	461a      	mov	r2, r3
 8004c16:	2104      	movs	r1, #4
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f004 fa41 	bl	80090a0 <VL53L0X_RdDWord>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10c      	bne.n	8004c44 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8004c2a:	89bb      	ldrh	r3, [r7, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	89ba      	ldrh	r2, [r7, #12]
 8004c34:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004c44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	7d1b      	ldrb	r3, [r3, #20]
 8004c62:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	7bba      	ldrb	r2, [r7, #14]
 8004c68:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b086      	sub	sp, #24
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004c88:	f107 030e 	add.w	r3, r7, #14
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2120      	movs	r1, #32
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f004 f9cd 	bl	8009030 <VL53L0X_RdWord>
 8004c96:	4603      	mov	r3, r0
 8004c98:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8004c9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d118      	bne.n	8004cd4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8004ca2:	89fb      	ldrh	r3, [r7, #14]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d109      	bne.n	8004cbc <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	751a      	strb	r2, [r3, #20]
 8004cba:	e00b      	b.n	8004cd4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004cbc:	89fb      	ldrh	r3, [r7, #14]
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004cd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	460b      	mov	r3, r1
 8004cea:	807b      	strh	r3, [r7, #2]
 8004cec:	4613      	mov	r3, r2
 8004cee:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004d00:	887b      	ldrh	r3, [r7, #2]
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d902      	bls.n	8004d0c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d06:	23fc      	movs	r3, #252	; 0xfc
 8004d08:	75fb      	strb	r3, [r7, #23]
 8004d0a:	e05b      	b.n	8004dc4 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8004d0c:	787b      	ldrb	r3, [r7, #1]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8004d12:	2300      	movs	r3, #0
 8004d14:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	73bb      	strb	r3, [r7, #14]
 8004d1e:	e00a      	b.n	8004d36 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004d20:	887b      	ldrh	r3, [r7, #2]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	330a      	adds	r3, #10
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8004d36:	887b      	ldrh	r3, [r7, #2]
 8004d38:	2b05      	cmp	r3, #5
 8004d3a:	d841      	bhi.n	8004dc0 <VL53L0X_SetLimitCheckEnable+0xe0>
 8004d3c:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <VL53L0X_SetLimitCheckEnable+0x64>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d5d 	.word	0x08004d5d
 8004d48:	08004d67 	.word	0x08004d67
 8004d4c:	08004d7d 	.word	0x08004d7d
 8004d50:	08004d87 	.word	0x08004d87
 8004d54:	08004d91 	.word	0x08004d91
 8004d58:	08004da9 	.word	0x08004da9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	7bfa      	ldrb	r2, [r7, #15]
 8004d60:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004d64:	e02e      	b.n	8004dc4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2144      	movs	r1, #68	; 0x44
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f004 f8d5 	bl	8008f20 <VL53L0X_WrWord>
 8004d76:	4603      	mov	r3, r0
 8004d78:	75fb      	strb	r3, [r7, #23]

			break;
 8004d7a:	e023      	b.n	8004dc4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	7bfa      	ldrb	r2, [r7, #15]
 8004d80:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004d84:	e01e      	b.n	8004dc4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	7bfa      	ldrb	r2, [r7, #15]
 8004d8a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8004d8e:	e019      	b.n	8004dc4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8004d90:	7bbb      	ldrb	r3, [r7, #14]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004d96:	7b7b      	ldrb	r3, [r7, #13]
 8004d98:	22fe      	movs	r2, #254	; 0xfe
 8004d9a:	2160      	movs	r1, #96	; 0x60
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f004 f8e9 	bl	8008f74 <VL53L0X_UpdateByte>
 8004da2:	4603      	mov	r3, r0
 8004da4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8004da6:	e00d      	b.n	8004dc4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8004da8:	7bbb      	ldrb	r3, [r7, #14]
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004dae:	7b7b      	ldrb	r3, [r7, #13]
 8004db0:	22ef      	movs	r2, #239	; 0xef
 8004db2:	2160      	movs	r1, #96	; 0x60
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f004 f8dd 	bl	8008f74 <VL53L0X_UpdateByte>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8004dbe:	e001      	b.n	8004dc4 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004dc0:	23fc      	movs	r3, #252	; 0xfc
 8004dc2:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004dc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10f      	bne.n	8004dec <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004dcc:	787b      	ldrb	r3, [r7, #1]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d106      	bne.n	8004de0 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004dd2:	887b      	ldrh	r3, [r7, #2]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2020 	strb.w	r2, [r3, #32]
 8004dde:	e005      	b.n	8004dec <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004de0:	887b      	ldrh	r3, [r7, #2]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004dec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	460b      	mov	r3, r1
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004e0a:	897b      	ldrh	r3, [r7, #10]
 8004e0c:	2b05      	cmp	r3, #5
 8004e0e:	d905      	bls.n	8004e1c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004e10:	23fc      	movs	r3, #252	; 0xfc
 8004e12:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	e008      	b.n	8004e2e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004e1c:	897b      	ldrh	r3, [r7, #10]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4413      	add	r3, r2
 8004e22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e26:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	7dba      	ldrb	r2, [r7, #22]
 8004e2c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8004e52:	897b      	ldrh	r3, [r7, #10]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e5c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8004e5e:	7dbb      	ldrb	r3, [r7, #22]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004e64:	897b      	ldrh	r3, [r7, #10]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	330a      	adds	r3, #10
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	605a      	str	r2, [r3, #4]
 8004e72:	e040      	b.n	8004ef6 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8004e74:	897b      	ldrh	r3, [r7, #10]
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	d830      	bhi.n	8004edc <VL53L0X_SetLimitCheckValue+0x9c>
 8004e7a:	a201      	add	r2, pc, #4	; (adr r2, 8004e80 <VL53L0X_SetLimitCheckValue+0x40>)
 8004e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e80:	08004e99 	.word	0x08004e99
 8004e84:	08004ea1 	.word	0x08004ea1
 8004e88:	08004eb7 	.word	0x08004eb7
 8004e8c:	08004ebf 	.word	0x08004ebf
 8004e90:	08004ec7 	.word	0x08004ec7
 8004e94:	08004ec7 	.word	0x08004ec7

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	62da      	str	r2, [r3, #44]	; 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8004e9e:	e01f      	b.n	8004ee0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	2144      	movs	r1, #68	; 0x44
 8004eaa:	68f8      	ldr	r0, [r7, #12]
 8004eac:	f004 f838 	bl	8008f20 <VL53L0X_WrWord>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004eb4:	e014      	b.n	8004ee0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8004ebc:	e010      	b.n	8004ee0 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004ec4:	e00c      	b.n	8004ee0 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2164      	movs	r1, #100	; 0x64
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f004 f825 	bl	8008f20 <VL53L0X_WrWord>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004eda:	e001      	b.n	8004ee0 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004edc:	23fc      	movs	r3, #252	; 0xfc
 8004ede:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004ee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004ee8:	897b      	ldrh	r3, [r7, #10]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	330a      	adds	r3, #10
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop

08004f04 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004f1a:	897b      	ldrh	r3, [r7, #10]
 8004f1c:	2b05      	cmp	r3, #5
 8004f1e:	d847      	bhi.n	8004fb0 <VL53L0X_GetLimitCheckValue+0xac>
 8004f20:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <VL53L0X_GetLimitCheckValue+0x24>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f41 	.word	0x08004f41
 8004f2c:	08004f4d 	.word	0x08004f4d
 8004f30:	08004f73 	.word	0x08004f73
 8004f34:	08004f7f 	.word	0x08004f7f
 8004f38:	08004f8b 	.word	0x08004f8b
 8004f3c:	08004f8b 	.word	0x08004f8b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	77bb      	strb	r3, [r7, #30]
		break;
 8004f4a:	e033      	b.n	8004fb4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004f4c:	f107 0316 	add.w	r3, r7, #22
 8004f50:	461a      	mov	r2, r3
 8004f52:	2144      	movs	r1, #68	; 0x44
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f004 f86b 	bl	8009030 <VL53L0X_RdWord>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004f5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004f66:	8afb      	ldrh	r3, [r7, #22]
 8004f68:	025b      	lsls	r3, r3, #9
 8004f6a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	77bb      	strb	r3, [r7, #30]
		break;
 8004f70:	e020      	b.n	8004fb4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f76:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	77bb      	strb	r3, [r7, #30]
		break;
 8004f7c:	e01a      	b.n	8004fb4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	77bb      	strb	r3, [r7, #30]
		break;
 8004f88:	e014      	b.n	8004fb4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004f8a:	f107 0316 	add.w	r3, r7, #22
 8004f8e:	461a      	mov	r2, r3
 8004f90:	2164      	movs	r1, #100	; 0x64
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f004 f84c 	bl	8009030 <VL53L0X_RdWord>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004f9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d102      	bne.n	8004faa <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004fa4:	8afb      	ldrh	r3, [r7, #22]
 8004fa6:	025b      	lsls	r3, r3, #9
 8004fa8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	77bb      	strb	r3, [r7, #30]
		break;
 8004fae:	e001      	b.n	8004fb4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004fb0:	23fc      	movs	r3, #252	; 0xfc
 8004fb2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d12a      	bne.n	8005012 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8004fbc:	7fbb      	ldrb	r3, [r7, #30]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d124      	bne.n	800500c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d110      	bne.n	8004fea <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8004fc8:	897b      	ldrh	r3, [r7, #10]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	330a      	adds	r3, #10
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004fdc:	897b      	ldrh	r3, [r7, #10]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2020 	strb.w	r2, [r3, #32]
 8004fe8:	e013      	b.n	8005012 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004ff0:	897b      	ldrh	r3, [r7, #10]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	330a      	adds	r3, #10
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004ffe:	897b      	ldrh	r3, [r7, #10]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4413      	add	r3, r2
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2020 	strb.w	r2, [r3, #32]
 800500a:	e002      	b.n	8005012 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005012:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005016:	4618      	mov	r0, r3
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop

08005020 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800502a:	2300      	movs	r3, #0
 800502c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800502e:	f107 030e 	add.w	r3, r7, #14
 8005032:	461a      	mov	r2, r3
 8005034:	2101      	movs	r1, #1
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f003 ffd0 	bl	8008fdc <VL53L0X_RdByte>
 800503c:	4603      	mov	r3, r0
 800503e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8005040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10e      	bne.n	8005066 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005048:	7bba      	ldrb	r2, [r7, #14]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 8005050:	7bbb      	ldrb	r3, [r7, #14]
 8005052:	b25b      	sxtb	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	da03      	bge.n	8005060 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2201      	movs	r2, #1
 800505c:	701a      	strb	r2, [r3, #0]
 800505e:	e002      	b.n	8005066 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2200      	movs	r2, #0
 8005064:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d104      	bne.n	8005078 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781a      	ldrb	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005078:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800508c:	2300      	movs	r3, #0
 800508e:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005090:	f107 030e 	add.w	r3, r7, #14
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7ff fbd2 	bl	8004840 <VL53L0X_GetDeviceMode>
 800509c:	4603      	mov	r3, r0
 800509e:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 80050a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d107      	bne.n	80050b8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80050a8:	7bbb      	ldrb	r3, [r7, #14]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d104      	bne.n	80050b8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f924 	bl	80052fc <VL53L0X_StartMeasurement>
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80050b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d104      	bne.n	80050ca <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f001 fbcb 	bl	800685c <VL53L0X_measurement_poll_for_completion>
 80050c6:	4603      	mov	r3, r0
 80050c8:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80050ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d106      	bne.n	80050e0 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80050d2:	7bbb      	ldrb	r3, [r7, #14]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d103      	bne.n	80050e0 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2203      	movs	r2, #3
 80050dc:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 80050e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050f8:	2300      	movs	r3, #0
 80050fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80050fc:	2301      	movs	r3, #1
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f001 fb6d 	bl	80067e2 <VL53L0X_perform_ref_calibration>
 8005108:	4603      	mov	r3, r0
 800510a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800510c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005124:	2300      	movs	r3, #0
 8005126:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800512e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 8005130:	7dbb      	ldrb	r3, [r7, #22]
 8005132:	2b03      	cmp	r3, #3
 8005134:	f000 8093 	beq.w	800525e <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 8005138:	2b03      	cmp	r3, #3
 800513a:	f300 80d6 	bgt.w	80052ea <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 800513e:	2b01      	cmp	r3, #1
 8005140:	d002      	beq.n	8005148 <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 8005142:	2b02      	cmp	r3, #2
 8005144:	d047      	beq.n	80051d6 <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 8005146:	e0d0      	b.n	80052ea <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005148:	f107 030c 	add.w	r3, r7, #12
 800514c:	f107 0210 	add.w	r2, r7, #16
 8005150:	2101      	movs	r1, #1
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fc4c 	bl	80059f0 <VL53L0X_GetInterruptThresholds>
 8005158:	4603      	mov	r3, r0
 800515a:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005162:	f240 80bd 	bls.w	80052e0 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 8005166:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800516a:	2b00      	cmp	r3, #0
 800516c:	f040 80b8 	bne.w	80052e0 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d006      	beq.n	8005184 <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005176:	4960      	ldr	r1, [pc, #384]	; (80052f8 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f002 ffd7 	bl	800812c <VL53L0X_load_tuning_settings>
 800517e:	4603      	mov	r3, r0
 8005180:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8005182:	e0ad      	b.n	80052e0 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005184:	2204      	movs	r2, #4
 8005186:	21ff      	movs	r1, #255	; 0xff
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f003 fea5 	bl	8008ed8 <VL53L0X_WrByte>
 800518e:	4603      	mov	r3, r0
 8005190:	461a      	mov	r2, r3
 8005192:	7dfb      	ldrb	r3, [r7, #23]
 8005194:	4313      	orrs	r3, r2
 8005196:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005198:	2200      	movs	r2, #0
 800519a:	2170      	movs	r1, #112	; 0x70
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f003 fe9b 	bl	8008ed8 <VL53L0X_WrByte>
 80051a2:	4603      	mov	r3, r0
 80051a4:	461a      	mov	r2, r3
 80051a6:	7dfb      	ldrb	r3, [r7, #23]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80051ac:	2200      	movs	r2, #0
 80051ae:	21ff      	movs	r1, #255	; 0xff
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f003 fe91 	bl	8008ed8 <VL53L0X_WrByte>
 80051b6:	4603      	mov	r3, r0
 80051b8:	461a      	mov	r2, r3
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
 80051bc:	4313      	orrs	r3, r2
 80051be:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80051c0:	2200      	movs	r2, #0
 80051c2:	2180      	movs	r1, #128	; 0x80
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f003 fe87 	bl	8008ed8 <VL53L0X_WrByte>
 80051ca:	4603      	mov	r3, r0
 80051cc:	461a      	mov	r2, r3
 80051ce:	7dfb      	ldrb	r3, [r7, #23]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	75fb      	strb	r3, [r7, #23]
		break;
 80051d4:	e084      	b.n	80052e0 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 80051d6:	f107 030c 	add.w	r3, r7, #12
 80051da:	f107 0210 	add.w	r2, r7, #16
 80051de:	2101      	movs	r1, #1
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fc05 	bl	80059f0 <VL53L0X_GetInterruptThresholds>
 80051e6:	4603      	mov	r3, r0
 80051e8:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d079      	beq.n	80052e4 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 80051f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d175      	bne.n	80052e4 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d006      	beq.n	800520c <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 80051fe:	493e      	ldr	r1, [pc, #248]	; (80052f8 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f002 ff93 	bl	800812c <VL53L0X_load_tuning_settings>
 8005206:	4603      	mov	r3, r0
 8005208:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800520a:	e06b      	b.n	80052e4 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800520c:	2204      	movs	r2, #4
 800520e:	21ff      	movs	r1, #255	; 0xff
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f003 fe61 	bl	8008ed8 <VL53L0X_WrByte>
 8005216:	4603      	mov	r3, r0
 8005218:	461a      	mov	r2, r3
 800521a:	7dfb      	ldrb	r3, [r7, #23]
 800521c:	4313      	orrs	r3, r2
 800521e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005220:	2200      	movs	r2, #0
 8005222:	2170      	movs	r1, #112	; 0x70
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f003 fe57 	bl	8008ed8 <VL53L0X_WrByte>
 800522a:	4603      	mov	r3, r0
 800522c:	461a      	mov	r2, r3
 800522e:	7dfb      	ldrb	r3, [r7, #23]
 8005230:	4313      	orrs	r3, r2
 8005232:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005234:	2200      	movs	r2, #0
 8005236:	21ff      	movs	r1, #255	; 0xff
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f003 fe4d 	bl	8008ed8 <VL53L0X_WrByte>
 800523e:	4603      	mov	r3, r0
 8005240:	461a      	mov	r2, r3
 8005242:	7dfb      	ldrb	r3, [r7, #23]
 8005244:	4313      	orrs	r3, r2
 8005246:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005248:	2200      	movs	r2, #0
 800524a:	2180      	movs	r1, #128	; 0x80
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f003 fe43 	bl	8008ed8 <VL53L0X_WrByte>
 8005252:	4603      	mov	r3, r0
 8005254:	461a      	mov	r2, r3
 8005256:	7dfb      	ldrb	r3, [r7, #23]
 8005258:	4313      	orrs	r3, r2
 800525a:	75fb      	strb	r3, [r7, #23]
		break;
 800525c:	e042      	b.n	80052e4 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800525e:	f107 030c 	add.w	r3, r7, #12
 8005262:	f107 0210 	add.w	r2, r7, #16
 8005266:	2101      	movs	r1, #1
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fbc1 	bl	80059f0 <VL53L0X_GetInterruptThresholds>
 800526e:	4603      	mov	r3, r0
 8005270:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 8005272:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d136      	bne.n	80052e8 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d006      	beq.n	800528e <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005280:	491d      	ldr	r1, [pc, #116]	; (80052f8 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f002 ff52 	bl	800812c <VL53L0X_load_tuning_settings>
 8005288:	4603      	mov	r3, r0
 800528a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800528c:	e02c      	b.n	80052e8 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800528e:	2204      	movs	r2, #4
 8005290:	21ff      	movs	r1, #255	; 0xff
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f003 fe20 	bl	8008ed8 <VL53L0X_WrByte>
 8005298:	4603      	mov	r3, r0
 800529a:	461a      	mov	r2, r3
 800529c:	7dfb      	ldrb	r3, [r7, #23]
 800529e:	4313      	orrs	r3, r2
 80052a0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80052a2:	2200      	movs	r2, #0
 80052a4:	2170      	movs	r1, #112	; 0x70
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f003 fe16 	bl	8008ed8 <VL53L0X_WrByte>
 80052ac:	4603      	mov	r3, r0
 80052ae:	461a      	mov	r2, r3
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80052b6:	2200      	movs	r2, #0
 80052b8:	21ff      	movs	r1, #255	; 0xff
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f003 fe0c 	bl	8008ed8 <VL53L0X_WrByte>
 80052c0:	4603      	mov	r3, r0
 80052c2:	461a      	mov	r2, r3
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80052ca:	2200      	movs	r2, #0
 80052cc:	2180      	movs	r1, #128	; 0x80
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f003 fe02 	bl	8008ed8 <VL53L0X_WrByte>
 80052d4:	4603      	mov	r3, r0
 80052d6:	461a      	mov	r2, r3
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	4313      	orrs	r3, r2
 80052dc:	75fb      	strb	r3, [r7, #23]
		break;
 80052de:	e003      	b.n	80052e8 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 80052e0:	bf00      	nop
 80052e2:	e002      	b.n	80052ea <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 80052e4:	bf00      	nop
 80052e6:	e000      	b.n	80052ea <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 80052e8:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80052ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000104 	.word	0x20000104

080052fc <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005304:	2300      	movs	r3, #0
 8005306:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005308:	2301      	movs	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800530c:	f107 030e 	add.w	r3, r7, #14
 8005310:	4619      	mov	r1, r3
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff fa94 	bl	8004840 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005318:	2201      	movs	r2, #1
 800531a:	2180      	movs	r1, #128	; 0x80
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f003 fddb 	bl	8008ed8 <VL53L0X_WrByte>
 8005322:	4603      	mov	r3, r0
 8005324:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005326:	2201      	movs	r2, #1
 8005328:	21ff      	movs	r1, #255	; 0xff
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f003 fdd4 	bl	8008ed8 <VL53L0X_WrByte>
 8005330:	4603      	mov	r3, r0
 8005332:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005334:	2200      	movs	r2, #0
 8005336:	2100      	movs	r1, #0
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f003 fdcd 	bl	8008ed8 <VL53L0X_WrByte>
 800533e:	4603      	mov	r3, r0
 8005340:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 8005348:	461a      	mov	r2, r3
 800534a:	2191      	movs	r1, #145	; 0x91
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f003 fdc3 	bl	8008ed8 <VL53L0X_WrByte>
 8005352:	4603      	mov	r3, r0
 8005354:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005356:	2201      	movs	r2, #1
 8005358:	2100      	movs	r1, #0
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f003 fdbc 	bl	8008ed8 <VL53L0X_WrByte>
 8005360:	4603      	mov	r3, r0
 8005362:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005364:	2200      	movs	r2, #0
 8005366:	21ff      	movs	r1, #255	; 0xff
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f003 fdb5 	bl	8008ed8 <VL53L0X_WrByte>
 800536e:	4603      	mov	r3, r0
 8005370:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005372:	2200      	movs	r2, #0
 8005374:	2180      	movs	r1, #128	; 0x80
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f003 fdae 	bl	8008ed8 <VL53L0X_WrByte>
 800537c:	4603      	mov	r3, r0
 800537e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005380:	7bbb      	ldrb	r3, [r7, #14]
 8005382:	2b03      	cmp	r3, #3
 8005384:	d054      	beq.n	8005430 <VL53L0X_StartMeasurement+0x134>
 8005386:	2b03      	cmp	r3, #3
 8005388:	dc6c      	bgt.n	8005464 <VL53L0X_StartMeasurement+0x168>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <VL53L0X_StartMeasurement+0x98>
 800538e:	2b01      	cmp	r3, #1
 8005390:	d034      	beq.n	80053fc <VL53L0X_StartMeasurement+0x100>
 8005392:	e067      	b.n	8005464 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005394:	2201      	movs	r2, #1
 8005396:	2100      	movs	r1, #0
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f003 fd9d 	bl	8008ed8 <VL53L0X_WrByte>
 800539e:	4603      	mov	r3, r0
 80053a0:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80053a2:	7bfb      	ldrb	r3, [r7, #15]
 80053a4:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80053a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d15d      	bne.n	800546a <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80053ae:	2300      	movs	r3, #0
 80053b0:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d008      	beq.n	80053ca <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 80053b8:	f107 030d 	add.w	r3, r7, #13
 80053bc:	461a      	mov	r2, r3
 80053be:	2100      	movs	r1, #0
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f003 fe0b 	bl	8008fdc <VL53L0X_RdByte>
 80053c6:	4603      	mov	r3, r0
 80053c8:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	3301      	adds	r3, #1
 80053ce:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80053d0:	7b7a      	ldrb	r2, [r7, #13]
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	4013      	ands	r3, r2
 80053d6:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80053d8:	7bfa      	ldrb	r2, [r7, #15]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d107      	bne.n	80053ee <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80053de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80053ec:	d3e1      	bcc.n	80053b2 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80053f4:	d339      	bcc.n	800546a <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80053f6:	23f9      	movs	r3, #249	; 0xf9
 80053f8:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80053fa:	e036      	b.n	800546a <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80053fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d105      	bne.n	8005410 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005404:	2101      	movs	r1, #1
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff fe86 	bl	8005118 <VL53L0X_CheckAndLoadInterruptSettings>
 800540c:	4603      	mov	r3, r0
 800540e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005410:	2202      	movs	r2, #2
 8005412:	2100      	movs	r1, #0
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f003 fd5f 	bl	8008ed8 <VL53L0X_WrByte>
 800541a:	4603      	mov	r3, r0
 800541c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800541e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d123      	bne.n	800546e <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2204      	movs	r2, #4
 800542a:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 800542e:	e01e      	b.n	800546e <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005430:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d105      	bne.n	8005444 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005438:	2101      	movs	r1, #1
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7ff fe6c 	bl	8005118 <VL53L0X_CheckAndLoadInterruptSettings>
 8005440:	4603      	mov	r3, r0
 8005442:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005444:	2204      	movs	r2, #4
 8005446:	2100      	movs	r1, #0
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f003 fd45 	bl	8008ed8 <VL53L0X_WrByte>
 800544e:	4603      	mov	r3, r0
 8005450:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005452:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2204      	movs	r2, #4
 800545e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8005462:	e006      	b.n	8005472 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005464:	23f8      	movs	r3, #248	; 0xf8
 8005466:	75fb      	strb	r3, [r7, #23]
 8005468:	e004      	b.n	8005474 <VL53L0X_StartMeasurement+0x178>
		break;
 800546a:	bf00      	nop
 800546c:	e002      	b.n	8005474 <VL53L0X_StartMeasurement+0x178>
		break;
 800546e:	bf00      	nop
 8005470:	e000      	b.n	8005474 <VL53L0X_StartMeasurement+0x178>
		break;
 8005472:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005474:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8005494:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005496:	7bbb      	ldrb	r3, [r7, #14]
 8005498:	2b04      	cmp	r3, #4
 800549a:	d112      	bne.n	80054c2 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800549c:	f107 0308 	add.w	r3, r7, #8
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fb1a 	bl	8005adc <VL53L0X_GetInterruptMaskStatus>
 80054a8:	4603      	mov	r3, r0
 80054aa:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d103      	bne.n	80054ba <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2201      	movs	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]
 80054b8:	e01c      	b.n	80054f4 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	e018      	b.n	80054f4 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80054c2:	f107 030d 	add.w	r3, r7, #13
 80054c6:	461a      	mov	r2, r3
 80054c8:	2114      	movs	r1, #20
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f003 fd86 	bl	8008fdc <VL53L0X_RdByte>
 80054d0:	4603      	mov	r3, r0
 80054d2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80054d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80054dc:	7b7b      	ldrb	r3, [r7, #13]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2201      	movs	r2, #1
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	e002      	b.n	80054f4 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2200      	movs	r2, #0
 80054f2:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80054f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005500:	b5b0      	push	{r4, r5, r7, lr}
 8005502:	b096      	sub	sp, #88	; 0x58
 8005504:	af02      	add	r7, sp, #8
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800550a:	2300      	movs	r3, #0
 800550c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005510:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005514:	230c      	movs	r3, #12
 8005516:	2114      	movs	r1, #20
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f003 fcb1 	bl	8008e80 <VL53L0X_ReadMulti>
 800551e:	4603      	mov	r3, r0
 8005520:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005524:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005528:	2b00      	cmp	r3, #0
 800552a:	f040 80d1 	bne.w	80056d0 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2200      	movs	r2, #0
 8005532:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 800553a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800553e:	b29b      	uxth	r3, r3
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	b29a      	uxth	r2, r3
 8005544:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005548:	b29b      	uxth	r3, r3
 800554a:	4413      	add	r3, r2
 800554c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2200      	movs	r2, #0
 8005554:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005556:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800555a:	b29b      	uxth	r3, r3
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	b29a      	uxth	r2, r3
 8005560:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005564:	b29b      	uxth	r3, r3
 8005566:	4413      	add	r3, r2
 8005568:	b29b      	uxth	r3, r3
 800556a:	025b      	lsls	r3, r3, #9
 800556c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005572:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 8005574:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005578:	b29b      	uxth	r3, r3
 800557a:	021b      	lsls	r3, r3, #8
 800557c:	b29a      	uxth	r2, r3
 800557e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005582:	b29b      	uxth	r3, r3
 8005584:	4413      	add	r3, r2
 8005586:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800558a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800558e:	025b      	lsls	r3, r3, #9
 8005590:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005596:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800559a:	b29b      	uxth	r3, r3
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	b29a      	uxth	r2, r3
 80055a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	4413      	add	r3, r2
 80055a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80055b2:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80055b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 80055c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 80055ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80055ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80055d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055d4:	d046      	beq.n	8005664 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80055d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80055d8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80055dc:	fb02 f303 	mul.w	r3, r2, r3
 80055e0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80055e4:	4a57      	ldr	r2, [pc, #348]	; (8005744 <VL53L0X_GetRangingMeasurementData+0x244>)
 80055e6:	fb82 1203 	smull	r1, r2, r2, r3
 80055ea:	1192      	asrs	r2, r2, #6
 80055ec:	17db      	asrs	r3, r3, #31
 80055ee:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80055f0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	7d1b      	ldrb	r3, [r3, #20]
 80055fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005602:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005606:	2b00      	cmp	r3, #0
 8005608:	d02c      	beq.n	8005664 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800560a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800560c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005610:	fb02 f303 	mul.w	r3, r2, r3
 8005614:	121a      	asrs	r2, r3, #8
					<= 0) {
 8005616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8005618:	429a      	cmp	r2, r3
 800561a:	d10d      	bne.n	8005638 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800561c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8005624:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005628:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800562c:	e016      	b.n	800565c <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800562e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005632:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005636:	e011      	b.n	800565c <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005638:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800563c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800563e:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005642:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005644:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005648:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800564c:	121b      	asrs	r3, r3, #8
 800564e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005652:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005654:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005658:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800565c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005660:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005664:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00d      	beq.n	8005688 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800566c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005670:	089b      	lsrs	r3, r3, #2
 8005672:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005678:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800567c:	b2db      	uxtb	r3, r3
 800567e:	019b      	lsls	r3, r3, #6
 8005680:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	75da      	strb	r2, [r3, #23]
 8005686:	e006      	b.n	8005696 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800568e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2200      	movs	r2, #0
 8005694:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005696:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800569a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800569e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80056a2:	9301      	str	r3, [sp, #4]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	4613      	mov	r3, r2
 80056aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f003 f993 	bl	80089d8 <VL53L0X_get_pal_range_status>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461a      	mov	r2, r3
 80056b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80056c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d103      	bne.n	80056d0 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80056c8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80056d0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d12f      	bne.n	8005738 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f107 040c 	add.w	r4, r7, #12
 80056de:	f103 0580 	add.w	r5, r3, #128	; 0x80
 80056e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80056ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80056f2:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80056f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005700:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005706:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800570c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005712:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8005718:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800571e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8005728:	f107 050c 	add.w	r5, r7, #12
 800572c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800572e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005734:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005738:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800573c:	4618      	mov	r0, r3
 800573e:	3750      	adds	r7, #80	; 0x50
 8005740:	46bd      	mov	sp, r7
 8005742:	bdb0      	pop	{r4, r5, r7, pc}
 8005744:	10624dd3 	.word	0x10624dd3

08005748 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8005756:	2100      	movs	r1, #0
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff f845 	bl	80047e8 <VL53L0X_SetDeviceMode>
 800575e:	4603      	mov	r3, r0
 8005760:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d104      	bne.n	8005774 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff fc8a 	bl	8005084 <VL53L0X_PerformSingleMeasurement>
 8005770:	4603      	mov	r3, r0
 8005772:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d105      	bne.n	8005788 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff febe 	bl	8005500 <VL53L0X_GetRangingMeasurementData>
 8005784:	4603      	mov	r3, r0
 8005786:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8005788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005790:	2100      	movs	r1, #0
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f962 	bl	8005a5c <VL53L0X_ClearInterruptMask>
 8005798:	4603      	mov	r3, r0
 800579a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800579c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	4608      	mov	r0, r1
 80057b2:	4611      	mov	r1, r2
 80057b4:	461a      	mov	r2, r3
 80057b6:	4603      	mov	r3, r0
 80057b8:	70fb      	strb	r3, [r7, #3]
 80057ba:	460b      	mov	r3, r1
 80057bc:	70bb      	strb	r3, [r7, #2]
 80057be:	4613      	mov	r3, r2
 80057c0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057c2:	2300      	movs	r3, #0
 80057c4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80057c6:	78fb      	ldrb	r3, [r7, #3]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80057cc:	23f6      	movs	r3, #246	; 0xf6
 80057ce:	73fb      	strb	r3, [r7, #15]
 80057d0:	e107      	b.n	80059e2 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80057d2:	78bb      	ldrb	r3, [r7, #2]
 80057d4:	2b14      	cmp	r3, #20
 80057d6:	d110      	bne.n	80057fa <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80057d8:	7e3b      	ldrb	r3, [r7, #24]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d102      	bne.n	80057e4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80057de:	2310      	movs	r3, #16
 80057e0:	73bb      	strb	r3, [r7, #14]
 80057e2:	e001      	b.n	80057e8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80057e4:	2301      	movs	r3, #1
 80057e6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80057e8:	7bbb      	ldrb	r3, [r7, #14]
 80057ea:	461a      	mov	r2, r3
 80057ec:	2184      	movs	r1, #132	; 0x84
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f003 fb72 	bl	8008ed8 <VL53L0X_WrByte>
 80057f4:	4603      	mov	r3, r0
 80057f6:	73fb      	strb	r3, [r7, #15]
 80057f8:	e0f3      	b.n	80059e2 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80057fa:	78bb      	ldrb	r3, [r7, #2]
 80057fc:	2b15      	cmp	r3, #21
 80057fe:	f040 8097 	bne.w	8005930 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005802:	2201      	movs	r2, #1
 8005804:	21ff      	movs	r1, #255	; 0xff
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f003 fb66 	bl	8008ed8 <VL53L0X_WrByte>
 800580c:	4603      	mov	r3, r0
 800580e:	461a      	mov	r2, r3
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	4313      	orrs	r3, r2
 8005814:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005816:	2200      	movs	r2, #0
 8005818:	2100      	movs	r1, #0
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f003 fb5c 	bl	8008ed8 <VL53L0X_WrByte>
 8005820:	4603      	mov	r3, r0
 8005822:	461a      	mov	r2, r3
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	4313      	orrs	r3, r2
 8005828:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800582a:	2200      	movs	r2, #0
 800582c:	21ff      	movs	r1, #255	; 0xff
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f003 fb52 	bl	8008ed8 <VL53L0X_WrByte>
 8005834:	4603      	mov	r3, r0
 8005836:	461a      	mov	r2, r3
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	4313      	orrs	r3, r2
 800583c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800583e:	2201      	movs	r2, #1
 8005840:	2180      	movs	r1, #128	; 0x80
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f003 fb48 	bl	8008ed8 <VL53L0X_WrByte>
 8005848:	4603      	mov	r3, r0
 800584a:	461a      	mov	r2, r3
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	4313      	orrs	r3, r2
 8005850:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8005852:	2202      	movs	r2, #2
 8005854:	2185      	movs	r1, #133	; 0x85
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f003 fb3e 	bl	8008ed8 <VL53L0X_WrByte>
 800585c:	4603      	mov	r3, r0
 800585e:	461a      	mov	r2, r3
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	4313      	orrs	r3, r2
 8005864:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8005866:	2204      	movs	r2, #4
 8005868:	21ff      	movs	r1, #255	; 0xff
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f003 fb34 	bl	8008ed8 <VL53L0X_WrByte>
 8005870:	4603      	mov	r3, r0
 8005872:	461a      	mov	r2, r3
 8005874:	7bfb      	ldrb	r3, [r7, #15]
 8005876:	4313      	orrs	r3, r2
 8005878:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800587a:	2200      	movs	r2, #0
 800587c:	21cd      	movs	r1, #205	; 0xcd
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f003 fb2a 	bl	8008ed8 <VL53L0X_WrByte>
 8005884:	4603      	mov	r3, r0
 8005886:	461a      	mov	r2, r3
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	4313      	orrs	r3, r2
 800588c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800588e:	2211      	movs	r2, #17
 8005890:	21cc      	movs	r1, #204	; 0xcc
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f003 fb20 	bl	8008ed8 <VL53L0X_WrByte>
 8005898:	4603      	mov	r3, r0
 800589a:	461a      	mov	r2, r3
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	4313      	orrs	r3, r2
 80058a0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80058a2:	2207      	movs	r2, #7
 80058a4:	21ff      	movs	r1, #255	; 0xff
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f003 fb16 	bl	8008ed8 <VL53L0X_WrByte>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461a      	mov	r2, r3
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80058b6:	2200      	movs	r2, #0
 80058b8:	21be      	movs	r1, #190	; 0xbe
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f003 fb0c 	bl	8008ed8 <VL53L0X_WrByte>
 80058c0:	4603      	mov	r3, r0
 80058c2:	461a      	mov	r2, r3
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80058ca:	2206      	movs	r2, #6
 80058cc:	21ff      	movs	r1, #255	; 0xff
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f003 fb02 	bl	8008ed8 <VL53L0X_WrByte>
 80058d4:	4603      	mov	r3, r0
 80058d6:	461a      	mov	r2, r3
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	4313      	orrs	r3, r2
 80058dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80058de:	2209      	movs	r2, #9
 80058e0:	21cc      	movs	r1, #204	; 0xcc
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f003 faf8 	bl	8008ed8 <VL53L0X_WrByte>
 80058e8:	4603      	mov	r3, r0
 80058ea:	461a      	mov	r2, r3
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80058f2:	2200      	movs	r2, #0
 80058f4:	21ff      	movs	r1, #255	; 0xff
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f003 faee 	bl	8008ed8 <VL53L0X_WrByte>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	4313      	orrs	r3, r2
 8005904:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005906:	2201      	movs	r2, #1
 8005908:	21ff      	movs	r1, #255	; 0xff
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f003 fae4 	bl	8008ed8 <VL53L0X_WrByte>
 8005910:	4603      	mov	r3, r0
 8005912:	461a      	mov	r2, r3
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	4313      	orrs	r3, r2
 8005918:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800591a:	2200      	movs	r2, #0
 800591c:	2100      	movs	r1, #0
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f003 fada 	bl	8008ed8 <VL53L0X_WrByte>
 8005924:	4603      	mov	r3, r0
 8005926:	461a      	mov	r2, r3
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	4313      	orrs	r3, r2
 800592c:	73fb      	strb	r3, [r7, #15]
 800592e:	e058      	b.n	80059e2 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8005930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d121      	bne.n	800597c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8005938:	787b      	ldrb	r3, [r7, #1]
 800593a:	2b04      	cmp	r3, #4
 800593c:	d81b      	bhi.n	8005976 <VL53L0X_SetGpioConfig+0x1ce>
 800593e:	a201      	add	r2, pc, #4	; (adr r2, 8005944 <VL53L0X_SetGpioConfig+0x19c>)
 8005940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005944:	08005959 	.word	0x08005959
 8005948:	0800595f 	.word	0x0800595f
 800594c:	08005965 	.word	0x08005965
 8005950:	0800596b 	.word	0x0800596b
 8005954:	08005971 	.word	0x08005971
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8005958:	2300      	movs	r3, #0
 800595a:	73bb      	strb	r3, [r7, #14]
				break;
 800595c:	e00f      	b.n	800597e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800595e:	2301      	movs	r3, #1
 8005960:	73bb      	strb	r3, [r7, #14]
				break;
 8005962:	e00c      	b.n	800597e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8005964:	2302      	movs	r3, #2
 8005966:	73bb      	strb	r3, [r7, #14]
				break;
 8005968:	e009      	b.n	800597e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800596a:	2303      	movs	r3, #3
 800596c:	73bb      	strb	r3, [r7, #14]
				break;
 800596e:	e006      	b.n	800597e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8005970:	2304      	movs	r3, #4
 8005972:	73bb      	strb	r3, [r7, #14]
				break;
 8005974:	e003      	b.n	800597e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8005976:	23f5      	movs	r3, #245	; 0xf5
 8005978:	73fb      	strb	r3, [r7, #15]
 800597a:	e000      	b.n	800597e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800597c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800597e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d107      	bne.n	8005996 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	461a      	mov	r2, r3
 800598a:	210a      	movs	r1, #10
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f003 faa3 	bl	8008ed8 <VL53L0X_WrByte>
 8005992:	4603      	mov	r3, r0
 8005994:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8005996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10f      	bne.n	80059be <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800599e:	7e3b      	ldrb	r3, [r7, #24]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d102      	bne.n	80059aa <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80059a4:	2300      	movs	r3, #0
 80059a6:	73bb      	strb	r3, [r7, #14]
 80059a8:	e001      	b.n	80059ae <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80059aa:	2310      	movs	r3, #16
 80059ac:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80059ae:	7bbb      	ldrb	r3, [r7, #14]
 80059b0:	22ef      	movs	r2, #239	; 0xef
 80059b2:	2184      	movs	r1, #132	; 0x84
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f003 fadd 	bl	8008f74 <VL53L0X_UpdateByte>
 80059ba:	4603      	mov	r3, r0
 80059bc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80059be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	787a      	ldrb	r2, [r7, #1]
 80059ca:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80059ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d105      	bne.n	80059e2 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80059d6:	2100      	movs	r1, #0
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f83f 	bl	8005a5c <VL53L0X_ClearInterruptMask>
 80059de:	4603      	mov	r3, r0
 80059e0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80059e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop

080059f0 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	460b      	mov	r3, r1
 80059fe:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a00:	2300      	movs	r3, #0
 8005a02:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 8005a04:	f107 0314 	add.w	r3, r7, #20
 8005a08:	461a      	mov	r2, r3
 8005a0a:	210e      	movs	r1, #14
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f003 fb0f 	bl	8009030 <VL53L0X_RdWord>
 8005a12:	4603      	mov	r3, r0
 8005a14:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005a16:	8abb      	ldrh	r3, [r7, #20]
 8005a18:	045b      	lsls	r3, r3, #17
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	4b0e      	ldr	r3, [pc, #56]	; (8005a58 <VL53L0X_GetInterruptThresholds+0x68>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005a24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10f      	bne.n	8005a4c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005a2c:	f107 0314 	add.w	r3, r7, #20
 8005a30:	461a      	mov	r2, r3
 8005a32:	210c      	movs	r1, #12
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f003 fafb 	bl	8009030 <VL53L0X_RdWord>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005a3e:	8abb      	ldrh	r3, [r7, #20]
 8005a40:	045b      	lsls	r3, r3, #17
 8005a42:	461a      	mov	r2, r3
 8005a44:	4b04      	ldr	r3, [pc, #16]	; (8005a58 <VL53L0X_GetInterruptThresholds+0x68>)
 8005a46:	4013      	ands	r3, r2
		*pThresholdHigh =
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	1ffe0000 	.word	0x1ffe0000

08005a5c <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a66:	2300      	movs	r3, #0
 8005a68:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8005a6e:	2201      	movs	r2, #1
 8005a70:	210b      	movs	r1, #11
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f003 fa30 	bl	8008ed8 <VL53L0X_WrByte>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	210b      	movs	r1, #11
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f003 fa29 	bl	8008ed8 <VL53L0X_WrByte>
 8005a86:	4603      	mov	r3, r0
 8005a88:	461a      	mov	r2, r3
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8005a90:	f107 030d 	add.w	r3, r7, #13
 8005a94:	461a      	mov	r2, r3
 8005a96:	2113      	movs	r1, #19
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f003 fa9f 	bl	8008fdc <VL53L0X_RdByte>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8005aa8:	7bbb      	ldrb	r3, [r7, #14]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8005aae:	7b7b      	ldrb	r3, [r7, #13]
 8005ab0:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d006      	beq.n	8005ac6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8005ab8:	7bbb      	ldrb	r3, [r7, #14]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d803      	bhi.n	8005ac6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8005abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0d3      	beq.n	8005a6e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8005ac6:	7bbb      	ldrb	r3, [r7, #14]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005acc:	23f4      	movs	r3, #244	; 0xf4
 8005ace:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 8005aea:	f107 030e 	add.w	r3, r7, #14
 8005aee:	461a      	mov	r2, r3
 8005af0:	2113      	movs	r1, #19
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f003 fa72 	bl	8008fdc <VL53L0X_RdByte>
 8005af8:	4603      	mov	r3, r0
 8005afa:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 8005afc:	7bbb      	ldrb	r3, [r7, #14]
 8005afe:	f003 0207 	and.w	r2, r3, #7
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8005b06:	7bbb      	ldrb	r3, [r7, #14]
 8005b08:	f003 0318 	and.w	r3, r3, #24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8005b10:	23fa      	movs	r3, #250	; 0xfa
 8005b12:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fa03 	bl	8005f40 <VL53L0X_perform_ref_spad_management>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8005b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b54:	2300      	movs	r3, #0
 8005b56:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8005b58:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005b5c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8005b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b62:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8005b64:	f107 0308 	add.w	r3, r7, #8
 8005b68:	461a      	mov	r2, r3
 8005b6a:	2128      	movs	r1, #40	; 0x28
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f003 fa5f 	bl	8009030 <VL53L0X_RdWord>
 8005b72:	4603      	mov	r3, r0
 8005b74:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8005b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d11e      	bne.n	8005bbc <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8005b7e:	893b      	ldrh	r3, [r7, #8]
 8005b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8005b88:	893b      	ldrh	r3, [r7, #8]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	dd0b      	ble.n	8005bac <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8005b94:	893a      	ldrh	r2, [r7, #8]
 8005b96:	897b      	ldrh	r3, [r7, #10]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	b21b      	sxth	r3, r3
 8005b9e:	461a      	mov	r2, r3
					* 250;
 8005ba0:	23fa      	movs	r3, #250	; 0xfa
 8005ba2:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	e007      	b.n	8005bbc <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8005bac:	893b      	ldrh	r3, [r7, #8]
 8005bae:	b21b      	sxth	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	23fa      	movs	r3, #250	; 0xfa
 8005bb4:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8005bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b08b      	sub	sp, #44	; 0x2c
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8005bd6:	2308      	movs	r3, #8
 8005bd8:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	f04f 32ff 	mov.w	r2, #4294967295
 8005be4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bee:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	fbb3 f2f2 	udiv	r2, r3, r2
 8005bf8:	69b9      	ldr	r1, [r7, #24]
 8005bfa:	fb01 f202 	mul.w	r2, r1, r2
 8005bfe:	1a9b      	subs	r3, r3, r2
 8005c00:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
 8005c06:	e030      	b.n	8005c6a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	4413      	add	r3, r2
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8005c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d11e      	bne.n	8005c5c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 8005c1e:	7ffa      	ldrb	r2, [r7, #31]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	fa42 f303 	asr.w	r3, r2, r3
 8005c26:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8005c2c:	e016      	b.n	8005c5c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8005c2e:	7ffb      	ldrb	r3, [r7, #31]
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00b      	beq.n	8005c50 <get_next_good_spad+0x88>
				success = 1;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	fb02 f203 	mul.w	r2, r2, r3
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	4413      	add	r3, r2
 8005c48:	461a      	mov	r2, r3
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	601a      	str	r2, [r3, #0]
				break;
 8005c4e:	e009      	b.n	8005c64 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8005c50:	7ffb      	ldrb	r3, [r7, #31]
 8005c52:	085b      	lsrs	r3, r3, #1
 8005c54:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8005c5c:	6a3a      	ldr	r2, [r7, #32]
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d3e4      	bcc.n	8005c2e <get_next_good_spad+0x66>
				coarseIndex++) {
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	3301      	adds	r3, #1
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d202      	bcs.n	8005c78 <get_next_good_spad+0xb0>
 8005c72:	7fbb      	ldrb	r3, [r7, #30]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0c7      	beq.n	8005c08 <get_next_good_spad+0x40>
		}
	}
}
 8005c78:	bf00      	nop
 8005c7a:	372c      	adds	r7, #44	; 0x2c
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	099b      	lsrs	r3, r3, #6
 8005c94:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8005c96:	4a07      	ldr	r2, [pc, #28]	; (8005cb4 <is_aperture+0x30>)
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <is_aperture+0x22>
		isAperture = 0;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	200002bc 	.word	0x200002bc

08005cb8 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b089      	sub	sp, #36	; 0x24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8005cc8:	2308      	movs	r3, #8
 8005cca:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cde:	69b9      	ldr	r1, [r7, #24]
 8005ce0:	fb01 f202 	mul.w	r2, r1, r2
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d302      	bcc.n	8005cf6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005cf0:	23ce      	movs	r3, #206	; 0xce
 8005cf2:	77fb      	strb	r3, [r7, #31]
 8005cf4:	e010      	b.n	8005d18 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	b25a      	sxtb	r2, r3
 8005d00:	2101      	movs	r1, #1
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	fa01 f303 	lsl.w	r3, r1, r3
 8005d08:	b25b      	sxtb	r3, r3
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	b259      	sxtb	r1, r3
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	4413      	add	r3, r2
 8005d14:	b2ca      	uxtb	r2, r1
 8005d16:	701a      	strb	r2, [r3, #0]

	return status;
 8005d18:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3724      	adds	r7, #36	; 0x24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8005d32:	2306      	movs	r3, #6
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	21b0      	movs	r1, #176	; 0xb0
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f003 f871 	bl	8008e20 <VL53L0X_WriteMulti>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8005d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005d58:	2306      	movs	r3, #6
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	21b0      	movs	r1, #176	; 0xb0
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f003 f88e 	bl	8008e80 <VL53L0X_ReadMulti>
 8005d64:	4603      	mov	r3, r0
 8005d66:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8005d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08c      	sub	sp, #48	; 0x30
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	607a      	str	r2, [r7, #4]
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	460b      	mov	r3, r1
 8005d82:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8005d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d90:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005d92:	2300      	movs	r3, #0
 8005d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d96:	e02b      	b.n	8005df0 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005d98:	f107 031c 	add.w	r3, r7, #28
 8005d9c:	6a3a      	ldr	r2, [r7, #32]
 8005d9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff ff11 	bl	8005bc8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d103      	bne.n	8005db6 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005dae:	23ce      	movs	r3, #206	; 0xce
 8005db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005db4:	e020      	b.n	8005df8 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	461a      	mov	r2, r3
 8005dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dbc:	4413      	add	r3, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff ff60 	bl	8005c84 <is_aperture>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d003      	beq.n	8005dd6 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005dce:	23ce      	movs	r3, #206	; 0xce
 8005dd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005dd4:	e010      	b.n	8005df8 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8005dda:	6a3a      	ldr	r2, [r7, #32]
 8005ddc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dde:	6838      	ldr	r0, [r7, #0]
 8005de0:	f7ff ff6a 	bl	8005cb8 <enable_spad_bit>
		currentSpad++;
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	3301      	adds	r3, #1
 8005de8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dec:	3301      	adds	r3, #1
 8005dee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d3cf      	bcc.n	8005d98 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8005df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dfa:	6a3a      	ldr	r2, [r7, #32]
 8005dfc:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005dfe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f7ff ff8d 	bl	8005d28 <set_ref_spad_map>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8005e14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d121      	bne.n	8005e60 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8005e1c:	f107 0314 	add.w	r3, r7, #20
 8005e20:	4619      	mov	r1, r3
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f7ff ff93 	bl	8005d4e <get_ref_spad_map>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8005e32:	e011      	b.n	8005e58 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	4413      	add	r3, r2
 8005e3a:	781a      	ldrb	r2, [r3, #0]
 8005e3c:	f107 0114 	add.w	r1, r7, #20
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	440b      	add	r3, r1
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d003      	beq.n	8005e52 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005e4a:	23ce      	movs	r3, #206	; 0xce
 8005e4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8005e50:	e006      	b.n	8005e60 <enable_ref_spads+0xec>
			}
			i++;
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	3301      	adds	r3, #1
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8005e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d3e9      	bcc.n	8005e34 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8005e60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3730      	adds	r7, #48	; 0x30
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	; 0x28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005e76:	2300      	movs	r3, #0
 8005e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8005e88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8005e8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d107      	bne.n	8005ea4 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8005e94:	22c0      	movs	r2, #192	; 0xc0
 8005e96:	2101      	movs	r1, #1
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f003 f81d 	bl	8008ed8 <VL53L0X_WrByte>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005ea4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d108      	bne.n	8005ebe <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8005eac:	f107 0308 	add.w	r3, r7, #8
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff fc48 	bl	8005748 <VL53L0X_PerformSingleRangingMeasurement>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8005ebe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d107      	bne.n	8005ed6 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	21ff      	movs	r1, #255	; 0xff
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f003 f804 	bl	8008ed8 <VL53L0X_WrByte>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8005ed6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d107      	bne.n	8005eee <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	21b6      	movs	r1, #182	; 0xb6
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f003 f8a4 	bl	8009030 <VL53L0X_RdWord>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8005eee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d107      	bne.n	8005f06 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	21ff      	movs	r1, #255	; 0xff
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f002 ffec 	bl	8008ed8 <VL53L0X_WrByte>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8005f06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d112      	bne.n	8005f34 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005f0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f12:	461a      	mov	r2, r3
 8005f14:	2101      	movs	r1, #1
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f002 ffde 	bl	8008ed8 <VL53L0X_WrByte>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8005f22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d104      	bne.n	8005f34 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005f30:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}

	return status;
 8005f34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3728      	adds	r7, #40	; 0x28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8005f40:	b590      	push	{r4, r7, lr}
 8005f42:	b09d      	sub	sp, #116	; 0x74
 8005f44:	af06      	add	r7, sp, #24
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8005f52:	23b4      	movs	r3, #180	; 0xb4
 8005f54:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8005f5c:	232c      	movs	r3, #44	; 0x2c
 8005f5e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8005f64:	2300      	movs	r3, #0
 8005f66:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8005f6c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005f70:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8005f7a:	2306      	movs	r3, #6
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8005f86:	2300      	movs	r3, #0
 8005f88:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8005f90:	2300      	movs	r3, #0
 8005f92:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8005fa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005faa:	e009      	b.n	8005fc0 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d3f1      	bcc.n	8005fac <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005fc8:	2201      	movs	r2, #1
 8005fca:	21ff      	movs	r1, #255	; 0xff
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f002 ff83 	bl	8008ed8 <VL53L0X_WrByte>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005fd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d107      	bne.n	8005ff0 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	214f      	movs	r1, #79	; 0x4f
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f002 ff77 	bl	8008ed8 <VL53L0X_WrByte>
 8005fea:	4603      	mov	r3, r0
 8005fec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005ff0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d107      	bne.n	8006008 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8005ff8:	222c      	movs	r2, #44	; 0x2c
 8005ffa:	214e      	movs	r1, #78	; 0x4e
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f002 ff6b 	bl	8008ed8 <VL53L0X_WrByte>
 8006002:	4603      	mov	r3, r0
 8006004:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006008:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800600c:	2b00      	cmp	r3, #0
 800600e:	d107      	bne.n	8006020 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006010:	2200      	movs	r2, #0
 8006012:	21ff      	movs	r1, #255	; 0xff
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f002 ff5f 	bl	8008ed8 <VL53L0X_WrByte>
 800601a:	4603      	mov	r3, r0
 800601c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006020:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006024:	2b00      	cmp	r3, #0
 8006026:	d109      	bne.n	800603c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8006028:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800602c:	461a      	mov	r2, r3
 800602e:	21b6      	movs	r1, #182	; 0xb6
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f002 ff51 	bl	8008ed8 <VL53L0X_WrByte>
 8006036:	4603      	mov	r3, r0
 8006038:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800603c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006040:	2b00      	cmp	r3, #0
 8006042:	d107      	bne.n	8006054 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8006044:	2200      	movs	r2, #0
 8006046:	2180      	movs	r1, #128	; 0x80
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f002 ff45 	bl	8008ed8 <VL53L0X_WrByte>
 800604e:	4603      	mov	r3, r0
 8006050:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8006054:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800605c:	f107 0210 	add.w	r2, r7, #16
 8006060:	f107 0111 	add.w	r1, r7, #17
 8006064:	2300      	movs	r3, #0
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fbbb 	bl	80067e2 <VL53L0X_perform_ref_calibration>
 800606c:	4603      	mov	r3, r0
 800606e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8006072:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006076:	2b00      	cmp	r3, #0
 8006078:	d121      	bne.n	80060be <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800607e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006080:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8006082:	2300      	movs	r3, #0
 8006084:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8006086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006088:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f503 74a8 	add.w	r4, r3, #336	; 0x150
		Status = enable_ref_spads(Dev,
 8006096:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800609a:	f107 0218 	add.w	r2, r7, #24
 800609e:	9204      	str	r2, [sp, #16]
 80060a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060a2:	9203      	str	r2, [sp, #12]
 80060a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060a6:	9202      	str	r2, [sp, #8]
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	4623      	mov	r3, r4
 80060b0:	4602      	mov	r2, r0
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f7ff fe5e 	bl	8005d74 <enable_ref_spads>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80060be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d174      	bne.n	80061b0 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80060ca:	f107 0312 	add.w	r3, r7, #18
 80060ce:	4619      	mov	r1, r3
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff fecb 	bl	8005e6c <perform_ref_signal_measurement>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80060dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d161      	bne.n	80061a8 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80060e4:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80060e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d25d      	bcs.n	80061a8 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 80060ec:	2300      	movs	r3, #0
 80060ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80060f0:	e009      	b.n	8006106 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060fc:	2200      	movs	r2, #0
 80060fe:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006100:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006102:	3301      	adds	r3, #1
 8006104:	64bb      	str	r3, [r7, #72]	; 0x48
 8006106:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	429a      	cmp	r2, r3
 800610c:	d3f1      	bcc.n	80060f2 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800610e:	e002      	b.n	8006116 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006112:	3301      	adds	r3, #1
 8006114:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8006116:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800611a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800611c:	4413      	add	r3, r2
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff fdb0 	bl	8005c84 <is_aperture>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d103      	bne.n	8006132 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800612a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	429a      	cmp	r2, r3
 8006130:	d3ee      	bcc.n	8006110 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8006132:	2301      	movs	r3, #1
 8006134:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8006136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006138:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f503 74a8 	add.w	r4, r3, #336	; 0x150
			Status = enable_ref_spads(Dev,
 8006146:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800614a:	f107 0218 	add.w	r2, r7, #24
 800614e:	9204      	str	r2, [sp, #16]
 8006150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006152:	9203      	str	r2, [sp, #12]
 8006154:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006156:	9202      	str	r2, [sp, #8]
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	4623      	mov	r3, r4
 8006160:	4602      	mov	r2, r0
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff fe06 	bl	8005d74 <enable_ref_spads>
 8006168:	4603      	mov	r3, r0
 800616a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800616e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006172:	2b00      	cmp	r3, #0
 8006174:	d11b      	bne.n	80061ae <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800617a:	f107 0312 	add.w	r3, r7, #18
 800617e:	4619      	mov	r1, r3
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f7ff fe73 	bl	8005e6c <perform_ref_signal_measurement>
 8006186:	4603      	mov	r3, r0
 8006188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800618c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10c      	bne.n	80061ae <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006194:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006196:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006198:	429a      	cmp	r2, r3
 800619a:	d208      	bcs.n	80061ae <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80061a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a4:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80061a6:	e002      	b.n	80061ae <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80061a8:	2300      	movs	r3, #0
 80061aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ac:	e000      	b.n	80061b0 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80061ae:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80061b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f040 80af 	bne.w	8006318 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80061ba:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80061bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061be:	429a      	cmp	r2, r3
 80061c0:	f240 80aa 	bls.w	8006318 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80061c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80061ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061cc:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 80061d4:	f107 031c 	add.w	r3, r7, #28
 80061d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061da:	4618      	mov	r0, r3
 80061dc:	f003 fa10 	bl	8009600 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80061e0:	8a7b      	ldrh	r3, [r7, #18]
 80061e2:	461a      	mov	r2, r3
 80061e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bfb8      	it	lt
 80061ec:	425b      	neglt	r3, r3
 80061ee:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80061f6:	e086      	b.n	8006306 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f503 70ab 	add.w	r0, r3, #342	; 0x156
			get_next_good_spad(
 80061fe:	f107 0314 	add.w	r3, r7, #20
 8006202:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006206:	f7ff fcdf 	bl	8005bc8 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006210:	d103      	bne.n	800621a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006212:	23ce      	movs	r3, #206	; 0xce
 8006214:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006218:	e07e      	b.n	8006318 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800621a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	4413      	add	r3, r2
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff fd2e 	bl	8005c84 <is_aperture>
 8006228:	4603      	mov	r3, r0
 800622a:	461a      	mov	r2, r3
 800622c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800622e:	4293      	cmp	r3, r2
 8006230:	d003      	beq.n	800623a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006238:	e06e      	b.n	8006318 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800623a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800623c:	3301      	adds	r3, #1
 800623e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 73a8 	add.w	r3, r3, #336	; 0x150
			Status = enable_spad_bit(
 800624a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800624c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff fd32 	bl	8005cb8 <enable_spad_bit>
 8006254:	4603      	mov	r3, r0
 8006256:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800625a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10c      	bne.n	800627c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006264:	3301      	adds	r3, #1
 8006266:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
				Status = set_ref_spad_map(Dev,
 800626e:	4619      	mov	r1, r3
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7ff fd59 	bl	8005d28 <set_ref_spad_map>
 8006276:	4603      	mov	r3, r0
 8006278:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800627c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006280:	2b00      	cmp	r3, #0
 8006282:	d146      	bne.n	8006312 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006284:	f107 0312 	add.w	r3, r7, #18
 8006288:	4619      	mov	r1, r3
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7ff fdee 	bl	8005e6c <perform_ref_signal_measurement>
 8006290:	4603      	mov	r3, r0
 8006292:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006296:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800629a:	2b00      	cmp	r3, #0
 800629c:	d13b      	bne.n	8006316 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800629e:	8a7b      	ldrh	r3, [r7, #18]
 80062a0:	461a      	mov	r2, r3
 80062a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	bfb8      	it	lt
 80062aa:	425b      	neglt	r3, r3
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80062ae:	8a7b      	ldrh	r3, [r7, #18]
 80062b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d21c      	bcs.n	80062f0 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80062b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d914      	bls.n	80062e8 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 80062be:	f107 031c 	add.w	r3, r7, #28
 80062c2:	4619      	mov	r1, r3
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7ff fd2f 	bl	8005d28 <set_ref_spad_map>
 80062ca:	4603      	mov	r3, r0
 80062cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
					memcpy(
 80062d6:	f107 011c 	add.w	r1, r7, #28
 80062da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062dc:	4618      	mov	r0, r3
 80062de:	f003 f98f 	bl	8009600 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80062e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e4:	3b01      	subs	r3, #1
 80062e6:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80062e8:	2301      	movs	r3, #1
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ee:	e00a      	b.n	8006306 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f503 71a8 	add.w	r1, r3, #336	; 0x150
				memcpy(lastSpadArray,
 80062fa:	f107 031c 	add.w	r3, r7, #28
 80062fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006300:	4618      	mov	r0, r3
 8006302:	f003 f97d 	bl	8009600 <memcpy>
		while (!complete) {
 8006306:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800630a:	2b00      	cmp	r3, #0
 800630c:	f43f af74 	beq.w	80061f8 <VL53L0X_perform_ref_spad_management+0x2b8>
 8006310:	e002      	b.n	8006318 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006312:	bf00      	nop
 8006314:	e000      	b.n	8006318 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006316:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006318:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800631c:	2b00      	cmp	r3, #0
 800631e:	d115      	bne.n	800634c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006324:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800632c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2201      	movs	r2, #1
 8006332:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	b2da      	uxtb	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	781a      	ldrb	r2, [r3, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800634c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006350:	4618      	mov	r0, r3
 8006352:	375c      	adds	r7, #92	; 0x5c
 8006354:	46bd      	mov	sp, r7
 8006356:	bd90      	pop	{r4, r7, pc}

08006358 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006358:	b590      	push	{r4, r7, lr}
 800635a:	b093      	sub	sp, #76	; 0x4c
 800635c:	af06      	add	r7, sp, #24
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	4613      	mov	r3, r2
 8006364:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006366:	2300      	movs	r3, #0
 8006368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800636c:	2300      	movs	r3, #0
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006370:	23b4      	movs	r3, #180	; 0xb4
 8006372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006376:	2306      	movs	r3, #6
 8006378:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800637a:	232c      	movs	r3, #44	; 0x2c
 800637c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800637e:	2201      	movs	r2, #1
 8006380:	21ff      	movs	r1, #255	; 0xff
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f002 fda8 	bl	8008ed8 <VL53L0X_WrByte>
 8006388:	4603      	mov	r3, r0
 800638a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800638e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006392:	2b00      	cmp	r3, #0
 8006394:	d107      	bne.n	80063a6 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006396:	2200      	movs	r2, #0
 8006398:	214f      	movs	r1, #79	; 0x4f
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f002 fd9c 	bl	8008ed8 <VL53L0X_WrByte>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80063a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d107      	bne.n	80063be <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80063ae:	222c      	movs	r2, #44	; 0x2c
 80063b0:	214e      	movs	r1, #78	; 0x4e
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f002 fd90 	bl	8008ed8 <VL53L0X_WrByte>
 80063b8:	4603      	mov	r3, r0
 80063ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80063be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d107      	bne.n	80063d6 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80063c6:	2200      	movs	r2, #0
 80063c8:	21ff      	movs	r1, #255	; 0xff
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f002 fd84 	bl	8008ed8 <VL53L0X_WrByte>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80063d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d109      	bne.n	80063f2 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80063de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063e2:	461a      	mov	r2, r3
 80063e4:	21b6      	movs	r1, #182	; 0xb6
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f002 fd76 	bl	8008ed8 <VL53L0X_WrByte>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80063f2:	2300      	movs	r3, #0
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
 80063f6:	e009      	b.n	800640c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	3301      	adds	r3, #1
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
 800640c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	429a      	cmp	r2, r3
 8006412:	d3f1      	bcc.n	80063f8 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d011      	beq.n	800643e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800641a:	e002      	b.n	8006422 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	3301      	adds	r3, #1
 8006420:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006422:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	4413      	add	r3, r2
 800642a:	4618      	mov	r0, r3
 800642c:	f7ff fc2a 	bl	8005c84 <is_aperture>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <VL53L0X_set_reference_spads+0xe6>
 8006436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	429a      	cmp	r2, r3
 800643c:	d3ee      	bcc.n	800641c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f503 70ab 	add.w	r0, r3, #342	; 0x156
				Dev->Data.SpadData.RefSpadEnables,
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f503 74a8 	add.w	r4, r3, #336	; 0x150
	Status = enable_ref_spads(Dev,
 800644a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800644e:	79f9      	ldrb	r1, [r7, #7]
 8006450:	f107 0214 	add.w	r2, r7, #20
 8006454:	9204      	str	r2, [sp, #16]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	9203      	str	r2, [sp, #12]
 800645a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800645c:	9202      	str	r2, [sp, #8]
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	4623      	mov	r3, r4
 8006466:	4602      	mov	r2, r0
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7ff fc83 	bl	8005d74 <enable_ref_spads>
 800646e:	4603      	mov	r3, r0
 8006470:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006474:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10c      	bne.n	8006496 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	79fa      	ldrb	r2, [r7, #7]
 8006492:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006496:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800649a:	4618      	mov	r0, r3
 800649c:	3734      	adds	r7, #52	; 0x34
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd90      	pop	{r4, r7, pc}

080064a2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064ae:	2300      	movs	r3, #0
 80064b0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80064b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	f043 0301 	orr.w	r3, r3, #1
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	2100      	movs	r1, #0
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f002 fd06 	bl	8008ed8 <VL53L0X_WrByte>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80064d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d104      	bne.n	80064e2 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f9bf 	bl	800685c <VL53L0X_measurement_poll_for_completion>
 80064de:	4603      	mov	r3, r0
 80064e0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80064e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d105      	bne.n	80064f6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80064ea:	2100      	movs	r1, #0
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff fab5 	bl	8005a5c <VL53L0X_ClearInterruptMask>
 80064f2:	4603      	mov	r3, r0
 80064f4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80064f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80064fe:	2200      	movs	r2, #0
 8006500:	2100      	movs	r1, #0
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f002 fce8 	bl	8008ed8 <VL53L0X_WrByte>
 8006508:	4603      	mov	r3, r0
 800650a:	73fb      	strb	r3, [r7, #15]

	return Status;
 800650c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	4608      	mov	r0, r1
 8006522:	4611      	mov	r1, r2
 8006524:	461a      	mov	r2, r3
 8006526:	4603      	mov	r3, r0
 8006528:	70fb      	strb	r3, [r7, #3]
 800652a:	460b      	mov	r3, r1
 800652c:	70bb      	strb	r3, [r7, #2]
 800652e:	4613      	mov	r3, r2
 8006530:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006532:	2300      	movs	r3, #0
 8006534:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800653a:	2201      	movs	r2, #1
 800653c:	21ff      	movs	r1, #255	; 0xff
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f002 fcca 	bl	8008ed8 <VL53L0X_WrByte>
 8006544:	4603      	mov	r3, r0
 8006546:	461a      	mov	r2, r3
 8006548:	7bfb      	ldrb	r3, [r7, #15]
 800654a:	4313      	orrs	r3, r2
 800654c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800654e:	2200      	movs	r2, #0
 8006550:	2100      	movs	r1, #0
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f002 fcc0 	bl	8008ed8 <VL53L0X_WrByte>
 8006558:	4603      	mov	r3, r0
 800655a:	461a      	mov	r2, r3
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	4313      	orrs	r3, r2
 8006560:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006562:	2200      	movs	r2, #0
 8006564:	21ff      	movs	r1, #255	; 0xff
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f002 fcb6 	bl	8008ed8 <VL53L0X_WrByte>
 800656c:	4603      	mov	r3, r0
 800656e:	461a      	mov	r2, r3
 8006570:	7bfb      	ldrb	r3, [r7, #15]
 8006572:	4313      	orrs	r3, r2
 8006574:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01e      	beq.n	80065ba <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800657c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d009      	beq.n	8006598 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	21cb      	movs	r1, #203	; 0xcb
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f002 fd27 	bl	8008fdc <VL53L0X_RdByte>
 800658e:	4603      	mov	r3, r0
 8006590:	461a      	mov	r2, r3
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	4313      	orrs	r3, r2
 8006596:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006598:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800659c:	2b00      	cmp	r3, #0
 800659e:	d02a      	beq.n	80065f6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80065a0:	f107 030e 	add.w	r3, r7, #14
 80065a4:	461a      	mov	r2, r3
 80065a6:	21ee      	movs	r1, #238	; 0xee
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f002 fd17 	bl	8008fdc <VL53L0X_RdByte>
 80065ae:	4603      	mov	r3, r0
 80065b0:	461a      	mov	r2, r3
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	73fb      	strb	r3, [r7, #15]
 80065b8:	e01d      	b.n	80065f6 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80065ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80065c2:	78bb      	ldrb	r3, [r7, #2]
 80065c4:	461a      	mov	r2, r3
 80065c6:	21cb      	movs	r1, #203	; 0xcb
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f002 fc85 	bl	8008ed8 <VL53L0X_WrByte>
 80065ce:	4603      	mov	r3, r0
 80065d0:	461a      	mov	r2, r3
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80065d8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80065e0:	787b      	ldrb	r3, [r7, #1]
 80065e2:	2280      	movs	r2, #128	; 0x80
 80065e4:	21ee      	movs	r1, #238	; 0xee
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f002 fcc4 	bl	8008f74 <VL53L0X_UpdateByte>
 80065ec:	4603      	mov	r3, r0
 80065ee:	461a      	mov	r2, r3
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80065f6:	2201      	movs	r2, #1
 80065f8:	21ff      	movs	r1, #255	; 0xff
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f002 fc6c 	bl	8008ed8 <VL53L0X_WrByte>
 8006600:	4603      	mov	r3, r0
 8006602:	461a      	mov	r2, r3
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	4313      	orrs	r3, r2
 8006608:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800660a:	2201      	movs	r2, #1
 800660c:	2100      	movs	r1, #0
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f002 fc62 	bl	8008ed8 <VL53L0X_WrByte>
 8006614:	4603      	mov	r3, r0
 8006616:	461a      	mov	r2, r3
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	4313      	orrs	r3, r2
 800661c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800661e:	2200      	movs	r2, #0
 8006620:	21ff      	movs	r1, #255	; 0xff
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f002 fc58 	bl	8008ed8 <VL53L0X_WrByte>
 8006628:	4603      	mov	r3, r0
 800662a:	461a      	mov	r2, r3
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	4313      	orrs	r3, r2
 8006630:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006632:	7bbb      	ldrb	r3, [r7, #14]
 8006634:	f023 0310 	bic.w	r3, r3, #16
 8006638:	b2da      	uxtb	r2, r3
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	701a      	strb	r2, [r3, #0]

	return Status;
 800663e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b08a      	sub	sp, #40	; 0x28
 800664e:	af04      	add	r7, sp, #16
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	4611      	mov	r1, r2
 8006656:	461a      	mov	r2, r3
 8006658:	460b      	mov	r3, r1
 800665a:	71fb      	strb	r3, [r7, #7]
 800665c:	4613      	mov	r3, r2
 800665e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006660:	2300      	movs	r3, #0
 8006662:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006668:	2300      	movs	r3, #0
 800666a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006674:	79bb      	ldrb	r3, [r7, #6]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8006680:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006682:	2201      	movs	r2, #1
 8006684:	2101      	movs	r1, #1
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f002 fc26 	bl	8008ed8 <VL53L0X_WrByte>
 800668c:	4603      	mov	r3, r0
 800668e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006690:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d105      	bne.n	80066a4 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006698:	2140      	movs	r1, #64	; 0x40
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f7ff ff01 	bl	80064a2 <VL53L0X_perform_single_ref_calibration>
 80066a0:	4603      	mov	r3, r0
 80066a2:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80066a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d115      	bne.n	80066d8 <VL53L0X_perform_vhv_calibration+0x8e>
 80066ac:	79fb      	ldrb	r3, [r7, #7]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d112      	bne.n	80066d8 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80066b2:	7d39      	ldrb	r1, [r7, #20]
 80066b4:	7d7a      	ldrb	r2, [r7, #21]
 80066b6:	2300      	movs	r3, #0
 80066b8:	9303      	str	r3, [sp, #12]
 80066ba:	2301      	movs	r3, #1
 80066bc:	9302      	str	r3, [sp, #8]
 80066be:	f107 0313 	add.w	r3, r7, #19
 80066c2:	9301      	str	r3, [sp, #4]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	460b      	mov	r3, r1
 80066ca:	2101      	movs	r1, #1
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f7ff ff23 	bl	8006518 <VL53L0X_ref_calibration_io>
 80066d2:	4603      	mov	r3, r0
 80066d4:	75fb      	strb	r3, [r7, #23]
 80066d6:	e002      	b.n	80066de <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2200      	movs	r2, #0
 80066dc:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80066de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d112      	bne.n	800670c <VL53L0X_perform_vhv_calibration+0xc2>
 80066e6:	79bb      	ldrb	r3, [r7, #6]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00f      	beq.n	800670c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80066ec:	7dbb      	ldrb	r3, [r7, #22]
 80066ee:	461a      	mov	r2, r3
 80066f0:	2101      	movs	r1, #1
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f002 fbf0 	bl	8008ed8 <VL53L0X_WrByte>
 80066f8:	4603      	mov	r3, r0
 80066fa:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80066fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d103      	bne.n	800670c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	7dba      	ldrb	r2, [r7, #22]
 8006708:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800670c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08a      	sub	sp, #40	; 0x28
 800671c:	af04      	add	r7, sp, #16
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	4611      	mov	r1, r2
 8006724:	461a      	mov	r2, r3
 8006726:	460b      	mov	r3, r1
 8006728:	71fb      	strb	r3, [r7, #7]
 800672a:	4613      	mov	r3, r2
 800672c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800672e:	2300      	movs	r3, #0
 8006730:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800673e:	79bb      	ldrb	r3, [r7, #6]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800674a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800674c:	2202      	movs	r2, #2
 800674e:	2101      	movs	r1, #1
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f002 fbc1 	bl	8008ed8 <VL53L0X_WrByte>
 8006756:	4603      	mov	r3, r0
 8006758:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800675a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d105      	bne.n	800676e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006762:	2100      	movs	r1, #0
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f7ff fe9c 	bl	80064a2 <VL53L0X_perform_single_ref_calibration>
 800676a:	4603      	mov	r3, r0
 800676c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800676e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d115      	bne.n	80067a2 <VL53L0X_perform_phase_calibration+0x8a>
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d112      	bne.n	80067a2 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800677c:	7d39      	ldrb	r1, [r7, #20]
 800677e:	7d7a      	ldrb	r2, [r7, #21]
 8006780:	2301      	movs	r3, #1
 8006782:	9303      	str	r3, [sp, #12]
 8006784:	2300      	movs	r3, #0
 8006786:	9302      	str	r3, [sp, #8]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	9301      	str	r3, [sp, #4]
 800678c:	f107 0313 	add.w	r3, r7, #19
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	460b      	mov	r3, r1
 8006794:	2101      	movs	r1, #1
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7ff febe 	bl	8006518 <VL53L0X_ref_calibration_io>
 800679c:	4603      	mov	r3, r0
 800679e:	75fb      	strb	r3, [r7, #23]
 80067a0:	e002      	b.n	80067a8 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2200      	movs	r2, #0
 80067a6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80067a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d112      	bne.n	80067d6 <VL53L0X_perform_phase_calibration+0xbe>
 80067b0:	79bb      	ldrb	r3, [r7, #6]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00f      	beq.n	80067d6 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80067b6:	7dbb      	ldrb	r3, [r7, #22]
 80067b8:	461a      	mov	r2, r3
 80067ba:	2101      	movs	r1, #1
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f002 fb8b 	bl	8008ed8 <VL53L0X_WrByte>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80067c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d103      	bne.n	80067d6 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	7dba      	ldrb	r2, [r7, #22]
 80067d2:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 80067d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b086      	sub	sp, #24
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	607a      	str	r2, [r7, #4]
 80067ee:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067f0:	2300      	movs	r3, #0
 80067f2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80067fe:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	2300      	movs	r3, #0
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f7ff ff1f 	bl	800664a <VL53L0X_perform_vhv_calibration>
 800680c:	4603      	mov	r3, r0
 800680e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006810:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d107      	bne.n	8006828 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8006818:	78fa      	ldrb	r2, [r7, #3]
 800681a:	2300      	movs	r3, #0
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f7ff ff7a 	bl	8006718 <VL53L0X_perform_phase_calibration>
 8006824:	4603      	mov	r3, r0
 8006826:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8006828:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10f      	bne.n	8006850 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006830:	7dbb      	ldrb	r3, [r7, #22]
 8006832:	461a      	mov	r2, r3
 8006834:	2101      	movs	r1, #1
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f002 fb4e 	bl	8008ed8 <VL53L0X_WrByte>
 800683c:	4603      	mov	r3, r0
 800683e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006840:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d103      	bne.n	8006850 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	7dba      	ldrb	r2, [r7, #22]
 800684c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8006850:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3718      	adds	r7, #24
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006864:	2300      	movs	r3, #0
 8006866:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006870:	f107 030f 	add.w	r3, r7, #15
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fe fe02 	bl	8005480 <VL53L0X_GetMeasurementDataReady>
 800687c:	4603      	mov	r3, r0
 800687e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8006880:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d110      	bne.n	80068aa <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8006888:	7bfb      	ldrb	r3, [r7, #15]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d00f      	beq.n	80068ae <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	3301      	adds	r3, #1
 8006892:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800689a:	d302      	bcc.n	80068a2 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800689c:	23f9      	movs	r3, #249	; 0xf9
 800689e:	75fb      	strb	r3, [r7, #23]
			break;
 80068a0:	e006      	b.n	80068b0 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f002 fc38 	bl	8009118 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80068a8:	e7e2      	b.n	8006870 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80068aa:	bf00      	nop
 80068ac:	e000      	b.n	80068b0 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80068ae:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80068b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80068ca:	79fb      	ldrb	r3, [r7, #7]
 80068cc:	3301      	adds	r3, #1
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b085      	sub	sp, #20
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	4603      	mov	r3, r0
 80068ea:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	085b      	lsrs	r3, r3, #1
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80068fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8006914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006918:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800691a:	e002      	b.n	8006922 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	089b      	lsrs	r3, r3, #2
 8006920:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	429a      	cmp	r2, r3
 8006928:	d8f8      	bhi.n	800691c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800692a:	e017      	b.n	800695c <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	4413      	add	r3, r2
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	d30b      	bcc.n	8006950 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4413      	add	r3, r2
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	085b      	lsrs	r3, r3, #1
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	4413      	add	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
 800694e:	e002      	b.n	8006956 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	085b      	lsrs	r3, r3, #1
 8006954:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	089b      	lsrs	r3, r3, #2
 800695a:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e4      	bne.n	800692c <VL53L0X_isqrt+0x24>
	}

	return res;
 8006962:	68fb      	ldr	r3, [r7, #12]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006978:	2300      	movs	r3, #0
 800697a:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800697c:	2200      	movs	r2, #0
 800697e:	2183      	movs	r1, #131	; 0x83
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f002 faa9 	bl	8008ed8 <VL53L0X_WrByte>
 8006986:	4603      	mov	r3, r0
 8006988:	461a      	mov	r2, r3
 800698a:	7dfb      	ldrb	r3, [r7, #23]
 800698c:	4313      	orrs	r3, r2
 800698e:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 8006990:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d11e      	bne.n	80069d6 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800699c:	f107 030f 	add.w	r3, r7, #15
 80069a0:	461a      	mov	r2, r3
 80069a2:	2183      	movs	r1, #131	; 0x83
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f002 fb19 	bl	8008fdc <VL53L0X_RdByte>
 80069aa:	4603      	mov	r3, r0
 80069ac:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <VL53L0X_device_read_strobe+0x5a>
 80069b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d106      	bne.n	80069ca <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	3301      	adds	r3, #1
 80069c0:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80069c8:	d3e8      	bcc.n	800699c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80069d0:	d301      	bcc.n	80069d6 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80069d2:	23f9      	movs	r3, #249	; 0xf9
 80069d4:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80069d6:	2201      	movs	r2, #1
 80069d8:	2183      	movs	r1, #131	; 0x83
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f002 fa7c 	bl	8008ed8 <VL53L0X_WrByte>
 80069e0:	4603      	mov	r3, r0
 80069e2:	461a      	mov	r2, r3
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80069ea:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b098      	sub	sp, #96	; 0x60
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a02:	2300      	movs	r3, #0
 8006a04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8006a26:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006a2a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8006a3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 8006a42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a46:	2b07      	cmp	r3, #7
 8006a48:	f000 8408 	beq.w	800725c <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	2180      	movs	r1, #128	; 0x80
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f002 fa41 	bl	8008ed8 <VL53L0X_WrByte>
 8006a56:	4603      	mov	r3, r0
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006a64:	2201      	movs	r2, #1
 8006a66:	21ff      	movs	r1, #255	; 0xff
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f002 fa35 	bl	8008ed8 <VL53L0X_WrByte>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	461a      	mov	r2, r3
 8006a72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	2100      	movs	r1, #0
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f002 fa29 	bl	8008ed8 <VL53L0X_WrByte>
 8006a86:	4603      	mov	r3, r0
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006a94:	2206      	movs	r2, #6
 8006a96:	21ff      	movs	r1, #255	; 0xff
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f002 fa1d 	bl	8008ed8 <VL53L0X_WrByte>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006aac:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	2183      	movs	r1, #131	; 0x83
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f002 fa91 	bl	8008fdc <VL53L0X_RdByte>
 8006aba:	4603      	mov	r3, r0
 8006abc:	461a      	mov	r2, r3
 8006abe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006ac8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006acc:	f043 0304 	orr.w	r3, r3, #4
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	2183      	movs	r1, #131	; 0x83
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f002 f9fe 	bl	8008ed8 <VL53L0X_WrByte>
 8006adc:	4603      	mov	r3, r0
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006aea:	2207      	movs	r2, #7
 8006aec:	21ff      	movs	r1, #255	; 0xff
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f002 f9f2 	bl	8008ed8 <VL53L0X_WrByte>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006b02:	2201      	movs	r2, #1
 8006b04:	2181      	movs	r1, #129	; 0x81
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f002 f9e6 	bl	8008ed8 <VL53L0X_WrByte>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b14:	4313      	orrs	r3, r2
 8006b16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f002 fafc 	bl	8009118 <VL53L0X_PollingDelay>
 8006b20:	4603      	mov	r3, r0
 8006b22:	461a      	mov	r2, r3
 8006b24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006b2e:	2201      	movs	r2, #1
 8006b30:	2180      	movs	r1, #128	; 0x80
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f002 f9d0 	bl	8008ed8 <VL53L0X_WrByte>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8006b46:	78fb      	ldrb	r3, [r7, #3]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 8098 	beq.w	8006c82 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006b52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b56:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f040 8091 	bne.w	8006c82 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8006b60:	226b      	movs	r2, #107	; 0x6b
 8006b62:	2194      	movs	r1, #148	; 0x94
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f002 f9b7 	bl	8008ed8 <VL53L0X_WrByte>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b72:	4313      	orrs	r3, r2
 8006b74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f7ff fef9 	bl	8006970 <VL53L0X_device_read_strobe>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	461a      	mov	r2, r3
 8006b82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006b8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006b90:	461a      	mov	r2, r3
 8006b92:	2190      	movs	r1, #144	; 0x90
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f002 fa83 	bl	80090a0 <VL53L0X_RdDWord>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	0a1b      	lsrs	r3, r3, #8
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	0bdb      	lsrs	r3, r3, #15
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006bc4:	2224      	movs	r2, #36	; 0x24
 8006bc6:	2194      	movs	r1, #148	; 0x94
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f002 f985 	bl	8008ed8 <VL53L0X_WrByte>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff fec7 	bl	8006970 <VL53L0X_device_read_strobe>
 8006be2:	4603      	mov	r3, r0
 8006be4:	461a      	mov	r2, r3
 8006be6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bea:	4313      	orrs	r3, r2
 8006bec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006bf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	2190      	movs	r1, #144	; 0x90
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f002 fa51 	bl	80090a0 <VL53L0X_RdDWord>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	461a      	mov	r2, r3
 8006c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c06:	4313      	orrs	r3, r2
 8006c08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	0e1b      	lsrs	r3, r3, #24
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	0c1b      	lsrs	r3, r3, #16
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	0a1b      	lsrs	r3, r3, #8
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8006c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006c2a:	2225      	movs	r2, #37	; 0x25
 8006c2c:	2194      	movs	r1, #148	; 0x94
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f002 f952 	bl	8008ed8 <VL53L0X_WrByte>
 8006c34:	4603      	mov	r3, r0
 8006c36:	461a      	mov	r2, r3
 8006c38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7ff fe94 	bl	8006970 <VL53L0X_device_read_strobe>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c50:	4313      	orrs	r3, r2
 8006c52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	2190      	movs	r1, #144	; 0x90
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f002 fa1e 	bl	80090a0 <VL53L0X_RdDWord>
 8006c64:	4603      	mov	r3, r0
 8006c66:	461a      	mov	r2, r3
 8006c68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c74:	0e1b      	lsrs	r3, r3, #24
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	0c1b      	lsrs	r3, r3, #16
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006c82:	78fb      	ldrb	r3, [r7, #3]
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8189 	beq.w	8006fa0 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006c8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c92:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f040 8182 	bne.w	8006fa0 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	2194      	movs	r1, #148	; 0x94
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f002 f919 	bl	8008ed8 <VL53L0X_WrByte>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff fe5b 	bl	8006970 <VL53L0X_device_read_strobe>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006cc8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8006ccc:	461a      	mov	r2, r3
 8006cce:	2190      	movs	r1, #144	; 0x90
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f002 f983 	bl	8008fdc <VL53L0X_RdByte>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006ce4:	227b      	movs	r2, #123	; 0x7b
 8006ce6:	2194      	movs	r1, #148	; 0x94
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f002 f8f5 	bl	8008ed8 <VL53L0X_WrByte>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff fe37 	bl	8006970 <VL53L0X_device_read_strobe>
 8006d02:	4603      	mov	r3, r0
 8006d04:	461a      	mov	r2, r3
 8006d06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006d10:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8006d14:	461a      	mov	r2, r3
 8006d16:	2190      	movs	r1, #144	; 0x90
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f002 f95f 	bl	8008fdc <VL53L0X_RdByte>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	461a      	mov	r2, r3
 8006d22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d26:	4313      	orrs	r3, r2
 8006d28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006d2c:	2277      	movs	r2, #119	; 0x77
 8006d2e:	2194      	movs	r1, #148	; 0x94
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f002 f8d1 	bl	8008ed8 <VL53L0X_WrByte>
 8006d36:	4603      	mov	r3, r0
 8006d38:	461a      	mov	r2, r3
 8006d3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7ff fe13 	bl	8006970 <VL53L0X_device_read_strobe>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006d58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	2190      	movs	r1, #144	; 0x90
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f002 f99d 	bl	80090a0 <VL53L0X_RdDWord>
 8006d66:	4603      	mov	r3, r0
 8006d68:	461a      	mov	r2, r3
 8006d6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	0e5b      	lsrs	r3, r3, #25
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	0c9b      	lsrs	r3, r3, #18
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	0adb      	lsrs	r3, r3, #11
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	091b      	lsrs	r3, r3, #4
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006dbe:	2278      	movs	r2, #120	; 0x78
 8006dc0:	2194      	movs	r1, #148	; 0x94
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f002 f888 	bl	8008ed8 <VL53L0X_WrByte>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7ff fdca 	bl	8006970 <VL53L0X_device_read_strobe>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	461a      	mov	r2, r3
 8006de0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006de4:	4313      	orrs	r3, r2
 8006de6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006dea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006dee:	461a      	mov	r2, r3
 8006df0:	2190      	movs	r1, #144	; 0x90
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f002 f954 	bl	80090a0 <VL53L0X_RdDWord>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	0f5b      	lsrs	r3, r3, #29
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e10:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8006e12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e16:	4413      	add	r3, r2
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	0d9b      	lsrs	r3, r3, #22
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	0bdb      	lsrs	r3, r3, #15
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	0a1b      	lsrs	r3, r3, #8
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	019b      	lsls	r3, r3, #6
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006e66:	2279      	movs	r2, #121	; 0x79
 8006e68:	2194      	movs	r1, #148	; 0x94
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f002 f834 	bl	8008ed8 <VL53L0X_WrByte>
 8006e70:	4603      	mov	r3, r0
 8006e72:	461a      	mov	r2, r3
 8006e74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fd76 	bl	8006970 <VL53L0X_device_read_strobe>
 8006e84:	4603      	mov	r3, r0
 8006e86:	461a      	mov	r2, r3
 8006e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e96:	461a      	mov	r2, r3
 8006e98:	2190      	movs	r1, #144	; 0x90
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f002 f900 	bl	80090a0 <VL53L0X_RdDWord>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	0e9b      	lsrs	r3, r3, #26
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb8:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8006eba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ebe:	4413      	add	r3, r2
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	0cdb      	lsrs	r3, r3, #19
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	0b1b      	lsrs	r3, r3, #12
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	095b      	lsrs	r3, r3, #5
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006f00:	227a      	movs	r2, #122	; 0x7a
 8006f02:	2194      	movs	r1, #148	; 0x94
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f001 ffe7 	bl	8008ed8 <VL53L0X_WrByte>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f12:	4313      	orrs	r3, r2
 8006f14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff fd29 	bl	8006970 <VL53L0X_device_read_strobe>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	461a      	mov	r2, r3
 8006f22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f26:	4313      	orrs	r3, r2
 8006f28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f30:	461a      	mov	r2, r3
 8006f32:	2190      	movs	r1, #144	; 0x90
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f002 f8b3 	bl	80090a0 <VL53L0X_RdDWord>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	0f9b      	lsrs	r3, r3, #30
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f52:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8006f54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f58:	4413      	add	r3, r2
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	0ddb      	lsrs	r3, r3, #23
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	0c1b      	lsrs	r3, r3, #16
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	0a5b      	lsrs	r3, r3, #9
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	089b      	lsrs	r3, r3, #2
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	f003 0304 	and.w	r3, r3, #4
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 80f1 	beq.w	800718e <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006fac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006fb0:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f040 80ea 	bne.w	800718e <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006fba:	227b      	movs	r2, #123	; 0x7b
 8006fbc:	2194      	movs	r1, #148	; 0x94
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 ff8a 	bl	8008ed8 <VL53L0X_WrByte>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fccc 	bl	8006970 <VL53L0X_device_read_strobe>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006fea:	461a      	mov	r2, r3
 8006fec:	2190      	movs	r1, #144	; 0x90
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f002 f856 	bl	80090a0 <VL53L0X_RdDWord>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007002:	227c      	movs	r2, #124	; 0x7c
 8007004:	2194      	movs	r1, #148	; 0x94
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f001 ff66 	bl	8008ed8 <VL53L0X_WrByte>
 800700c:	4603      	mov	r3, r0
 800700e:	461a      	mov	r2, r3
 8007010:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007014:	4313      	orrs	r3, r2
 8007016:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7ff fca8 	bl	8006970 <VL53L0X_device_read_strobe>
 8007020:	4603      	mov	r3, r0
 8007022:	461a      	mov	r2, r3
 8007024:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007028:	4313      	orrs	r3, r2
 800702a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800702e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007032:	461a      	mov	r2, r3
 8007034:	2190      	movs	r1, #144	; 0x90
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f002 f832 	bl	80090a0 <VL53L0X_RdDWord>
 800703c:	4603      	mov	r3, r0
 800703e:	461a      	mov	r2, r3
 8007040:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007044:	4313      	orrs	r3, r2
 8007046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800704a:	2273      	movs	r2, #115	; 0x73
 800704c:	2194      	movs	r1, #148	; 0x94
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f001 ff42 	bl	8008ed8 <VL53L0X_WrByte>
 8007054:	4603      	mov	r3, r0
 8007056:	461a      	mov	r2, r3
 8007058:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800705c:	4313      	orrs	r3, r2
 800705e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff fc84 	bl	8006970 <VL53L0X_device_read_strobe>
 8007068:	4603      	mov	r3, r0
 800706a:	461a      	mov	r2, r3
 800706c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007070:	4313      	orrs	r3, r2
 8007072:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007076:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800707a:	461a      	mov	r2, r3
 800707c:	2190      	movs	r1, #144	; 0x90
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f002 f80e 	bl	80090a0 <VL53L0X_RdDWord>
 8007084:	4603      	mov	r3, r0
 8007086:	461a      	mov	r2, r3
 8007088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800708c:	4313      	orrs	r3, r2
 800708e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8007092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007094:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8007096:	b29b      	uxth	r3, r3
 8007098:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800709a:	2274      	movs	r2, #116	; 0x74
 800709c:	2194      	movs	r1, #148	; 0x94
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f001 ff1a 	bl	8008ed8 <VL53L0X_WrByte>
 80070a4:	4603      	mov	r3, r0
 80070a6:	461a      	mov	r2, r3
 80070a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070ac:	4313      	orrs	r3, r2
 80070ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff fc5c 	bl	8006970 <VL53L0X_device_read_strobe>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461a      	mov	r2, r3
 80070bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80070c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80070ca:	461a      	mov	r2, r3
 80070cc:	2190      	movs	r1, #144	; 0x90
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 ffe6 	bl	80090a0 <VL53L0X_RdDWord>
 80070d4:	4603      	mov	r3, r0
 80070d6:	461a      	mov	r2, r3
 80070d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070dc:	4313      	orrs	r3, r2
 80070de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80070e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e4:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80070e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070e8:	4313      	orrs	r3, r2
 80070ea:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80070ec:	2275      	movs	r2, #117	; 0x75
 80070ee:	2194      	movs	r1, #148	; 0x94
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 fef1 	bl	8008ed8 <VL53L0X_WrByte>
 80070f6:	4603      	mov	r3, r0
 80070f8:	461a      	mov	r2, r3
 80070fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070fe:	4313      	orrs	r3, r2
 8007100:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff fc33 	bl	8006970 <VL53L0X_device_read_strobe>
 800710a:	4603      	mov	r3, r0
 800710c:	461a      	mov	r2, r3
 800710e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007112:	4313      	orrs	r3, r2
 8007114:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800711c:	461a      	mov	r2, r3
 800711e:	2190      	movs	r1, #144	; 0x90
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 ffbd 	bl	80090a0 <VL53L0X_RdDWord>
 8007126:	4603      	mov	r3, r0
 8007128:	461a      	mov	r2, r3
 800712a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800712e:	4313      	orrs	r3, r2
 8007130:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8007138:	b29b      	uxth	r3, r3
 800713a:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800713c:	2276      	movs	r2, #118	; 0x76
 800713e:	2194      	movs	r1, #148	; 0x94
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f001 fec9 	bl	8008ed8 <VL53L0X_WrByte>
 8007146:	4603      	mov	r3, r0
 8007148:	461a      	mov	r2, r3
 800714a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800714e:	4313      	orrs	r3, r2
 8007150:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7ff fc0b 	bl	8006970 <VL53L0X_device_read_strobe>
 800715a:	4603      	mov	r3, r0
 800715c:	461a      	mov	r2, r3
 800715e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007162:	4313      	orrs	r3, r2
 8007164:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007168:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800716c:	461a      	mov	r2, r3
 800716e:	2190      	movs	r1, #144	; 0x90
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f001 ff95 	bl	80090a0 <VL53L0X_RdDWord>
 8007176:	4603      	mov	r3, r0
 8007178:	461a      	mov	r2, r3
 800717a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800717e:	4313      	orrs	r3, r2
 8007180:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8007188:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800718a:	4313      	orrs	r3, r2
 800718c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800718e:	2200      	movs	r2, #0
 8007190:	2181      	movs	r1, #129	; 0x81
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 fea0 	bl	8008ed8 <VL53L0X_WrByte>
 8007198:	4603      	mov	r3, r0
 800719a:	461a      	mov	r2, r3
 800719c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80071a6:	2206      	movs	r2, #6
 80071a8:	21ff      	movs	r1, #255	; 0xff
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 fe94 	bl	8008ed8 <VL53L0X_WrByte>
 80071b0:	4603      	mov	r3, r0
 80071b2:	461a      	mov	r2, r3
 80071b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071b8:	4313      	orrs	r3, r2
 80071ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80071be:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80071c2:	461a      	mov	r2, r3
 80071c4:	2183      	movs	r1, #131	; 0x83
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f001 ff08 	bl	8008fdc <VL53L0X_RdByte>
 80071cc:	4603      	mov	r3, r0
 80071ce:	461a      	mov	r2, r3
 80071d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80071da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071de:	f023 0304 	bic.w	r3, r3, #4
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	461a      	mov	r2, r3
 80071e6:	2183      	movs	r1, #131	; 0x83
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 fe75 	bl	8008ed8 <VL53L0X_WrByte>
 80071ee:	4603      	mov	r3, r0
 80071f0:	461a      	mov	r2, r3
 80071f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80071fc:	2201      	movs	r2, #1
 80071fe:	21ff      	movs	r1, #255	; 0xff
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 fe69 	bl	8008ed8 <VL53L0X_WrByte>
 8007206:	4603      	mov	r3, r0
 8007208:	461a      	mov	r2, r3
 800720a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800720e:	4313      	orrs	r3, r2
 8007210:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007214:	2201      	movs	r2, #1
 8007216:	2100      	movs	r1, #0
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 fe5d 	bl	8008ed8 <VL53L0X_WrByte>
 800721e:	4603      	mov	r3, r0
 8007220:	461a      	mov	r2, r3
 8007222:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007226:	4313      	orrs	r3, r2
 8007228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800722c:	2200      	movs	r2, #0
 800722e:	21ff      	movs	r1, #255	; 0xff
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 fe51 	bl	8008ed8 <VL53L0X_WrByte>
 8007236:	4603      	mov	r3, r0
 8007238:	461a      	mov	r2, r3
 800723a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800723e:	4313      	orrs	r3, r2
 8007240:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007244:	2200      	movs	r2, #0
 8007246:	2180      	movs	r1, #128	; 0x80
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 fe45 	bl	8008ed8 <VL53L0X_WrByte>
 800724e:	4603      	mov	r3, r0
 8007250:	461a      	mov	r2, r3
 8007252:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007256:	4313      	orrs	r3, r2
 8007258:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800725c:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007260:	2b00      	cmp	r3, #0
 8007262:	f040 8090 	bne.w	8007386 <VL53L0X_get_info_from_device+0x990>
 8007266:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800726a:	2b07      	cmp	r3, #7
 800726c:	f000 808b 	beq.w	8007386 <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	f003 0301 	and.w	r3, r3, #1
 8007276:	2b00      	cmp	r3, #0
 8007278:	d024      	beq.n	80072c4 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800727a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800727e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007282:	2b00      	cmp	r3, #0
 8007284:	d11e      	bne.n	80072c4 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800728c:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007296:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800729a:	2300      	movs	r3, #0
 800729c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800729e:	e00e      	b.n	80072be <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80072a0:	f107 0208 	add.w	r2, r7, #8
 80072a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a6:	4413      	add	r3, r2
 80072a8:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 80072b4:	460a      	mov	r2, r1
 80072b6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80072b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ba:	3301      	adds	r3, #1
 80072bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072c0:	2b05      	cmp	r3, #5
 80072c2:	dded      	ble.n	80072a0 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d019      	beq.n	8007302 <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80072ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80072d2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d113      	bne.n	8007302 <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80072da:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80072e4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f203 131f 	addw	r3, r3, #287	; 0x11f
 80072f4:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80072f6:	f107 0310 	add.w	r3, r7, #16
 80072fa:	4619      	mov	r1, r3
 80072fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072fe:	f003 f86e 	bl	800a3de <strcpy>

		}

		if (((option & 4) == 4) &&
 8007302:	78fb      	ldrb	r3, [r7, #3]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	d030      	beq.n	800736e <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800730c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007310:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007314:	2b00      	cmp	r3, #0
 8007316:	d12a      	bne.n	800736e <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800732a:	025b      	lsls	r3, r3, #9
 800732c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007332:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800733c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800733e:	2b00      	cmp	r3, #0
 8007340:	d011      	beq.n	8007366 <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 8007342:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007346:	1ad3      	subs	r3, r2, r3
 8007348:	64bb      	str	r3, [r7, #72]	; 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800734a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800734c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007350:	fb02 f303 	mul.w	r3, r2, r3
 8007354:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 8007356:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				OffsetMicroMeters *= -1;
 800735a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800735e:	425b      	negs	r3, r3
 8007360:	b29b      	uxth	r3, r3
 8007362:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8007366:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800736e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	4313      	orrs	r3, r2
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800737c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007386:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800738a:	4618      	mov	r0, r3
 800738c:	3760      	adds	r7, #96	; 0x60
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 8007392:	b480      	push	{r7}
 8007394:	b087      	sub	sp, #28
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	460b      	mov	r3, r1
 800739c:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 800739e:	f240 6277 	movw	r2, #1655	; 0x677
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 80073aa:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80073ae:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	fb02 f303 	mul.w	r3, r2, r3
 80073be:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80073c0:	68bb      	ldr	r3, [r7, #8]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b087      	sub	sp, #28
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80073da:	2300      	movs	r3, #0
 80073dc:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80073de:	2300      	movs	r3, #0
 80073e0:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d017      	beq.n	8007418 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80073ee:	e005      	b.n	80073fc <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	085b      	lsrs	r3, r3, #1
 80073f4:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80073f6:	89fb      	ldrh	r3, [r7, #14]
 80073f8:	3301      	adds	r3, #1
 80073fa:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1f4      	bne.n	80073f0 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007406:	89fb      	ldrh	r3, [r7, #14]
 8007408:	021b      	lsls	r3, r3, #8
 800740a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	b29b      	uxth	r3, r3
 8007410:	b2db      	uxtb	r3, r3
 8007412:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007414:	4413      	add	r3, r2
 8007416:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007418:	8afb      	ldrh	r3, [r7, #22]

}
 800741a:	4618      	mov	r0, r3
 800741c:	371c      	adds	r7, #28
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	4603      	mov	r3, r0
 800742e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007434:	88fb      	ldrh	r3, [r7, #6]
 8007436:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007438:	88fa      	ldrh	r2, [r7, #6]
 800743a:	0a12      	lsrs	r2, r2, #8
 800743c:	b292      	uxth	r2, r2
 800743e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007444:	68fb      	ldr	r3, [r7, #12]
}
 8007446:	4618      	mov	r0, r3
 8007448:	3714      	adds	r7, #20
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
	...

08007454 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b088      	sub	sp, #32
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	4613      	mov	r3, r2
 8007460:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007466:	79fb      	ldrb	r3, [r7, #7]
 8007468:	4619      	mov	r1, r3
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f7ff ff91 	bl	8007392 <VL53L0X_calc_macro_period_ps>
 8007470:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007478:	4a0a      	ldr	r2, [pc, #40]	; (80074a4 <VL53L0X_calc_timeout_mclks+0x50>)
 800747a:	fba2 2303 	umull	r2, r3, r2, r3
 800747e:	099b      	lsrs	r3, r3, #6
 8007480:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007488:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	085b      	lsrs	r3, r3, #1
 8007490:	441a      	add	r2, r3
	timeout_period_mclks =
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	fbb2 f3f3 	udiv	r3, r2, r3
 8007498:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800749a:	69fb      	ldr	r3, [r7, #28]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3720      	adds	r7, #32
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	10624dd3 	.word	0x10624dd3

080074a8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	460b      	mov	r3, r1
 80074b2:	807b      	strh	r3, [r7, #2]
 80074b4:	4613      	mov	r3, r2
 80074b6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80074bc:	787b      	ldrb	r3, [r7, #1]
 80074be:	4619      	mov	r1, r3
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f7ff ff66 	bl	8007392 <VL53L0X_calc_macro_period_ps>
 80074c6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80074ce:	4a0a      	ldr	r2, [pc, #40]	; (80074f8 <VL53L0X_calc_timeout_us+0x50>)
 80074d0:	fba2 2303 	umull	r2, r3, r2, r3
 80074d4:	099b      	lsrs	r3, r3, #6
 80074d6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80074d8:	887b      	ldrh	r3, [r7, #2]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	fb02 f303 	mul.w	r3, r2, r3
 80074e0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80074e4:	4a04      	ldr	r2, [pc, #16]	; (80074f8 <VL53L0X_calc_timeout_us+0x50>)
 80074e6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ea:	099b      	lsrs	r3, r3, #6
 80074ec:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80074ee:	697b      	ldr	r3, [r7, #20]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	10624dd3 	.word	0x10624dd3

080074fc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b08c      	sub	sp, #48	; 0x30
 8007500:	af00      	add	r7, sp, #0
 8007502:	60f8      	str	r0, [r7, #12]
 8007504:	460b      	mov	r3, r1
 8007506:	607a      	str	r2, [r7, #4]
 8007508:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800750a:	2300      	movs	r3, #0
 800750c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800751e:	2300      	movs	r3, #0
 8007520:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007522:	7afb      	ldrb	r3, [r7, #11]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <get_sequence_step_timeout+0x38>
 8007528:	7afb      	ldrb	r3, [r7, #11]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d002      	beq.n	8007534 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800752e:	7afb      	ldrb	r3, [r7, #11]
 8007530:	2b02      	cmp	r3, #2
 8007532:	d128      	bne.n	8007586 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007534:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007538:	461a      	mov	r2, r3
 800753a:	2100      	movs	r1, #0
 800753c:	68f8      	ldr	r0, [r7, #12]
 800753e:	f7fd f9ef 	bl	8004920 <VL53L0X_GetVcselPulsePeriod>
 8007542:	4603      	mov	r3, r0
 8007544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007548:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800754c:	2b00      	cmp	r3, #0
 800754e:	d109      	bne.n	8007564 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007550:	f107 0320 	add.w	r3, r7, #32
 8007554:	461a      	mov	r2, r3
 8007556:	2146      	movs	r1, #70	; 0x46
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f001 fd3f 	bl	8008fdc <VL53L0X_RdByte>
 800755e:	4603      	mov	r3, r0
 8007560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007564:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007568:	b29b      	uxth	r3, r3
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff ff5b 	bl	8007426 <VL53L0X_decode_timeout>
 8007570:	4603      	mov	r3, r0
 8007572:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007574:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007578:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800757a:	4619      	mov	r1, r3
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f7ff ff93 	bl	80074a8 <VL53L0X_calc_timeout_us>
 8007582:	62b8      	str	r0, [r7, #40]	; 0x28
 8007584:	e092      	b.n	80076ac <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007586:	7afb      	ldrb	r3, [r7, #11]
 8007588:	2b03      	cmp	r3, #3
 800758a:	d135      	bne.n	80075f8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800758c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007590:	461a      	mov	r2, r3
 8007592:	2100      	movs	r1, #0
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f7fd f9c3 	bl	8004920 <VL53L0X_GetVcselPulsePeriod>
 800759a:	4603      	mov	r3, r0
 800759c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80075a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f040 8081 	bne.w	80076ac <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80075aa:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80075ae:	461a      	mov	r2, r3
 80075b0:	2100      	movs	r1, #0
 80075b2:	68f8      	ldr	r0, [r7, #12]
 80075b4:	f7fd f9b4 	bl	8004920 <VL53L0X_GetVcselPulsePeriod>
 80075b8:	4603      	mov	r3, r0
 80075ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80075be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d109      	bne.n	80075da <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80075c6:	f107 031e 	add.w	r3, r7, #30
 80075ca:	461a      	mov	r2, r3
 80075cc:	2151      	movs	r1, #81	; 0x51
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f001 fd2e 	bl	8009030 <VL53L0X_RdWord>
 80075d4:	4603      	mov	r3, r0
 80075d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80075da:	8bfb      	ldrh	r3, [r7, #30]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff ff22 	bl	8007426 <VL53L0X_decode_timeout>
 80075e2:	4603      	mov	r3, r0
 80075e4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80075e6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80075ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80075ec:	4619      	mov	r1, r3
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f7ff ff5a 	bl	80074a8 <VL53L0X_calc_timeout_us>
 80075f4:	62b8      	str	r0, [r7, #40]	; 0x28
 80075f6:	e059      	b.n	80076ac <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80075f8:	7afb      	ldrb	r3, [r7, #11]
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	d156      	bne.n	80076ac <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80075fe:	f107 0314 	add.w	r3, r7, #20
 8007602:	4619      	mov	r1, r3
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f7fd fa97 	bl	8004b38 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800760e:	7dfb      	ldrb	r3, [r7, #23]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d01d      	beq.n	8007650 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007614:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007618:	461a      	mov	r2, r3
 800761a:	2100      	movs	r1, #0
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7fd f97f 	bl	8004920 <VL53L0X_GetVcselPulsePeriod>
 8007622:	4603      	mov	r3, r0
 8007624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007628:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10f      	bne.n	8007650 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8007630:	f107 031e 	add.w	r3, r7, #30
 8007634:	461a      	mov	r2, r3
 8007636:	2151      	movs	r1, #81	; 0x51
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f001 fcf9 	bl	8009030 <VL53L0X_RdWord>
 800763e:	4603      	mov	r3, r0
 8007640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007644:	8bfb      	ldrh	r3, [r7, #30]
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff feed 	bl	8007426 <VL53L0X_decode_timeout>
 800764c:	4603      	mov	r3, r0
 800764e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007650:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007654:	2b00      	cmp	r3, #0
 8007656:	d109      	bne.n	800766c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007658:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800765c:	461a      	mov	r2, r3
 800765e:	2101      	movs	r1, #1
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f7fd f95d 	bl	8004920 <VL53L0X_GetVcselPulsePeriod>
 8007666:	4603      	mov	r3, r0
 8007668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800766c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10f      	bne.n	8007694 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007674:	f107 031c 	add.w	r3, r7, #28
 8007678:	461a      	mov	r2, r3
 800767a:	2171      	movs	r1, #113	; 0x71
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f001 fcd7 	bl	8009030 <VL53L0X_RdWord>
 8007682:	4603      	mov	r3, r0
 8007684:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007688:	8bbb      	ldrh	r3, [r7, #28]
 800768a:	4618      	mov	r0, r3
 800768c:	f7ff fecb 	bl	8007426 <VL53L0X_decode_timeout>
 8007690:	4603      	mov	r3, r0
 8007692:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007694:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007696:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800769c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80076a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076a2:	4619      	mov	r1, r3
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7ff feff 	bl	80074a8 <VL53L0X_calc_timeout_us>
 80076aa:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076b0:	601a      	str	r2, [r3, #0]

	return Status;
 80076b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3730      	adds	r7, #48	; 0x30
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b08a      	sub	sp, #40	; 0x28
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	60f8      	str	r0, [r7, #12]
 80076c6:	460b      	mov	r3, r1
 80076c8:	607a      	str	r2, [r7, #4]
 80076ca:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076cc:	2300      	movs	r3, #0
 80076ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80076d2:	7afb      	ldrb	r3, [r7, #11]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d005      	beq.n	80076e4 <set_sequence_step_timeout+0x26>
 80076d8:	7afb      	ldrb	r3, [r7, #11]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d002      	beq.n	80076e4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80076de:	7afb      	ldrb	r3, [r7, #11]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d138      	bne.n	8007756 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80076e4:	f107 031b 	add.w	r3, r7, #27
 80076e8:	461a      	mov	r2, r3
 80076ea:	2100      	movs	r1, #0
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f7fd f917 	bl	8004920 <VL53L0X_GetVcselPulsePeriod>
 80076f2:	4603      	mov	r3, r0
 80076f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80076f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d11a      	bne.n	8007736 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007700:	7efb      	ldrb	r3, [r7, #27]
 8007702:	461a      	mov	r2, r3
 8007704:	6879      	ldr	r1, [r7, #4]
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f7ff fea4 	bl	8007454 <VL53L0X_calc_timeout_mclks>
 800770c:	4603      	mov	r3, r0
 800770e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8007710:	8bbb      	ldrh	r3, [r7, #28]
 8007712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007716:	d903      	bls.n	8007720 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007718:	23ff      	movs	r3, #255	; 0xff
 800771a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800771e:	e004      	b.n	800772a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8007720:	8bbb      	ldrh	r3, [r7, #28]
 8007722:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007724:	3b01      	subs	r3, #1
 8007726:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800772a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800772e:	b29a      	uxth	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007736:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800773a:	2b00      	cmp	r3, #0
 800773c:	f040 80ab 	bne.w	8007896 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8007740:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007744:	461a      	mov	r2, r3
 8007746:	2146      	movs	r1, #70	; 0x46
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f001 fbc5 	bl	8008ed8 <VL53L0X_WrByte>
 800774e:	4603      	mov	r3, r0
 8007750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007754:	e09f      	b.n	8007896 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007756:	7afb      	ldrb	r3, [r7, #11]
 8007758:	2b03      	cmp	r3, #3
 800775a:	d135      	bne.n	80077c8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800775c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007760:	2b00      	cmp	r3, #0
 8007762:	d11b      	bne.n	800779c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007764:	f107 031b 	add.w	r3, r7, #27
 8007768:	461a      	mov	r2, r3
 800776a:	2100      	movs	r1, #0
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f7fd f8d7 	bl	8004920 <VL53L0X_GetVcselPulsePeriod>
 8007772:	4603      	mov	r3, r0
 8007774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007778:	7efb      	ldrb	r3, [r7, #27]
 800777a:	461a      	mov	r2, r3
 800777c:	6879      	ldr	r1, [r7, #4]
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7ff fe68 	bl	8007454 <VL53L0X_calc_timeout_mclks>
 8007784:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007786:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff fe1f 	bl	80073ce <VL53L0X_encode_timeout>
 8007790:	4603      	mov	r3, r0
 8007792:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007794:	8b3a      	ldrh	r2, [r7, #24]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800779c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d108      	bne.n	80077b6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80077a4:	8b3b      	ldrh	r3, [r7, #24]
 80077a6:	461a      	mov	r2, r3
 80077a8:	2151      	movs	r1, #81	; 0x51
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f001 fbb8 	bl	8008f20 <VL53L0X_WrWord>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80077b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d16b      	bne.n	8007896 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80077c6:	e066      	b.n	8007896 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80077c8:	7afb      	ldrb	r3, [r7, #11]
 80077ca:	2b04      	cmp	r3, #4
 80077cc:	d160      	bne.n	8007890 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80077ce:	f107 0310 	add.w	r3, r7, #16
 80077d2:	4619      	mov	r1, r3
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f7fd f9af 	bl	8004b38 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80077de:	7cfb      	ldrb	r3, [r7, #19]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01d      	beq.n	8007820 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80077e4:	f107 031b 	add.w	r3, r7, #27
 80077e8:	461a      	mov	r2, r3
 80077ea:	2100      	movs	r1, #0
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f7fd f897 	bl	8004920 <VL53L0X_GetVcselPulsePeriod>
 80077f2:	4603      	mov	r3, r0
 80077f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 80077f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10f      	bne.n	8007820 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8007800:	f107 0318 	add.w	r3, r7, #24
 8007804:	461a      	mov	r2, r3
 8007806:	2151      	movs	r1, #81	; 0x51
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f001 fc11 	bl	8009030 <VL53L0X_RdWord>
 800780e:	4603      	mov	r3, r0
 8007810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8007814:	8b3b      	ldrh	r3, [r7, #24]
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff fe05 	bl	8007426 <VL53L0X_decode_timeout>
 800781c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800781e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007820:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007824:	2b00      	cmp	r3, #0
 8007826:	d109      	bne.n	800783c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007828:	f107 031b 	add.w	r3, r7, #27
 800782c:	461a      	mov	r2, r3
 800782e:	2101      	movs	r1, #1
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7fd f875 	bl	8004920 <VL53L0X_GetVcselPulsePeriod>
 8007836:	4603      	mov	r3, r0
 8007838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800783c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007840:	2b00      	cmp	r3, #0
 8007842:	d128      	bne.n	8007896 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007844:	7efb      	ldrb	r3, [r7, #27]
 8007846:	461a      	mov	r2, r3
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f7ff fe02 	bl	8007454 <VL53L0X_calc_timeout_mclks>
 8007850:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8007852:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007854:	6a3a      	ldr	r2, [r7, #32]
 8007856:	4413      	add	r3, r2
 8007858:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800785a:	6a38      	ldr	r0, [r7, #32]
 800785c:	f7ff fdb7 	bl	80073ce <VL53L0X_encode_timeout>
 8007860:	4603      	mov	r3, r0
 8007862:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8007864:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007868:	2b00      	cmp	r3, #0
 800786a:	d108      	bne.n	800787e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800786c:	8bfb      	ldrh	r3, [r7, #30]
 800786e:	461a      	mov	r2, r3
 8007870:	2171      	movs	r1, #113	; 0x71
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f001 fb54 	bl	8008f20 <VL53L0X_WrWord>
 8007878:	4603      	mov	r3, r0
 800787a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800787e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007882:	2b00      	cmp	r3, #0
 8007884:	d107      	bne.n	8007896 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 800788e:	e002      	b.n	8007896 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007890:	23fc      	movs	r3, #252	; 0xfc
 8007892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8007896:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800789a:	4618      	mov	r0, r3
 800789c:	3728      	adds	r7, #40	; 0x28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b08a      	sub	sp, #40	; 0x28
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	460b      	mov	r3, r1
 80078ac:	70fb      	strb	r3, [r7, #3]
 80078ae:	4613      	mov	r3, r2
 80078b0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078b2:	2300      	movs	r3, #0
 80078b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80078b8:	230c      	movs	r3, #12
 80078ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80078be:	2312      	movs	r3, #18
 80078c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80078c4:	2308      	movs	r3, #8
 80078c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80078ca:	230e      	movs	r3, #14
 80078cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80078d4:	78bb      	ldrb	r3, [r7, #2]
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80078e0:	23fc      	movs	r3, #252	; 0xfc
 80078e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078e6:	e020      	b.n	800792a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80078e8:	78fb      	ldrb	r3, [r7, #3]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10d      	bne.n	800790a <VL53L0X_set_vcsel_pulse_period+0x68>
 80078ee:	78ba      	ldrb	r2, [r7, #2]
 80078f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d304      	bcc.n	8007902 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80078f8:	78ba      	ldrb	r2, [r7, #2]
 80078fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80078fe:	429a      	cmp	r2, r3
 8007900:	d903      	bls.n	800790a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007902:	23fc      	movs	r3, #252	; 0xfc
 8007904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007908:	e00f      	b.n	800792a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800790a:	78fb      	ldrb	r3, [r7, #3]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d10c      	bne.n	800792a <VL53L0X_set_vcsel_pulse_period+0x88>
 8007910:	78ba      	ldrb	r2, [r7, #2]
 8007912:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007916:	429a      	cmp	r2, r3
 8007918:	d304      	bcc.n	8007924 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800791a:	78ba      	ldrb	r2, [r7, #2]
 800791c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007920:	429a      	cmp	r2, r3
 8007922:	d902      	bls.n	800792a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007924:	23fc      	movs	r3, #252	; 0xfc
 8007926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800792a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800792e:	2b00      	cmp	r3, #0
 8007930:	d002      	beq.n	8007938 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8007932:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007936:	e239      	b.n	8007dac <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d150      	bne.n	80079e0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800793e:	78bb      	ldrb	r3, [r7, #2]
 8007940:	2b0c      	cmp	r3, #12
 8007942:	d110      	bne.n	8007966 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8007944:	2218      	movs	r2, #24
 8007946:	2157      	movs	r1, #87	; 0x57
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 fac5 	bl	8008ed8 <VL53L0X_WrByte>
 800794e:	4603      	mov	r3, r0
 8007950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8007954:	2208      	movs	r2, #8
 8007956:	2156      	movs	r1, #86	; 0x56
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f001 fabd 	bl	8008ed8 <VL53L0X_WrByte>
 800795e:	4603      	mov	r3, r0
 8007960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007964:	e17f      	b.n	8007c66 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007966:	78bb      	ldrb	r3, [r7, #2]
 8007968:	2b0e      	cmp	r3, #14
 800796a:	d110      	bne.n	800798e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800796c:	2230      	movs	r2, #48	; 0x30
 800796e:	2157      	movs	r1, #87	; 0x57
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 fab1 	bl	8008ed8 <VL53L0X_WrByte>
 8007976:	4603      	mov	r3, r0
 8007978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800797c:	2208      	movs	r2, #8
 800797e:	2156      	movs	r1, #86	; 0x56
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 faa9 	bl	8008ed8 <VL53L0X_WrByte>
 8007986:	4603      	mov	r3, r0
 8007988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800798c:	e16b      	b.n	8007c66 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800798e:	78bb      	ldrb	r3, [r7, #2]
 8007990:	2b10      	cmp	r3, #16
 8007992:	d110      	bne.n	80079b6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8007994:	2240      	movs	r2, #64	; 0x40
 8007996:	2157      	movs	r1, #87	; 0x57
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 fa9d 	bl	8008ed8 <VL53L0X_WrByte>
 800799e:	4603      	mov	r3, r0
 80079a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80079a4:	2208      	movs	r2, #8
 80079a6:	2156      	movs	r1, #86	; 0x56
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 fa95 	bl	8008ed8 <VL53L0X_WrByte>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079b4:	e157      	b.n	8007c66 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80079b6:	78bb      	ldrb	r3, [r7, #2]
 80079b8:	2b12      	cmp	r3, #18
 80079ba:	f040 8154 	bne.w	8007c66 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80079be:	2250      	movs	r2, #80	; 0x50
 80079c0:	2157      	movs	r1, #87	; 0x57
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 fa88 	bl	8008ed8 <VL53L0X_WrByte>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80079ce:	2208      	movs	r2, #8
 80079d0:	2156      	movs	r1, #86	; 0x56
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fa80 	bl	8008ed8 <VL53L0X_WrByte>
 80079d8:	4603      	mov	r3, r0
 80079da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079de:	e142      	b.n	8007c66 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	f040 813f 	bne.w	8007c66 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80079e8:	78bb      	ldrb	r3, [r7, #2]
 80079ea:	2b08      	cmp	r3, #8
 80079ec:	d14c      	bne.n	8007a88 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 80079ee:	2210      	movs	r2, #16
 80079f0:	2148      	movs	r1, #72	; 0x48
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f001 fa70 	bl	8008ed8 <VL53L0X_WrByte>
 80079f8:	4603      	mov	r3, r0
 80079fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 80079fe:	2208      	movs	r2, #8
 8007a00:	2147      	movs	r1, #71	; 0x47
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 fa68 	bl	8008ed8 <VL53L0X_WrByte>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007a0e:	2202      	movs	r2, #2
 8007a10:	2132      	movs	r1, #50	; 0x32
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f001 fa60 	bl	8008ed8 <VL53L0X_WrByte>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a20:	4313      	orrs	r3, r2
 8007a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8007a26:	220c      	movs	r2, #12
 8007a28:	2130      	movs	r1, #48	; 0x30
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 fa54 	bl	8008ed8 <VL53L0X_WrByte>
 8007a30:	4603      	mov	r3, r0
 8007a32:	461a      	mov	r2, r3
 8007a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007a3e:	2201      	movs	r2, #1
 8007a40:	21ff      	movs	r1, #255	; 0xff
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f001 fa48 	bl	8008ed8 <VL53L0X_WrByte>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a50:	4313      	orrs	r3, r2
 8007a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007a56:	2230      	movs	r2, #48	; 0x30
 8007a58:	2130      	movs	r1, #48	; 0x30
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 fa3c 	bl	8008ed8 <VL53L0X_WrByte>
 8007a60:	4603      	mov	r3, r0
 8007a62:	461a      	mov	r2, r3
 8007a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007a6e:	2200      	movs	r2, #0
 8007a70:	21ff      	movs	r1, #255	; 0xff
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 fa30 	bl	8008ed8 <VL53L0X_WrByte>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a80:	4313      	orrs	r3, r2
 8007a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a86:	e0ee      	b.n	8007c66 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8007a88:	78bb      	ldrb	r3, [r7, #2]
 8007a8a:	2b0a      	cmp	r3, #10
 8007a8c:	d14c      	bne.n	8007b28 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8007a8e:	2228      	movs	r2, #40	; 0x28
 8007a90:	2148      	movs	r1, #72	; 0x48
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 fa20 	bl	8008ed8 <VL53L0X_WrByte>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8007a9e:	2208      	movs	r2, #8
 8007aa0:	2147      	movs	r1, #71	; 0x47
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 fa18 	bl	8008ed8 <VL53L0X_WrByte>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007aae:	2203      	movs	r2, #3
 8007ab0:	2132      	movs	r1, #50	; 0x32
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f001 fa10 	bl	8008ed8 <VL53L0X_WrByte>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	461a      	mov	r2, r3
 8007abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007ac6:	2209      	movs	r2, #9
 8007ac8:	2130      	movs	r1, #48	; 0x30
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f001 fa04 	bl	8008ed8 <VL53L0X_WrByte>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007ade:	2201      	movs	r2, #1
 8007ae0:	21ff      	movs	r1, #255	; 0xff
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f001 f9f8 	bl	8008ed8 <VL53L0X_WrByte>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	461a      	mov	r2, r3
 8007aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007af0:	4313      	orrs	r3, r2
 8007af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007af6:	2220      	movs	r2, #32
 8007af8:	2130      	movs	r1, #48	; 0x30
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 f9ec 	bl	8008ed8 <VL53L0X_WrByte>
 8007b00:	4603      	mov	r3, r0
 8007b02:	461a      	mov	r2, r3
 8007b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007b0e:	2200      	movs	r2, #0
 8007b10:	21ff      	movs	r1, #255	; 0xff
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f001 f9e0 	bl	8008ed8 <VL53L0X_WrByte>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b20:	4313      	orrs	r3, r2
 8007b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b26:	e09e      	b.n	8007c66 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8007b28:	78bb      	ldrb	r3, [r7, #2]
 8007b2a:	2b0c      	cmp	r3, #12
 8007b2c:	d14c      	bne.n	8007bc8 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8007b2e:	2238      	movs	r2, #56	; 0x38
 8007b30:	2148      	movs	r1, #72	; 0x48
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f001 f9d0 	bl	8008ed8 <VL53L0X_WrByte>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8007b3e:	2208      	movs	r2, #8
 8007b40:	2147      	movs	r1, #71	; 0x47
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f001 f9c8 	bl	8008ed8 <VL53L0X_WrByte>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007b4e:	2203      	movs	r2, #3
 8007b50:	2132      	movs	r1, #50	; 0x32
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 f9c0 	bl	8008ed8 <VL53L0X_WrByte>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b60:	4313      	orrs	r3, r2
 8007b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007b66:	2208      	movs	r2, #8
 8007b68:	2130      	movs	r1, #48	; 0x30
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f001 f9b4 	bl	8008ed8 <VL53L0X_WrByte>
 8007b70:	4603      	mov	r3, r0
 8007b72:	461a      	mov	r2, r3
 8007b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007b7e:	2201      	movs	r2, #1
 8007b80:	21ff      	movs	r1, #255	; 0xff
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 f9a8 	bl	8008ed8 <VL53L0X_WrByte>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b90:	4313      	orrs	r3, r2
 8007b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007b96:	2220      	movs	r2, #32
 8007b98:	2130      	movs	r1, #48	; 0x30
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 f99c 	bl	8008ed8 <VL53L0X_WrByte>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007bae:	2200      	movs	r2, #0
 8007bb0:	21ff      	movs	r1, #255	; 0xff
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 f990 	bl	8008ed8 <VL53L0X_WrByte>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	461a      	mov	r2, r3
 8007bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bc6:	e04e      	b.n	8007c66 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007bc8:	78bb      	ldrb	r3, [r7, #2]
 8007bca:	2b0e      	cmp	r3, #14
 8007bcc:	d14b      	bne.n	8007c66 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8007bce:	2248      	movs	r2, #72	; 0x48
 8007bd0:	2148      	movs	r1, #72	; 0x48
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 f980 	bl	8008ed8 <VL53L0X_WrByte>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8007bde:	2208      	movs	r2, #8
 8007be0:	2147      	movs	r1, #71	; 0x47
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f001 f978 	bl	8008ed8 <VL53L0X_WrByte>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007bee:	2203      	movs	r2, #3
 8007bf0:	2132      	movs	r1, #50	; 0x32
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 f970 	bl	8008ed8 <VL53L0X_WrByte>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c00:	4313      	orrs	r3, r2
 8007c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007c06:	2207      	movs	r2, #7
 8007c08:	2130      	movs	r1, #48	; 0x30
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f001 f964 	bl	8008ed8 <VL53L0X_WrByte>
 8007c10:	4603      	mov	r3, r0
 8007c12:	461a      	mov	r2, r3
 8007c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007c1e:	2201      	movs	r2, #1
 8007c20:	21ff      	movs	r1, #255	; 0xff
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f001 f958 	bl	8008ed8 <VL53L0X_WrByte>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c30:	4313      	orrs	r3, r2
 8007c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007c36:	2220      	movs	r2, #32
 8007c38:	2130      	movs	r1, #48	; 0x30
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 f94c 	bl	8008ed8 <VL53L0X_WrByte>
 8007c40:	4603      	mov	r3, r0
 8007c42:	461a      	mov	r2, r3
 8007c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007c4e:	2200      	movs	r2, #0
 8007c50:	21ff      	movs	r1, #255	; 0xff
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 f940 	bl	8008ed8 <VL53L0X_WrByte>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c60:	4313      	orrs	r3, r2
 8007c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8007c66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d17f      	bne.n	8007d6e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8007c6e:	78bb      	ldrb	r3, [r7, #2]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fe fe36 	bl	80068e2 <VL53L0X_encode_vcsel_period>
 8007c76:	4603      	mov	r3, r0
 8007c78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d002      	beq.n	8007c88 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d045      	beq.n	8007d12 <VL53L0X_set_vcsel_pulse_period+0x470>
 8007c86:	e06e      	b.n	8007d66 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007c88:	f107 0314 	add.w	r3, r7, #20
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	2103      	movs	r1, #3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7ff fc33 	bl	80074fc <get_sequence_step_timeout>
 8007c96:	4603      	mov	r3, r0
 8007c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007c9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d109      	bne.n	8007cb8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8007ca4:	f107 0310 	add.w	r3, r7, #16
 8007ca8:	461a      	mov	r2, r3
 8007caa:	2102      	movs	r1, #2
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7ff fc25 	bl	80074fc <get_sequence_step_timeout>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007cb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d109      	bne.n	8007cd4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8007cc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	2150      	movs	r1, #80	; 0x50
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 f905 	bl	8008ed8 <VL53L0X_WrByte>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007cd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d108      	bne.n	8007cee <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	2103      	movs	r1, #3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7ff fceb 	bl	80076be <set_sequence_step_timeout>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8007cee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d108      	bne.n	8007d08 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	2102      	movs	r1, #2
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff fcde 	bl	80076be <set_sequence_step_timeout>
 8007d02:	4603      	mov	r3, r0
 8007d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	78ba      	ldrb	r2, [r7, #2]
 8007d0c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007d10:	e02e      	b.n	8007d70 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007d12:	f107 0318 	add.w	r3, r7, #24
 8007d16:	461a      	mov	r2, r3
 8007d18:	2104      	movs	r1, #4
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff fbee 	bl	80074fc <get_sequence_step_timeout>
 8007d20:	4603      	mov	r3, r0
 8007d22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007d26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d109      	bne.n	8007d42 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8007d2e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007d32:	461a      	mov	r2, r3
 8007d34:	2170      	movs	r1, #112	; 0x70
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f001 f8ce 	bl	8008ed8 <VL53L0X_WrByte>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007d42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d108      	bne.n	8007d5c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	2104      	movs	r1, #4
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff fcb4 	bl	80076be <set_sequence_step_timeout>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	78ba      	ldrb	r2, [r7, #2]
 8007d60:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007d64:	e004      	b.n	8007d70 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007d66:	23fc      	movs	r3, #252	; 0xfc
 8007d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d6c:	e000      	b.n	8007d70 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8007d6e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8007d70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d109      	bne.n	8007d8c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007d7e:	69f9      	ldr	r1, [r7, #28]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7fc fd8f 	bl	80048a4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007d8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d109      	bne.n	8007da8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8007d94:	f107 010f 	add.w	r1, r7, #15
 8007d98:	2301      	movs	r3, #1
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f7fe fcbb 	bl	8006718 <VL53L0X_perform_phase_calibration>
 8007da2:	4603      	mov	r3, r0
 8007da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007da8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3728      	adds	r7, #40	; 0x28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	607a      	str	r2, [r7, #4]
 8007dc0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007dc6:	7afb      	ldrb	r3, [r7, #11]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d002      	beq.n	8007dd2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d00a      	beq.n	8007de6 <VL53L0X_get_vcsel_pulse_period+0x32>
 8007dd0:	e013      	b.n	8007dfa <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007dd2:	f107 0316 	add.w	r3, r7, #22
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	2150      	movs	r1, #80	; 0x50
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f001 f8fe 	bl	8008fdc <VL53L0X_RdByte>
 8007de0:	4603      	mov	r3, r0
 8007de2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007de4:	e00b      	b.n	8007dfe <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007de6:	f107 0316 	add.w	r3, r7, #22
 8007dea:	461a      	mov	r2, r3
 8007dec:	2170      	movs	r1, #112	; 0x70
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f001 f8f4 	bl	8008fdc <VL53L0X_RdByte>
 8007df4:	4603      	mov	r3, r0
 8007df6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007df8:	e001      	b.n	8007dfe <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007dfa:	23fc      	movs	r3, #252	; 0xfc
 8007dfc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007dfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d107      	bne.n	8007e16 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8007e06:	7dbb      	ldrb	r3, [r7, #22]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fe fd57 	bl	80068bc <VL53L0X_decode_vcsel_period>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	701a      	strb	r2, [r3, #0]

	return Status;
 8007e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b090      	sub	sp, #64	; 0x40
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007e32:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007e36:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007e38:	f240 7376 	movw	r3, #1910	; 0x776
 8007e3c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 8007e3e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007e42:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007e44:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007e48:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 8007e4a:	f240 234e 	movw	r3, #590	; 0x24e
 8007e4e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 8007e50:	f240 23b2 	movw	r3, #690	; 0x2b2
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007e56:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007e5a:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007e5c:	f240 2326 	movw	r3, #550	; 0x226
 8007e60:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8007e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6e:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	63bb      	str	r3, [r7, #56]	; 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007e76:	f107 0310 	add.w	r3, r7, #16
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7fc fe5b 	bl	8004b38 <VL53L0X_GetSequenceStepEnables>
 8007e82:	4603      	mov	r3, r0
 8007e84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 8007e88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d15b      	bne.n	8007f48 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 8007e90:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d105      	bne.n	8007ea2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8007e96:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d102      	bne.n	8007ea2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 8007e9c:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d052      	beq.n	8007f48 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8007ea2:	f107 030c 	add.w	r3, r7, #12
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	2102      	movs	r1, #2
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff fb26 	bl	80074fc <get_sequence_step_timeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 8007eb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 8007ebe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ec2:	e07d      	b.n	8007fc0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8007ec4:	7c3b      	ldrb	r3, [r7, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00f      	beq.n	8007eea <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8007eca:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ece:	4413      	add	r3, r2
 8007ed0:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d204      	bcs.n	8007ee4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8007eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ee2:	e002      	b.n	8007eea <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ee4:	23fc      	movs	r3, #252	; 0xfc
 8007ee6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8007eea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d002      	beq.n	8007ef8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 8007ef2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ef6:	e063      	b.n	8007fc0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8007ef8:	7cbb      	ldrb	r3, [r7, #18]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d011      	beq.n	8007f22 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	4413      	add	r3, r2
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d204      	bcs.n	8007f1a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007f10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f18:	e016      	b.n	8007f48 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f1a:	23fc      	movs	r3, #252	; 0xfc
 8007f1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007f20:	e012      	b.n	8007f48 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8007f22:	7c7b      	ldrb	r3, [r7, #17]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00f      	beq.n	8007f48 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f2c:	4413      	add	r3, r2
 8007f2e:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d204      	bcs.n	8007f42 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007f38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f40:	e002      	b.n	8007f48 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f42:	23fc      	movs	r3, #252	; 0xfc
 8007f44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007f48:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 8007f50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f54:	e034      	b.n	8007fc0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8007f56:	7cfb      	ldrb	r3, [r7, #19]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d019      	beq.n	8007f90 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8007f5c:	f107 0308 	add.w	r3, r7, #8
 8007f60:	461a      	mov	r2, r3
 8007f62:	2103      	movs	r1, #3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff fac9 	bl	80074fc <get_sequence_step_timeout>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	6a3a      	ldr	r2, [r7, #32]
 8007f74:	4413      	add	r3, r2
 8007f76:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d204      	bcs.n	8007f8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f88:	e002      	b.n	8007f90 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f8a:	23fc      	movs	r3, #252	; 0xfc
 8007f8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007f90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d111      	bne.n	8007fbc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 8007f98:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00e      	beq.n	8007fbc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 8007f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	63bb      	str	r3, [r7, #56]	; 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8007fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fa8:	2104      	movs	r1, #4
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7ff fb87 	bl	80076be <set_sequence_step_timeout>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007fbc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3740      	adds	r7, #64	; 0x40
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b090      	sub	sp, #64	; 0x40
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007fd8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007fdc:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007fde:	f240 7376 	movw	r3, #1910	; 0x776
 8007fe2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8007fe4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007fe8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007fea:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007fee:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8007ff0:	f240 234e 	movw	r3, #590	; 0x24e
 8007ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8007ff6:	f240 23b2 	movw	r3, #690	; 0x2b2
 8007ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007ffc:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008002:	f240 2326 	movw	r3, #550	; 0x226
 8008006:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008008:	2300      	movs	r3, #0
 800800a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800800c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800800e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008010:	441a      	add	r2, r3
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008016:	f107 0318 	add.w	r3, r7, #24
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7fc fd8b 	bl	8004b38 <VL53L0X_GetSequenceStepEnables>
 8008022:	4603      	mov	r3, r0
 8008024:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008028:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008030:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008034:	e075      	b.n	8008122 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8008036:	7e3b      	ldrb	r3, [r7, #24]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d105      	bne.n	8008048 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800803c:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800803e:	2b00      	cmp	r3, #0
 8008040:	d102      	bne.n	8008048 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8008042:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8008044:	2b00      	cmp	r3, #0
 8008046:	d030      	beq.n	80080aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8008048:	f107 0310 	add.w	r3, r7, #16
 800804c:	461a      	mov	r2, r3
 800804e:	2102      	movs	r1, #2
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff fa53 	bl	80074fc <get_sequence_step_timeout>
 8008056:	4603      	mov	r3, r0
 8008058:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800805c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008060:	2b00      	cmp	r3, #0
 8008062:	d122      	bne.n	80080aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8008064:	7e3b      	ldrb	r3, [r7, #24]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d007      	beq.n	800807a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800806e:	6939      	ldr	r1, [r7, #16]
 8008070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008072:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008074:	441a      	add	r2, r3
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800807a:	7ebb      	ldrb	r3, [r7, #26]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d009      	beq.n	8008094 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8008084:	6939      	ldr	r1, [r7, #16]
 8008086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008088:	440b      	add	r3, r1
 800808a:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800808c:	441a      	add	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	e00a      	b.n	80080aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8008094:	7e7b      	ldrb	r3, [r7, #25]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d007      	beq.n	80080aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800809e:	6939      	ldr	r1, [r7, #16]
 80080a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80080a4:	441a      	add	r2, r3
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80080aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d114      	bne.n	80080dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80080b2:	7efb      	ldrb	r3, [r7, #27]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d011      	beq.n	80080dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80080b8:	f107 030c 	add.w	r3, r7, #12
 80080bc:	461a      	mov	r2, r3
 80080be:	2103      	movs	r1, #3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7ff fa1b 	bl	80074fc <get_sequence_step_timeout>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80080d0:	68f9      	ldr	r1, [r7, #12]
 80080d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d4:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80080d6:	441a      	add	r2, r3
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80080dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d114      	bne.n	800810e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80080e4:	7f3b      	ldrb	r3, [r7, #28]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d011      	beq.n	800810e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80080ea:	f107 0314 	add.w	r3, r7, #20
 80080ee:	461a      	mov	r2, r3
 80080f0:	2104      	movs	r1, #4
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7ff fa02 	bl	80074fc <get_sequence_step_timeout>
 80080f8:	4603      	mov	r3, r0
 80080fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8008102:	6979      	ldr	r1, [r7, #20]
 8008104:	6a3b      	ldr	r3, [r7, #32]
 8008106:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008108:	441a      	add	r2, r3
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800810e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008112:	2b00      	cmp	r3, #0
 8008114:	d103      	bne.n	800811e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800811e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008122:	4618      	mov	r0, r3
 8008124:	3740      	adds	r7, #64	; 0x40
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008136:	2300      	movs	r3, #0
 8008138:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800813e:	e0c6      	b.n	80082ce <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	4413      	add	r3, r2
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	74fb      	strb	r3, [r7, #19]
		Index++;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	3301      	adds	r3, #1
 800814e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8008150:	7cfb      	ldrb	r3, [r7, #19]
 8008152:	2bff      	cmp	r3, #255	; 0xff
 8008154:	f040 808d 	bne.w	8008272 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	4413      	add	r3, r2
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	747b      	strb	r3, [r7, #17]
			Index++;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	3301      	adds	r3, #1
 8008166:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8008168:	7c7b      	ldrb	r3, [r7, #17]
 800816a:	2b03      	cmp	r3, #3
 800816c:	d87e      	bhi.n	800826c <VL53L0X_load_tuning_settings+0x140>
 800816e:	a201      	add	r2, pc, #4	; (adr r2, 8008174 <VL53L0X_load_tuning_settings+0x48>)
 8008170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008174:	08008185 	.word	0x08008185
 8008178:	080081bf 	.word	0x080081bf
 800817c:	080081f9 	.word	0x080081f9
 8008180:	08008233 	.word	0x08008233
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	4413      	add	r3, r2
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	743b      	strb	r3, [r7, #16]
				Index++;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	3301      	adds	r3, #1
 8008192:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	4413      	add	r3, r2
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	3301      	adds	r3, #1
 80081a2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80081a4:	7c3b      	ldrb	r3, [r7, #16]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	4413      	add	r3, r2
 80081b2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	89ba      	ldrh	r2, [r7, #12]
 80081b8:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 80081bc:	e087      	b.n	80082ce <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	4413      	add	r3, r2
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	743b      	strb	r3, [r7, #16]
				Index++;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	3301      	adds	r3, #1
 80081cc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	4413      	add	r3, r2
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	73fb      	strb	r3, [r7, #15]
				Index++;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	3301      	adds	r3, #1
 80081dc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80081de:	7c3b      	ldrb	r3, [r7, #16]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	021b      	lsls	r3, r3, #8
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	4413      	add	r3, r2
 80081ec:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	89ba      	ldrh	r2, [r7, #12]
 80081f2:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 80081f6:	e06a      	b.n	80082ce <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	4413      	add	r3, r2
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	743b      	strb	r3, [r7, #16]
				Index++;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	3301      	adds	r3, #1
 8008206:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	4413      	add	r3, r2
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	3301      	adds	r3, #1
 8008216:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008218:	7c3b      	ldrb	r3, [r7, #16]
 800821a:	b29b      	uxth	r3, r3
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	b29a      	uxth	r2, r3
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	b29b      	uxth	r3, r3
 8008224:	4413      	add	r3, r2
 8008226:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	89ba      	ldrh	r2, [r7, #12]
 800822c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 8008230:	e04d      	b.n	80082ce <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	683a      	ldr	r2, [r7, #0]
 8008236:	4413      	add	r3, r2
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	743b      	strb	r3, [r7, #16]
				Index++;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	3301      	adds	r3, #1
 8008240:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	4413      	add	r3, r2
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	3301      	adds	r3, #1
 8008250:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008252:	7c3b      	ldrb	r3, [r7, #16]
 8008254:	b29b      	uxth	r3, r3
 8008256:	021b      	lsls	r3, r3, #8
 8008258:	b29a      	uxth	r2, r3
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	b29b      	uxth	r3, r3
 800825e:	4413      	add	r3, r2
 8008260:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	89ba      	ldrh	r2, [r7, #12]
 8008266:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 800826a:	e030      	b.n	80082ce <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800826c:	23fc      	movs	r3, #252	; 0xfc
 800826e:	77fb      	strb	r3, [r7, #31]
 8008270:	e02d      	b.n	80082ce <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8008272:	7cfb      	ldrb	r3, [r7, #19]
 8008274:	2b04      	cmp	r3, #4
 8008276:	d828      	bhi.n	80082ca <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	4413      	add	r3, r2
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	74bb      	strb	r3, [r7, #18]
			Index++;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	3301      	adds	r3, #1
 8008286:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8008288:	2300      	movs	r3, #0
 800828a:	61bb      	str	r3, [r7, #24]
 800828c:	e00f      	b.n	80082ae <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	683a      	ldr	r2, [r7, #0]
 8008292:	4413      	add	r3, r2
 8008294:	7819      	ldrb	r1, [r3, #0]
 8008296:	f107 0208 	add.w	r2, r7, #8
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	4413      	add	r3, r2
 800829e:	460a      	mov	r2, r1
 80082a0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	3301      	adds	r3, #1
 80082a6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	3301      	adds	r3, #1
 80082ac:	61bb      	str	r3, [r7, #24]
 80082ae:	7cfb      	ldrb	r3, [r7, #19]
 80082b0:	69ba      	ldr	r2, [r7, #24]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	dbeb      	blt.n	800828e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80082b6:	7cfb      	ldrb	r3, [r7, #19]
 80082b8:	f107 0208 	add.w	r2, r7, #8
 80082bc:	7cb9      	ldrb	r1, [r7, #18]
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fdae 	bl	8008e20 <VL53L0X_WriteMulti>
 80082c4:	4603      	mov	r3, r0
 80082c6:	77fb      	strb	r3, [r7, #31]
 80082c8:	e001      	b.n	80082ce <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80082ca:	23fc      	movs	r3, #252	; 0xfc
 80082cc:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	4413      	add	r3, r2
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <VL53L0X_load_tuning_settings+0x1b8>
 80082da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f43f af2e 	beq.w	8008140 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80082e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3720      	adds	r7, #32
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b088      	sub	sp, #32
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082fc:	2300      	movs	r3, #0
 80082fe:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8008306:	f107 0313 	add.w	r3, r7, #19
 800830a:	4619      	mov	r1, r3
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f7fc fc9f 	bl	8004c50 <VL53L0X_GetXTalkCompensationEnable>
 8008312:	4603      	mov	r3, r0
 8008314:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8008316:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d111      	bne.n	8008342 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800831e:	7cfb      	ldrb	r3, [r7, #19]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00e      	beq.n	8008342 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	8a9b      	ldrh	r3, [r3, #20]
 800832e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	fb02 f303 	mul.w	r3, r2, r3
 8008336:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	3380      	adds	r3, #128	; 0x80
 800833c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8008342:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3720      	adds	r7, #32
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b086      	sub	sp, #24
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800835a:	2300      	movs	r3, #0
 800835c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8008366:	f107 0310 	add.w	r3, r7, #16
 800836a:	461a      	mov	r2, r3
 800836c:	68b9      	ldr	r1, [r7, #8]
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f7ff ffbe 	bl	80082f0 <VL53L0X_get_total_xtalk_rate>
 8008374:	4603      	mov	r3, r0
 8008376:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8008378:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d105      	bne.n	800838c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	441a      	add	r2, r3
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	601a      	str	r2, [r3, #0]

	return Status;
 800838c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 8008398:	b084      	sub	sp, #16
 800839a:	b480      	push	{r7}
 800839c:	b085      	sub	sp, #20
 800839e:	af00      	add	r7, sp, #0
 80083a0:	f107 0c18 	add.w	ip, r7, #24
 80083a4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083a8:	2300      	movs	r3, #0
 80083aa:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60bb      	str	r3, [r7, #8]
	int index = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 80083b8:	2300      	movs	r3, #0
 80083ba:	607b      	str	r3, [r7, #4]
 80083bc:	e00d      	b.n	80083da <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f107 0218 	add.w	r2, r7, #24
 80083c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d802      	bhi.n	80083d4 <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	60bb      	str	r3, [r7, #8]
			break;
 80083d2:	e006      	b.n	80083e2 <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	3301      	adds	r3, #1
 80083d8:	607b      	str	r3, [r7, #4]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083de:	429a      	cmp	r2, r3
 80083e0:	d8ed      	bhi.n	80083be <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 80083e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d105      	bne.n	80083f6 <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 80083ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083ec:	3b01      	subs	r3, #1
 80083ee:	60bb      	str	r3, [r7, #8]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	e008      	b.n	8008408 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d102      	bne.n	8008402 <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	e002      	b.n	8008408 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	3b01      	subs	r3, #1
 8008406:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800840c:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008412:	601a      	str	r2, [r3, #0]

	return Status;
 8008414:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	b004      	add	sp, #16
 8008424:	4770      	bx	lr

08008426 <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 8008426:	b5b0      	push	{r4, r5, r7, lr}
 8008428:	b0ba      	sub	sp, #232	; 0xe8
 800842a:	af0e      	add	r7, sp, #56	; 0x38
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008432:	2300      	movs	r3, #0
 8008434:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 8008438:	2300      	movs	r3, #0
 800843a:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 800843c:	2300      	movs	r3, #0
 800843e:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008440:	f107 031c 	add.w	r3, r7, #28
 8008444:	4619      	mov	r1, r3
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f7fc f918 	bl	800467c <VL53L0X_GetDeviceParameters>
 800844c:	4603      	mov	r3, r0
 800844e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 8008452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	429a      	cmp	r2, r3
 8008458:	d803      	bhi.n	8008462 <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 800845a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800845c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008460:	e081      	b.n	8008566 <VL53L0X_calc_dmax+0x140>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 8008462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 8008464:	68ba      	ldr	r2, [r7, #8]
 8008466:	429a      	cmp	r2, r3
 8008468:	d304      	bcc.n	8008474 <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 800846a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800846e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008472:	e078      	b.n	8008566 <VL53L0X_calc_dmax+0x140>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 8008474:	f107 0314 	add.w	r3, r7, #20
 8008478:	930d      	str	r3, [sp, #52]	; 0x34
 800847a:	f107 0318 	add.w	r3, r7, #24
 800847e:	930c      	str	r3, [sp, #48]	; 0x30
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	930b      	str	r3, [sp, #44]	; 0x2c
 8008484:	2307      	movs	r3, #7
 8008486:	930a      	str	r3, [sp, #40]	; 0x28
 8008488:	466d      	mov	r5, sp
 800848a:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800848e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008496:	e894 0003 	ldmia.w	r4, {r0, r1}
 800849a:	e885 0003 	stmia.w	r5, {r0, r1}
 800849e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80084a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80084a4:	f7ff ff78 	bl	8008398 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 80084a8:	69ba      	ldr	r2, [r7, #24]
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d10a      	bne.n	80084c6 <VL53L0X_calc_dmax+0xa0>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	3314      	adds	r3, #20
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80084ba:	4413      	add	r3, r2
 80084bc:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 80084c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084c4:	e04f      	b.n	8008566 <VL53L0X_calc_dmax+0x140>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	330e      	adds	r3, #14
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80084d0:	4413      	add	r3, r2
 80084d2:	f853 3c90 	ldr.w	r3, [r3, #-144]
 80084d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	330e      	adds	r3, #14
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80084e4:	4413      	add	r3, r2
 80084e6:	f853 3c90 	ldr.w	r3, [r3, #-144]
 80084ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	3314      	adds	r3, #20
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80084f8:	4413      	add	r3, r2
 80084fa:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 80084fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	3314      	adds	r3, #20
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800850c:	4413      	add	r3, r2
 800850e:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8008512:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if ((amb1 - amb0) != 0) {
 8008516:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800851a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800851e:	429a      	cmp	r2, r3
 8008520:	d01d      	beq.n	800855e <VL53L0X_calc_dmax+0x138>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 8008522:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008526:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800852a:	1ad2      	subs	r2, r2, r3
 800852c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8008530:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008534:	1acb      	subs	r3, r1, r3
 8008536:	0a1b      	lsrs	r3, r3, #8
 8008538:	fbb2 f3f3 	udiv	r3, r2, r3
 800853c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 8008540:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 8008548:	0a1b      	lsrs	r3, r3, #8
 800854a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800854e:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 8008552:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008556:	4413      	add	r3, r2
 8008558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800855c:	e003      	b.n	8008566 <VL53L0X_calc_dmax+0x140>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 800855e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 8008566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800856a:	0c1a      	lsrs	r2, r3, #16
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8008570:	f997 30ab 	ldrsb.w	r3, [r7, #171]	; 0xab
}
 8008574:	4618      	mov	r0, r3
 8008576:	37b0      	adds	r7, #176	; 0xb0
 8008578:	46bd      	mov	sp, r7
 800857a:	bdb0      	pop	{r4, r5, r7, pc}

0800857c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b0b0      	sub	sp, #192	; 0xc0
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8008588:	f44f 7348 	mov.w	r3, #800	; 0x320
 800858c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8008590:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008594:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 8008598:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800859c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80085a0:	f241 235c 	movw	r3, #4700	; 0x125c
 80085a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80085a8:	4b98      	ldr	r3, [pc, #608]	; (800880c <VL53L0X_calc_sigma_estimate+0x290>)
 80085aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80085ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80085b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80085b6:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80085ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80085be:	fbb2 f3f3 	udiv	r3, r2, r3
 80085c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80085c6:	4b92      	ldr	r3, [pc, #584]	; (8008810 <VL53L0X_calc_sigma_estimate+0x294>)
 80085c8:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 80085ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ce:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 80085d0:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80085d4:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 80085d6:	f240 6377 	movw	r3, #1655	; 0x677
 80085da:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085dc:	2300      	movs	r3, #0
 80085de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085f0:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80085f4:	0c1b      	lsrs	r3, r3, #16
 80085f6:	66bb      	str	r3, [r7, #104]	; 0x68

	Status = VL53L0X_get_total_signal_rate(
 80085f8:	f107 0314 	add.w	r3, r7, #20
 80085fc:	461a      	mov	r2, r3
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f7ff fea4 	bl	800834e <VL53L0X_get_total_signal_rate>
 8008606:	4603      	mov	r3, r0
 8008608:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800860c:	f107 0318 	add.w	r3, r7, #24
 8008610:	461a      	mov	r2, r3
 8008612:	68b9      	ldr	r1, [r7, #8]
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f7ff fe6b 	bl	80082f0 <VL53L0X_get_total_xtalk_rate>
 800861a:	4603      	mov	r3, r0
 800861c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008626:	fb02 f303 	mul.w	r3, r2, r3
 800862a:	667b      	str	r3, [r7, #100]	; 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800862c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800862e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008632:	0c1b      	lsrs	r3, r3, #16
 8008634:	667b      	str	r3, [r7, #100]	; 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800863c:	fb02 f303 	mul.w	r3, r2, r3
 8008640:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008644:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800864a:	429a      	cmp	r2, r3
 800864c:	d902      	bls.n	8008654 <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800864e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008650:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008654:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008658:	2b00      	cmp	r3, #0
 800865a:	d160      	bne.n	800871e <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008662:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 800866c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008670:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8008674:	461a      	mov	r2, r3
 8008676:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800867a:	68f8      	ldr	r0, [r7, #12]
 800867c:	f7fe feea 	bl	8007454 <VL53L0X_calc_timeout_mclks>
 8008680:	65f8      	str	r0, [r7, #92]	; 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8008688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8008692:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008696:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800869a:	461a      	mov	r2, r3
 800869c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f7fe fed7 	bl	8007454 <VL53L0X_calc_timeout_mclks>
 80086a6:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80086a8:	2303      	movs	r3, #3
 80086aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 80086ae:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80086b2:	2b08      	cmp	r3, #8
 80086b4:	d102      	bne.n	80086bc <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 80086b6:	2302      	movs	r3, #2
 80086b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80086bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086c0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80086c2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80086c6:	fb02 f303 	mul.w	r3, r2, r3
 80086ca:	02db      	lsls	r3, r3, #11
 80086cc:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80086ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086d0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80086d4:	4a4f      	ldr	r2, [pc, #316]	; (8008814 <VL53L0X_calc_sigma_estimate+0x298>)
 80086d6:	fba2 2303 	umull	r2, r3, r2, r3
 80086da:	099b      	lsrs	r3, r3, #6
 80086dc:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 80086de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80086e2:	fb02 f303 	mul.w	r3, r2, r3
 80086e6:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80086e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80086ee:	4a49      	ldr	r2, [pc, #292]	; (8008814 <VL53L0X_calc_sigma_estimate+0x298>)
 80086f0:	fba2 2303 	umull	r2, r3, r2, r3
 80086f4:	099b      	lsrs	r3, r3, #6
 80086f6:	653b      	str	r3, [r7, #80]	; 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	3380      	adds	r3, #128	; 0x80
 80086fc:	0a1b      	lsrs	r3, r3, #8
 80086fe:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008704:	fb02 f303 	mul.w	r3, r2, r3
 8008708:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800870c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008710:	3380      	adds	r3, #128	; 0x80
 8008712:	0a1b      	lsrs	r3, r3, #8
 8008714:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	021b      	lsls	r3, r3, #8
 800871c:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800871e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008722:	2b00      	cmp	r3, #0
 8008724:	d002      	beq.n	800872c <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 8008726:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800872a:	e14a      	b.n	80089c2 <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 800872c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800872e:	2b00      	cmp	r3, #0
 8008730:	d109      	bne.n	8008746 <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008738:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008740:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008744:	e13b      	b.n	80089be <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 8008746:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800874a:	2b00      	cmp	r3, #0
 800874c:	d102      	bne.n	8008754 <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 800874e:	2301      	movs	r3, #1
 8008750:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8008754:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008758:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800875a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800875c:	041a      	lsls	r2, r3, #16
 800875e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008760:	fbb2 f3f3 	udiv	r3, r2, r3
 8008764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8008768:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800876c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008770:	429a      	cmp	r2, r3
 8008772:	d903      	bls.n	800877c <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008774:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800877c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008780:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008784:	fb02 f303 	mul.w	r3, r2, r3
 8008788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800878c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008790:	4613      	mov	r3, r2
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	4413      	add	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4618      	mov	r0, r3
 800879a:	f7fe f8b5 	bl	8006908 <VL53L0X_isqrt>
 800879e:	4603      	mov	r3, r0
 80087a0:	005b      	lsls	r3, r3, #1
 80087a2:	64bb      	str	r3, [r7, #72]	; 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	891b      	ldrh	r3, [r3, #8]
 80087a8:	461a      	mov	r2, r3
 80087aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087ac:	fb02 f303 	mul.w	r3, r2, r3
 80087b0:	647b      	str	r3, [r7, #68]	; 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80087b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087b4:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 80087b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087ba:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80087bc:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 80087be:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 80087c2:	4a14      	ldr	r2, [pc, #80]	; (8008814 <VL53L0X_calc_sigma_estimate+0x298>)
 80087c4:	fba2 2303 	umull	r2, r3, r2, r3
 80087c8:	099b      	lsrs	r3, r3, #6
 80087ca:	643b      	str	r3, [r7, #64]	; 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 80087cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087ce:	041b      	lsls	r3, r3, #16
 80087d0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80087d4:	4a0f      	ldr	r2, [pc, #60]	; (8008814 <VL53L0X_calc_sigma_estimate+0x298>)
 80087d6:	fba2 2303 	umull	r2, r3, r2, r3
 80087da:	099b      	lsrs	r3, r3, #6
 80087dc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 80087de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e0:	021b      	lsls	r3, r3, #8
 80087e2:	643b      	str	r3, [r7, #64]	; 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80087e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	bfb8      	it	lt
 80087f0:	425b      	neglt	r3, r3
 80087f2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	021b      	lsls	r3, r3, #8
 80087f8:	63bb      	str	r3, [r7, #56]	; 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	7e1b      	ldrb	r3, [r3, #24]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 8008802:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008806:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800880a:	e032      	b.n	8008872 <VL53L0X_calc_sigma_estimate+0x2f6>
 800880c:	028f87ae 	.word	0x028f87ae
 8008810:	0006999a 	.word	0x0006999a
 8008814:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 8008818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800881a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800881e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8008826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008828:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800882c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008830:	fb02 f303 	mul.w	r3, r2, r3
 8008834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8008838:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800883c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800883e:	4413      	add	r3, r2
 8008840:	0c1b      	lsrs	r3, r3, #16
 8008842:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8008846:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800884a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800884e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 8008852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008856:	085b      	lsrs	r3, r3, #1
 8008858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800885c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008860:	fb03 f303 	mul.w	r3, r3, r3
 8008864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8008868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800886c:	0b9b      	lsrs	r3, r3, #14
 800886e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008878:	fb02 f303 	mul.w	r3, r2, r3
 800887c:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800887e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008880:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008884:	0c1b      	lsrs	r3, r3, #16
 8008886:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8008888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888a:	fb03 f303 	mul.w	r3, r3, r3
 800888e:	637b      	str	r3, [r7, #52]	; 0x34

		sqr2 = sigmaEstimateP2;
 8008890:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008894:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800889c:	0c1b      	lsrs	r3, r3, #16
 800889e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	fb03 f303 	mul.w	r3, r3, r3
 80088a6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80088a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	4413      	add	r3, r2
 80088ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80088b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088b2:	f7fe f829 	bl	8006908 <VL53L0X_isqrt>
 80088b6:	62b8      	str	r0, [r7, #40]	; 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 80088b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ba:	041b      	lsls	r3, r3, #16
 80088bc:	62bb      	str	r3, [r7, #40]	; 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	3332      	adds	r3, #50	; 0x32
 80088c2:	4a42      	ldr	r2, [pc, #264]	; (80089cc <VL53L0X_calc_sigma_estimate+0x450>)
 80088c4:	fba2 2303 	umull	r2, r3, r2, r3
 80088c8:	095a      	lsrs	r2, r3, #5
 80088ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80088d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088d8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80088dc:	fb02 f303 	mul.w	r3, r2, r3
 80088e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80088e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088e8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80088ec:	3308      	adds	r3, #8
 80088ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80088f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80088f6:	4a36      	ldr	r2, [pc, #216]	; (80089d0 <VL53L0X_calc_sigma_estimate+0x454>)
 80088f8:	fba2 2303 	umull	r2, r3, r2, r3
 80088fc:	0b5b      	lsrs	r3, r3, #13
 80088fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008906:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800890a:	429a      	cmp	r2, r3
 800890c:	d903      	bls.n	8008916 <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 800890e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008912:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 8008916:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800891a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800891e:	4413      	add	r3, r2
 8008920:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8008924:	4a2b      	ldr	r2, [pc, #172]	; (80089d4 <VL53L0X_calc_sigma_estimate+0x458>)
 8008926:	fba2 2303 	umull	r2, r3, r2, r3
 800892a:	099b      	lsrs	r3, r3, #6
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8008932:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008936:	441a      	add	r2, r3
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	fbb2 f3f3 	udiv	r3, r2, r3
 800893e:	4618      	mov	r0, r3
 8008940:	f7fd ffe2 	bl	8006908 <VL53L0X_isqrt>
 8008944:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	021b      	lsls	r3, r3, #8
 800894a:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008952:	4a20      	ldr	r2, [pc, #128]	; (80089d4 <VL53L0X_calc_sigma_estimate+0x458>)
 8008954:	fba2 2303 	umull	r2, r3, r2, r3
 8008958:	099b      	lsrs	r3, r3, #6
 800895a:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800895c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008960:	fb03 f303 	mul.w	r3, r3, r3
 8008964:	637b      	str	r3, [r7, #52]	; 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8008966:	6a3b      	ldr	r3, [r7, #32]
 8008968:	fb03 f303 	mul.w	r3, r3, r3
 800896c:	633b      	str	r3, [r7, #48]	; 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800896e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	4413      	add	r3, r2
 8008974:	4618      	mov	r0, r3
 8008976:	f7fd ffc7 	bl	8006908 <VL53L0X_isqrt>
 800897a:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008982:	fb02 f303 	mul.w	r3, r2, r3
 8008986:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800898a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <VL53L0X_calc_sigma_estimate+0x428>
 8008990:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008994:	2b00      	cmp	r3, #0
 8008996:	d005      	beq.n	80089a4 <VL53L0X_calc_sigma_estimate+0x428>
 8008998:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800899c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d903      	bls.n	80089ac <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 80089a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80089a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80089b2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80089be:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	37c0      	adds	r7, #192	; 0xc0
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	51eb851f 	.word	0x51eb851f
 80089d0:	d1b71759 	.word	0xd1b71759
 80089d4:	10624dd3 	.word	0x10624dd3

080089d8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b090      	sub	sp, #64	; 0x40
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	607a      	str	r2, [r7, #4]
 80089e2:	461a      	mov	r2, r3
 80089e4:	460b      	mov	r3, r1
 80089e6:	72fb      	strb	r3, [r7, #11]
 80089e8:	4613      	mov	r3, r2
 80089ea:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089ec:	2300      	movs	r3, #0
 80089ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8008a16:	2300      	movs	r3, #0
 8008a18:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8008a22:	2300      	movs	r3, #0
 8008a24:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8008a26:	2300      	movs	r3, #0
 8008a28:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008a2a:	7afb      	ldrb	r3, [r7, #11]
 8008a2c:	10db      	asrs	r3, r3, #3
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	f003 030f 	and.w	r3, r3, #15
 8008a34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008a38:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d017      	beq.n	8008a70 <VL53L0X_get_pal_range_status+0x98>
 8008a40:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008a44:	2b05      	cmp	r3, #5
 8008a46:	d013      	beq.n	8008a70 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008a48:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008a4c:	2b07      	cmp	r3, #7
 8008a4e:	d00f      	beq.n	8008a70 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008a50:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008a54:	2b0c      	cmp	r3, #12
 8008a56:	d00b      	beq.n	8008a70 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008a58:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008a5c:	2b0d      	cmp	r3, #13
 8008a5e:	d007      	beq.n	8008a70 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008a60:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008a64:	2b0e      	cmp	r3, #14
 8008a66:	d003      	beq.n	8008a70 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008a68:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008a6c:	2b0f      	cmp	r3, #15
 8008a6e:	d103      	bne.n	8008a78 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008a70:	2301      	movs	r3, #1
 8008a72:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008a76:	e002      	b.n	8008a7e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008a7e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d109      	bne.n	8008a9a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008a86:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f7fc f9b2 	bl	8004df8 <VL53L0X_GetLimitCheckEnable>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8008a9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d03c      	beq.n	8008b1c <VL53L0X_get_pal_range_status+0x144>
 8008aa2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d138      	bne.n	8008b1c <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8008aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aae:	461a      	mov	r2, r3
 8008ab0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f7ff fd62 	bl	800857c <VL53L0X_calc_sigma_estimate>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 8008abe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10a      	bne.n	8008adc <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 8008ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	f107 0210 	add.w	r2, r7, #16
 8008ace:	4619      	mov	r1, r3
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f7ff fca8 	bl	8008426 <VL53L0X_calc_dmax>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8008adc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d103      	bne.n	8008aec <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aea:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008aec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d113      	bne.n	8008b1c <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008af4:	f107 0320 	add.w	r3, r7, #32
 8008af8:	461a      	mov	r2, r3
 8008afa:	2100      	movs	r1, #0
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f7fc fa01 	bl	8004f04 <VL53L0X_GetLimitCheckValue>
 8008b02:	4603      	mov	r3, r0
 8008b04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d006      	beq.n	8008b1c <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 8008b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b10:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d902      	bls.n	8008b1c <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 8008b16:	2301      	movs	r3, #1
 8008b18:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008b1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d109      	bne.n	8008b38 <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008b24:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008b28:	461a      	mov	r2, r3
 8008b2a:	2102      	movs	r1, #2
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f7fc f963 	bl	8004df8 <VL53L0X_GetLimitCheckEnable>
 8008b32:	4603      	mov	r3, r0
 8008b34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008b38:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d044      	beq.n	8008bca <VL53L0X_get_pal_range_status+0x1f2>
 8008b40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d140      	bne.n	8008bca <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008b48:	f107 031c 	add.w	r3, r7, #28
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	2102      	movs	r1, #2
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f7fc f9d7 	bl	8004f04 <VL53L0X_GetLimitCheckValue>
 8008b56:	4603      	mov	r3, r0
 8008b58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008b5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d107      	bne.n	8008b74 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008b64:	2201      	movs	r2, #1
 8008b66:	21ff      	movs	r1, #255	; 0xff
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 f9b5 	bl	8008ed8 <VL53L0X_WrByte>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008b74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d109      	bne.n	8008b90 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 8008b7c:	f107 0316 	add.w	r3, r7, #22
 8008b80:	461a      	mov	r2, r3
 8008b82:	21b6      	movs	r1, #182	; 0xb6
 8008b84:	68f8      	ldr	r0, [r7, #12]
 8008b86:	f000 fa53 	bl	8009030 <VL53L0X_RdWord>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8008b90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d107      	bne.n	8008ba8 <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008b98:	2200      	movs	r2, #0
 8008b9a:	21ff      	movs	r1, #255	; 0xff
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f000 f99b 	bl	8008ed8 <VL53L0X_WrByte>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008ba8:	8afb      	ldrh	r3, [r7, #22]
 8008baa:	025b      	lsls	r3, r3, #9
 8008bac:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bb2:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d006      	beq.n	8008bca <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008bbc:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d902      	bls.n	8008bca <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008bca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d109      	bne.n	8008be6 <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	2103      	movs	r1, #3
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f7fc f90c 	bl	8004df8 <VL53L0X_GetLimitCheckEnable>
 8008be0:	4603      	mov	r3, r0
 8008be2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008be6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d023      	beq.n	8008c36 <VL53L0X_get_pal_range_status+0x25e>
 8008bee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d11f      	bne.n	8008c36 <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008bf6:	893b      	ldrh	r3, [r7, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d102      	bne.n	8008c02 <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8008c00:	e005      	b.n	8008c0e <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	021a      	lsls	r2, r3, #8
 8008c06:	893b      	ldrh	r3, [r7, #8]
 8008c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008c0e:	f107 0318 	add.w	r3, r7, #24
 8008c12:	461a      	mov	r2, r3
 8008c14:	2103      	movs	r1, #3
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f7fc f974 	bl	8004f04 <VL53L0X_GetLimitCheckValue>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d006      	beq.n	8008c36 <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008c28:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d202      	bcs.n	8008c36 <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008c30:	2301      	movs	r3, #1
 8008c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008c36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d14a      	bne.n	8008cd4 <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 8008c3e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d103      	bne.n	8008c4e <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 8008c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c48:	22ff      	movs	r2, #255	; 0xff
 8008c4a:	701a      	strb	r2, [r3, #0]
 8008c4c:	e042      	b.n	8008cd4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008c4e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d007      	beq.n	8008c66 <VL53L0X_get_pal_range_status+0x28e>
 8008c56:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d003      	beq.n	8008c66 <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 8008c5e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d103      	bne.n	8008c6e <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8008c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c68:	2205      	movs	r2, #5
 8008c6a:	701a      	strb	r2, [r3, #0]
 8008c6c:	e032      	b.n	8008cd4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 8008c6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008c72:	2b06      	cmp	r3, #6
 8008c74:	d003      	beq.n	8008c7e <VL53L0X_get_pal_range_status+0x2a6>
 8008c76:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008c7a:	2b09      	cmp	r3, #9
 8008c7c:	d103      	bne.n	8008c86 <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8008c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c80:	2204      	movs	r2, #4
 8008c82:	701a      	strb	r2, [r3, #0]
 8008c84:	e026      	b.n	8008cd4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 8008c86:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008c8a:	2b08      	cmp	r3, #8
 8008c8c:	d007      	beq.n	8008c9e <VL53L0X_get_pal_range_status+0x2c6>
 8008c8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008c92:	2b0a      	cmp	r3, #10
 8008c94:	d003      	beq.n	8008c9e <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 8008c96:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d103      	bne.n	8008ca6 <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8008c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca0:	2203      	movs	r2, #3
 8008ca2:	701a      	strb	r2, [r3, #0]
 8008ca4:	e016      	b.n	8008cd4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 8008ca6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008caa:	2b04      	cmp	r3, #4
 8008cac:	d003      	beq.n	8008cb6 <VL53L0X_get_pal_range_status+0x2de>
 8008cae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d103      	bne.n	8008cbe <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8008cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb8:	2202      	movs	r2, #2
 8008cba:	701a      	strb	r2, [r3, #0]
 8008cbc:	e00a      	b.n	8008cd4 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 8008cbe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d103      	bne.n	8008cce <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8008cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cc8:	2201      	movs	r2, #1
 8008cca:	701a      	strb	r2, [r3, #0]
 8008ccc:	e002      	b.n	8008cd4 <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8008cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008cd4:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8008cd8:	461a      	mov	r2, r3
 8008cda:	2101      	movs	r1, #1
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f7fc f88b 	bl	8004df8 <VL53L0X_GetLimitCheckEnable>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8008ce8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d14f      	bne.n	8008d90 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8008cf0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <VL53L0X_get_pal_range_status+0x328>
 8008cf8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d103      	bne.n	8008d08 <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 8008d00:	2301      	movs	r3, #1
 8008d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d06:	e002      	b.n	8008d0e <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008d14:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008d18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	d003      	beq.n	8008d28 <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008d20:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d103      	bne.n	8008d30 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d2e:	e002      	b.n	8008d36 <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 8008d30:	2300      	movs	r3, #0
 8008d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008d3c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008d40:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <VL53L0X_get_pal_range_status+0x378>
 8008d48:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d103      	bne.n	8008d58 <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008d50:	2301      	movs	r3, #1
 8008d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d56:	e002      	b.n	8008d5e <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008d64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8008d68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d003      	beq.n	8008d78 <VL53L0X_get_pal_range_status+0x3a0>
 8008d70:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d103      	bne.n	8008d80 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d7e:	e002      	b.n	8008d86 <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008d8c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008d90:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3740      	adds	r7, #64	; 0x40
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b088      	sub	sp, #32
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	330a      	adds	r3, #10
 8008dac:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8008dba:	b299      	uxth	r1, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	f7f9 fa42 	bl	8002250 <HAL_I2C_Master_Transmit>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008dd0:	693b      	ldr	r3, [r7, #16]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}

08008dda <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b088      	sub	sp, #32
 8008dde:	af02      	add	r7, sp, #8
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	330a      	adds	r3, #10
 8008dea:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8008df8:	f043 0301 	orr.w	r3, r3, #1
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	b299      	uxth	r1, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	f7f9 fb1e 	bl	800244c <HAL_I2C_Master_Receive>
 8008e10:	4603      	mov	r3, r0
 8008e12:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008e14:	693b      	ldr	r3, [r7, #16]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	607a      	str	r2, [r7, #4]
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e30:	2300      	movs	r3, #0
 8008e32:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	2b3f      	cmp	r3, #63	; 0x3f
 8008e38:	d902      	bls.n	8008e40 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8008e3a:	f06f 0303 	mvn.w	r3, #3
 8008e3e:	e016      	b.n	8008e6e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8008e40:	4a0d      	ldr	r2, [pc, #52]	; (8008e78 <VL53L0X_WriteMulti+0x58>)
 8008e42:	7afb      	ldrb	r3, [r7, #11]
 8008e44:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	6879      	ldr	r1, [r7, #4]
 8008e4a:	480c      	ldr	r0, [pc, #48]	; (8008e7c <VL53L0X_WriteMulti+0x5c>)
 8008e4c:	f000 fbd8 	bl	8009600 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	3301      	adds	r3, #1
 8008e54:	461a      	mov	r2, r3
 8008e56:	4908      	ldr	r1, [pc, #32]	; (8008e78 <VL53L0X_WriteMulti+0x58>)
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f7ff ff9f 	bl	8008d9c <_I2CWrite>
 8008e5e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008e66:	23ec      	movs	r3, #236	; 0xec
 8008e68:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008e6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3718      	adds	r7, #24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	20000888 	.word	0x20000888
 8008e7c:	20000889 	.word	0x20000889

08008e80 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	607a      	str	r2, [r7, #4]
 8008e8a:	603b      	str	r3, [r7, #0]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e90:	2300      	movs	r3, #0
 8008e92:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008e94:	f107 030b 	add.w	r3, r7, #11
 8008e98:	2201      	movs	r2, #1
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f7ff ff7d 	bl	8008d9c <_I2CWrite>
 8008ea2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008eaa:	23ec      	movs	r3, #236	; 0xec
 8008eac:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008eae:	e00c      	b.n	8008eca <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8008eb0:	683a      	ldr	r2, [r7, #0]
 8008eb2:	6879      	ldr	r1, [r7, #4]
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f7ff ff90 	bl	8008dda <_I2CRead>
 8008eba:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d002      	beq.n	8008ec8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008ec2:	23ec      	movs	r3, #236	; 0xec
 8008ec4:	75fb      	strb	r3, [r7, #23]
 8008ec6:	e000      	b.n	8008eca <VL53L0X_ReadMulti+0x4a>
    }
done:
 8008ec8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008eca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3718      	adds	r7, #24
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <VL53L0X_WrByte>:
    return Status;
}



VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008eec:	4a0b      	ldr	r2, [pc, #44]	; (8008f1c <VL53L0X_WrByte+0x44>)
 8008eee:	78fb      	ldrb	r3, [r7, #3]
 8008ef0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8008ef2:	4a0a      	ldr	r2, [pc, #40]	; (8008f1c <VL53L0X_WrByte+0x44>)
 8008ef4:	78bb      	ldrb	r3, [r7, #2]
 8008ef6:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008ef8:	2202      	movs	r2, #2
 8008efa:	4908      	ldr	r1, [pc, #32]	; (8008f1c <VL53L0X_WrByte+0x44>)
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff ff4d 	bl	8008d9c <_I2CWrite>
 8008f02:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008f0a:	23ec      	movs	r3, #236	; 0xec
 8008f0c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	20000888 	.word	0x20000888

08008f20 <VL53L0X_WrWord>:

    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	70fb      	strb	r3, [r7, #3]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f30:	2300      	movs	r3, #0
 8008f32:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008f34:	4a0e      	ldr	r2, [pc, #56]	; (8008f70 <VL53L0X_WrWord+0x50>)
 8008f36:	78fb      	ldrb	r3, [r7, #3]
 8008f38:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8008f3a:	883b      	ldrh	r3, [r7, #0]
 8008f3c:	0a1b      	lsrs	r3, r3, #8
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	4b0b      	ldr	r3, [pc, #44]	; (8008f70 <VL53L0X_WrWord+0x50>)
 8008f44:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8008f46:	883b      	ldrh	r3, [r7, #0]
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	4b09      	ldr	r3, [pc, #36]	; (8008f70 <VL53L0X_WrWord+0x50>)
 8008f4c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008f4e:	2203      	movs	r2, #3
 8008f50:	4907      	ldr	r1, [pc, #28]	; (8008f70 <VL53L0X_WrWord+0x50>)
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f7ff ff22 	bl	8008d9c <_I2CWrite>
 8008f58:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008f60:	23ec      	movs	r3, #236	; 0xec
 8008f62:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3710      	adds	r7, #16
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	20000888 	.word	0x20000888

08008f74 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	4608      	mov	r0, r1
 8008f7e:	4611      	mov	r1, r2
 8008f80:	461a      	mov	r2, r3
 8008f82:	4603      	mov	r3, r0
 8008f84:	70fb      	strb	r3, [r7, #3]
 8008f86:	460b      	mov	r3, r1
 8008f88:	70bb      	strb	r3, [r7, #2]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8008f92:	f107 020e 	add.w	r2, r7, #14
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f81e 	bl	8008fdc <VL53L0X_RdByte>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8008fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d110      	bne.n	8008fce <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8008fac:	7bba      	ldrb	r2, [r7, #14]
 8008fae:	78bb      	ldrb	r3, [r7, #2]
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	787b      	ldrb	r3, [r7, #1]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8008fbc:	7bba      	ldrb	r2, [r7, #14]
 8008fbe:	78fb      	ldrb	r3, [r7, #3]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff ff88 	bl	8008ed8 <VL53L0X_WrByte>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]
 8008fcc:	e000      	b.n	8008fd0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8008fce:	bf00      	nop
done:
    return Status;
 8008fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fea:	2300      	movs	r3, #0
 8008fec:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008fee:	f107 030b 	add.w	r3, r7, #11
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f7ff fed0 	bl	8008d9c <_I2CWrite>
 8008ffc:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009004:	23ec      	movs	r3, #236	; 0xec
 8009006:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009008:	e00c      	b.n	8009024 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800900a:	2201      	movs	r2, #1
 800900c:	6879      	ldr	r1, [r7, #4]
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f7ff fee3 	bl	8008dda <_I2CRead>
 8009014:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800901c:	23ec      	movs	r3, #236	; 0xec
 800901e:	75fb      	strb	r3, [r7, #23]
 8009020:	e000      	b.n	8009024 <VL53L0X_RdByte+0x48>
    }
done:
 8009022:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8009024:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3718      	adds	r7, #24
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <VL53L0X_RdWord>:

    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8009030:	b580      	push	{r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	460b      	mov	r3, r1
 800903a:	607a      	str	r2, [r7, #4]
 800903c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800903e:	2300      	movs	r3, #0
 8009040:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009042:	f107 030b 	add.w	r3, r7, #11
 8009046:	2201      	movs	r2, #1
 8009048:	4619      	mov	r1, r3
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f7ff fea6 	bl	8008d9c <_I2CWrite>
 8009050:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009058:	23ec      	movs	r3, #236	; 0xec
 800905a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800905c:	e017      	b.n	800908e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800905e:	2202      	movs	r2, #2
 8009060:	490e      	ldr	r1, [pc, #56]	; (800909c <VL53L0X_RdWord+0x6c>)
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f7ff feb9 	bl	8008dda <_I2CRead>
 8009068:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009070:	23ec      	movs	r3, #236	; 0xec
 8009072:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009074:	e00b      	b.n	800908e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8009076:	4b09      	ldr	r3, [pc, #36]	; (800909c <VL53L0X_RdWord+0x6c>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	b29b      	uxth	r3, r3
 800907c:	021b      	lsls	r3, r3, #8
 800907e:	b29a      	uxth	r2, r3
 8009080:	4b06      	ldr	r3, [pc, #24]	; (800909c <VL53L0X_RdWord+0x6c>)
 8009082:	785b      	ldrb	r3, [r3, #1]
 8009084:	b29b      	uxth	r3, r3
 8009086:	4413      	add	r3, r2
 8009088:	b29a      	uxth	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800908e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20000888 	.word	0x20000888

080090a0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	460b      	mov	r3, r1
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090ae:	2300      	movs	r3, #0
 80090b0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80090b2:	f107 030b 	add.w	r3, r7, #11
 80090b6:	2201      	movs	r2, #1
 80090b8:	4619      	mov	r1, r3
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f7ff fe6e 	bl	8008d9c <_I2CWrite>
 80090c0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80090c8:	23ec      	movs	r3, #236	; 0xec
 80090ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 80090cc:	e01b      	b.n	8009106 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80090ce:	2204      	movs	r2, #4
 80090d0:	4910      	ldr	r1, [pc, #64]	; (8009114 <VL53L0X_RdDWord+0x74>)
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f7ff fe81 	bl	8008dda <_I2CRead>
 80090d8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80090e0:	23ec      	movs	r3, #236	; 0xec
 80090e2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80090e4:	e00f      	b.n	8009106 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80090e6:	4b0b      	ldr	r3, [pc, #44]	; (8009114 <VL53L0X_RdDWord+0x74>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	061a      	lsls	r2, r3, #24
 80090ec:	4b09      	ldr	r3, [pc, #36]	; (8009114 <VL53L0X_RdDWord+0x74>)
 80090ee:	785b      	ldrb	r3, [r3, #1]
 80090f0:	041b      	lsls	r3, r3, #16
 80090f2:	441a      	add	r2, r3
 80090f4:	4b07      	ldr	r3, [pc, #28]	; (8009114 <VL53L0X_RdDWord+0x74>)
 80090f6:	789b      	ldrb	r3, [r3, #2]
 80090f8:	021b      	lsls	r3, r3, #8
 80090fa:	4413      	add	r3, r2
 80090fc:	4a05      	ldr	r2, [pc, #20]	; (8009114 <VL53L0X_RdDWord+0x74>)
 80090fe:	78d2      	ldrb	r2, [r2, #3]
 8009100:	441a      	add	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8009106:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20000888 	.word	0x20000888

08009118 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009120:	2300      	movs	r3, #0
 8009122:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8009124:	2002      	movs	r0, #2
 8009126:	f7f8 fc97 	bl	8001a58 <HAL_Delay>
    return status;
 800912a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
	...

08009138 <__errno>:
 8009138:	4b01      	ldr	r3, [pc, #4]	; (8009140 <__errno+0x8>)
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	200002cc 	.word	0x200002cc

08009144 <__sflush_r>:
 8009144:	898a      	ldrh	r2, [r1, #12]
 8009146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914a:	4605      	mov	r5, r0
 800914c:	0710      	lsls	r0, r2, #28
 800914e:	460c      	mov	r4, r1
 8009150:	d458      	bmi.n	8009204 <__sflush_r+0xc0>
 8009152:	684b      	ldr	r3, [r1, #4]
 8009154:	2b00      	cmp	r3, #0
 8009156:	dc05      	bgt.n	8009164 <__sflush_r+0x20>
 8009158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	dc02      	bgt.n	8009164 <__sflush_r+0x20>
 800915e:	2000      	movs	r0, #0
 8009160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009166:	2e00      	cmp	r6, #0
 8009168:	d0f9      	beq.n	800915e <__sflush_r+0x1a>
 800916a:	2300      	movs	r3, #0
 800916c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009170:	682f      	ldr	r7, [r5, #0]
 8009172:	602b      	str	r3, [r5, #0]
 8009174:	d032      	beq.n	80091dc <__sflush_r+0x98>
 8009176:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	075a      	lsls	r2, r3, #29
 800917c:	d505      	bpl.n	800918a <__sflush_r+0x46>
 800917e:	6863      	ldr	r3, [r4, #4]
 8009180:	1ac0      	subs	r0, r0, r3
 8009182:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009184:	b10b      	cbz	r3, 800918a <__sflush_r+0x46>
 8009186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009188:	1ac0      	subs	r0, r0, r3
 800918a:	2300      	movs	r3, #0
 800918c:	4602      	mov	r2, r0
 800918e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009190:	6a21      	ldr	r1, [r4, #32]
 8009192:	4628      	mov	r0, r5
 8009194:	47b0      	blx	r6
 8009196:	1c43      	adds	r3, r0, #1
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	d106      	bne.n	80091aa <__sflush_r+0x66>
 800919c:	6829      	ldr	r1, [r5, #0]
 800919e:	291d      	cmp	r1, #29
 80091a0:	d82c      	bhi.n	80091fc <__sflush_r+0xb8>
 80091a2:	4a2a      	ldr	r2, [pc, #168]	; (800924c <__sflush_r+0x108>)
 80091a4:	40ca      	lsrs	r2, r1
 80091a6:	07d6      	lsls	r6, r2, #31
 80091a8:	d528      	bpl.n	80091fc <__sflush_r+0xb8>
 80091aa:	2200      	movs	r2, #0
 80091ac:	6062      	str	r2, [r4, #4]
 80091ae:	04d9      	lsls	r1, r3, #19
 80091b0:	6922      	ldr	r2, [r4, #16]
 80091b2:	6022      	str	r2, [r4, #0]
 80091b4:	d504      	bpl.n	80091c0 <__sflush_r+0x7c>
 80091b6:	1c42      	adds	r2, r0, #1
 80091b8:	d101      	bne.n	80091be <__sflush_r+0x7a>
 80091ba:	682b      	ldr	r3, [r5, #0]
 80091bc:	b903      	cbnz	r3, 80091c0 <__sflush_r+0x7c>
 80091be:	6560      	str	r0, [r4, #84]	; 0x54
 80091c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091c2:	602f      	str	r7, [r5, #0]
 80091c4:	2900      	cmp	r1, #0
 80091c6:	d0ca      	beq.n	800915e <__sflush_r+0x1a>
 80091c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091cc:	4299      	cmp	r1, r3
 80091ce:	d002      	beq.n	80091d6 <__sflush_r+0x92>
 80091d0:	4628      	mov	r0, r5
 80091d2:	f000 fa2b 	bl	800962c <_free_r>
 80091d6:	2000      	movs	r0, #0
 80091d8:	6360      	str	r0, [r4, #52]	; 0x34
 80091da:	e7c1      	b.n	8009160 <__sflush_r+0x1c>
 80091dc:	6a21      	ldr	r1, [r4, #32]
 80091de:	2301      	movs	r3, #1
 80091e0:	4628      	mov	r0, r5
 80091e2:	47b0      	blx	r6
 80091e4:	1c41      	adds	r1, r0, #1
 80091e6:	d1c7      	bne.n	8009178 <__sflush_r+0x34>
 80091e8:	682b      	ldr	r3, [r5, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d0c4      	beq.n	8009178 <__sflush_r+0x34>
 80091ee:	2b1d      	cmp	r3, #29
 80091f0:	d001      	beq.n	80091f6 <__sflush_r+0xb2>
 80091f2:	2b16      	cmp	r3, #22
 80091f4:	d101      	bne.n	80091fa <__sflush_r+0xb6>
 80091f6:	602f      	str	r7, [r5, #0]
 80091f8:	e7b1      	b.n	800915e <__sflush_r+0x1a>
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009200:	81a3      	strh	r3, [r4, #12]
 8009202:	e7ad      	b.n	8009160 <__sflush_r+0x1c>
 8009204:	690f      	ldr	r7, [r1, #16]
 8009206:	2f00      	cmp	r7, #0
 8009208:	d0a9      	beq.n	800915e <__sflush_r+0x1a>
 800920a:	0793      	lsls	r3, r2, #30
 800920c:	680e      	ldr	r6, [r1, #0]
 800920e:	bf08      	it	eq
 8009210:	694b      	ldreq	r3, [r1, #20]
 8009212:	600f      	str	r7, [r1, #0]
 8009214:	bf18      	it	ne
 8009216:	2300      	movne	r3, #0
 8009218:	eba6 0807 	sub.w	r8, r6, r7
 800921c:	608b      	str	r3, [r1, #8]
 800921e:	f1b8 0f00 	cmp.w	r8, #0
 8009222:	dd9c      	ble.n	800915e <__sflush_r+0x1a>
 8009224:	6a21      	ldr	r1, [r4, #32]
 8009226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009228:	4643      	mov	r3, r8
 800922a:	463a      	mov	r2, r7
 800922c:	4628      	mov	r0, r5
 800922e:	47b0      	blx	r6
 8009230:	2800      	cmp	r0, #0
 8009232:	dc06      	bgt.n	8009242 <__sflush_r+0xfe>
 8009234:	89a3      	ldrh	r3, [r4, #12]
 8009236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	f04f 30ff 	mov.w	r0, #4294967295
 8009240:	e78e      	b.n	8009160 <__sflush_r+0x1c>
 8009242:	4407      	add	r7, r0
 8009244:	eba8 0800 	sub.w	r8, r8, r0
 8009248:	e7e9      	b.n	800921e <__sflush_r+0xda>
 800924a:	bf00      	nop
 800924c:	20400001 	.word	0x20400001

08009250 <_fflush_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	690b      	ldr	r3, [r1, #16]
 8009254:	4605      	mov	r5, r0
 8009256:	460c      	mov	r4, r1
 8009258:	b913      	cbnz	r3, 8009260 <_fflush_r+0x10>
 800925a:	2500      	movs	r5, #0
 800925c:	4628      	mov	r0, r5
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	b118      	cbz	r0, 800926a <_fflush_r+0x1a>
 8009262:	6983      	ldr	r3, [r0, #24]
 8009264:	b90b      	cbnz	r3, 800926a <_fflush_r+0x1a>
 8009266:	f000 f887 	bl	8009378 <__sinit>
 800926a:	4b14      	ldr	r3, [pc, #80]	; (80092bc <_fflush_r+0x6c>)
 800926c:	429c      	cmp	r4, r3
 800926e:	d11b      	bne.n	80092a8 <_fflush_r+0x58>
 8009270:	686c      	ldr	r4, [r5, #4]
 8009272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0ef      	beq.n	800925a <_fflush_r+0xa>
 800927a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800927c:	07d0      	lsls	r0, r2, #31
 800927e:	d404      	bmi.n	800928a <_fflush_r+0x3a>
 8009280:	0599      	lsls	r1, r3, #22
 8009282:	d402      	bmi.n	800928a <_fflush_r+0x3a>
 8009284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009286:	f000 f94c 	bl	8009522 <__retarget_lock_acquire_recursive>
 800928a:	4628      	mov	r0, r5
 800928c:	4621      	mov	r1, r4
 800928e:	f7ff ff59 	bl	8009144 <__sflush_r>
 8009292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009294:	07da      	lsls	r2, r3, #31
 8009296:	4605      	mov	r5, r0
 8009298:	d4e0      	bmi.n	800925c <_fflush_r+0xc>
 800929a:	89a3      	ldrh	r3, [r4, #12]
 800929c:	059b      	lsls	r3, r3, #22
 800929e:	d4dd      	bmi.n	800925c <_fflush_r+0xc>
 80092a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80092a2:	f000 f93f 	bl	8009524 <__retarget_lock_release_recursive>
 80092a6:	e7d9      	b.n	800925c <_fflush_r+0xc>
 80092a8:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <_fflush_r+0x70>)
 80092aa:	429c      	cmp	r4, r3
 80092ac:	d101      	bne.n	80092b2 <_fflush_r+0x62>
 80092ae:	68ac      	ldr	r4, [r5, #8]
 80092b0:	e7df      	b.n	8009272 <_fflush_r+0x22>
 80092b2:	4b04      	ldr	r3, [pc, #16]	; (80092c4 <_fflush_r+0x74>)
 80092b4:	429c      	cmp	r4, r3
 80092b6:	bf08      	it	eq
 80092b8:	68ec      	ldreq	r4, [r5, #12]
 80092ba:	e7da      	b.n	8009272 <_fflush_r+0x22>
 80092bc:	0800bc08 	.word	0x0800bc08
 80092c0:	0800bc28 	.word	0x0800bc28
 80092c4:	0800bbe8 	.word	0x0800bbe8

080092c8 <std>:
 80092c8:	2300      	movs	r3, #0
 80092ca:	b510      	push	{r4, lr}
 80092cc:	4604      	mov	r4, r0
 80092ce:	e9c0 3300 	strd	r3, r3, [r0]
 80092d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092d6:	6083      	str	r3, [r0, #8]
 80092d8:	8181      	strh	r1, [r0, #12]
 80092da:	6643      	str	r3, [r0, #100]	; 0x64
 80092dc:	81c2      	strh	r2, [r0, #14]
 80092de:	6183      	str	r3, [r0, #24]
 80092e0:	4619      	mov	r1, r3
 80092e2:	2208      	movs	r2, #8
 80092e4:	305c      	adds	r0, #92	; 0x5c
 80092e6:	f000 f999 	bl	800961c <memset>
 80092ea:	4b05      	ldr	r3, [pc, #20]	; (8009300 <std+0x38>)
 80092ec:	6263      	str	r3, [r4, #36]	; 0x24
 80092ee:	4b05      	ldr	r3, [pc, #20]	; (8009304 <std+0x3c>)
 80092f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80092f2:	4b05      	ldr	r3, [pc, #20]	; (8009308 <std+0x40>)
 80092f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092f6:	4b05      	ldr	r3, [pc, #20]	; (800930c <std+0x44>)
 80092f8:	6224      	str	r4, [r4, #32]
 80092fa:	6323      	str	r3, [r4, #48]	; 0x30
 80092fc:	bd10      	pop	{r4, pc}
 80092fe:	bf00      	nop
 8009300:	0800a359 	.word	0x0800a359
 8009304:	0800a37b 	.word	0x0800a37b
 8009308:	0800a3b3 	.word	0x0800a3b3
 800930c:	0800a3d7 	.word	0x0800a3d7

08009310 <_cleanup_r>:
 8009310:	4901      	ldr	r1, [pc, #4]	; (8009318 <_cleanup_r+0x8>)
 8009312:	f000 b8c1 	b.w	8009498 <_fwalk_reent>
 8009316:	bf00      	nop
 8009318:	08009251 	.word	0x08009251

0800931c <__sfmoreglue>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	1e4a      	subs	r2, r1, #1
 8009320:	2568      	movs	r5, #104	; 0x68
 8009322:	4355      	muls	r5, r2
 8009324:	460e      	mov	r6, r1
 8009326:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800932a:	f000 f9cf 	bl	80096cc <_malloc_r>
 800932e:	4604      	mov	r4, r0
 8009330:	b140      	cbz	r0, 8009344 <__sfmoreglue+0x28>
 8009332:	2100      	movs	r1, #0
 8009334:	e9c0 1600 	strd	r1, r6, [r0]
 8009338:	300c      	adds	r0, #12
 800933a:	60a0      	str	r0, [r4, #8]
 800933c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009340:	f000 f96c 	bl	800961c <memset>
 8009344:	4620      	mov	r0, r4
 8009346:	bd70      	pop	{r4, r5, r6, pc}

08009348 <__sfp_lock_acquire>:
 8009348:	4801      	ldr	r0, [pc, #4]	; (8009350 <__sfp_lock_acquire+0x8>)
 800934a:	f000 b8ea 	b.w	8009522 <__retarget_lock_acquire_recursive>
 800934e:	bf00      	nop
 8009350:	200008d0 	.word	0x200008d0

08009354 <__sfp_lock_release>:
 8009354:	4801      	ldr	r0, [pc, #4]	; (800935c <__sfp_lock_release+0x8>)
 8009356:	f000 b8e5 	b.w	8009524 <__retarget_lock_release_recursive>
 800935a:	bf00      	nop
 800935c:	200008d0 	.word	0x200008d0

08009360 <__sinit_lock_acquire>:
 8009360:	4801      	ldr	r0, [pc, #4]	; (8009368 <__sinit_lock_acquire+0x8>)
 8009362:	f000 b8de 	b.w	8009522 <__retarget_lock_acquire_recursive>
 8009366:	bf00      	nop
 8009368:	200008cb 	.word	0x200008cb

0800936c <__sinit_lock_release>:
 800936c:	4801      	ldr	r0, [pc, #4]	; (8009374 <__sinit_lock_release+0x8>)
 800936e:	f000 b8d9 	b.w	8009524 <__retarget_lock_release_recursive>
 8009372:	bf00      	nop
 8009374:	200008cb 	.word	0x200008cb

08009378 <__sinit>:
 8009378:	b510      	push	{r4, lr}
 800937a:	4604      	mov	r4, r0
 800937c:	f7ff fff0 	bl	8009360 <__sinit_lock_acquire>
 8009380:	69a3      	ldr	r3, [r4, #24]
 8009382:	b11b      	cbz	r3, 800938c <__sinit+0x14>
 8009384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009388:	f7ff bff0 	b.w	800936c <__sinit_lock_release>
 800938c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009390:	6523      	str	r3, [r4, #80]	; 0x50
 8009392:	4b13      	ldr	r3, [pc, #76]	; (80093e0 <__sinit+0x68>)
 8009394:	4a13      	ldr	r2, [pc, #76]	; (80093e4 <__sinit+0x6c>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	62a2      	str	r2, [r4, #40]	; 0x28
 800939a:	42a3      	cmp	r3, r4
 800939c:	bf04      	itt	eq
 800939e:	2301      	moveq	r3, #1
 80093a0:	61a3      	streq	r3, [r4, #24]
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 f820 	bl	80093e8 <__sfp>
 80093a8:	6060      	str	r0, [r4, #4]
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 f81c 	bl	80093e8 <__sfp>
 80093b0:	60a0      	str	r0, [r4, #8]
 80093b2:	4620      	mov	r0, r4
 80093b4:	f000 f818 	bl	80093e8 <__sfp>
 80093b8:	2200      	movs	r2, #0
 80093ba:	60e0      	str	r0, [r4, #12]
 80093bc:	2104      	movs	r1, #4
 80093be:	6860      	ldr	r0, [r4, #4]
 80093c0:	f7ff ff82 	bl	80092c8 <std>
 80093c4:	68a0      	ldr	r0, [r4, #8]
 80093c6:	2201      	movs	r2, #1
 80093c8:	2109      	movs	r1, #9
 80093ca:	f7ff ff7d 	bl	80092c8 <std>
 80093ce:	68e0      	ldr	r0, [r4, #12]
 80093d0:	2202      	movs	r2, #2
 80093d2:	2112      	movs	r1, #18
 80093d4:	f7ff ff78 	bl	80092c8 <std>
 80093d8:	2301      	movs	r3, #1
 80093da:	61a3      	str	r3, [r4, #24]
 80093dc:	e7d2      	b.n	8009384 <__sinit+0xc>
 80093de:	bf00      	nop
 80093e0:	0800bc48 	.word	0x0800bc48
 80093e4:	08009311 	.word	0x08009311

080093e8 <__sfp>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	4607      	mov	r7, r0
 80093ec:	f7ff ffac 	bl	8009348 <__sfp_lock_acquire>
 80093f0:	4b1e      	ldr	r3, [pc, #120]	; (800946c <__sfp+0x84>)
 80093f2:	681e      	ldr	r6, [r3, #0]
 80093f4:	69b3      	ldr	r3, [r6, #24]
 80093f6:	b913      	cbnz	r3, 80093fe <__sfp+0x16>
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff ffbd 	bl	8009378 <__sinit>
 80093fe:	3648      	adds	r6, #72	; 0x48
 8009400:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009404:	3b01      	subs	r3, #1
 8009406:	d503      	bpl.n	8009410 <__sfp+0x28>
 8009408:	6833      	ldr	r3, [r6, #0]
 800940a:	b30b      	cbz	r3, 8009450 <__sfp+0x68>
 800940c:	6836      	ldr	r6, [r6, #0]
 800940e:	e7f7      	b.n	8009400 <__sfp+0x18>
 8009410:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009414:	b9d5      	cbnz	r5, 800944c <__sfp+0x64>
 8009416:	4b16      	ldr	r3, [pc, #88]	; (8009470 <__sfp+0x88>)
 8009418:	60e3      	str	r3, [r4, #12]
 800941a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800941e:	6665      	str	r5, [r4, #100]	; 0x64
 8009420:	f000 f87e 	bl	8009520 <__retarget_lock_init_recursive>
 8009424:	f7ff ff96 	bl	8009354 <__sfp_lock_release>
 8009428:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800942c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009430:	6025      	str	r5, [r4, #0]
 8009432:	61a5      	str	r5, [r4, #24]
 8009434:	2208      	movs	r2, #8
 8009436:	4629      	mov	r1, r5
 8009438:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800943c:	f000 f8ee 	bl	800961c <memset>
 8009440:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009444:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009448:	4620      	mov	r0, r4
 800944a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800944c:	3468      	adds	r4, #104	; 0x68
 800944e:	e7d9      	b.n	8009404 <__sfp+0x1c>
 8009450:	2104      	movs	r1, #4
 8009452:	4638      	mov	r0, r7
 8009454:	f7ff ff62 	bl	800931c <__sfmoreglue>
 8009458:	4604      	mov	r4, r0
 800945a:	6030      	str	r0, [r6, #0]
 800945c:	2800      	cmp	r0, #0
 800945e:	d1d5      	bne.n	800940c <__sfp+0x24>
 8009460:	f7ff ff78 	bl	8009354 <__sfp_lock_release>
 8009464:	230c      	movs	r3, #12
 8009466:	603b      	str	r3, [r7, #0]
 8009468:	e7ee      	b.n	8009448 <__sfp+0x60>
 800946a:	bf00      	nop
 800946c:	0800bc48 	.word	0x0800bc48
 8009470:	ffff0001 	.word	0xffff0001

08009474 <fiprintf>:
 8009474:	b40e      	push	{r1, r2, r3}
 8009476:	b503      	push	{r0, r1, lr}
 8009478:	4601      	mov	r1, r0
 800947a:	ab03      	add	r3, sp, #12
 800947c:	4805      	ldr	r0, [pc, #20]	; (8009494 <fiprintf+0x20>)
 800947e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009482:	6800      	ldr	r0, [r0, #0]
 8009484:	9301      	str	r3, [sp, #4]
 8009486:	f000 f9a5 	bl	80097d4 <_vfiprintf_r>
 800948a:	b002      	add	sp, #8
 800948c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009490:	b003      	add	sp, #12
 8009492:	4770      	bx	lr
 8009494:	200002cc 	.word	0x200002cc

08009498 <_fwalk_reent>:
 8009498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800949c:	4606      	mov	r6, r0
 800949e:	4688      	mov	r8, r1
 80094a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094a4:	2700      	movs	r7, #0
 80094a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094aa:	f1b9 0901 	subs.w	r9, r9, #1
 80094ae:	d505      	bpl.n	80094bc <_fwalk_reent+0x24>
 80094b0:	6824      	ldr	r4, [r4, #0]
 80094b2:	2c00      	cmp	r4, #0
 80094b4:	d1f7      	bne.n	80094a6 <_fwalk_reent+0xe>
 80094b6:	4638      	mov	r0, r7
 80094b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094bc:	89ab      	ldrh	r3, [r5, #12]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d907      	bls.n	80094d2 <_fwalk_reent+0x3a>
 80094c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094c6:	3301      	adds	r3, #1
 80094c8:	d003      	beq.n	80094d2 <_fwalk_reent+0x3a>
 80094ca:	4629      	mov	r1, r5
 80094cc:	4630      	mov	r0, r6
 80094ce:	47c0      	blx	r8
 80094d0:	4307      	orrs	r7, r0
 80094d2:	3568      	adds	r5, #104	; 0x68
 80094d4:	e7e9      	b.n	80094aa <_fwalk_reent+0x12>
	...

080094d8 <__libc_init_array>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	4d0d      	ldr	r5, [pc, #52]	; (8009510 <__libc_init_array+0x38>)
 80094dc:	4c0d      	ldr	r4, [pc, #52]	; (8009514 <__libc_init_array+0x3c>)
 80094de:	1b64      	subs	r4, r4, r5
 80094e0:	10a4      	asrs	r4, r4, #2
 80094e2:	2600      	movs	r6, #0
 80094e4:	42a6      	cmp	r6, r4
 80094e6:	d109      	bne.n	80094fc <__libc_init_array+0x24>
 80094e8:	4d0b      	ldr	r5, [pc, #44]	; (8009518 <__libc_init_array+0x40>)
 80094ea:	4c0c      	ldr	r4, [pc, #48]	; (800951c <__libc_init_array+0x44>)
 80094ec:	f002 fb48 	bl	800bb80 <_init>
 80094f0:	1b64      	subs	r4, r4, r5
 80094f2:	10a4      	asrs	r4, r4, #2
 80094f4:	2600      	movs	r6, #0
 80094f6:	42a6      	cmp	r6, r4
 80094f8:	d105      	bne.n	8009506 <__libc_init_array+0x2e>
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
 80094fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009500:	4798      	blx	r3
 8009502:	3601      	adds	r6, #1
 8009504:	e7ee      	b.n	80094e4 <__libc_init_array+0xc>
 8009506:	f855 3b04 	ldr.w	r3, [r5], #4
 800950a:	4798      	blx	r3
 800950c:	3601      	adds	r6, #1
 800950e:	e7f2      	b.n	80094f6 <__libc_init_array+0x1e>
 8009510:	0800bfd4 	.word	0x0800bfd4
 8009514:	0800bfd4 	.word	0x0800bfd4
 8009518:	0800bfd4 	.word	0x0800bfd4
 800951c:	0800bfd8 	.word	0x0800bfd8

08009520 <__retarget_lock_init_recursive>:
 8009520:	4770      	bx	lr

08009522 <__retarget_lock_acquire_recursive>:
 8009522:	4770      	bx	lr

08009524 <__retarget_lock_release_recursive>:
 8009524:	4770      	bx	lr

08009526 <__swhatbuf_r>:
 8009526:	b570      	push	{r4, r5, r6, lr}
 8009528:	460e      	mov	r6, r1
 800952a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952e:	2900      	cmp	r1, #0
 8009530:	b096      	sub	sp, #88	; 0x58
 8009532:	4614      	mov	r4, r2
 8009534:	461d      	mov	r5, r3
 8009536:	da07      	bge.n	8009548 <__swhatbuf_r+0x22>
 8009538:	2300      	movs	r3, #0
 800953a:	602b      	str	r3, [r5, #0]
 800953c:	89b3      	ldrh	r3, [r6, #12]
 800953e:	061a      	lsls	r2, r3, #24
 8009540:	d410      	bmi.n	8009564 <__swhatbuf_r+0x3e>
 8009542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009546:	e00e      	b.n	8009566 <__swhatbuf_r+0x40>
 8009548:	466a      	mov	r2, sp
 800954a:	f001 fead 	bl	800b2a8 <_fstat_r>
 800954e:	2800      	cmp	r0, #0
 8009550:	dbf2      	blt.n	8009538 <__swhatbuf_r+0x12>
 8009552:	9a01      	ldr	r2, [sp, #4]
 8009554:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009558:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800955c:	425a      	negs	r2, r3
 800955e:	415a      	adcs	r2, r3
 8009560:	602a      	str	r2, [r5, #0]
 8009562:	e7ee      	b.n	8009542 <__swhatbuf_r+0x1c>
 8009564:	2340      	movs	r3, #64	; 0x40
 8009566:	2000      	movs	r0, #0
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	b016      	add	sp, #88	; 0x58
 800956c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009570 <__smakebuf_r>:
 8009570:	898b      	ldrh	r3, [r1, #12]
 8009572:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009574:	079d      	lsls	r5, r3, #30
 8009576:	4606      	mov	r6, r0
 8009578:	460c      	mov	r4, r1
 800957a:	d507      	bpl.n	800958c <__smakebuf_r+0x1c>
 800957c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	6123      	str	r3, [r4, #16]
 8009584:	2301      	movs	r3, #1
 8009586:	6163      	str	r3, [r4, #20]
 8009588:	b002      	add	sp, #8
 800958a:	bd70      	pop	{r4, r5, r6, pc}
 800958c:	ab01      	add	r3, sp, #4
 800958e:	466a      	mov	r2, sp
 8009590:	f7ff ffc9 	bl	8009526 <__swhatbuf_r>
 8009594:	9900      	ldr	r1, [sp, #0]
 8009596:	4605      	mov	r5, r0
 8009598:	4630      	mov	r0, r6
 800959a:	f000 f897 	bl	80096cc <_malloc_r>
 800959e:	b948      	cbnz	r0, 80095b4 <__smakebuf_r+0x44>
 80095a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095a4:	059a      	lsls	r2, r3, #22
 80095a6:	d4ef      	bmi.n	8009588 <__smakebuf_r+0x18>
 80095a8:	f023 0303 	bic.w	r3, r3, #3
 80095ac:	f043 0302 	orr.w	r3, r3, #2
 80095b0:	81a3      	strh	r3, [r4, #12]
 80095b2:	e7e3      	b.n	800957c <__smakebuf_r+0xc>
 80095b4:	4b0d      	ldr	r3, [pc, #52]	; (80095ec <__smakebuf_r+0x7c>)
 80095b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	6020      	str	r0, [r4, #0]
 80095bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095c0:	81a3      	strh	r3, [r4, #12]
 80095c2:	9b00      	ldr	r3, [sp, #0]
 80095c4:	6163      	str	r3, [r4, #20]
 80095c6:	9b01      	ldr	r3, [sp, #4]
 80095c8:	6120      	str	r0, [r4, #16]
 80095ca:	b15b      	cbz	r3, 80095e4 <__smakebuf_r+0x74>
 80095cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095d0:	4630      	mov	r0, r6
 80095d2:	f001 fe7b 	bl	800b2cc <_isatty_r>
 80095d6:	b128      	cbz	r0, 80095e4 <__smakebuf_r+0x74>
 80095d8:	89a3      	ldrh	r3, [r4, #12]
 80095da:	f023 0303 	bic.w	r3, r3, #3
 80095de:	f043 0301 	orr.w	r3, r3, #1
 80095e2:	81a3      	strh	r3, [r4, #12]
 80095e4:	89a0      	ldrh	r0, [r4, #12]
 80095e6:	4305      	orrs	r5, r0
 80095e8:	81a5      	strh	r5, [r4, #12]
 80095ea:	e7cd      	b.n	8009588 <__smakebuf_r+0x18>
 80095ec:	08009311 	.word	0x08009311

080095f0 <malloc>:
 80095f0:	4b02      	ldr	r3, [pc, #8]	; (80095fc <malloc+0xc>)
 80095f2:	4601      	mov	r1, r0
 80095f4:	6818      	ldr	r0, [r3, #0]
 80095f6:	f000 b869 	b.w	80096cc <_malloc_r>
 80095fa:	bf00      	nop
 80095fc:	200002cc 	.word	0x200002cc

08009600 <memcpy>:
 8009600:	440a      	add	r2, r1
 8009602:	4291      	cmp	r1, r2
 8009604:	f100 33ff 	add.w	r3, r0, #4294967295
 8009608:	d100      	bne.n	800960c <memcpy+0xc>
 800960a:	4770      	bx	lr
 800960c:	b510      	push	{r4, lr}
 800960e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009616:	4291      	cmp	r1, r2
 8009618:	d1f9      	bne.n	800960e <memcpy+0xe>
 800961a:	bd10      	pop	{r4, pc}

0800961c <memset>:
 800961c:	4402      	add	r2, r0
 800961e:	4603      	mov	r3, r0
 8009620:	4293      	cmp	r3, r2
 8009622:	d100      	bne.n	8009626 <memset+0xa>
 8009624:	4770      	bx	lr
 8009626:	f803 1b01 	strb.w	r1, [r3], #1
 800962a:	e7f9      	b.n	8009620 <memset+0x4>

0800962c <_free_r>:
 800962c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800962e:	2900      	cmp	r1, #0
 8009630:	d048      	beq.n	80096c4 <_free_r+0x98>
 8009632:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009636:	9001      	str	r0, [sp, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	f1a1 0404 	sub.w	r4, r1, #4
 800963e:	bfb8      	it	lt
 8009640:	18e4      	addlt	r4, r4, r3
 8009642:	f001 fe69 	bl	800b318 <__malloc_lock>
 8009646:	4a20      	ldr	r2, [pc, #128]	; (80096c8 <_free_r+0x9c>)
 8009648:	9801      	ldr	r0, [sp, #4]
 800964a:	6813      	ldr	r3, [r2, #0]
 800964c:	4615      	mov	r5, r2
 800964e:	b933      	cbnz	r3, 800965e <_free_r+0x32>
 8009650:	6063      	str	r3, [r4, #4]
 8009652:	6014      	str	r4, [r2, #0]
 8009654:	b003      	add	sp, #12
 8009656:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800965a:	f001 be63 	b.w	800b324 <__malloc_unlock>
 800965e:	42a3      	cmp	r3, r4
 8009660:	d90b      	bls.n	800967a <_free_r+0x4e>
 8009662:	6821      	ldr	r1, [r4, #0]
 8009664:	1862      	adds	r2, r4, r1
 8009666:	4293      	cmp	r3, r2
 8009668:	bf04      	itt	eq
 800966a:	681a      	ldreq	r2, [r3, #0]
 800966c:	685b      	ldreq	r3, [r3, #4]
 800966e:	6063      	str	r3, [r4, #4]
 8009670:	bf04      	itt	eq
 8009672:	1852      	addeq	r2, r2, r1
 8009674:	6022      	streq	r2, [r4, #0]
 8009676:	602c      	str	r4, [r5, #0]
 8009678:	e7ec      	b.n	8009654 <_free_r+0x28>
 800967a:	461a      	mov	r2, r3
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	b10b      	cbz	r3, 8009684 <_free_r+0x58>
 8009680:	42a3      	cmp	r3, r4
 8009682:	d9fa      	bls.n	800967a <_free_r+0x4e>
 8009684:	6811      	ldr	r1, [r2, #0]
 8009686:	1855      	adds	r5, r2, r1
 8009688:	42a5      	cmp	r5, r4
 800968a:	d10b      	bne.n	80096a4 <_free_r+0x78>
 800968c:	6824      	ldr	r4, [r4, #0]
 800968e:	4421      	add	r1, r4
 8009690:	1854      	adds	r4, r2, r1
 8009692:	42a3      	cmp	r3, r4
 8009694:	6011      	str	r1, [r2, #0]
 8009696:	d1dd      	bne.n	8009654 <_free_r+0x28>
 8009698:	681c      	ldr	r4, [r3, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	6053      	str	r3, [r2, #4]
 800969e:	4421      	add	r1, r4
 80096a0:	6011      	str	r1, [r2, #0]
 80096a2:	e7d7      	b.n	8009654 <_free_r+0x28>
 80096a4:	d902      	bls.n	80096ac <_free_r+0x80>
 80096a6:	230c      	movs	r3, #12
 80096a8:	6003      	str	r3, [r0, #0]
 80096aa:	e7d3      	b.n	8009654 <_free_r+0x28>
 80096ac:	6825      	ldr	r5, [r4, #0]
 80096ae:	1961      	adds	r1, r4, r5
 80096b0:	428b      	cmp	r3, r1
 80096b2:	bf04      	itt	eq
 80096b4:	6819      	ldreq	r1, [r3, #0]
 80096b6:	685b      	ldreq	r3, [r3, #4]
 80096b8:	6063      	str	r3, [r4, #4]
 80096ba:	bf04      	itt	eq
 80096bc:	1949      	addeq	r1, r1, r5
 80096be:	6021      	streq	r1, [r4, #0]
 80096c0:	6054      	str	r4, [r2, #4]
 80096c2:	e7c7      	b.n	8009654 <_free_r+0x28>
 80096c4:	b003      	add	sp, #12
 80096c6:	bd30      	pop	{r4, r5, pc}
 80096c8:	200004c0 	.word	0x200004c0

080096cc <_malloc_r>:
 80096cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ce:	1ccd      	adds	r5, r1, #3
 80096d0:	f025 0503 	bic.w	r5, r5, #3
 80096d4:	3508      	adds	r5, #8
 80096d6:	2d0c      	cmp	r5, #12
 80096d8:	bf38      	it	cc
 80096da:	250c      	movcc	r5, #12
 80096dc:	2d00      	cmp	r5, #0
 80096de:	4606      	mov	r6, r0
 80096e0:	db01      	blt.n	80096e6 <_malloc_r+0x1a>
 80096e2:	42a9      	cmp	r1, r5
 80096e4:	d903      	bls.n	80096ee <_malloc_r+0x22>
 80096e6:	230c      	movs	r3, #12
 80096e8:	6033      	str	r3, [r6, #0]
 80096ea:	2000      	movs	r0, #0
 80096ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096ee:	f001 fe13 	bl	800b318 <__malloc_lock>
 80096f2:	4921      	ldr	r1, [pc, #132]	; (8009778 <_malloc_r+0xac>)
 80096f4:	680a      	ldr	r2, [r1, #0]
 80096f6:	4614      	mov	r4, r2
 80096f8:	b99c      	cbnz	r4, 8009722 <_malloc_r+0x56>
 80096fa:	4f20      	ldr	r7, [pc, #128]	; (800977c <_malloc_r+0xb0>)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	b923      	cbnz	r3, 800970a <_malloc_r+0x3e>
 8009700:	4621      	mov	r1, r4
 8009702:	4630      	mov	r0, r6
 8009704:	f000 fe18 	bl	800a338 <_sbrk_r>
 8009708:	6038      	str	r0, [r7, #0]
 800970a:	4629      	mov	r1, r5
 800970c:	4630      	mov	r0, r6
 800970e:	f000 fe13 	bl	800a338 <_sbrk_r>
 8009712:	1c43      	adds	r3, r0, #1
 8009714:	d123      	bne.n	800975e <_malloc_r+0x92>
 8009716:	230c      	movs	r3, #12
 8009718:	6033      	str	r3, [r6, #0]
 800971a:	4630      	mov	r0, r6
 800971c:	f001 fe02 	bl	800b324 <__malloc_unlock>
 8009720:	e7e3      	b.n	80096ea <_malloc_r+0x1e>
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	1b5b      	subs	r3, r3, r5
 8009726:	d417      	bmi.n	8009758 <_malloc_r+0x8c>
 8009728:	2b0b      	cmp	r3, #11
 800972a:	d903      	bls.n	8009734 <_malloc_r+0x68>
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	441c      	add	r4, r3
 8009730:	6025      	str	r5, [r4, #0]
 8009732:	e004      	b.n	800973e <_malloc_r+0x72>
 8009734:	6863      	ldr	r3, [r4, #4]
 8009736:	42a2      	cmp	r2, r4
 8009738:	bf0c      	ite	eq
 800973a:	600b      	streq	r3, [r1, #0]
 800973c:	6053      	strne	r3, [r2, #4]
 800973e:	4630      	mov	r0, r6
 8009740:	f001 fdf0 	bl	800b324 <__malloc_unlock>
 8009744:	f104 000b 	add.w	r0, r4, #11
 8009748:	1d23      	adds	r3, r4, #4
 800974a:	f020 0007 	bic.w	r0, r0, #7
 800974e:	1ac2      	subs	r2, r0, r3
 8009750:	d0cc      	beq.n	80096ec <_malloc_r+0x20>
 8009752:	1a1b      	subs	r3, r3, r0
 8009754:	50a3      	str	r3, [r4, r2]
 8009756:	e7c9      	b.n	80096ec <_malloc_r+0x20>
 8009758:	4622      	mov	r2, r4
 800975a:	6864      	ldr	r4, [r4, #4]
 800975c:	e7cc      	b.n	80096f8 <_malloc_r+0x2c>
 800975e:	1cc4      	adds	r4, r0, #3
 8009760:	f024 0403 	bic.w	r4, r4, #3
 8009764:	42a0      	cmp	r0, r4
 8009766:	d0e3      	beq.n	8009730 <_malloc_r+0x64>
 8009768:	1a21      	subs	r1, r4, r0
 800976a:	4630      	mov	r0, r6
 800976c:	f000 fde4 	bl	800a338 <_sbrk_r>
 8009770:	3001      	adds	r0, #1
 8009772:	d1dd      	bne.n	8009730 <_malloc_r+0x64>
 8009774:	e7cf      	b.n	8009716 <_malloc_r+0x4a>
 8009776:	bf00      	nop
 8009778:	200004c0 	.word	0x200004c0
 800977c:	200004c4 	.word	0x200004c4

08009780 <__sfputc_r>:
 8009780:	6893      	ldr	r3, [r2, #8]
 8009782:	3b01      	subs	r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	b410      	push	{r4}
 8009788:	6093      	str	r3, [r2, #8]
 800978a:	da08      	bge.n	800979e <__sfputc_r+0x1e>
 800978c:	6994      	ldr	r4, [r2, #24]
 800978e:	42a3      	cmp	r3, r4
 8009790:	db01      	blt.n	8009796 <__sfputc_r+0x16>
 8009792:	290a      	cmp	r1, #10
 8009794:	d103      	bne.n	800979e <__sfputc_r+0x1e>
 8009796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800979a:	f000 be29 	b.w	800a3f0 <__swbuf_r>
 800979e:	6813      	ldr	r3, [r2, #0]
 80097a0:	1c58      	adds	r0, r3, #1
 80097a2:	6010      	str	r0, [r2, #0]
 80097a4:	7019      	strb	r1, [r3, #0]
 80097a6:	4608      	mov	r0, r1
 80097a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <__sfputs_r>:
 80097ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b0:	4606      	mov	r6, r0
 80097b2:	460f      	mov	r7, r1
 80097b4:	4614      	mov	r4, r2
 80097b6:	18d5      	adds	r5, r2, r3
 80097b8:	42ac      	cmp	r4, r5
 80097ba:	d101      	bne.n	80097c0 <__sfputs_r+0x12>
 80097bc:	2000      	movs	r0, #0
 80097be:	e007      	b.n	80097d0 <__sfputs_r+0x22>
 80097c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c4:	463a      	mov	r2, r7
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7ff ffda 	bl	8009780 <__sfputc_r>
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	d1f3      	bne.n	80097b8 <__sfputs_r+0xa>
 80097d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097d4 <_vfiprintf_r>:
 80097d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	460d      	mov	r5, r1
 80097da:	b09d      	sub	sp, #116	; 0x74
 80097dc:	4614      	mov	r4, r2
 80097de:	4698      	mov	r8, r3
 80097e0:	4606      	mov	r6, r0
 80097e2:	b118      	cbz	r0, 80097ec <_vfiprintf_r+0x18>
 80097e4:	6983      	ldr	r3, [r0, #24]
 80097e6:	b90b      	cbnz	r3, 80097ec <_vfiprintf_r+0x18>
 80097e8:	f7ff fdc6 	bl	8009378 <__sinit>
 80097ec:	4b89      	ldr	r3, [pc, #548]	; (8009a14 <_vfiprintf_r+0x240>)
 80097ee:	429d      	cmp	r5, r3
 80097f0:	d11b      	bne.n	800982a <_vfiprintf_r+0x56>
 80097f2:	6875      	ldr	r5, [r6, #4]
 80097f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097f6:	07d9      	lsls	r1, r3, #31
 80097f8:	d405      	bmi.n	8009806 <_vfiprintf_r+0x32>
 80097fa:	89ab      	ldrh	r3, [r5, #12]
 80097fc:	059a      	lsls	r2, r3, #22
 80097fe:	d402      	bmi.n	8009806 <_vfiprintf_r+0x32>
 8009800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009802:	f7ff fe8e 	bl	8009522 <__retarget_lock_acquire_recursive>
 8009806:	89ab      	ldrh	r3, [r5, #12]
 8009808:	071b      	lsls	r3, r3, #28
 800980a:	d501      	bpl.n	8009810 <_vfiprintf_r+0x3c>
 800980c:	692b      	ldr	r3, [r5, #16]
 800980e:	b9eb      	cbnz	r3, 800984c <_vfiprintf_r+0x78>
 8009810:	4629      	mov	r1, r5
 8009812:	4630      	mov	r0, r6
 8009814:	f000 fe50 	bl	800a4b8 <__swsetup_r>
 8009818:	b1c0      	cbz	r0, 800984c <_vfiprintf_r+0x78>
 800981a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800981c:	07dc      	lsls	r4, r3, #31
 800981e:	d50e      	bpl.n	800983e <_vfiprintf_r+0x6a>
 8009820:	f04f 30ff 	mov.w	r0, #4294967295
 8009824:	b01d      	add	sp, #116	; 0x74
 8009826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982a:	4b7b      	ldr	r3, [pc, #492]	; (8009a18 <_vfiprintf_r+0x244>)
 800982c:	429d      	cmp	r5, r3
 800982e:	d101      	bne.n	8009834 <_vfiprintf_r+0x60>
 8009830:	68b5      	ldr	r5, [r6, #8]
 8009832:	e7df      	b.n	80097f4 <_vfiprintf_r+0x20>
 8009834:	4b79      	ldr	r3, [pc, #484]	; (8009a1c <_vfiprintf_r+0x248>)
 8009836:	429d      	cmp	r5, r3
 8009838:	bf08      	it	eq
 800983a:	68f5      	ldreq	r5, [r6, #12]
 800983c:	e7da      	b.n	80097f4 <_vfiprintf_r+0x20>
 800983e:	89ab      	ldrh	r3, [r5, #12]
 8009840:	0598      	lsls	r0, r3, #22
 8009842:	d4ed      	bmi.n	8009820 <_vfiprintf_r+0x4c>
 8009844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009846:	f7ff fe6d 	bl	8009524 <__retarget_lock_release_recursive>
 800984a:	e7e9      	b.n	8009820 <_vfiprintf_r+0x4c>
 800984c:	2300      	movs	r3, #0
 800984e:	9309      	str	r3, [sp, #36]	; 0x24
 8009850:	2320      	movs	r3, #32
 8009852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009856:	f8cd 800c 	str.w	r8, [sp, #12]
 800985a:	2330      	movs	r3, #48	; 0x30
 800985c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a20 <_vfiprintf_r+0x24c>
 8009860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009864:	f04f 0901 	mov.w	r9, #1
 8009868:	4623      	mov	r3, r4
 800986a:	469a      	mov	sl, r3
 800986c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009870:	b10a      	cbz	r2, 8009876 <_vfiprintf_r+0xa2>
 8009872:	2a25      	cmp	r2, #37	; 0x25
 8009874:	d1f9      	bne.n	800986a <_vfiprintf_r+0x96>
 8009876:	ebba 0b04 	subs.w	fp, sl, r4
 800987a:	d00b      	beq.n	8009894 <_vfiprintf_r+0xc0>
 800987c:	465b      	mov	r3, fp
 800987e:	4622      	mov	r2, r4
 8009880:	4629      	mov	r1, r5
 8009882:	4630      	mov	r0, r6
 8009884:	f7ff ff93 	bl	80097ae <__sfputs_r>
 8009888:	3001      	adds	r0, #1
 800988a:	f000 80aa 	beq.w	80099e2 <_vfiprintf_r+0x20e>
 800988e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009890:	445a      	add	r2, fp
 8009892:	9209      	str	r2, [sp, #36]	; 0x24
 8009894:	f89a 3000 	ldrb.w	r3, [sl]
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 80a2 	beq.w	80099e2 <_vfiprintf_r+0x20e>
 800989e:	2300      	movs	r3, #0
 80098a0:	f04f 32ff 	mov.w	r2, #4294967295
 80098a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098a8:	f10a 0a01 	add.w	sl, sl, #1
 80098ac:	9304      	str	r3, [sp, #16]
 80098ae:	9307      	str	r3, [sp, #28]
 80098b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098b4:	931a      	str	r3, [sp, #104]	; 0x68
 80098b6:	4654      	mov	r4, sl
 80098b8:	2205      	movs	r2, #5
 80098ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098be:	4858      	ldr	r0, [pc, #352]	; (8009a20 <_vfiprintf_r+0x24c>)
 80098c0:	f7f6 fcae 	bl	8000220 <memchr>
 80098c4:	9a04      	ldr	r2, [sp, #16]
 80098c6:	b9d8      	cbnz	r0, 8009900 <_vfiprintf_r+0x12c>
 80098c8:	06d1      	lsls	r1, r2, #27
 80098ca:	bf44      	itt	mi
 80098cc:	2320      	movmi	r3, #32
 80098ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098d2:	0713      	lsls	r3, r2, #28
 80098d4:	bf44      	itt	mi
 80098d6:	232b      	movmi	r3, #43	; 0x2b
 80098d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098dc:	f89a 3000 	ldrb.w	r3, [sl]
 80098e0:	2b2a      	cmp	r3, #42	; 0x2a
 80098e2:	d015      	beq.n	8009910 <_vfiprintf_r+0x13c>
 80098e4:	9a07      	ldr	r2, [sp, #28]
 80098e6:	4654      	mov	r4, sl
 80098e8:	2000      	movs	r0, #0
 80098ea:	f04f 0c0a 	mov.w	ip, #10
 80098ee:	4621      	mov	r1, r4
 80098f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098f4:	3b30      	subs	r3, #48	; 0x30
 80098f6:	2b09      	cmp	r3, #9
 80098f8:	d94e      	bls.n	8009998 <_vfiprintf_r+0x1c4>
 80098fa:	b1b0      	cbz	r0, 800992a <_vfiprintf_r+0x156>
 80098fc:	9207      	str	r2, [sp, #28]
 80098fe:	e014      	b.n	800992a <_vfiprintf_r+0x156>
 8009900:	eba0 0308 	sub.w	r3, r0, r8
 8009904:	fa09 f303 	lsl.w	r3, r9, r3
 8009908:	4313      	orrs	r3, r2
 800990a:	9304      	str	r3, [sp, #16]
 800990c:	46a2      	mov	sl, r4
 800990e:	e7d2      	b.n	80098b6 <_vfiprintf_r+0xe2>
 8009910:	9b03      	ldr	r3, [sp, #12]
 8009912:	1d19      	adds	r1, r3, #4
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	9103      	str	r1, [sp, #12]
 8009918:	2b00      	cmp	r3, #0
 800991a:	bfbb      	ittet	lt
 800991c:	425b      	neglt	r3, r3
 800991e:	f042 0202 	orrlt.w	r2, r2, #2
 8009922:	9307      	strge	r3, [sp, #28]
 8009924:	9307      	strlt	r3, [sp, #28]
 8009926:	bfb8      	it	lt
 8009928:	9204      	strlt	r2, [sp, #16]
 800992a:	7823      	ldrb	r3, [r4, #0]
 800992c:	2b2e      	cmp	r3, #46	; 0x2e
 800992e:	d10c      	bne.n	800994a <_vfiprintf_r+0x176>
 8009930:	7863      	ldrb	r3, [r4, #1]
 8009932:	2b2a      	cmp	r3, #42	; 0x2a
 8009934:	d135      	bne.n	80099a2 <_vfiprintf_r+0x1ce>
 8009936:	9b03      	ldr	r3, [sp, #12]
 8009938:	1d1a      	adds	r2, r3, #4
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	9203      	str	r2, [sp, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	bfb8      	it	lt
 8009942:	f04f 33ff 	movlt.w	r3, #4294967295
 8009946:	3402      	adds	r4, #2
 8009948:	9305      	str	r3, [sp, #20]
 800994a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a30 <_vfiprintf_r+0x25c>
 800994e:	7821      	ldrb	r1, [r4, #0]
 8009950:	2203      	movs	r2, #3
 8009952:	4650      	mov	r0, sl
 8009954:	f7f6 fc64 	bl	8000220 <memchr>
 8009958:	b140      	cbz	r0, 800996c <_vfiprintf_r+0x198>
 800995a:	2340      	movs	r3, #64	; 0x40
 800995c:	eba0 000a 	sub.w	r0, r0, sl
 8009960:	fa03 f000 	lsl.w	r0, r3, r0
 8009964:	9b04      	ldr	r3, [sp, #16]
 8009966:	4303      	orrs	r3, r0
 8009968:	3401      	adds	r4, #1
 800996a:	9304      	str	r3, [sp, #16]
 800996c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009970:	482c      	ldr	r0, [pc, #176]	; (8009a24 <_vfiprintf_r+0x250>)
 8009972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009976:	2206      	movs	r2, #6
 8009978:	f7f6 fc52 	bl	8000220 <memchr>
 800997c:	2800      	cmp	r0, #0
 800997e:	d03f      	beq.n	8009a00 <_vfiprintf_r+0x22c>
 8009980:	4b29      	ldr	r3, [pc, #164]	; (8009a28 <_vfiprintf_r+0x254>)
 8009982:	bb1b      	cbnz	r3, 80099cc <_vfiprintf_r+0x1f8>
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	3307      	adds	r3, #7
 8009988:	f023 0307 	bic.w	r3, r3, #7
 800998c:	3308      	adds	r3, #8
 800998e:	9303      	str	r3, [sp, #12]
 8009990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009992:	443b      	add	r3, r7
 8009994:	9309      	str	r3, [sp, #36]	; 0x24
 8009996:	e767      	b.n	8009868 <_vfiprintf_r+0x94>
 8009998:	fb0c 3202 	mla	r2, ip, r2, r3
 800999c:	460c      	mov	r4, r1
 800999e:	2001      	movs	r0, #1
 80099a0:	e7a5      	b.n	80098ee <_vfiprintf_r+0x11a>
 80099a2:	2300      	movs	r3, #0
 80099a4:	3401      	adds	r4, #1
 80099a6:	9305      	str	r3, [sp, #20]
 80099a8:	4619      	mov	r1, r3
 80099aa:	f04f 0c0a 	mov.w	ip, #10
 80099ae:	4620      	mov	r0, r4
 80099b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b4:	3a30      	subs	r2, #48	; 0x30
 80099b6:	2a09      	cmp	r2, #9
 80099b8:	d903      	bls.n	80099c2 <_vfiprintf_r+0x1ee>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0c5      	beq.n	800994a <_vfiprintf_r+0x176>
 80099be:	9105      	str	r1, [sp, #20]
 80099c0:	e7c3      	b.n	800994a <_vfiprintf_r+0x176>
 80099c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80099c6:	4604      	mov	r4, r0
 80099c8:	2301      	movs	r3, #1
 80099ca:	e7f0      	b.n	80099ae <_vfiprintf_r+0x1da>
 80099cc:	ab03      	add	r3, sp, #12
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	462a      	mov	r2, r5
 80099d2:	4b16      	ldr	r3, [pc, #88]	; (8009a2c <_vfiprintf_r+0x258>)
 80099d4:	a904      	add	r1, sp, #16
 80099d6:	4630      	mov	r0, r6
 80099d8:	f000 f8cc 	bl	8009b74 <_printf_float>
 80099dc:	4607      	mov	r7, r0
 80099de:	1c78      	adds	r0, r7, #1
 80099e0:	d1d6      	bne.n	8009990 <_vfiprintf_r+0x1bc>
 80099e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099e4:	07d9      	lsls	r1, r3, #31
 80099e6:	d405      	bmi.n	80099f4 <_vfiprintf_r+0x220>
 80099e8:	89ab      	ldrh	r3, [r5, #12]
 80099ea:	059a      	lsls	r2, r3, #22
 80099ec:	d402      	bmi.n	80099f4 <_vfiprintf_r+0x220>
 80099ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099f0:	f7ff fd98 	bl	8009524 <__retarget_lock_release_recursive>
 80099f4:	89ab      	ldrh	r3, [r5, #12]
 80099f6:	065b      	lsls	r3, r3, #25
 80099f8:	f53f af12 	bmi.w	8009820 <_vfiprintf_r+0x4c>
 80099fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099fe:	e711      	b.n	8009824 <_vfiprintf_r+0x50>
 8009a00:	ab03      	add	r3, sp, #12
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	462a      	mov	r2, r5
 8009a06:	4b09      	ldr	r3, [pc, #36]	; (8009a2c <_vfiprintf_r+0x258>)
 8009a08:	a904      	add	r1, sp, #16
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f000 fb56 	bl	800a0bc <_printf_i>
 8009a10:	e7e4      	b.n	80099dc <_vfiprintf_r+0x208>
 8009a12:	bf00      	nop
 8009a14:	0800bc08 	.word	0x0800bc08
 8009a18:	0800bc28 	.word	0x0800bc28
 8009a1c:	0800bbe8 	.word	0x0800bbe8
 8009a20:	0800bc4c 	.word	0x0800bc4c
 8009a24:	0800bc56 	.word	0x0800bc56
 8009a28:	08009b75 	.word	0x08009b75
 8009a2c:	080097af 	.word	0x080097af
 8009a30:	0800bc52 	.word	0x0800bc52

08009a34 <__cvt>:
 8009a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a38:	ec55 4b10 	vmov	r4, r5, d0
 8009a3c:	2d00      	cmp	r5, #0
 8009a3e:	460e      	mov	r6, r1
 8009a40:	4619      	mov	r1, r3
 8009a42:	462b      	mov	r3, r5
 8009a44:	bfbb      	ittet	lt
 8009a46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009a4a:	461d      	movlt	r5, r3
 8009a4c:	2300      	movge	r3, #0
 8009a4e:	232d      	movlt	r3, #45	; 0x2d
 8009a50:	700b      	strb	r3, [r1, #0]
 8009a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009a58:	4691      	mov	r9, r2
 8009a5a:	f023 0820 	bic.w	r8, r3, #32
 8009a5e:	bfbc      	itt	lt
 8009a60:	4622      	movlt	r2, r4
 8009a62:	4614      	movlt	r4, r2
 8009a64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a68:	d005      	beq.n	8009a76 <__cvt+0x42>
 8009a6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009a6e:	d100      	bne.n	8009a72 <__cvt+0x3e>
 8009a70:	3601      	adds	r6, #1
 8009a72:	2102      	movs	r1, #2
 8009a74:	e000      	b.n	8009a78 <__cvt+0x44>
 8009a76:	2103      	movs	r1, #3
 8009a78:	ab03      	add	r3, sp, #12
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	ab02      	add	r3, sp, #8
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	ec45 4b10 	vmov	d0, r4, r5
 8009a84:	4653      	mov	r3, sl
 8009a86:	4632      	mov	r2, r6
 8009a88:	f000 fe22 	bl	800a6d0 <_dtoa_r>
 8009a8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a90:	4607      	mov	r7, r0
 8009a92:	d102      	bne.n	8009a9a <__cvt+0x66>
 8009a94:	f019 0f01 	tst.w	r9, #1
 8009a98:	d022      	beq.n	8009ae0 <__cvt+0xac>
 8009a9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a9e:	eb07 0906 	add.w	r9, r7, r6
 8009aa2:	d110      	bne.n	8009ac6 <__cvt+0x92>
 8009aa4:	783b      	ldrb	r3, [r7, #0]
 8009aa6:	2b30      	cmp	r3, #48	; 0x30
 8009aa8:	d10a      	bne.n	8009ac0 <__cvt+0x8c>
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2300      	movs	r3, #0
 8009aae:	4620      	mov	r0, r4
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7f7 f829 	bl	8000b08 <__aeabi_dcmpeq>
 8009ab6:	b918      	cbnz	r0, 8009ac0 <__cvt+0x8c>
 8009ab8:	f1c6 0601 	rsb	r6, r6, #1
 8009abc:	f8ca 6000 	str.w	r6, [sl]
 8009ac0:	f8da 3000 	ldr.w	r3, [sl]
 8009ac4:	4499      	add	r9, r3
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2300      	movs	r3, #0
 8009aca:	4620      	mov	r0, r4
 8009acc:	4629      	mov	r1, r5
 8009ace:	f7f7 f81b 	bl	8000b08 <__aeabi_dcmpeq>
 8009ad2:	b108      	cbz	r0, 8009ad8 <__cvt+0xa4>
 8009ad4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ad8:	2230      	movs	r2, #48	; 0x30
 8009ada:	9b03      	ldr	r3, [sp, #12]
 8009adc:	454b      	cmp	r3, r9
 8009ade:	d307      	bcc.n	8009af0 <__cvt+0xbc>
 8009ae0:	9b03      	ldr	r3, [sp, #12]
 8009ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ae4:	1bdb      	subs	r3, r3, r7
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	6013      	str	r3, [r2, #0]
 8009aea:	b004      	add	sp, #16
 8009aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af0:	1c59      	adds	r1, r3, #1
 8009af2:	9103      	str	r1, [sp, #12]
 8009af4:	701a      	strb	r2, [r3, #0]
 8009af6:	e7f0      	b.n	8009ada <__cvt+0xa6>

08009af8 <__exponent>:
 8009af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009afa:	4603      	mov	r3, r0
 8009afc:	2900      	cmp	r1, #0
 8009afe:	bfb8      	it	lt
 8009b00:	4249      	neglt	r1, r1
 8009b02:	f803 2b02 	strb.w	r2, [r3], #2
 8009b06:	bfb4      	ite	lt
 8009b08:	222d      	movlt	r2, #45	; 0x2d
 8009b0a:	222b      	movge	r2, #43	; 0x2b
 8009b0c:	2909      	cmp	r1, #9
 8009b0e:	7042      	strb	r2, [r0, #1]
 8009b10:	dd2a      	ble.n	8009b68 <__exponent+0x70>
 8009b12:	f10d 0407 	add.w	r4, sp, #7
 8009b16:	46a4      	mov	ip, r4
 8009b18:	270a      	movs	r7, #10
 8009b1a:	46a6      	mov	lr, r4
 8009b1c:	460a      	mov	r2, r1
 8009b1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009b22:	fb07 1516 	mls	r5, r7, r6, r1
 8009b26:	3530      	adds	r5, #48	; 0x30
 8009b28:	2a63      	cmp	r2, #99	; 0x63
 8009b2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009b2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009b32:	4631      	mov	r1, r6
 8009b34:	dcf1      	bgt.n	8009b1a <__exponent+0x22>
 8009b36:	3130      	adds	r1, #48	; 0x30
 8009b38:	f1ae 0502 	sub.w	r5, lr, #2
 8009b3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b40:	1c44      	adds	r4, r0, #1
 8009b42:	4629      	mov	r1, r5
 8009b44:	4561      	cmp	r1, ip
 8009b46:	d30a      	bcc.n	8009b5e <__exponent+0x66>
 8009b48:	f10d 0209 	add.w	r2, sp, #9
 8009b4c:	eba2 020e 	sub.w	r2, r2, lr
 8009b50:	4565      	cmp	r5, ip
 8009b52:	bf88      	it	hi
 8009b54:	2200      	movhi	r2, #0
 8009b56:	4413      	add	r3, r2
 8009b58:	1a18      	subs	r0, r3, r0
 8009b5a:	b003      	add	sp, #12
 8009b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b62:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b66:	e7ed      	b.n	8009b44 <__exponent+0x4c>
 8009b68:	2330      	movs	r3, #48	; 0x30
 8009b6a:	3130      	adds	r1, #48	; 0x30
 8009b6c:	7083      	strb	r3, [r0, #2]
 8009b6e:	70c1      	strb	r1, [r0, #3]
 8009b70:	1d03      	adds	r3, r0, #4
 8009b72:	e7f1      	b.n	8009b58 <__exponent+0x60>

08009b74 <_printf_float>:
 8009b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b78:	ed2d 8b02 	vpush	{d8}
 8009b7c:	b08d      	sub	sp, #52	; 0x34
 8009b7e:	460c      	mov	r4, r1
 8009b80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b84:	4616      	mov	r6, r2
 8009b86:	461f      	mov	r7, r3
 8009b88:	4605      	mov	r5, r0
 8009b8a:	f001 fbaf 	bl	800b2ec <_localeconv_r>
 8009b8e:	f8d0 a000 	ldr.w	sl, [r0]
 8009b92:	4650      	mov	r0, sl
 8009b94:	f7f6 fb3c 	bl	8000210 <strlen>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	9305      	str	r3, [sp, #20]
 8009ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8009ba4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ba8:	3307      	adds	r3, #7
 8009baa:	f023 0307 	bic.w	r3, r3, #7
 8009bae:	f103 0208 	add.w	r2, r3, #8
 8009bb2:	f8c8 2000 	str.w	r2, [r8]
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009bbe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009bc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009bc6:	9307      	str	r3, [sp, #28]
 8009bc8:	f8cd 8018 	str.w	r8, [sp, #24]
 8009bcc:	ee08 0a10 	vmov	s16, r0
 8009bd0:	4b9f      	ldr	r3, [pc, #636]	; (8009e50 <_printf_float+0x2dc>)
 8009bd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bda:	f7f6 ffc7 	bl	8000b6c <__aeabi_dcmpun>
 8009bde:	bb88      	cbnz	r0, 8009c44 <_printf_float+0xd0>
 8009be0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009be4:	4b9a      	ldr	r3, [pc, #616]	; (8009e50 <_printf_float+0x2dc>)
 8009be6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bea:	f7f6 ffa1 	bl	8000b30 <__aeabi_dcmple>
 8009bee:	bb48      	cbnz	r0, 8009c44 <_printf_float+0xd0>
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	4649      	mov	r1, r9
 8009bf8:	f7f6 ff90 	bl	8000b1c <__aeabi_dcmplt>
 8009bfc:	b110      	cbz	r0, 8009c04 <_printf_float+0x90>
 8009bfe:	232d      	movs	r3, #45	; 0x2d
 8009c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c04:	4b93      	ldr	r3, [pc, #588]	; (8009e54 <_printf_float+0x2e0>)
 8009c06:	4894      	ldr	r0, [pc, #592]	; (8009e58 <_printf_float+0x2e4>)
 8009c08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009c0c:	bf94      	ite	ls
 8009c0e:	4698      	movls	r8, r3
 8009c10:	4680      	movhi	r8, r0
 8009c12:	2303      	movs	r3, #3
 8009c14:	6123      	str	r3, [r4, #16]
 8009c16:	9b05      	ldr	r3, [sp, #20]
 8009c18:	f023 0204 	bic.w	r2, r3, #4
 8009c1c:	6022      	str	r2, [r4, #0]
 8009c1e:	f04f 0900 	mov.w	r9, #0
 8009c22:	9700      	str	r7, [sp, #0]
 8009c24:	4633      	mov	r3, r6
 8009c26:	aa0b      	add	r2, sp, #44	; 0x2c
 8009c28:	4621      	mov	r1, r4
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f000 f9d8 	bl	8009fe0 <_printf_common>
 8009c30:	3001      	adds	r0, #1
 8009c32:	f040 8090 	bne.w	8009d56 <_printf_float+0x1e2>
 8009c36:	f04f 30ff 	mov.w	r0, #4294967295
 8009c3a:	b00d      	add	sp, #52	; 0x34
 8009c3c:	ecbd 8b02 	vpop	{d8}
 8009c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c44:	4642      	mov	r2, r8
 8009c46:	464b      	mov	r3, r9
 8009c48:	4640      	mov	r0, r8
 8009c4a:	4649      	mov	r1, r9
 8009c4c:	f7f6 ff8e 	bl	8000b6c <__aeabi_dcmpun>
 8009c50:	b140      	cbz	r0, 8009c64 <_printf_float+0xf0>
 8009c52:	464b      	mov	r3, r9
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	bfbc      	itt	lt
 8009c58:	232d      	movlt	r3, #45	; 0x2d
 8009c5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c5e:	487f      	ldr	r0, [pc, #508]	; (8009e5c <_printf_float+0x2e8>)
 8009c60:	4b7f      	ldr	r3, [pc, #508]	; (8009e60 <_printf_float+0x2ec>)
 8009c62:	e7d1      	b.n	8009c08 <_printf_float+0x94>
 8009c64:	6863      	ldr	r3, [r4, #4]
 8009c66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009c6a:	9206      	str	r2, [sp, #24]
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	d13f      	bne.n	8009cf0 <_printf_float+0x17c>
 8009c70:	2306      	movs	r3, #6
 8009c72:	6063      	str	r3, [r4, #4]
 8009c74:	9b05      	ldr	r3, [sp, #20]
 8009c76:	6861      	ldr	r1, [r4, #4]
 8009c78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	9303      	str	r3, [sp, #12]
 8009c80:	ab0a      	add	r3, sp, #40	; 0x28
 8009c82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009c86:	ab09      	add	r3, sp, #36	; 0x24
 8009c88:	ec49 8b10 	vmov	d0, r8, r9
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	6022      	str	r2, [r4, #0]
 8009c90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c94:	4628      	mov	r0, r5
 8009c96:	f7ff fecd 	bl	8009a34 <__cvt>
 8009c9a:	9b06      	ldr	r3, [sp, #24]
 8009c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c9e:	2b47      	cmp	r3, #71	; 0x47
 8009ca0:	4680      	mov	r8, r0
 8009ca2:	d108      	bne.n	8009cb6 <_printf_float+0x142>
 8009ca4:	1cc8      	adds	r0, r1, #3
 8009ca6:	db02      	blt.n	8009cae <_printf_float+0x13a>
 8009ca8:	6863      	ldr	r3, [r4, #4]
 8009caa:	4299      	cmp	r1, r3
 8009cac:	dd41      	ble.n	8009d32 <_printf_float+0x1be>
 8009cae:	f1ab 0b02 	sub.w	fp, fp, #2
 8009cb2:	fa5f fb8b 	uxtb.w	fp, fp
 8009cb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cba:	d820      	bhi.n	8009cfe <_printf_float+0x18a>
 8009cbc:	3901      	subs	r1, #1
 8009cbe:	465a      	mov	r2, fp
 8009cc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009cc4:	9109      	str	r1, [sp, #36]	; 0x24
 8009cc6:	f7ff ff17 	bl	8009af8 <__exponent>
 8009cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ccc:	1813      	adds	r3, r2, r0
 8009cce:	2a01      	cmp	r2, #1
 8009cd0:	4681      	mov	r9, r0
 8009cd2:	6123      	str	r3, [r4, #16]
 8009cd4:	dc02      	bgt.n	8009cdc <_printf_float+0x168>
 8009cd6:	6822      	ldr	r2, [r4, #0]
 8009cd8:	07d2      	lsls	r2, r2, #31
 8009cda:	d501      	bpl.n	8009ce0 <_printf_float+0x16c>
 8009cdc:	3301      	adds	r3, #1
 8009cde:	6123      	str	r3, [r4, #16]
 8009ce0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d09c      	beq.n	8009c22 <_printf_float+0xae>
 8009ce8:	232d      	movs	r3, #45	; 0x2d
 8009cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cee:	e798      	b.n	8009c22 <_printf_float+0xae>
 8009cf0:	9a06      	ldr	r2, [sp, #24]
 8009cf2:	2a47      	cmp	r2, #71	; 0x47
 8009cf4:	d1be      	bne.n	8009c74 <_printf_float+0x100>
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1bc      	bne.n	8009c74 <_printf_float+0x100>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e7b9      	b.n	8009c72 <_printf_float+0xfe>
 8009cfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009d02:	d118      	bne.n	8009d36 <_printf_float+0x1c2>
 8009d04:	2900      	cmp	r1, #0
 8009d06:	6863      	ldr	r3, [r4, #4]
 8009d08:	dd0b      	ble.n	8009d22 <_printf_float+0x1ae>
 8009d0a:	6121      	str	r1, [r4, #16]
 8009d0c:	b913      	cbnz	r3, 8009d14 <_printf_float+0x1a0>
 8009d0e:	6822      	ldr	r2, [r4, #0]
 8009d10:	07d0      	lsls	r0, r2, #31
 8009d12:	d502      	bpl.n	8009d1a <_printf_float+0x1a6>
 8009d14:	3301      	adds	r3, #1
 8009d16:	440b      	add	r3, r1
 8009d18:	6123      	str	r3, [r4, #16]
 8009d1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d1c:	f04f 0900 	mov.w	r9, #0
 8009d20:	e7de      	b.n	8009ce0 <_printf_float+0x16c>
 8009d22:	b913      	cbnz	r3, 8009d2a <_printf_float+0x1b6>
 8009d24:	6822      	ldr	r2, [r4, #0]
 8009d26:	07d2      	lsls	r2, r2, #31
 8009d28:	d501      	bpl.n	8009d2e <_printf_float+0x1ba>
 8009d2a:	3302      	adds	r3, #2
 8009d2c:	e7f4      	b.n	8009d18 <_printf_float+0x1a4>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e7f2      	b.n	8009d18 <_printf_float+0x1a4>
 8009d32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d38:	4299      	cmp	r1, r3
 8009d3a:	db05      	blt.n	8009d48 <_printf_float+0x1d4>
 8009d3c:	6823      	ldr	r3, [r4, #0]
 8009d3e:	6121      	str	r1, [r4, #16]
 8009d40:	07d8      	lsls	r0, r3, #31
 8009d42:	d5ea      	bpl.n	8009d1a <_printf_float+0x1a6>
 8009d44:	1c4b      	adds	r3, r1, #1
 8009d46:	e7e7      	b.n	8009d18 <_printf_float+0x1a4>
 8009d48:	2900      	cmp	r1, #0
 8009d4a:	bfd4      	ite	le
 8009d4c:	f1c1 0202 	rsble	r2, r1, #2
 8009d50:	2201      	movgt	r2, #1
 8009d52:	4413      	add	r3, r2
 8009d54:	e7e0      	b.n	8009d18 <_printf_float+0x1a4>
 8009d56:	6823      	ldr	r3, [r4, #0]
 8009d58:	055a      	lsls	r2, r3, #21
 8009d5a:	d407      	bmi.n	8009d6c <_printf_float+0x1f8>
 8009d5c:	6923      	ldr	r3, [r4, #16]
 8009d5e:	4642      	mov	r2, r8
 8009d60:	4631      	mov	r1, r6
 8009d62:	4628      	mov	r0, r5
 8009d64:	47b8      	blx	r7
 8009d66:	3001      	adds	r0, #1
 8009d68:	d12c      	bne.n	8009dc4 <_printf_float+0x250>
 8009d6a:	e764      	b.n	8009c36 <_printf_float+0xc2>
 8009d6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d70:	f240 80e0 	bls.w	8009f34 <_printf_float+0x3c0>
 8009d74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d78:	2200      	movs	r2, #0
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	f7f6 fec4 	bl	8000b08 <__aeabi_dcmpeq>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	d034      	beq.n	8009dee <_printf_float+0x27a>
 8009d84:	4a37      	ldr	r2, [pc, #220]	; (8009e64 <_printf_float+0x2f0>)
 8009d86:	2301      	movs	r3, #1
 8009d88:	4631      	mov	r1, r6
 8009d8a:	4628      	mov	r0, r5
 8009d8c:	47b8      	blx	r7
 8009d8e:	3001      	adds	r0, #1
 8009d90:	f43f af51 	beq.w	8009c36 <_printf_float+0xc2>
 8009d94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	db02      	blt.n	8009da2 <_printf_float+0x22e>
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	07d8      	lsls	r0, r3, #31
 8009da0:	d510      	bpl.n	8009dc4 <_printf_float+0x250>
 8009da2:	ee18 3a10 	vmov	r3, s16
 8009da6:	4652      	mov	r2, sl
 8009da8:	4631      	mov	r1, r6
 8009daa:	4628      	mov	r0, r5
 8009dac:	47b8      	blx	r7
 8009dae:	3001      	adds	r0, #1
 8009db0:	f43f af41 	beq.w	8009c36 <_printf_float+0xc2>
 8009db4:	f04f 0800 	mov.w	r8, #0
 8009db8:	f104 091a 	add.w	r9, r4, #26
 8009dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	4543      	cmp	r3, r8
 8009dc2:	dc09      	bgt.n	8009dd8 <_printf_float+0x264>
 8009dc4:	6823      	ldr	r3, [r4, #0]
 8009dc6:	079b      	lsls	r3, r3, #30
 8009dc8:	f100 8105 	bmi.w	8009fd6 <_printf_float+0x462>
 8009dcc:	68e0      	ldr	r0, [r4, #12]
 8009dce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dd0:	4298      	cmp	r0, r3
 8009dd2:	bfb8      	it	lt
 8009dd4:	4618      	movlt	r0, r3
 8009dd6:	e730      	b.n	8009c3a <_printf_float+0xc6>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	464a      	mov	r2, r9
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4628      	mov	r0, r5
 8009de0:	47b8      	blx	r7
 8009de2:	3001      	adds	r0, #1
 8009de4:	f43f af27 	beq.w	8009c36 <_printf_float+0xc2>
 8009de8:	f108 0801 	add.w	r8, r8, #1
 8009dec:	e7e6      	b.n	8009dbc <_printf_float+0x248>
 8009dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	dc39      	bgt.n	8009e68 <_printf_float+0x2f4>
 8009df4:	4a1b      	ldr	r2, [pc, #108]	; (8009e64 <_printf_float+0x2f0>)
 8009df6:	2301      	movs	r3, #1
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	47b8      	blx	r7
 8009dfe:	3001      	adds	r0, #1
 8009e00:	f43f af19 	beq.w	8009c36 <_printf_float+0xc2>
 8009e04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	d102      	bne.n	8009e12 <_printf_float+0x29e>
 8009e0c:	6823      	ldr	r3, [r4, #0]
 8009e0e:	07d9      	lsls	r1, r3, #31
 8009e10:	d5d8      	bpl.n	8009dc4 <_printf_float+0x250>
 8009e12:	ee18 3a10 	vmov	r3, s16
 8009e16:	4652      	mov	r2, sl
 8009e18:	4631      	mov	r1, r6
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	47b8      	blx	r7
 8009e1e:	3001      	adds	r0, #1
 8009e20:	f43f af09 	beq.w	8009c36 <_printf_float+0xc2>
 8009e24:	f04f 0900 	mov.w	r9, #0
 8009e28:	f104 0a1a 	add.w	sl, r4, #26
 8009e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e2e:	425b      	negs	r3, r3
 8009e30:	454b      	cmp	r3, r9
 8009e32:	dc01      	bgt.n	8009e38 <_printf_float+0x2c4>
 8009e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e36:	e792      	b.n	8009d5e <_printf_float+0x1ea>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	4652      	mov	r2, sl
 8009e3c:	4631      	mov	r1, r6
 8009e3e:	4628      	mov	r0, r5
 8009e40:	47b8      	blx	r7
 8009e42:	3001      	adds	r0, #1
 8009e44:	f43f aef7 	beq.w	8009c36 <_printf_float+0xc2>
 8009e48:	f109 0901 	add.w	r9, r9, #1
 8009e4c:	e7ee      	b.n	8009e2c <_printf_float+0x2b8>
 8009e4e:	bf00      	nop
 8009e50:	7fefffff 	.word	0x7fefffff
 8009e54:	0800bc5d 	.word	0x0800bc5d
 8009e58:	0800bc61 	.word	0x0800bc61
 8009e5c:	0800bc69 	.word	0x0800bc69
 8009e60:	0800bc65 	.word	0x0800bc65
 8009e64:	0800bc6d 	.word	0x0800bc6d
 8009e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	bfa8      	it	ge
 8009e70:	461a      	movge	r2, r3
 8009e72:	2a00      	cmp	r2, #0
 8009e74:	4691      	mov	r9, r2
 8009e76:	dc37      	bgt.n	8009ee8 <_printf_float+0x374>
 8009e78:	f04f 0b00 	mov.w	fp, #0
 8009e7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e80:	f104 021a 	add.w	r2, r4, #26
 8009e84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e86:	9305      	str	r3, [sp, #20]
 8009e88:	eba3 0309 	sub.w	r3, r3, r9
 8009e8c:	455b      	cmp	r3, fp
 8009e8e:	dc33      	bgt.n	8009ef8 <_printf_float+0x384>
 8009e90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e94:	429a      	cmp	r2, r3
 8009e96:	db3b      	blt.n	8009f10 <_printf_float+0x39c>
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	07da      	lsls	r2, r3, #31
 8009e9c:	d438      	bmi.n	8009f10 <_printf_float+0x39c>
 8009e9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ea0:	9b05      	ldr	r3, [sp, #20]
 8009ea2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	eba2 0901 	sub.w	r9, r2, r1
 8009eaa:	4599      	cmp	r9, r3
 8009eac:	bfa8      	it	ge
 8009eae:	4699      	movge	r9, r3
 8009eb0:	f1b9 0f00 	cmp.w	r9, #0
 8009eb4:	dc35      	bgt.n	8009f22 <_printf_float+0x3ae>
 8009eb6:	f04f 0800 	mov.w	r8, #0
 8009eba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ebe:	f104 0a1a 	add.w	sl, r4, #26
 8009ec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ec6:	1a9b      	subs	r3, r3, r2
 8009ec8:	eba3 0309 	sub.w	r3, r3, r9
 8009ecc:	4543      	cmp	r3, r8
 8009ece:	f77f af79 	ble.w	8009dc4 <_printf_float+0x250>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	4652      	mov	r2, sl
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	4628      	mov	r0, r5
 8009eda:	47b8      	blx	r7
 8009edc:	3001      	adds	r0, #1
 8009ede:	f43f aeaa 	beq.w	8009c36 <_printf_float+0xc2>
 8009ee2:	f108 0801 	add.w	r8, r8, #1
 8009ee6:	e7ec      	b.n	8009ec2 <_printf_float+0x34e>
 8009ee8:	4613      	mov	r3, r2
 8009eea:	4631      	mov	r1, r6
 8009eec:	4642      	mov	r2, r8
 8009eee:	4628      	mov	r0, r5
 8009ef0:	47b8      	blx	r7
 8009ef2:	3001      	adds	r0, #1
 8009ef4:	d1c0      	bne.n	8009e78 <_printf_float+0x304>
 8009ef6:	e69e      	b.n	8009c36 <_printf_float+0xc2>
 8009ef8:	2301      	movs	r3, #1
 8009efa:	4631      	mov	r1, r6
 8009efc:	4628      	mov	r0, r5
 8009efe:	9205      	str	r2, [sp, #20]
 8009f00:	47b8      	blx	r7
 8009f02:	3001      	adds	r0, #1
 8009f04:	f43f ae97 	beq.w	8009c36 <_printf_float+0xc2>
 8009f08:	9a05      	ldr	r2, [sp, #20]
 8009f0a:	f10b 0b01 	add.w	fp, fp, #1
 8009f0e:	e7b9      	b.n	8009e84 <_printf_float+0x310>
 8009f10:	ee18 3a10 	vmov	r3, s16
 8009f14:	4652      	mov	r2, sl
 8009f16:	4631      	mov	r1, r6
 8009f18:	4628      	mov	r0, r5
 8009f1a:	47b8      	blx	r7
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d1be      	bne.n	8009e9e <_printf_float+0x32a>
 8009f20:	e689      	b.n	8009c36 <_printf_float+0xc2>
 8009f22:	9a05      	ldr	r2, [sp, #20]
 8009f24:	464b      	mov	r3, r9
 8009f26:	4442      	add	r2, r8
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	47b8      	blx	r7
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d1c1      	bne.n	8009eb6 <_printf_float+0x342>
 8009f32:	e680      	b.n	8009c36 <_printf_float+0xc2>
 8009f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f36:	2a01      	cmp	r2, #1
 8009f38:	dc01      	bgt.n	8009f3e <_printf_float+0x3ca>
 8009f3a:	07db      	lsls	r3, r3, #31
 8009f3c:	d538      	bpl.n	8009fb0 <_printf_float+0x43c>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	4642      	mov	r2, r8
 8009f42:	4631      	mov	r1, r6
 8009f44:	4628      	mov	r0, r5
 8009f46:	47b8      	blx	r7
 8009f48:	3001      	adds	r0, #1
 8009f4a:	f43f ae74 	beq.w	8009c36 <_printf_float+0xc2>
 8009f4e:	ee18 3a10 	vmov	r3, s16
 8009f52:	4652      	mov	r2, sl
 8009f54:	4631      	mov	r1, r6
 8009f56:	4628      	mov	r0, r5
 8009f58:	47b8      	blx	r7
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	f43f ae6b 	beq.w	8009c36 <_printf_float+0xc2>
 8009f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f64:	2200      	movs	r2, #0
 8009f66:	2300      	movs	r3, #0
 8009f68:	f7f6 fdce 	bl	8000b08 <__aeabi_dcmpeq>
 8009f6c:	b9d8      	cbnz	r0, 8009fa6 <_printf_float+0x432>
 8009f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f70:	f108 0201 	add.w	r2, r8, #1
 8009f74:	3b01      	subs	r3, #1
 8009f76:	4631      	mov	r1, r6
 8009f78:	4628      	mov	r0, r5
 8009f7a:	47b8      	blx	r7
 8009f7c:	3001      	adds	r0, #1
 8009f7e:	d10e      	bne.n	8009f9e <_printf_float+0x42a>
 8009f80:	e659      	b.n	8009c36 <_printf_float+0xc2>
 8009f82:	2301      	movs	r3, #1
 8009f84:	4652      	mov	r2, sl
 8009f86:	4631      	mov	r1, r6
 8009f88:	4628      	mov	r0, r5
 8009f8a:	47b8      	blx	r7
 8009f8c:	3001      	adds	r0, #1
 8009f8e:	f43f ae52 	beq.w	8009c36 <_printf_float+0xc2>
 8009f92:	f108 0801 	add.w	r8, r8, #1
 8009f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	4543      	cmp	r3, r8
 8009f9c:	dcf1      	bgt.n	8009f82 <_printf_float+0x40e>
 8009f9e:	464b      	mov	r3, r9
 8009fa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009fa4:	e6dc      	b.n	8009d60 <_printf_float+0x1ec>
 8009fa6:	f04f 0800 	mov.w	r8, #0
 8009faa:	f104 0a1a 	add.w	sl, r4, #26
 8009fae:	e7f2      	b.n	8009f96 <_printf_float+0x422>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	4642      	mov	r2, r8
 8009fb4:	e7df      	b.n	8009f76 <_printf_float+0x402>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	464a      	mov	r2, r9
 8009fba:	4631      	mov	r1, r6
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	47b8      	blx	r7
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f43f ae38 	beq.w	8009c36 <_printf_float+0xc2>
 8009fc6:	f108 0801 	add.w	r8, r8, #1
 8009fca:	68e3      	ldr	r3, [r4, #12]
 8009fcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009fce:	1a5b      	subs	r3, r3, r1
 8009fd0:	4543      	cmp	r3, r8
 8009fd2:	dcf0      	bgt.n	8009fb6 <_printf_float+0x442>
 8009fd4:	e6fa      	b.n	8009dcc <_printf_float+0x258>
 8009fd6:	f04f 0800 	mov.w	r8, #0
 8009fda:	f104 0919 	add.w	r9, r4, #25
 8009fde:	e7f4      	b.n	8009fca <_printf_float+0x456>

08009fe0 <_printf_common>:
 8009fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe4:	4616      	mov	r6, r2
 8009fe6:	4699      	mov	r9, r3
 8009fe8:	688a      	ldr	r2, [r1, #8]
 8009fea:	690b      	ldr	r3, [r1, #16]
 8009fec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	bfb8      	it	lt
 8009ff4:	4613      	movlt	r3, r2
 8009ff6:	6033      	str	r3, [r6, #0]
 8009ff8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ffc:	4607      	mov	r7, r0
 8009ffe:	460c      	mov	r4, r1
 800a000:	b10a      	cbz	r2, 800a006 <_printf_common+0x26>
 800a002:	3301      	adds	r3, #1
 800a004:	6033      	str	r3, [r6, #0]
 800a006:	6823      	ldr	r3, [r4, #0]
 800a008:	0699      	lsls	r1, r3, #26
 800a00a:	bf42      	ittt	mi
 800a00c:	6833      	ldrmi	r3, [r6, #0]
 800a00e:	3302      	addmi	r3, #2
 800a010:	6033      	strmi	r3, [r6, #0]
 800a012:	6825      	ldr	r5, [r4, #0]
 800a014:	f015 0506 	ands.w	r5, r5, #6
 800a018:	d106      	bne.n	800a028 <_printf_common+0x48>
 800a01a:	f104 0a19 	add.w	sl, r4, #25
 800a01e:	68e3      	ldr	r3, [r4, #12]
 800a020:	6832      	ldr	r2, [r6, #0]
 800a022:	1a9b      	subs	r3, r3, r2
 800a024:	42ab      	cmp	r3, r5
 800a026:	dc26      	bgt.n	800a076 <_printf_common+0x96>
 800a028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a02c:	1e13      	subs	r3, r2, #0
 800a02e:	6822      	ldr	r2, [r4, #0]
 800a030:	bf18      	it	ne
 800a032:	2301      	movne	r3, #1
 800a034:	0692      	lsls	r2, r2, #26
 800a036:	d42b      	bmi.n	800a090 <_printf_common+0xb0>
 800a038:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a03c:	4649      	mov	r1, r9
 800a03e:	4638      	mov	r0, r7
 800a040:	47c0      	blx	r8
 800a042:	3001      	adds	r0, #1
 800a044:	d01e      	beq.n	800a084 <_printf_common+0xa4>
 800a046:	6823      	ldr	r3, [r4, #0]
 800a048:	68e5      	ldr	r5, [r4, #12]
 800a04a:	6832      	ldr	r2, [r6, #0]
 800a04c:	f003 0306 	and.w	r3, r3, #6
 800a050:	2b04      	cmp	r3, #4
 800a052:	bf08      	it	eq
 800a054:	1aad      	subeq	r5, r5, r2
 800a056:	68a3      	ldr	r3, [r4, #8]
 800a058:	6922      	ldr	r2, [r4, #16]
 800a05a:	bf0c      	ite	eq
 800a05c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a060:	2500      	movne	r5, #0
 800a062:	4293      	cmp	r3, r2
 800a064:	bfc4      	itt	gt
 800a066:	1a9b      	subgt	r3, r3, r2
 800a068:	18ed      	addgt	r5, r5, r3
 800a06a:	2600      	movs	r6, #0
 800a06c:	341a      	adds	r4, #26
 800a06e:	42b5      	cmp	r5, r6
 800a070:	d11a      	bne.n	800a0a8 <_printf_common+0xc8>
 800a072:	2000      	movs	r0, #0
 800a074:	e008      	b.n	800a088 <_printf_common+0xa8>
 800a076:	2301      	movs	r3, #1
 800a078:	4652      	mov	r2, sl
 800a07a:	4649      	mov	r1, r9
 800a07c:	4638      	mov	r0, r7
 800a07e:	47c0      	blx	r8
 800a080:	3001      	adds	r0, #1
 800a082:	d103      	bne.n	800a08c <_printf_common+0xac>
 800a084:	f04f 30ff 	mov.w	r0, #4294967295
 800a088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a08c:	3501      	adds	r5, #1
 800a08e:	e7c6      	b.n	800a01e <_printf_common+0x3e>
 800a090:	18e1      	adds	r1, r4, r3
 800a092:	1c5a      	adds	r2, r3, #1
 800a094:	2030      	movs	r0, #48	; 0x30
 800a096:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a09a:	4422      	add	r2, r4
 800a09c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0a4:	3302      	adds	r3, #2
 800a0a6:	e7c7      	b.n	800a038 <_printf_common+0x58>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	4622      	mov	r2, r4
 800a0ac:	4649      	mov	r1, r9
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	47c0      	blx	r8
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	d0e6      	beq.n	800a084 <_printf_common+0xa4>
 800a0b6:	3601      	adds	r6, #1
 800a0b8:	e7d9      	b.n	800a06e <_printf_common+0x8e>
	...

0800a0bc <_printf_i>:
 800a0bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	4691      	mov	r9, r2
 800a0c4:	7e27      	ldrb	r7, [r4, #24]
 800a0c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a0c8:	2f78      	cmp	r7, #120	; 0x78
 800a0ca:	4680      	mov	r8, r0
 800a0cc:	469a      	mov	sl, r3
 800a0ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0d2:	d807      	bhi.n	800a0e4 <_printf_i+0x28>
 800a0d4:	2f62      	cmp	r7, #98	; 0x62
 800a0d6:	d80a      	bhi.n	800a0ee <_printf_i+0x32>
 800a0d8:	2f00      	cmp	r7, #0
 800a0da:	f000 80d8 	beq.w	800a28e <_printf_i+0x1d2>
 800a0de:	2f58      	cmp	r7, #88	; 0x58
 800a0e0:	f000 80a3 	beq.w	800a22a <_printf_i+0x16e>
 800a0e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0ec:	e03a      	b.n	800a164 <_printf_i+0xa8>
 800a0ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0f2:	2b15      	cmp	r3, #21
 800a0f4:	d8f6      	bhi.n	800a0e4 <_printf_i+0x28>
 800a0f6:	a001      	add	r0, pc, #4	; (adr r0, 800a0fc <_printf_i+0x40>)
 800a0f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a0fc:	0800a155 	.word	0x0800a155
 800a100:	0800a169 	.word	0x0800a169
 800a104:	0800a0e5 	.word	0x0800a0e5
 800a108:	0800a0e5 	.word	0x0800a0e5
 800a10c:	0800a0e5 	.word	0x0800a0e5
 800a110:	0800a0e5 	.word	0x0800a0e5
 800a114:	0800a169 	.word	0x0800a169
 800a118:	0800a0e5 	.word	0x0800a0e5
 800a11c:	0800a0e5 	.word	0x0800a0e5
 800a120:	0800a0e5 	.word	0x0800a0e5
 800a124:	0800a0e5 	.word	0x0800a0e5
 800a128:	0800a275 	.word	0x0800a275
 800a12c:	0800a199 	.word	0x0800a199
 800a130:	0800a257 	.word	0x0800a257
 800a134:	0800a0e5 	.word	0x0800a0e5
 800a138:	0800a0e5 	.word	0x0800a0e5
 800a13c:	0800a297 	.word	0x0800a297
 800a140:	0800a0e5 	.word	0x0800a0e5
 800a144:	0800a199 	.word	0x0800a199
 800a148:	0800a0e5 	.word	0x0800a0e5
 800a14c:	0800a0e5 	.word	0x0800a0e5
 800a150:	0800a25f 	.word	0x0800a25f
 800a154:	680b      	ldr	r3, [r1, #0]
 800a156:	1d1a      	adds	r2, r3, #4
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	600a      	str	r2, [r1, #0]
 800a15c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a164:	2301      	movs	r3, #1
 800a166:	e0a3      	b.n	800a2b0 <_printf_i+0x1f4>
 800a168:	6825      	ldr	r5, [r4, #0]
 800a16a:	6808      	ldr	r0, [r1, #0]
 800a16c:	062e      	lsls	r6, r5, #24
 800a16e:	f100 0304 	add.w	r3, r0, #4
 800a172:	d50a      	bpl.n	800a18a <_printf_i+0xce>
 800a174:	6805      	ldr	r5, [r0, #0]
 800a176:	600b      	str	r3, [r1, #0]
 800a178:	2d00      	cmp	r5, #0
 800a17a:	da03      	bge.n	800a184 <_printf_i+0xc8>
 800a17c:	232d      	movs	r3, #45	; 0x2d
 800a17e:	426d      	negs	r5, r5
 800a180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a184:	485e      	ldr	r0, [pc, #376]	; (800a300 <_printf_i+0x244>)
 800a186:	230a      	movs	r3, #10
 800a188:	e019      	b.n	800a1be <_printf_i+0x102>
 800a18a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a18e:	6805      	ldr	r5, [r0, #0]
 800a190:	600b      	str	r3, [r1, #0]
 800a192:	bf18      	it	ne
 800a194:	b22d      	sxthne	r5, r5
 800a196:	e7ef      	b.n	800a178 <_printf_i+0xbc>
 800a198:	680b      	ldr	r3, [r1, #0]
 800a19a:	6825      	ldr	r5, [r4, #0]
 800a19c:	1d18      	adds	r0, r3, #4
 800a19e:	6008      	str	r0, [r1, #0]
 800a1a0:	0628      	lsls	r0, r5, #24
 800a1a2:	d501      	bpl.n	800a1a8 <_printf_i+0xec>
 800a1a4:	681d      	ldr	r5, [r3, #0]
 800a1a6:	e002      	b.n	800a1ae <_printf_i+0xf2>
 800a1a8:	0669      	lsls	r1, r5, #25
 800a1aa:	d5fb      	bpl.n	800a1a4 <_printf_i+0xe8>
 800a1ac:	881d      	ldrh	r5, [r3, #0]
 800a1ae:	4854      	ldr	r0, [pc, #336]	; (800a300 <_printf_i+0x244>)
 800a1b0:	2f6f      	cmp	r7, #111	; 0x6f
 800a1b2:	bf0c      	ite	eq
 800a1b4:	2308      	moveq	r3, #8
 800a1b6:	230a      	movne	r3, #10
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1be:	6866      	ldr	r6, [r4, #4]
 800a1c0:	60a6      	str	r6, [r4, #8]
 800a1c2:	2e00      	cmp	r6, #0
 800a1c4:	bfa2      	ittt	ge
 800a1c6:	6821      	ldrge	r1, [r4, #0]
 800a1c8:	f021 0104 	bicge.w	r1, r1, #4
 800a1cc:	6021      	strge	r1, [r4, #0]
 800a1ce:	b90d      	cbnz	r5, 800a1d4 <_printf_i+0x118>
 800a1d0:	2e00      	cmp	r6, #0
 800a1d2:	d04d      	beq.n	800a270 <_printf_i+0x1b4>
 800a1d4:	4616      	mov	r6, r2
 800a1d6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a1da:	fb03 5711 	mls	r7, r3, r1, r5
 800a1de:	5dc7      	ldrb	r7, [r0, r7]
 800a1e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a1e4:	462f      	mov	r7, r5
 800a1e6:	42bb      	cmp	r3, r7
 800a1e8:	460d      	mov	r5, r1
 800a1ea:	d9f4      	bls.n	800a1d6 <_printf_i+0x11a>
 800a1ec:	2b08      	cmp	r3, #8
 800a1ee:	d10b      	bne.n	800a208 <_printf_i+0x14c>
 800a1f0:	6823      	ldr	r3, [r4, #0]
 800a1f2:	07df      	lsls	r7, r3, #31
 800a1f4:	d508      	bpl.n	800a208 <_printf_i+0x14c>
 800a1f6:	6923      	ldr	r3, [r4, #16]
 800a1f8:	6861      	ldr	r1, [r4, #4]
 800a1fa:	4299      	cmp	r1, r3
 800a1fc:	bfde      	ittt	le
 800a1fe:	2330      	movle	r3, #48	; 0x30
 800a200:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a204:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a208:	1b92      	subs	r2, r2, r6
 800a20a:	6122      	str	r2, [r4, #16]
 800a20c:	f8cd a000 	str.w	sl, [sp]
 800a210:	464b      	mov	r3, r9
 800a212:	aa03      	add	r2, sp, #12
 800a214:	4621      	mov	r1, r4
 800a216:	4640      	mov	r0, r8
 800a218:	f7ff fee2 	bl	8009fe0 <_printf_common>
 800a21c:	3001      	adds	r0, #1
 800a21e:	d14c      	bne.n	800a2ba <_printf_i+0x1fe>
 800a220:	f04f 30ff 	mov.w	r0, #4294967295
 800a224:	b004      	add	sp, #16
 800a226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a22a:	4835      	ldr	r0, [pc, #212]	; (800a300 <_printf_i+0x244>)
 800a22c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a230:	6823      	ldr	r3, [r4, #0]
 800a232:	680e      	ldr	r6, [r1, #0]
 800a234:	061f      	lsls	r7, r3, #24
 800a236:	f856 5b04 	ldr.w	r5, [r6], #4
 800a23a:	600e      	str	r6, [r1, #0]
 800a23c:	d514      	bpl.n	800a268 <_printf_i+0x1ac>
 800a23e:	07d9      	lsls	r1, r3, #31
 800a240:	bf44      	itt	mi
 800a242:	f043 0320 	orrmi.w	r3, r3, #32
 800a246:	6023      	strmi	r3, [r4, #0]
 800a248:	b91d      	cbnz	r5, 800a252 <_printf_i+0x196>
 800a24a:	6823      	ldr	r3, [r4, #0]
 800a24c:	f023 0320 	bic.w	r3, r3, #32
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	2310      	movs	r3, #16
 800a254:	e7b0      	b.n	800a1b8 <_printf_i+0xfc>
 800a256:	6823      	ldr	r3, [r4, #0]
 800a258:	f043 0320 	orr.w	r3, r3, #32
 800a25c:	6023      	str	r3, [r4, #0]
 800a25e:	2378      	movs	r3, #120	; 0x78
 800a260:	4828      	ldr	r0, [pc, #160]	; (800a304 <_printf_i+0x248>)
 800a262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a266:	e7e3      	b.n	800a230 <_printf_i+0x174>
 800a268:	065e      	lsls	r6, r3, #25
 800a26a:	bf48      	it	mi
 800a26c:	b2ad      	uxthmi	r5, r5
 800a26e:	e7e6      	b.n	800a23e <_printf_i+0x182>
 800a270:	4616      	mov	r6, r2
 800a272:	e7bb      	b.n	800a1ec <_printf_i+0x130>
 800a274:	680b      	ldr	r3, [r1, #0]
 800a276:	6826      	ldr	r6, [r4, #0]
 800a278:	6960      	ldr	r0, [r4, #20]
 800a27a:	1d1d      	adds	r5, r3, #4
 800a27c:	600d      	str	r5, [r1, #0]
 800a27e:	0635      	lsls	r5, r6, #24
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	d501      	bpl.n	800a288 <_printf_i+0x1cc>
 800a284:	6018      	str	r0, [r3, #0]
 800a286:	e002      	b.n	800a28e <_printf_i+0x1d2>
 800a288:	0671      	lsls	r1, r6, #25
 800a28a:	d5fb      	bpl.n	800a284 <_printf_i+0x1c8>
 800a28c:	8018      	strh	r0, [r3, #0]
 800a28e:	2300      	movs	r3, #0
 800a290:	6123      	str	r3, [r4, #16]
 800a292:	4616      	mov	r6, r2
 800a294:	e7ba      	b.n	800a20c <_printf_i+0x150>
 800a296:	680b      	ldr	r3, [r1, #0]
 800a298:	1d1a      	adds	r2, r3, #4
 800a29a:	600a      	str	r2, [r1, #0]
 800a29c:	681e      	ldr	r6, [r3, #0]
 800a29e:	6862      	ldr	r2, [r4, #4]
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	f7f5 ffbc 	bl	8000220 <memchr>
 800a2a8:	b108      	cbz	r0, 800a2ae <_printf_i+0x1f2>
 800a2aa:	1b80      	subs	r0, r0, r6
 800a2ac:	6060      	str	r0, [r4, #4]
 800a2ae:	6863      	ldr	r3, [r4, #4]
 800a2b0:	6123      	str	r3, [r4, #16]
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2b8:	e7a8      	b.n	800a20c <_printf_i+0x150>
 800a2ba:	6923      	ldr	r3, [r4, #16]
 800a2bc:	4632      	mov	r2, r6
 800a2be:	4649      	mov	r1, r9
 800a2c0:	4640      	mov	r0, r8
 800a2c2:	47d0      	blx	sl
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	d0ab      	beq.n	800a220 <_printf_i+0x164>
 800a2c8:	6823      	ldr	r3, [r4, #0]
 800a2ca:	079b      	lsls	r3, r3, #30
 800a2cc:	d413      	bmi.n	800a2f6 <_printf_i+0x23a>
 800a2ce:	68e0      	ldr	r0, [r4, #12]
 800a2d0:	9b03      	ldr	r3, [sp, #12]
 800a2d2:	4298      	cmp	r0, r3
 800a2d4:	bfb8      	it	lt
 800a2d6:	4618      	movlt	r0, r3
 800a2d8:	e7a4      	b.n	800a224 <_printf_i+0x168>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4632      	mov	r2, r6
 800a2de:	4649      	mov	r1, r9
 800a2e0:	4640      	mov	r0, r8
 800a2e2:	47d0      	blx	sl
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	d09b      	beq.n	800a220 <_printf_i+0x164>
 800a2e8:	3501      	adds	r5, #1
 800a2ea:	68e3      	ldr	r3, [r4, #12]
 800a2ec:	9903      	ldr	r1, [sp, #12]
 800a2ee:	1a5b      	subs	r3, r3, r1
 800a2f0:	42ab      	cmp	r3, r5
 800a2f2:	dcf2      	bgt.n	800a2da <_printf_i+0x21e>
 800a2f4:	e7eb      	b.n	800a2ce <_printf_i+0x212>
 800a2f6:	2500      	movs	r5, #0
 800a2f8:	f104 0619 	add.w	r6, r4, #25
 800a2fc:	e7f5      	b.n	800a2ea <_printf_i+0x22e>
 800a2fe:	bf00      	nop
 800a300:	0800bc6f 	.word	0x0800bc6f
 800a304:	0800bc80 	.word	0x0800bc80

0800a308 <iprintf>:
 800a308:	b40f      	push	{r0, r1, r2, r3}
 800a30a:	4b0a      	ldr	r3, [pc, #40]	; (800a334 <iprintf+0x2c>)
 800a30c:	b513      	push	{r0, r1, r4, lr}
 800a30e:	681c      	ldr	r4, [r3, #0]
 800a310:	b124      	cbz	r4, 800a31c <iprintf+0x14>
 800a312:	69a3      	ldr	r3, [r4, #24]
 800a314:	b913      	cbnz	r3, 800a31c <iprintf+0x14>
 800a316:	4620      	mov	r0, r4
 800a318:	f7ff f82e 	bl	8009378 <__sinit>
 800a31c:	ab05      	add	r3, sp, #20
 800a31e:	9a04      	ldr	r2, [sp, #16]
 800a320:	68a1      	ldr	r1, [r4, #8]
 800a322:	9301      	str	r3, [sp, #4]
 800a324:	4620      	mov	r0, r4
 800a326:	f7ff fa55 	bl	80097d4 <_vfiprintf_r>
 800a32a:	b002      	add	sp, #8
 800a32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a330:	b004      	add	sp, #16
 800a332:	4770      	bx	lr
 800a334:	200002cc 	.word	0x200002cc

0800a338 <_sbrk_r>:
 800a338:	b538      	push	{r3, r4, r5, lr}
 800a33a:	4d06      	ldr	r5, [pc, #24]	; (800a354 <_sbrk_r+0x1c>)
 800a33c:	2300      	movs	r3, #0
 800a33e:	4604      	mov	r4, r0
 800a340:	4608      	mov	r0, r1
 800a342:	602b      	str	r3, [r5, #0]
 800a344:	f7f7 faa4 	bl	8001890 <_sbrk>
 800a348:	1c43      	adds	r3, r0, #1
 800a34a:	d102      	bne.n	800a352 <_sbrk_r+0x1a>
 800a34c:	682b      	ldr	r3, [r5, #0]
 800a34e:	b103      	cbz	r3, 800a352 <_sbrk_r+0x1a>
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	bd38      	pop	{r3, r4, r5, pc}
 800a354:	200008d4 	.word	0x200008d4

0800a358 <__sread>:
 800a358:	b510      	push	{r4, lr}
 800a35a:	460c      	mov	r4, r1
 800a35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a360:	f001 fb74 	bl	800ba4c <_read_r>
 800a364:	2800      	cmp	r0, #0
 800a366:	bfab      	itete	ge
 800a368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a36a:	89a3      	ldrhlt	r3, [r4, #12]
 800a36c:	181b      	addge	r3, r3, r0
 800a36e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a372:	bfac      	ite	ge
 800a374:	6563      	strge	r3, [r4, #84]	; 0x54
 800a376:	81a3      	strhlt	r3, [r4, #12]
 800a378:	bd10      	pop	{r4, pc}

0800a37a <__swrite>:
 800a37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a37e:	461f      	mov	r7, r3
 800a380:	898b      	ldrh	r3, [r1, #12]
 800a382:	05db      	lsls	r3, r3, #23
 800a384:	4605      	mov	r5, r0
 800a386:	460c      	mov	r4, r1
 800a388:	4616      	mov	r6, r2
 800a38a:	d505      	bpl.n	800a398 <__swrite+0x1e>
 800a38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a390:	2302      	movs	r3, #2
 800a392:	2200      	movs	r2, #0
 800a394:	f000 ffae 	bl	800b2f4 <_lseek_r>
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a39e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3a2:	81a3      	strh	r3, [r4, #12]
 800a3a4:	4632      	mov	r2, r6
 800a3a6:	463b      	mov	r3, r7
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ae:	f000 b871 	b.w	800a494 <_write_r>

0800a3b2 <__sseek>:
 800a3b2:	b510      	push	{r4, lr}
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ba:	f000 ff9b 	bl	800b2f4 <_lseek_r>
 800a3be:	1c43      	adds	r3, r0, #1
 800a3c0:	89a3      	ldrh	r3, [r4, #12]
 800a3c2:	bf15      	itete	ne
 800a3c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3ce:	81a3      	strheq	r3, [r4, #12]
 800a3d0:	bf18      	it	ne
 800a3d2:	81a3      	strhne	r3, [r4, #12]
 800a3d4:	bd10      	pop	{r4, pc}

0800a3d6 <__sclose>:
 800a3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3da:	f000 b8db 	b.w	800a594 <_close_r>

0800a3de <strcpy>:
 800a3de:	4603      	mov	r3, r0
 800a3e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3e4:	f803 2b01 	strb.w	r2, [r3], #1
 800a3e8:	2a00      	cmp	r2, #0
 800a3ea:	d1f9      	bne.n	800a3e0 <strcpy+0x2>
 800a3ec:	4770      	bx	lr
	...

0800a3f0 <__swbuf_r>:
 800a3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f2:	460e      	mov	r6, r1
 800a3f4:	4614      	mov	r4, r2
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	b118      	cbz	r0, 800a402 <__swbuf_r+0x12>
 800a3fa:	6983      	ldr	r3, [r0, #24]
 800a3fc:	b90b      	cbnz	r3, 800a402 <__swbuf_r+0x12>
 800a3fe:	f7fe ffbb 	bl	8009378 <__sinit>
 800a402:	4b21      	ldr	r3, [pc, #132]	; (800a488 <__swbuf_r+0x98>)
 800a404:	429c      	cmp	r4, r3
 800a406:	d12b      	bne.n	800a460 <__swbuf_r+0x70>
 800a408:	686c      	ldr	r4, [r5, #4]
 800a40a:	69a3      	ldr	r3, [r4, #24]
 800a40c:	60a3      	str	r3, [r4, #8]
 800a40e:	89a3      	ldrh	r3, [r4, #12]
 800a410:	071a      	lsls	r2, r3, #28
 800a412:	d52f      	bpl.n	800a474 <__swbuf_r+0x84>
 800a414:	6923      	ldr	r3, [r4, #16]
 800a416:	b36b      	cbz	r3, 800a474 <__swbuf_r+0x84>
 800a418:	6923      	ldr	r3, [r4, #16]
 800a41a:	6820      	ldr	r0, [r4, #0]
 800a41c:	1ac0      	subs	r0, r0, r3
 800a41e:	6963      	ldr	r3, [r4, #20]
 800a420:	b2f6      	uxtb	r6, r6
 800a422:	4283      	cmp	r3, r0
 800a424:	4637      	mov	r7, r6
 800a426:	dc04      	bgt.n	800a432 <__swbuf_r+0x42>
 800a428:	4621      	mov	r1, r4
 800a42a:	4628      	mov	r0, r5
 800a42c:	f7fe ff10 	bl	8009250 <_fflush_r>
 800a430:	bb30      	cbnz	r0, 800a480 <__swbuf_r+0x90>
 800a432:	68a3      	ldr	r3, [r4, #8]
 800a434:	3b01      	subs	r3, #1
 800a436:	60a3      	str	r3, [r4, #8]
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	1c5a      	adds	r2, r3, #1
 800a43c:	6022      	str	r2, [r4, #0]
 800a43e:	701e      	strb	r6, [r3, #0]
 800a440:	6963      	ldr	r3, [r4, #20]
 800a442:	3001      	adds	r0, #1
 800a444:	4283      	cmp	r3, r0
 800a446:	d004      	beq.n	800a452 <__swbuf_r+0x62>
 800a448:	89a3      	ldrh	r3, [r4, #12]
 800a44a:	07db      	lsls	r3, r3, #31
 800a44c:	d506      	bpl.n	800a45c <__swbuf_r+0x6c>
 800a44e:	2e0a      	cmp	r6, #10
 800a450:	d104      	bne.n	800a45c <__swbuf_r+0x6c>
 800a452:	4621      	mov	r1, r4
 800a454:	4628      	mov	r0, r5
 800a456:	f7fe fefb 	bl	8009250 <_fflush_r>
 800a45a:	b988      	cbnz	r0, 800a480 <__swbuf_r+0x90>
 800a45c:	4638      	mov	r0, r7
 800a45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a460:	4b0a      	ldr	r3, [pc, #40]	; (800a48c <__swbuf_r+0x9c>)
 800a462:	429c      	cmp	r4, r3
 800a464:	d101      	bne.n	800a46a <__swbuf_r+0x7a>
 800a466:	68ac      	ldr	r4, [r5, #8]
 800a468:	e7cf      	b.n	800a40a <__swbuf_r+0x1a>
 800a46a:	4b09      	ldr	r3, [pc, #36]	; (800a490 <__swbuf_r+0xa0>)
 800a46c:	429c      	cmp	r4, r3
 800a46e:	bf08      	it	eq
 800a470:	68ec      	ldreq	r4, [r5, #12]
 800a472:	e7ca      	b.n	800a40a <__swbuf_r+0x1a>
 800a474:	4621      	mov	r1, r4
 800a476:	4628      	mov	r0, r5
 800a478:	f000 f81e 	bl	800a4b8 <__swsetup_r>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d0cb      	beq.n	800a418 <__swbuf_r+0x28>
 800a480:	f04f 37ff 	mov.w	r7, #4294967295
 800a484:	e7ea      	b.n	800a45c <__swbuf_r+0x6c>
 800a486:	bf00      	nop
 800a488:	0800bc08 	.word	0x0800bc08
 800a48c:	0800bc28 	.word	0x0800bc28
 800a490:	0800bbe8 	.word	0x0800bbe8

0800a494 <_write_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4d07      	ldr	r5, [pc, #28]	; (800a4b4 <_write_r+0x20>)
 800a498:	4604      	mov	r4, r0
 800a49a:	4608      	mov	r0, r1
 800a49c:	4611      	mov	r1, r2
 800a49e:	2200      	movs	r2, #0
 800a4a0:	602a      	str	r2, [r5, #0]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	f7f7 f9a3 	bl	80017ee <_write>
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	d102      	bne.n	800a4b2 <_write_r+0x1e>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	b103      	cbz	r3, 800a4b2 <_write_r+0x1e>
 800a4b0:	6023      	str	r3, [r4, #0]
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	200008d4 	.word	0x200008d4

0800a4b8 <__swsetup_r>:
 800a4b8:	4b32      	ldr	r3, [pc, #200]	; (800a584 <__swsetup_r+0xcc>)
 800a4ba:	b570      	push	{r4, r5, r6, lr}
 800a4bc:	681d      	ldr	r5, [r3, #0]
 800a4be:	4606      	mov	r6, r0
 800a4c0:	460c      	mov	r4, r1
 800a4c2:	b125      	cbz	r5, 800a4ce <__swsetup_r+0x16>
 800a4c4:	69ab      	ldr	r3, [r5, #24]
 800a4c6:	b913      	cbnz	r3, 800a4ce <__swsetup_r+0x16>
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	f7fe ff55 	bl	8009378 <__sinit>
 800a4ce:	4b2e      	ldr	r3, [pc, #184]	; (800a588 <__swsetup_r+0xd0>)
 800a4d0:	429c      	cmp	r4, r3
 800a4d2:	d10f      	bne.n	800a4f4 <__swsetup_r+0x3c>
 800a4d4:	686c      	ldr	r4, [r5, #4]
 800a4d6:	89a3      	ldrh	r3, [r4, #12]
 800a4d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4dc:	0719      	lsls	r1, r3, #28
 800a4de:	d42c      	bmi.n	800a53a <__swsetup_r+0x82>
 800a4e0:	06dd      	lsls	r5, r3, #27
 800a4e2:	d411      	bmi.n	800a508 <__swsetup_r+0x50>
 800a4e4:	2309      	movs	r3, #9
 800a4e6:	6033      	str	r3, [r6, #0]
 800a4e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4ec:	81a3      	strh	r3, [r4, #12]
 800a4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f2:	e03e      	b.n	800a572 <__swsetup_r+0xba>
 800a4f4:	4b25      	ldr	r3, [pc, #148]	; (800a58c <__swsetup_r+0xd4>)
 800a4f6:	429c      	cmp	r4, r3
 800a4f8:	d101      	bne.n	800a4fe <__swsetup_r+0x46>
 800a4fa:	68ac      	ldr	r4, [r5, #8]
 800a4fc:	e7eb      	b.n	800a4d6 <__swsetup_r+0x1e>
 800a4fe:	4b24      	ldr	r3, [pc, #144]	; (800a590 <__swsetup_r+0xd8>)
 800a500:	429c      	cmp	r4, r3
 800a502:	bf08      	it	eq
 800a504:	68ec      	ldreq	r4, [r5, #12]
 800a506:	e7e6      	b.n	800a4d6 <__swsetup_r+0x1e>
 800a508:	0758      	lsls	r0, r3, #29
 800a50a:	d512      	bpl.n	800a532 <__swsetup_r+0x7a>
 800a50c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a50e:	b141      	cbz	r1, 800a522 <__swsetup_r+0x6a>
 800a510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a514:	4299      	cmp	r1, r3
 800a516:	d002      	beq.n	800a51e <__swsetup_r+0x66>
 800a518:	4630      	mov	r0, r6
 800a51a:	f7ff f887 	bl	800962c <_free_r>
 800a51e:	2300      	movs	r3, #0
 800a520:	6363      	str	r3, [r4, #52]	; 0x34
 800a522:	89a3      	ldrh	r3, [r4, #12]
 800a524:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a528:	81a3      	strh	r3, [r4, #12]
 800a52a:	2300      	movs	r3, #0
 800a52c:	6063      	str	r3, [r4, #4]
 800a52e:	6923      	ldr	r3, [r4, #16]
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	89a3      	ldrh	r3, [r4, #12]
 800a534:	f043 0308 	orr.w	r3, r3, #8
 800a538:	81a3      	strh	r3, [r4, #12]
 800a53a:	6923      	ldr	r3, [r4, #16]
 800a53c:	b94b      	cbnz	r3, 800a552 <__swsetup_r+0x9a>
 800a53e:	89a3      	ldrh	r3, [r4, #12]
 800a540:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a548:	d003      	beq.n	800a552 <__swsetup_r+0x9a>
 800a54a:	4621      	mov	r1, r4
 800a54c:	4630      	mov	r0, r6
 800a54e:	f7ff f80f 	bl	8009570 <__smakebuf_r>
 800a552:	89a0      	ldrh	r0, [r4, #12]
 800a554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a558:	f010 0301 	ands.w	r3, r0, #1
 800a55c:	d00a      	beq.n	800a574 <__swsetup_r+0xbc>
 800a55e:	2300      	movs	r3, #0
 800a560:	60a3      	str	r3, [r4, #8]
 800a562:	6963      	ldr	r3, [r4, #20]
 800a564:	425b      	negs	r3, r3
 800a566:	61a3      	str	r3, [r4, #24]
 800a568:	6923      	ldr	r3, [r4, #16]
 800a56a:	b943      	cbnz	r3, 800a57e <__swsetup_r+0xc6>
 800a56c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a570:	d1ba      	bne.n	800a4e8 <__swsetup_r+0x30>
 800a572:	bd70      	pop	{r4, r5, r6, pc}
 800a574:	0781      	lsls	r1, r0, #30
 800a576:	bf58      	it	pl
 800a578:	6963      	ldrpl	r3, [r4, #20]
 800a57a:	60a3      	str	r3, [r4, #8]
 800a57c:	e7f4      	b.n	800a568 <__swsetup_r+0xb0>
 800a57e:	2000      	movs	r0, #0
 800a580:	e7f7      	b.n	800a572 <__swsetup_r+0xba>
 800a582:	bf00      	nop
 800a584:	200002cc 	.word	0x200002cc
 800a588:	0800bc08 	.word	0x0800bc08
 800a58c:	0800bc28 	.word	0x0800bc28
 800a590:	0800bbe8 	.word	0x0800bbe8

0800a594 <_close_r>:
 800a594:	b538      	push	{r3, r4, r5, lr}
 800a596:	4d06      	ldr	r5, [pc, #24]	; (800a5b0 <_close_r+0x1c>)
 800a598:	2300      	movs	r3, #0
 800a59a:	4604      	mov	r4, r0
 800a59c:	4608      	mov	r0, r1
 800a59e:	602b      	str	r3, [r5, #0]
 800a5a0:	f7f7 f941 	bl	8001826 <_close>
 800a5a4:	1c43      	adds	r3, r0, #1
 800a5a6:	d102      	bne.n	800a5ae <_close_r+0x1a>
 800a5a8:	682b      	ldr	r3, [r5, #0]
 800a5aa:	b103      	cbz	r3, 800a5ae <_close_r+0x1a>
 800a5ac:	6023      	str	r3, [r4, #0]
 800a5ae:	bd38      	pop	{r3, r4, r5, pc}
 800a5b0:	200008d4 	.word	0x200008d4

0800a5b4 <quorem>:
 800a5b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	6903      	ldr	r3, [r0, #16]
 800a5ba:	690c      	ldr	r4, [r1, #16]
 800a5bc:	42a3      	cmp	r3, r4
 800a5be:	4607      	mov	r7, r0
 800a5c0:	f2c0 8081 	blt.w	800a6c6 <quorem+0x112>
 800a5c4:	3c01      	subs	r4, #1
 800a5c6:	f101 0814 	add.w	r8, r1, #20
 800a5ca:	f100 0514 	add.w	r5, r0, #20
 800a5ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5d2:	9301      	str	r3, [sp, #4]
 800a5d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a5e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5ec:	d331      	bcc.n	800a652 <quorem+0x9e>
 800a5ee:	f04f 0e00 	mov.w	lr, #0
 800a5f2:	4640      	mov	r0, r8
 800a5f4:	46ac      	mov	ip, r5
 800a5f6:	46f2      	mov	sl, lr
 800a5f8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5fc:	b293      	uxth	r3, r2
 800a5fe:	fb06 e303 	mla	r3, r6, r3, lr
 800a602:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a606:	b29b      	uxth	r3, r3
 800a608:	ebaa 0303 	sub.w	r3, sl, r3
 800a60c:	0c12      	lsrs	r2, r2, #16
 800a60e:	f8dc a000 	ldr.w	sl, [ip]
 800a612:	fb06 e202 	mla	r2, r6, r2, lr
 800a616:	fa13 f38a 	uxtah	r3, r3, sl
 800a61a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a61e:	fa1f fa82 	uxth.w	sl, r2
 800a622:	f8dc 2000 	ldr.w	r2, [ip]
 800a626:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a62a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a62e:	b29b      	uxth	r3, r3
 800a630:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a634:	4581      	cmp	r9, r0
 800a636:	f84c 3b04 	str.w	r3, [ip], #4
 800a63a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a63e:	d2db      	bcs.n	800a5f8 <quorem+0x44>
 800a640:	f855 300b 	ldr.w	r3, [r5, fp]
 800a644:	b92b      	cbnz	r3, 800a652 <quorem+0x9e>
 800a646:	9b01      	ldr	r3, [sp, #4]
 800a648:	3b04      	subs	r3, #4
 800a64a:	429d      	cmp	r5, r3
 800a64c:	461a      	mov	r2, r3
 800a64e:	d32e      	bcc.n	800a6ae <quorem+0xfa>
 800a650:	613c      	str	r4, [r7, #16]
 800a652:	4638      	mov	r0, r7
 800a654:	f001 f8ea 	bl	800b82c <__mcmp>
 800a658:	2800      	cmp	r0, #0
 800a65a:	db24      	blt.n	800a6a6 <quorem+0xf2>
 800a65c:	3601      	adds	r6, #1
 800a65e:	4628      	mov	r0, r5
 800a660:	f04f 0c00 	mov.w	ip, #0
 800a664:	f858 2b04 	ldr.w	r2, [r8], #4
 800a668:	f8d0 e000 	ldr.w	lr, [r0]
 800a66c:	b293      	uxth	r3, r2
 800a66e:	ebac 0303 	sub.w	r3, ip, r3
 800a672:	0c12      	lsrs	r2, r2, #16
 800a674:	fa13 f38e 	uxtah	r3, r3, lr
 800a678:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a67c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a680:	b29b      	uxth	r3, r3
 800a682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a686:	45c1      	cmp	r9, r8
 800a688:	f840 3b04 	str.w	r3, [r0], #4
 800a68c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a690:	d2e8      	bcs.n	800a664 <quorem+0xb0>
 800a692:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a696:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a69a:	b922      	cbnz	r2, 800a6a6 <quorem+0xf2>
 800a69c:	3b04      	subs	r3, #4
 800a69e:	429d      	cmp	r5, r3
 800a6a0:	461a      	mov	r2, r3
 800a6a2:	d30a      	bcc.n	800a6ba <quorem+0x106>
 800a6a4:	613c      	str	r4, [r7, #16]
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	b003      	add	sp, #12
 800a6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ae:	6812      	ldr	r2, [r2, #0]
 800a6b0:	3b04      	subs	r3, #4
 800a6b2:	2a00      	cmp	r2, #0
 800a6b4:	d1cc      	bne.n	800a650 <quorem+0x9c>
 800a6b6:	3c01      	subs	r4, #1
 800a6b8:	e7c7      	b.n	800a64a <quorem+0x96>
 800a6ba:	6812      	ldr	r2, [r2, #0]
 800a6bc:	3b04      	subs	r3, #4
 800a6be:	2a00      	cmp	r2, #0
 800a6c0:	d1f0      	bne.n	800a6a4 <quorem+0xf0>
 800a6c2:	3c01      	subs	r4, #1
 800a6c4:	e7eb      	b.n	800a69e <quorem+0xea>
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	e7ee      	b.n	800a6a8 <quorem+0xf4>
 800a6ca:	0000      	movs	r0, r0
 800a6cc:	0000      	movs	r0, r0
	...

0800a6d0 <_dtoa_r>:
 800a6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	ed2d 8b02 	vpush	{d8}
 800a6d8:	ec57 6b10 	vmov	r6, r7, d0
 800a6dc:	b095      	sub	sp, #84	; 0x54
 800a6de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a6e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a6e4:	9105      	str	r1, [sp, #20]
 800a6e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6f0:	b975      	cbnz	r5, 800a710 <_dtoa_r+0x40>
 800a6f2:	2010      	movs	r0, #16
 800a6f4:	f7fe ff7c 	bl	80095f0 <malloc>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	6260      	str	r0, [r4, #36]	; 0x24
 800a6fc:	b920      	cbnz	r0, 800a708 <_dtoa_r+0x38>
 800a6fe:	4bb2      	ldr	r3, [pc, #712]	; (800a9c8 <_dtoa_r+0x2f8>)
 800a700:	21ea      	movs	r1, #234	; 0xea
 800a702:	48b2      	ldr	r0, [pc, #712]	; (800a9cc <_dtoa_r+0x2fc>)
 800a704:	f001 f9b4 	bl	800ba70 <__assert_func>
 800a708:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a70c:	6005      	str	r5, [r0, #0]
 800a70e:	60c5      	str	r5, [r0, #12]
 800a710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a712:	6819      	ldr	r1, [r3, #0]
 800a714:	b151      	cbz	r1, 800a72c <_dtoa_r+0x5c>
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	604a      	str	r2, [r1, #4]
 800a71a:	2301      	movs	r3, #1
 800a71c:	4093      	lsls	r3, r2
 800a71e:	608b      	str	r3, [r1, #8]
 800a720:	4620      	mov	r0, r4
 800a722:	f000 fe45 	bl	800b3b0 <_Bfree>
 800a726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a728:	2200      	movs	r2, #0
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	1e3b      	subs	r3, r7, #0
 800a72e:	bfb9      	ittee	lt
 800a730:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a734:	9303      	strlt	r3, [sp, #12]
 800a736:	2300      	movge	r3, #0
 800a738:	f8c8 3000 	strge.w	r3, [r8]
 800a73c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a740:	4ba3      	ldr	r3, [pc, #652]	; (800a9d0 <_dtoa_r+0x300>)
 800a742:	bfbc      	itt	lt
 800a744:	2201      	movlt	r2, #1
 800a746:	f8c8 2000 	strlt.w	r2, [r8]
 800a74a:	ea33 0309 	bics.w	r3, r3, r9
 800a74e:	d11b      	bne.n	800a788 <_dtoa_r+0xb8>
 800a750:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a752:	f242 730f 	movw	r3, #9999	; 0x270f
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a75c:	4333      	orrs	r3, r6
 800a75e:	f000 857a 	beq.w	800b256 <_dtoa_r+0xb86>
 800a762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a764:	b963      	cbnz	r3, 800a780 <_dtoa_r+0xb0>
 800a766:	4b9b      	ldr	r3, [pc, #620]	; (800a9d4 <_dtoa_r+0x304>)
 800a768:	e024      	b.n	800a7b4 <_dtoa_r+0xe4>
 800a76a:	4b9b      	ldr	r3, [pc, #620]	; (800a9d8 <_dtoa_r+0x308>)
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	3308      	adds	r3, #8
 800a770:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a772:	6013      	str	r3, [r2, #0]
 800a774:	9800      	ldr	r0, [sp, #0]
 800a776:	b015      	add	sp, #84	; 0x54
 800a778:	ecbd 8b02 	vpop	{d8}
 800a77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a780:	4b94      	ldr	r3, [pc, #592]	; (800a9d4 <_dtoa_r+0x304>)
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	3303      	adds	r3, #3
 800a786:	e7f3      	b.n	800a770 <_dtoa_r+0xa0>
 800a788:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a78c:	2200      	movs	r2, #0
 800a78e:	ec51 0b17 	vmov	r0, r1, d7
 800a792:	2300      	movs	r3, #0
 800a794:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a798:	f7f6 f9b6 	bl	8000b08 <__aeabi_dcmpeq>
 800a79c:	4680      	mov	r8, r0
 800a79e:	b158      	cbz	r0, 800a7b8 <_dtoa_r+0xe8>
 800a7a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	6013      	str	r3, [r2, #0]
 800a7a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 8551 	beq.w	800b250 <_dtoa_r+0xb80>
 800a7ae:	488b      	ldr	r0, [pc, #556]	; (800a9dc <_dtoa_r+0x30c>)
 800a7b0:	6018      	str	r0, [r3, #0]
 800a7b2:	1e43      	subs	r3, r0, #1
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	e7dd      	b.n	800a774 <_dtoa_r+0xa4>
 800a7b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a7bc:	aa12      	add	r2, sp, #72	; 0x48
 800a7be:	a913      	add	r1, sp, #76	; 0x4c
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f001 f8d7 	bl	800b974 <__d2b>
 800a7c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7ca:	4683      	mov	fp, r0
 800a7cc:	2d00      	cmp	r5, #0
 800a7ce:	d07c      	beq.n	800a8ca <_dtoa_r+0x1fa>
 800a7d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a7d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a7de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a7e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a7e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a7ea:	4b7d      	ldr	r3, [pc, #500]	; (800a9e0 <_dtoa_r+0x310>)
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	f7f5 fd69 	bl	80002c8 <__aeabi_dsub>
 800a7f6:	a36e      	add	r3, pc, #440	; (adr r3, 800a9b0 <_dtoa_r+0x2e0>)
 800a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fc:	f7f5 ff1c 	bl	8000638 <__aeabi_dmul>
 800a800:	a36d      	add	r3, pc, #436	; (adr r3, 800a9b8 <_dtoa_r+0x2e8>)
 800a802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a806:	f7f5 fd61 	bl	80002cc <__adddf3>
 800a80a:	4606      	mov	r6, r0
 800a80c:	4628      	mov	r0, r5
 800a80e:	460f      	mov	r7, r1
 800a810:	f7f5 fea8 	bl	8000564 <__aeabi_i2d>
 800a814:	a36a      	add	r3, pc, #424	; (adr r3, 800a9c0 <_dtoa_r+0x2f0>)
 800a816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81a:	f7f5 ff0d 	bl	8000638 <__aeabi_dmul>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	4630      	mov	r0, r6
 800a824:	4639      	mov	r1, r7
 800a826:	f7f5 fd51 	bl	80002cc <__adddf3>
 800a82a:	4606      	mov	r6, r0
 800a82c:	460f      	mov	r7, r1
 800a82e:	f7f6 f9b3 	bl	8000b98 <__aeabi_d2iz>
 800a832:	2200      	movs	r2, #0
 800a834:	4682      	mov	sl, r0
 800a836:	2300      	movs	r3, #0
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f7f6 f96e 	bl	8000b1c <__aeabi_dcmplt>
 800a840:	b148      	cbz	r0, 800a856 <_dtoa_r+0x186>
 800a842:	4650      	mov	r0, sl
 800a844:	f7f5 fe8e 	bl	8000564 <__aeabi_i2d>
 800a848:	4632      	mov	r2, r6
 800a84a:	463b      	mov	r3, r7
 800a84c:	f7f6 f95c 	bl	8000b08 <__aeabi_dcmpeq>
 800a850:	b908      	cbnz	r0, 800a856 <_dtoa_r+0x186>
 800a852:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a856:	f1ba 0f16 	cmp.w	sl, #22
 800a85a:	d854      	bhi.n	800a906 <_dtoa_r+0x236>
 800a85c:	4b61      	ldr	r3, [pc, #388]	; (800a9e4 <_dtoa_r+0x314>)
 800a85e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a86a:	f7f6 f957 	bl	8000b1c <__aeabi_dcmplt>
 800a86e:	2800      	cmp	r0, #0
 800a870:	d04b      	beq.n	800a90a <_dtoa_r+0x23a>
 800a872:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a876:	2300      	movs	r3, #0
 800a878:	930e      	str	r3, [sp, #56]	; 0x38
 800a87a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a87c:	1b5d      	subs	r5, r3, r5
 800a87e:	1e6b      	subs	r3, r5, #1
 800a880:	9304      	str	r3, [sp, #16]
 800a882:	bf43      	ittte	mi
 800a884:	2300      	movmi	r3, #0
 800a886:	f1c5 0801 	rsbmi	r8, r5, #1
 800a88a:	9304      	strmi	r3, [sp, #16]
 800a88c:	f04f 0800 	movpl.w	r8, #0
 800a890:	f1ba 0f00 	cmp.w	sl, #0
 800a894:	db3b      	blt.n	800a90e <_dtoa_r+0x23e>
 800a896:	9b04      	ldr	r3, [sp, #16]
 800a898:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a89c:	4453      	add	r3, sl
 800a89e:	9304      	str	r3, [sp, #16]
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	9306      	str	r3, [sp, #24]
 800a8a4:	9b05      	ldr	r3, [sp, #20]
 800a8a6:	2b09      	cmp	r3, #9
 800a8a8:	d869      	bhi.n	800a97e <_dtoa_r+0x2ae>
 800a8aa:	2b05      	cmp	r3, #5
 800a8ac:	bfc4      	itt	gt
 800a8ae:	3b04      	subgt	r3, #4
 800a8b0:	9305      	strgt	r3, [sp, #20]
 800a8b2:	9b05      	ldr	r3, [sp, #20]
 800a8b4:	f1a3 0302 	sub.w	r3, r3, #2
 800a8b8:	bfcc      	ite	gt
 800a8ba:	2500      	movgt	r5, #0
 800a8bc:	2501      	movle	r5, #1
 800a8be:	2b03      	cmp	r3, #3
 800a8c0:	d869      	bhi.n	800a996 <_dtoa_r+0x2c6>
 800a8c2:	e8df f003 	tbb	[pc, r3]
 800a8c6:	4e2c      	.short	0x4e2c
 800a8c8:	5a4c      	.short	0x5a4c
 800a8ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a8ce:	441d      	add	r5, r3
 800a8d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a8d4:	2b20      	cmp	r3, #32
 800a8d6:	bfc1      	itttt	gt
 800a8d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a8dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a8e0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a8e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a8e8:	bfda      	itte	le
 800a8ea:	f1c3 0320 	rsble	r3, r3, #32
 800a8ee:	fa06 f003 	lslle.w	r0, r6, r3
 800a8f2:	4318      	orrgt	r0, r3
 800a8f4:	f7f5 fe26 	bl	8000544 <__aeabi_ui2d>
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a900:	3d01      	subs	r5, #1
 800a902:	9310      	str	r3, [sp, #64]	; 0x40
 800a904:	e771      	b.n	800a7ea <_dtoa_r+0x11a>
 800a906:	2301      	movs	r3, #1
 800a908:	e7b6      	b.n	800a878 <_dtoa_r+0x1a8>
 800a90a:	900e      	str	r0, [sp, #56]	; 0x38
 800a90c:	e7b5      	b.n	800a87a <_dtoa_r+0x1aa>
 800a90e:	f1ca 0300 	rsb	r3, sl, #0
 800a912:	9306      	str	r3, [sp, #24]
 800a914:	2300      	movs	r3, #0
 800a916:	eba8 080a 	sub.w	r8, r8, sl
 800a91a:	930d      	str	r3, [sp, #52]	; 0x34
 800a91c:	e7c2      	b.n	800a8a4 <_dtoa_r+0x1d4>
 800a91e:	2300      	movs	r3, #0
 800a920:	9308      	str	r3, [sp, #32]
 800a922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a924:	2b00      	cmp	r3, #0
 800a926:	dc39      	bgt.n	800a99c <_dtoa_r+0x2cc>
 800a928:	f04f 0901 	mov.w	r9, #1
 800a92c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a930:	464b      	mov	r3, r9
 800a932:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a936:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a938:	2200      	movs	r2, #0
 800a93a:	6042      	str	r2, [r0, #4]
 800a93c:	2204      	movs	r2, #4
 800a93e:	f102 0614 	add.w	r6, r2, #20
 800a942:	429e      	cmp	r6, r3
 800a944:	6841      	ldr	r1, [r0, #4]
 800a946:	d92f      	bls.n	800a9a8 <_dtoa_r+0x2d8>
 800a948:	4620      	mov	r0, r4
 800a94a:	f000 fcf1 	bl	800b330 <_Balloc>
 800a94e:	9000      	str	r0, [sp, #0]
 800a950:	2800      	cmp	r0, #0
 800a952:	d14b      	bne.n	800a9ec <_dtoa_r+0x31c>
 800a954:	4b24      	ldr	r3, [pc, #144]	; (800a9e8 <_dtoa_r+0x318>)
 800a956:	4602      	mov	r2, r0
 800a958:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a95c:	e6d1      	b.n	800a702 <_dtoa_r+0x32>
 800a95e:	2301      	movs	r3, #1
 800a960:	e7de      	b.n	800a920 <_dtoa_r+0x250>
 800a962:	2300      	movs	r3, #0
 800a964:	9308      	str	r3, [sp, #32]
 800a966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a968:	eb0a 0903 	add.w	r9, sl, r3
 800a96c:	f109 0301 	add.w	r3, r9, #1
 800a970:	2b01      	cmp	r3, #1
 800a972:	9301      	str	r3, [sp, #4]
 800a974:	bfb8      	it	lt
 800a976:	2301      	movlt	r3, #1
 800a978:	e7dd      	b.n	800a936 <_dtoa_r+0x266>
 800a97a:	2301      	movs	r3, #1
 800a97c:	e7f2      	b.n	800a964 <_dtoa_r+0x294>
 800a97e:	2501      	movs	r5, #1
 800a980:	2300      	movs	r3, #0
 800a982:	9305      	str	r3, [sp, #20]
 800a984:	9508      	str	r5, [sp, #32]
 800a986:	f04f 39ff 	mov.w	r9, #4294967295
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a990:	2312      	movs	r3, #18
 800a992:	9209      	str	r2, [sp, #36]	; 0x24
 800a994:	e7cf      	b.n	800a936 <_dtoa_r+0x266>
 800a996:	2301      	movs	r3, #1
 800a998:	9308      	str	r3, [sp, #32]
 800a99a:	e7f4      	b.n	800a986 <_dtoa_r+0x2b6>
 800a99c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a9a0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9a4:	464b      	mov	r3, r9
 800a9a6:	e7c6      	b.n	800a936 <_dtoa_r+0x266>
 800a9a8:	3101      	adds	r1, #1
 800a9aa:	6041      	str	r1, [r0, #4]
 800a9ac:	0052      	lsls	r2, r2, #1
 800a9ae:	e7c6      	b.n	800a93e <_dtoa_r+0x26e>
 800a9b0:	636f4361 	.word	0x636f4361
 800a9b4:	3fd287a7 	.word	0x3fd287a7
 800a9b8:	8b60c8b3 	.word	0x8b60c8b3
 800a9bc:	3fc68a28 	.word	0x3fc68a28
 800a9c0:	509f79fb 	.word	0x509f79fb
 800a9c4:	3fd34413 	.word	0x3fd34413
 800a9c8:	0800bc9e 	.word	0x0800bc9e
 800a9cc:	0800bcb5 	.word	0x0800bcb5
 800a9d0:	7ff00000 	.word	0x7ff00000
 800a9d4:	0800bc9a 	.word	0x0800bc9a
 800a9d8:	0800bc91 	.word	0x0800bc91
 800a9dc:	0800bc6e 	.word	0x0800bc6e
 800a9e0:	3ff80000 	.word	0x3ff80000
 800a9e4:	0800bdb0 	.word	0x0800bdb0
 800a9e8:	0800bd14 	.word	0x0800bd14
 800a9ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9ee:	9a00      	ldr	r2, [sp, #0]
 800a9f0:	601a      	str	r2, [r3, #0]
 800a9f2:	9b01      	ldr	r3, [sp, #4]
 800a9f4:	2b0e      	cmp	r3, #14
 800a9f6:	f200 80ad 	bhi.w	800ab54 <_dtoa_r+0x484>
 800a9fa:	2d00      	cmp	r5, #0
 800a9fc:	f000 80aa 	beq.w	800ab54 <_dtoa_r+0x484>
 800aa00:	f1ba 0f00 	cmp.w	sl, #0
 800aa04:	dd36      	ble.n	800aa74 <_dtoa_r+0x3a4>
 800aa06:	4ac3      	ldr	r2, [pc, #780]	; (800ad14 <_dtoa_r+0x644>)
 800aa08:	f00a 030f 	and.w	r3, sl, #15
 800aa0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa10:	ed93 7b00 	vldr	d7, [r3]
 800aa14:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aa18:	ea4f 172a 	mov.w	r7, sl, asr #4
 800aa1c:	eeb0 8a47 	vmov.f32	s16, s14
 800aa20:	eef0 8a67 	vmov.f32	s17, s15
 800aa24:	d016      	beq.n	800aa54 <_dtoa_r+0x384>
 800aa26:	4bbc      	ldr	r3, [pc, #752]	; (800ad18 <_dtoa_r+0x648>)
 800aa28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa30:	f7f5 ff2c 	bl	800088c <__aeabi_ddiv>
 800aa34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa38:	f007 070f 	and.w	r7, r7, #15
 800aa3c:	2503      	movs	r5, #3
 800aa3e:	4eb6      	ldr	r6, [pc, #728]	; (800ad18 <_dtoa_r+0x648>)
 800aa40:	b957      	cbnz	r7, 800aa58 <_dtoa_r+0x388>
 800aa42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa46:	ec53 2b18 	vmov	r2, r3, d8
 800aa4a:	f7f5 ff1f 	bl	800088c <__aeabi_ddiv>
 800aa4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa52:	e029      	b.n	800aaa8 <_dtoa_r+0x3d8>
 800aa54:	2502      	movs	r5, #2
 800aa56:	e7f2      	b.n	800aa3e <_dtoa_r+0x36e>
 800aa58:	07f9      	lsls	r1, r7, #31
 800aa5a:	d508      	bpl.n	800aa6e <_dtoa_r+0x39e>
 800aa5c:	ec51 0b18 	vmov	r0, r1, d8
 800aa60:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa64:	f7f5 fde8 	bl	8000638 <__aeabi_dmul>
 800aa68:	ec41 0b18 	vmov	d8, r0, r1
 800aa6c:	3501      	adds	r5, #1
 800aa6e:	107f      	asrs	r7, r7, #1
 800aa70:	3608      	adds	r6, #8
 800aa72:	e7e5      	b.n	800aa40 <_dtoa_r+0x370>
 800aa74:	f000 80a6 	beq.w	800abc4 <_dtoa_r+0x4f4>
 800aa78:	f1ca 0600 	rsb	r6, sl, #0
 800aa7c:	4ba5      	ldr	r3, [pc, #660]	; (800ad14 <_dtoa_r+0x644>)
 800aa7e:	4fa6      	ldr	r7, [pc, #664]	; (800ad18 <_dtoa_r+0x648>)
 800aa80:	f006 020f 	and.w	r2, r6, #15
 800aa84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa90:	f7f5 fdd2 	bl	8000638 <__aeabi_dmul>
 800aa94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa98:	1136      	asrs	r6, r6, #4
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	2502      	movs	r5, #2
 800aa9e:	2e00      	cmp	r6, #0
 800aaa0:	f040 8085 	bne.w	800abae <_dtoa_r+0x4de>
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1d2      	bne.n	800aa4e <_dtoa_r+0x37e>
 800aaa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f000 808c 	beq.w	800abc8 <_dtoa_r+0x4f8>
 800aab0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aab4:	4b99      	ldr	r3, [pc, #612]	; (800ad1c <_dtoa_r+0x64c>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	4630      	mov	r0, r6
 800aaba:	4639      	mov	r1, r7
 800aabc:	f7f6 f82e 	bl	8000b1c <__aeabi_dcmplt>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	f000 8081 	beq.w	800abc8 <_dtoa_r+0x4f8>
 800aac6:	9b01      	ldr	r3, [sp, #4]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d07d      	beq.n	800abc8 <_dtoa_r+0x4f8>
 800aacc:	f1b9 0f00 	cmp.w	r9, #0
 800aad0:	dd3c      	ble.n	800ab4c <_dtoa_r+0x47c>
 800aad2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aad6:	9307      	str	r3, [sp, #28]
 800aad8:	2200      	movs	r2, #0
 800aada:	4b91      	ldr	r3, [pc, #580]	; (800ad20 <_dtoa_r+0x650>)
 800aadc:	4630      	mov	r0, r6
 800aade:	4639      	mov	r1, r7
 800aae0:	f7f5 fdaa 	bl	8000638 <__aeabi_dmul>
 800aae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aae8:	3501      	adds	r5, #1
 800aaea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800aaee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aaf2:	4628      	mov	r0, r5
 800aaf4:	f7f5 fd36 	bl	8000564 <__aeabi_i2d>
 800aaf8:	4632      	mov	r2, r6
 800aafa:	463b      	mov	r3, r7
 800aafc:	f7f5 fd9c 	bl	8000638 <__aeabi_dmul>
 800ab00:	4b88      	ldr	r3, [pc, #544]	; (800ad24 <_dtoa_r+0x654>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	f7f5 fbe2 	bl	80002cc <__adddf3>
 800ab08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ab0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab10:	9303      	str	r3, [sp, #12]
 800ab12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d15c      	bne.n	800abd2 <_dtoa_r+0x502>
 800ab18:	4b83      	ldr	r3, [pc, #524]	; (800ad28 <_dtoa_r+0x658>)
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	4639      	mov	r1, r7
 800ab20:	f7f5 fbd2 	bl	80002c8 <__aeabi_dsub>
 800ab24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab28:	4606      	mov	r6, r0
 800ab2a:	460f      	mov	r7, r1
 800ab2c:	f7f6 f814 	bl	8000b58 <__aeabi_dcmpgt>
 800ab30:	2800      	cmp	r0, #0
 800ab32:	f040 8296 	bne.w	800b062 <_dtoa_r+0x992>
 800ab36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab40:	4639      	mov	r1, r7
 800ab42:	f7f5 ffeb 	bl	8000b1c <__aeabi_dcmplt>
 800ab46:	2800      	cmp	r0, #0
 800ab48:	f040 8288 	bne.w	800b05c <_dtoa_r+0x98c>
 800ab4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ab50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f2c0 8158 	blt.w	800ae0c <_dtoa_r+0x73c>
 800ab5c:	f1ba 0f0e 	cmp.w	sl, #14
 800ab60:	f300 8154 	bgt.w	800ae0c <_dtoa_r+0x73c>
 800ab64:	4b6b      	ldr	r3, [pc, #428]	; (800ad14 <_dtoa_r+0x644>)
 800ab66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	f280 80e3 	bge.w	800ad3c <_dtoa_r+0x66c>
 800ab76:	9b01      	ldr	r3, [sp, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f300 80df 	bgt.w	800ad3c <_dtoa_r+0x66c>
 800ab7e:	f040 826d 	bne.w	800b05c <_dtoa_r+0x98c>
 800ab82:	4b69      	ldr	r3, [pc, #420]	; (800ad28 <_dtoa_r+0x658>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	4640      	mov	r0, r8
 800ab88:	4649      	mov	r1, r9
 800ab8a:	f7f5 fd55 	bl	8000638 <__aeabi_dmul>
 800ab8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab92:	f7f5 ffd7 	bl	8000b44 <__aeabi_dcmpge>
 800ab96:	9e01      	ldr	r6, [sp, #4]
 800ab98:	4637      	mov	r7, r6
 800ab9a:	2800      	cmp	r0, #0
 800ab9c:	f040 8243 	bne.w	800b026 <_dtoa_r+0x956>
 800aba0:	9d00      	ldr	r5, [sp, #0]
 800aba2:	2331      	movs	r3, #49	; 0x31
 800aba4:	f805 3b01 	strb.w	r3, [r5], #1
 800aba8:	f10a 0a01 	add.w	sl, sl, #1
 800abac:	e23f      	b.n	800b02e <_dtoa_r+0x95e>
 800abae:	07f2      	lsls	r2, r6, #31
 800abb0:	d505      	bpl.n	800abbe <_dtoa_r+0x4ee>
 800abb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abb6:	f7f5 fd3f 	bl	8000638 <__aeabi_dmul>
 800abba:	3501      	adds	r5, #1
 800abbc:	2301      	movs	r3, #1
 800abbe:	1076      	asrs	r6, r6, #1
 800abc0:	3708      	adds	r7, #8
 800abc2:	e76c      	b.n	800aa9e <_dtoa_r+0x3ce>
 800abc4:	2502      	movs	r5, #2
 800abc6:	e76f      	b.n	800aaa8 <_dtoa_r+0x3d8>
 800abc8:	9b01      	ldr	r3, [sp, #4]
 800abca:	f8cd a01c 	str.w	sl, [sp, #28]
 800abce:	930c      	str	r3, [sp, #48]	; 0x30
 800abd0:	e78d      	b.n	800aaee <_dtoa_r+0x41e>
 800abd2:	9900      	ldr	r1, [sp, #0]
 800abd4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800abd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abd8:	4b4e      	ldr	r3, [pc, #312]	; (800ad14 <_dtoa_r+0x644>)
 800abda:	ed9d 7b02 	vldr	d7, [sp, #8]
 800abde:	4401      	add	r1, r0
 800abe0:	9102      	str	r1, [sp, #8]
 800abe2:	9908      	ldr	r1, [sp, #32]
 800abe4:	eeb0 8a47 	vmov.f32	s16, s14
 800abe8:	eef0 8a67 	vmov.f32	s17, s15
 800abec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abf0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abf4:	2900      	cmp	r1, #0
 800abf6:	d045      	beq.n	800ac84 <_dtoa_r+0x5b4>
 800abf8:	494c      	ldr	r1, [pc, #304]	; (800ad2c <_dtoa_r+0x65c>)
 800abfa:	2000      	movs	r0, #0
 800abfc:	f7f5 fe46 	bl	800088c <__aeabi_ddiv>
 800ac00:	ec53 2b18 	vmov	r2, r3, d8
 800ac04:	f7f5 fb60 	bl	80002c8 <__aeabi_dsub>
 800ac08:	9d00      	ldr	r5, [sp, #0]
 800ac0a:	ec41 0b18 	vmov	d8, r0, r1
 800ac0e:	4639      	mov	r1, r7
 800ac10:	4630      	mov	r0, r6
 800ac12:	f7f5 ffc1 	bl	8000b98 <__aeabi_d2iz>
 800ac16:	900c      	str	r0, [sp, #48]	; 0x30
 800ac18:	f7f5 fca4 	bl	8000564 <__aeabi_i2d>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	4630      	mov	r0, r6
 800ac22:	4639      	mov	r1, r7
 800ac24:	f7f5 fb50 	bl	80002c8 <__aeabi_dsub>
 800ac28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac2a:	3330      	adds	r3, #48	; 0x30
 800ac2c:	f805 3b01 	strb.w	r3, [r5], #1
 800ac30:	ec53 2b18 	vmov	r2, r3, d8
 800ac34:	4606      	mov	r6, r0
 800ac36:	460f      	mov	r7, r1
 800ac38:	f7f5 ff70 	bl	8000b1c <__aeabi_dcmplt>
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d165      	bne.n	800ad0c <_dtoa_r+0x63c>
 800ac40:	4632      	mov	r2, r6
 800ac42:	463b      	mov	r3, r7
 800ac44:	4935      	ldr	r1, [pc, #212]	; (800ad1c <_dtoa_r+0x64c>)
 800ac46:	2000      	movs	r0, #0
 800ac48:	f7f5 fb3e 	bl	80002c8 <__aeabi_dsub>
 800ac4c:	ec53 2b18 	vmov	r2, r3, d8
 800ac50:	f7f5 ff64 	bl	8000b1c <__aeabi_dcmplt>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	f040 80b9 	bne.w	800adcc <_dtoa_r+0x6fc>
 800ac5a:	9b02      	ldr	r3, [sp, #8]
 800ac5c:	429d      	cmp	r5, r3
 800ac5e:	f43f af75 	beq.w	800ab4c <_dtoa_r+0x47c>
 800ac62:	4b2f      	ldr	r3, [pc, #188]	; (800ad20 <_dtoa_r+0x650>)
 800ac64:	ec51 0b18 	vmov	r0, r1, d8
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f7f5 fce5 	bl	8000638 <__aeabi_dmul>
 800ac6e:	4b2c      	ldr	r3, [pc, #176]	; (800ad20 <_dtoa_r+0x650>)
 800ac70:	ec41 0b18 	vmov	d8, r0, r1
 800ac74:	2200      	movs	r2, #0
 800ac76:	4630      	mov	r0, r6
 800ac78:	4639      	mov	r1, r7
 800ac7a:	f7f5 fcdd 	bl	8000638 <__aeabi_dmul>
 800ac7e:	4606      	mov	r6, r0
 800ac80:	460f      	mov	r7, r1
 800ac82:	e7c4      	b.n	800ac0e <_dtoa_r+0x53e>
 800ac84:	ec51 0b17 	vmov	r0, r1, d7
 800ac88:	f7f5 fcd6 	bl	8000638 <__aeabi_dmul>
 800ac8c:	9b02      	ldr	r3, [sp, #8]
 800ac8e:	9d00      	ldr	r5, [sp, #0]
 800ac90:	930c      	str	r3, [sp, #48]	; 0x30
 800ac92:	ec41 0b18 	vmov	d8, r0, r1
 800ac96:	4639      	mov	r1, r7
 800ac98:	4630      	mov	r0, r6
 800ac9a:	f7f5 ff7d 	bl	8000b98 <__aeabi_d2iz>
 800ac9e:	9011      	str	r0, [sp, #68]	; 0x44
 800aca0:	f7f5 fc60 	bl	8000564 <__aeabi_i2d>
 800aca4:	4602      	mov	r2, r0
 800aca6:	460b      	mov	r3, r1
 800aca8:	4630      	mov	r0, r6
 800acaa:	4639      	mov	r1, r7
 800acac:	f7f5 fb0c 	bl	80002c8 <__aeabi_dsub>
 800acb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acb2:	3330      	adds	r3, #48	; 0x30
 800acb4:	f805 3b01 	strb.w	r3, [r5], #1
 800acb8:	9b02      	ldr	r3, [sp, #8]
 800acba:	429d      	cmp	r5, r3
 800acbc:	4606      	mov	r6, r0
 800acbe:	460f      	mov	r7, r1
 800acc0:	f04f 0200 	mov.w	r2, #0
 800acc4:	d134      	bne.n	800ad30 <_dtoa_r+0x660>
 800acc6:	4b19      	ldr	r3, [pc, #100]	; (800ad2c <_dtoa_r+0x65c>)
 800acc8:	ec51 0b18 	vmov	r0, r1, d8
 800accc:	f7f5 fafe 	bl	80002cc <__adddf3>
 800acd0:	4602      	mov	r2, r0
 800acd2:	460b      	mov	r3, r1
 800acd4:	4630      	mov	r0, r6
 800acd6:	4639      	mov	r1, r7
 800acd8:	f7f5 ff3e 	bl	8000b58 <__aeabi_dcmpgt>
 800acdc:	2800      	cmp	r0, #0
 800acde:	d175      	bne.n	800adcc <_dtoa_r+0x6fc>
 800ace0:	ec53 2b18 	vmov	r2, r3, d8
 800ace4:	4911      	ldr	r1, [pc, #68]	; (800ad2c <_dtoa_r+0x65c>)
 800ace6:	2000      	movs	r0, #0
 800ace8:	f7f5 faee 	bl	80002c8 <__aeabi_dsub>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	4630      	mov	r0, r6
 800acf2:	4639      	mov	r1, r7
 800acf4:	f7f5 ff12 	bl	8000b1c <__aeabi_dcmplt>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	f43f af27 	beq.w	800ab4c <_dtoa_r+0x47c>
 800acfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad00:	1e6b      	subs	r3, r5, #1
 800ad02:	930c      	str	r3, [sp, #48]	; 0x30
 800ad04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad08:	2b30      	cmp	r3, #48	; 0x30
 800ad0a:	d0f8      	beq.n	800acfe <_dtoa_r+0x62e>
 800ad0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ad10:	e04a      	b.n	800ada8 <_dtoa_r+0x6d8>
 800ad12:	bf00      	nop
 800ad14:	0800bdb0 	.word	0x0800bdb0
 800ad18:	0800bd88 	.word	0x0800bd88
 800ad1c:	3ff00000 	.word	0x3ff00000
 800ad20:	40240000 	.word	0x40240000
 800ad24:	401c0000 	.word	0x401c0000
 800ad28:	40140000 	.word	0x40140000
 800ad2c:	3fe00000 	.word	0x3fe00000
 800ad30:	4baf      	ldr	r3, [pc, #700]	; (800aff0 <_dtoa_r+0x920>)
 800ad32:	f7f5 fc81 	bl	8000638 <__aeabi_dmul>
 800ad36:	4606      	mov	r6, r0
 800ad38:	460f      	mov	r7, r1
 800ad3a:	e7ac      	b.n	800ac96 <_dtoa_r+0x5c6>
 800ad3c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad40:	9d00      	ldr	r5, [sp, #0]
 800ad42:	4642      	mov	r2, r8
 800ad44:	464b      	mov	r3, r9
 800ad46:	4630      	mov	r0, r6
 800ad48:	4639      	mov	r1, r7
 800ad4a:	f7f5 fd9f 	bl	800088c <__aeabi_ddiv>
 800ad4e:	f7f5 ff23 	bl	8000b98 <__aeabi_d2iz>
 800ad52:	9002      	str	r0, [sp, #8]
 800ad54:	f7f5 fc06 	bl	8000564 <__aeabi_i2d>
 800ad58:	4642      	mov	r2, r8
 800ad5a:	464b      	mov	r3, r9
 800ad5c:	f7f5 fc6c 	bl	8000638 <__aeabi_dmul>
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1
 800ad64:	4630      	mov	r0, r6
 800ad66:	4639      	mov	r1, r7
 800ad68:	f7f5 faae 	bl	80002c8 <__aeabi_dsub>
 800ad6c:	9e02      	ldr	r6, [sp, #8]
 800ad6e:	9f01      	ldr	r7, [sp, #4]
 800ad70:	3630      	adds	r6, #48	; 0x30
 800ad72:	f805 6b01 	strb.w	r6, [r5], #1
 800ad76:	9e00      	ldr	r6, [sp, #0]
 800ad78:	1bae      	subs	r6, r5, r6
 800ad7a:	42b7      	cmp	r7, r6
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	d137      	bne.n	800adf2 <_dtoa_r+0x722>
 800ad82:	f7f5 faa3 	bl	80002cc <__adddf3>
 800ad86:	4642      	mov	r2, r8
 800ad88:	464b      	mov	r3, r9
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	460f      	mov	r7, r1
 800ad8e:	f7f5 fee3 	bl	8000b58 <__aeabi_dcmpgt>
 800ad92:	b9c8      	cbnz	r0, 800adc8 <_dtoa_r+0x6f8>
 800ad94:	4642      	mov	r2, r8
 800ad96:	464b      	mov	r3, r9
 800ad98:	4630      	mov	r0, r6
 800ad9a:	4639      	mov	r1, r7
 800ad9c:	f7f5 feb4 	bl	8000b08 <__aeabi_dcmpeq>
 800ada0:	b110      	cbz	r0, 800ada8 <_dtoa_r+0x6d8>
 800ada2:	9b02      	ldr	r3, [sp, #8]
 800ada4:	07d9      	lsls	r1, r3, #31
 800ada6:	d40f      	bmi.n	800adc8 <_dtoa_r+0x6f8>
 800ada8:	4620      	mov	r0, r4
 800adaa:	4659      	mov	r1, fp
 800adac:	f000 fb00 	bl	800b3b0 <_Bfree>
 800adb0:	2300      	movs	r3, #0
 800adb2:	702b      	strb	r3, [r5, #0]
 800adb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adb6:	f10a 0001 	add.w	r0, sl, #1
 800adba:	6018      	str	r0, [r3, #0]
 800adbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f43f acd8 	beq.w	800a774 <_dtoa_r+0xa4>
 800adc4:	601d      	str	r5, [r3, #0]
 800adc6:	e4d5      	b.n	800a774 <_dtoa_r+0xa4>
 800adc8:	f8cd a01c 	str.w	sl, [sp, #28]
 800adcc:	462b      	mov	r3, r5
 800adce:	461d      	mov	r5, r3
 800add0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800add4:	2a39      	cmp	r2, #57	; 0x39
 800add6:	d108      	bne.n	800adea <_dtoa_r+0x71a>
 800add8:	9a00      	ldr	r2, [sp, #0]
 800adda:	429a      	cmp	r2, r3
 800addc:	d1f7      	bne.n	800adce <_dtoa_r+0x6fe>
 800adde:	9a07      	ldr	r2, [sp, #28]
 800ade0:	9900      	ldr	r1, [sp, #0]
 800ade2:	3201      	adds	r2, #1
 800ade4:	9207      	str	r2, [sp, #28]
 800ade6:	2230      	movs	r2, #48	; 0x30
 800ade8:	700a      	strb	r2, [r1, #0]
 800adea:	781a      	ldrb	r2, [r3, #0]
 800adec:	3201      	adds	r2, #1
 800adee:	701a      	strb	r2, [r3, #0]
 800adf0:	e78c      	b.n	800ad0c <_dtoa_r+0x63c>
 800adf2:	4b7f      	ldr	r3, [pc, #508]	; (800aff0 <_dtoa_r+0x920>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	f7f5 fc1f 	bl	8000638 <__aeabi_dmul>
 800adfa:	2200      	movs	r2, #0
 800adfc:	2300      	movs	r3, #0
 800adfe:	4606      	mov	r6, r0
 800ae00:	460f      	mov	r7, r1
 800ae02:	f7f5 fe81 	bl	8000b08 <__aeabi_dcmpeq>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d09b      	beq.n	800ad42 <_dtoa_r+0x672>
 800ae0a:	e7cd      	b.n	800ada8 <_dtoa_r+0x6d8>
 800ae0c:	9a08      	ldr	r2, [sp, #32]
 800ae0e:	2a00      	cmp	r2, #0
 800ae10:	f000 80c4 	beq.w	800af9c <_dtoa_r+0x8cc>
 800ae14:	9a05      	ldr	r2, [sp, #20]
 800ae16:	2a01      	cmp	r2, #1
 800ae18:	f300 80a8 	bgt.w	800af6c <_dtoa_r+0x89c>
 800ae1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae1e:	2a00      	cmp	r2, #0
 800ae20:	f000 80a0 	beq.w	800af64 <_dtoa_r+0x894>
 800ae24:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae28:	9e06      	ldr	r6, [sp, #24]
 800ae2a:	4645      	mov	r5, r8
 800ae2c:	9a04      	ldr	r2, [sp, #16]
 800ae2e:	2101      	movs	r1, #1
 800ae30:	441a      	add	r2, r3
 800ae32:	4620      	mov	r0, r4
 800ae34:	4498      	add	r8, r3
 800ae36:	9204      	str	r2, [sp, #16]
 800ae38:	f000 fb76 	bl	800b528 <__i2b>
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	2d00      	cmp	r5, #0
 800ae40:	dd0b      	ble.n	800ae5a <_dtoa_r+0x78a>
 800ae42:	9b04      	ldr	r3, [sp, #16]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	dd08      	ble.n	800ae5a <_dtoa_r+0x78a>
 800ae48:	42ab      	cmp	r3, r5
 800ae4a:	9a04      	ldr	r2, [sp, #16]
 800ae4c:	bfa8      	it	ge
 800ae4e:	462b      	movge	r3, r5
 800ae50:	eba8 0803 	sub.w	r8, r8, r3
 800ae54:	1aed      	subs	r5, r5, r3
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	9304      	str	r3, [sp, #16]
 800ae5a:	9b06      	ldr	r3, [sp, #24]
 800ae5c:	b1fb      	cbz	r3, 800ae9e <_dtoa_r+0x7ce>
 800ae5e:	9b08      	ldr	r3, [sp, #32]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 809f 	beq.w	800afa4 <_dtoa_r+0x8d4>
 800ae66:	2e00      	cmp	r6, #0
 800ae68:	dd11      	ble.n	800ae8e <_dtoa_r+0x7be>
 800ae6a:	4639      	mov	r1, r7
 800ae6c:	4632      	mov	r2, r6
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f000 fc16 	bl	800b6a0 <__pow5mult>
 800ae74:	465a      	mov	r2, fp
 800ae76:	4601      	mov	r1, r0
 800ae78:	4607      	mov	r7, r0
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f000 fb6a 	bl	800b554 <__multiply>
 800ae80:	4659      	mov	r1, fp
 800ae82:	9007      	str	r0, [sp, #28]
 800ae84:	4620      	mov	r0, r4
 800ae86:	f000 fa93 	bl	800b3b0 <_Bfree>
 800ae8a:	9b07      	ldr	r3, [sp, #28]
 800ae8c:	469b      	mov	fp, r3
 800ae8e:	9b06      	ldr	r3, [sp, #24]
 800ae90:	1b9a      	subs	r2, r3, r6
 800ae92:	d004      	beq.n	800ae9e <_dtoa_r+0x7ce>
 800ae94:	4659      	mov	r1, fp
 800ae96:	4620      	mov	r0, r4
 800ae98:	f000 fc02 	bl	800b6a0 <__pow5mult>
 800ae9c:	4683      	mov	fp, r0
 800ae9e:	2101      	movs	r1, #1
 800aea0:	4620      	mov	r0, r4
 800aea2:	f000 fb41 	bl	800b528 <__i2b>
 800aea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	4606      	mov	r6, r0
 800aeac:	dd7c      	ble.n	800afa8 <_dtoa_r+0x8d8>
 800aeae:	461a      	mov	r2, r3
 800aeb0:	4601      	mov	r1, r0
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	f000 fbf4 	bl	800b6a0 <__pow5mult>
 800aeb8:	9b05      	ldr	r3, [sp, #20]
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	4606      	mov	r6, r0
 800aebe:	dd76      	ble.n	800afae <_dtoa_r+0x8de>
 800aec0:	2300      	movs	r3, #0
 800aec2:	9306      	str	r3, [sp, #24]
 800aec4:	6933      	ldr	r3, [r6, #16]
 800aec6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aeca:	6918      	ldr	r0, [r3, #16]
 800aecc:	f000 fadc 	bl	800b488 <__hi0bits>
 800aed0:	f1c0 0020 	rsb	r0, r0, #32
 800aed4:	9b04      	ldr	r3, [sp, #16]
 800aed6:	4418      	add	r0, r3
 800aed8:	f010 001f 	ands.w	r0, r0, #31
 800aedc:	f000 8086 	beq.w	800afec <_dtoa_r+0x91c>
 800aee0:	f1c0 0320 	rsb	r3, r0, #32
 800aee4:	2b04      	cmp	r3, #4
 800aee6:	dd7f      	ble.n	800afe8 <_dtoa_r+0x918>
 800aee8:	f1c0 001c 	rsb	r0, r0, #28
 800aeec:	9b04      	ldr	r3, [sp, #16]
 800aeee:	4403      	add	r3, r0
 800aef0:	4480      	add	r8, r0
 800aef2:	4405      	add	r5, r0
 800aef4:	9304      	str	r3, [sp, #16]
 800aef6:	f1b8 0f00 	cmp.w	r8, #0
 800aefa:	dd05      	ble.n	800af08 <_dtoa_r+0x838>
 800aefc:	4659      	mov	r1, fp
 800aefe:	4642      	mov	r2, r8
 800af00:	4620      	mov	r0, r4
 800af02:	f000 fc27 	bl	800b754 <__lshift>
 800af06:	4683      	mov	fp, r0
 800af08:	9b04      	ldr	r3, [sp, #16]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	dd05      	ble.n	800af1a <_dtoa_r+0x84a>
 800af0e:	4631      	mov	r1, r6
 800af10:	461a      	mov	r2, r3
 800af12:	4620      	mov	r0, r4
 800af14:	f000 fc1e 	bl	800b754 <__lshift>
 800af18:	4606      	mov	r6, r0
 800af1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d069      	beq.n	800aff4 <_dtoa_r+0x924>
 800af20:	4631      	mov	r1, r6
 800af22:	4658      	mov	r0, fp
 800af24:	f000 fc82 	bl	800b82c <__mcmp>
 800af28:	2800      	cmp	r0, #0
 800af2a:	da63      	bge.n	800aff4 <_dtoa_r+0x924>
 800af2c:	2300      	movs	r3, #0
 800af2e:	4659      	mov	r1, fp
 800af30:	220a      	movs	r2, #10
 800af32:	4620      	mov	r0, r4
 800af34:	f000 fa5e 	bl	800b3f4 <__multadd>
 800af38:	9b08      	ldr	r3, [sp, #32]
 800af3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af3e:	4683      	mov	fp, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	f000 818f 	beq.w	800b264 <_dtoa_r+0xb94>
 800af46:	4639      	mov	r1, r7
 800af48:	2300      	movs	r3, #0
 800af4a:	220a      	movs	r2, #10
 800af4c:	4620      	mov	r0, r4
 800af4e:	f000 fa51 	bl	800b3f4 <__multadd>
 800af52:	f1b9 0f00 	cmp.w	r9, #0
 800af56:	4607      	mov	r7, r0
 800af58:	f300 808e 	bgt.w	800b078 <_dtoa_r+0x9a8>
 800af5c:	9b05      	ldr	r3, [sp, #20]
 800af5e:	2b02      	cmp	r3, #2
 800af60:	dc50      	bgt.n	800b004 <_dtoa_r+0x934>
 800af62:	e089      	b.n	800b078 <_dtoa_r+0x9a8>
 800af64:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af6a:	e75d      	b.n	800ae28 <_dtoa_r+0x758>
 800af6c:	9b01      	ldr	r3, [sp, #4]
 800af6e:	1e5e      	subs	r6, r3, #1
 800af70:	9b06      	ldr	r3, [sp, #24]
 800af72:	42b3      	cmp	r3, r6
 800af74:	bfbf      	itttt	lt
 800af76:	9b06      	ldrlt	r3, [sp, #24]
 800af78:	9606      	strlt	r6, [sp, #24]
 800af7a:	1af2      	sublt	r2, r6, r3
 800af7c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800af7e:	bfb6      	itet	lt
 800af80:	189b      	addlt	r3, r3, r2
 800af82:	1b9e      	subge	r6, r3, r6
 800af84:	930d      	strlt	r3, [sp, #52]	; 0x34
 800af86:	9b01      	ldr	r3, [sp, #4]
 800af88:	bfb8      	it	lt
 800af8a:	2600      	movlt	r6, #0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	bfb5      	itete	lt
 800af90:	eba8 0503 	sublt.w	r5, r8, r3
 800af94:	9b01      	ldrge	r3, [sp, #4]
 800af96:	2300      	movlt	r3, #0
 800af98:	4645      	movge	r5, r8
 800af9a:	e747      	b.n	800ae2c <_dtoa_r+0x75c>
 800af9c:	9e06      	ldr	r6, [sp, #24]
 800af9e:	9f08      	ldr	r7, [sp, #32]
 800afa0:	4645      	mov	r5, r8
 800afa2:	e74c      	b.n	800ae3e <_dtoa_r+0x76e>
 800afa4:	9a06      	ldr	r2, [sp, #24]
 800afa6:	e775      	b.n	800ae94 <_dtoa_r+0x7c4>
 800afa8:	9b05      	ldr	r3, [sp, #20]
 800afaa:	2b01      	cmp	r3, #1
 800afac:	dc18      	bgt.n	800afe0 <_dtoa_r+0x910>
 800afae:	9b02      	ldr	r3, [sp, #8]
 800afb0:	b9b3      	cbnz	r3, 800afe0 <_dtoa_r+0x910>
 800afb2:	9b03      	ldr	r3, [sp, #12]
 800afb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afb8:	b9a3      	cbnz	r3, 800afe4 <_dtoa_r+0x914>
 800afba:	9b03      	ldr	r3, [sp, #12]
 800afbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afc0:	0d1b      	lsrs	r3, r3, #20
 800afc2:	051b      	lsls	r3, r3, #20
 800afc4:	b12b      	cbz	r3, 800afd2 <_dtoa_r+0x902>
 800afc6:	9b04      	ldr	r3, [sp, #16]
 800afc8:	3301      	adds	r3, #1
 800afca:	9304      	str	r3, [sp, #16]
 800afcc:	f108 0801 	add.w	r8, r8, #1
 800afd0:	2301      	movs	r3, #1
 800afd2:	9306      	str	r3, [sp, #24]
 800afd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	f47f af74 	bne.w	800aec4 <_dtoa_r+0x7f4>
 800afdc:	2001      	movs	r0, #1
 800afde:	e779      	b.n	800aed4 <_dtoa_r+0x804>
 800afe0:	2300      	movs	r3, #0
 800afe2:	e7f6      	b.n	800afd2 <_dtoa_r+0x902>
 800afe4:	9b02      	ldr	r3, [sp, #8]
 800afe6:	e7f4      	b.n	800afd2 <_dtoa_r+0x902>
 800afe8:	d085      	beq.n	800aef6 <_dtoa_r+0x826>
 800afea:	4618      	mov	r0, r3
 800afec:	301c      	adds	r0, #28
 800afee:	e77d      	b.n	800aeec <_dtoa_r+0x81c>
 800aff0:	40240000 	.word	0x40240000
 800aff4:	9b01      	ldr	r3, [sp, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	dc38      	bgt.n	800b06c <_dtoa_r+0x99c>
 800affa:	9b05      	ldr	r3, [sp, #20]
 800affc:	2b02      	cmp	r3, #2
 800affe:	dd35      	ble.n	800b06c <_dtoa_r+0x99c>
 800b000:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b004:	f1b9 0f00 	cmp.w	r9, #0
 800b008:	d10d      	bne.n	800b026 <_dtoa_r+0x956>
 800b00a:	4631      	mov	r1, r6
 800b00c:	464b      	mov	r3, r9
 800b00e:	2205      	movs	r2, #5
 800b010:	4620      	mov	r0, r4
 800b012:	f000 f9ef 	bl	800b3f4 <__multadd>
 800b016:	4601      	mov	r1, r0
 800b018:	4606      	mov	r6, r0
 800b01a:	4658      	mov	r0, fp
 800b01c:	f000 fc06 	bl	800b82c <__mcmp>
 800b020:	2800      	cmp	r0, #0
 800b022:	f73f adbd 	bgt.w	800aba0 <_dtoa_r+0x4d0>
 800b026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b028:	9d00      	ldr	r5, [sp, #0]
 800b02a:	ea6f 0a03 	mvn.w	sl, r3
 800b02e:	f04f 0800 	mov.w	r8, #0
 800b032:	4631      	mov	r1, r6
 800b034:	4620      	mov	r0, r4
 800b036:	f000 f9bb 	bl	800b3b0 <_Bfree>
 800b03a:	2f00      	cmp	r7, #0
 800b03c:	f43f aeb4 	beq.w	800ada8 <_dtoa_r+0x6d8>
 800b040:	f1b8 0f00 	cmp.w	r8, #0
 800b044:	d005      	beq.n	800b052 <_dtoa_r+0x982>
 800b046:	45b8      	cmp	r8, r7
 800b048:	d003      	beq.n	800b052 <_dtoa_r+0x982>
 800b04a:	4641      	mov	r1, r8
 800b04c:	4620      	mov	r0, r4
 800b04e:	f000 f9af 	bl	800b3b0 <_Bfree>
 800b052:	4639      	mov	r1, r7
 800b054:	4620      	mov	r0, r4
 800b056:	f000 f9ab 	bl	800b3b0 <_Bfree>
 800b05a:	e6a5      	b.n	800ada8 <_dtoa_r+0x6d8>
 800b05c:	2600      	movs	r6, #0
 800b05e:	4637      	mov	r7, r6
 800b060:	e7e1      	b.n	800b026 <_dtoa_r+0x956>
 800b062:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b064:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b068:	4637      	mov	r7, r6
 800b06a:	e599      	b.n	800aba0 <_dtoa_r+0x4d0>
 800b06c:	9b08      	ldr	r3, [sp, #32]
 800b06e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 80fd 	beq.w	800b272 <_dtoa_r+0xba2>
 800b078:	2d00      	cmp	r5, #0
 800b07a:	dd05      	ble.n	800b088 <_dtoa_r+0x9b8>
 800b07c:	4639      	mov	r1, r7
 800b07e:	462a      	mov	r2, r5
 800b080:	4620      	mov	r0, r4
 800b082:	f000 fb67 	bl	800b754 <__lshift>
 800b086:	4607      	mov	r7, r0
 800b088:	9b06      	ldr	r3, [sp, #24]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d05c      	beq.n	800b148 <_dtoa_r+0xa78>
 800b08e:	6879      	ldr	r1, [r7, #4]
 800b090:	4620      	mov	r0, r4
 800b092:	f000 f94d 	bl	800b330 <_Balloc>
 800b096:	4605      	mov	r5, r0
 800b098:	b928      	cbnz	r0, 800b0a6 <_dtoa_r+0x9d6>
 800b09a:	4b80      	ldr	r3, [pc, #512]	; (800b29c <_dtoa_r+0xbcc>)
 800b09c:	4602      	mov	r2, r0
 800b09e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b0a2:	f7ff bb2e 	b.w	800a702 <_dtoa_r+0x32>
 800b0a6:	693a      	ldr	r2, [r7, #16]
 800b0a8:	3202      	adds	r2, #2
 800b0aa:	0092      	lsls	r2, r2, #2
 800b0ac:	f107 010c 	add.w	r1, r7, #12
 800b0b0:	300c      	adds	r0, #12
 800b0b2:	f7fe faa5 	bl	8009600 <memcpy>
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f000 fb4a 	bl	800b754 <__lshift>
 800b0c0:	9b00      	ldr	r3, [sp, #0]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	9301      	str	r3, [sp, #4]
 800b0c6:	9b00      	ldr	r3, [sp, #0]
 800b0c8:	444b      	add	r3, r9
 800b0ca:	9307      	str	r3, [sp, #28]
 800b0cc:	9b02      	ldr	r3, [sp, #8]
 800b0ce:	f003 0301 	and.w	r3, r3, #1
 800b0d2:	46b8      	mov	r8, r7
 800b0d4:	9306      	str	r3, [sp, #24]
 800b0d6:	4607      	mov	r7, r0
 800b0d8:	9b01      	ldr	r3, [sp, #4]
 800b0da:	4631      	mov	r1, r6
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	4658      	mov	r0, fp
 800b0e0:	9302      	str	r3, [sp, #8]
 800b0e2:	f7ff fa67 	bl	800a5b4 <quorem>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	3330      	adds	r3, #48	; 0x30
 800b0ea:	9004      	str	r0, [sp, #16]
 800b0ec:	4641      	mov	r1, r8
 800b0ee:	4658      	mov	r0, fp
 800b0f0:	9308      	str	r3, [sp, #32]
 800b0f2:	f000 fb9b 	bl	800b82c <__mcmp>
 800b0f6:	463a      	mov	r2, r7
 800b0f8:	4681      	mov	r9, r0
 800b0fa:	4631      	mov	r1, r6
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f000 fbb1 	bl	800b864 <__mdiff>
 800b102:	68c2      	ldr	r2, [r0, #12]
 800b104:	9b08      	ldr	r3, [sp, #32]
 800b106:	4605      	mov	r5, r0
 800b108:	bb02      	cbnz	r2, 800b14c <_dtoa_r+0xa7c>
 800b10a:	4601      	mov	r1, r0
 800b10c:	4658      	mov	r0, fp
 800b10e:	f000 fb8d 	bl	800b82c <__mcmp>
 800b112:	9b08      	ldr	r3, [sp, #32]
 800b114:	4602      	mov	r2, r0
 800b116:	4629      	mov	r1, r5
 800b118:	4620      	mov	r0, r4
 800b11a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b11e:	f000 f947 	bl	800b3b0 <_Bfree>
 800b122:	9b05      	ldr	r3, [sp, #20]
 800b124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b126:	9d01      	ldr	r5, [sp, #4]
 800b128:	ea43 0102 	orr.w	r1, r3, r2
 800b12c:	9b06      	ldr	r3, [sp, #24]
 800b12e:	430b      	orrs	r3, r1
 800b130:	9b08      	ldr	r3, [sp, #32]
 800b132:	d10d      	bne.n	800b150 <_dtoa_r+0xa80>
 800b134:	2b39      	cmp	r3, #57	; 0x39
 800b136:	d029      	beq.n	800b18c <_dtoa_r+0xabc>
 800b138:	f1b9 0f00 	cmp.w	r9, #0
 800b13c:	dd01      	ble.n	800b142 <_dtoa_r+0xa72>
 800b13e:	9b04      	ldr	r3, [sp, #16]
 800b140:	3331      	adds	r3, #49	; 0x31
 800b142:	9a02      	ldr	r2, [sp, #8]
 800b144:	7013      	strb	r3, [r2, #0]
 800b146:	e774      	b.n	800b032 <_dtoa_r+0x962>
 800b148:	4638      	mov	r0, r7
 800b14a:	e7b9      	b.n	800b0c0 <_dtoa_r+0x9f0>
 800b14c:	2201      	movs	r2, #1
 800b14e:	e7e2      	b.n	800b116 <_dtoa_r+0xa46>
 800b150:	f1b9 0f00 	cmp.w	r9, #0
 800b154:	db06      	blt.n	800b164 <_dtoa_r+0xa94>
 800b156:	9905      	ldr	r1, [sp, #20]
 800b158:	ea41 0909 	orr.w	r9, r1, r9
 800b15c:	9906      	ldr	r1, [sp, #24]
 800b15e:	ea59 0101 	orrs.w	r1, r9, r1
 800b162:	d120      	bne.n	800b1a6 <_dtoa_r+0xad6>
 800b164:	2a00      	cmp	r2, #0
 800b166:	ddec      	ble.n	800b142 <_dtoa_r+0xa72>
 800b168:	4659      	mov	r1, fp
 800b16a:	2201      	movs	r2, #1
 800b16c:	4620      	mov	r0, r4
 800b16e:	9301      	str	r3, [sp, #4]
 800b170:	f000 faf0 	bl	800b754 <__lshift>
 800b174:	4631      	mov	r1, r6
 800b176:	4683      	mov	fp, r0
 800b178:	f000 fb58 	bl	800b82c <__mcmp>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	9b01      	ldr	r3, [sp, #4]
 800b180:	dc02      	bgt.n	800b188 <_dtoa_r+0xab8>
 800b182:	d1de      	bne.n	800b142 <_dtoa_r+0xa72>
 800b184:	07da      	lsls	r2, r3, #31
 800b186:	d5dc      	bpl.n	800b142 <_dtoa_r+0xa72>
 800b188:	2b39      	cmp	r3, #57	; 0x39
 800b18a:	d1d8      	bne.n	800b13e <_dtoa_r+0xa6e>
 800b18c:	9a02      	ldr	r2, [sp, #8]
 800b18e:	2339      	movs	r3, #57	; 0x39
 800b190:	7013      	strb	r3, [r2, #0]
 800b192:	462b      	mov	r3, r5
 800b194:	461d      	mov	r5, r3
 800b196:	3b01      	subs	r3, #1
 800b198:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b19c:	2a39      	cmp	r2, #57	; 0x39
 800b19e:	d050      	beq.n	800b242 <_dtoa_r+0xb72>
 800b1a0:	3201      	adds	r2, #1
 800b1a2:	701a      	strb	r2, [r3, #0]
 800b1a4:	e745      	b.n	800b032 <_dtoa_r+0x962>
 800b1a6:	2a00      	cmp	r2, #0
 800b1a8:	dd03      	ble.n	800b1b2 <_dtoa_r+0xae2>
 800b1aa:	2b39      	cmp	r3, #57	; 0x39
 800b1ac:	d0ee      	beq.n	800b18c <_dtoa_r+0xabc>
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	e7c7      	b.n	800b142 <_dtoa_r+0xa72>
 800b1b2:	9a01      	ldr	r2, [sp, #4]
 800b1b4:	9907      	ldr	r1, [sp, #28]
 800b1b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b1ba:	428a      	cmp	r2, r1
 800b1bc:	d02a      	beq.n	800b214 <_dtoa_r+0xb44>
 800b1be:	4659      	mov	r1, fp
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	220a      	movs	r2, #10
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f000 f915 	bl	800b3f4 <__multadd>
 800b1ca:	45b8      	cmp	r8, r7
 800b1cc:	4683      	mov	fp, r0
 800b1ce:	f04f 0300 	mov.w	r3, #0
 800b1d2:	f04f 020a 	mov.w	r2, #10
 800b1d6:	4641      	mov	r1, r8
 800b1d8:	4620      	mov	r0, r4
 800b1da:	d107      	bne.n	800b1ec <_dtoa_r+0xb1c>
 800b1dc:	f000 f90a 	bl	800b3f4 <__multadd>
 800b1e0:	4680      	mov	r8, r0
 800b1e2:	4607      	mov	r7, r0
 800b1e4:	9b01      	ldr	r3, [sp, #4]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	9301      	str	r3, [sp, #4]
 800b1ea:	e775      	b.n	800b0d8 <_dtoa_r+0xa08>
 800b1ec:	f000 f902 	bl	800b3f4 <__multadd>
 800b1f0:	4639      	mov	r1, r7
 800b1f2:	4680      	mov	r8, r0
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	220a      	movs	r2, #10
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f000 f8fb 	bl	800b3f4 <__multadd>
 800b1fe:	4607      	mov	r7, r0
 800b200:	e7f0      	b.n	800b1e4 <_dtoa_r+0xb14>
 800b202:	f1b9 0f00 	cmp.w	r9, #0
 800b206:	9a00      	ldr	r2, [sp, #0]
 800b208:	bfcc      	ite	gt
 800b20a:	464d      	movgt	r5, r9
 800b20c:	2501      	movle	r5, #1
 800b20e:	4415      	add	r5, r2
 800b210:	f04f 0800 	mov.w	r8, #0
 800b214:	4659      	mov	r1, fp
 800b216:	2201      	movs	r2, #1
 800b218:	4620      	mov	r0, r4
 800b21a:	9301      	str	r3, [sp, #4]
 800b21c:	f000 fa9a 	bl	800b754 <__lshift>
 800b220:	4631      	mov	r1, r6
 800b222:	4683      	mov	fp, r0
 800b224:	f000 fb02 	bl	800b82c <__mcmp>
 800b228:	2800      	cmp	r0, #0
 800b22a:	dcb2      	bgt.n	800b192 <_dtoa_r+0xac2>
 800b22c:	d102      	bne.n	800b234 <_dtoa_r+0xb64>
 800b22e:	9b01      	ldr	r3, [sp, #4]
 800b230:	07db      	lsls	r3, r3, #31
 800b232:	d4ae      	bmi.n	800b192 <_dtoa_r+0xac2>
 800b234:	462b      	mov	r3, r5
 800b236:	461d      	mov	r5, r3
 800b238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b23c:	2a30      	cmp	r2, #48	; 0x30
 800b23e:	d0fa      	beq.n	800b236 <_dtoa_r+0xb66>
 800b240:	e6f7      	b.n	800b032 <_dtoa_r+0x962>
 800b242:	9a00      	ldr	r2, [sp, #0]
 800b244:	429a      	cmp	r2, r3
 800b246:	d1a5      	bne.n	800b194 <_dtoa_r+0xac4>
 800b248:	f10a 0a01 	add.w	sl, sl, #1
 800b24c:	2331      	movs	r3, #49	; 0x31
 800b24e:	e779      	b.n	800b144 <_dtoa_r+0xa74>
 800b250:	4b13      	ldr	r3, [pc, #76]	; (800b2a0 <_dtoa_r+0xbd0>)
 800b252:	f7ff baaf 	b.w	800a7b4 <_dtoa_r+0xe4>
 800b256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f47f aa86 	bne.w	800a76a <_dtoa_r+0x9a>
 800b25e:	4b11      	ldr	r3, [pc, #68]	; (800b2a4 <_dtoa_r+0xbd4>)
 800b260:	f7ff baa8 	b.w	800a7b4 <_dtoa_r+0xe4>
 800b264:	f1b9 0f00 	cmp.w	r9, #0
 800b268:	dc03      	bgt.n	800b272 <_dtoa_r+0xba2>
 800b26a:	9b05      	ldr	r3, [sp, #20]
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	f73f aec9 	bgt.w	800b004 <_dtoa_r+0x934>
 800b272:	9d00      	ldr	r5, [sp, #0]
 800b274:	4631      	mov	r1, r6
 800b276:	4658      	mov	r0, fp
 800b278:	f7ff f99c 	bl	800a5b4 <quorem>
 800b27c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b280:	f805 3b01 	strb.w	r3, [r5], #1
 800b284:	9a00      	ldr	r2, [sp, #0]
 800b286:	1aaa      	subs	r2, r5, r2
 800b288:	4591      	cmp	r9, r2
 800b28a:	ddba      	ble.n	800b202 <_dtoa_r+0xb32>
 800b28c:	4659      	mov	r1, fp
 800b28e:	2300      	movs	r3, #0
 800b290:	220a      	movs	r2, #10
 800b292:	4620      	mov	r0, r4
 800b294:	f000 f8ae 	bl	800b3f4 <__multadd>
 800b298:	4683      	mov	fp, r0
 800b29a:	e7eb      	b.n	800b274 <_dtoa_r+0xba4>
 800b29c:	0800bd14 	.word	0x0800bd14
 800b2a0:	0800bc6d 	.word	0x0800bc6d
 800b2a4:	0800bc91 	.word	0x0800bc91

0800b2a8 <_fstat_r>:
 800b2a8:	b538      	push	{r3, r4, r5, lr}
 800b2aa:	4d07      	ldr	r5, [pc, #28]	; (800b2c8 <_fstat_r+0x20>)
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	4608      	mov	r0, r1
 800b2b2:	4611      	mov	r1, r2
 800b2b4:	602b      	str	r3, [r5, #0]
 800b2b6:	f7f6 fac2 	bl	800183e <_fstat>
 800b2ba:	1c43      	adds	r3, r0, #1
 800b2bc:	d102      	bne.n	800b2c4 <_fstat_r+0x1c>
 800b2be:	682b      	ldr	r3, [r5, #0]
 800b2c0:	b103      	cbz	r3, 800b2c4 <_fstat_r+0x1c>
 800b2c2:	6023      	str	r3, [r4, #0]
 800b2c4:	bd38      	pop	{r3, r4, r5, pc}
 800b2c6:	bf00      	nop
 800b2c8:	200008d4 	.word	0x200008d4

0800b2cc <_isatty_r>:
 800b2cc:	b538      	push	{r3, r4, r5, lr}
 800b2ce:	4d06      	ldr	r5, [pc, #24]	; (800b2e8 <_isatty_r+0x1c>)
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	4608      	mov	r0, r1
 800b2d6:	602b      	str	r3, [r5, #0]
 800b2d8:	f7f6 fac1 	bl	800185e <_isatty>
 800b2dc:	1c43      	adds	r3, r0, #1
 800b2de:	d102      	bne.n	800b2e6 <_isatty_r+0x1a>
 800b2e0:	682b      	ldr	r3, [r5, #0]
 800b2e2:	b103      	cbz	r3, 800b2e6 <_isatty_r+0x1a>
 800b2e4:	6023      	str	r3, [r4, #0]
 800b2e6:	bd38      	pop	{r3, r4, r5, pc}
 800b2e8:	200008d4 	.word	0x200008d4

0800b2ec <_localeconv_r>:
 800b2ec:	4800      	ldr	r0, [pc, #0]	; (800b2f0 <_localeconv_r+0x4>)
 800b2ee:	4770      	bx	lr
 800b2f0:	20000420 	.word	0x20000420

0800b2f4 <_lseek_r>:
 800b2f4:	b538      	push	{r3, r4, r5, lr}
 800b2f6:	4d07      	ldr	r5, [pc, #28]	; (800b314 <_lseek_r+0x20>)
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	4608      	mov	r0, r1
 800b2fc:	4611      	mov	r1, r2
 800b2fe:	2200      	movs	r2, #0
 800b300:	602a      	str	r2, [r5, #0]
 800b302:	461a      	mov	r2, r3
 800b304:	f7f6 fab6 	bl	8001874 <_lseek>
 800b308:	1c43      	adds	r3, r0, #1
 800b30a:	d102      	bne.n	800b312 <_lseek_r+0x1e>
 800b30c:	682b      	ldr	r3, [r5, #0]
 800b30e:	b103      	cbz	r3, 800b312 <_lseek_r+0x1e>
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	bd38      	pop	{r3, r4, r5, pc}
 800b314:	200008d4 	.word	0x200008d4

0800b318 <__malloc_lock>:
 800b318:	4801      	ldr	r0, [pc, #4]	; (800b320 <__malloc_lock+0x8>)
 800b31a:	f7fe b902 	b.w	8009522 <__retarget_lock_acquire_recursive>
 800b31e:	bf00      	nop
 800b320:	200008cc 	.word	0x200008cc

0800b324 <__malloc_unlock>:
 800b324:	4801      	ldr	r0, [pc, #4]	; (800b32c <__malloc_unlock+0x8>)
 800b326:	f7fe b8fd 	b.w	8009524 <__retarget_lock_release_recursive>
 800b32a:	bf00      	nop
 800b32c:	200008cc 	.word	0x200008cc

0800b330 <_Balloc>:
 800b330:	b570      	push	{r4, r5, r6, lr}
 800b332:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b334:	4604      	mov	r4, r0
 800b336:	460d      	mov	r5, r1
 800b338:	b976      	cbnz	r6, 800b358 <_Balloc+0x28>
 800b33a:	2010      	movs	r0, #16
 800b33c:	f7fe f958 	bl	80095f0 <malloc>
 800b340:	4602      	mov	r2, r0
 800b342:	6260      	str	r0, [r4, #36]	; 0x24
 800b344:	b920      	cbnz	r0, 800b350 <_Balloc+0x20>
 800b346:	4b18      	ldr	r3, [pc, #96]	; (800b3a8 <_Balloc+0x78>)
 800b348:	4818      	ldr	r0, [pc, #96]	; (800b3ac <_Balloc+0x7c>)
 800b34a:	2166      	movs	r1, #102	; 0x66
 800b34c:	f000 fb90 	bl	800ba70 <__assert_func>
 800b350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b354:	6006      	str	r6, [r0, #0]
 800b356:	60c6      	str	r6, [r0, #12]
 800b358:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b35a:	68f3      	ldr	r3, [r6, #12]
 800b35c:	b183      	cbz	r3, 800b380 <_Balloc+0x50>
 800b35e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b366:	b9b8      	cbnz	r0, 800b398 <_Balloc+0x68>
 800b368:	2101      	movs	r1, #1
 800b36a:	fa01 f605 	lsl.w	r6, r1, r5
 800b36e:	1d72      	adds	r2, r6, #5
 800b370:	0092      	lsls	r2, r2, #2
 800b372:	4620      	mov	r0, r4
 800b374:	f000 fb5a 	bl	800ba2c <_calloc_r>
 800b378:	b160      	cbz	r0, 800b394 <_Balloc+0x64>
 800b37a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b37e:	e00e      	b.n	800b39e <_Balloc+0x6e>
 800b380:	2221      	movs	r2, #33	; 0x21
 800b382:	2104      	movs	r1, #4
 800b384:	4620      	mov	r0, r4
 800b386:	f000 fb51 	bl	800ba2c <_calloc_r>
 800b38a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b38c:	60f0      	str	r0, [r6, #12]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1e4      	bne.n	800b35e <_Balloc+0x2e>
 800b394:	2000      	movs	r0, #0
 800b396:	bd70      	pop	{r4, r5, r6, pc}
 800b398:	6802      	ldr	r2, [r0, #0]
 800b39a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3a4:	e7f7      	b.n	800b396 <_Balloc+0x66>
 800b3a6:	bf00      	nop
 800b3a8:	0800bc9e 	.word	0x0800bc9e
 800b3ac:	0800bd25 	.word	0x0800bd25

0800b3b0 <_Bfree>:
 800b3b0:	b570      	push	{r4, r5, r6, lr}
 800b3b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b3b4:	4605      	mov	r5, r0
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	b976      	cbnz	r6, 800b3d8 <_Bfree+0x28>
 800b3ba:	2010      	movs	r0, #16
 800b3bc:	f7fe f918 	bl	80095f0 <malloc>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	6268      	str	r0, [r5, #36]	; 0x24
 800b3c4:	b920      	cbnz	r0, 800b3d0 <_Bfree+0x20>
 800b3c6:	4b09      	ldr	r3, [pc, #36]	; (800b3ec <_Bfree+0x3c>)
 800b3c8:	4809      	ldr	r0, [pc, #36]	; (800b3f0 <_Bfree+0x40>)
 800b3ca:	218a      	movs	r1, #138	; 0x8a
 800b3cc:	f000 fb50 	bl	800ba70 <__assert_func>
 800b3d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3d4:	6006      	str	r6, [r0, #0]
 800b3d6:	60c6      	str	r6, [r0, #12]
 800b3d8:	b13c      	cbz	r4, 800b3ea <_Bfree+0x3a>
 800b3da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b3dc:	6862      	ldr	r2, [r4, #4]
 800b3de:	68db      	ldr	r3, [r3, #12]
 800b3e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3e4:	6021      	str	r1, [r4, #0]
 800b3e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3ea:	bd70      	pop	{r4, r5, r6, pc}
 800b3ec:	0800bc9e 	.word	0x0800bc9e
 800b3f0:	0800bd25 	.word	0x0800bd25

0800b3f4 <__multadd>:
 800b3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f8:	690e      	ldr	r6, [r1, #16]
 800b3fa:	4607      	mov	r7, r0
 800b3fc:	4698      	mov	r8, r3
 800b3fe:	460c      	mov	r4, r1
 800b400:	f101 0014 	add.w	r0, r1, #20
 800b404:	2300      	movs	r3, #0
 800b406:	6805      	ldr	r5, [r0, #0]
 800b408:	b2a9      	uxth	r1, r5
 800b40a:	fb02 8101 	mla	r1, r2, r1, r8
 800b40e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b412:	0c2d      	lsrs	r5, r5, #16
 800b414:	fb02 c505 	mla	r5, r2, r5, ip
 800b418:	b289      	uxth	r1, r1
 800b41a:	3301      	adds	r3, #1
 800b41c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b420:	429e      	cmp	r6, r3
 800b422:	f840 1b04 	str.w	r1, [r0], #4
 800b426:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b42a:	dcec      	bgt.n	800b406 <__multadd+0x12>
 800b42c:	f1b8 0f00 	cmp.w	r8, #0
 800b430:	d022      	beq.n	800b478 <__multadd+0x84>
 800b432:	68a3      	ldr	r3, [r4, #8]
 800b434:	42b3      	cmp	r3, r6
 800b436:	dc19      	bgt.n	800b46c <__multadd+0x78>
 800b438:	6861      	ldr	r1, [r4, #4]
 800b43a:	4638      	mov	r0, r7
 800b43c:	3101      	adds	r1, #1
 800b43e:	f7ff ff77 	bl	800b330 <_Balloc>
 800b442:	4605      	mov	r5, r0
 800b444:	b928      	cbnz	r0, 800b452 <__multadd+0x5e>
 800b446:	4602      	mov	r2, r0
 800b448:	4b0d      	ldr	r3, [pc, #52]	; (800b480 <__multadd+0x8c>)
 800b44a:	480e      	ldr	r0, [pc, #56]	; (800b484 <__multadd+0x90>)
 800b44c:	21b5      	movs	r1, #181	; 0xb5
 800b44e:	f000 fb0f 	bl	800ba70 <__assert_func>
 800b452:	6922      	ldr	r2, [r4, #16]
 800b454:	3202      	adds	r2, #2
 800b456:	f104 010c 	add.w	r1, r4, #12
 800b45a:	0092      	lsls	r2, r2, #2
 800b45c:	300c      	adds	r0, #12
 800b45e:	f7fe f8cf 	bl	8009600 <memcpy>
 800b462:	4621      	mov	r1, r4
 800b464:	4638      	mov	r0, r7
 800b466:	f7ff ffa3 	bl	800b3b0 <_Bfree>
 800b46a:	462c      	mov	r4, r5
 800b46c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b470:	3601      	adds	r6, #1
 800b472:	f8c3 8014 	str.w	r8, [r3, #20]
 800b476:	6126      	str	r6, [r4, #16]
 800b478:	4620      	mov	r0, r4
 800b47a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b47e:	bf00      	nop
 800b480:	0800bd14 	.word	0x0800bd14
 800b484:	0800bd25 	.word	0x0800bd25

0800b488 <__hi0bits>:
 800b488:	0c03      	lsrs	r3, r0, #16
 800b48a:	041b      	lsls	r3, r3, #16
 800b48c:	b9d3      	cbnz	r3, 800b4c4 <__hi0bits+0x3c>
 800b48e:	0400      	lsls	r0, r0, #16
 800b490:	2310      	movs	r3, #16
 800b492:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b496:	bf04      	itt	eq
 800b498:	0200      	lsleq	r0, r0, #8
 800b49a:	3308      	addeq	r3, #8
 800b49c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b4a0:	bf04      	itt	eq
 800b4a2:	0100      	lsleq	r0, r0, #4
 800b4a4:	3304      	addeq	r3, #4
 800b4a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b4aa:	bf04      	itt	eq
 800b4ac:	0080      	lsleq	r0, r0, #2
 800b4ae:	3302      	addeq	r3, #2
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	db05      	blt.n	800b4c0 <__hi0bits+0x38>
 800b4b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b4b8:	f103 0301 	add.w	r3, r3, #1
 800b4bc:	bf08      	it	eq
 800b4be:	2320      	moveq	r3, #32
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	4770      	bx	lr
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	e7e4      	b.n	800b492 <__hi0bits+0xa>

0800b4c8 <__lo0bits>:
 800b4c8:	6803      	ldr	r3, [r0, #0]
 800b4ca:	f013 0207 	ands.w	r2, r3, #7
 800b4ce:	4601      	mov	r1, r0
 800b4d0:	d00b      	beq.n	800b4ea <__lo0bits+0x22>
 800b4d2:	07da      	lsls	r2, r3, #31
 800b4d4:	d424      	bmi.n	800b520 <__lo0bits+0x58>
 800b4d6:	0798      	lsls	r0, r3, #30
 800b4d8:	bf49      	itett	mi
 800b4da:	085b      	lsrmi	r3, r3, #1
 800b4dc:	089b      	lsrpl	r3, r3, #2
 800b4de:	2001      	movmi	r0, #1
 800b4e0:	600b      	strmi	r3, [r1, #0]
 800b4e2:	bf5c      	itt	pl
 800b4e4:	600b      	strpl	r3, [r1, #0]
 800b4e6:	2002      	movpl	r0, #2
 800b4e8:	4770      	bx	lr
 800b4ea:	b298      	uxth	r0, r3
 800b4ec:	b9b0      	cbnz	r0, 800b51c <__lo0bits+0x54>
 800b4ee:	0c1b      	lsrs	r3, r3, #16
 800b4f0:	2010      	movs	r0, #16
 800b4f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b4f6:	bf04      	itt	eq
 800b4f8:	0a1b      	lsreq	r3, r3, #8
 800b4fa:	3008      	addeq	r0, #8
 800b4fc:	071a      	lsls	r2, r3, #28
 800b4fe:	bf04      	itt	eq
 800b500:	091b      	lsreq	r3, r3, #4
 800b502:	3004      	addeq	r0, #4
 800b504:	079a      	lsls	r2, r3, #30
 800b506:	bf04      	itt	eq
 800b508:	089b      	lsreq	r3, r3, #2
 800b50a:	3002      	addeq	r0, #2
 800b50c:	07da      	lsls	r2, r3, #31
 800b50e:	d403      	bmi.n	800b518 <__lo0bits+0x50>
 800b510:	085b      	lsrs	r3, r3, #1
 800b512:	f100 0001 	add.w	r0, r0, #1
 800b516:	d005      	beq.n	800b524 <__lo0bits+0x5c>
 800b518:	600b      	str	r3, [r1, #0]
 800b51a:	4770      	bx	lr
 800b51c:	4610      	mov	r0, r2
 800b51e:	e7e8      	b.n	800b4f2 <__lo0bits+0x2a>
 800b520:	2000      	movs	r0, #0
 800b522:	4770      	bx	lr
 800b524:	2020      	movs	r0, #32
 800b526:	4770      	bx	lr

0800b528 <__i2b>:
 800b528:	b510      	push	{r4, lr}
 800b52a:	460c      	mov	r4, r1
 800b52c:	2101      	movs	r1, #1
 800b52e:	f7ff feff 	bl	800b330 <_Balloc>
 800b532:	4602      	mov	r2, r0
 800b534:	b928      	cbnz	r0, 800b542 <__i2b+0x1a>
 800b536:	4b05      	ldr	r3, [pc, #20]	; (800b54c <__i2b+0x24>)
 800b538:	4805      	ldr	r0, [pc, #20]	; (800b550 <__i2b+0x28>)
 800b53a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b53e:	f000 fa97 	bl	800ba70 <__assert_func>
 800b542:	2301      	movs	r3, #1
 800b544:	6144      	str	r4, [r0, #20]
 800b546:	6103      	str	r3, [r0, #16]
 800b548:	bd10      	pop	{r4, pc}
 800b54a:	bf00      	nop
 800b54c:	0800bd14 	.word	0x0800bd14
 800b550:	0800bd25 	.word	0x0800bd25

0800b554 <__multiply>:
 800b554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b558:	4614      	mov	r4, r2
 800b55a:	690a      	ldr	r2, [r1, #16]
 800b55c:	6923      	ldr	r3, [r4, #16]
 800b55e:	429a      	cmp	r2, r3
 800b560:	bfb8      	it	lt
 800b562:	460b      	movlt	r3, r1
 800b564:	460d      	mov	r5, r1
 800b566:	bfbc      	itt	lt
 800b568:	4625      	movlt	r5, r4
 800b56a:	461c      	movlt	r4, r3
 800b56c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b570:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b574:	68ab      	ldr	r3, [r5, #8]
 800b576:	6869      	ldr	r1, [r5, #4]
 800b578:	eb0a 0709 	add.w	r7, sl, r9
 800b57c:	42bb      	cmp	r3, r7
 800b57e:	b085      	sub	sp, #20
 800b580:	bfb8      	it	lt
 800b582:	3101      	addlt	r1, #1
 800b584:	f7ff fed4 	bl	800b330 <_Balloc>
 800b588:	b930      	cbnz	r0, 800b598 <__multiply+0x44>
 800b58a:	4602      	mov	r2, r0
 800b58c:	4b42      	ldr	r3, [pc, #264]	; (800b698 <__multiply+0x144>)
 800b58e:	4843      	ldr	r0, [pc, #268]	; (800b69c <__multiply+0x148>)
 800b590:	f240 115d 	movw	r1, #349	; 0x15d
 800b594:	f000 fa6c 	bl	800ba70 <__assert_func>
 800b598:	f100 0614 	add.w	r6, r0, #20
 800b59c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b5a0:	4633      	mov	r3, r6
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	4543      	cmp	r3, r8
 800b5a6:	d31e      	bcc.n	800b5e6 <__multiply+0x92>
 800b5a8:	f105 0c14 	add.w	ip, r5, #20
 800b5ac:	f104 0314 	add.w	r3, r4, #20
 800b5b0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b5b4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b5b8:	9202      	str	r2, [sp, #8]
 800b5ba:	ebac 0205 	sub.w	r2, ip, r5
 800b5be:	3a15      	subs	r2, #21
 800b5c0:	f022 0203 	bic.w	r2, r2, #3
 800b5c4:	3204      	adds	r2, #4
 800b5c6:	f105 0115 	add.w	r1, r5, #21
 800b5ca:	458c      	cmp	ip, r1
 800b5cc:	bf38      	it	cc
 800b5ce:	2204      	movcc	r2, #4
 800b5d0:	9201      	str	r2, [sp, #4]
 800b5d2:	9a02      	ldr	r2, [sp, #8]
 800b5d4:	9303      	str	r3, [sp, #12]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d808      	bhi.n	800b5ec <__multiply+0x98>
 800b5da:	2f00      	cmp	r7, #0
 800b5dc:	dc55      	bgt.n	800b68a <__multiply+0x136>
 800b5de:	6107      	str	r7, [r0, #16]
 800b5e0:	b005      	add	sp, #20
 800b5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e6:	f843 2b04 	str.w	r2, [r3], #4
 800b5ea:	e7db      	b.n	800b5a4 <__multiply+0x50>
 800b5ec:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5f0:	f1ba 0f00 	cmp.w	sl, #0
 800b5f4:	d020      	beq.n	800b638 <__multiply+0xe4>
 800b5f6:	f105 0e14 	add.w	lr, r5, #20
 800b5fa:	46b1      	mov	r9, r6
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b602:	f8d9 b000 	ldr.w	fp, [r9]
 800b606:	b2a1      	uxth	r1, r4
 800b608:	fa1f fb8b 	uxth.w	fp, fp
 800b60c:	fb0a b101 	mla	r1, sl, r1, fp
 800b610:	4411      	add	r1, r2
 800b612:	f8d9 2000 	ldr.w	r2, [r9]
 800b616:	0c24      	lsrs	r4, r4, #16
 800b618:	0c12      	lsrs	r2, r2, #16
 800b61a:	fb0a 2404 	mla	r4, sl, r4, r2
 800b61e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b622:	b289      	uxth	r1, r1
 800b624:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b628:	45f4      	cmp	ip, lr
 800b62a:	f849 1b04 	str.w	r1, [r9], #4
 800b62e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b632:	d8e4      	bhi.n	800b5fe <__multiply+0xaa>
 800b634:	9901      	ldr	r1, [sp, #4]
 800b636:	5072      	str	r2, [r6, r1]
 800b638:	9a03      	ldr	r2, [sp, #12]
 800b63a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b63e:	3304      	adds	r3, #4
 800b640:	f1b9 0f00 	cmp.w	r9, #0
 800b644:	d01f      	beq.n	800b686 <__multiply+0x132>
 800b646:	6834      	ldr	r4, [r6, #0]
 800b648:	f105 0114 	add.w	r1, r5, #20
 800b64c:	46b6      	mov	lr, r6
 800b64e:	f04f 0a00 	mov.w	sl, #0
 800b652:	880a      	ldrh	r2, [r1, #0]
 800b654:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b658:	fb09 b202 	mla	r2, r9, r2, fp
 800b65c:	4492      	add	sl, r2
 800b65e:	b2a4      	uxth	r4, r4
 800b660:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b664:	f84e 4b04 	str.w	r4, [lr], #4
 800b668:	f851 4b04 	ldr.w	r4, [r1], #4
 800b66c:	f8be 2000 	ldrh.w	r2, [lr]
 800b670:	0c24      	lsrs	r4, r4, #16
 800b672:	fb09 2404 	mla	r4, r9, r4, r2
 800b676:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b67a:	458c      	cmp	ip, r1
 800b67c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b680:	d8e7      	bhi.n	800b652 <__multiply+0xfe>
 800b682:	9a01      	ldr	r2, [sp, #4]
 800b684:	50b4      	str	r4, [r6, r2]
 800b686:	3604      	adds	r6, #4
 800b688:	e7a3      	b.n	800b5d2 <__multiply+0x7e>
 800b68a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1a5      	bne.n	800b5de <__multiply+0x8a>
 800b692:	3f01      	subs	r7, #1
 800b694:	e7a1      	b.n	800b5da <__multiply+0x86>
 800b696:	bf00      	nop
 800b698:	0800bd14 	.word	0x0800bd14
 800b69c:	0800bd25 	.word	0x0800bd25

0800b6a0 <__pow5mult>:
 800b6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6a4:	4615      	mov	r5, r2
 800b6a6:	f012 0203 	ands.w	r2, r2, #3
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	460f      	mov	r7, r1
 800b6ae:	d007      	beq.n	800b6c0 <__pow5mult+0x20>
 800b6b0:	4c25      	ldr	r4, [pc, #148]	; (800b748 <__pow5mult+0xa8>)
 800b6b2:	3a01      	subs	r2, #1
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6ba:	f7ff fe9b 	bl	800b3f4 <__multadd>
 800b6be:	4607      	mov	r7, r0
 800b6c0:	10ad      	asrs	r5, r5, #2
 800b6c2:	d03d      	beq.n	800b740 <__pow5mult+0xa0>
 800b6c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b6c6:	b97c      	cbnz	r4, 800b6e8 <__pow5mult+0x48>
 800b6c8:	2010      	movs	r0, #16
 800b6ca:	f7fd ff91 	bl	80095f0 <malloc>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	6270      	str	r0, [r6, #36]	; 0x24
 800b6d2:	b928      	cbnz	r0, 800b6e0 <__pow5mult+0x40>
 800b6d4:	4b1d      	ldr	r3, [pc, #116]	; (800b74c <__pow5mult+0xac>)
 800b6d6:	481e      	ldr	r0, [pc, #120]	; (800b750 <__pow5mult+0xb0>)
 800b6d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b6dc:	f000 f9c8 	bl	800ba70 <__assert_func>
 800b6e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6e4:	6004      	str	r4, [r0, #0]
 800b6e6:	60c4      	str	r4, [r0, #12]
 800b6e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b6ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6f0:	b94c      	cbnz	r4, 800b706 <__pow5mult+0x66>
 800b6f2:	f240 2171 	movw	r1, #625	; 0x271
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	f7ff ff16 	bl	800b528 <__i2b>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800b702:	4604      	mov	r4, r0
 800b704:	6003      	str	r3, [r0, #0]
 800b706:	f04f 0900 	mov.w	r9, #0
 800b70a:	07eb      	lsls	r3, r5, #31
 800b70c:	d50a      	bpl.n	800b724 <__pow5mult+0x84>
 800b70e:	4639      	mov	r1, r7
 800b710:	4622      	mov	r2, r4
 800b712:	4630      	mov	r0, r6
 800b714:	f7ff ff1e 	bl	800b554 <__multiply>
 800b718:	4639      	mov	r1, r7
 800b71a:	4680      	mov	r8, r0
 800b71c:	4630      	mov	r0, r6
 800b71e:	f7ff fe47 	bl	800b3b0 <_Bfree>
 800b722:	4647      	mov	r7, r8
 800b724:	106d      	asrs	r5, r5, #1
 800b726:	d00b      	beq.n	800b740 <__pow5mult+0xa0>
 800b728:	6820      	ldr	r0, [r4, #0]
 800b72a:	b938      	cbnz	r0, 800b73c <__pow5mult+0x9c>
 800b72c:	4622      	mov	r2, r4
 800b72e:	4621      	mov	r1, r4
 800b730:	4630      	mov	r0, r6
 800b732:	f7ff ff0f 	bl	800b554 <__multiply>
 800b736:	6020      	str	r0, [r4, #0]
 800b738:	f8c0 9000 	str.w	r9, [r0]
 800b73c:	4604      	mov	r4, r0
 800b73e:	e7e4      	b.n	800b70a <__pow5mult+0x6a>
 800b740:	4638      	mov	r0, r7
 800b742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b746:	bf00      	nop
 800b748:	0800be78 	.word	0x0800be78
 800b74c:	0800bc9e 	.word	0x0800bc9e
 800b750:	0800bd25 	.word	0x0800bd25

0800b754 <__lshift>:
 800b754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b758:	460c      	mov	r4, r1
 800b75a:	6849      	ldr	r1, [r1, #4]
 800b75c:	6923      	ldr	r3, [r4, #16]
 800b75e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b762:	68a3      	ldr	r3, [r4, #8]
 800b764:	4607      	mov	r7, r0
 800b766:	4691      	mov	r9, r2
 800b768:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b76c:	f108 0601 	add.w	r6, r8, #1
 800b770:	42b3      	cmp	r3, r6
 800b772:	db0b      	blt.n	800b78c <__lshift+0x38>
 800b774:	4638      	mov	r0, r7
 800b776:	f7ff fddb 	bl	800b330 <_Balloc>
 800b77a:	4605      	mov	r5, r0
 800b77c:	b948      	cbnz	r0, 800b792 <__lshift+0x3e>
 800b77e:	4602      	mov	r2, r0
 800b780:	4b28      	ldr	r3, [pc, #160]	; (800b824 <__lshift+0xd0>)
 800b782:	4829      	ldr	r0, [pc, #164]	; (800b828 <__lshift+0xd4>)
 800b784:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b788:	f000 f972 	bl	800ba70 <__assert_func>
 800b78c:	3101      	adds	r1, #1
 800b78e:	005b      	lsls	r3, r3, #1
 800b790:	e7ee      	b.n	800b770 <__lshift+0x1c>
 800b792:	2300      	movs	r3, #0
 800b794:	f100 0114 	add.w	r1, r0, #20
 800b798:	f100 0210 	add.w	r2, r0, #16
 800b79c:	4618      	mov	r0, r3
 800b79e:	4553      	cmp	r3, sl
 800b7a0:	db33      	blt.n	800b80a <__lshift+0xb6>
 800b7a2:	6920      	ldr	r0, [r4, #16]
 800b7a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7a8:	f104 0314 	add.w	r3, r4, #20
 800b7ac:	f019 091f 	ands.w	r9, r9, #31
 800b7b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7b8:	d02b      	beq.n	800b812 <__lshift+0xbe>
 800b7ba:	f1c9 0e20 	rsb	lr, r9, #32
 800b7be:	468a      	mov	sl, r1
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	6818      	ldr	r0, [r3, #0]
 800b7c4:	fa00 f009 	lsl.w	r0, r0, r9
 800b7c8:	4302      	orrs	r2, r0
 800b7ca:	f84a 2b04 	str.w	r2, [sl], #4
 800b7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7d2:	459c      	cmp	ip, r3
 800b7d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b7d8:	d8f3      	bhi.n	800b7c2 <__lshift+0x6e>
 800b7da:	ebac 0304 	sub.w	r3, ip, r4
 800b7de:	3b15      	subs	r3, #21
 800b7e0:	f023 0303 	bic.w	r3, r3, #3
 800b7e4:	3304      	adds	r3, #4
 800b7e6:	f104 0015 	add.w	r0, r4, #21
 800b7ea:	4584      	cmp	ip, r0
 800b7ec:	bf38      	it	cc
 800b7ee:	2304      	movcc	r3, #4
 800b7f0:	50ca      	str	r2, [r1, r3]
 800b7f2:	b10a      	cbz	r2, 800b7f8 <__lshift+0xa4>
 800b7f4:	f108 0602 	add.w	r6, r8, #2
 800b7f8:	3e01      	subs	r6, #1
 800b7fa:	4638      	mov	r0, r7
 800b7fc:	612e      	str	r6, [r5, #16]
 800b7fe:	4621      	mov	r1, r4
 800b800:	f7ff fdd6 	bl	800b3b0 <_Bfree>
 800b804:	4628      	mov	r0, r5
 800b806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b80a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b80e:	3301      	adds	r3, #1
 800b810:	e7c5      	b.n	800b79e <__lshift+0x4a>
 800b812:	3904      	subs	r1, #4
 800b814:	f853 2b04 	ldr.w	r2, [r3], #4
 800b818:	f841 2f04 	str.w	r2, [r1, #4]!
 800b81c:	459c      	cmp	ip, r3
 800b81e:	d8f9      	bhi.n	800b814 <__lshift+0xc0>
 800b820:	e7ea      	b.n	800b7f8 <__lshift+0xa4>
 800b822:	bf00      	nop
 800b824:	0800bd14 	.word	0x0800bd14
 800b828:	0800bd25 	.word	0x0800bd25

0800b82c <__mcmp>:
 800b82c:	b530      	push	{r4, r5, lr}
 800b82e:	6902      	ldr	r2, [r0, #16]
 800b830:	690c      	ldr	r4, [r1, #16]
 800b832:	1b12      	subs	r2, r2, r4
 800b834:	d10e      	bne.n	800b854 <__mcmp+0x28>
 800b836:	f100 0314 	add.w	r3, r0, #20
 800b83a:	3114      	adds	r1, #20
 800b83c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b840:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b844:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b848:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b84c:	42a5      	cmp	r5, r4
 800b84e:	d003      	beq.n	800b858 <__mcmp+0x2c>
 800b850:	d305      	bcc.n	800b85e <__mcmp+0x32>
 800b852:	2201      	movs	r2, #1
 800b854:	4610      	mov	r0, r2
 800b856:	bd30      	pop	{r4, r5, pc}
 800b858:	4283      	cmp	r3, r0
 800b85a:	d3f3      	bcc.n	800b844 <__mcmp+0x18>
 800b85c:	e7fa      	b.n	800b854 <__mcmp+0x28>
 800b85e:	f04f 32ff 	mov.w	r2, #4294967295
 800b862:	e7f7      	b.n	800b854 <__mcmp+0x28>

0800b864 <__mdiff>:
 800b864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b868:	460c      	mov	r4, r1
 800b86a:	4606      	mov	r6, r0
 800b86c:	4611      	mov	r1, r2
 800b86e:	4620      	mov	r0, r4
 800b870:	4617      	mov	r7, r2
 800b872:	f7ff ffdb 	bl	800b82c <__mcmp>
 800b876:	1e05      	subs	r5, r0, #0
 800b878:	d110      	bne.n	800b89c <__mdiff+0x38>
 800b87a:	4629      	mov	r1, r5
 800b87c:	4630      	mov	r0, r6
 800b87e:	f7ff fd57 	bl	800b330 <_Balloc>
 800b882:	b930      	cbnz	r0, 800b892 <__mdiff+0x2e>
 800b884:	4b39      	ldr	r3, [pc, #228]	; (800b96c <__mdiff+0x108>)
 800b886:	4602      	mov	r2, r0
 800b888:	f240 2132 	movw	r1, #562	; 0x232
 800b88c:	4838      	ldr	r0, [pc, #224]	; (800b970 <__mdiff+0x10c>)
 800b88e:	f000 f8ef 	bl	800ba70 <__assert_func>
 800b892:	2301      	movs	r3, #1
 800b894:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89c:	bfa4      	itt	ge
 800b89e:	463b      	movge	r3, r7
 800b8a0:	4627      	movge	r7, r4
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	6879      	ldr	r1, [r7, #4]
 800b8a6:	bfa6      	itte	ge
 800b8a8:	461c      	movge	r4, r3
 800b8aa:	2500      	movge	r5, #0
 800b8ac:	2501      	movlt	r5, #1
 800b8ae:	f7ff fd3f 	bl	800b330 <_Balloc>
 800b8b2:	b920      	cbnz	r0, 800b8be <__mdiff+0x5a>
 800b8b4:	4b2d      	ldr	r3, [pc, #180]	; (800b96c <__mdiff+0x108>)
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b8bc:	e7e6      	b.n	800b88c <__mdiff+0x28>
 800b8be:	693e      	ldr	r6, [r7, #16]
 800b8c0:	60c5      	str	r5, [r0, #12]
 800b8c2:	6925      	ldr	r5, [r4, #16]
 800b8c4:	f107 0114 	add.w	r1, r7, #20
 800b8c8:	f104 0914 	add.w	r9, r4, #20
 800b8cc:	f100 0e14 	add.w	lr, r0, #20
 800b8d0:	f107 0210 	add.w	r2, r7, #16
 800b8d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b8d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b8dc:	46f2      	mov	sl, lr
 800b8de:	2700      	movs	r7, #0
 800b8e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b8e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b8e8:	fa1f f883 	uxth.w	r8, r3
 800b8ec:	fa17 f78b 	uxtah	r7, r7, fp
 800b8f0:	0c1b      	lsrs	r3, r3, #16
 800b8f2:	eba7 0808 	sub.w	r8, r7, r8
 800b8f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b8fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b8fe:	fa1f f888 	uxth.w	r8, r8
 800b902:	141f      	asrs	r7, r3, #16
 800b904:	454d      	cmp	r5, r9
 800b906:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b90a:	f84a 3b04 	str.w	r3, [sl], #4
 800b90e:	d8e7      	bhi.n	800b8e0 <__mdiff+0x7c>
 800b910:	1b2b      	subs	r3, r5, r4
 800b912:	3b15      	subs	r3, #21
 800b914:	f023 0303 	bic.w	r3, r3, #3
 800b918:	3304      	adds	r3, #4
 800b91a:	3415      	adds	r4, #21
 800b91c:	42a5      	cmp	r5, r4
 800b91e:	bf38      	it	cc
 800b920:	2304      	movcc	r3, #4
 800b922:	4419      	add	r1, r3
 800b924:	4473      	add	r3, lr
 800b926:	469e      	mov	lr, r3
 800b928:	460d      	mov	r5, r1
 800b92a:	4565      	cmp	r5, ip
 800b92c:	d30e      	bcc.n	800b94c <__mdiff+0xe8>
 800b92e:	f10c 0203 	add.w	r2, ip, #3
 800b932:	1a52      	subs	r2, r2, r1
 800b934:	f022 0203 	bic.w	r2, r2, #3
 800b938:	3903      	subs	r1, #3
 800b93a:	458c      	cmp	ip, r1
 800b93c:	bf38      	it	cc
 800b93e:	2200      	movcc	r2, #0
 800b940:	441a      	add	r2, r3
 800b942:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b946:	b17b      	cbz	r3, 800b968 <__mdiff+0x104>
 800b948:	6106      	str	r6, [r0, #16]
 800b94a:	e7a5      	b.n	800b898 <__mdiff+0x34>
 800b94c:	f855 8b04 	ldr.w	r8, [r5], #4
 800b950:	fa17 f488 	uxtah	r4, r7, r8
 800b954:	1422      	asrs	r2, r4, #16
 800b956:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b95a:	b2a4      	uxth	r4, r4
 800b95c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b960:	f84e 4b04 	str.w	r4, [lr], #4
 800b964:	1417      	asrs	r7, r2, #16
 800b966:	e7e0      	b.n	800b92a <__mdiff+0xc6>
 800b968:	3e01      	subs	r6, #1
 800b96a:	e7ea      	b.n	800b942 <__mdiff+0xde>
 800b96c:	0800bd14 	.word	0x0800bd14
 800b970:	0800bd25 	.word	0x0800bd25

0800b974 <__d2b>:
 800b974:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b978:	4689      	mov	r9, r1
 800b97a:	2101      	movs	r1, #1
 800b97c:	ec57 6b10 	vmov	r6, r7, d0
 800b980:	4690      	mov	r8, r2
 800b982:	f7ff fcd5 	bl	800b330 <_Balloc>
 800b986:	4604      	mov	r4, r0
 800b988:	b930      	cbnz	r0, 800b998 <__d2b+0x24>
 800b98a:	4602      	mov	r2, r0
 800b98c:	4b25      	ldr	r3, [pc, #148]	; (800ba24 <__d2b+0xb0>)
 800b98e:	4826      	ldr	r0, [pc, #152]	; (800ba28 <__d2b+0xb4>)
 800b990:	f240 310a 	movw	r1, #778	; 0x30a
 800b994:	f000 f86c 	bl	800ba70 <__assert_func>
 800b998:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b99c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9a0:	bb35      	cbnz	r5, 800b9f0 <__d2b+0x7c>
 800b9a2:	2e00      	cmp	r6, #0
 800b9a4:	9301      	str	r3, [sp, #4]
 800b9a6:	d028      	beq.n	800b9fa <__d2b+0x86>
 800b9a8:	4668      	mov	r0, sp
 800b9aa:	9600      	str	r6, [sp, #0]
 800b9ac:	f7ff fd8c 	bl	800b4c8 <__lo0bits>
 800b9b0:	9900      	ldr	r1, [sp, #0]
 800b9b2:	b300      	cbz	r0, 800b9f6 <__d2b+0x82>
 800b9b4:	9a01      	ldr	r2, [sp, #4]
 800b9b6:	f1c0 0320 	rsb	r3, r0, #32
 800b9ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b9be:	430b      	orrs	r3, r1
 800b9c0:	40c2      	lsrs	r2, r0
 800b9c2:	6163      	str	r3, [r4, #20]
 800b9c4:	9201      	str	r2, [sp, #4]
 800b9c6:	9b01      	ldr	r3, [sp, #4]
 800b9c8:	61a3      	str	r3, [r4, #24]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	bf14      	ite	ne
 800b9ce:	2202      	movne	r2, #2
 800b9d0:	2201      	moveq	r2, #1
 800b9d2:	6122      	str	r2, [r4, #16]
 800b9d4:	b1d5      	cbz	r5, 800ba0c <__d2b+0x98>
 800b9d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b9da:	4405      	add	r5, r0
 800b9dc:	f8c9 5000 	str.w	r5, [r9]
 800b9e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b9e4:	f8c8 0000 	str.w	r0, [r8]
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	b003      	add	sp, #12
 800b9ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9f4:	e7d5      	b.n	800b9a2 <__d2b+0x2e>
 800b9f6:	6161      	str	r1, [r4, #20]
 800b9f8:	e7e5      	b.n	800b9c6 <__d2b+0x52>
 800b9fa:	a801      	add	r0, sp, #4
 800b9fc:	f7ff fd64 	bl	800b4c8 <__lo0bits>
 800ba00:	9b01      	ldr	r3, [sp, #4]
 800ba02:	6163      	str	r3, [r4, #20]
 800ba04:	2201      	movs	r2, #1
 800ba06:	6122      	str	r2, [r4, #16]
 800ba08:	3020      	adds	r0, #32
 800ba0a:	e7e3      	b.n	800b9d4 <__d2b+0x60>
 800ba0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba14:	f8c9 0000 	str.w	r0, [r9]
 800ba18:	6918      	ldr	r0, [r3, #16]
 800ba1a:	f7ff fd35 	bl	800b488 <__hi0bits>
 800ba1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba22:	e7df      	b.n	800b9e4 <__d2b+0x70>
 800ba24:	0800bd14 	.word	0x0800bd14
 800ba28:	0800bd25 	.word	0x0800bd25

0800ba2c <_calloc_r>:
 800ba2c:	b513      	push	{r0, r1, r4, lr}
 800ba2e:	434a      	muls	r2, r1
 800ba30:	4611      	mov	r1, r2
 800ba32:	9201      	str	r2, [sp, #4]
 800ba34:	f7fd fe4a 	bl	80096cc <_malloc_r>
 800ba38:	4604      	mov	r4, r0
 800ba3a:	b118      	cbz	r0, 800ba44 <_calloc_r+0x18>
 800ba3c:	9a01      	ldr	r2, [sp, #4]
 800ba3e:	2100      	movs	r1, #0
 800ba40:	f7fd fdec 	bl	800961c <memset>
 800ba44:	4620      	mov	r0, r4
 800ba46:	b002      	add	sp, #8
 800ba48:	bd10      	pop	{r4, pc}
	...

0800ba4c <_read_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4d07      	ldr	r5, [pc, #28]	; (800ba6c <_read_r+0x20>)
 800ba50:	4604      	mov	r4, r0
 800ba52:	4608      	mov	r0, r1
 800ba54:	4611      	mov	r1, r2
 800ba56:	2200      	movs	r2, #0
 800ba58:	602a      	str	r2, [r5, #0]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f7f5 feaa 	bl	80017b4 <_read>
 800ba60:	1c43      	adds	r3, r0, #1
 800ba62:	d102      	bne.n	800ba6a <_read_r+0x1e>
 800ba64:	682b      	ldr	r3, [r5, #0]
 800ba66:	b103      	cbz	r3, 800ba6a <_read_r+0x1e>
 800ba68:	6023      	str	r3, [r4, #0]
 800ba6a:	bd38      	pop	{r3, r4, r5, pc}
 800ba6c:	200008d4 	.word	0x200008d4

0800ba70 <__assert_func>:
 800ba70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba72:	4614      	mov	r4, r2
 800ba74:	461a      	mov	r2, r3
 800ba76:	4b09      	ldr	r3, [pc, #36]	; (800ba9c <__assert_func+0x2c>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	68d8      	ldr	r0, [r3, #12]
 800ba7e:	b14c      	cbz	r4, 800ba94 <__assert_func+0x24>
 800ba80:	4b07      	ldr	r3, [pc, #28]	; (800baa0 <__assert_func+0x30>)
 800ba82:	9100      	str	r1, [sp, #0]
 800ba84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba88:	4906      	ldr	r1, [pc, #24]	; (800baa4 <__assert_func+0x34>)
 800ba8a:	462b      	mov	r3, r5
 800ba8c:	f7fd fcf2 	bl	8009474 <fiprintf>
 800ba90:	f000 f82b 	bl	800baea <abort>
 800ba94:	4b04      	ldr	r3, [pc, #16]	; (800baa8 <__assert_func+0x38>)
 800ba96:	461c      	mov	r4, r3
 800ba98:	e7f3      	b.n	800ba82 <__assert_func+0x12>
 800ba9a:	bf00      	nop
 800ba9c:	200002cc 	.word	0x200002cc
 800baa0:	0800be84 	.word	0x0800be84
 800baa4:	0800be91 	.word	0x0800be91
 800baa8:	0800bebf 	.word	0x0800bebf

0800baac <__ascii_mbtowc>:
 800baac:	b082      	sub	sp, #8
 800baae:	b901      	cbnz	r1, 800bab2 <__ascii_mbtowc+0x6>
 800bab0:	a901      	add	r1, sp, #4
 800bab2:	b142      	cbz	r2, 800bac6 <__ascii_mbtowc+0x1a>
 800bab4:	b14b      	cbz	r3, 800baca <__ascii_mbtowc+0x1e>
 800bab6:	7813      	ldrb	r3, [r2, #0]
 800bab8:	600b      	str	r3, [r1, #0]
 800baba:	7812      	ldrb	r2, [r2, #0]
 800babc:	1e10      	subs	r0, r2, #0
 800babe:	bf18      	it	ne
 800bac0:	2001      	movne	r0, #1
 800bac2:	b002      	add	sp, #8
 800bac4:	4770      	bx	lr
 800bac6:	4610      	mov	r0, r2
 800bac8:	e7fb      	b.n	800bac2 <__ascii_mbtowc+0x16>
 800baca:	f06f 0001 	mvn.w	r0, #1
 800bace:	e7f8      	b.n	800bac2 <__ascii_mbtowc+0x16>

0800bad0 <__ascii_wctomb>:
 800bad0:	b149      	cbz	r1, 800bae6 <__ascii_wctomb+0x16>
 800bad2:	2aff      	cmp	r2, #255	; 0xff
 800bad4:	bf85      	ittet	hi
 800bad6:	238a      	movhi	r3, #138	; 0x8a
 800bad8:	6003      	strhi	r3, [r0, #0]
 800bada:	700a      	strbls	r2, [r1, #0]
 800badc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bae0:	bf98      	it	ls
 800bae2:	2001      	movls	r0, #1
 800bae4:	4770      	bx	lr
 800bae6:	4608      	mov	r0, r1
 800bae8:	4770      	bx	lr

0800baea <abort>:
 800baea:	b508      	push	{r3, lr}
 800baec:	2006      	movs	r0, #6
 800baee:	f000 f82b 	bl	800bb48 <raise>
 800baf2:	2001      	movs	r0, #1
 800baf4:	f7f5 fe54 	bl	80017a0 <_exit>

0800baf8 <_raise_r>:
 800baf8:	291f      	cmp	r1, #31
 800bafa:	b538      	push	{r3, r4, r5, lr}
 800bafc:	4604      	mov	r4, r0
 800bafe:	460d      	mov	r5, r1
 800bb00:	d904      	bls.n	800bb0c <_raise_r+0x14>
 800bb02:	2316      	movs	r3, #22
 800bb04:	6003      	str	r3, [r0, #0]
 800bb06:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bb0e:	b112      	cbz	r2, 800bb16 <_raise_r+0x1e>
 800bb10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bb14:	b94b      	cbnz	r3, 800bb2a <_raise_r+0x32>
 800bb16:	4620      	mov	r0, r4
 800bb18:	f000 f830 	bl	800bb7c <_getpid_r>
 800bb1c:	462a      	mov	r2, r5
 800bb1e:	4601      	mov	r1, r0
 800bb20:	4620      	mov	r0, r4
 800bb22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb26:	f000 b817 	b.w	800bb58 <_kill_r>
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d00a      	beq.n	800bb44 <_raise_r+0x4c>
 800bb2e:	1c59      	adds	r1, r3, #1
 800bb30:	d103      	bne.n	800bb3a <_raise_r+0x42>
 800bb32:	2316      	movs	r3, #22
 800bb34:	6003      	str	r3, [r0, #0]
 800bb36:	2001      	movs	r0, #1
 800bb38:	e7e7      	b.n	800bb0a <_raise_r+0x12>
 800bb3a:	2400      	movs	r4, #0
 800bb3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb40:	4628      	mov	r0, r5
 800bb42:	4798      	blx	r3
 800bb44:	2000      	movs	r0, #0
 800bb46:	e7e0      	b.n	800bb0a <_raise_r+0x12>

0800bb48 <raise>:
 800bb48:	4b02      	ldr	r3, [pc, #8]	; (800bb54 <raise+0xc>)
 800bb4a:	4601      	mov	r1, r0
 800bb4c:	6818      	ldr	r0, [r3, #0]
 800bb4e:	f7ff bfd3 	b.w	800baf8 <_raise_r>
 800bb52:	bf00      	nop
 800bb54:	200002cc 	.word	0x200002cc

0800bb58 <_kill_r>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	4d07      	ldr	r5, [pc, #28]	; (800bb78 <_kill_r+0x20>)
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	4604      	mov	r4, r0
 800bb60:	4608      	mov	r0, r1
 800bb62:	4611      	mov	r1, r2
 800bb64:	602b      	str	r3, [r5, #0]
 800bb66:	f7f5 fe0b 	bl	8001780 <_kill>
 800bb6a:	1c43      	adds	r3, r0, #1
 800bb6c:	d102      	bne.n	800bb74 <_kill_r+0x1c>
 800bb6e:	682b      	ldr	r3, [r5, #0]
 800bb70:	b103      	cbz	r3, 800bb74 <_kill_r+0x1c>
 800bb72:	6023      	str	r3, [r4, #0]
 800bb74:	bd38      	pop	{r3, r4, r5, pc}
 800bb76:	bf00      	nop
 800bb78:	200008d4 	.word	0x200008d4

0800bb7c <_getpid_r>:
 800bb7c:	f7f5 bdf8 	b.w	8001770 <_getpid>

0800bb80 <_init>:
 800bb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb82:	bf00      	nop
 800bb84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb86:	bc08      	pop	{r3}
 800bb88:	469e      	mov	lr, r3
 800bb8a:	4770      	bx	lr

0800bb8c <_fini>:
 800bb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8e:	bf00      	nop
 800bb90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb92:	bc08      	pop	{r3}
 800bb94:	469e      	mov	lr, r3
 800bb96:	4770      	bx	lr
