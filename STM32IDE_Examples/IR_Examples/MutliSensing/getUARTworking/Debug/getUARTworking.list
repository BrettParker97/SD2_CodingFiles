
getUARTworking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba88  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800bc58  0800bc58  0001bc58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c08c  0800c08c  0002049c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c08c  0800c08c  0001c08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c094  0800c094  0002049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c094  0800c094  0001c094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c098  0800c098  0001c098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  0800c09c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  2000049c  0800c538  0002049c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  0800c538  000208d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abc7  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c53  00000000  00000000  0003b093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  0003dce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f08  00000000  00000000  0003ecd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245b3  00000000  00000000  0003fbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149b5  00000000  00000000  0006418b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2c06  00000000  00000000  00078b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b746  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005344  00000000  00000000  0014b79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000049c 	.word	0x2000049c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bc40 	.word	0x0800bc40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004a0 	.word	0x200004a0
 800020c:	0800bc40 	.word	0x0800bc40

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <Brett_VL53L0X_StartMultiSensing>:

// vars

//functions
VL53L0X_Error Brett_VL53L0X_StartMultiSensing(VL53L0X_DEV Dev)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]

	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000eec:	2100      	movs	r1, #0
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f003 fcdc 	bl	80048ac <VL53L0X_SetDeviceMode>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8000ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d104      	bne.n	8000f0a <Brett_VL53L0X_StartMultiSensing+0x2a>
		Status = VL53L0X_StartMeasurement(Dev);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f004 fa5d 	bl	80053c0 <VL53L0X_StartMeasurement>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]

	return Status;
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <Brett_VL53L0X_FinishMultiSensing>:

VL53L0X_Error Brett_VL53L0X_FinishMultiSensing(VL53L0X_DEV Dev,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;


	// make sure sensor is done
	if (Status == VL53L0X_ERROR_NONE)
 8000f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d104      	bne.n	8000f36 <Brett_VL53L0X_FinishMultiSensing+0x20>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f005 fcf7 	bl	8006920 <VL53L0X_measurement_poll_for_completion>
 8000f32:	4603      	mov	r3, r0
 8000f34:	73fb      	strb	r3, [r7, #15]

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8000f36:	f107 030e 	add.w	r3, r7, #14
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f003 fce1 	bl	8004904 <VL53L0X_GetDeviceMode>
 8000f42:	4603      	mov	r3, r0
 8000f44:	73fb      	strb	r3, [r7, #15]

	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8000f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d106      	bne.n	8000f5c <Brett_VL53L0X_FinishMultiSensing+0x46>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d103      	bne.n	8000f5c <Brett_VL53L0X_FinishMultiSensing+0x46>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2203      	movs	r2, #3
 8000f58:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e

	if (Status == VL53L0X_ERROR_NONE)
 8000f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d105      	bne.n	8000f70 <Brett_VL53L0X_FinishMultiSensing+0x5a>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8000f64:	6839      	ldr	r1, [r7, #0]
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f004 fb2c 	bl	80055c4 <VL53L0X_GetRangingMeasurementData>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8000f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d105      	bne.n	8000f84 <Brett_VL53L0X_FinishMultiSensing+0x6e>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f004 fdd0 	bl	8005b20 <VL53L0X_ClearInterruptMask>
 8000f80:	4603      	mov	r3, r0
 8000f82:	73fb      	strb	r3, [r7, #15]

	return Status;
 8000f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <Brett_IR_StartMulti>:

int Brett_IR_StartMulti(VL53L0X_Dev_t devs[], int distances[], int howManyDevs)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b090      	sub	sp, #64	; 0x40
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
	int bretts_status = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53L0_DEV Dev;

	// first start each dev measuring
	for (int i = 0; i < howManyDevs; i++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000faa:	e020      	b.n	8000fee <Brett_IR_StartMulti+0x5e>
	{
		// set point to a dev
		Dev = &devs[i];
 8000fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fae:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8000fb2:	fb02 f303 	mul.w	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4413      	add	r3, r2
 8000fba:	62fb      	str	r3, [r7, #44]	; 0x2c

		// start sensing
		Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fc0:	f003 fc74 	bl	80048ac <VL53L0X_SetDeviceMode>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		Status = Brett_VL53L0X_StartMultiSensing(Dev);
 8000fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fcc:	f7ff ff88 	bl	8000ee0 <Brett_VL53L0X_StartMultiSensing>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		// return if error happened
		if (Status != VL53L0X_ERROR_NONE)
 8000fd6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d004      	beq.n	8000fe8 <Brett_IR_StartMulti+0x58>
			return bretts_status = -1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe6:	e03e      	b.n	8001066 <Brett_IR_StartMulti+0xd6>
	for (int i = 0; i < howManyDevs; i++)
 8000fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fea:	3301      	adds	r3, #1
 8000fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	dbda      	blt.n	8000fac <Brett_IR_StartMulti+0x1c>
	}

	// finally wait for each dev to finish, then store data received
	for (int i = 0; i < howManyDevs; i++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ffa:	e02f      	b.n	800105c <Brett_IR_StartMulti+0xcc>
	{
		// data struct IRs use
		VL53L0X_RangingMeasurementData_t RangingMeasurementData;

		// point to a dev
		Dev = &devs[i];
 8000ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ffe:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8001002:	fb02 f303 	mul.w	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c

		// get data from sensor
		Status = Brett_VL53L0X_FinishMultiSensing(Dev, &RangingMeasurementData);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001014:	f7ff ff7f 	bl	8000f16 <Brett_VL53L0X_FinishMultiSensing>
 8001018:	4603      	mov	r3, r0
 800101a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		// if range status isnt 0 then assume max distance
		if (RangingMeasurementData.RangeStatus != 0)
 800101e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <Brett_IR_StartMulti+0xa6>
			distances[i] = 8100;
 8001026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	4413      	add	r3, r2
 800102e:	f641 72a4 	movw	r2, #8100	; 0x1fa4
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e006      	b.n	8001044 <Brett_IR_StartMulti+0xb4>
		else
			distances[i] = RangingMeasurementData.RangeMilliMeter;
 8001036:	8b39      	ldrh	r1, [r7, #24]
 8001038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	4413      	add	r3, r2
 8001040:	460a      	mov	r2, r1
 8001042:	601a      	str	r2, [r3, #0]

		// return if error happened
		if (Status != VL53L0X_ERROR_NONE)
 8001044:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001048:	2b00      	cmp	r3, #0
 800104a:	d004      	beq.n	8001056 <Brett_IR_StartMulti+0xc6>
			return bretts_status = -2;
 800104c:	f06f 0301 	mvn.w	r3, #1
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
 8001052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001054:	e007      	b.n	8001066 <Brett_IR_StartMulti+0xd6>
	for (int i = 0; i < howManyDevs; i++)
 8001056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001058:	3301      	adds	r3, #1
 800105a:	63bb      	str	r3, [r7, #56]	; 0x38
 800105c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	429a      	cmp	r2, r3
 8001062:	dbcb      	blt.n	8000ffc <Brett_IR_StartMulti+0x6c>
	}

	return bretts_status;
 8001064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001066:	4618      	mov	r0, r3
 8001068:	3740      	adds	r7, #64	; 0x40
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <Brett_IR_InitIrSensor>:

// !!FUCNTION NOT COMPLETE YET!!
// uses random GPIO
int Brett_IR_InitIrSensor(VL53L0X_Dev_t devs[], I2C_HandleTypeDef *i2c, int howManyDevs)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;
	uint8_t newi2c = 0x52;
 8001082:	2352      	movs	r3, #82	; 0x52
 8001084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	int bretts_status = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]


	static const uint8_t GPIO_expander = 0x20 << 1;
	WrByte(i2c, GPIO_expander, GPIO_write, GPIO_All_Off);
 800108c:	4b75      	ldr	r3, [pc, #468]	; (8001264 <Brett_IR_InitIrSensor+0x1f4>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b299      	uxth	r1, r3
 8001092:	2300      	movs	r3, #0
 8001094:	2240      	movs	r2, #64	; 0x40
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f000 f8e6 	bl	8001268 <WrByte>
	HAL_Delay(100);
 800109c:	2064      	movs	r0, #100	; 0x64
 800109e:	f000 fd3d 	bl	8001b1c <HAL_Delay>

	WrByte(i2c, GPIO_expander, GPIO_write, GPIO_All_On);
 80010a2:	4b70      	ldr	r3, [pc, #448]	; (8001264 <Brett_IR_InitIrSensor+0x1f4>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b299      	uxth	r1, r3
 80010a8:	2303      	movs	r3, #3
 80010aa:	2240      	movs	r2, #64	; 0x40
 80010ac:	68b8      	ldr	r0, [r7, #8]
 80010ae:	f000 f8db 	bl	8001268 <WrByte>
	HAL_Delay(100);
 80010b2:	2064      	movs	r0, #100	; 0x64
 80010b4:	f000 fd32 	bl	8001b1c <HAL_Delay>

	for (int i = 0; i < howManyDevs; i++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
 80010bc:	e0c8      	b.n	8001250 <Brett_IR_InitIrSensor+0x1e0>
	{
		// point to dev
		VL53L0_DEV	Dev;
		Dev = &devs[i];
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]


		// FOR TESTING ONLY
		HAL_Delay(100);
 80010ce:	2064      	movs	r0, #100	; 0x64
 80010d0:	f000 fd24 	bl	8001b1c <HAL_Delay>
		// turn on XSHUT
		if (i == 0)
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d108      	bne.n	80010ec <Brett_IR_InitIrSensor+0x7c>
			WrByte(i2c, GPIO_expander, GPIO_write, GPIO_P0_On);
 80010da:	4b62      	ldr	r3, [pc, #392]	; (8001264 <Brett_IR_InitIrSensor+0x1f4>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b299      	uxth	r1, r3
 80010e0:	2301      	movs	r3, #1
 80010e2:	2240      	movs	r2, #64	; 0x40
 80010e4:	68b8      	ldr	r0, [r7, #8]
 80010e6:	f000 f8bf 	bl	8001268 <WrByte>
 80010ea:	e007      	b.n	80010fc <Brett_IR_InitIrSensor+0x8c>
		else
			WrByte(i2c, GPIO_expander, GPIO_write, GPIO_P1_On);
 80010ec:	4b5d      	ldr	r3, [pc, #372]	; (8001264 <Brett_IR_InitIrSensor+0x1f4>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b299      	uxth	r1, r3
 80010f2:	2302      	movs	r3, #2
 80010f4:	2240      	movs	r2, #64	; 0x40
 80010f6:	68b8      	ldr	r0, [r7, #8]
 80010f8:	f000 f8b6 	bl	8001268 <WrByte>
		HAL_Delay(100);
 80010fc:	2064      	movs	r0, #100	; 0x64
 80010fe:	f000 fd0d 	bl	8001b1c <HAL_Delay>

		// general dev inits
		Dev->comms_type =  1;
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		Dev->I2cDevAddr = 0x52;
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	2252      	movs	r2, #82	; 0x52
 800110e:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
		Dev->I2cHandle = i2c;
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		Dev->comms_speed_khz = 100;
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2264      	movs	r2, #100	; 0x64
 800111e:	f8a3 218a 	strh.w	r2, [r3, #394]	; 0x18a

		// i2c address setting
		newi2c = Dev->I2cDevAddr + (i + 1) * 2;
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	3301      	adds	r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4413      	add	r3, r2
 8001134:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		status = VL53L0X_SetDeviceAddress(Dev, newi2c);
 8001138:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800113c:	4619      	mov	r1, r3
 800113e:	69b8      	ldr	r0, [r7, #24]
 8001140:	f002 ffcd 	bl	80040de <VL53L0X_SetDeviceAddress>
 8001144:	4603      	mov	r3, r0
 8001146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if (status != VL53L0X_ERROR_NONE)
 800114a:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <Brett_IR_InitIrSensor+0xec>
			return bretts_status = -3;
 8001152:	f06f 0302 	mvn.w	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	e07f      	b.n	800125c <Brett_IR_InitIrSensor+0x1ec>
		Dev->I2cDevAddr = newi2c;
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8001162:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180

		// base init for all IR devs
		status = VL53L0X_WaitDeviceBooted( Dev );
 8001166:	69b8      	ldr	r0, [r7, #24]
 8001168:	f003 fadc 	bl	8004724 <VL53L0X_WaitDeviceBooted>
 800116c:	4603      	mov	r3, r0
 800116e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_DataInit( Dev );
 8001172:	69b8      	ldr	r0, [r7, #24]
 8001174:	f002 ffcc 	bl	8004110 <VL53L0X_DataInit>
 8001178:	4603      	mov	r3, r0
 800117a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_StaticInit( Dev );
 800117e:	69b8      	ldr	r0, [r7, #24]
 8001180:	f003 f94c 	bl	800441c <VL53L0X_StaticInit>
 8001184:	4603      	mov	r3, r0
 8001186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 800118a:	f107 0211 	add.w	r2, r7, #17
 800118e:	f107 0312 	add.w	r3, r7, #18
 8001192:	4619      	mov	r1, r3
 8001194:	69b8      	ldr	r0, [r7, #24]
 8001196:	f004 f80b 	bl	80051b0 <VL53L0X_PerformRefCalibration>
 800119a:	4603      	mov	r3, r0
 800119c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 80011a0:	f107 0213 	add.w	r2, r7, #19
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4619      	mov	r1, r3
 80011aa:	69b8      	ldr	r0, [r7, #24]
 80011ac:	f004 fd1a 	bl	8005be4 <VL53L0X_PerformRefSpadManagement>
 80011b0:	4603      	mov	r3, r0
 80011b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80011b6:	2100      	movs	r1, #0
 80011b8:	69b8      	ldr	r0, [r7, #24]
 80011ba:	f003 fb77 	bl	80048ac <VL53L0X_SetDeviceMode>
 80011be:	4603      	mov	r3, r0
 80011c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		// we can break this out later
		// init for long ranging mode
		status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80011c4:	2201      	movs	r2, #1
 80011c6:	2100      	movs	r1, #0
 80011c8:	69b8      	ldr	r0, [r7, #24]
 80011ca:	f003 fdeb 	bl	8004da4 <VL53L0X_SetLimitCheckEnable>
 80011ce:	4603      	mov	r3, r0
 80011d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2101      	movs	r1, #1
 80011d8:	69b8      	ldr	r0, [r7, #24]
 80011da:	f003 fde3 	bl	8004da4 <VL53L0X_SetLimitCheckEnable>
 80011de:	4603      	mov	r3, r0
 80011e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80011e4:	f641 1299 	movw	r2, #6553	; 0x1999
 80011e8:	2101      	movs	r1, #1
 80011ea:	69b8      	ldr	r0, [r7, #24]
 80011ec:	f003 fe8a 	bl	8004f04 <VL53L0X_SetLimitCheckValue>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80011f6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80011fa:	2100      	movs	r1, #0
 80011fc:	69b8      	ldr	r0, [r7, #24]
 80011fe:	f003 fe81 	bl	8004f04 <VL53L0X_SetLimitCheckValue>
 8001202:	4603      	mov	r3, r0
 8001204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8001208:	f248 01e8 	movw	r1, #33000	; 0x80e8
 800120c:	69b8      	ldr	r0, [r7, #24]
 800120e:	f003 fbab 	bl	8004968 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8001212:	4603      	mov	r3, r0
 8001214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001218:	2212      	movs	r2, #18
 800121a:	2100      	movs	r1, #0
 800121c:	69b8      	ldr	r0, [r7, #24]
 800121e:	f003 fbc9 	bl	80049b4 <VL53L0X_SetVcselPulsePeriod>
 8001222:	4603      	mov	r3, r0
 8001224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		status = VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001228:	220e      	movs	r2, #14
 800122a:	2101      	movs	r1, #1
 800122c:	69b8      	ldr	r0, [r7, #24]
 800122e:	f003 fbc1 	bl	80049b4 <VL53L0X_SetVcselPulsePeriod>
 8001232:	4603      	mov	r3, r0
 8001234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		// one last status check
		if (status != VL53L0X_ERROR_NONE)
 8001238:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800123c:	2b00      	cmp	r3, #0
 800123e:	d004      	beq.n	800124a <Brett_IR_InitIrSensor+0x1da>
			return bretts_status = -4;
 8001240:	f06f 0303 	mvn.w	r3, #3
 8001244:	61fb      	str	r3, [r7, #28]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	e008      	b.n	800125c <Brett_IR_InitIrSensor+0x1ec>
	for (int i = 0; i < howManyDevs; i++)
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	3301      	adds	r3, #1
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
 8001250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	429a      	cmp	r2, r3
 8001256:	f6ff af32 	blt.w	80010be <Brett_IR_InitIrSensor+0x4e>
	}
	return bretts_status;
 800125a:	69fb      	ldr	r3, [r7, #28]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	0800bc8f 	.word	0x0800bc8f

08001268 <WrByte>:

#include "helpful_i2c.h"

uint8_t _I2CBuffer[64];

int WrByte(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t index, uint8_t data) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	4608      	mov	r0, r1
 8001272:	4611      	mov	r1, r2
 8001274:	461a      	mov	r2, r3
 8001276:	4603      	mov	r3, r0
 8001278:	807b      	strh	r3, [r7, #2]
 800127a:	460b      	mov	r3, r1
 800127c:	707b      	strb	r3, [r7, #1]
 800127e:	4613      	mov	r3, r2
 8001280:	703b      	strb	r3, [r7, #0]
	int status = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]

    _I2CBuffer[0] = index;
 8001286:	4a09      	ldr	r2, [pc, #36]	; (80012ac <WrByte+0x44>)
 8001288:	787b      	ldrb	r3, [r7, #1]
 800128a:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <WrByte+0x44>)
 800128e:	783b      	ldrb	r3, [r7, #0]
 8001290:	7053      	strb	r3, [r2, #1]

    status = Brett_I2CWrite(hi2c, DevAddress, _I2CBuffer, 2);
 8001292:	8879      	ldrh	r1, [r7, #2]
 8001294:	2302      	movs	r3, #2
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <WrByte+0x44>)
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f809 	bl	80012b0 <Brett_I2CWrite>
 800129e:	60f8      	str	r0, [r7, #12]

    return status;
 80012a0:	68fb      	ldr	r3, [r7, #12]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200004c8 	.word	0x200004c8

080012b0 <Brett_I2CWrite>:

int Brett_I2CWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pdata, uint32_t count) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	460b      	mov	r3, r1
 80012be:	817b      	strh	r3, [r7, #10]
	int status = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

	status = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
    int i2c_time_out = 10+ count* 1;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	330a      	adds	r3, #10
 80012cc:	613b      	str	r3, [r7, #16]

    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, pdata, count, i2c_time_out);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	8979      	ldrh	r1, [r7, #10]
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	4613      	mov	r3, r2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f001 f819 	bl	8002314 <HAL_I2C_Master_Transmit>
 80012e2:	4603      	mov	r3, r0
 80012e4:	617b      	str	r3, [r7, #20]

    return status;
 80012e6:	697b      	ldr	r3, [r7, #20]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 80012f8:	1d39      	adds	r1, r7, #4
 80012fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012fe:	2201      	movs	r2, #1
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <__io_putchar+0x20>)
 8001302:	f002 fc10 	bl	8003b26 <HAL_UART_Transmit>
	return ch;
 8001306:	687b      	ldr	r3, [r7, #4]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000878 	.word	0x20000878

08001314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001318:	f000 fb8e 	bl	8001a38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800131c:	f000 f854 	bl	80013c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001320:	f000 f918 	bl	8001554 <MX_GPIO_Init>
	MX_I2C2_Init();
 8001324:	f000 f8be 	bl	80014a4 <MX_I2C2_Init>
	MX_USART2_UART_Init();
 8001328:	f000 f8ea 	bl	8001500 <MX_USART2_UART_Init>

	// init IRs
	brett_status = Brett_IR_InitIrSensor(devs, &hi2c2, howManyDevs);
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <main+0x90>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	491d      	ldr	r1, [pc, #116]	; (80013a8 <main+0x94>)
 8001334:	481d      	ldr	r0, [pc, #116]	; (80013ac <main+0x98>)
 8001336:	f7ff fe9b 	bl	8001070 <Brett_IR_InitIrSensor>
 800133a:	4603      	mov	r3, r0
 800133c:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <main+0x9c>)
 800133e:	6013      	str	r3, [r2, #0]
	if (brett_status != 0)
 8001340:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <main+0x9c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <main+0x40>
		printf("brett status %i\n\r", brett_status);
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <main+0x9c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	4819      	ldr	r0, [pc, #100]	; (80013b4 <main+0xa0>)
 8001350:	f009 f83c 	bl	800a3cc <iprintf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		brett_status = Brett_IR_StartMulti(devs, distances, howManyDevs);
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <main+0x90>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4917      	ldr	r1, [pc, #92]	; (80013b8 <main+0xa4>)
 800135c:	4813      	ldr	r0, [pc, #76]	; (80013ac <main+0x98>)
 800135e:	f7ff fe17 	bl	8000f90 <Brett_IR_StartMulti>
 8001362:	4603      	mov	r3, r0
 8001364:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <main+0x9c>)
 8001366:	6013      	str	r3, [r2, #0]
		if (brett_status != 0)
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <main+0x9c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <main+0x68>
			printf("brett status %i\n\r", brett_status);
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <main+0x9c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	480f      	ldr	r0, [pc, #60]	; (80013b4 <main+0xa0>)
 8001378:	f009 f828 	bl	800a3cc <iprintf>
		printf("distance 1 %i\n\r", distances[0]);
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <main+0xa4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	480e      	ldr	r0, [pc, #56]	; (80013bc <main+0xa8>)
 8001384:	f009 f822 	bl	800a3cc <iprintf>
		printf("distance 2 %i\n\r", distances[1]);
 8001388:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <main+0xa4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4619      	mov	r1, r3
 800138e:	480c      	ldr	r0, [pc, #48]	; (80013c0 <main+0xac>)
 8001390:	f009 f81c 	bl	800a3cc <iprintf>
		printf("\n\r");
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <main+0xb0>)
 8001396:	f009 f819 	bl	800a3cc <iprintf>
		HAL_Delay(1000);
 800139a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800139e:	f000 fbbd 	bl	8001b1c <HAL_Delay>
		brett_status = Brett_IR_StartMulti(devs, distances, howManyDevs);
 80013a2:	e7d7      	b.n	8001354 <main+0x40>
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000508 	.word	0x20000508
 80013ac:	20000560 	.word	0x20000560
 80013b0:	200004b8 	.word	0x200004b8
 80013b4:	0800bc58 	.word	0x0800bc58
 80013b8:	200008bc 	.word	0x200008bc
 80013bc:	0800bc6c 	.word	0x0800bc6c
 80013c0:	0800bc7c 	.word	0x0800bc7c
 80013c4:	0800bc8c 	.word	0x0800bc8c

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b094      	sub	sp, #80	; 0x50
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	2234      	movs	r2, #52	; 0x34
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f008 f982 	bl	80096e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	4b2a      	ldr	r3, [pc, #168]	; (800149c <SystemClock_Config+0xd4>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a29      	ldr	r2, [pc, #164]	; (800149c <SystemClock_Config+0xd4>)
 80013f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <SystemClock_Config+0xd4>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <SystemClock_Config+0xd8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001414:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <SystemClock_Config+0xd8>)
 8001416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <SystemClock_Config+0xd8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001428:	2302      	movs	r3, #2
 800142a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142c:	2301      	movs	r3, #1
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001430:	2310      	movs	r3, #16
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001434:	2302      	movs	r3, #2
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001438:	2300      	movs	r3, #0
 800143a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800143c:	2310      	movs	r3, #16
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001440:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001444:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001446:	2304      	movs	r3, #4
 8001448:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800144a:	2302      	movs	r3, #2
 800144c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800144e:	2302      	movs	r3, #2
 8001450:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4618      	mov	r0, r3
 8001458:	f002 f87a 	bl	8003550 <HAL_RCC_OscConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001462:	f000 f8dd 	bl	8001620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001466:	230f      	movs	r3, #15
 8001468:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146a:	2302      	movs	r3, #2
 800146c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001476:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	2102      	movs	r1, #2
 8001482:	4618      	mov	r0, r3
 8001484:	f001 fd98 	bl	8002fb8 <HAL_RCC_ClockConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800148e:	f000 f8c7 	bl	8001620 <Error_Handler>
  }
}
 8001492:	bf00      	nop
 8001494:	3750      	adds	r7, #80	; 0x50
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	40007000 	.word	0x40007000

080014a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_I2C2_Init+0x50>)
 80014aa:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <MX_I2C2_Init+0x54>)
 80014ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_I2C2_Init+0x50>)
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <MX_I2C2_Init+0x58>)
 80014b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_I2C2_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_I2C2_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_I2C2_Init+0x50>)
 80014c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <MX_I2C2_Init+0x50>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_I2C2_Init+0x50>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <MX_I2C2_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <MX_I2C2_Init+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_I2C2_Init+0x50>)
 80014e2:	f000 fdd3 	bl	800208c <HAL_I2C_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014ec:	f000 f898 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	20000508 	.word	0x20000508
 80014f8:	40005800 	.word	0x40005800
 80014fc:	000186a0 	.word	0x000186a0

08001500 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <MX_USART2_UART_Init+0x50>)
 8001508:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <MX_USART2_UART_Init+0x4c>)
 800150c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001510:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_USART2_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001526:	220c      	movs	r2, #12
 8001528:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001532:	2200      	movs	r2, #0
 8001534:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_USART2_UART_Init+0x4c>)
 8001538:	f002 faa8 	bl	8003a8c <HAL_UART_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001542:	f000 f86d 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000878 	.word	0x20000878
 8001550:	40004400 	.word	0x40004400

08001554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <MX_GPIO_Init+0xc4>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a29      	ldr	r2, [pc, #164]	; (8001618 <MX_GPIO_Init+0xc4>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b27      	ldr	r3, [pc, #156]	; (8001618 <MX_GPIO_Init+0xc4>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <MX_GPIO_Init+0xc4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a22      	ldr	r2, [pc, #136]	; (8001618 <MX_GPIO_Init+0xc4>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b20      	ldr	r3, [pc, #128]	; (8001618 <MX_GPIO_Init+0xc4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <MX_GPIO_Init+0xc4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a1b      	ldr	r2, [pc, #108]	; (8001618 <MX_GPIO_Init+0xc4>)
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <MX_GPIO_Init+0xc4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	4816      	ldr	r0, [pc, #88]	; (800161c <MX_GPIO_Init+0xc8>)
 80015c4:	f000 fd48 	bl	8002058 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ce:	4813      	ldr	r0, [pc, #76]	; (800161c <MX_GPIO_Init+0xc8>)
 80015d0:	f000 fd42 	bl	8002058 <HAL_GPIO_WritePin>

	// d1pin
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	4619      	mov	r1, r3
 80015ea:	480c      	ldr	r0, [pc, #48]	; (800161c <MX_GPIO_Init+0xc8>)
 80015ec:	f000 fba0 	bl	8001d30 <HAL_GPIO_Init>

	// d2pin
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015f4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 030c 	add.w	r3, r7, #12
 8001606:	4619      	mov	r1, r3
 8001608:	4804      	ldr	r0, [pc, #16]	; (800161c <MX_GPIO_Init+0xc8>)
 800160a:	f000 fb91 	bl	8001d30 <HAL_GPIO_Init>

}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001628:	e7fe      	b.n	8001628 <Error_Handler+0x8>
	...

0800162c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b10      	ldr	r3, [pc, #64]	; (8001678 <HAL_MspInit+0x4c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <HAL_MspInit+0x4c>)
 800163c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001640:	6453      	str	r3, [r2, #68]	; 0x44
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_MspInit+0x4c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_MspInit+0x4c>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_MspInit+0x4c>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	6413      	str	r3, [r2, #64]	; 0x40
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800166a:	2007      	movs	r0, #7
 800166c:	f000 fb2c 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a29      	ldr	r2, [pc, #164]	; (8001740 <HAL_I2C_MspInit+0xc4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d14b      	bne.n	8001736 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b28      	ldr	r3, [pc, #160]	; (8001744 <HAL_I2C_MspInit+0xc8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a27      	ldr	r2, [pc, #156]	; (8001744 <HAL_I2C_MspInit+0xc8>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b25      	ldr	r3, [pc, #148]	; (8001744 <HAL_I2C_MspInit+0xc8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b21      	ldr	r3, [pc, #132]	; (8001744 <HAL_I2C_MspInit+0xc8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a20      	ldr	r2, [pc, #128]	; (8001744 <HAL_I2C_MspInit+0xc8>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_I2C_MspInit+0xc8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016dc:	2312      	movs	r3, #18
 80016de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016e8:	2304      	movs	r3, #4
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	4815      	ldr	r0, [pc, #84]	; (8001748 <HAL_I2C_MspInit+0xcc>)
 80016f4:	f000 fb1c 	bl	8001d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fe:	2312      	movs	r3, #18
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001706:	2303      	movs	r3, #3
 8001708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800170a:	2304      	movs	r3, #4
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <HAL_I2C_MspInit+0xd0>)
 8001716:	f000 fb0b 	bl	8001d30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_I2C_MspInit+0xc8>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_I2C_MspInit+0xc8>)
 8001724:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_I2C_MspInit+0xc8>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40005800 	.word	0x40005800
 8001744:	40023800 	.word	0x40023800
 8001748:	40020400 	.word	0x40020400
 800174c:	40020800 	.word	0x40020800

08001750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_UART_MspInit+0x84>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d12b      	bne.n	80017ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_UART_MspInit+0x88>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <HAL_UART_MspInit+0x88>)
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_UART_MspInit+0x88>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_UART_MspInit+0x88>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_UART_MspInit+0x88>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_UART_MspInit+0x88>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017aa:	230c      	movs	r3, #12
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ba:	2307      	movs	r3, #7
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <HAL_UART_MspInit+0x8c>)
 80017c6:	f000 fab3 	bl	8001d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40004400 	.word	0x40004400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <NMI_Handler+0x4>

080017e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ea:	e7fe      	b.n	80017ea <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <MemManage_Handler+0x4>

080017f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <UsageFault_Handler+0x4>

080017fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800182c:	f000 f956 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
	return 1;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_kill>:

int _kill(int pid, int sig)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800184e:	f007 fcd5 	bl	80091fc <__errno>
 8001852:	4603      	mov	r3, r0
 8001854:	2216      	movs	r2, #22
 8001856:	601a      	str	r2, [r3, #0]
	return -1;
 8001858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_exit>:

void _exit (int status)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ffe7 	bl	8001844 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001876:	e7fe      	b.n	8001876 <_exit+0x12>

08001878 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e00a      	b.n	80018a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800188a:	f3af 8000 	nop.w
 800188e:	4601      	mov	r1, r0
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1c5a      	adds	r2, r3, #1
 8001894:	60ba      	str	r2, [r7, #8]
 8001896:	b2ca      	uxtb	r2, r1
 8001898:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dbf0      	blt.n	800188a <_read+0x12>
	}

return len;
 80018a8:	687b      	ldr	r3, [r7, #4]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <_write>:



__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b086      	sub	sp, #24
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	e009      	b.n	80018d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fd0f 	bl	80012f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dbf1      	blt.n	80018c4 <_write+0x12>
	}
	return len;
 80018e0:	687b      	ldr	r3, [r7, #4]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <_close>:

int _close(int file)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
	return -1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001912:	605a      	str	r2, [r3, #4]
	return 0;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_isatty>:

int _isatty(int file)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
	return 1;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
	return 0;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800195c:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <_sbrk+0x5c>)
 800195e:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <_sbrk+0x60>)
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <_sbrk+0x64>)
 8001972:	4a12      	ldr	r2, [pc, #72]	; (80019bc <_sbrk+0x68>)
 8001974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4413      	add	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	429a      	cmp	r2, r3
 8001982:	d207      	bcs.n	8001994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001984:	f007 fc3a 	bl	80091fc <__errno>
 8001988:	4603      	mov	r3, r0
 800198a:	220c      	movs	r2, #12
 800198c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	e009      	b.n	80019a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <_sbrk+0x64>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	4a05      	ldr	r2, [pc, #20]	; (80019b8 <_sbrk+0x64>)
 80019a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a6:	68fb      	ldr	r3, [r7, #12]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20020000 	.word	0x20020000
 80019b4:	00000400 	.word	0x00000400
 80019b8:	200004bc 	.word	0x200004bc
 80019bc:	200008d8 	.word	0x200008d8

080019c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <SystemInit+0x20>)
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ca:	4a05      	ldr	r2, [pc, #20]	; (80019e0 <SystemInit+0x20>)
 80019cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e8:	480d      	ldr	r0, [pc, #52]	; (8001a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ea:	490e      	ldr	r1, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a00:	4c0b      	ldr	r4, [pc, #44]	; (8001a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a0e:	f7ff ffd7 	bl	80019c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a12:	f007 fdc3 	bl	800959c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7ff fc7d 	bl	8001314 <main>
  bx  lr    
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	2000049c 	.word	0x2000049c
  ldr r2, =_sidata
 8001a28:	0800c09c 	.word	0x0800c09c
  ldr r2, =_sbss
 8001a2c:	2000049c 	.word	0x2000049c
  ldr r4, =_ebss
 8001a30:	200008d8 	.word	0x200008d8

08001a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0d      	ldr	r2, [pc, #52]	; (8001a78 <HAL_Init+0x40>)
 8001a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a48:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_Init+0x40>)
 8001a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_Init+0x40>)
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f931 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fdde 	bl	800162c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f93b 	bl	8001d16 <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 f911 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	2000000c 	.word	0x2000000c
 8001ad8:	20000008 	.word	0x20000008

08001adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_IncTick+0x20>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_IncTick+0x24>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	; (8001b00 <HAL_IncTick+0x24>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	2000000c 	.word	0x2000000c
 8001b00:	200008c4 	.word	0x200008c4

08001b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_GetTick+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	200008c4 	.word	0x200008c4

08001b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b24:	f7ff ffee 	bl	8001b04 <HAL_GetTick>
 8001b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b34:	d005      	beq.n	8001b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_Delay+0x44>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b42:	bf00      	nop
 8001b44:	f7ff ffde 	bl	8001b04 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <HAL_Delay+0x28>
  {
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	2000000c 	.word	0x2000000c

08001b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b7a:	68ba      	ldr	r2, [r7, #8]
 8001b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b80:	4013      	ands	r3, r2
 8001b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b96:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	60d3      	str	r3, [r2, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb0:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	f003 0307 	and.w	r3, r3, #7
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff47 	bl	8001b64 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff5c 	bl	8001bac <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffb0 	bl	8001c84 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e165      	b.n	8002018 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	f040 8154 	bne.w	8002012 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d005      	beq.n	8001d82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d130      	bne.n	8001de4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	091b      	lsrs	r3, r3, #4
 8001dce:	f003 0201 	and.w	r2, r3, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d017      	beq.n	8001e20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d123      	bne.n	8001e74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	08da      	lsrs	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3208      	adds	r2, #8
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0203 	and.w	r2, r3, #3
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80ae 	beq.w	8002012 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	4b5d      	ldr	r3, [pc, #372]	; (8002030 <HAL_GPIO_Init+0x300>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a5c      	ldr	r2, [pc, #368]	; (8002030 <HAL_GPIO_Init+0x300>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b5a      	ldr	r3, [pc, #360]	; (8002030 <HAL_GPIO_Init+0x300>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed2:	4a58      	ldr	r2, [pc, #352]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	3302      	adds	r3, #2
 8001eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	220f      	movs	r2, #15
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a4f      	ldr	r2, [pc, #316]	; (8002038 <HAL_GPIO_Init+0x308>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d025      	beq.n	8001f4a <HAL_GPIO_Init+0x21a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a4e      	ldr	r2, [pc, #312]	; (800203c <HAL_GPIO_Init+0x30c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01f      	beq.n	8001f46 <HAL_GPIO_Init+0x216>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a4d      	ldr	r2, [pc, #308]	; (8002040 <HAL_GPIO_Init+0x310>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d019      	beq.n	8001f42 <HAL_GPIO_Init+0x212>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_GPIO_Init+0x314>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0x20e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4b      	ldr	r2, [pc, #300]	; (8002048 <HAL_GPIO_Init+0x318>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00d      	beq.n	8001f3a <HAL_GPIO_Init+0x20a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4a      	ldr	r2, [pc, #296]	; (800204c <HAL_GPIO_Init+0x31c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <HAL_GPIO_Init+0x206>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a49      	ldr	r2, [pc, #292]	; (8002050 <HAL_GPIO_Init+0x320>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_GPIO_Init+0x202>
 8001f2e:	2306      	movs	r3, #6
 8001f30:	e00c      	b.n	8001f4c <HAL_GPIO_Init+0x21c>
 8001f32:	2307      	movs	r3, #7
 8001f34:	e00a      	b.n	8001f4c <HAL_GPIO_Init+0x21c>
 8001f36:	2305      	movs	r3, #5
 8001f38:	e008      	b.n	8001f4c <HAL_GPIO_Init+0x21c>
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x21c>
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e004      	b.n	8001f4c <HAL_GPIO_Init+0x21c>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e002      	b.n	8001f4c <HAL_GPIO_Init+0x21c>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <HAL_GPIO_Init+0x21c>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	f002 0203 	and.w	r2, r2, #3
 8001f52:	0092      	lsls	r2, r2, #2
 8001f54:	4093      	lsls	r3, r2
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f5c:	4935      	ldr	r1, [pc, #212]	; (8002034 <HAL_GPIO_Init+0x304>)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	3302      	adds	r3, #2
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f6a:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <HAL_GPIO_Init+0x324>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f8e:	4a31      	ldr	r2, [pc, #196]	; (8002054 <HAL_GPIO_Init+0x324>)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f94:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <HAL_GPIO_Init+0x324>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fb8:	4a26      	ldr	r2, [pc, #152]	; (8002054 <HAL_GPIO_Init+0x324>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fbe:	4b25      	ldr	r3, [pc, #148]	; (8002054 <HAL_GPIO_Init+0x324>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fe2:	4a1c      	ldr	r2, [pc, #112]	; (8002054 <HAL_GPIO_Init+0x324>)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe8:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_GPIO_Init+0x324>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800200c:	4a11      	ldr	r2, [pc, #68]	; (8002054 <HAL_GPIO_Init+0x324>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3301      	adds	r3, #1
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	2b0f      	cmp	r3, #15
 800201c:	f67f ae96 	bls.w	8001d4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	40013800 	.word	0x40013800
 8002038:	40020000 	.word	0x40020000
 800203c:	40020400 	.word	0x40020400
 8002040:	40020800 	.word	0x40020800
 8002044:	40020c00 	.word	0x40020c00
 8002048:	40021000 	.word	0x40021000
 800204c:	40021400 	.word	0x40021400
 8002050:	40021800 	.word	0x40021800
 8002054:	40013c00 	.word	0x40013c00

08002058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	807b      	strh	r3, [r7, #2]
 8002064:	4613      	mov	r3, r2
 8002066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002068:	787b      	ldrb	r3, [r7, #1]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206e:	887a      	ldrh	r2, [r7, #2]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002074:	e003      	b.n	800207e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	041a      	lsls	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	619a      	str	r2, [r3, #24]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e12b      	b.n	80022f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fae2 	bl	800167c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2224      	movs	r2, #36	; 0x24
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020f0:	f001 f854 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 80020f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a81      	ldr	r2, [pc, #516]	; (8002300 <HAL_I2C_Init+0x274>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d807      	bhi.n	8002110 <HAL_I2C_Init+0x84>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a80      	ldr	r2, [pc, #512]	; (8002304 <HAL_I2C_Init+0x278>)
 8002104:	4293      	cmp	r3, r2
 8002106:	bf94      	ite	ls
 8002108:	2301      	movls	r3, #1
 800210a:	2300      	movhi	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e006      	b.n	800211e <HAL_I2C_Init+0x92>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a7d      	ldr	r2, [pc, #500]	; (8002308 <HAL_I2C_Init+0x27c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	bf94      	ite	ls
 8002118:	2301      	movls	r3, #1
 800211a:	2300      	movhi	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0e7      	b.n	80022f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a78      	ldr	r2, [pc, #480]	; (800230c <HAL_I2C_Init+0x280>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	0c9b      	lsrs	r3, r3, #18
 8002130:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a6a      	ldr	r2, [pc, #424]	; (8002300 <HAL_I2C_Init+0x274>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d802      	bhi.n	8002160 <HAL_I2C_Init+0xd4>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	3301      	adds	r3, #1
 800215e:	e009      	b.n	8002174 <HAL_I2C_Init+0xe8>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	4a69      	ldr	r2, [pc, #420]	; (8002310 <HAL_I2C_Init+0x284>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	099b      	lsrs	r3, r3, #6
 8002172:	3301      	adds	r3, #1
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	430b      	orrs	r3, r1
 800217a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002186:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	495c      	ldr	r1, [pc, #368]	; (8002300 <HAL_I2C_Init+0x274>)
 8002190:	428b      	cmp	r3, r1
 8002192:	d819      	bhi.n	80021c8 <HAL_I2C_Init+0x13c>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1e59      	subs	r1, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fbb1 f3f3 	udiv	r3, r1, r3
 80021a2:	1c59      	adds	r1, r3, #1
 80021a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021a8:	400b      	ands	r3, r1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_I2C_Init+0x138>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1e59      	subs	r1, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c2:	e051      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 80021c4:	2304      	movs	r3, #4
 80021c6:	e04f      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d111      	bne.n	80021f4 <HAL_I2C_Init+0x168>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	440b      	add	r3, r1
 80021de:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e2:	3301      	adds	r3, #1
 80021e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	e012      	b.n	800221a <HAL_I2C_Init+0x18e>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1e58      	subs	r0, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	0099      	lsls	r1, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	fbb0 f3f3 	udiv	r3, r0, r3
 800220a:	3301      	adds	r3, #1
 800220c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Init+0x196>
 800221e:	2301      	movs	r3, #1
 8002220:	e022      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10e      	bne.n	8002248 <HAL_I2C_Init+0x1bc>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1e58      	subs	r0, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	440b      	add	r3, r1
 8002238:	fbb0 f3f3 	udiv	r3, r0, r3
 800223c:	3301      	adds	r3, #1
 800223e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002246:	e00f      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e58      	subs	r0, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	0099      	lsls	r1, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	fbb0 f3f3 	udiv	r3, r0, r3
 800225e:	3301      	adds	r3, #1
 8002260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	6809      	ldr	r1, [r1, #0]
 800226c:	4313      	orrs	r3, r2
 800226e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6911      	ldr	r1, [r2, #16]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68d2      	ldr	r2, [r2, #12]
 80022a2:	4311      	orrs	r1, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	000186a0 	.word	0x000186a0
 8002304:	001e847f 	.word	0x001e847f
 8002308:	003d08ff 	.word	0x003d08ff
 800230c:	431bde83 	.word	0x431bde83
 8002310:	10624dd3 	.word	0x10624dd3

08002314 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	461a      	mov	r2, r3
 8002320:	460b      	mov	r3, r1
 8002322:	817b      	strh	r3, [r7, #10]
 8002324:	4613      	mov	r3, r2
 8002326:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002328:	f7ff fbec 	bl	8001b04 <HAL_GetTick>
 800232c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b20      	cmp	r3, #32
 8002338:	f040 80e0 	bne.w	80024fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2319      	movs	r3, #25
 8002342:	2201      	movs	r2, #1
 8002344:	4970      	ldr	r1, [pc, #448]	; (8002508 <HAL_I2C_Master_Transmit+0x1f4>)
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 fc58 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002352:	2302      	movs	r3, #2
 8002354:	e0d3      	b.n	80024fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_I2C_Master_Transmit+0x50>
 8002360:	2302      	movs	r3, #2
 8002362:	e0cc      	b.n	80024fe <HAL_I2C_Master_Transmit+0x1ea>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d007      	beq.n	800238a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0201 	orr.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002398:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2221      	movs	r2, #33	; 0x21
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2210      	movs	r2, #16
 80023a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	893a      	ldrh	r2, [r7, #8]
 80023ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4a50      	ldr	r2, [pc, #320]	; (800250c <HAL_I2C_Master_Transmit+0x1f8>)
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023cc:	8979      	ldrh	r1, [r7, #10]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	6a3a      	ldr	r2, [r7, #32]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 fac2 	bl	800295c <I2C_MasterRequestWrite>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e08d      	b.n	80024fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023f8:	e066      	b.n	80024c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	6a39      	ldr	r1, [r7, #32]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fcd2 	bl	8002da8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00d      	beq.n	8002426 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	2b04      	cmp	r3, #4
 8002410:	d107      	bne.n	8002422 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002420:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e06b      	b.n	80024fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	781a      	ldrb	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b04      	cmp	r3, #4
 8002462:	d11b      	bne.n	800249c <HAL_I2C_Master_Transmit+0x188>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002468:	2b00      	cmp	r3, #0
 800246a:	d017      	beq.n	800249c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	6a39      	ldr	r1, [r7, #32]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fcc2 	bl	8002e2a <I2C_WaitOnBTFFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00d      	beq.n	80024c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d107      	bne.n	80024c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e01a      	b.n	80024fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d194      	bne.n	80023fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	e000      	b.n	80024fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024fc:	2302      	movs	r3, #2
  }
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	00100002 	.word	0x00100002
 800250c:	ffff0000 	.word	0xffff0000

08002510 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	; 0x30
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	461a      	mov	r2, r3
 800251c:	460b      	mov	r3, r1
 800251e:	817b      	strh	r3, [r7, #10]
 8002520:	4613      	mov	r3, r2
 8002522:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff faee 	bl	8001b04 <HAL_GetTick>
 8002528:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b20      	cmp	r3, #32
 8002534:	f040 820b 	bne.w	800294e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2319      	movs	r3, #25
 800253e:	2201      	movs	r2, #1
 8002540:	497c      	ldr	r1, [pc, #496]	; (8002734 <HAL_I2C_Master_Receive+0x224>)
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fb5a 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
 8002550:	e1fe      	b.n	8002950 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_I2C_Master_Receive+0x50>
 800255c:	2302      	movs	r3, #2
 800255e:	e1f7      	b.n	8002950 <HAL_I2C_Master_Receive+0x440>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d007      	beq.n	8002586 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0201 	orr.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002594:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2222      	movs	r2, #34	; 0x22
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2210      	movs	r2, #16
 80025a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	893a      	ldrh	r2, [r7, #8]
 80025b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4a5c      	ldr	r2, [pc, #368]	; (8002738 <HAL_I2C_Master_Receive+0x228>)
 80025c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025c8:	8979      	ldrh	r1, [r7, #10]
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fa46 	bl	8002a60 <I2C_MasterRequestRead>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e1b8      	b.n	8002950 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d113      	bne.n	800260e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	623b      	str	r3, [r7, #32]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	623b      	str	r3, [r7, #32]
 80025fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e18c      	b.n	8002928 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002612:	2b01      	cmp	r3, #1
 8002614:	d11b      	bne.n	800264e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002624:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	e16c      	b.n	8002928 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	2b02      	cmp	r3, #2
 8002654:	d11b      	bne.n	800268e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002664:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002676:	2300      	movs	r3, #0
 8002678:	61bb      	str	r3, [r7, #24]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	61bb      	str	r3, [r7, #24]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	e14c      	b.n	8002928 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800269c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026b4:	e138      	b.n	8002928 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	f200 80f1 	bhi.w	80028a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d123      	bne.n	8002710 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fbed 	bl	8002eac <I2C_WaitOnRXNEFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e139      	b.n	8002950 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691a      	ldr	r2, [r3, #16]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002704:	b29b      	uxth	r3, r3
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800270e:	e10b      	b.n	8002928 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	2b02      	cmp	r3, #2
 8002716:	d14e      	bne.n	80027b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271e:	2200      	movs	r2, #0
 8002720:	4906      	ldr	r1, [pc, #24]	; (800273c <HAL_I2C_Master_Receive+0x22c>)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fa6a 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e10e      	b.n	8002950 <HAL_I2C_Master_Receive+0x440>
 8002732:	bf00      	nop
 8002734:	00100002 	.word	0x00100002
 8002738:	ffff0000 	.word	0xffff0000
 800273c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800274e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027b4:	e0b8      	b.n	8002928 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027bc:	2200      	movs	r2, #0
 80027be:	4966      	ldr	r1, [pc, #408]	; (8002958 <HAL_I2C_Master_Receive+0x448>)
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fa1b 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0bf      	b.n	8002950 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29b      	uxth	r3, r3
 800280a:	3b01      	subs	r3, #1
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	2200      	movs	r2, #0
 800281a:	494f      	ldr	r1, [pc, #316]	; (8002958 <HAL_I2C_Master_Receive+0x448>)
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f9ed 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e091      	b.n	8002950 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002864:	b29b      	uxth	r3, r3
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028a0:	e042      	b.n	8002928 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fb00 	bl	8002eac <I2C_WaitOnRXNEFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e04c      	b.n	8002950 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d2:	3b01      	subs	r3, #1
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d118      	bne.n	8002928 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	f47f aec2 	bne.w	80026b6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e000      	b.n	8002950 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800294e:	2302      	movs	r3, #2
  }
}
 8002950:	4618      	mov	r0, r3
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	00010004 	.word	0x00010004

0800295c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	603b      	str	r3, [r7, #0]
 8002968:	460b      	mov	r3, r1
 800296a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d006      	beq.n	8002986 <I2C_MasterRequestWrite+0x2a>
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d003      	beq.n	8002986 <I2C_MasterRequestWrite+0x2a>
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002984:	d108      	bne.n	8002998 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e00b      	b.n	80029b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	2b12      	cmp	r3, #18
 800299e:	d107      	bne.n	80029b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 f91d 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00d      	beq.n	80029e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d6:	d103      	bne.n	80029e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e035      	b.n	8002a50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ec:	d108      	bne.n	8002a00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ee:	897b      	ldrh	r3, [r7, #10]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029fc:	611a      	str	r2, [r3, #16]
 80029fe:	e01b      	b.n	8002a38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a00:	897b      	ldrh	r3, [r7, #10]
 8002a02:	11db      	asrs	r3, r3, #7
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f003 0306 	and.w	r3, r3, #6
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	f063 030f 	orn	r3, r3, #15
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	490e      	ldr	r1, [pc, #56]	; (8002a58 <I2C_MasterRequestWrite+0xfc>)
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f943 	bl	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e010      	b.n	8002a50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a2e:	897b      	ldrh	r3, [r7, #10]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	4907      	ldr	r1, [pc, #28]	; (8002a5c <I2C_MasterRequestWrite+0x100>)
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 f933 	bl	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	00010008 	.word	0x00010008
 8002a5c:	00010002 	.word	0x00010002

08002a60 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af02      	add	r7, sp, #8
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a84:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d006      	beq.n	8002a9a <I2C_MasterRequestRead+0x3a>
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d003      	beq.n	8002a9a <I2C_MasterRequestRead+0x3a>
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a98:	d108      	bne.n	8002aac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	e00b      	b.n	8002ac4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	2b11      	cmp	r3, #17
 8002ab2:	d107      	bne.n	8002ac4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f893 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aea:	d103      	bne.n	8002af4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e079      	b.n	8002bec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b00:	d108      	bne.n	8002b14 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b02:	897b      	ldrh	r3, [r7, #10]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	611a      	str	r2, [r3, #16]
 8002b12:	e05f      	b.n	8002bd4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b14:	897b      	ldrh	r3, [r7, #10]
 8002b16:	11db      	asrs	r3, r3, #7
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f003 0306 	and.w	r3, r3, #6
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f063 030f 	orn	r3, r3, #15
 8002b24:	b2da      	uxtb	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	4930      	ldr	r1, [pc, #192]	; (8002bf4 <I2C_MasterRequestRead+0x194>)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f8b9 	bl	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e054      	b.n	8002bec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b42:	897b      	ldrh	r3, [r7, #10]
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4929      	ldr	r1, [pc, #164]	; (8002bf8 <I2C_MasterRequestRead+0x198>)
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f8a9 	bl	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e044      	b.n	8002bec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b86:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f831 	bl	8002bfc <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00d      	beq.n	8002bbc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bae:	d103      	bne.n	8002bb8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e017      	b.n	8002bec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002bbc:	897b      	ldrh	r3, [r7, #10]
 8002bbe:	11db      	asrs	r3, r3, #7
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f003 0306 	and.w	r3, r3, #6
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f063 030e 	orn	r3, r3, #14
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4907      	ldr	r1, [pc, #28]	; (8002bf8 <I2C_MasterRequestRead+0x198>)
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f865 	bl	8002caa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	00010008 	.word	0x00010008
 8002bf8:	00010002 	.word	0x00010002

08002bfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c0c:	e025      	b.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c14:	d021      	beq.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c16:	f7fe ff75 	bl	8001b04 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d302      	bcc.n	8002c2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d116      	bne.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f043 0220 	orr.w	r2, r3, #32
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e023      	b.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	0c1b      	lsrs	r3, r3, #16
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d10d      	bne.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	43da      	mvns	r2, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	bf0c      	ite	eq
 8002c76:	2301      	moveq	r3, #1
 8002c78:	2300      	movne	r3, #0
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	e00c      	b.n	8002c9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	43da      	mvns	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bf0c      	ite	eq
 8002c92:	2301      	moveq	r3, #1
 8002c94:	2300      	movne	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d0b6      	beq.n	8002c0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cb8:	e051      	b.n	8002d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc8:	d123      	bne.n	8002d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ce2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f043 0204 	orr.w	r2, r3, #4
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e046      	b.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d18:	d021      	beq.n	8002d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1a:	f7fe fef3 	bl	8001b04 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d302      	bcc.n	8002d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d116      	bne.n	8002d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f043 0220 	orr.w	r2, r3, #32
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e020      	b.n	8002da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	0c1b      	lsrs	r3, r3, #16
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d10c      	bne.n	8002d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4013      	ands	r3, r2
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bf14      	ite	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	2300      	moveq	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	e00b      	b.n	8002d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	43da      	mvns	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf14      	ite	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	2300      	moveq	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d18d      	bne.n	8002cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002db4:	e02d      	b.n	8002e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f8ce 	bl	8002f58 <I2C_IsAcknowledgeFailed>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e02d      	b.n	8002e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	d021      	beq.n	8002e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dce:	f7fe fe99 	bl	8001b04 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d116      	bne.n	8002e12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f043 0220 	orr.w	r2, r3, #32
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e007      	b.n	8002e22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1c:	2b80      	cmp	r3, #128	; 0x80
 8002e1e:	d1ca      	bne.n	8002db6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e36:	e02d      	b.n	8002e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f88d 	bl	8002f58 <I2C_IsAcknowledgeFailed>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e02d      	b.n	8002ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d021      	beq.n	8002e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e50:	f7fe fe58 	bl	8001b04 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d302      	bcc.n	8002e66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d116      	bne.n	8002e94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f043 0220 	orr.w	r2, r3, #32
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e007      	b.n	8002ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d1ca      	bne.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eb8:	e042      	b.n	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b10      	cmp	r3, #16
 8002ec6:	d119      	bne.n	8002efc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0210 	mvn.w	r2, #16
 8002ed0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e029      	b.n	8002f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efc:	f7fe fe02 	bl	8001b04 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d302      	bcc.n	8002f12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d116      	bne.n	8002f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	f043 0220 	orr.w	r2, r3, #32
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e007      	b.n	8002f50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b40      	cmp	r3, #64	; 0x40
 8002f4c:	d1b5      	bne.n	8002eba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6e:	d11b      	bne.n	8002fa8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	f043 0204 	orr.w	r2, r3, #4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0cc      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fcc:	4b68      	ldr	r3, [pc, #416]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d90c      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fda:	4b65      	ldr	r3, [pc, #404]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	b2d2      	uxtb	r2, r2
 8002fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	4b63      	ldr	r3, [pc, #396]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d001      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0b8      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d020      	beq.n	8003042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800300c:	4b59      	ldr	r3, [pc, #356]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	4a58      	ldr	r2, [pc, #352]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003024:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a52      	ldr	r2, [pc, #328]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800302e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003030:	4b50      	ldr	r3, [pc, #320]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	494d      	ldr	r1, [pc, #308]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	4313      	orrs	r3, r2
 8003040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d044      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d107      	bne.n	8003066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d119      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e07f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d003      	beq.n	8003076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003072:	2b03      	cmp	r3, #3
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003076:	4b3f      	ldr	r3, [pc, #252]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e06f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003086:	4b3b      	ldr	r3, [pc, #236]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e067      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003096:	4b37      	ldr	r3, [pc, #220]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f023 0203 	bic.w	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4934      	ldr	r1, [pc, #208]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a8:	f7fe fd2c 	bl	8001b04 <HAL_GetTick>
 80030ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ae:	e00a      	b.n	80030c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b0:	f7fe fd28 	bl	8001b04 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e04f      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c6:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 020c 	and.w	r2, r3, #12
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d1eb      	bne.n	80030b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 030f 	and.w	r3, r3, #15
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d20c      	bcs.n	8003100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e6:	4b22      	ldr	r3, [pc, #136]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ee:	4b20      	ldr	r3, [pc, #128]	; (8003170 <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e032      	b.n	8003166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800310c:	4b19      	ldr	r3, [pc, #100]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4916      	ldr	r1, [pc, #88]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	490e      	ldr	r1, [pc, #56]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800313e:	f000 f855 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 8003142:	4602      	mov	r2, r0
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	490a      	ldr	r1, [pc, #40]	; (8003178 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	5ccb      	ldrb	r3, [r1, r3]
 8003152:	fa22 f303 	lsr.w	r3, r2, r3
 8003156:	4a09      	ldr	r2, [pc, #36]	; (800317c <HAL_RCC_ClockConfig+0x1c4>)
 8003158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <HAL_RCC_ClockConfig+0x1c8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fc8c 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40023c00 	.word	0x40023c00
 8003174:	40023800 	.word	0x40023800
 8003178:	0800bc90 	.word	0x0800bc90
 800317c:	20000004 	.word	0x20000004
 8003180:	20000008 	.word	0x20000008

08003184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <HAL_RCC_GetHCLKFreq+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000004 	.word	0x20000004

0800319c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031a0:	f7ff fff0 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b05      	ldr	r3, [pc, #20]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	0a9b      	lsrs	r3, r3, #10
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	4903      	ldr	r1, [pc, #12]	; (80031c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40023800 	.word	0x40023800
 80031c0:	0800bca0 	.word	0x0800bca0

080031c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031c8:	f7ff ffdc 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	0b5b      	lsrs	r3, r3, #13
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	4903      	ldr	r1, [pc, #12]	; (80031e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	0800bca0 	.word	0x0800bca0

080031ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f0:	b088      	sub	sp, #32
 80031f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003208:	4bce      	ldr	r3, [pc, #824]	; (8003544 <HAL_RCC_GetSysClockFreq+0x358>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b0c      	cmp	r3, #12
 8003212:	f200 818d 	bhi.w	8003530 <HAL_RCC_GetSysClockFreq+0x344>
 8003216:	a201      	add	r2, pc, #4	; (adr r2, 800321c <HAL_RCC_GetSysClockFreq+0x30>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	08003251 	.word	0x08003251
 8003220:	08003531 	.word	0x08003531
 8003224:	08003531 	.word	0x08003531
 8003228:	08003531 	.word	0x08003531
 800322c:	08003257 	.word	0x08003257
 8003230:	08003531 	.word	0x08003531
 8003234:	08003531 	.word	0x08003531
 8003238:	08003531 	.word	0x08003531
 800323c:	0800325d 	.word	0x0800325d
 8003240:	08003531 	.word	0x08003531
 8003244:	08003531 	.word	0x08003531
 8003248:	08003531 	.word	0x08003531
 800324c:	080033d1 	.word	0x080033d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003250:	4bbd      	ldr	r3, [pc, #756]	; (8003548 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003252:	61bb      	str	r3, [r7, #24]
       break;
 8003254:	e16f      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003256:	4bbd      	ldr	r3, [pc, #756]	; (800354c <HAL_RCC_GetSysClockFreq+0x360>)
 8003258:	61bb      	str	r3, [r7, #24]
      break;
 800325a:	e16c      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800325c:	4bb9      	ldr	r3, [pc, #740]	; (8003544 <HAL_RCC_GetSysClockFreq+0x358>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003264:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003266:	4bb7      	ldr	r3, [pc, #732]	; (8003544 <HAL_RCC_GetSysClockFreq+0x358>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d053      	beq.n	800331a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003272:	4bb4      	ldr	r3, [pc, #720]	; (8003544 <HAL_RCC_GetSysClockFreq+0x358>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	099b      	lsrs	r3, r3, #6
 8003278:	461a      	mov	r2, r3
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	ea02 0400 	and.w	r4, r2, r0
 800328a:	603c      	str	r4, [r7, #0]
 800328c:	400b      	ands	r3, r1
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003294:	4620      	mov	r0, r4
 8003296:	4629      	mov	r1, r5
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	014b      	lsls	r3, r1, #5
 80032a2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032a6:	0142      	lsls	r2, r0, #5
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	4623      	mov	r3, r4
 80032ae:	1ac0      	subs	r0, r0, r3
 80032b0:	462b      	mov	r3, r5
 80032b2:	eb61 0103 	sbc.w	r1, r1, r3
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	018b      	lsls	r3, r1, #6
 80032c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032c4:	0182      	lsls	r2, r0, #6
 80032c6:	1a12      	subs	r2, r2, r0
 80032c8:	eb63 0301 	sbc.w	r3, r3, r1
 80032cc:	f04f 0000 	mov.w	r0, #0
 80032d0:	f04f 0100 	mov.w	r1, #0
 80032d4:	00d9      	lsls	r1, r3, #3
 80032d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032da:	00d0      	lsls	r0, r2, #3
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4621      	mov	r1, r4
 80032e2:	1852      	adds	r2, r2, r1
 80032e4:	4629      	mov	r1, r5
 80032e6:	eb43 0101 	adc.w	r1, r3, r1
 80032ea:	460b      	mov	r3, r1
 80032ec:	f04f 0000 	mov.w	r0, #0
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	0259      	lsls	r1, r3, #9
 80032f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032fa:	0250      	lsls	r0, r2, #9
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	461a      	mov	r2, r3
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	f7fd fc6c 	bl	8000be8 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4613      	mov	r3, r2
 8003316:	61fb      	str	r3, [r7, #28]
 8003318:	e04c      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331a:	4b8a      	ldr	r3, [pc, #552]	; (8003544 <HAL_RCC_GetSysClockFreq+0x358>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	099b      	lsrs	r3, r3, #6
 8003320:	461a      	mov	r2, r3
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	f240 10ff 	movw	r0, #511	; 0x1ff
 800332a:	f04f 0100 	mov.w	r1, #0
 800332e:	ea02 0a00 	and.w	sl, r2, r0
 8003332:	ea03 0b01 	and.w	fp, r3, r1
 8003336:	4650      	mov	r0, sl
 8003338:	4659      	mov	r1, fp
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	014b      	lsls	r3, r1, #5
 8003344:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003348:	0142      	lsls	r2, r0, #5
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	ebb0 000a 	subs.w	r0, r0, sl
 8003352:	eb61 010b 	sbc.w	r1, r1, fp
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	018b      	lsls	r3, r1, #6
 8003360:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003364:	0182      	lsls	r2, r0, #6
 8003366:	1a12      	subs	r2, r2, r0
 8003368:	eb63 0301 	sbc.w	r3, r3, r1
 800336c:	f04f 0000 	mov.w	r0, #0
 8003370:	f04f 0100 	mov.w	r1, #0
 8003374:	00d9      	lsls	r1, r3, #3
 8003376:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800337a:	00d0      	lsls	r0, r2, #3
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	eb12 020a 	adds.w	r2, r2, sl
 8003384:	eb43 030b 	adc.w	r3, r3, fp
 8003388:	f04f 0000 	mov.w	r0, #0
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	0299      	lsls	r1, r3, #10
 8003392:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003396:	0290      	lsls	r0, r2, #10
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	f7fd fc1e 	bl	8000be8 <__aeabi_uldivmod>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4613      	mov	r3, r2
 80033b2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033b4:	4b63      	ldr	r3, [pc, #396]	; (8003544 <HAL_RCC_GetSysClockFreq+0x358>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	3301      	adds	r3, #1
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	61bb      	str	r3, [r7, #24]
      break;
 80033ce:	e0b2      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033d0:	4b5c      	ldr	r3, [pc, #368]	; (8003544 <HAL_RCC_GetSysClockFreq+0x358>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033d8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033da:	4b5a      	ldr	r3, [pc, #360]	; (8003544 <HAL_RCC_GetSysClockFreq+0x358>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d04d      	beq.n	8003482 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e6:	4b57      	ldr	r3, [pc, #348]	; (8003544 <HAL_RCC_GetSysClockFreq+0x358>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	099b      	lsrs	r3, r3, #6
 80033ec:	461a      	mov	r2, r3
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033f6:	f04f 0100 	mov.w	r1, #0
 80033fa:	ea02 0800 	and.w	r8, r2, r0
 80033fe:	ea03 0901 	and.w	r9, r3, r1
 8003402:	4640      	mov	r0, r8
 8003404:	4649      	mov	r1, r9
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	014b      	lsls	r3, r1, #5
 8003410:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003414:	0142      	lsls	r2, r0, #5
 8003416:	4610      	mov	r0, r2
 8003418:	4619      	mov	r1, r3
 800341a:	ebb0 0008 	subs.w	r0, r0, r8
 800341e:	eb61 0109 	sbc.w	r1, r1, r9
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	018b      	lsls	r3, r1, #6
 800342c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003430:	0182      	lsls	r2, r0, #6
 8003432:	1a12      	subs	r2, r2, r0
 8003434:	eb63 0301 	sbc.w	r3, r3, r1
 8003438:	f04f 0000 	mov.w	r0, #0
 800343c:	f04f 0100 	mov.w	r1, #0
 8003440:	00d9      	lsls	r1, r3, #3
 8003442:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003446:	00d0      	lsls	r0, r2, #3
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	eb12 0208 	adds.w	r2, r2, r8
 8003450:	eb43 0309 	adc.w	r3, r3, r9
 8003454:	f04f 0000 	mov.w	r0, #0
 8003458:	f04f 0100 	mov.w	r1, #0
 800345c:	0259      	lsls	r1, r3, #9
 800345e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003462:	0250      	lsls	r0, r2, #9
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	461a      	mov	r2, r3
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	f7fd fbb8 	bl	8000be8 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4613      	mov	r3, r2
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	e04a      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b30      	ldr	r3, [pc, #192]	; (8003544 <HAL_RCC_GetSysClockFreq+0x358>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	461a      	mov	r2, r3
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003492:	f04f 0100 	mov.w	r1, #0
 8003496:	ea02 0400 	and.w	r4, r2, r0
 800349a:	ea03 0501 	and.w	r5, r3, r1
 800349e:	4620      	mov	r0, r4
 80034a0:	4629      	mov	r1, r5
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	014b      	lsls	r3, r1, #5
 80034ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034b0:	0142      	lsls	r2, r0, #5
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	1b00      	subs	r0, r0, r4
 80034b8:	eb61 0105 	sbc.w	r1, r1, r5
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	018b      	lsls	r3, r1, #6
 80034c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034ca:	0182      	lsls	r2, r0, #6
 80034cc:	1a12      	subs	r2, r2, r0
 80034ce:	eb63 0301 	sbc.w	r3, r3, r1
 80034d2:	f04f 0000 	mov.w	r0, #0
 80034d6:	f04f 0100 	mov.w	r1, #0
 80034da:	00d9      	lsls	r1, r3, #3
 80034dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034e0:	00d0      	lsls	r0, r2, #3
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	1912      	adds	r2, r2, r4
 80034e8:	eb45 0303 	adc.w	r3, r5, r3
 80034ec:	f04f 0000 	mov.w	r0, #0
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	0299      	lsls	r1, r3, #10
 80034f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034fa:	0290      	lsls	r0, r2, #10
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4610      	mov	r0, r2
 8003502:	4619      	mov	r1, r3
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	461a      	mov	r2, r3
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	f7fd fb6c 	bl	8000be8 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4613      	mov	r3, r2
 8003516:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_RCC_GetSysClockFreq+0x358>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	0f1b      	lsrs	r3, r3, #28
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	fbb2 f3f3 	udiv	r3, r2, r3
 800352c:	61bb      	str	r3, [r7, #24]
      break;
 800352e:	e002      	b.n	8003536 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003532:	61bb      	str	r3, [r7, #24]
      break;
 8003534:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003536:	69bb      	ldr	r3, [r7, #24]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003542:	bf00      	nop
 8003544:	40023800 	.word	0x40023800
 8003548:	00f42400 	.word	0x00f42400
 800354c:	007a1200 	.word	0x007a1200

08003550 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e28d      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8083 	beq.w	8003676 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003570:	4b94      	ldr	r3, [pc, #592]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b04      	cmp	r3, #4
 800357a:	d019      	beq.n	80035b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800357c:	4b91      	ldr	r3, [pc, #580]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003584:	2b08      	cmp	r3, #8
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003588:	4b8e      	ldr	r3, [pc, #568]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003594:	d00c      	beq.n	80035b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003596:	4b8b      	ldr	r3, [pc, #556]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d112      	bne.n	80035c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035a2:	4b88      	ldr	r3, [pc, #544]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ae:	d10b      	bne.n	80035c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b0:	4b84      	ldr	r3, [pc, #528]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d05b      	beq.n	8003674 <HAL_RCC_OscConfig+0x124>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d157      	bne.n	8003674 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e25a      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d0:	d106      	bne.n	80035e0 <HAL_RCC_OscConfig+0x90>
 80035d2:	4b7c      	ldr	r3, [pc, #496]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a7b      	ldr	r2, [pc, #492]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 80035d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	e01d      	b.n	800361c <HAL_RCC_OscConfig+0xcc>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0xb4>
 80035ea:	4b76      	ldr	r3, [pc, #472]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a75      	ldr	r2, [pc, #468]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 80035f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	4b73      	ldr	r3, [pc, #460]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a72      	ldr	r2, [pc, #456]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	e00b      	b.n	800361c <HAL_RCC_OscConfig+0xcc>
 8003604:	4b6f      	ldr	r3, [pc, #444]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a6e      	ldr	r2, [pc, #440]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 800360a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	4b6c      	ldr	r3, [pc, #432]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a6b      	ldr	r2, [pc, #428]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800361a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d013      	beq.n	800364c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003624:	f7fe fa6e 	bl	8001b04 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800362c:	f7fe fa6a 	bl	8001b04 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e21f      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	4b61      	ldr	r3, [pc, #388]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0f0      	beq.n	800362c <HAL_RCC_OscConfig+0xdc>
 800364a:	e014      	b.n	8003676 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fe fa5a 	bl	8001b04 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003654:	f7fe fa56 	bl	8001b04 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b64      	cmp	r3, #100	; 0x64
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e20b      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003666:	4b57      	ldr	r3, [pc, #348]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x104>
 8003672:	e000      	b.n	8003676 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d06f      	beq.n	8003762 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003682:	4b50      	ldr	r3, [pc, #320]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b00      	cmp	r3, #0
 800368c:	d017      	beq.n	80036be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800368e:	4b4d      	ldr	r3, [pc, #308]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003696:	2b08      	cmp	r3, #8
 8003698:	d105      	bne.n	80036a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800369a:	4b4a      	ldr	r3, [pc, #296]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036a6:	4b47      	ldr	r3, [pc, #284]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d11c      	bne.n	80036ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036b2:	4b44      	ldr	r3, [pc, #272]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d116      	bne.n	80036ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036be:	4b41      	ldr	r3, [pc, #260]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d005      	beq.n	80036d6 <HAL_RCC_OscConfig+0x186>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e1d3      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d6:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4937      	ldr	r1, [pc, #220]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	e03a      	b.n	8003762 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036f4:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <HAL_RCC_OscConfig+0x278>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fe fa03 	bl	8001b04 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003702:	f7fe f9ff 	bl	8001b04 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e1b4      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003714:	4b2b      	ldr	r3, [pc, #172]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b28      	ldr	r3, [pc, #160]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	4925      	ldr	r1, [pc, #148]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003730:	4313      	orrs	r3, r2
 8003732:	600b      	str	r3, [r1, #0]
 8003734:	e015      	b.n	8003762 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <HAL_RCC_OscConfig+0x278>)
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fe f9e2 	bl	8001b04 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003744:	f7fe f9de 	bl	8001b04 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e193      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003756:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1f0      	bne.n	8003744 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d036      	beq.n	80037dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d016      	beq.n	80037a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003776:	4b15      	ldr	r3, [pc, #84]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 8003778:	2201      	movs	r2, #1
 800377a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7fe f9c2 	bl	8001b04 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003784:	f7fe f9be 	bl	8001b04 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e173      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003796:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <HAL_RCC_OscConfig+0x274>)
 8003798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x234>
 80037a2:	e01b      	b.n	80037dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCC_OscConfig+0x27c>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037aa:	f7fe f9ab 	bl	8001b04 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b0:	e00e      	b.n	80037d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037b2:	f7fe f9a7 	bl	8001b04 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d907      	bls.n	80037d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e15c      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
 80037c4:	40023800 	.word	0x40023800
 80037c8:	42470000 	.word	0x42470000
 80037cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d0:	4b8a      	ldr	r3, [pc, #552]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 80037d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1ea      	bne.n	80037b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8097 	beq.w	8003918 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ee:	4b83      	ldr	r3, [pc, #524]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10f      	bne.n	800381a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	4b7f      	ldr	r3, [pc, #508]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	4a7e      	ldr	r2, [pc, #504]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 8003804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003808:	6413      	str	r3, [r2, #64]	; 0x40
 800380a:	4b7c      	ldr	r3, [pc, #496]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003816:	2301      	movs	r3, #1
 8003818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381a:	4b79      	ldr	r3, [pc, #484]	; (8003a00 <HAL_RCC_OscConfig+0x4b0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003822:	2b00      	cmp	r3, #0
 8003824:	d118      	bne.n	8003858 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003826:	4b76      	ldr	r3, [pc, #472]	; (8003a00 <HAL_RCC_OscConfig+0x4b0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a75      	ldr	r2, [pc, #468]	; (8003a00 <HAL_RCC_OscConfig+0x4b0>)
 800382c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003832:	f7fe f967 	bl	8001b04 <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800383a:	f7fe f963 	bl	8001b04 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e118      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384c:	4b6c      	ldr	r3, [pc, #432]	; (8003a00 <HAL_RCC_OscConfig+0x4b0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d106      	bne.n	800386e <HAL_RCC_OscConfig+0x31e>
 8003860:	4b66      	ldr	r3, [pc, #408]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	4a65      	ldr	r2, [pc, #404]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 8003866:	f043 0301 	orr.w	r3, r3, #1
 800386a:	6713      	str	r3, [r2, #112]	; 0x70
 800386c:	e01c      	b.n	80038a8 <HAL_RCC_OscConfig+0x358>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b05      	cmp	r3, #5
 8003874:	d10c      	bne.n	8003890 <HAL_RCC_OscConfig+0x340>
 8003876:	4b61      	ldr	r3, [pc, #388]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	4a60      	ldr	r2, [pc, #384]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 800387c:	f043 0304 	orr.w	r3, r3, #4
 8003880:	6713      	str	r3, [r2, #112]	; 0x70
 8003882:	4b5e      	ldr	r3, [pc, #376]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	4a5d      	ldr	r2, [pc, #372]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	6713      	str	r3, [r2, #112]	; 0x70
 800388e:	e00b      	b.n	80038a8 <HAL_RCC_OscConfig+0x358>
 8003890:	4b5a      	ldr	r3, [pc, #360]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003894:	4a59      	ldr	r2, [pc, #356]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	6713      	str	r3, [r2, #112]	; 0x70
 800389c:	4b57      	ldr	r3, [pc, #348]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	4a56      	ldr	r2, [pc, #344]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 80038a2:	f023 0304 	bic.w	r3, r3, #4
 80038a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d015      	beq.n	80038dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b0:	f7fe f928 	bl	8001b04 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b8:	f7fe f924 	bl	8001b04 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e0d7      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ce:	4b4b      	ldr	r3, [pc, #300]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0ee      	beq.n	80038b8 <HAL_RCC_OscConfig+0x368>
 80038da:	e014      	b.n	8003906 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fe f912 	bl	8001b04 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e4:	f7fe f90e 	bl	8001b04 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e0c1      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fa:	4b40      	ldr	r3, [pc, #256]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1ee      	bne.n	80038e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003906:	7dfb      	ldrb	r3, [r7, #23]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d105      	bne.n	8003918 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390c:	4b3b      	ldr	r3, [pc, #236]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	4a3a      	ldr	r2, [pc, #232]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 8003912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003916:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 80ad 	beq.w	8003a7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003922:	4b36      	ldr	r3, [pc, #216]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b08      	cmp	r3, #8
 800392c:	d060      	beq.n	80039f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d145      	bne.n	80039c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003936:	4b33      	ldr	r3, [pc, #204]	; (8003a04 <HAL_RCC_OscConfig+0x4b4>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fe f8e2 	bl	8001b04 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003944:	f7fe f8de 	bl	8001b04 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e093      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	4b29      	ldr	r3, [pc, #164]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	019b      	lsls	r3, r3, #6
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	3b01      	subs	r3, #1
 800397c:	041b      	lsls	r3, r3, #16
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	061b      	lsls	r3, r3, #24
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	071b      	lsls	r3, r3, #28
 800398e:	491b      	ldr	r1, [pc, #108]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 8003990:	4313      	orrs	r3, r2
 8003992:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <HAL_RCC_OscConfig+0x4b4>)
 8003996:	2201      	movs	r2, #1
 8003998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fe f8b3 	bl	8001b04 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a2:	f7fe f8af 	bl	8001b04 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e064      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0x452>
 80039c0:	e05c      	b.n	8003a7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c2:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <HAL_RCC_OscConfig+0x4b4>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fe f89c 	bl	8001b04 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d0:	f7fe f898 	bl	8001b04 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e04d      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCC_OscConfig+0x4ac>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x480>
 80039ee:	e045      	b.n	8003a7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d107      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e040      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40007000 	.word	0x40007000
 8003a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a08:	4b1f      	ldr	r3, [pc, #124]	; (8003a88 <HAL_RCC_OscConfig+0x538>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d030      	beq.n	8003a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d129      	bne.n	8003a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d122      	bne.n	8003a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a38:	4013      	ands	r3, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d119      	bne.n	8003a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	3b01      	subs	r3, #1
 8003a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d10f      	bne.n	8003a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d107      	bne.n	8003a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40023800 	.word	0x40023800

08003a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e03f      	b.n	8003b1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d106      	bne.n	8003ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fd fe4c 	bl	8001750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2224      	movs	r2, #36	; 0x24
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f929 	bl	8003d28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695a      	ldr	r2, [r3, #20]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68da      	ldr	r2, [r3, #12]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b08a      	sub	sp, #40	; 0x28
 8003b2a:	af02      	add	r7, sp, #8
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	4613      	mov	r3, r2
 8003b34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	d17c      	bne.n	8003c40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_UART_Transmit+0x2c>
 8003b4c:	88fb      	ldrh	r3, [r7, #6]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e075      	b.n	8003c42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_UART_Transmit+0x3e>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e06e      	b.n	8003c42 <HAL_UART_Transmit+0x11c>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2221      	movs	r2, #33	; 0x21
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b7a:	f7fd ffc3 	bl	8001b04 <HAL_GetTick>
 8003b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	88fa      	ldrh	r2, [r7, #6]
 8003b8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b94:	d108      	bne.n	8003ba8 <HAL_UART_Transmit+0x82>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d104      	bne.n	8003ba8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	e003      	b.n	8003bb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003bb8:	e02a      	b.n	8003c10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f840 	bl	8003c4a <UART_WaitOnFlagUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e036      	b.n	8003c42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10b      	bne.n	8003bf2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	881b      	ldrh	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003be8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	3302      	adds	r3, #2
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	e007      	b.n	8003c02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	781a      	ldrb	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1cf      	bne.n	8003bba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2200      	movs	r2, #0
 8003c22:	2140      	movs	r1, #64	; 0x40
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f810 	bl	8003c4a <UART_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e006      	b.n	8003c42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e000      	b.n	8003c42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c40:	2302      	movs	r3, #2
  }
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3720      	adds	r7, #32
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b090      	sub	sp, #64	; 0x40
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4613      	mov	r3, r2
 8003c58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5a:	e050      	b.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c62:	d04c      	beq.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x30>
 8003c6a:	f7fd ff4b 	bl	8001b04 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d241      	bcs.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c9a:	637a      	str	r2, [r7, #52]	; 0x34
 8003c9c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e5      	bne.n	8003c7a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3314      	adds	r3, #20
 8003cb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cce:	623a      	str	r2, [r7, #32]
 8003cd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	69f9      	ldr	r1, [r7, #28]
 8003cd4:	6a3a      	ldr	r2, [r7, #32]
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e5      	bne.n	8003cae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e00f      	b.n	8003d1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2301      	moveq	r3, #1
 8003d10:	2300      	movne	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d09f      	beq.n	8003c5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3740      	adds	r7, #64	; 0x40
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2c:	b09f      	sub	sp, #124	; 0x7c
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3e:	68d9      	ldr	r1, [r3, #12]
 8003d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	ea40 0301 	orr.w	r3, r0, r1
 8003d48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d6c:	f021 010c 	bic.w	r1, r1, #12
 8003d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d76:	430b      	orrs	r3, r1
 8003d78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d86:	6999      	ldr	r1, [r3, #24]
 8003d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	ea40 0301 	orr.w	r3, r0, r1
 8003d90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4bc5      	ldr	r3, [pc, #788]	; (80040ac <UART_SetConfig+0x384>)
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d004      	beq.n	8003da6 <UART_SetConfig+0x7e>
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4bc3      	ldr	r3, [pc, #780]	; (80040b0 <UART_SetConfig+0x388>)
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d103      	bne.n	8003dae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003da6:	f7ff fa0d 	bl	80031c4 <HAL_RCC_GetPCLK2Freq>
 8003daa:	6778      	str	r0, [r7, #116]	; 0x74
 8003dac:	e002      	b.n	8003db4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dae:	f7ff f9f5 	bl	800319c <HAL_RCC_GetPCLK1Freq>
 8003db2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dbc:	f040 80b6 	bne.w	8003f2c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dc2:	461c      	mov	r4, r3
 8003dc4:	f04f 0500 	mov.w	r5, #0
 8003dc8:	4622      	mov	r2, r4
 8003dca:	462b      	mov	r3, r5
 8003dcc:	1891      	adds	r1, r2, r2
 8003dce:	6439      	str	r1, [r7, #64]	; 0x40
 8003dd0:	415b      	adcs	r3, r3
 8003dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003dd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dd8:	1912      	adds	r2, r2, r4
 8003dda:	eb45 0303 	adc.w	r3, r5, r3
 8003dde:	f04f 0000 	mov.w	r0, #0
 8003de2:	f04f 0100 	mov.w	r1, #0
 8003de6:	00d9      	lsls	r1, r3, #3
 8003de8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dec:	00d0      	lsls	r0, r2, #3
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	1911      	adds	r1, r2, r4
 8003df4:	6639      	str	r1, [r7, #96]	; 0x60
 8003df6:	416b      	adcs	r3, r5
 8003df8:	667b      	str	r3, [r7, #100]	; 0x64
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	1891      	adds	r1, r2, r2
 8003e06:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e08:	415b      	adcs	r3, r3
 8003e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e14:	f7fc fee8 	bl	8000be8 <__aeabi_uldivmod>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4ba5      	ldr	r3, [pc, #660]	; (80040b4 <UART_SetConfig+0x38c>)
 8003e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	011e      	lsls	r6, r3, #4
 8003e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e28:	461c      	mov	r4, r3
 8003e2a:	f04f 0500 	mov.w	r5, #0
 8003e2e:	4622      	mov	r2, r4
 8003e30:	462b      	mov	r3, r5
 8003e32:	1891      	adds	r1, r2, r2
 8003e34:	6339      	str	r1, [r7, #48]	; 0x30
 8003e36:	415b      	adcs	r3, r3
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
 8003e3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e3e:	1912      	adds	r2, r2, r4
 8003e40:	eb45 0303 	adc.w	r3, r5, r3
 8003e44:	f04f 0000 	mov.w	r0, #0
 8003e48:	f04f 0100 	mov.w	r1, #0
 8003e4c:	00d9      	lsls	r1, r3, #3
 8003e4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e52:	00d0      	lsls	r0, r2, #3
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	1911      	adds	r1, r2, r4
 8003e5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e5c:	416b      	adcs	r3, r5
 8003e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	461a      	mov	r2, r3
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	1891      	adds	r1, r2, r2
 8003e6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e6e:	415b      	adcs	r3, r3
 8003e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e7a:	f7fc feb5 	bl	8000be8 <__aeabi_uldivmod>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4b8c      	ldr	r3, [pc, #560]	; (80040b4 <UART_SetConfig+0x38c>)
 8003e84:	fba3 1302 	umull	r1, r3, r3, r2
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	2164      	movs	r1, #100	; 0x64
 8003e8c:	fb01 f303 	mul.w	r3, r1, r3
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	3332      	adds	r3, #50	; 0x32
 8003e96:	4a87      	ldr	r2, [pc, #540]	; (80040b4 <UART_SetConfig+0x38c>)
 8003e98:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ea4:	441e      	add	r6, r3
 8003ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	1894      	adds	r4, r2, r2
 8003eb4:	623c      	str	r4, [r7, #32]
 8003eb6:	415b      	adcs	r3, r3
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ebe:	1812      	adds	r2, r2, r0
 8003ec0:	eb41 0303 	adc.w	r3, r1, r3
 8003ec4:	f04f 0400 	mov.w	r4, #0
 8003ec8:	f04f 0500 	mov.w	r5, #0
 8003ecc:	00dd      	lsls	r5, r3, #3
 8003ece:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ed2:	00d4      	lsls	r4, r2, #3
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	1814      	adds	r4, r2, r0
 8003eda:	653c      	str	r4, [r7, #80]	; 0x50
 8003edc:	414b      	adcs	r3, r1
 8003ede:	657b      	str	r3, [r7, #84]	; 0x54
 8003ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	1891      	adds	r1, r2, r2
 8003eec:	61b9      	str	r1, [r7, #24]
 8003eee:	415b      	adcs	r3, r3
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ef6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003efa:	f7fc fe75 	bl	8000be8 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4b6c      	ldr	r3, [pc, #432]	; (80040b4 <UART_SetConfig+0x38c>)
 8003f04:	fba3 1302 	umull	r1, r3, r3, r2
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	2164      	movs	r1, #100	; 0x64
 8003f0c:	fb01 f303 	mul.w	r3, r1, r3
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	3332      	adds	r3, #50	; 0x32
 8003f16:	4a67      	ldr	r2, [pc, #412]	; (80040b4 <UART_SetConfig+0x38c>)
 8003f18:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1c:	095b      	lsrs	r3, r3, #5
 8003f1e:	f003 0207 	and.w	r2, r3, #7
 8003f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4432      	add	r2, r6
 8003f28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f2a:	e0b9      	b.n	80040a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f2e:	461c      	mov	r4, r3
 8003f30:	f04f 0500 	mov.w	r5, #0
 8003f34:	4622      	mov	r2, r4
 8003f36:	462b      	mov	r3, r5
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	6139      	str	r1, [r7, #16]
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f44:	1912      	adds	r2, r2, r4
 8003f46:	eb45 0303 	adc.w	r3, r5, r3
 8003f4a:	f04f 0000 	mov.w	r0, #0
 8003f4e:	f04f 0100 	mov.w	r1, #0
 8003f52:	00d9      	lsls	r1, r3, #3
 8003f54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f58:	00d0      	lsls	r0, r2, #3
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	eb12 0804 	adds.w	r8, r2, r4
 8003f62:	eb43 0905 	adc.w	r9, r3, r5
 8003f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f04f 0100 	mov.w	r1, #0
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	008b      	lsls	r3, r1, #2
 8003f7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f7e:	0082      	lsls	r2, r0, #2
 8003f80:	4640      	mov	r0, r8
 8003f82:	4649      	mov	r1, r9
 8003f84:	f7fc fe30 	bl	8000be8 <__aeabi_uldivmod>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4b49      	ldr	r3, [pc, #292]	; (80040b4 <UART_SetConfig+0x38c>)
 8003f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f92:	095b      	lsrs	r3, r3, #5
 8003f94:	011e      	lsls	r6, r3, #4
 8003f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	1894      	adds	r4, r2, r2
 8003fa4:	60bc      	str	r4, [r7, #8]
 8003fa6:	415b      	adcs	r3, r3
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fae:	1812      	adds	r2, r2, r0
 8003fb0:	eb41 0303 	adc.w	r3, r1, r3
 8003fb4:	f04f 0400 	mov.w	r4, #0
 8003fb8:	f04f 0500 	mov.w	r5, #0
 8003fbc:	00dd      	lsls	r5, r3, #3
 8003fbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fc2:	00d4      	lsls	r4, r2, #3
 8003fc4:	4622      	mov	r2, r4
 8003fc6:	462b      	mov	r3, r5
 8003fc8:	1814      	adds	r4, r2, r0
 8003fca:	64bc      	str	r4, [r7, #72]	; 0x48
 8003fcc:	414b      	adcs	r3, r1
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	f04f 0200 	mov.w	r2, #0
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	008b      	lsls	r3, r1, #2
 8003fe4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fe8:	0082      	lsls	r2, r0, #2
 8003fea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003fee:	f7fc fdfb 	bl	8000be8 <__aeabi_uldivmod>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4b2f      	ldr	r3, [pc, #188]	; (80040b4 <UART_SetConfig+0x38c>)
 8003ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	2164      	movs	r1, #100	; 0x64
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	3332      	adds	r3, #50	; 0x32
 800400a:	4a2a      	ldr	r2, [pc, #168]	; (80040b4 <UART_SetConfig+0x38c>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004016:	441e      	add	r6, r3
 8004018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800401a:	4618      	mov	r0, r3
 800401c:	f04f 0100 	mov.w	r1, #0
 8004020:	4602      	mov	r2, r0
 8004022:	460b      	mov	r3, r1
 8004024:	1894      	adds	r4, r2, r2
 8004026:	603c      	str	r4, [r7, #0]
 8004028:	415b      	adcs	r3, r3
 800402a:	607b      	str	r3, [r7, #4]
 800402c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004030:	1812      	adds	r2, r2, r0
 8004032:	eb41 0303 	adc.w	r3, r1, r3
 8004036:	f04f 0400 	mov.w	r4, #0
 800403a:	f04f 0500 	mov.w	r5, #0
 800403e:	00dd      	lsls	r5, r3, #3
 8004040:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004044:	00d4      	lsls	r4, r2, #3
 8004046:	4622      	mov	r2, r4
 8004048:	462b      	mov	r3, r5
 800404a:	eb12 0a00 	adds.w	sl, r2, r0
 800404e:	eb43 0b01 	adc.w	fp, r3, r1
 8004052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4618      	mov	r0, r3
 8004058:	f04f 0100 	mov.w	r1, #0
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	008b      	lsls	r3, r1, #2
 8004066:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800406a:	0082      	lsls	r2, r0, #2
 800406c:	4650      	mov	r0, sl
 800406e:	4659      	mov	r1, fp
 8004070:	f7fc fdba 	bl	8000be8 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <UART_SetConfig+0x38c>)
 800407a:	fba3 1302 	umull	r1, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2164      	movs	r1, #100	; 0x64
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	3332      	adds	r3, #50	; 0x32
 800408c:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <UART_SetConfig+0x38c>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	f003 020f 	and.w	r2, r3, #15
 8004098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4432      	add	r2, r6
 800409e:	609a      	str	r2, [r3, #8]
}
 80040a0:	bf00      	nop
 80040a2:	377c      	adds	r7, #124	; 0x7c
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040aa:	bf00      	nop
 80040ac:	40011000 	.word	0x40011000
 80040b0:	40011400 	.word	0x40011400
 80040b4:	51eb851f 	.word	0x51eb851f

080040b8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80040c6:	6839      	ldr	r1, [r7, #0]
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f001 fda0 	bl	8005c0e <VL53L0X_get_offset_calibration_data_micro_meter>
 80040ce:	4603      	mov	r3, r0
 80040d0:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80040d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b084      	sub	sp, #16
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	460b      	mov	r3, r1
 80040e8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	218a      	movs	r1, #138	; 0x8a
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f004 ff4f 	bl	8008f9c <VL53L0X_WrByte>
 80040fe:	4603      	mov	r3, r0
 8004100:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8004102:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
	...

08004110 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b0a4      	sub	sp, #144	; 0x90
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004118:	2300      	movs	r3, #0
 800411a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800411e:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004122:	2b00      	cmp	r3, #0
 8004124:	d107      	bne.n	8004136 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004126:	2200      	movs	r2, #0
 8004128:	2188      	movs	r1, #136	; 0x88
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f004 ff36 	bl	8008f9c <VL53L0X_WrByte>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004144:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4aae      	ldr	r2, [pc, #696]	; (8004404 <VL53L0X_DataInit+0x2f4>)
 800414c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004156:	f107 0310 	add.w	r3, r7, #16
 800415a:	4619      	mov	r1, r3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 faef 	bl	8004740 <VL53L0X_GetDeviceParameters>
 8004162:	4603      	mov	r3, r0
 8004164:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 8004168:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800416c:	2b00      	cmp	r3, #0
 800416e:	d130      	bne.n	80041d2 <VL53L0X_DataInit+0xc2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 8004170:	2300      	movs	r3, #0
 8004172:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 8004174:	2300      	movs	r3, #0
 8004176:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 8004178:	2300      	movs	r3, #0
 800417a:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 800417c:	f04f 6396 	mov.w	r3, #78643200	; 0x4b00000
 8004180:	66bb      	str	r3, [r7, #104]	; 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 8004182:	f24b 3333 	movw	r3, #45875	; 0xb333
 8004186:	653b      	str	r3, [r7, #80]	; 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 8004188:	4b9f      	ldr	r3, [pc, #636]	; (8004408 <VL53L0X_DataInit+0x2f8>)
 800418a:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 800418c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004190:	657b      	str	r3, [r7, #84]	; 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 8004192:	f04f 7361 	mov.w	r3, #58982400	; 0x3840000
 8004196:	673b      	str	r3, [r7, #112]	; 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 8004198:	4b9c      	ldr	r3, [pc, #624]	; (800440c <VL53L0X_DataInit+0x2fc>)
 800419a:	65bb      	str	r3, [r7, #88]	; 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 800419c:	4b9c      	ldr	r3, [pc, #624]	; (8004410 <VL53L0X_DataInit+0x300>)
 800419e:	677b      	str	r3, [r7, #116]	; 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 80041a0:	4b9c      	ldr	r3, [pc, #624]	; (8004414 <VL53L0X_DataInit+0x304>)
 80041a2:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 80041a4:	4b9c      	ldr	r3, [pc, #624]	; (8004418 <VL53L0X_DataInit+0x308>)
 80041a6:	67bb      	str	r3, [r7, #120]	; 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 80041a8:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 80041ac:	663b      	str	r3, [r7, #96]	; 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 80041ae:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 80041b2:	67fb      	str	r3, [r7, #124]	; 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 80041b4:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 80041b8:	667b      	str	r3, [r7, #100]	; 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 80041ba:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
 80041be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3308      	adds	r3, #8
 80041c6:	f107 0110 	add.w	r1, r7, #16
 80041ca:	2278      	movs	r2, #120	; 0x78
 80041cc:	4618      	mov	r0, r3
 80041ce:	f005 fa79 	bl	80096c4 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2264      	movs	r2, #100	; 0x64
 80041d6:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f44f 7261 	mov.w	r2, #900	; 0x384
 80041e0:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041ea:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80041f4:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004200:	2201      	movs	r2, #1
 8004202:	2180      	movs	r1, #128	; 0x80
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f004 fec9 	bl	8008f9c <VL53L0X_WrByte>
 800420a:	4603      	mov	r3, r0
 800420c:	461a      	mov	r2, r3
 800420e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004212:	4313      	orrs	r3, r2
 8004214:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004218:	2201      	movs	r2, #1
 800421a:	21ff      	movs	r1, #255	; 0xff
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f004 febd 	bl	8008f9c <VL53L0X_WrByte>
 8004222:	4603      	mov	r3, r0
 8004224:	461a      	mov	r2, r3
 8004226:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800422a:	4313      	orrs	r3, r2
 800422c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004230:	2200      	movs	r2, #0
 8004232:	2100      	movs	r1, #0
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f004 feb1 	bl	8008f9c <VL53L0X_WrByte>
 800423a:	4603      	mov	r3, r0
 800423c:	461a      	mov	r2, r3
 800423e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004242:	4313      	orrs	r3, r2
 8004244:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004248:	f107 030f 	add.w	r3, r7, #15
 800424c:	461a      	mov	r2, r3
 800424e:	2191      	movs	r1, #145	; 0x91
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f004 ff25 	bl	80090a0 <VL53L0X_RdByte>
 8004256:	4603      	mov	r3, r0
 8004258:	461a      	mov	r2, r3
 800425a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800425e:	4313      	orrs	r3, r2
 8004260:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800426c:	2201      	movs	r2, #1
 800426e:	2100      	movs	r1, #0
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f004 fe93 	bl	8008f9c <VL53L0X_WrByte>
 8004276:	4603      	mov	r3, r0
 8004278:	461a      	mov	r2, r3
 800427a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800427e:	4313      	orrs	r3, r2
 8004280:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004284:	2200      	movs	r2, #0
 8004286:	21ff      	movs	r1, #255	; 0xff
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f004 fe87 	bl	8008f9c <VL53L0X_WrByte>
 800428e:	4603      	mov	r3, r0
 8004290:	461a      	mov	r2, r3
 8004292:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004296:	4313      	orrs	r3, r2
 8004298:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800429c:	2200      	movs	r2, #0
 800429e:	2180      	movs	r1, #128	; 0x80
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f004 fe7b 	bl	8008f9c <VL53L0X_WrByte>
 80042a6:	4603      	mov	r3, r0
 80042a8:	461a      	mov	r2, r3
 80042aa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80042b4:	2300      	movs	r3, #0
 80042b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042ba:	e017      	b.n	80042ec <VL53L0X_DataInit+0x1dc>
		if (Status == VL53L0X_ERROR_NONE)
 80042bc:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d118      	bne.n	80042f6 <VL53L0X_DataInit+0x1e6>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80042c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2201      	movs	r2, #1
 80042cc:	4619      	mov	r1, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fd68 	bl	8004da4 <VL53L0X_SetLimitCheckEnable>
 80042d4:	4603      	mov	r3, r0
 80042d6:	461a      	mov	r2, r3
 80042d8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80042dc:	4313      	orrs	r3, r2
 80042de:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80042e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042e6:	3301      	adds	r3, #1
 80042e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042f0:	2b05      	cmp	r3, #5
 80042f2:	dde3      	ble.n	80042bc <VL53L0X_DataInit+0x1ac>
 80042f4:	e000      	b.n	80042f8 <VL53L0X_DataInit+0x1e8>
		else
			break;
 80042f6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80042f8:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d107      	bne.n	8004310 <VL53L0X_DataInit+0x200>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004300:	2200      	movs	r2, #0
 8004302:	2102      	movs	r1, #2
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fd4d 	bl	8004da4 <VL53L0X_SetLimitCheckEnable>
 800430a:	4603      	mov	r3, r0
 800430c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004310:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004314:	2b00      	cmp	r3, #0
 8004316:	d107      	bne.n	8004328 <VL53L0X_DataInit+0x218>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004318:	2200      	movs	r2, #0
 800431a:	2103      	movs	r1, #3
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 fd41 	bl	8004da4 <VL53L0X_SetLimitCheckEnable>
 8004322:	4603      	mov	r3, r0
 8004324:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004328:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800432c:	2b00      	cmp	r3, #0
 800432e:	d107      	bne.n	8004340 <VL53L0X_DataInit+0x230>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004330:	2200      	movs	r2, #0
 8004332:	2104      	movs	r1, #4
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fd35 	bl	8004da4 <VL53L0X_SetLimitCheckEnable>
 800433a:	4603      	mov	r3, r0
 800433c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004340:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004344:	2b00      	cmp	r3, #0
 8004346:	d107      	bne.n	8004358 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004348:	2200      	movs	r2, #0
 800434a:	2105      	movs	r1, #5
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fd29 	bl	8004da4 <VL53L0X_SetLimitCheckEnable>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004358:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800435c:	2b00      	cmp	r3, #0
 800435e:	d108      	bne.n	8004372 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004360:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004364:	2100      	movs	r1, #0
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fdcc 	bl	8004f04 <VL53L0X_SetLimitCheckValue>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004372:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004376:	2b00      	cmp	r3, #0
 8004378:	d108      	bne.n	800438c <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800437a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800437e:	2101      	movs	r1, #1
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 fdbf 	bl	8004f04 <VL53L0X_SetLimitCheckValue>
 8004386:	4603      	mov	r3, r0
 8004388:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800438c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004390:	2b00      	cmp	r3, #0
 8004392:	d108      	bne.n	80043a6 <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004394:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004398:	2102      	movs	r1, #2
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fdb2 	bl	8004f04 <VL53L0X_SetLimitCheckValue>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80043a6:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d107      	bne.n	80043be <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80043ae:	2200      	movs	r2, #0
 80043b0:	2103      	movs	r1, #3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fda6 	bl	8004f04 <VL53L0X_SetLimitCheckValue>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80043be:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d10f      	bne.n	80043e6 <VL53L0X_DataInit+0x2d6>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	22ff      	movs	r2, #255	; 0xff
 80043ca:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80043ce:	22ff      	movs	r2, #255	; 0xff
 80043d0:	2101      	movs	r1, #1
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f004 fde2 	bl	8008f9c <VL53L0X_WrByte>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 80043e6:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d103      	bne.n	80043f6 <VL53L0X_DataInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 80043f6:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3790      	adds	r7, #144	; 0x90
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	000970a4 	.word	0x000970a4
 8004408:	044c0000 	.word	0x044c0000
 800440c:	0003cccc 	.word	0x0003cccc
 8004410:	02ee0000 	.word	0x02ee0000
 8004414:	00074ccc 	.word	0x00074ccc
 8004418:	02260000 	.word	0x02260000

0800441c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b0ac      	sub	sp, #176	; 0xb0
 8004420:	af02      	add	r7, sp, #8
 8004422:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004424:	2300      	movs	r3, #0
 8004426:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800442a:	f107 031c 	add.w	r3, r7, #28
 800442e:	2278      	movs	r2, #120	; 0x78
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f005 f954 	bl	80096e0 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800443c:	2300      	movs	r3, #0
 800443e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint32_t count = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint8_t isApertureSpads = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800445a:	2101      	movs	r1, #1
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f002 fb2c 	bl	8006aba <VL53L0X_get_info_from_device>
 8004462:	4603      	mov	r3, r0
 8004464:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 800446e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8004478:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800447c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004480:	2b01      	cmp	r3, #1
 8004482:	d80f      	bhi.n	80044a4 <VL53L0X_StaticInit+0x88>
 8004484:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004488:	2b01      	cmp	r3, #1
 800448a:	d103      	bne.n	8004494 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 800448c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004490:	2b20      	cmp	r3, #32
 8004492:	d807      	bhi.n	80044a4 <VL53L0X_StaticInit+0x88>
 8004494:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10f      	bne.n	80044bc <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 800449c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044a0:	2b0c      	cmp	r3, #12
 80044a2:	d90b      	bls.n	80044bc <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80044a4:	f107 0218 	add.w	r2, r7, #24
 80044a8:	f107 0314 	add.w	r3, r7, #20
 80044ac:	4619      	mov	r1, r3
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f001 fda8 	bl	8006004 <VL53L0X_perform_ref_spad_management>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80044ba:	e00a      	b.n	80044d2 <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80044bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80044c0:	461a      	mov	r2, r3
 80044c2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f001 ffa8 	bl	800641c <VL53L0X_set_reference_spads>
 80044cc:	4603      	mov	r3, r0
 80044ce:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80044d2:	4b93      	ldr	r3, [pc, #588]	; (8004720 <VL53L0X_StaticInit+0x304>)
 80044d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80044d8:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d111      	bne.n	8004504 <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 80044e6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80044ea:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d105      	bne.n	80044fe <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80044f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044fc:	e002      	b.n	8004504 <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80044fe:	4b88      	ldr	r3, [pc, #544]	; (8004720 <VL53L0X_StaticInit+0x304>)
 8004500:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004504:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004508:	2b00      	cmp	r3, #0
 800450a:	d107      	bne.n	800451c <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 800450c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f003 fe6d 	bl	80081f0 <VL53L0X_load_tuning_settings>
 8004516:	4603      	mov	r3, r0
 8004518:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800451c:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8004524:	2300      	movs	r3, #0
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	2304      	movs	r3, #4
 800452a:	2200      	movs	r2, #0
 800452c:	2100      	movs	r1, #0
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f001 f99c 	bl	800586c <VL53L0X_SetGpioConfig>
 8004534:	4603      	mov	r3, r0
 8004536:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800453a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800453e:	2b00      	cmp	r3, #0
 8004540:	d121      	bne.n	8004586 <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004542:	2201      	movs	r2, #1
 8004544:	21ff      	movs	r1, #255	; 0xff
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f004 fd28 	bl	8008f9c <VL53L0X_WrByte>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8004552:	f107 031a 	add.w	r3, r7, #26
 8004556:	461a      	mov	r2, r3
 8004558:	2184      	movs	r1, #132	; 0x84
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f004 fdca 	bl	80090f4 <VL53L0X_RdWord>
 8004560:	4603      	mov	r3, r0
 8004562:	461a      	mov	r2, r3
 8004564:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004568:	4313      	orrs	r3, r2
 800456a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800456e:	2200      	movs	r2, #0
 8004570:	21ff      	movs	r1, #255	; 0xff
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f004 fd12 	bl	8008f9c <VL53L0X_WrByte>
 8004578:	4603      	mov	r3, r0
 800457a:	461a      	mov	r2, r3
 800457c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004580:	4313      	orrs	r3, r2
 8004582:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004586:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800458a:	2b00      	cmp	r3, #0
 800458c:	d105      	bne.n	800459a <VL53L0X_StaticInit+0x17e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800458e:	8b7b      	ldrh	r3, [r7, #26]
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800459a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d108      	bne.n	80045b4 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80045a2:	f107 031c 	add.w	r3, r7, #28
 80045a6:	4619      	mov	r1, r3
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f8c9 	bl	8004740 <VL53L0X_GetDeviceParameters>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 80045b4:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d110      	bne.n	80045de <VL53L0X_StaticInit+0x1c2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80045bc:	f107 0319 	add.w	r3, r7, #25
 80045c0:	4619      	mov	r1, r3
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f9b1 	bl	800492a <VL53L0X_GetFractionEnable>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 80045ce:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d103      	bne.n	80045de <VL53L0X_StaticInit+0x1c2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80045d6:	7e7a      	ldrb	r2, [r7, #25]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 80045de:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d107      	bne.n	80045f6 <VL53L0X_StaticInit+0x1da>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3308      	adds	r3, #8
 80045ea:	f107 011c 	add.w	r1, r7, #28
 80045ee:	2278      	movs	r2, #120	; 0x78
 80045f0:	4618      	mov	r0, r3
 80045f2:	f005 f867 	bl	80096c4 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80045f6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d111      	bne.n	8004622 <VL53L0X_StaticInit+0x206>
		Status = VL53L0X_RdByte(Dev,
 80045fe:	f107 0319 	add.w	r3, r7, #25
 8004602:	461a      	mov	r2, r3
 8004604:	2101      	movs	r1, #1
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f004 fd4a 	bl	80090a0 <VL53L0X_RdByte>
 800460c:	4603      	mov	r3, r0
 800460e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8004612:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <VL53L0X_StaticInit+0x206>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800461a:	7e7a      	ldrb	r2, [r7, #25]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8004622:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004626:	2b00      	cmp	r3, #0
 8004628:	d107      	bne.n	800463a <VL53L0X_StaticInit+0x21e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800462a:	2200      	movs	r2, #0
 800462c:	2100      	movs	r1, #0
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f9f0 	bl	8004a14 <VL53L0X_SetSequenceStepEnable>
 8004634:	4603      	mov	r3, r0
 8004636:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800463a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 800463e:	2b00      	cmp	r3, #0
 8004640:	d107      	bne.n	8004652 <VL53L0X_StaticInit+0x236>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004642:	2200      	movs	r2, #0
 8004644:	2102      	movs	r1, #2
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f9e4 	bl	8004a14 <VL53L0X_SetSequenceStepEnable>
 800464c:	4603      	mov	r3, r0
 800464e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004652:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004656:	2b00      	cmp	r3, #0
 8004658:	d103      	bne.n	8004662 <VL53L0X_StaticInit+0x246>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2203      	movs	r2, #3
 800465e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004662:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_GetVcselPulsePeriod(
 800466a:	f107 0313 	add.w	r3, r7, #19
 800466e:	461a      	mov	r2, r3
 8004670:	2100      	movs	r1, #0
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f9b6 	bl	80049e4 <VL53L0X_GetVcselPulsePeriod>
 8004678:	4603      	mov	r3, r0
 800467a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800467e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004682:	2b00      	cmp	r3, #0
 8004684:	d103      	bne.n	800468e <VL53L0X_StaticInit+0x272>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004686:	7cfa      	ldrb	r2, [r7, #19]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800468e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004696:	f107 0313 	add.w	r3, r7, #19
 800469a:	461a      	mov	r2, r3
 800469c:	2101      	movs	r1, #1
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f9a0 	bl	80049e4 <VL53L0X_GetVcselPulsePeriod>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80046aa:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d103      	bne.n	80046ba <VL53L0X_StaticInit+0x29e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80046b2:	7cfa      	ldrb	r2, [r7, #19]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80046ba:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <VL53L0X_StaticInit+0x2ba>
		Status = get_sequence_step_timeout(
 80046c2:	f107 030c 	add.w	r3, r7, #12
 80046c6:	461a      	mov	r2, r3
 80046c8:	2103      	movs	r1, #3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f002 ff78 	bl	80075c0 <get_sequence_step_timeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80046d6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <VL53L0X_StaticInit+0x2ca>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80046e6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 80046ee:	f107 030c 	add.w	r3, r7, #12
 80046f2:	461a      	mov	r2, r3
 80046f4:	2104      	movs	r1, #4
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f002 ff62 	bl	80075c0 <get_sequence_step_timeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004702:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8004706:	2b00      	cmp	r3, #0
 8004708:	d103      	bne.n	8004712 <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004712:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 8004716:	4618      	mov	r0, r3
 8004718:	37a8      	adds	r7, #168	; 0xa8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	20000010 	.word	0x20000010

08004724 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800472c:	239d      	movs	r3, #157	; 0x9d
 800472e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8004730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f8d6 	bl	8004904 <VL53L0X_GetDeviceMode>
 8004758:	4603      	mov	r3, r0
 800475a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800475c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d107      	bne.n	8004774 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	3308      	adds	r3, #8
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fa9e 	bl	8004cac <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8004770:	4603      	mov	r3, r0
 8004772:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8004774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d102      	bne.n	8004782 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2200      	movs	r2, #0
 8004780:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8004782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d107      	bne.n	800479a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	3310      	adds	r3, #16
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fad4 	bl	8004d3e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8004796:	4603      	mov	r3, r0
 8004798:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800479a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d107      	bne.n	80047b2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	3314      	adds	r3, #20
 80047a6:	4619      	mov	r1, r3
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff fc85 	bl	80040b8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80047ae:	4603      	mov	r3, r0
 80047b0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80047b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d134      	bne.n	8004824 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80047ba:	2300      	movs	r3, #0
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	e02a      	b.n	8004816 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80047c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d12a      	bne.n	800481e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	b299      	uxth	r1, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	3308      	adds	r3, #8
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	4413      	add	r3, r2
 80047d6:	3304      	adds	r3, #4
 80047d8:	461a      	mov	r2, r3
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fbf4 	bl	8004fc8 <VL53L0X_GetLimitCheckValue>
 80047e0:	4603      	mov	r3, r0
 80047e2:	461a      	mov	r2, r3
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80047ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d117      	bne.n	8004822 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	b299      	uxth	r1, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	3318      	adds	r3, #24
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	4413      	add	r3, r2
 80047fe:	461a      	mov	r2, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fb5b 	bl	8004ebc <VL53L0X_GetLimitCheckEnable>
 8004806:	4603      	mov	r3, r0
 8004808:	461a      	mov	r2, r3
 800480a:	7bfb      	ldrb	r3, [r7, #15]
 800480c:	4313      	orrs	r3, r2
 800480e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	3301      	adds	r3, #1
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2b05      	cmp	r3, #5
 800481a:	ddd1      	ble.n	80047c0 <VL53L0X_GetDeviceParameters+0x80>
 800481c:	e002      	b.n	8004824 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8004822:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d107      	bne.n	800483c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	3374      	adds	r3, #116	; 0x74
 8004830:	4619      	mov	r1, r3
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fc56 	bl	80050e4 <VL53L0X_GetWrapAroundCheckEnable>
 8004838:	4603      	mov	r3, r0
 800483a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800483c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d107      	bne.n	8004854 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f89f 	bl	800498e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8004850:	4603      	mov	r3, r0
 8004852:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d120      	bne.n	800489e <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 800485c:	2300      	movs	r3, #0
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	e01a      	b.n	8004898 <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	3310      	adds	r3, #16
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 800486e:	6839      	ldr	r1, [r7, #0]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	330e      	adds	r3, #14
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	3316      	adds	r3, #22
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 8004886:	6839      	ldr	r1, [r7, #0]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	3314      	adds	r3, #20
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	3301      	adds	r3, #1
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b06      	cmp	r3, #6
 800489c:	dde1      	ble.n	8004862 <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800489e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048b8:	2300      	movs	r3, #0
 80048ba:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	2b15      	cmp	r3, #21
 80048c0:	bf8c      	ite	hi
 80048c2:	2201      	movhi	r2, #1
 80048c4:	2200      	movls	r2, #0
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	2a00      	cmp	r2, #0
 80048ca:	d10e      	bne.n	80048ea <VL53L0X_SetDeviceMode+0x3e>
 80048cc:	2201      	movs	r2, #1
 80048ce:	409a      	lsls	r2, r3
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <VL53L0X_SetDeviceMode+0x54>)
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	78fa      	ldrb	r2, [r7, #3]
 80048e6:	721a      	strb	r2, [r3, #8]
		break;
 80048e8:	e001      	b.n	80048ee <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80048ea:	23f8      	movs	r3, #248	; 0xf8
 80048ec:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80048ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	0030000b 	.word	0x0030000b

08004904 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800490e:	2300      	movs	r3, #0
 8004910:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	7a1a      	ldrb	r2, [r3, #8]
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800491a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004934:	2300      	movs	r3, #0
 8004936:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	2109      	movs	r1, #9
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f004 fbaf 	bl	80090a0 <VL53L0X_RdByte>
 8004942:	4603      	mov	r3, r0
 8004944:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	b2da      	uxtb	r2, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800495c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004972:	2300      	movs	r3, #0
 8004974:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8004976:	6839      	ldr	r1, [r7, #0]
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f003 fab4 	bl	8007ee6 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800497e:	4603      	mov	r3, r0
 8004980:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8004982:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b084      	sub	sp, #16
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004998:	2300      	movs	r3, #0
 800499a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800499c:	6839      	ldr	r1, [r7, #0]
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f003 fb74 	bl	800808c <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80049a4:	4603      	mov	r3, r0
 80049a6:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80049a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]
 80049c0:	4613      	mov	r3, r2
 80049c2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80049c8:	78ba      	ldrb	r2, [r7, #2]
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	4619      	mov	r1, r3
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f002 ffc9 	bl	8007966 <VL53L0X_set_vcsel_pulse_period>
 80049d4:	4603      	mov	r3, r0
 80049d6:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80049d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	460b      	mov	r3, r1
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80049f6:	7afb      	ldrb	r3, [r7, #11]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	4619      	mov	r1, r3
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f003 fa3b 	bl	8007e78 <VL53L0X_get_vcsel_pulse_period>
 8004a02:	4603      	mov	r3, r0
 8004a04:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004a06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	70fb      	strb	r3, [r7, #3]
 8004a20:	4613      	mov	r3, r2
 8004a22:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a24:	2300      	movs	r3, #0
 8004a26:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004a30:	f107 030f 	add.w	r3, r7, #15
 8004a34:	461a      	mov	r2, r3
 8004a36:	2101      	movs	r1, #1
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f004 fb31 	bl	80090a0 <VL53L0X_RdByte>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8004a46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d15a      	bne.n	8004b04 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8004a4e:	78bb      	ldrb	r3, [r7, #2]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d12b      	bne.n	8004aac <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d825      	bhi.n	8004aa6 <VL53L0X_SetSequenceStepEnable+0x92>
 8004a5a:	a201      	add	r2, pc, #4	; (adr r2, 8004a60 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8004a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a60:	08004a75 	.word	0x08004a75
 8004a64:	08004a7f 	.word	0x08004a7f
 8004a68:	08004a89 	.word	0x08004a89
 8004a6c:	08004a93 	.word	0x08004a93
 8004a70:	08004a9d 	.word	0x08004a9d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8004a74:	7dbb      	ldrb	r3, [r7, #22]
 8004a76:	f043 0310 	orr.w	r3, r3, #16
 8004a7a:	75bb      	strb	r3, [r7, #22]
				break;
 8004a7c:	e043      	b.n	8004b06 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8004a7e:	7dbb      	ldrb	r3, [r7, #22]
 8004a80:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004a84:	75bb      	strb	r3, [r7, #22]
				break;
 8004a86:	e03e      	b.n	8004b06 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8004a88:	7dbb      	ldrb	r3, [r7, #22]
 8004a8a:	f043 0304 	orr.w	r3, r3, #4
 8004a8e:	75bb      	strb	r3, [r7, #22]
				break;
 8004a90:	e039      	b.n	8004b06 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8004a92:	7dbb      	ldrb	r3, [r7, #22]
 8004a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a98:	75bb      	strb	r3, [r7, #22]
				break;
 8004a9a:	e034      	b.n	8004b06 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8004a9c:	7dbb      	ldrb	r3, [r7, #22]
 8004a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004aa2:	75bb      	strb	r3, [r7, #22]
				break;
 8004aa4:	e02f      	b.n	8004b06 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004aa6:	23fc      	movs	r3, #252	; 0xfc
 8004aa8:	75fb      	strb	r3, [r7, #23]
 8004aaa:	e02c      	b.n	8004b06 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d825      	bhi.n	8004afe <VL53L0X_SetSequenceStepEnable+0xea>
 8004ab2:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004acd 	.word	0x08004acd
 8004abc:	08004ad7 	.word	0x08004ad7
 8004ac0:	08004ae1 	.word	0x08004ae1
 8004ac4:	08004aeb 	.word	0x08004aeb
 8004ac8:	08004af5 	.word	0x08004af5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8004acc:	7dbb      	ldrb	r3, [r7, #22]
 8004ace:	f023 0310 	bic.w	r3, r3, #16
 8004ad2:	75bb      	strb	r3, [r7, #22]
				break;
 8004ad4:	e017      	b.n	8004b06 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8004ad6:	7dbb      	ldrb	r3, [r7, #22]
 8004ad8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004adc:	75bb      	strb	r3, [r7, #22]
				break;
 8004ade:	e012      	b.n	8004b06 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8004ae0:	7dbb      	ldrb	r3, [r7, #22]
 8004ae2:	f023 0304 	bic.w	r3, r3, #4
 8004ae6:	75bb      	strb	r3, [r7, #22]
				break;
 8004ae8:	e00d      	b.n	8004b06 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8004aea:	7dbb      	ldrb	r3, [r7, #22]
 8004aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af0:	75bb      	strb	r3, [r7, #22]
				break;
 8004af2:	e008      	b.n	8004b06 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8004af4:	7dbb      	ldrb	r3, [r7, #22]
 8004af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004afa:	75bb      	strb	r3, [r7, #22]
				break;
 8004afc:	e003      	b.n	8004b06 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004afe:	23fc      	movs	r3, #252	; 0xfc
 8004b00:	75fb      	strb	r3, [r7, #23]
 8004b02:	e000      	b.n	8004b06 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8004b04:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8004b06:	7bfb      	ldrb	r3, [r7, #15]
 8004b08:	7dba      	ldrb	r2, [r7, #22]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d01e      	beq.n	8004b4c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8004b0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d107      	bne.n	8004b26 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8004b16:	7dbb      	ldrb	r3, [r7, #22]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f004 fa3d 	bl	8008f9c <VL53L0X_WrByte>
 8004b22:	4603      	mov	r3, r0
 8004b24:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8004b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d103      	bne.n	8004b36 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	7dba      	ldrb	r2, [r7, #22]
 8004b32:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8004b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d106      	bne.n	8004b4c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8004b44:	6939      	ldr	r1, [r7, #16]
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7ff ff0e 	bl	8004968 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8004b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b087      	sub	sp, #28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	607b      	str	r3, [r7, #4]
 8004b62:	460b      	mov	r3, r1
 8004b64:	72fb      	strb	r3, [r7, #11]
 8004b66:	4613      	mov	r3, r2
 8004b68:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8004b74:	7afb      	ldrb	r3, [r7, #11]
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d836      	bhi.n	8004be8 <sequence_step_enabled+0x90>
 8004b7a:	a201      	add	r2, pc, #4	; (adr r2, 8004b80 <sequence_step_enabled+0x28>)
 8004b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b80:	08004b95 	.word	0x08004b95
 8004b84:	08004ba7 	.word	0x08004ba7
 8004b88:	08004bb9 	.word	0x08004bb9
 8004b8c:	08004bcb 	.word	0x08004bcb
 8004b90:	08004bdd 	.word	0x08004bdd
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004b94:	7abb      	ldrb	r3, [r7, #10]
 8004b96:	111b      	asrs	r3, r3, #4
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	701a      	strb	r2, [r3, #0]
		break;
 8004ba4:	e022      	b.n	8004bec <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8004ba6:	7abb      	ldrb	r3, [r7, #10]
 8004ba8:	10db      	asrs	r3, r3, #3
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	701a      	strb	r2, [r3, #0]
		break;
 8004bb6:	e019      	b.n	8004bec <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004bb8:	7abb      	ldrb	r3, [r7, #10]
 8004bba:	109b      	asrs	r3, r3, #2
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	701a      	strb	r2, [r3, #0]
		break;
 8004bc8:	e010      	b.n	8004bec <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8004bca:	7abb      	ldrb	r3, [r7, #10]
 8004bcc:	119b      	asrs	r3, r3, #6
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	701a      	strb	r2, [r3, #0]
		break;
 8004bda:	e007      	b.n	8004bec <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8004bdc:	7abb      	ldrb	r3, [r7, #10]
 8004bde:	09db      	lsrs	r3, r3, #7
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	701a      	strb	r2, [r3, #0]
		break;
 8004be6:	e001      	b.n	8004bec <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004be8:	23fc      	movs	r3, #252	; 0xfc
 8004bea:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004c0e:	f107 030e 	add.w	r3, r7, #14
 8004c12:	461a      	mov	r2, r3
 8004c14:	2101      	movs	r1, #1
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f004 fa42 	bl	80090a0 <VL53L0X_RdByte>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d107      	bne.n	8004c38 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004c28:	7bba      	ldrb	r2, [r7, #14]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff ff92 	bl	8004b58 <sequence_step_enabled>
 8004c34:	4603      	mov	r3, r0
 8004c36:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d108      	bne.n	8004c52 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8004c40:	7bba      	ldrb	r2, [r7, #14]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	3302      	adds	r3, #2
 8004c46:	2101      	movs	r1, #1
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ff85 	bl	8004b58 <sequence_step_enabled>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d108      	bne.n	8004c6c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8004c5a:	7bba      	ldrb	r2, [r7, #14]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	2102      	movs	r1, #2
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff ff78 	bl	8004b58 <sequence_step_enabled>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d108      	bne.n	8004c86 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004c74:	7bba      	ldrb	r2, [r7, #14]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	3303      	adds	r3, #3
 8004c7a:	2103      	movs	r1, #3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ff6b 	bl	8004b58 <sequence_step_enabled>
 8004c82:	4603      	mov	r3, r0
 8004c84:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d108      	bne.n	8004ca0 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8004c8e:	7bba      	ldrb	r2, [r7, #14]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	3304      	adds	r3, #4
 8004c94:	2104      	movs	r1, #4
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff ff5e 	bl	8004b58 <sequence_step_enabled>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8004cba:	f107 030c 	add.w	r3, r7, #12
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	21f8      	movs	r1, #248	; 0xf8
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f004 fa16 	bl	80090f4 <VL53L0X_RdWord>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8004ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d108      	bne.n	8004ce6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004cd4:	f107 0308 	add.w	r3, r7, #8
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2104      	movs	r1, #4
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f004 fa41 	bl	8009164 <VL53L0X_RdDWord>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10c      	bne.n	8004d08 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8004cee:	89bb      	ldrh	r3, [r7, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d005      	beq.n	8004d00 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	89ba      	ldrh	r2, [r7, #12]
 8004cf8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	7d1b      	ldrb	r3, [r3, #20]
 8004d26:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	7bba      	ldrb	r2, [r7, #14]
 8004d2c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b086      	sub	sp, #24
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004d4c:	f107 030e 	add.w	r3, r7, #14
 8004d50:	461a      	mov	r2, r3
 8004d52:	2120      	movs	r1, #32
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f004 f9cd 	bl	80090f4 <VL53L0X_RdWord>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8004d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d118      	bne.n	8004d98 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8004d66:	89fb      	ldrh	r3, [r7, #14]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d109      	bne.n	8004d80 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	751a      	strb	r2, [r3, #20]
 8004d7e:	e00b      	b.n	8004d98 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004d80:	89fb      	ldrh	r3, [r7, #14]
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
 8004db0:	4613      	mov	r3, r2
 8004db2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004dc4:	887b      	ldrh	r3, [r7, #2]
 8004dc6:	2b05      	cmp	r3, #5
 8004dc8:	d902      	bls.n	8004dd0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004dca:	23fc      	movs	r3, #252	; 0xfc
 8004dcc:	75fb      	strb	r3, [r7, #23]
 8004dce:	e05b      	b.n	8004e88 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8004dd0:	787b      	ldrb	r3, [r7, #1]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8004dde:	2301      	movs	r3, #1
 8004de0:	73bb      	strb	r3, [r7, #14]
 8004de2:	e00a      	b.n	8004dfa <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004de4:	887b      	ldrh	r3, [r7, #2]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	330a      	adds	r3, #10
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8004dfa:	887b      	ldrh	r3, [r7, #2]
 8004dfc:	2b05      	cmp	r3, #5
 8004dfe:	d841      	bhi.n	8004e84 <VL53L0X_SetLimitCheckEnable+0xe0>
 8004e00:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <VL53L0X_SetLimitCheckEnable+0x64>)
 8004e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e06:	bf00      	nop
 8004e08:	08004e21 	.word	0x08004e21
 8004e0c:	08004e2b 	.word	0x08004e2b
 8004e10:	08004e41 	.word	0x08004e41
 8004e14:	08004e4b 	.word	0x08004e4b
 8004e18:	08004e55 	.word	0x08004e55
 8004e1c:	08004e6d 	.word	0x08004e6d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004e28:	e02e      	b.n	8004e88 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	2144      	movs	r1, #68	; 0x44
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f004 f8d5 	bl	8008fe4 <VL53L0X_WrWord>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	75fb      	strb	r3, [r7, #23]

			break;
 8004e3e:	e023      	b.n	8004e88 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	7bfa      	ldrb	r2, [r7, #15]
 8004e44:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004e48:	e01e      	b.n	8004e88 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	7bfa      	ldrb	r2, [r7, #15]
 8004e4e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8004e52:	e019      	b.n	8004e88 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8004e54:	7bbb      	ldrb	r3, [r7, #14]
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004e5a:	7b7b      	ldrb	r3, [r7, #13]
 8004e5c:	22fe      	movs	r2, #254	; 0xfe
 8004e5e:	2160      	movs	r1, #96	; 0x60
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f004 f8e9 	bl	8009038 <VL53L0X_UpdateByte>
 8004e66:	4603      	mov	r3, r0
 8004e68:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8004e6a:	e00d      	b.n	8004e88 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8004e6c:	7bbb      	ldrb	r3, [r7, #14]
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004e72:	7b7b      	ldrb	r3, [r7, #13]
 8004e74:	22ef      	movs	r2, #239	; 0xef
 8004e76:	2160      	movs	r1, #96	; 0x60
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f004 f8dd 	bl	8009038 <VL53L0X_UpdateByte>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8004e82:	e001      	b.n	8004e88 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004e84:	23fc      	movs	r3, #252	; 0xfc
 8004e86:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10f      	bne.n	8004eb0 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004e90:	787b      	ldrb	r3, [r7, #1]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004e96:	887b      	ldrh	r3, [r7, #2]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2020 	strb.w	r2, [r3, #32]
 8004ea2:	e005      	b.n	8004eb0 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004ea4:	887b      	ldrh	r3, [r7, #2]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004eb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004ece:	897b      	ldrh	r3, [r7, #10]
 8004ed0:	2b05      	cmp	r3, #5
 8004ed2:	d905      	bls.n	8004ee0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004ed4:	23fc      	movs	r3, #252	; 0xfc
 8004ed6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	701a      	strb	r2, [r3, #0]
 8004ede:	e008      	b.n	8004ef2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004ee0:	897b      	ldrh	r3, [r7, #10]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eea:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	7dba      	ldrb	r2, [r7, #22]
 8004ef0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ef2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
	...

08004f04 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8004f16:	897b      	ldrh	r3, [r7, #10]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f20:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8004f22:	7dbb      	ldrb	r3, [r7, #22]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d107      	bne.n	8004f38 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004f28:	897b      	ldrh	r3, [r7, #10]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	330a      	adds	r3, #10
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	e040      	b.n	8004fba <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8004f38:	897b      	ldrh	r3, [r7, #10]
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d830      	bhi.n	8004fa0 <VL53L0X_SetLimitCheckValue+0x9c>
 8004f3e:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <VL53L0X_SetLimitCheckValue+0x40>)
 8004f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f44:	08004f5d 	.word	0x08004f5d
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	08004f7b 	.word	0x08004f7b
 8004f50:	08004f83 	.word	0x08004f83
 8004f54:	08004f8b 	.word	0x08004f8b
 8004f58:	08004f8b 	.word	0x08004f8b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	62da      	str	r2, [r3, #44]	; 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8004f62:	e01f      	b.n	8004fa4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	2144      	movs	r1, #68	; 0x44
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f004 f838 	bl	8008fe4 <VL53L0X_WrWord>
 8004f74:	4603      	mov	r3, r0
 8004f76:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004f78:	e014      	b.n	8004fa4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8004f80:	e010      	b.n	8004fa4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004f88:	e00c      	b.n	8004fa4 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	461a      	mov	r2, r3
 8004f92:	2164      	movs	r1, #100	; 0x64
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f004 f825 	bl	8008fe4 <VL53L0X_WrWord>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004f9e:	e001      	b.n	8004fa4 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004fa0:	23fc      	movs	r3, #252	; 0xfc
 8004fa2:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004fa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004fac:	897b      	ldrh	r3, [r7, #10]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	330a      	adds	r3, #10
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop

08004fc8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004fde:	897b      	ldrh	r3, [r7, #10]
 8004fe0:	2b05      	cmp	r3, #5
 8004fe2:	d847      	bhi.n	8005074 <VL53L0X_GetLimitCheckValue+0xac>
 8004fe4:	a201      	add	r2, pc, #4	; (adr r2, 8004fec <VL53L0X_GetLimitCheckValue+0x24>)
 8004fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fea:	bf00      	nop
 8004fec:	08005005 	.word	0x08005005
 8004ff0:	08005011 	.word	0x08005011
 8004ff4:	08005037 	.word	0x08005037
 8004ff8:	08005043 	.word	0x08005043
 8004ffc:	0800504f 	.word	0x0800504f
 8005000:	0800504f 	.word	0x0800504f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	77bb      	strb	r3, [r7, #30]
		break;
 800500e:	e033      	b.n	8005078 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8005010:	f107 0316 	add.w	r3, r7, #22
 8005014:	461a      	mov	r2, r3
 8005016:	2144      	movs	r1, #68	; 0x44
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f004 f86b 	bl	80090f4 <VL53L0X_RdWord>
 800501e:	4603      	mov	r3, r0
 8005020:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005022:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800502a:	8afb      	ldrh	r3, [r7, #22]
 800502c:	025b      	lsls	r3, r3, #9
 800502e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005030:	2301      	movs	r3, #1
 8005032:	77bb      	strb	r3, [r7, #30]
		break;
 8005034:	e020      	b.n	8005078 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800503a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800503c:	2300      	movs	r3, #0
 800503e:	77bb      	strb	r3, [r7, #30]
		break;
 8005040:	e01a      	b.n	8005078 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	77bb      	strb	r3, [r7, #30]
		break;
 800504c:	e014      	b.n	8005078 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800504e:	f107 0316 	add.w	r3, r7, #22
 8005052:	461a      	mov	r2, r3
 8005054:	2164      	movs	r1, #100	; 0x64
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f004 f84c 	bl	80090f4 <VL53L0X_RdWord>
 800505c:	4603      	mov	r3, r0
 800505e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005060:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005068:	8afb      	ldrh	r3, [r7, #22]
 800506a:	025b      	lsls	r3, r3, #9
 800506c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	77bb      	strb	r3, [r7, #30]
		break;
 8005072:	e001      	b.n	8005078 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005074:	23fc      	movs	r3, #252	; 0xfc
 8005076:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005078:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d12a      	bne.n	80050d6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005080:	7fbb      	ldrb	r3, [r7, #30]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d124      	bne.n	80050d0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d110      	bne.n	80050ae <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800508c:	897b      	ldrh	r3, [r7, #10]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	330a      	adds	r3, #10
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80050a0:	897b      	ldrh	r3, [r7, #10]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4413      	add	r3, r2
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2020 	strb.w	r2, [r3, #32]
 80050ac:	e013      	b.n	80050d6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80050b4:	897b      	ldrh	r3, [r7, #10]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	330a      	adds	r3, #10
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80050c2:	897b      	ldrh	r3, [r7, #10]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2020 	strb.w	r2, [r3, #32]
 80050ce:	e002      	b.n	80050d6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80050d6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80050da:	4618      	mov	r0, r3
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop

080050e4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80050f2:	f107 030e 	add.w	r3, r7, #14
 80050f6:	461a      	mov	r2, r3
 80050f8:	2101      	movs	r1, #1
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f003 ffd0 	bl	80090a0 <VL53L0X_RdByte>
 8005100:	4603      	mov	r3, r0
 8005102:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8005104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10e      	bne.n	800512a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800510c:	7bba      	ldrb	r2, [r7, #14]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 8005114:	7bbb      	ldrb	r3, [r7, #14]
 8005116:	b25b      	sxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	da03      	bge.n	8005124 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2201      	movs	r2, #1
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	e002      	b.n	800512a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2200      	movs	r2, #0
 8005128:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800512a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d104      	bne.n	800513c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781a      	ldrb	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800513c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005150:	2300      	movs	r3, #0
 8005152:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005154:	f107 030e 	add.w	r3, r7, #14
 8005158:	4619      	mov	r1, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7ff fbd2 	bl	8004904 <VL53L0X_GetDeviceMode>
 8005160:	4603      	mov	r3, r0
 8005162:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 8005164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d107      	bne.n	800517c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800516c:	7bbb      	ldrb	r3, [r7, #14]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f924 	bl	80053c0 <VL53L0X_StartMeasurement>
 8005178:	4603      	mov	r3, r0
 800517a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800517c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d104      	bne.n	800518e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f001 fbcb 	bl	8006920 <VL53L0X_measurement_poll_for_completion>
 800518a:	4603      	mov	r3, r0
 800518c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800518e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005196:	7bbb      	ldrb	r3, [r7, #14]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d103      	bne.n	80051a4 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2203      	movs	r2, #3
 80051a0:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 80051a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051bc:	2300      	movs	r3, #0
 80051be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80051c0:	2301      	movs	r3, #1
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f001 fb6d 	bl	80068a6 <VL53L0X_perform_ref_calibration>
 80051cc:	4603      	mov	r3, r0
 80051ce:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80051d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	460b      	mov	r3, r1
 80051e6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80051f2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 80051f4:	7dbb      	ldrb	r3, [r7, #22]
 80051f6:	2b03      	cmp	r3, #3
 80051f8:	f000 8093 	beq.w	8005322 <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	f300 80d6 	bgt.w	80053ae <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 8005202:	2b01      	cmp	r3, #1
 8005204:	d002      	beq.n	800520c <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 8005206:	2b02      	cmp	r3, #2
 8005208:	d047      	beq.n	800529a <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 800520a:	e0d0      	b.n	80053ae <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800520c:	f107 030c 	add.w	r3, r7, #12
 8005210:	f107 0210 	add.w	r2, r7, #16
 8005214:	2101      	movs	r1, #1
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fc4c 	bl	8005ab4 <VL53L0X_GetInterruptThresholds>
 800521c:	4603      	mov	r3, r0
 800521e:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005226:	f240 80bd 	bls.w	80053a4 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 800522a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f040 80b8 	bne.w	80053a4 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d006      	beq.n	8005248 <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 800523a:	4960      	ldr	r1, [pc, #384]	; (80053bc <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f002 ffd7 	bl	80081f0 <VL53L0X_load_tuning_settings>
 8005242:	4603      	mov	r3, r0
 8005244:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8005246:	e0ad      	b.n	80053a4 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005248:	2204      	movs	r2, #4
 800524a:	21ff      	movs	r1, #255	; 0xff
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f003 fea5 	bl	8008f9c <VL53L0X_WrByte>
 8005252:	4603      	mov	r3, r0
 8005254:	461a      	mov	r2, r3
 8005256:	7dfb      	ldrb	r3, [r7, #23]
 8005258:	4313      	orrs	r3, r2
 800525a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800525c:	2200      	movs	r2, #0
 800525e:	2170      	movs	r1, #112	; 0x70
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f003 fe9b 	bl	8008f9c <VL53L0X_WrByte>
 8005266:	4603      	mov	r3, r0
 8005268:	461a      	mov	r2, r3
 800526a:	7dfb      	ldrb	r3, [r7, #23]
 800526c:	4313      	orrs	r3, r2
 800526e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005270:	2200      	movs	r2, #0
 8005272:	21ff      	movs	r1, #255	; 0xff
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f003 fe91 	bl	8008f9c <VL53L0X_WrByte>
 800527a:	4603      	mov	r3, r0
 800527c:	461a      	mov	r2, r3
 800527e:	7dfb      	ldrb	r3, [r7, #23]
 8005280:	4313      	orrs	r3, r2
 8005282:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005284:	2200      	movs	r2, #0
 8005286:	2180      	movs	r1, #128	; 0x80
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f003 fe87 	bl	8008f9c <VL53L0X_WrByte>
 800528e:	4603      	mov	r3, r0
 8005290:	461a      	mov	r2, r3
 8005292:	7dfb      	ldrb	r3, [r7, #23]
 8005294:	4313      	orrs	r3, r2
 8005296:	75fb      	strb	r3, [r7, #23]
		break;
 8005298:	e084      	b.n	80053a4 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800529a:	f107 030c 	add.w	r3, r7, #12
 800529e:	f107 0210 	add.w	r2, r7, #16
 80052a2:	2101      	movs	r1, #1
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fc05 	bl	8005ab4 <VL53L0X_GetInterruptThresholds>
 80052aa:	4603      	mov	r3, r0
 80052ac:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d079      	beq.n	80053a8 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 80052b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d175      	bne.n	80053a8 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d006      	beq.n	80052d0 <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 80052c2:	493e      	ldr	r1, [pc, #248]	; (80053bc <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f002 ff93 	bl	80081f0 <VL53L0X_load_tuning_settings>
 80052ca:	4603      	mov	r3, r0
 80052cc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 80052ce:	e06b      	b.n	80053a8 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80052d0:	2204      	movs	r2, #4
 80052d2:	21ff      	movs	r1, #255	; 0xff
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f003 fe61 	bl	8008f9c <VL53L0X_WrByte>
 80052da:	4603      	mov	r3, r0
 80052dc:	461a      	mov	r2, r3
 80052de:	7dfb      	ldrb	r3, [r7, #23]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80052e4:	2200      	movs	r2, #0
 80052e6:	2170      	movs	r1, #112	; 0x70
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f003 fe57 	bl	8008f9c <VL53L0X_WrByte>
 80052ee:	4603      	mov	r3, r0
 80052f0:	461a      	mov	r2, r3
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80052f8:	2200      	movs	r2, #0
 80052fa:	21ff      	movs	r1, #255	; 0xff
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f003 fe4d 	bl	8008f9c <VL53L0X_WrByte>
 8005302:	4603      	mov	r3, r0
 8005304:	461a      	mov	r2, r3
 8005306:	7dfb      	ldrb	r3, [r7, #23]
 8005308:	4313      	orrs	r3, r2
 800530a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800530c:	2200      	movs	r2, #0
 800530e:	2180      	movs	r1, #128	; 0x80
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f003 fe43 	bl	8008f9c <VL53L0X_WrByte>
 8005316:	4603      	mov	r3, r0
 8005318:	461a      	mov	r2, r3
 800531a:	7dfb      	ldrb	r3, [r7, #23]
 800531c:	4313      	orrs	r3, r2
 800531e:	75fb      	strb	r3, [r7, #23]
		break;
 8005320:	e042      	b.n	80053a8 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005322:	f107 030c 	add.w	r3, r7, #12
 8005326:	f107 0210 	add.w	r2, r7, #16
 800532a:	2101      	movs	r1, #1
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fbc1 	bl	8005ab4 <VL53L0X_GetInterruptThresholds>
 8005332:	4603      	mov	r3, r0
 8005334:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 8005336:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d136      	bne.n	80053ac <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d006      	beq.n	8005352 <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005344:	491d      	ldr	r1, [pc, #116]	; (80053bc <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f002 ff52 	bl	80081f0 <VL53L0X_load_tuning_settings>
 800534c:	4603      	mov	r3, r0
 800534e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8005350:	e02c      	b.n	80053ac <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005352:	2204      	movs	r2, #4
 8005354:	21ff      	movs	r1, #255	; 0xff
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f003 fe20 	bl	8008f9c <VL53L0X_WrByte>
 800535c:	4603      	mov	r3, r0
 800535e:	461a      	mov	r2, r3
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	4313      	orrs	r3, r2
 8005364:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005366:	2200      	movs	r2, #0
 8005368:	2170      	movs	r1, #112	; 0x70
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f003 fe16 	bl	8008f9c <VL53L0X_WrByte>
 8005370:	4603      	mov	r3, r0
 8005372:	461a      	mov	r2, r3
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	4313      	orrs	r3, r2
 8005378:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800537a:	2200      	movs	r2, #0
 800537c:	21ff      	movs	r1, #255	; 0xff
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f003 fe0c 	bl	8008f9c <VL53L0X_WrByte>
 8005384:	4603      	mov	r3, r0
 8005386:	461a      	mov	r2, r3
 8005388:	7dfb      	ldrb	r3, [r7, #23]
 800538a:	4313      	orrs	r3, r2
 800538c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800538e:	2200      	movs	r2, #0
 8005390:	2180      	movs	r1, #128	; 0x80
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f003 fe02 	bl	8008f9c <VL53L0X_WrByte>
 8005398:	4603      	mov	r3, r0
 800539a:	461a      	mov	r2, r3
 800539c:	7dfb      	ldrb	r3, [r7, #23]
 800539e:	4313      	orrs	r3, r2
 80053a0:	75fb      	strb	r3, [r7, #23]
		break;
 80053a2:	e003      	b.n	80053ac <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 80053a4:	bf00      	nop
 80053a6:	e002      	b.n	80053ae <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 80053a8:	bf00      	nop
 80053aa:	e000      	b.n	80053ae <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 80053ac:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80053ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	20000104 	.word	0x20000104

080053c0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053c8:	2300      	movs	r3, #0
 80053ca:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80053d0:	f107 030e 	add.w	r3, r7, #14
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7ff fa94 	bl	8004904 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80053dc:	2201      	movs	r2, #1
 80053de:	2180      	movs	r1, #128	; 0x80
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f003 fddb 	bl	8008f9c <VL53L0X_WrByte>
 80053e6:	4603      	mov	r3, r0
 80053e8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80053ea:	2201      	movs	r2, #1
 80053ec:	21ff      	movs	r1, #255	; 0xff
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f003 fdd4 	bl	8008f9c <VL53L0X_WrByte>
 80053f4:	4603      	mov	r3, r0
 80053f6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80053f8:	2200      	movs	r2, #0
 80053fa:	2100      	movs	r1, #0
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f003 fdcd 	bl	8008f9c <VL53L0X_WrByte>
 8005402:	4603      	mov	r3, r0
 8005404:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 800540c:	461a      	mov	r2, r3
 800540e:	2191      	movs	r1, #145	; 0x91
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f003 fdc3 	bl	8008f9c <VL53L0X_WrByte>
 8005416:	4603      	mov	r3, r0
 8005418:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800541a:	2201      	movs	r2, #1
 800541c:	2100      	movs	r1, #0
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f003 fdbc 	bl	8008f9c <VL53L0X_WrByte>
 8005424:	4603      	mov	r3, r0
 8005426:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005428:	2200      	movs	r2, #0
 800542a:	21ff      	movs	r1, #255	; 0xff
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f003 fdb5 	bl	8008f9c <VL53L0X_WrByte>
 8005432:	4603      	mov	r3, r0
 8005434:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005436:	2200      	movs	r2, #0
 8005438:	2180      	movs	r1, #128	; 0x80
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f003 fdae 	bl	8008f9c <VL53L0X_WrByte>
 8005440:	4603      	mov	r3, r0
 8005442:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005444:	7bbb      	ldrb	r3, [r7, #14]
 8005446:	2b03      	cmp	r3, #3
 8005448:	d054      	beq.n	80054f4 <VL53L0X_StartMeasurement+0x134>
 800544a:	2b03      	cmp	r3, #3
 800544c:	dc6c      	bgt.n	8005528 <VL53L0X_StartMeasurement+0x168>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <VL53L0X_StartMeasurement+0x98>
 8005452:	2b01      	cmp	r3, #1
 8005454:	d034      	beq.n	80054c0 <VL53L0X_StartMeasurement+0x100>
 8005456:	e067      	b.n	8005528 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005458:	2201      	movs	r2, #1
 800545a:	2100      	movs	r1, #0
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f003 fd9d 	bl	8008f9c <VL53L0X_WrByte>
 8005462:	4603      	mov	r3, r0
 8005464:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800546a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d15d      	bne.n	800552e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800547c:	f107 030d 	add.w	r3, r7, #13
 8005480:	461a      	mov	r2, r3
 8005482:	2100      	movs	r1, #0
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f003 fe0b 	bl	80090a0 <VL53L0X_RdByte>
 800548a:	4603      	mov	r3, r0
 800548c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	3301      	adds	r3, #1
 8005492:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005494:	7b7a      	ldrb	r2, [r7, #13]
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	4013      	ands	r3, r2
 800549a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800549c:	7bfa      	ldrb	r2, [r7, #15]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d107      	bne.n	80054b2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80054a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d103      	bne.n	80054b2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80054b0:	d3e1      	bcc.n	8005476 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80054b8:	d339      	bcc.n	800552e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80054ba:	23f9      	movs	r3, #249	; 0xf9
 80054bc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80054be:	e036      	b.n	800552e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80054c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80054c8:	2101      	movs	r1, #1
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff fe86 	bl	80051dc <VL53L0X_CheckAndLoadInterruptSettings>
 80054d0:	4603      	mov	r3, r0
 80054d2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80054d4:	2202      	movs	r2, #2
 80054d6:	2100      	movs	r1, #0
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f003 fd5f 	bl	8008f9c <VL53L0X_WrByte>
 80054de:	4603      	mov	r3, r0
 80054e0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80054e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d123      	bne.n	8005532 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2204      	movs	r2, #4
 80054ee:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 80054f2:	e01e      	b.n	8005532 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80054f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d105      	bne.n	8005508 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80054fc:	2101      	movs	r1, #1
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff fe6c 	bl	80051dc <VL53L0X_CheckAndLoadInterruptSettings>
 8005504:	4603      	mov	r3, r0
 8005506:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005508:	2204      	movs	r2, #4
 800550a:	2100      	movs	r1, #0
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f003 fd45 	bl	8008f9c <VL53L0X_WrByte>
 8005512:	4603      	mov	r3, r0
 8005514:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005516:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10b      	bne.n	8005536 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2204      	movs	r2, #4
 8005522:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8005526:	e006      	b.n	8005536 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005528:	23f8      	movs	r3, #248	; 0xf8
 800552a:	75fb      	strb	r3, [r7, #23]
 800552c:	e004      	b.n	8005538 <VL53L0X_StartMeasurement+0x178>
		break;
 800552e:	bf00      	nop
 8005530:	e002      	b.n	8005538 <VL53L0X_StartMeasurement+0x178>
		break;
 8005532:	bf00      	nop
 8005534:	e000      	b.n	8005538 <VL53L0X_StartMeasurement+0x178>
		break;
 8005536:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005538:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8005558:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800555a:	7bbb      	ldrb	r3, [r7, #14]
 800555c:	2b04      	cmp	r3, #4
 800555e:	d112      	bne.n	8005586 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005560:	f107 0308 	add.w	r3, r7, #8
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 fb1a 	bl	8005ba0 <VL53L0X_GetInterruptMaskStatus>
 800556c:	4603      	mov	r3, r0
 800556e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b04      	cmp	r3, #4
 8005574:	d103      	bne.n	800557e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2201      	movs	r2, #1
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	e01c      	b.n	80055b8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
 8005584:	e018      	b.n	80055b8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005586:	f107 030d 	add.w	r3, r7, #13
 800558a:	461a      	mov	r2, r3
 800558c:	2114      	movs	r1, #20
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f003 fd86 	bl	80090a0 <VL53L0X_RdByte>
 8005594:	4603      	mov	r3, r0
 8005596:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10b      	bne.n	80055b8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80055a0:	7b7b      	ldrb	r3, [r7, #13]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
 80055b0:	e002      	b.n	80055b8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2200      	movs	r2, #0
 80055b6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80055b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80055c4:	b5b0      	push	{r4, r5, r7, lr}
 80055c6:	b096      	sub	sp, #88	; 0x58
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055ce:	2300      	movs	r3, #0
 80055d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80055d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80055d8:	230c      	movs	r3, #12
 80055da:	2114      	movs	r1, #20
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f003 fcb1 	bl	8008f44 <VL53L0X_ReadMulti>
 80055e2:	4603      	mov	r3, r0
 80055e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80055e8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f040 80d1 	bne.w	8005794 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2200      	movs	r2, #0
 80055f6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 80055fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005602:	b29b      	uxth	r3, r3
 8005604:	021b      	lsls	r3, r3, #8
 8005606:	b29a      	uxth	r2, r3
 8005608:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800560c:	b29b      	uxth	r3, r3
 800560e:	4413      	add	r3, r2
 8005610:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2200      	movs	r2, #0
 8005618:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800561a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800561e:	b29b      	uxth	r3, r3
 8005620:	021b      	lsls	r3, r3, #8
 8005622:	b29a      	uxth	r2, r3
 8005624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005628:	b29b      	uxth	r3, r3
 800562a:	4413      	add	r3, r2
 800562c:	b29b      	uxth	r3, r3
 800562e:	025b      	lsls	r3, r3, #9
 8005630:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005636:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 8005638:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800563c:	b29b      	uxth	r3, r3
 800563e:	021b      	lsls	r3, r3, #8
 8005640:	b29a      	uxth	r2, r3
 8005642:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005646:	b29b      	uxth	r3, r3
 8005648:	4413      	add	r3, r2
 800564a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800564e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005652:	025b      	lsls	r3, r3, #9
 8005654:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800565a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800565e:	b29b      	uxth	r3, r3
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	b29a      	uxth	r2, r3
 8005664:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005668:	b29b      	uxth	r3, r3
 800566a:	4413      	add	r3, r2
 800566c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005676:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8005678:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800567c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 8005686:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 800568e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005692:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005694:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005698:	d046      	beq.n	8005728 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800569a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800569c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80056a0:	fb02 f303 	mul.w	r3, r2, r3
 80056a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80056a8:	4a57      	ldr	r2, [pc, #348]	; (8005808 <VL53L0X_GetRangingMeasurementData+0x244>)
 80056aa:	fb82 1203 	smull	r1, r2, r2, r3
 80056ae:	1192      	asrs	r2, r2, #6
 80056b0:	17db      	asrs	r3, r3, #31
 80056b2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80056b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	7d1b      	ldrb	r3, [r3, #20]
 80056c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80056c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d02c      	beq.n	8005728 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80056ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80056d4:	fb02 f303 	mul.w	r3, r2, r3
 80056d8:	121a      	asrs	r2, r3, #8
					<= 0) {
 80056da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80056dc:	429a      	cmp	r2, r3
 80056de:	d10d      	bne.n	80056fc <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80056e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 80056e8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80056ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80056f0:	e016      	b.n	8005720 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 80056f2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80056f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80056fa:	e011      	b.n	8005720 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80056fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005700:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005702:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005706:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005708:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800570c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005710:	121b      	asrs	r3, r3, #8
 8005712:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005716:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005718:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800571c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005720:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005724:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005728:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00d      	beq.n	800574c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005730:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005734:	089b      	lsrs	r3, r3, #2
 8005736:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800573c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005740:	b2db      	uxtb	r3, r3
 8005742:	019b      	lsls	r3, r3, #6
 8005744:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	75da      	strb	r2, [r3, #23]
 800574a:	e006      	b.n	800575a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005752:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2200      	movs	r2, #0
 8005758:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800575a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800575e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005762:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8005766:	9301      	str	r3, [sp, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f003 f993 	bl	8008a9c <VL53L0X_get_pal_range_status>
 8005776:	4603      	mov	r3, r0
 8005778:	461a      	mov	r2, r3
 800577a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800577e:	4313      	orrs	r3, r2
 8005780:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005784:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005788:	2b00      	cmp	r3, #0
 800578a:	d103      	bne.n	8005794 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800578c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005794:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005798:	2b00      	cmp	r3, #0
 800579a:	d12f      	bne.n	80057fc <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f107 040c 	add.w	r4, r7, #12
 80057a2:	f103 0580 	add.w	r5, r3, #128	; 0x80
 80057a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80057ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 80057b6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 80057bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 80057c4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 80057ca:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 80057d0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 80057d6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80057dc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80057e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80057ec:	f107 050c 	add.w	r5, r7, #12
 80057f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80057f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80057fc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005800:	4618      	mov	r0, r3
 8005802:	3750      	adds	r7, #80	; 0x50
 8005804:	46bd      	mov	sp, r7
 8005806:	bdb0      	pop	{r4, r5, r7, pc}
 8005808:	10624dd3 	.word	0x10624dd3

0800580c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005816:	2300      	movs	r3, #0
 8005818:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800581a:	2100      	movs	r1, #0
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff f845 	bl	80048ac <VL53L0X_SetDeviceMode>
 8005822:	4603      	mov	r3, r0
 8005824:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff fc8a 	bl	8005148 <VL53L0X_PerformSingleMeasurement>
 8005834:	4603      	mov	r3, r0
 8005836:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005840:	6839      	ldr	r1, [r7, #0]
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff febe 	bl	80055c4 <VL53L0X_GetRangingMeasurementData>
 8005848:	4603      	mov	r3, r0
 800584a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800584c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005854:	2100      	movs	r1, #0
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f962 	bl	8005b20 <VL53L0X_ClearInterruptMask>
 800585c:	4603      	mov	r3, r0
 800585e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8005860:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	4608      	mov	r0, r1
 8005876:	4611      	mov	r1, r2
 8005878:	461a      	mov	r2, r3
 800587a:	4603      	mov	r3, r0
 800587c:	70fb      	strb	r3, [r7, #3]
 800587e:	460b      	mov	r3, r1
 8005880:	70bb      	strb	r3, [r7, #2]
 8005882:	4613      	mov	r3, r2
 8005884:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800588a:	78fb      	ldrb	r3, [r7, #3]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d002      	beq.n	8005896 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8005890:	23f6      	movs	r3, #246	; 0xf6
 8005892:	73fb      	strb	r3, [r7, #15]
 8005894:	e107      	b.n	8005aa6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8005896:	78bb      	ldrb	r3, [r7, #2]
 8005898:	2b14      	cmp	r3, #20
 800589a:	d110      	bne.n	80058be <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800589c:	7e3b      	ldrb	r3, [r7, #24]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80058a2:	2310      	movs	r3, #16
 80058a4:	73bb      	strb	r3, [r7, #14]
 80058a6:	e001      	b.n	80058ac <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80058a8:	2301      	movs	r3, #1
 80058aa:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80058ac:	7bbb      	ldrb	r3, [r7, #14]
 80058ae:	461a      	mov	r2, r3
 80058b0:	2184      	movs	r1, #132	; 0x84
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f003 fb72 	bl	8008f9c <VL53L0X_WrByte>
 80058b8:	4603      	mov	r3, r0
 80058ba:	73fb      	strb	r3, [r7, #15]
 80058bc:	e0f3      	b.n	8005aa6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80058be:	78bb      	ldrb	r3, [r7, #2]
 80058c0:	2b15      	cmp	r3, #21
 80058c2:	f040 8097 	bne.w	80059f4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80058c6:	2201      	movs	r2, #1
 80058c8:	21ff      	movs	r1, #255	; 0xff
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f003 fb66 	bl	8008f9c <VL53L0X_WrByte>
 80058d0:	4603      	mov	r3, r0
 80058d2:	461a      	mov	r2, r3
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80058da:	2200      	movs	r2, #0
 80058dc:	2100      	movs	r1, #0
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f003 fb5c 	bl	8008f9c <VL53L0X_WrByte>
 80058e4:	4603      	mov	r3, r0
 80058e6:	461a      	mov	r2, r3
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80058ee:	2200      	movs	r2, #0
 80058f0:	21ff      	movs	r1, #255	; 0xff
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f003 fb52 	bl	8008f9c <VL53L0X_WrByte>
 80058f8:	4603      	mov	r3, r0
 80058fa:	461a      	mov	r2, r3
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	4313      	orrs	r3, r2
 8005900:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005902:	2201      	movs	r2, #1
 8005904:	2180      	movs	r1, #128	; 0x80
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f003 fb48 	bl	8008f9c <VL53L0X_WrByte>
 800590c:	4603      	mov	r3, r0
 800590e:	461a      	mov	r2, r3
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	4313      	orrs	r3, r2
 8005914:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8005916:	2202      	movs	r2, #2
 8005918:	2185      	movs	r1, #133	; 0x85
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f003 fb3e 	bl	8008f9c <VL53L0X_WrByte>
 8005920:	4603      	mov	r3, r0
 8005922:	461a      	mov	r2, r3
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	4313      	orrs	r3, r2
 8005928:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800592a:	2204      	movs	r2, #4
 800592c:	21ff      	movs	r1, #255	; 0xff
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f003 fb34 	bl	8008f9c <VL53L0X_WrByte>
 8005934:	4603      	mov	r3, r0
 8005936:	461a      	mov	r2, r3
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	4313      	orrs	r3, r2
 800593c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800593e:	2200      	movs	r2, #0
 8005940:	21cd      	movs	r1, #205	; 0xcd
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f003 fb2a 	bl	8008f9c <VL53L0X_WrByte>
 8005948:	4603      	mov	r3, r0
 800594a:	461a      	mov	r2, r3
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	4313      	orrs	r3, r2
 8005950:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8005952:	2211      	movs	r2, #17
 8005954:	21cc      	movs	r1, #204	; 0xcc
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f003 fb20 	bl	8008f9c <VL53L0X_WrByte>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	4313      	orrs	r3, r2
 8005964:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8005966:	2207      	movs	r2, #7
 8005968:	21ff      	movs	r1, #255	; 0xff
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f003 fb16 	bl	8008f9c <VL53L0X_WrByte>
 8005970:	4603      	mov	r3, r0
 8005972:	461a      	mov	r2, r3
 8005974:	7bfb      	ldrb	r3, [r7, #15]
 8005976:	4313      	orrs	r3, r2
 8005978:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800597a:	2200      	movs	r2, #0
 800597c:	21be      	movs	r1, #190	; 0xbe
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f003 fb0c 	bl	8008f9c <VL53L0X_WrByte>
 8005984:	4603      	mov	r3, r0
 8005986:	461a      	mov	r2, r3
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	4313      	orrs	r3, r2
 800598c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800598e:	2206      	movs	r2, #6
 8005990:	21ff      	movs	r1, #255	; 0xff
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f003 fb02 	bl	8008f9c <VL53L0X_WrByte>
 8005998:	4603      	mov	r3, r0
 800599a:	461a      	mov	r2, r3
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	4313      	orrs	r3, r2
 80059a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80059a2:	2209      	movs	r2, #9
 80059a4:	21cc      	movs	r1, #204	; 0xcc
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f003 faf8 	bl	8008f9c <VL53L0X_WrByte>
 80059ac:	4603      	mov	r3, r0
 80059ae:	461a      	mov	r2, r3
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80059b6:	2200      	movs	r2, #0
 80059b8:	21ff      	movs	r1, #255	; 0xff
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f003 faee 	bl	8008f9c <VL53L0X_WrByte>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80059ca:	2201      	movs	r2, #1
 80059cc:	21ff      	movs	r1, #255	; 0xff
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f003 fae4 	bl	8008f9c <VL53L0X_WrByte>
 80059d4:	4603      	mov	r3, r0
 80059d6:	461a      	mov	r2, r3
 80059d8:	7bfb      	ldrb	r3, [r7, #15]
 80059da:	4313      	orrs	r3, r2
 80059dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80059de:	2200      	movs	r2, #0
 80059e0:	2100      	movs	r1, #0
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f003 fada 	bl	8008f9c <VL53L0X_WrByte>
 80059e8:	4603      	mov	r3, r0
 80059ea:	461a      	mov	r2, r3
 80059ec:	7bfb      	ldrb	r3, [r7, #15]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	73fb      	strb	r3, [r7, #15]
 80059f2:	e058      	b.n	8005aa6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80059f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d121      	bne.n	8005a40 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80059fc:	787b      	ldrb	r3, [r7, #1]
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d81b      	bhi.n	8005a3a <VL53L0X_SetGpioConfig+0x1ce>
 8005a02:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <VL53L0X_SetGpioConfig+0x19c>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a1d 	.word	0x08005a1d
 8005a0c:	08005a23 	.word	0x08005a23
 8005a10:	08005a29 	.word	0x08005a29
 8005a14:	08005a2f 	.word	0x08005a2f
 8005a18:	08005a35 	.word	0x08005a35
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73bb      	strb	r3, [r7, #14]
				break;
 8005a20:	e00f      	b.n	8005a42 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8005a22:	2301      	movs	r3, #1
 8005a24:	73bb      	strb	r3, [r7, #14]
				break;
 8005a26:	e00c      	b.n	8005a42 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8005a28:	2302      	movs	r3, #2
 8005a2a:	73bb      	strb	r3, [r7, #14]
				break;
 8005a2c:	e009      	b.n	8005a42 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	73bb      	strb	r3, [r7, #14]
				break;
 8005a32:	e006      	b.n	8005a42 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8005a34:	2304      	movs	r3, #4
 8005a36:	73bb      	strb	r3, [r7, #14]
				break;
 8005a38:	e003      	b.n	8005a42 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8005a3a:	23f5      	movs	r3, #245	; 0xf5
 8005a3c:	73fb      	strb	r3, [r7, #15]
 8005a3e:	e000      	b.n	8005a42 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8005a40:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8005a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d107      	bne.n	8005a5a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8005a4a:	7bbb      	ldrb	r3, [r7, #14]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	210a      	movs	r1, #10
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f003 faa3 	bl	8008f9c <VL53L0X_WrByte>
 8005a56:	4603      	mov	r3, r0
 8005a58:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8005a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10f      	bne.n	8005a82 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005a62:	7e3b      	ldrb	r3, [r7, #24]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d102      	bne.n	8005a6e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	73bb      	strb	r3, [r7, #14]
 8005a6c:	e001      	b.n	8005a72 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8005a6e:	2310      	movs	r3, #16
 8005a70:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8005a72:	7bbb      	ldrb	r3, [r7, #14]
 8005a74:	22ef      	movs	r2, #239	; 0xef
 8005a76:	2184      	movs	r1, #132	; 0x84
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f003 fadd 	bl	8009038 <VL53L0X_UpdateByte>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8005a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	787a      	ldrb	r2, [r7, #1]
 8005a8e:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8005a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d105      	bne.n	8005aa6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f83f 	bl	8005b20 <VL53L0X_ClearInterruptMask>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop

08005ab4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 8005ac8:	f107 0314 	add.w	r3, r7, #20
 8005acc:	461a      	mov	r2, r3
 8005ace:	210e      	movs	r1, #14
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f003 fb0f 	bl	80090f4 <VL53L0X_RdWord>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005ada:	8abb      	ldrh	r3, [r7, #20]
 8005adc:	045b      	lsls	r3, r3, #17
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4b0e      	ldr	r3, [pc, #56]	; (8005b1c <VL53L0X_GetInterruptThresholds+0x68>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005ae8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10f      	bne.n	8005b10 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005af0:	f107 0314 	add.w	r3, r7, #20
 8005af4:	461a      	mov	r2, r3
 8005af6:	210c      	movs	r1, #12
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f003 fafb 	bl	80090f4 <VL53L0X_RdWord>
 8005afe:	4603      	mov	r3, r0
 8005b00:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005b02:	8abb      	ldrh	r3, [r7, #20]
 8005b04:	045b      	lsls	r3, r3, #17
 8005b06:	461a      	mov	r2, r3
 8005b08:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <VL53L0X_GetInterruptThresholds+0x68>)
 8005b0a:	4013      	ands	r3, r2
		*pThresholdHigh =
 8005b0c:	683a      	ldr	r2, [r7, #0]
 8005b0e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	1ffe0000 	.word	0x1ffe0000

08005b20 <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8005b32:	2201      	movs	r2, #1
 8005b34:	210b      	movs	r1, #11
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f003 fa30 	bl	8008f9c <VL53L0X_WrByte>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8005b40:	2200      	movs	r2, #0
 8005b42:	210b      	movs	r1, #11
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f003 fa29 	bl	8008f9c <VL53L0X_WrByte>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	7bfb      	ldrb	r3, [r7, #15]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8005b54:	f107 030d 	add.w	r3, r7, #13
 8005b58:	461a      	mov	r2, r3
 8005b5a:	2113      	movs	r1, #19
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f003 fa9f 	bl	80090a0 <VL53L0X_RdByte>
 8005b62:	4603      	mov	r3, r0
 8005b64:	461a      	mov	r2, r3
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8005b6c:	7bbb      	ldrb	r3, [r7, #14]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8005b72:	7b7b      	ldrb	r3, [r7, #13]
 8005b74:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d006      	beq.n	8005b8a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8005b7c:	7bbb      	ldrb	r3, [r7, #14]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d803      	bhi.n	8005b8a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8005b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0d3      	beq.n	8005b32 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8005b8a:	7bbb      	ldrb	r3, [r7, #14]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005b90:	23f4      	movs	r3, #244	; 0xf4
 8005b92:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005baa:	2300      	movs	r3, #0
 8005bac:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 8005bae:	f107 030e 	add.w	r3, r7, #14
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	2113      	movs	r1, #19
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f003 fa72 	bl	80090a0 <VL53L0X_RdByte>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 8005bc0:	7bbb      	ldrb	r3, [r7, #14]
 8005bc2:	f003 0207 	and.w	r2, r3, #7
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8005bca:	7bbb      	ldrb	r3, [r7, #14]
 8005bcc:	f003 0318 	and.w	r3, r3, #24
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d001      	beq.n	8005bd8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8005bd4:	23fa      	movs	r3, #250	; 0xfa
 8005bd6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	68b9      	ldr	r1, [r7, #8]
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 fa03 	bl	8006004 <VL53L0X_perform_ref_spad_management>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8005c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8005c1c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005c20:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8005c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c26:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8005c28:	f107 0308 	add.w	r3, r7, #8
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	2128      	movs	r1, #40	; 0x28
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f003 fa5f 	bl	80090f4 <VL53L0X_RdWord>
 8005c36:	4603      	mov	r3, r0
 8005c38:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8005c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d11e      	bne.n	8005c80 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8005c42:	893b      	ldrh	r3, [r7, #8]
 8005c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8005c4c:	893b      	ldrh	r3, [r7, #8]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	dd0b      	ble.n	8005c70 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8005c58:	893a      	ldrh	r2, [r7, #8]
 8005c5a:	897b      	ldrh	r3, [r7, #10]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	b21b      	sxth	r3, r3
 8005c62:	461a      	mov	r2, r3
					* 250;
 8005c64:	23fa      	movs	r3, #250	; 0xfa
 8005c66:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e007      	b.n	8005c80 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8005c70:	893b      	ldrh	r3, [r7, #8]
 8005c72:	b21b      	sxth	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	23fa      	movs	r3, #250	; 0xfa
 8005c78:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8005c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b08b      	sub	sp, #44	; 0x2c
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8005c9a:	2308      	movs	r3, #8
 8005c9c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69ba      	ldr	r2, [r7, #24]
 8005cb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8005cbc:	69b9      	ldr	r1, [r7, #24]
 8005cbe:	fb01 f202 	mul.w	r2, r1, r2
 8005cc2:	1a9b      	subs	r3, r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cca:	e030      	b.n	8005d2e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	4413      	add	r3, r2
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8005cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d11e      	bne.n	8005d20 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 8005ce2:	7ffa      	ldrb	r2, [r7, #31]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	fa42 f303 	asr.w	r3, r2, r3
 8005cea:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8005cf0:	e016      	b.n	8005d20 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8005cf2:	7ffb      	ldrb	r3, [r7, #31]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00b      	beq.n	8005d14 <get_next_good_spad+0x88>
				success = 1;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	fb02 f203 	mul.w	r2, r2, r3
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	601a      	str	r2, [r3, #0]
				break;
 8005d12:	e009      	b.n	8005d28 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8005d14:	7ffb      	ldrb	r3, [r7, #31]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8005d20:	6a3a      	ldr	r2, [r7, #32]
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d3e4      	bcc.n	8005cf2 <get_next_good_spad+0x66>
				coarseIndex++) {
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d202      	bcs.n	8005d3c <get_next_good_spad+0xb0>
 8005d36:	7fbb      	ldrb	r3, [r7, #30]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0c7      	beq.n	8005ccc <get_next_good_spad+0x40>
		}
	}
}
 8005d3c:	bf00      	nop
 8005d3e:	372c      	adds	r7, #44	; 0x2c
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8005d50:	2301      	movs	r3, #1
 8005d52:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	099b      	lsrs	r3, r3, #6
 8005d58:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8005d5a:	4a07      	ldr	r2, [pc, #28]	; (8005d78 <is_aperture+0x30>)
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <is_aperture+0x22>
		isAperture = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	200002bc 	.word	0x200002bc

08005d7c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b089      	sub	sp, #36	; 0x24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8005d8c:	2308      	movs	r3, #8
 8005d8e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d98:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005da2:	69b9      	ldr	r1, [r7, #24]
 8005da4:	fb01 f202 	mul.w	r2, r1, r2
 8005da8:	1a9b      	subs	r3, r3, r2
 8005daa:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d302      	bcc.n	8005dba <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005db4:	23ce      	movs	r3, #206	; 0xce
 8005db6:	77fb      	strb	r3, [r7, #31]
 8005db8:	e010      	b.n	8005ddc <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	b25a      	sxtb	r2, r3
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dcc:	b25b      	sxtb	r3, r3
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	b259      	sxtb	r1, r3
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	b2ca      	uxtb	r2, r1
 8005dda:	701a      	strb	r2, [r3, #0]

	return status;
 8005ddc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3724      	adds	r7, #36	; 0x24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8005df6:	2306      	movs	r3, #6
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	21b0      	movs	r1, #176	; 0xb0
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f003 f871 	bl	8008ee4 <VL53L0X_WriteMulti>
 8005e02:	4603      	mov	r3, r0
 8005e04:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8005e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b084      	sub	sp, #16
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005e1c:	2306      	movs	r3, #6
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	21b0      	movs	r1, #176	; 0xb0
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f003 f88e 	bl	8008f44 <VL53L0X_ReadMulti>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8005e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08c      	sub	sp, #48	; 0x30
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	607a      	str	r2, [r7, #4]
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	460b      	mov	r3, r1
 8005e46:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e50:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8005e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e54:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005e56:	2300      	movs	r3, #0
 8005e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e5a:	e02b      	b.n	8005eb4 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005e5c:	f107 031c 	add.w	r3, r7, #28
 8005e60:	6a3a      	ldr	r2, [r7, #32]
 8005e62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7ff ff11 	bl	8005c8c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d103      	bne.n	8005e7a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005e72:	23ce      	movs	r3, #206	; 0xce
 8005e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005e78:	e020      	b.n	8005ebc <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e80:	4413      	add	r3, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7ff ff60 	bl	8005d48 <is_aperture>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	7afb      	ldrb	r3, [r7, #11]
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005e92:	23ce      	movs	r3, #206	; 0xce
 8005e94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8005e98:	e010      	b.n	8005ebc <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8005e9e:	6a3a      	ldr	r2, [r7, #32]
 8005ea0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ea2:	6838      	ldr	r0, [r7, #0]
 8005ea4:	f7ff ff6a 	bl	8005d7c <enable_spad_bit>
		currentSpad++;
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d3cf      	bcc.n	8005e5c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8005ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ebe:	6a3a      	ldr	r2, [r7, #32]
 8005ec0:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005ec2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8005eca:	6839      	ldr	r1, [r7, #0]
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f7ff ff8d 	bl	8005dec <set_ref_spad_map>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8005ed8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d121      	bne.n	8005f24 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8005ee0:	f107 0314 	add.w	r3, r7, #20
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f7ff ff93 	bl	8005e12 <get_ref_spad_map>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8005ef6:	e011      	b.n	8005f1c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	4413      	add	r3, r2
 8005efe:	781a      	ldrb	r2, [r3, #0]
 8005f00:	f107 0114 	add.w	r1, r7, #20
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	440b      	add	r3, r1
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d003      	beq.n	8005f16 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005f0e:	23ce      	movs	r3, #206	; 0xce
 8005f10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8005f14:	e006      	b.n	8005f24 <enable_ref_spads+0xec>
			}
			i++;
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	3301      	adds	r3, #1
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8005f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d3e9      	bcc.n	8005ef8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8005f24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3730      	adds	r7, #48	; 0x30
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	; 0x28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8005f4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8005f50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d107      	bne.n	8005f68 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8005f58:	22c0      	movs	r2, #192	; 0xc0
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f003 f81d 	bl	8008f9c <VL53L0X_WrByte>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005f68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d108      	bne.n	8005f82 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8005f70:	f107 0308 	add.w	r3, r7, #8
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7ff fc48 	bl	800580c <VL53L0X_PerformSingleRangingMeasurement>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8005f82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d107      	bne.n	8005f9a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	21ff      	movs	r1, #255	; 0xff
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f003 f804 	bl	8008f9c <VL53L0X_WrByte>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8005f9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d107      	bne.n	8005fb2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	21b6      	movs	r1, #182	; 0xb6
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f003 f8a4 	bl	80090f4 <VL53L0X_RdWord>
 8005fac:	4603      	mov	r3, r0
 8005fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8005fb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d107      	bne.n	8005fca <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005fba:	2200      	movs	r2, #0
 8005fbc:	21ff      	movs	r1, #255	; 0xff
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f002 ffec 	bl	8008f9c <VL53L0X_WrByte>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8005fca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d112      	bne.n	8005ff8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005fd2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	2101      	movs	r1, #1
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f002 ffde 	bl	8008f9c <VL53L0X_WrByte>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8005fe6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d104      	bne.n	8005ff8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005ff4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}

	return status;
 8005ff8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3728      	adds	r7, #40	; 0x28
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006004:	b590      	push	{r4, r7, lr}
 8006006:	b09d      	sub	sp, #116	; 0x74
 8006008:	af06      	add	r7, sp, #24
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006010:	2300      	movs	r3, #0
 8006012:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8006016:	23b4      	movs	r3, #180	; 0xb4
 8006018:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800601c:	2303      	movs	r3, #3
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8006020:	232c      	movs	r3, #44	; 0x2c
 8006022:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8006024:	2300      	movs	r3, #0
 8006026:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8006028:	2300      	movs	r3, #0
 800602a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8006030:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006034:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800603e:	2306      	movs	r3, #6
 8006040:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8006042:	2300      	movs	r3, #0
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800604a:	2300      	movs	r3, #0
 800604c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800605c:	2300      	movs	r3, #0
 800605e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 8006068:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800606a:	2300      	movs	r3, #0
 800606c:	64bb      	str	r3, [r7, #72]	; 0x48
 800606e:	e009      	b.n	8006084 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006070:	68fa      	ldr	r2, [r7, #12]
 8006072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006074:	4413      	add	r3, r2
 8006076:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800607e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006080:	3301      	adds	r3, #1
 8006082:	64bb      	str	r3, [r7, #72]	; 0x48
 8006084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006088:	429a      	cmp	r2, r3
 800608a:	d3f1      	bcc.n	8006070 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800608c:	2201      	movs	r2, #1
 800608e:	21ff      	movs	r1, #255	; 0xff
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f002 ff83 	bl	8008f9c <VL53L0X_WrByte>
 8006096:	4603      	mov	r3, r0
 8006098:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800609c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d107      	bne.n	80060b4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80060a4:	2200      	movs	r2, #0
 80060a6:	214f      	movs	r1, #79	; 0x4f
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f002 ff77 	bl	8008f9c <VL53L0X_WrByte>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80060b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d107      	bne.n	80060cc <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80060bc:	222c      	movs	r2, #44	; 0x2c
 80060be:	214e      	movs	r1, #78	; 0x4e
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f002 ff6b 	bl	8008f9c <VL53L0X_WrByte>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80060cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d107      	bne.n	80060e4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80060d4:	2200      	movs	r2, #0
 80060d6:	21ff      	movs	r1, #255	; 0xff
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f002 ff5f 	bl	8008f9c <VL53L0X_WrByte>
 80060de:	4603      	mov	r3, r0
 80060e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80060e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d109      	bne.n	8006100 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80060ec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80060f0:	461a      	mov	r2, r3
 80060f2:	21b6      	movs	r1, #182	; 0xb6
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f002 ff51 	bl	8008f9c <VL53L0X_WrByte>
 80060fa:	4603      	mov	r3, r0
 80060fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8006100:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006104:	2b00      	cmp	r3, #0
 8006106:	d107      	bne.n	8006118 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8006108:	2200      	movs	r2, #0
 800610a:	2180      	movs	r1, #128	; 0x80
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f002 ff45 	bl	8008f9c <VL53L0X_WrByte>
 8006112:	4603      	mov	r3, r0
 8006114:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8006118:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10a      	bne.n	8006136 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006120:	f107 0210 	add.w	r2, r7, #16
 8006124:	f107 0111 	add.w	r1, r7, #17
 8006128:	2300      	movs	r3, #0
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fbbb 	bl	80068a6 <VL53L0X_perform_ref_calibration>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8006136:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800613a:	2b00      	cmp	r3, #0
 800613c:	d121      	bne.n	8006182 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800613e:	2300      	movs	r3, #0
 8006140:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8006142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006144:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8006146:	2300      	movs	r3, #0
 8006148:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800614a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f503 74a8 	add.w	r4, r3, #336	; 0x150
		Status = enable_ref_spads(Dev,
 800615a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800615e:	f107 0218 	add.w	r2, r7, #24
 8006162:	9204      	str	r2, [sp, #16]
 8006164:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006166:	9203      	str	r2, [sp, #12]
 8006168:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800616a:	9202      	str	r2, [sp, #8]
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	4623      	mov	r3, r4
 8006174:	4602      	mov	r2, r0
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f7ff fe5e 	bl	8005e38 <enable_ref_spads>
 800617c:	4603      	mov	r3, r0
 800617e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006182:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006186:	2b00      	cmp	r3, #0
 8006188:	d174      	bne.n	8006274 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800618e:	f107 0312 	add.w	r3, r7, #18
 8006192:	4619      	mov	r1, r3
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff fecb 	bl	8005f30 <perform_ref_signal_measurement>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80061a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d161      	bne.n	800626c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80061a8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80061aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d25d      	bcs.n	800626c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 80061b0:	2300      	movs	r3, #0
 80061b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80061b4:	e009      	b.n	80061ca <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061ba:	4413      	add	r3, r2
 80061bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 80061c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061c6:	3301      	adds	r3, #1
 80061c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d3f1      	bcc.n	80061b6 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 80061d2:	e002      	b.n	80061da <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80061d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d6:	3301      	adds	r3, #1
 80061d8:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80061da:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80061de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061e0:	4413      	add	r3, r2
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fdb0 	bl	8005d48 <is_aperture>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d103      	bne.n	80061f6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80061ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d3ee      	bcc.n	80061d4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80061f6:	2301      	movs	r3, #1
 80061f8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80061fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 74a8 	add.w	r4, r3, #336	; 0x150
			Status = enable_ref_spads(Dev,
 800620a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800620e:	f107 0218 	add.w	r2, r7, #24
 8006212:	9204      	str	r2, [sp, #16]
 8006214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006216:	9203      	str	r2, [sp, #12]
 8006218:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800621a:	9202      	str	r2, [sp, #8]
 800621c:	9301      	str	r3, [sp, #4]
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	4623      	mov	r3, r4
 8006224:	4602      	mov	r2, r0
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7ff fe06 	bl	8005e38 <enable_ref_spads>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006232:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006236:	2b00      	cmp	r3, #0
 8006238:	d11b      	bne.n	8006272 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800623e:	f107 0312 	add.w	r3, r7, #18
 8006242:	4619      	mov	r1, r3
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7ff fe73 	bl	8005f30 <perform_ref_signal_measurement>
 800624a:	4603      	mov	r3, r0
 800624c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8006250:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10c      	bne.n	8006272 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006258:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800625a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800625c:	429a      	cmp	r2, r3
 800625e:	d208      	bcs.n	8006272 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8006260:	2301      	movs	r3, #1
 8006262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006268:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800626a:	e002      	b.n	8006272 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006270:	e000      	b.n	8006274 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006272:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006274:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 80af 	bne.w	80063dc <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800627e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006280:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006282:	429a      	cmp	r2, r3
 8006284:	f240 80aa 	bls.w	80063dc <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800628a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800628e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006290:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8006298:	f107 031c 	add.w	r3, r7, #28
 800629c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800629e:	4618      	mov	r0, r3
 80062a0:	f003 fa10 	bl	80096c4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80062a4:	8a7b      	ldrh	r3, [r7, #18]
 80062a6:	461a      	mov	r2, r3
 80062a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bfb8      	it	lt
 80062b0:	425b      	neglt	r3, r3
 80062b2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80062ba:	e086      	b.n	80063ca <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f503 70ab 	add.w	r0, r3, #342	; 0x156
			get_next_good_spad(
 80062c2:	f107 0314 	add.w	r3, r7, #20
 80062c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80062c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062ca:	f7ff fcdf 	bl	8005c8c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d4:	d103      	bne.n	80062de <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 80062d6:	23ce      	movs	r3, #206	; 0xce
 80062d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 80062dc:	e07e      	b.n	80063dc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80062de:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80062e2:	697a      	ldr	r2, [r7, #20]
 80062e4:	4413      	add	r3, r2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff fd2e 	bl	8005d48 <is_aperture>
 80062ec:	4603      	mov	r3, r0
 80062ee:	461a      	mov	r2, r3
 80062f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d003      	beq.n	80062fe <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80062f6:	2301      	movs	r3, #1
 80062f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80062fc:	e06e      	b.n	80063dc <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80062fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006300:	3301      	adds	r3, #1
 8006302:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
			Status = enable_spad_bit(
 800630e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006312:	4618      	mov	r0, r3
 8006314:	f7ff fd32 	bl	8005d7c <enable_spad_bit>
 8006318:	4603      	mov	r3, r0
 800631a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800631e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10c      	bne.n	8006340 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006328:	3301      	adds	r3, #1
 800632a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
				Status = set_ref_spad_map(Dev,
 8006332:	4619      	mov	r1, r3
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f7ff fd59 	bl	8005dec <set_ref_spad_map>
 800633a:	4603      	mov	r3, r0
 800633c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006340:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006344:	2b00      	cmp	r3, #0
 8006346:	d146      	bne.n	80063d6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006348:	f107 0312 	add.w	r3, r7, #18
 800634c:	4619      	mov	r1, r3
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f7ff fdee 	bl	8005f30 <perform_ref_signal_measurement>
 8006354:	4603      	mov	r3, r0
 8006356:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800635a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800635e:	2b00      	cmp	r3, #0
 8006360:	d13b      	bne.n	80063da <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006362:	8a7b      	ldrh	r3, [r7, #18]
 8006364:	461a      	mov	r2, r3
 8006366:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	bfb8      	it	lt
 800636e:	425b      	neglt	r3, r3
 8006370:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006372:	8a7b      	ldrh	r3, [r7, #18]
 8006374:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006376:	429a      	cmp	r2, r3
 8006378:	d21c      	bcs.n	80063b4 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800637a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800637e:	429a      	cmp	r2, r3
 8006380:	d914      	bls.n	80063ac <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 8006382:	f107 031c 	add.w	r3, r7, #28
 8006386:	4619      	mov	r1, r3
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f7ff fd2f 	bl	8005dec <set_ref_spad_map>
 800638e:	4603      	mov	r3, r0
 8006390:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f503 73a8 	add.w	r3, r3, #336	; 0x150
					memcpy(
 800639a:	f107 011c 	add.w	r1, r7, #28
 800639e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063a0:	4618      	mov	r0, r3
 80063a2:	f003 f98f 	bl	80096c4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80063a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a8:	3b01      	subs	r3, #1
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80063ac:	2301      	movs	r3, #1
 80063ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b2:	e00a      	b.n	80063ca <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f503 71a8 	add.w	r1, r3, #336	; 0x150
				memcpy(lastSpadArray,
 80063be:	f107 031c 	add.w	r3, r7, #28
 80063c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c4:	4618      	mov	r0, r3
 80063c6:	f003 f97d 	bl	80096c4 <memcpy>
		while (!complete) {
 80063ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f43f af74 	beq.w	80062bc <VL53L0X_perform_ref_spad_management+0x2b8>
 80063d4:	e002      	b.n	80063dc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80063d6:	bf00      	nop
 80063d8:	e000      	b.n	80063dc <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 80063da:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80063dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d115      	bne.n	8006410 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063e8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80063f0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006410:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006414:	4618      	mov	r0, r3
 8006416:	375c      	adds	r7, #92	; 0x5c
 8006418:	46bd      	mov	sp, r7
 800641a:	bd90      	pop	{r4, r7, pc}

0800641c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800641c:	b590      	push	{r4, r7, lr}
 800641e:	b093      	sub	sp, #76	; 0x4c
 8006420:	af06      	add	r7, sp, #24
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	4613      	mov	r3, r2
 8006428:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800642a:	2300      	movs	r3, #0
 800642c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006434:	23b4      	movs	r3, #180	; 0xb4
 8006436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800643a:	2306      	movs	r3, #6
 800643c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800643e:	232c      	movs	r3, #44	; 0x2c
 8006440:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006442:	2201      	movs	r2, #1
 8006444:	21ff      	movs	r1, #255	; 0xff
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f002 fda8 	bl	8008f9c <VL53L0X_WrByte>
 800644c:	4603      	mov	r3, r0
 800644e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006452:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006456:	2b00      	cmp	r3, #0
 8006458:	d107      	bne.n	800646a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800645a:	2200      	movs	r2, #0
 800645c:	214f      	movs	r1, #79	; 0x4f
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f002 fd9c 	bl	8008f9c <VL53L0X_WrByte>
 8006464:	4603      	mov	r3, r0
 8006466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800646a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006472:	222c      	movs	r2, #44	; 0x2c
 8006474:	214e      	movs	r1, #78	; 0x4e
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f002 fd90 	bl	8008f9c <VL53L0X_WrByte>
 800647c:	4603      	mov	r3, r0
 800647e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006482:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006486:	2b00      	cmp	r3, #0
 8006488:	d107      	bne.n	800649a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800648a:	2200      	movs	r2, #0
 800648c:	21ff      	movs	r1, #255	; 0xff
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f002 fd84 	bl	8008f9c <VL53L0X_WrByte>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800649a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d109      	bne.n	80064b6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80064a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064a6:	461a      	mov	r2, r3
 80064a8:	21b6      	movs	r1, #182	; 0xb6
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f002 fd76 	bl	8008f9c <VL53L0X_WrByte>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ba:	e009      	b.n	80064d0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064c6:	2200      	movs	r2, #0
 80064c8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	3301      	adds	r3, #1
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
 80064d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d3f1      	bcc.n	80064bc <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 80064d8:	79fb      	ldrb	r3, [r7, #7]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d011      	beq.n	8006502 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80064de:	e002      	b.n	80064e6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	3301      	adds	r3, #1
 80064e4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80064e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	4413      	add	r3, r2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff fc2a 	bl	8005d48 <is_aperture>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d103      	bne.n	8006502 <VL53L0X_set_reference_spads+0xe6>
 80064fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d3ee      	bcc.n	80064e0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f503 70ab 	add.w	r0, r3, #342	; 0x156
				Dev->Data.SpadData.RefSpadEnables,
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 74a8 	add.w	r4, r3, #336	; 0x150
	Status = enable_ref_spads(Dev,
 800650e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006512:	79f9      	ldrb	r1, [r7, #7]
 8006514:	f107 0214 	add.w	r2, r7, #20
 8006518:	9204      	str	r2, [sp, #16]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	9203      	str	r2, [sp, #12]
 800651e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006520:	9202      	str	r2, [sp, #8]
 8006522:	9301      	str	r3, [sp, #4]
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	4623      	mov	r3, r4
 800652a:	4602      	mov	r2, r0
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f7ff fc83 	bl	8005e38 <enable_ref_spads>
 8006532:	4603      	mov	r3, r0
 8006534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006538:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10c      	bne.n	800655a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	b2da      	uxtb	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	79fa      	ldrb	r2, [r7, #7]
 8006556:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800655a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800655e:	4618      	mov	r0, r3
 8006560:	3734      	adds	r7, #52	; 0x34
 8006562:	46bd      	mov	sp, r7
 8006564:	bd90      	pop	{r4, r7, pc}

08006566 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	460b      	mov	r3, r1
 8006570:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	f043 0301 	orr.w	r3, r3, #1
 8006584:	b2db      	uxtb	r3, r3
 8006586:	461a      	mov	r2, r3
 8006588:	2100      	movs	r1, #0
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f002 fd06 	bl	8008f9c <VL53L0X_WrByte>
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d104      	bne.n	80065a6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f9bf 	bl	8006920 <VL53L0X_measurement_poll_for_completion>
 80065a2:	4603      	mov	r3, r0
 80065a4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80065a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d105      	bne.n	80065ba <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80065ae:	2100      	movs	r1, #0
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f7ff fab5 	bl	8005b20 <VL53L0X_ClearInterruptMask>
 80065b6:	4603      	mov	r3, r0
 80065b8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80065ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d106      	bne.n	80065d0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80065c2:	2200      	movs	r2, #0
 80065c4:	2100      	movs	r1, #0
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f002 fce8 	bl	8008f9c <VL53L0X_WrByte>
 80065cc:	4603      	mov	r3, r0
 80065ce:	73fb      	strb	r3, [r7, #15]

	return Status;
 80065d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	4608      	mov	r0, r1
 80065e6:	4611      	mov	r1, r2
 80065e8:	461a      	mov	r2, r3
 80065ea:	4603      	mov	r3, r0
 80065ec:	70fb      	strb	r3, [r7, #3]
 80065ee:	460b      	mov	r3, r1
 80065f0:	70bb      	strb	r3, [r7, #2]
 80065f2:	4613      	mov	r3, r2
 80065f4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80065fa:	2300      	movs	r3, #0
 80065fc:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80065fe:	2201      	movs	r2, #1
 8006600:	21ff      	movs	r1, #255	; 0xff
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f002 fcca 	bl	8008f9c <VL53L0X_WrByte>
 8006608:	4603      	mov	r3, r0
 800660a:	461a      	mov	r2, r3
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	4313      	orrs	r3, r2
 8006610:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006612:	2200      	movs	r2, #0
 8006614:	2100      	movs	r1, #0
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f002 fcc0 	bl	8008f9c <VL53L0X_WrByte>
 800661c:	4603      	mov	r3, r0
 800661e:	461a      	mov	r2, r3
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	4313      	orrs	r3, r2
 8006624:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006626:	2200      	movs	r2, #0
 8006628:	21ff      	movs	r1, #255	; 0xff
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f002 fcb6 	bl	8008f9c <VL53L0X_WrByte>
 8006630:	4603      	mov	r3, r0
 8006632:	461a      	mov	r2, r3
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	4313      	orrs	r3, r2
 8006638:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01e      	beq.n	800667e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8006640:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d009      	beq.n	800665c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	21cb      	movs	r1, #203	; 0xcb
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f002 fd27 	bl	80090a0 <VL53L0X_RdByte>
 8006652:	4603      	mov	r3, r0
 8006654:	461a      	mov	r2, r3
 8006656:	7bfb      	ldrb	r3, [r7, #15]
 8006658:	4313      	orrs	r3, r2
 800665a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800665c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006660:	2b00      	cmp	r3, #0
 8006662:	d02a      	beq.n	80066ba <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006664:	f107 030e 	add.w	r3, r7, #14
 8006668:	461a      	mov	r2, r3
 800666a:	21ee      	movs	r1, #238	; 0xee
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f002 fd17 	bl	80090a0 <VL53L0X_RdByte>
 8006672:	4603      	mov	r3, r0
 8006674:	461a      	mov	r2, r3
 8006676:	7bfb      	ldrb	r3, [r7, #15]
 8006678:	4313      	orrs	r3, r2
 800667a:	73fb      	strb	r3, [r7, #15]
 800667c:	e01d      	b.n	80066ba <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800667e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006686:	78bb      	ldrb	r3, [r7, #2]
 8006688:	461a      	mov	r2, r3
 800668a:	21cb      	movs	r1, #203	; 0xcb
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f002 fc85 	bl	8008f9c <VL53L0X_WrByte>
 8006692:	4603      	mov	r3, r0
 8006694:	461a      	mov	r2, r3
 8006696:	7bfb      	ldrb	r3, [r7, #15]
 8006698:	4313      	orrs	r3, r2
 800669a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800669c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80066a4:	787b      	ldrb	r3, [r7, #1]
 80066a6:	2280      	movs	r2, #128	; 0x80
 80066a8:	21ee      	movs	r1, #238	; 0xee
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f002 fcc4 	bl	8009038 <VL53L0X_UpdateByte>
 80066b0:	4603      	mov	r3, r0
 80066b2:	461a      	mov	r2, r3
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80066ba:	2201      	movs	r2, #1
 80066bc:	21ff      	movs	r1, #255	; 0xff
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f002 fc6c 	bl	8008f9c <VL53L0X_WrByte>
 80066c4:	4603      	mov	r3, r0
 80066c6:	461a      	mov	r2, r3
 80066c8:	7bfb      	ldrb	r3, [r7, #15]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80066ce:	2201      	movs	r2, #1
 80066d0:	2100      	movs	r1, #0
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f002 fc62 	bl	8008f9c <VL53L0X_WrByte>
 80066d8:	4603      	mov	r3, r0
 80066da:	461a      	mov	r2, r3
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	4313      	orrs	r3, r2
 80066e0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80066e2:	2200      	movs	r2, #0
 80066e4:	21ff      	movs	r1, #255	; 0xff
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f002 fc58 	bl	8008f9c <VL53L0X_WrByte>
 80066ec:	4603      	mov	r3, r0
 80066ee:	461a      	mov	r2, r3
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80066f6:	7bbb      	ldrb	r3, [r7, #14]
 80066f8:	f023 0310 	bic.w	r3, r3, #16
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	701a      	strb	r2, [r3, #0]

	return Status;
 8006702:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b08a      	sub	sp, #40	; 0x28
 8006712:	af04      	add	r7, sp, #16
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	4611      	mov	r1, r2
 800671a:	461a      	mov	r2, r3
 800671c:	460b      	mov	r3, r1
 800671e:	71fb      	strb	r3, [r7, #7]
 8006720:	4613      	mov	r3, r2
 8006722:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006724:	2300      	movs	r3, #0
 8006726:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006734:	2300      	movs	r3, #0
 8006736:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006738:	79bb      	ldrb	r3, [r7, #6]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8006744:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006746:	2201      	movs	r2, #1
 8006748:	2101      	movs	r1, #1
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f002 fc26 	bl	8008f9c <VL53L0X_WrByte>
 8006750:	4603      	mov	r3, r0
 8006752:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006754:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d105      	bne.n	8006768 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800675c:	2140      	movs	r1, #64	; 0x40
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7ff ff01 	bl	8006566 <VL53L0X_perform_single_ref_calibration>
 8006764:	4603      	mov	r3, r0
 8006766:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006768:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d115      	bne.n	800679c <VL53L0X_perform_vhv_calibration+0x8e>
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d112      	bne.n	800679c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006776:	7d39      	ldrb	r1, [r7, #20]
 8006778:	7d7a      	ldrb	r2, [r7, #21]
 800677a:	2300      	movs	r3, #0
 800677c:	9303      	str	r3, [sp, #12]
 800677e:	2301      	movs	r3, #1
 8006780:	9302      	str	r3, [sp, #8]
 8006782:	f107 0313 	add.w	r3, r7, #19
 8006786:	9301      	str	r3, [sp, #4]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	460b      	mov	r3, r1
 800678e:	2101      	movs	r1, #1
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f7ff ff23 	bl	80065dc <VL53L0X_ref_calibration_io>
 8006796:	4603      	mov	r3, r0
 8006798:	75fb      	strb	r3, [r7, #23]
 800679a:	e002      	b.n	80067a2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2200      	movs	r2, #0
 80067a0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80067a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d112      	bne.n	80067d0 <VL53L0X_perform_vhv_calibration+0xc2>
 80067aa:	79bb      	ldrb	r3, [r7, #6]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00f      	beq.n	80067d0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80067b0:	7dbb      	ldrb	r3, [r7, #22]
 80067b2:	461a      	mov	r2, r3
 80067b4:	2101      	movs	r1, #1
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f002 fbf0 	bl	8008f9c <VL53L0X_WrByte>
 80067bc:	4603      	mov	r3, r0
 80067be:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80067c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d103      	bne.n	80067d0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	7dba      	ldrb	r2, [r7, #22]
 80067cc:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 80067d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3718      	adds	r7, #24
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08a      	sub	sp, #40	; 0x28
 80067e0:	af04      	add	r7, sp, #16
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	4611      	mov	r1, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	460b      	mov	r3, r1
 80067ec:	71fb      	strb	r3, [r7, #7]
 80067ee:	4613      	mov	r3, r2
 80067f0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067f2:	2300      	movs	r3, #0
 80067f4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80067f6:	2300      	movs	r3, #0
 80067f8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006802:	79bb      	ldrb	r3, [r7, #6]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d003      	beq.n	8006810 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800680e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006810:	2202      	movs	r2, #2
 8006812:	2101      	movs	r1, #1
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f002 fbc1 	bl	8008f9c <VL53L0X_WrByte>
 800681a:	4603      	mov	r3, r0
 800681c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800681e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d105      	bne.n	8006832 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006826:	2100      	movs	r1, #0
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f7ff fe9c 	bl	8006566 <VL53L0X_perform_single_ref_calibration>
 800682e:	4603      	mov	r3, r0
 8006830:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006832:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d115      	bne.n	8006866 <VL53L0X_perform_phase_calibration+0x8a>
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d112      	bne.n	8006866 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006840:	7d39      	ldrb	r1, [r7, #20]
 8006842:	7d7a      	ldrb	r2, [r7, #21]
 8006844:	2301      	movs	r3, #1
 8006846:	9303      	str	r3, [sp, #12]
 8006848:	2300      	movs	r3, #0
 800684a:	9302      	str	r3, [sp, #8]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	f107 0313 	add.w	r3, r7, #19
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	460b      	mov	r3, r1
 8006858:	2101      	movs	r1, #1
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff febe 	bl	80065dc <VL53L0X_ref_calibration_io>
 8006860:	4603      	mov	r3, r0
 8006862:	75fb      	strb	r3, [r7, #23]
 8006864:	e002      	b.n	800686c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2200      	movs	r2, #0
 800686a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800686c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d112      	bne.n	800689a <VL53L0X_perform_phase_calibration+0xbe>
 8006874:	79bb      	ldrb	r3, [r7, #6]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00f      	beq.n	800689a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800687a:	7dbb      	ldrb	r3, [r7, #22]
 800687c:	461a      	mov	r2, r3
 800687e:	2101      	movs	r1, #1
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f002 fb8b 	bl	8008f9c <VL53L0X_WrByte>
 8006886:	4603      	mov	r3, r0
 8006888:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800688a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d103      	bne.n	800689a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	7dba      	ldrb	r2, [r7, #22]
 8006896:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 800689a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b086      	sub	sp, #24
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	607a      	str	r2, [r7, #4]
 80068b2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068b4:	2300      	movs	r3, #0
 80068b6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80068c2:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 80068c4:	78fa      	ldrb	r2, [r7, #3]
 80068c6:	2300      	movs	r3, #0
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff ff1f 	bl	800670e <VL53L0X_perform_vhv_calibration>
 80068d0:	4603      	mov	r3, r0
 80068d2:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80068d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d107      	bne.n	80068ec <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80068dc:	78fa      	ldrb	r2, [r7, #3]
 80068de:	2300      	movs	r3, #0
 80068e0:	6879      	ldr	r1, [r7, #4]
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f7ff ff7a 	bl	80067dc <VL53L0X_perform_phase_calibration>
 80068e8:	4603      	mov	r3, r0
 80068ea:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80068ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10f      	bne.n	8006914 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80068f4:	7dbb      	ldrb	r3, [r7, #22]
 80068f6:	461a      	mov	r2, r3
 80068f8:	2101      	movs	r1, #1
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f002 fb4e 	bl	8008f9c <VL53L0X_WrByte>
 8006900:	4603      	mov	r3, r0
 8006902:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006904:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d103      	bne.n	8006914 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	7dba      	ldrb	r2, [r7, #22]
 8006910:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8006914:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006928:	2300      	movs	r3, #0
 800692a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006934:	f107 030f 	add.w	r3, r7, #15
 8006938:	4619      	mov	r1, r3
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fe fe02 	bl	8005544 <VL53L0X_GetMeasurementDataReady>
 8006940:	4603      	mov	r3, r0
 8006942:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8006944:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d110      	bne.n	800696e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d00f      	beq.n	8006972 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	3301      	adds	r3, #1
 8006956:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800695e:	d302      	bcc.n	8006966 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006960:	23f9      	movs	r3, #249	; 0xf9
 8006962:	75fb      	strb	r3, [r7, #23]
			break;
 8006964:	e006      	b.n	8006974 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f002 fc38 	bl	80091dc <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800696c:	e7e2      	b.n	8006934 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800696e:	bf00      	nop
 8006970:	e000      	b.n	8006974 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8006972:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8006974:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	4603      	mov	r3, r0
 8006988:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800698a:	2300      	movs	r3, #0
 800698c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800698e:	79fb      	ldrb	r3, [r7, #7]
 8006990:	3301      	adds	r3, #1
 8006992:	b2db      	uxtb	r3, r3
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	4603      	mov	r3, r0
 80069ae:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	3b01      	subs	r3, #1
 80069bc:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 80069be:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 80069d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069dc:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 80069de:	e002      	b.n	80069e6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	089b      	lsrs	r3, r3, #2
 80069e4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d8f8      	bhi.n	80069e0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 80069ee:	e017      	b.n	8006a20 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	4413      	add	r3, r2
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d30b      	bcc.n	8006a14 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	4413      	add	r3, r2
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	085b      	lsrs	r3, r3, #1
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	4413      	add	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	e002      	b.n	8006a1a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	085b      	lsrs	r3, r3, #1
 8006a18:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	089b      	lsrs	r3, r3, #2
 8006a1e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e4      	bne.n	80069f0 <VL53L0X_isqrt+0x24>
	}

	return res;
 8006a26:	68fb      	ldr	r3, [r7, #12]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3714      	adds	r7, #20
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006a40:	2200      	movs	r2, #0
 8006a42:	2183      	movs	r1, #131	; 0x83
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f002 faa9 	bl	8008f9c <VL53L0X_WrByte>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 8006a54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d11e      	bne.n	8006a9a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8006a60:	f107 030f 	add.w	r3, r7, #15
 8006a64:	461a      	mov	r2, r3
 8006a66:	2183      	movs	r1, #131	; 0x83
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f002 fb19 	bl	80090a0 <VL53L0X_RdByte>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10a      	bne.n	8006a8e <VL53L0X_device_read_strobe+0x5a>
 8006a78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d106      	bne.n	8006a8e <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	3301      	adds	r3, #1
 8006a84:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006a8c:	d3e8      	bcc.n	8006a60 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006a94:	d301      	bcc.n	8006a9a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006a96:	23f9      	movs	r3, #249	; 0xf9
 8006a98:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	2183      	movs	r1, #131	; 0x83
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f002 fa7c 	bl	8008f9c <VL53L0X_WrByte>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8006aae:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b098      	sub	sp, #96	; 0x60
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8006acc:	2300      	movs	r3, #0
 8006ace:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8006aea:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006aee:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8006b02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 8006b06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b0a:	2b07      	cmp	r3, #7
 8006b0c:	f000 8408 	beq.w	8007320 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006b10:	2201      	movs	r2, #1
 8006b12:	2180      	movs	r1, #128	; 0x80
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f002 fa41 	bl	8008f9c <VL53L0X_WrByte>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b22:	4313      	orrs	r3, r2
 8006b24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006b28:	2201      	movs	r2, #1
 8006b2a:	21ff      	movs	r1, #255	; 0xff
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f002 fa35 	bl	8008f9c <VL53L0X_WrByte>
 8006b32:	4603      	mov	r3, r0
 8006b34:	461a      	mov	r2, r3
 8006b36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006b40:	2200      	movs	r2, #0
 8006b42:	2100      	movs	r1, #0
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f002 fa29 	bl	8008f9c <VL53L0X_WrByte>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006b58:	2206      	movs	r2, #6
 8006b5a:	21ff      	movs	r1, #255	; 0xff
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f002 fa1d 	bl	8008f9c <VL53L0X_WrByte>
 8006b62:	4603      	mov	r3, r0
 8006b64:	461a      	mov	r2, r3
 8006b66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006b70:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006b74:	461a      	mov	r2, r3
 8006b76:	2183      	movs	r1, #131	; 0x83
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f002 fa91 	bl	80090a0 <VL53L0X_RdByte>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	461a      	mov	r2, r3
 8006b82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8006b8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b90:	f043 0304 	orr.w	r3, r3, #4
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	461a      	mov	r2, r3
 8006b98:	2183      	movs	r1, #131	; 0x83
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f002 f9fe 	bl	8008f9c <VL53L0X_WrByte>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006bae:	2207      	movs	r2, #7
 8006bb0:	21ff      	movs	r1, #255	; 0xff
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f002 f9f2 	bl	8008f9c <VL53L0X_WrByte>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	2181      	movs	r1, #129	; 0x81
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f002 f9e6 	bl	8008f9c <VL53L0X_WrByte>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f002 fafc 	bl	80091dc <VL53L0X_PollingDelay>
 8006be4:	4603      	mov	r3, r0
 8006be6:	461a      	mov	r2, r3
 8006be8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bec:	4313      	orrs	r3, r2
 8006bee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	2180      	movs	r1, #128	; 0x80
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f002 f9d0 	bl	8008f9c <VL53L0X_WrByte>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c04:	4313      	orrs	r3, r2
 8006c06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8006c0a:	78fb      	ldrb	r3, [r7, #3]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8098 	beq.w	8006d46 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006c16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c1a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f040 8091 	bne.w	8006d46 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8006c24:	226b      	movs	r2, #107	; 0x6b
 8006c26:	2194      	movs	r1, #148	; 0x94
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f002 f9b7 	bl	8008f9c <VL53L0X_WrByte>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	461a      	mov	r2, r3
 8006c32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c36:	4313      	orrs	r3, r2
 8006c38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff fef9 	bl	8006a34 <VL53L0X_device_read_strobe>
 8006c42:	4603      	mov	r3, r0
 8006c44:	461a      	mov	r2, r3
 8006c46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006c50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c54:	461a      	mov	r2, r3
 8006c56:	2190      	movs	r1, #144	; 0x90
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f002 fa83 	bl	8009164 <VL53L0X_RdDWord>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	461a      	mov	r2, r3
 8006c62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c66:	4313      	orrs	r3, r2
 8006c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	0a1b      	lsrs	r3, r3, #8
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c76:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	0bdb      	lsrs	r3, r3, #15
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8006c88:	2224      	movs	r2, #36	; 0x24
 8006c8a:	2194      	movs	r1, #148	; 0x94
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f002 f985 	bl	8008f9c <VL53L0X_WrByte>
 8006c92:	4603      	mov	r3, r0
 8006c94:	461a      	mov	r2, r3
 8006c96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff fec7 	bl	8006a34 <VL53L0X_device_read_strobe>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006cb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006cb8:	461a      	mov	r2, r3
 8006cba:	2190      	movs	r1, #144	; 0x90
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f002 fa51 	bl	8009164 <VL53L0X_RdDWord>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	0e1b      	lsrs	r3, r3, #24
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	0c1b      	lsrs	r3, r3, #16
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006cee:	2225      	movs	r2, #37	; 0x25
 8006cf0:	2194      	movs	r1, #148	; 0x94
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f002 f952 	bl	8008f9c <VL53L0X_WrByte>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d00:	4313      	orrs	r3, r2
 8006d02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7ff fe94 	bl	8006a34 <VL53L0X_device_read_strobe>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d14:	4313      	orrs	r3, r2
 8006d16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006d1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d1e:	461a      	mov	r2, r3
 8006d20:	2190      	movs	r1, #144	; 0x90
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f002 fa1e 	bl	8009164 <VL53L0X_RdDWord>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	0e1b      	lsrs	r3, r3, #24
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	0c1b      	lsrs	r3, r3, #16
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006d46:	78fb      	ldrb	r3, [r7, #3]
 8006d48:	f003 0302 	and.w	r3, r3, #2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 8189 	beq.w	8007064 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006d52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d56:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f040 8182 	bne.w	8007064 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006d60:	2202      	movs	r2, #2
 8006d62:	2194      	movs	r1, #148	; 0x94
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f002 f919 	bl	8008f9c <VL53L0X_WrByte>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d72:	4313      	orrs	r3, r2
 8006d74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff fe5b 	bl	8006a34 <VL53L0X_device_read_strobe>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	461a      	mov	r2, r3
 8006d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006d8c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8006d90:	461a      	mov	r2, r3
 8006d92:	2190      	movs	r1, #144	; 0x90
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f002 f983 	bl	80090a0 <VL53L0X_RdByte>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006da8:	227b      	movs	r2, #123	; 0x7b
 8006daa:	2194      	movs	r1, #148	; 0x94
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f002 f8f5 	bl	8008f9c <VL53L0X_WrByte>
 8006db2:	4603      	mov	r3, r0
 8006db4:	461a      	mov	r2, r3
 8006db6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff fe37 	bl	8006a34 <VL53L0X_device_read_strobe>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	461a      	mov	r2, r3
 8006dca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006dd4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8006dd8:	461a      	mov	r2, r3
 8006dda:	2190      	movs	r1, #144	; 0x90
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f002 f95f 	bl	80090a0 <VL53L0X_RdByte>
 8006de2:	4603      	mov	r3, r0
 8006de4:	461a      	mov	r2, r3
 8006de6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006df0:	2277      	movs	r2, #119	; 0x77
 8006df2:	2194      	movs	r1, #148	; 0x94
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f002 f8d1 	bl	8008f9c <VL53L0X_WrByte>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7ff fe13 	bl	8006a34 <VL53L0X_device_read_strobe>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	461a      	mov	r2, r3
 8006e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e16:	4313      	orrs	r3, r2
 8006e18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e20:	461a      	mov	r2, r3
 8006e22:	2190      	movs	r1, #144	; 0x90
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f002 f99d 	bl	8009164 <VL53L0X_RdDWord>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	0e5b      	lsrs	r3, r3, #25
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e48:	0c9b      	lsrs	r3, r3, #18
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	0adb      	lsrs	r3, r3, #11
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	091b      	lsrs	r3, r3, #4
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	00db      	lsls	r3, r3, #3
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006e82:	2278      	movs	r2, #120	; 0x78
 8006e84:	2194      	movs	r1, #148	; 0x94
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f002 f888 	bl	8008f9c <VL53L0X_WrByte>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	461a      	mov	r2, r3
 8006e90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e94:	4313      	orrs	r3, r2
 8006e96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fdca 	bl	8006a34 <VL53L0X_device_read_strobe>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006eae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	2190      	movs	r1, #144	; 0x90
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f002 f954 	bl	8009164 <VL53L0X_RdDWord>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	0f5b      	lsrs	r3, r3, #29
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ed4:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8006ed6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006eda:	4413      	add	r3, r2
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	0d9b      	lsrs	r3, r3, #22
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	0bdb      	lsrs	r3, r3, #15
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	0a1b      	lsrs	r3, r3, #8
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0c:	085b      	lsrs	r3, r3, #1
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	019b      	lsls	r3, r3, #6
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006f2a:	2279      	movs	r2, #121	; 0x79
 8006f2c:	2194      	movs	r1, #148	; 0x94
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f002 f834 	bl	8008f9c <VL53L0X_WrByte>
 8006f34:	4603      	mov	r3, r0
 8006f36:	461a      	mov	r2, r3
 8006f38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7ff fd76 	bl	8006a34 <VL53L0X_device_read_strobe>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f50:	4313      	orrs	r3, r2
 8006f52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	2190      	movs	r1, #144	; 0x90
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f002 f900 	bl	8009164 <VL53L0X_RdDWord>
 8006f64:	4603      	mov	r3, r0
 8006f66:	461a      	mov	r2, r3
 8006f68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	0e9b      	lsrs	r3, r3, #26
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f7c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8006f7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006f82:	4413      	add	r3, r2
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	0cdb      	lsrs	r3, r3, #19
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	0b1b      	lsrs	r3, r3, #12
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa6:	095b      	lsrs	r3, r3, #5
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006fc4:	227a      	movs	r2, #122	; 0x7a
 8006fc6:	2194      	movs	r1, #148	; 0x94
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 ffe7 	bl	8008f9c <VL53L0X_WrByte>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f7ff fd29 	bl	8006a34 <VL53L0X_device_read_strobe>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fea:	4313      	orrs	r3, r2
 8006fec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ff0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	2190      	movs	r1, #144	; 0x90
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f002 f8b3 	bl	8009164 <VL53L0X_RdDWord>
 8006ffe:	4603      	mov	r3, r0
 8007000:	461a      	mov	r2, r3
 8007002:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007006:	4313      	orrs	r3, r2
 8007008:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800700c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700e:	0f9b      	lsrs	r3, r3, #30
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007016:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8007018:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800701c:	4413      	add	r3, r2
 800701e:	b2db      	uxtb	r3, r3
 8007020:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	0ddb      	lsrs	r3, r3, #23
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702c:	b2db      	uxtb	r3, r3
 800702e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	0c1b      	lsrs	r3, r3, #16
 8007034:	b2db      	uxtb	r3, r3
 8007036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703a:	b2db      	uxtb	r3, r3
 800703c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	0a5b      	lsrs	r3, r3, #9
 8007042:	b2db      	uxtb	r3, r3
 8007044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007048:	b2db      	uxtb	r3, r3
 800704a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	089b      	lsrs	r3, r3, #2
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007058:	b2db      	uxtb	r3, r3
 800705a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800705e:	2300      	movs	r3, #0
 8007060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8007064:	78fb      	ldrb	r3, [r7, #3]
 8007066:	f003 0304 	and.w	r3, r3, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 80f1 	beq.w	8007252 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007070:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007074:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007078:	2b00      	cmp	r3, #0
 800707a:	f040 80ea 	bne.w	8007252 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800707e:	227b      	movs	r2, #123	; 0x7b
 8007080:	2194      	movs	r1, #148	; 0x94
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 ff8a 	bl	8008f9c <VL53L0X_WrByte>
 8007088:	4603      	mov	r3, r0
 800708a:	461a      	mov	r2, r3
 800708c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007090:	4313      	orrs	r3, r2
 8007092:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f7ff fccc 	bl	8006a34 <VL53L0X_device_read_strobe>
 800709c:	4603      	mov	r3, r0
 800709e:	461a      	mov	r2, r3
 80070a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070a4:	4313      	orrs	r3, r2
 80070a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80070aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070ae:	461a      	mov	r2, r3
 80070b0:	2190      	movs	r1, #144	; 0x90
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f002 f856 	bl	8009164 <VL53L0X_RdDWord>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461a      	mov	r2, r3
 80070bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80070c6:	227c      	movs	r2, #124	; 0x7c
 80070c8:	2194      	movs	r1, #148	; 0x94
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f001 ff66 	bl	8008f9c <VL53L0X_WrByte>
 80070d0:	4603      	mov	r3, r0
 80070d2:	461a      	mov	r2, r3
 80070d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070d8:	4313      	orrs	r3, r2
 80070da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7ff fca8 	bl	8006a34 <VL53L0X_device_read_strobe>
 80070e4:	4603      	mov	r3, r0
 80070e6:	461a      	mov	r2, r3
 80070e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80070ec:	4313      	orrs	r3, r2
 80070ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 80070f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070f6:	461a      	mov	r2, r3
 80070f8:	2190      	movs	r1, #144	; 0x90
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f002 f832 	bl	8009164 <VL53L0X_RdDWord>
 8007100:	4603      	mov	r3, r0
 8007102:	461a      	mov	r2, r3
 8007104:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007108:	4313      	orrs	r3, r2
 800710a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800710e:	2273      	movs	r2, #115	; 0x73
 8007110:	2194      	movs	r1, #148	; 0x94
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 ff42 	bl	8008f9c <VL53L0X_WrByte>
 8007118:	4603      	mov	r3, r0
 800711a:	461a      	mov	r2, r3
 800711c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007120:	4313      	orrs	r3, r2
 8007122:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7ff fc84 	bl	8006a34 <VL53L0X_device_read_strobe>
 800712c:	4603      	mov	r3, r0
 800712e:	461a      	mov	r2, r3
 8007130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007134:	4313      	orrs	r3, r2
 8007136:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800713a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800713e:	461a      	mov	r2, r3
 8007140:	2190      	movs	r1, #144	; 0x90
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f002 f80e 	bl	8009164 <VL53L0X_RdDWord>
 8007148:	4603      	mov	r3, r0
 800714a:	461a      	mov	r2, r3
 800714c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007150:	4313      	orrs	r3, r2
 8007152:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800715a:	b29b      	uxth	r3, r3
 800715c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800715e:	2274      	movs	r2, #116	; 0x74
 8007160:	2194      	movs	r1, #148	; 0x94
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 ff1a 	bl	8008f9c <VL53L0X_WrByte>
 8007168:	4603      	mov	r3, r0
 800716a:	461a      	mov	r2, r3
 800716c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007170:	4313      	orrs	r3, r2
 8007172:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff fc5c 	bl	8006a34 <VL53L0X_device_read_strobe>
 800717c:	4603      	mov	r3, r0
 800717e:	461a      	mov	r2, r3
 8007180:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007184:	4313      	orrs	r3, r2
 8007186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800718a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800718e:	461a      	mov	r2, r3
 8007190:	2190      	movs	r1, #144	; 0x90
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f001 ffe6 	bl	8009164 <VL53L0X_RdDWord>
 8007198:	4603      	mov	r3, r0
 800719a:	461a      	mov	r2, r3
 800719c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80071a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a8:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80071aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071ac:	4313      	orrs	r3, r2
 80071ae:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80071b0:	2275      	movs	r2, #117	; 0x75
 80071b2:	2194      	movs	r1, #148	; 0x94
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fef1 	bl	8008f9c <VL53L0X_WrByte>
 80071ba:	4603      	mov	r3, r0
 80071bc:	461a      	mov	r2, r3
 80071be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071c2:	4313      	orrs	r3, r2
 80071c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7ff fc33 	bl	8006a34 <VL53L0X_device_read_strobe>
 80071ce:	4603      	mov	r3, r0
 80071d0:	461a      	mov	r2, r3
 80071d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071d6:	4313      	orrs	r3, r2
 80071d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80071dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80071e0:	461a      	mov	r2, r3
 80071e2:	2190      	movs	r1, #144	; 0x90
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f001 ffbd 	bl	8009164 <VL53L0X_RdDWord>
 80071ea:	4603      	mov	r3, r0
 80071ec:	461a      	mov	r2, r3
 80071ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071f2:	4313      	orrs	r3, r2
 80071f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8007200:	2276      	movs	r2, #118	; 0x76
 8007202:	2194      	movs	r1, #148	; 0x94
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 fec9 	bl	8008f9c <VL53L0X_WrByte>
 800720a:	4603      	mov	r3, r0
 800720c:	461a      	mov	r2, r3
 800720e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007212:	4313      	orrs	r3, r2
 8007214:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff fc0b 	bl	8006a34 <VL53L0X_device_read_strobe>
 800721e:	4603      	mov	r3, r0
 8007220:	461a      	mov	r2, r3
 8007222:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007226:	4313      	orrs	r3, r2
 8007228:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800722c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007230:	461a      	mov	r2, r3
 8007232:	2190      	movs	r1, #144	; 0x90
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 ff95 	bl	8009164 <VL53L0X_RdDWord>
 800723a:	4603      	mov	r3, r0
 800723c:	461a      	mov	r2, r3
 800723e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007242:	4313      	orrs	r3, r2
 8007244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800724c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800724e:	4313      	orrs	r3, r2
 8007250:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007252:	2200      	movs	r2, #0
 8007254:	2181      	movs	r1, #129	; 0x81
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f001 fea0 	bl	8008f9c <VL53L0X_WrByte>
 800725c:	4603      	mov	r3, r0
 800725e:	461a      	mov	r2, r3
 8007260:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007264:	4313      	orrs	r3, r2
 8007266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800726a:	2206      	movs	r2, #6
 800726c:	21ff      	movs	r1, #255	; 0xff
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 fe94 	bl	8008f9c <VL53L0X_WrByte>
 8007274:	4603      	mov	r3, r0
 8007276:	461a      	mov	r2, r3
 8007278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800727c:	4313      	orrs	r3, r2
 800727e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007282:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007286:	461a      	mov	r2, r3
 8007288:	2183      	movs	r1, #131	; 0x83
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 ff08 	bl	80090a0 <VL53L0X_RdByte>
 8007290:	4603      	mov	r3, r0
 8007292:	461a      	mov	r2, r3
 8007294:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007298:	4313      	orrs	r3, r2
 800729a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800729e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80072a2:	f023 0304 	bic.w	r3, r3, #4
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	461a      	mov	r2, r3
 80072aa:	2183      	movs	r1, #131	; 0x83
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f001 fe75 	bl	8008f9c <VL53L0X_WrByte>
 80072b2:	4603      	mov	r3, r0
 80072b4:	461a      	mov	r2, r3
 80072b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ba:	4313      	orrs	r3, r2
 80072bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80072c0:	2201      	movs	r2, #1
 80072c2:	21ff      	movs	r1, #255	; 0xff
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 fe69 	bl	8008f9c <VL53L0X_WrByte>
 80072ca:	4603      	mov	r3, r0
 80072cc:	461a      	mov	r2, r3
 80072ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80072d8:	2201      	movs	r2, #1
 80072da:	2100      	movs	r1, #0
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 fe5d 	bl	8008f9c <VL53L0X_WrByte>
 80072e2:	4603      	mov	r3, r0
 80072e4:	461a      	mov	r2, r3
 80072e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80072f0:	2200      	movs	r2, #0
 80072f2:	21ff      	movs	r1, #255	; 0xff
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 fe51 	bl	8008f9c <VL53L0X_WrByte>
 80072fa:	4603      	mov	r3, r0
 80072fc:	461a      	mov	r2, r3
 80072fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007302:	4313      	orrs	r3, r2
 8007304:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007308:	2200      	movs	r2, #0
 800730a:	2180      	movs	r1, #128	; 0x80
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 fe45 	bl	8008f9c <VL53L0X_WrByte>
 8007312:	4603      	mov	r3, r0
 8007314:	461a      	mov	r2, r3
 8007316:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800731a:	4313      	orrs	r3, r2
 800731c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007320:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007324:	2b00      	cmp	r3, #0
 8007326:	f040 8090 	bne.w	800744a <VL53L0X_get_info_from_device+0x990>
 800732a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800732e:	2b07      	cmp	r3, #7
 8007330:	f000 808b 	beq.w	800744a <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007334:	78fb      	ldrb	r3, [r7, #3]
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d024      	beq.n	8007388 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800733e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007342:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007346:	2b00      	cmp	r3, #0
 8007348:	d11e      	bne.n	8007388 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007350:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800735a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800735e:	2300      	movs	r3, #0
 8007360:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007362:	e00e      	b.n	8007382 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007364:	f107 0208 	add.w	r2, r7, #8
 8007368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800736a:	4413      	add	r3, r2
 800736c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007372:	4413      	add	r3, r2
 8007374:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8007378:	460a      	mov	r2, r1
 800737a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800737c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800737e:	3301      	adds	r3, #1
 8007380:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007384:	2b05      	cmp	r3, #5
 8007386:	dded      	ble.n	8007364 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b00      	cmp	r3, #0
 8007390:	d019      	beq.n	80073c6 <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007392:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007396:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800739a:	2b00      	cmp	r3, #0
 800739c:	d113      	bne.n	80073c6 <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800739e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80073a8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f203 131f 	addw	r3, r3, #287	; 0x11f
 80073b8:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80073ba:	f107 0310 	add.w	r3, r7, #16
 80073be:	4619      	mov	r1, r3
 80073c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073c2:	f003 f86e 	bl	800a4a2 <strcpy>

		}

		if (((option & 4) == 4) &&
 80073c6:	78fb      	ldrb	r3, [r7, #3]
 80073c8:	f003 0304 	and.w	r3, r3, #4
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d030      	beq.n	8007432 <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80073d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073d4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d12a      	bne.n	8007432 <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80073dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80073e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 80073ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ee:	025b      	lsls	r3, r3, #9
 80073f0:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073f6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007402:	2b00      	cmp	r3, #0
 8007404:	d011      	beq.n	800742a <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 8007406:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	64bb      	str	r3, [r7, #72]	; 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800740e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007414:	fb02 f303 	mul.w	r3, r2, r3
 8007418:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 800741a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				OffsetMicroMeters *= -1;
 800741e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007422:	425b      	negs	r3, r3
 8007424:	b29b      	uxth	r3, r3
 8007426:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800742a:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007432:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007436:	78fb      	ldrb	r3, [r7, #3]
 8007438:	4313      	orrs	r3, r2
 800743a:	b2db      	uxtb	r3, r3
 800743c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007440:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800744a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800744e:	4618      	mov	r0, r3
 8007450:	3760      	adds	r7, #96	; 0x60
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 8007456:	b480      	push	{r7}
 8007458:	b087      	sub	sp, #28
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	460b      	mov	r3, r1
 8007460:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 8007462:	f240 6277 	movw	r2, #1655	; 0x677
 8007466:	f04f 0300 	mov.w	r3, #0
 800746a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800746e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007472:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	fb02 f303 	mul.w	r3, r2, r3
 8007482:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007484:	68bb      	ldr	r3, [r7, #8]
}
 8007486:	4618      	mov	r0, r3
 8007488:	371c      	adds	r7, #28
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007492:	b480      	push	{r7}
 8007494:	b087      	sub	sp, #28
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d017      	beq.n	80074dc <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80074b2:	e005      	b.n	80074c0 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	085b      	lsrs	r3, r3, #1
 80074b8:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80074ba:	89fb      	ldrh	r3, [r7, #14]
 80074bc:	3301      	adds	r3, #1
 80074be:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1f4      	bne.n	80074b4 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80074ca:	89fb      	ldrh	r3, [r7, #14]
 80074cc:	021b      	lsls	r3, r3, #8
 80074ce:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80074d8:	4413      	add	r3, r2
 80074da:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80074dc:	8afb      	ldrh	r3, [r7, #22]

}
 80074de:	4618      	mov	r0, r3
 80074e0:	371c      	adds	r7, #28
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b085      	sub	sp, #20
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	4603      	mov	r3, r0
 80074f2:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80074f8:	88fb      	ldrh	r3, [r7, #6]
 80074fa:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80074fc:	88fa      	ldrh	r2, [r7, #6]
 80074fe:	0a12      	lsrs	r2, r2, #8
 8007500:	b292      	uxth	r2, r2
 8007502:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007504:	3301      	adds	r3, #1
 8007506:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007508:	68fb      	ldr	r3, [r7, #12]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
	...

08007518 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b088      	sub	sp, #32
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	4613      	mov	r3, r2
 8007524:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	4619      	mov	r1, r3
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f7ff ff91 	bl	8007456 <VL53L0X_calc_macro_period_ps>
 8007534:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800753c:	4a0a      	ldr	r2, [pc, #40]	; (8007568 <VL53L0X_calc_timeout_mclks+0x50>)
 800753e:	fba2 2303 	umull	r2, r3, r2, r3
 8007542:	099b      	lsrs	r3, r3, #6
 8007544:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800754c:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	085b      	lsrs	r3, r3, #1
 8007554:	441a      	add	r2, r3
	timeout_period_mclks =
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	fbb2 f3f3 	udiv	r3, r2, r3
 800755c:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800755e:	69fb      	ldr	r3, [r7, #28]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3720      	adds	r7, #32
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	10624dd3 	.word	0x10624dd3

0800756c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	807b      	strh	r3, [r7, #2]
 8007578:	4613      	mov	r3, r2
 800757a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007580:	787b      	ldrb	r3, [r7, #1]
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7ff ff66 	bl	8007456 <VL53L0X_calc_macro_period_ps>
 800758a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007592:	4a0a      	ldr	r2, [pc, #40]	; (80075bc <VL53L0X_calc_timeout_us+0x50>)
 8007594:	fba2 2303 	umull	r2, r3, r2, r3
 8007598:	099b      	lsrs	r3, r3, #6
 800759a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800759c:	887b      	ldrh	r3, [r7, #2]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	fb02 f303 	mul.w	r3, r2, r3
 80075a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80075a8:	4a04      	ldr	r2, [pc, #16]	; (80075bc <VL53L0X_calc_timeout_us+0x50>)
 80075aa:	fba2 2303 	umull	r2, r3, r2, r3
 80075ae:	099b      	lsrs	r3, r3, #6
 80075b0:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80075b2:	697b      	ldr	r3, [r7, #20]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	10624dd3 	.word	0x10624dd3

080075c0 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08c      	sub	sp, #48	; 0x30
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	460b      	mov	r3, r1
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075ce:	2300      	movs	r3, #0
 80075d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80075de:	2300      	movs	r3, #0
 80075e0:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80075e6:	7afb      	ldrb	r3, [r7, #11]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <get_sequence_step_timeout+0x38>
 80075ec:	7afb      	ldrb	r3, [r7, #11]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d002      	beq.n	80075f8 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80075f2:	7afb      	ldrb	r3, [r7, #11]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d128      	bne.n	800764a <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80075f8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80075fc:	461a      	mov	r2, r3
 80075fe:	2100      	movs	r1, #0
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f7fd f9ef 	bl	80049e4 <VL53L0X_GetVcselPulsePeriod>
 8007606:	4603      	mov	r3, r0
 8007608:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800760c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007610:	2b00      	cmp	r3, #0
 8007612:	d109      	bne.n	8007628 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007614:	f107 0320 	add.w	r3, r7, #32
 8007618:	461a      	mov	r2, r3
 800761a:	2146      	movs	r1, #70	; 0x46
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f001 fd3f 	bl	80090a0 <VL53L0X_RdByte>
 8007622:	4603      	mov	r3, r0
 8007624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007628:	f897 3020 	ldrb.w	r3, [r7, #32]
 800762c:	b29b      	uxth	r3, r3
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff ff5b 	bl	80074ea <VL53L0X_decode_timeout>
 8007634:	4603      	mov	r3, r0
 8007636:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007638:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800763c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800763e:	4619      	mov	r1, r3
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7ff ff93 	bl	800756c <VL53L0X_calc_timeout_us>
 8007646:	62b8      	str	r0, [r7, #40]	; 0x28
 8007648:	e092      	b.n	8007770 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800764a:	7afb      	ldrb	r3, [r7, #11]
 800764c:	2b03      	cmp	r3, #3
 800764e:	d135      	bne.n	80076bc <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007650:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007654:	461a      	mov	r2, r3
 8007656:	2100      	movs	r1, #0
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f7fd f9c3 	bl	80049e4 <VL53L0X_GetVcselPulsePeriod>
 800765e:	4603      	mov	r3, r0
 8007660:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007664:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007668:	2b00      	cmp	r3, #0
 800766a:	f040 8081 	bne.w	8007770 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800766e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007672:	461a      	mov	r2, r3
 8007674:	2100      	movs	r1, #0
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f7fd f9b4 	bl	80049e4 <VL53L0X_GetVcselPulsePeriod>
 800767c:	4603      	mov	r3, r0
 800767e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8007682:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007686:	2b00      	cmp	r3, #0
 8007688:	d109      	bne.n	800769e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800768a:	f107 031e 	add.w	r3, r7, #30
 800768e:	461a      	mov	r2, r3
 8007690:	2151      	movs	r1, #81	; 0x51
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f001 fd2e 	bl	80090f4 <VL53L0X_RdWord>
 8007698:	4603      	mov	r3, r0
 800769a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800769e:	8bfb      	ldrh	r3, [r7, #30]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff ff22 	bl	80074ea <VL53L0X_decode_timeout>
 80076a6:	4603      	mov	r3, r0
 80076a8:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80076aa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80076ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076b0:	4619      	mov	r1, r3
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f7ff ff5a 	bl	800756c <VL53L0X_calc_timeout_us>
 80076b8:	62b8      	str	r0, [r7, #40]	; 0x28
 80076ba:	e059      	b.n	8007770 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80076bc:	7afb      	ldrb	r3, [r7, #11]
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d156      	bne.n	8007770 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80076c2:	f107 0314 	add.w	r3, r7, #20
 80076c6:	4619      	mov	r1, r3
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f7fd fa97 	bl	8004bfc <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01d      	beq.n	8007714 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80076d8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80076dc:	461a      	mov	r2, r3
 80076de:	2100      	movs	r1, #0
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f7fd f97f 	bl	80049e4 <VL53L0X_GetVcselPulsePeriod>
 80076e6:	4603      	mov	r3, r0
 80076e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80076ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10f      	bne.n	8007714 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 80076f4:	f107 031e 	add.w	r3, r7, #30
 80076f8:	461a      	mov	r2, r3
 80076fa:	2151      	movs	r1, #81	; 0x51
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f001 fcf9 	bl	80090f4 <VL53L0X_RdWord>
 8007702:	4603      	mov	r3, r0
 8007704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007708:	8bfb      	ldrh	r3, [r7, #30]
 800770a:	4618      	mov	r0, r3
 800770c:	f7ff feed 	bl	80074ea <VL53L0X_decode_timeout>
 8007710:	4603      	mov	r3, r0
 8007712:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007714:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007718:	2b00      	cmp	r3, #0
 800771a:	d109      	bne.n	8007730 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800771c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007720:	461a      	mov	r2, r3
 8007722:	2101      	movs	r1, #1
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f7fd f95d 	bl	80049e4 <VL53L0X_GetVcselPulsePeriod>
 800772a:	4603      	mov	r3, r0
 800772c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007730:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10f      	bne.n	8007758 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007738:	f107 031c 	add.w	r3, r7, #28
 800773c:	461a      	mov	r2, r3
 800773e:	2171      	movs	r1, #113	; 0x71
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f001 fcd7 	bl	80090f4 <VL53L0X_RdWord>
 8007746:	4603      	mov	r3, r0
 8007748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800774c:	8bbb      	ldrh	r3, [r7, #28]
 800774e:	4618      	mov	r0, r3
 8007750:	f7ff fecb 	bl	80074ea <VL53L0X_decode_timeout>
 8007754:	4603      	mov	r3, r0
 8007756:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007758:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800775a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007760:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007764:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007766:	4619      	mov	r1, r3
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff feff 	bl	800756c <VL53L0X_calc_timeout_us>
 800776e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007774:	601a      	str	r2, [r3, #0]

	return Status;
 8007776:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800777a:	4618      	mov	r0, r3
 800777c:	3730      	adds	r7, #48	; 0x30
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b08a      	sub	sp, #40	; 0x28
 8007786:	af00      	add	r7, sp, #0
 8007788:	60f8      	str	r0, [r7, #12]
 800778a:	460b      	mov	r3, r1
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007790:	2300      	movs	r3, #0
 8007792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007796:	7afb      	ldrb	r3, [r7, #11]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d005      	beq.n	80077a8 <set_sequence_step_timeout+0x26>
 800779c:	7afb      	ldrb	r3, [r7, #11]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d002      	beq.n	80077a8 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80077a2:	7afb      	ldrb	r3, [r7, #11]
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d138      	bne.n	800781a <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80077a8:	f107 031b 	add.w	r3, r7, #27
 80077ac:	461a      	mov	r2, r3
 80077ae:	2100      	movs	r1, #0
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f7fd f917 	bl	80049e4 <VL53L0X_GetVcselPulsePeriod>
 80077b6:	4603      	mov	r3, r0
 80077b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 80077bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d11a      	bne.n	80077fa <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 80077c4:	7efb      	ldrb	r3, [r7, #27]
 80077c6:	461a      	mov	r2, r3
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f7ff fea4 	bl	8007518 <VL53L0X_calc_timeout_mclks>
 80077d0:	4603      	mov	r3, r0
 80077d2:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 80077d4:	8bbb      	ldrh	r3, [r7, #28]
 80077d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077da:	d903      	bls.n	80077e4 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 80077dc:	23ff      	movs	r3, #255	; 0xff
 80077de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80077e2:	e004      	b.n	80077ee <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 80077e4:	8bbb      	ldrh	r3, [r7, #28]
 80077e6:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 80077e8:	3b01      	subs	r3, #1
 80077ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80077ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80077fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f040 80ab 	bne.w	800795a <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8007804:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007808:	461a      	mov	r2, r3
 800780a:	2146      	movs	r1, #70	; 0x46
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f001 fbc5 	bl	8008f9c <VL53L0X_WrByte>
 8007812:	4603      	mov	r3, r0
 8007814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007818:	e09f      	b.n	800795a <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800781a:	7afb      	ldrb	r3, [r7, #11]
 800781c:	2b03      	cmp	r3, #3
 800781e:	d135      	bne.n	800788c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007820:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007824:	2b00      	cmp	r3, #0
 8007826:	d11b      	bne.n	8007860 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007828:	f107 031b 	add.w	r3, r7, #27
 800782c:	461a      	mov	r2, r3
 800782e:	2100      	movs	r1, #0
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7fd f8d7 	bl	80049e4 <VL53L0X_GetVcselPulsePeriod>
 8007836:	4603      	mov	r3, r0
 8007838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800783c:	7efb      	ldrb	r3, [r7, #27]
 800783e:	461a      	mov	r2, r3
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f7ff fe68 	bl	8007518 <VL53L0X_calc_timeout_mclks>
 8007848:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800784a:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800784c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800784e:	4618      	mov	r0, r3
 8007850:	f7ff fe1f 	bl	8007492 <VL53L0X_encode_timeout>
 8007854:	4603      	mov	r3, r0
 8007856:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007858:	8b3a      	ldrh	r2, [r7, #24]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007860:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007864:	2b00      	cmp	r3, #0
 8007866:	d108      	bne.n	800787a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8007868:	8b3b      	ldrh	r3, [r7, #24]
 800786a:	461a      	mov	r2, r3
 800786c:	2151      	movs	r1, #81	; 0x51
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f001 fbb8 	bl	8008fe4 <VL53L0X_WrWord>
 8007874:	4603      	mov	r3, r0
 8007876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800787a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800787e:	2b00      	cmp	r3, #0
 8007880:	d16b      	bne.n	800795a <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 800788a:	e066      	b.n	800795a <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800788c:	7afb      	ldrb	r3, [r7, #11]
 800788e:	2b04      	cmp	r3, #4
 8007890:	d160      	bne.n	8007954 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8007892:	f107 0310 	add.w	r3, r7, #16
 8007896:	4619      	mov	r1, r3
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f7fd f9af 	bl	8004bfc <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800789e:	2300      	movs	r3, #0
 80078a0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80078a2:	7cfb      	ldrb	r3, [r7, #19]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01d      	beq.n	80078e4 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80078a8:	f107 031b 	add.w	r3, r7, #27
 80078ac:	461a      	mov	r2, r3
 80078ae:	2100      	movs	r1, #0
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f7fd f897 	bl	80049e4 <VL53L0X_GetVcselPulsePeriod>
 80078b6:	4603      	mov	r3, r0
 80078b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 80078bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d10f      	bne.n	80078e4 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 80078c4:	f107 0318 	add.w	r3, r7, #24
 80078c8:	461a      	mov	r2, r3
 80078ca:	2151      	movs	r1, #81	; 0x51
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f001 fc11 	bl	80090f4 <VL53L0X_RdWord>
 80078d2:	4603      	mov	r3, r0
 80078d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 80078d8:	8b3b      	ldrh	r3, [r7, #24]
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff fe05 	bl	80074ea <VL53L0X_decode_timeout>
 80078e0:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 80078e2:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80078e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d109      	bne.n	8007900 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80078ec:	f107 031b 	add.w	r3, r7, #27
 80078f0:	461a      	mov	r2, r3
 80078f2:	2101      	movs	r1, #1
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f7fd f875 	bl	80049e4 <VL53L0X_GetVcselPulsePeriod>
 80078fa:	4603      	mov	r3, r0
 80078fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007900:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007904:	2b00      	cmp	r3, #0
 8007906:	d128      	bne.n	800795a <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007908:	7efb      	ldrb	r3, [r7, #27]
 800790a:	461a      	mov	r2, r3
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f7ff fe02 	bl	8007518 <VL53L0X_calc_timeout_mclks>
 8007914:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8007916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007918:	6a3a      	ldr	r2, [r7, #32]
 800791a:	4413      	add	r3, r2
 800791c:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800791e:	6a38      	ldr	r0, [r7, #32]
 8007920:	f7ff fdb7 	bl	8007492 <VL53L0X_encode_timeout>
 8007924:	4603      	mov	r3, r0
 8007926:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8007928:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800792c:	2b00      	cmp	r3, #0
 800792e:	d108      	bne.n	8007942 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8007930:	8bfb      	ldrh	r3, [r7, #30]
 8007932:	461a      	mov	r2, r3
 8007934:	2171      	movs	r1, #113	; 0x71
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f001 fb54 	bl	8008fe4 <VL53L0X_WrWord>
 800793c:	4603      	mov	r3, r0
 800793e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8007942:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007946:	2b00      	cmp	r3, #0
 8007948:	d107      	bne.n	800795a <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8007952:	e002      	b.n	800795a <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007954:	23fc      	movs	r3, #252	; 0xfc
 8007956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800795a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800795e:	4618      	mov	r0, r3
 8007960:	3728      	adds	r7, #40	; 0x28
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b08a      	sub	sp, #40	; 0x28
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	460b      	mov	r3, r1
 8007970:	70fb      	strb	r3, [r7, #3]
 8007972:	4613      	mov	r3, r2
 8007974:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007976:	2300      	movs	r3, #0
 8007978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800797c:	230c      	movs	r3, #12
 800797e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8007982:	2312      	movs	r3, #18
 8007984:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8007988:	2308      	movs	r3, #8
 800798a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800798e:	230e      	movs	r3, #14
 8007990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8007994:	2300      	movs	r3, #0
 8007996:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8007998:	78bb      	ldrb	r3, [r7, #2]
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80079a4:	23fc      	movs	r3, #252	; 0xfc
 80079a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079aa:	e020      	b.n	80079ee <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10d      	bne.n	80079ce <VL53L0X_set_vcsel_pulse_period+0x68>
 80079b2:	78ba      	ldrb	r2, [r7, #2]
 80079b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d304      	bcc.n	80079c6 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 80079bc:	78ba      	ldrb	r2, [r7, #2]
 80079be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d903      	bls.n	80079ce <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80079c6:	23fc      	movs	r3, #252	; 0xfc
 80079c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079cc:	e00f      	b.n	80079ee <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 80079ce:	78fb      	ldrb	r3, [r7, #3]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d10c      	bne.n	80079ee <VL53L0X_set_vcsel_pulse_period+0x88>
 80079d4:	78ba      	ldrb	r2, [r7, #2]
 80079d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80079da:	429a      	cmp	r2, r3
 80079dc:	d304      	bcc.n	80079e8 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 80079de:	78ba      	ldrb	r2, [r7, #2]
 80079e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d902      	bls.n	80079ee <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80079e8:	23fc      	movs	r3, #252	; 0xfc
 80079ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 80079ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 80079f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079fa:	e239      	b.n	8007e70 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d150      	bne.n	8007aa4 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8007a02:	78bb      	ldrb	r3, [r7, #2]
 8007a04:	2b0c      	cmp	r3, #12
 8007a06:	d110      	bne.n	8007a2a <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8007a08:	2218      	movs	r2, #24
 8007a0a:	2157      	movs	r1, #87	; 0x57
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f001 fac5 	bl	8008f9c <VL53L0X_WrByte>
 8007a12:	4603      	mov	r3, r0
 8007a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8007a18:	2208      	movs	r2, #8
 8007a1a:	2156      	movs	r1, #86	; 0x56
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 fabd 	bl	8008f9c <VL53L0X_WrByte>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a28:	e17f      	b.n	8007d2a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007a2a:	78bb      	ldrb	r3, [r7, #2]
 8007a2c:	2b0e      	cmp	r3, #14
 8007a2e:	d110      	bne.n	8007a52 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8007a30:	2230      	movs	r2, #48	; 0x30
 8007a32:	2157      	movs	r1, #87	; 0x57
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 fab1 	bl	8008f9c <VL53L0X_WrByte>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8007a40:	2208      	movs	r2, #8
 8007a42:	2156      	movs	r1, #86	; 0x56
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 faa9 	bl	8008f9c <VL53L0X_WrByte>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a50:	e16b      	b.n	8007d2a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8007a52:	78bb      	ldrb	r3, [r7, #2]
 8007a54:	2b10      	cmp	r3, #16
 8007a56:	d110      	bne.n	8007a7a <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8007a58:	2240      	movs	r2, #64	; 0x40
 8007a5a:	2157      	movs	r1, #87	; 0x57
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 fa9d 	bl	8008f9c <VL53L0X_WrByte>
 8007a62:	4603      	mov	r3, r0
 8007a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8007a68:	2208      	movs	r2, #8
 8007a6a:	2156      	movs	r1, #86	; 0x56
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 fa95 	bl	8008f9c <VL53L0X_WrByte>
 8007a72:	4603      	mov	r3, r0
 8007a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a78:	e157      	b.n	8007d2a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8007a7a:	78bb      	ldrb	r3, [r7, #2]
 8007a7c:	2b12      	cmp	r3, #18
 8007a7e:	f040 8154 	bne.w	8007d2a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8007a82:	2250      	movs	r2, #80	; 0x50
 8007a84:	2157      	movs	r1, #87	; 0x57
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 fa88 	bl	8008f9c <VL53L0X_WrByte>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8007a92:	2208      	movs	r2, #8
 8007a94:	2156      	movs	r1, #86	; 0x56
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f001 fa80 	bl	8008f9c <VL53L0X_WrByte>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007aa2:	e142      	b.n	8007d2a <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	f040 813f 	bne.w	8007d2a <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8007aac:	78bb      	ldrb	r3, [r7, #2]
 8007aae:	2b08      	cmp	r3, #8
 8007ab0:	d14c      	bne.n	8007b4c <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8007ab2:	2210      	movs	r2, #16
 8007ab4:	2148      	movs	r1, #72	; 0x48
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f001 fa70 	bl	8008f9c <VL53L0X_WrByte>
 8007abc:	4603      	mov	r3, r0
 8007abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8007ac2:	2208      	movs	r2, #8
 8007ac4:	2147      	movs	r1, #71	; 0x47
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 fa68 	bl	8008f9c <VL53L0X_WrByte>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	2132      	movs	r1, #50	; 0x32
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 fa60 	bl	8008f9c <VL53L0X_WrByte>
 8007adc:	4603      	mov	r3, r0
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8007aea:	220c      	movs	r2, #12
 8007aec:	2130      	movs	r1, #48	; 0x30
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 fa54 	bl	8008f9c <VL53L0X_WrByte>
 8007af4:	4603      	mov	r3, r0
 8007af6:	461a      	mov	r2, r3
 8007af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007afc:	4313      	orrs	r3, r2
 8007afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007b02:	2201      	movs	r2, #1
 8007b04:	21ff      	movs	r1, #255	; 0xff
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f001 fa48 	bl	8008f9c <VL53L0X_WrByte>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007b1a:	2230      	movs	r2, #48	; 0x30
 8007b1c:	2130      	movs	r1, #48	; 0x30
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 fa3c 	bl	8008f9c <VL53L0X_WrByte>
 8007b24:	4603      	mov	r3, r0
 8007b26:	461a      	mov	r2, r3
 8007b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007b32:	2200      	movs	r2, #0
 8007b34:	21ff      	movs	r1, #255	; 0xff
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f001 fa30 	bl	8008f9c <VL53L0X_WrByte>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b44:	4313      	orrs	r3, r2
 8007b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b4a:	e0ee      	b.n	8007d2a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8007b4c:	78bb      	ldrb	r3, [r7, #2]
 8007b4e:	2b0a      	cmp	r3, #10
 8007b50:	d14c      	bne.n	8007bec <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8007b52:	2228      	movs	r2, #40	; 0x28
 8007b54:	2148      	movs	r1, #72	; 0x48
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 fa20 	bl	8008f9c <VL53L0X_WrByte>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8007b62:	2208      	movs	r2, #8
 8007b64:	2147      	movs	r1, #71	; 0x47
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 fa18 	bl	8008f9c <VL53L0X_WrByte>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007b72:	2203      	movs	r2, #3
 8007b74:	2132      	movs	r1, #50	; 0x32
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f001 fa10 	bl	8008f9c <VL53L0X_WrByte>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b84:	4313      	orrs	r3, r2
 8007b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007b8a:	2209      	movs	r2, #9
 8007b8c:	2130      	movs	r1, #48	; 0x30
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 fa04 	bl	8008f9c <VL53L0X_WrByte>
 8007b94:	4603      	mov	r3, r0
 8007b96:	461a      	mov	r2, r3
 8007b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	21ff      	movs	r1, #255	; 0xff
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 f9f8 	bl	8008f9c <VL53L0X_WrByte>
 8007bac:	4603      	mov	r3, r0
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007bba:	2220      	movs	r2, #32
 8007bbc:	2130      	movs	r1, #48	; 0x30
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 f9ec 	bl	8008f9c <VL53L0X_WrByte>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	21ff      	movs	r1, #255	; 0xff
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 f9e0 	bl	8008f9c <VL53L0X_WrByte>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	461a      	mov	r2, r3
 8007be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007be4:	4313      	orrs	r3, r2
 8007be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007bea:	e09e      	b.n	8007d2a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8007bec:	78bb      	ldrb	r3, [r7, #2]
 8007bee:	2b0c      	cmp	r3, #12
 8007bf0:	d14c      	bne.n	8007c8c <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8007bf2:	2238      	movs	r2, #56	; 0x38
 8007bf4:	2148      	movs	r1, #72	; 0x48
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f001 f9d0 	bl	8008f9c <VL53L0X_WrByte>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8007c02:	2208      	movs	r2, #8
 8007c04:	2147      	movs	r1, #71	; 0x47
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f001 f9c8 	bl	8008f9c <VL53L0X_WrByte>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007c12:	2203      	movs	r2, #3
 8007c14:	2132      	movs	r1, #50	; 0x32
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 f9c0 	bl	8008f9c <VL53L0X_WrByte>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c24:	4313      	orrs	r3, r2
 8007c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007c2a:	2208      	movs	r2, #8
 8007c2c:	2130      	movs	r1, #48	; 0x30
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f001 f9b4 	bl	8008f9c <VL53L0X_WrByte>
 8007c34:	4603      	mov	r3, r0
 8007c36:	461a      	mov	r2, r3
 8007c38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007c42:	2201      	movs	r2, #1
 8007c44:	21ff      	movs	r1, #255	; 0xff
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f001 f9a8 	bl	8008f9c <VL53L0X_WrByte>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	461a      	mov	r2, r3
 8007c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c54:	4313      	orrs	r3, r2
 8007c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	2130      	movs	r1, #48	; 0x30
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 f99c 	bl	8008f9c <VL53L0X_WrByte>
 8007c64:	4603      	mov	r3, r0
 8007c66:	461a      	mov	r2, r3
 8007c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007c72:	2200      	movs	r2, #0
 8007c74:	21ff      	movs	r1, #255	; 0xff
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f001 f990 	bl	8008f9c <VL53L0X_WrByte>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c84:	4313      	orrs	r3, r2
 8007c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c8a:	e04e      	b.n	8007d2a <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007c8c:	78bb      	ldrb	r3, [r7, #2]
 8007c8e:	2b0e      	cmp	r3, #14
 8007c90:	d14b      	bne.n	8007d2a <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8007c92:	2248      	movs	r2, #72	; 0x48
 8007c94:	2148      	movs	r1, #72	; 0x48
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 f980 	bl	8008f9c <VL53L0X_WrByte>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8007ca2:	2208      	movs	r2, #8
 8007ca4:	2147      	movs	r1, #71	; 0x47
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 f978 	bl	8008f9c <VL53L0X_WrByte>
 8007cac:	4603      	mov	r3, r0
 8007cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007cb2:	2203      	movs	r2, #3
 8007cb4:	2132      	movs	r1, #50	; 0x32
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f001 f970 	bl	8008f9c <VL53L0X_WrByte>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007cca:	2207      	movs	r2, #7
 8007ccc:	2130      	movs	r1, #48	; 0x30
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 f964 	bl	8008f9c <VL53L0X_WrByte>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	21ff      	movs	r1, #255	; 0xff
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 f958 	bl	8008f9c <VL53L0X_WrByte>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	2130      	movs	r1, #48	; 0x30
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f001 f94c 	bl	8008f9c <VL53L0X_WrByte>
 8007d04:	4603      	mov	r3, r0
 8007d06:	461a      	mov	r2, r3
 8007d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007d12:	2200      	movs	r2, #0
 8007d14:	21ff      	movs	r1, #255	; 0xff
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f001 f940 	bl	8008f9c <VL53L0X_WrByte>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	461a      	mov	r2, r3
 8007d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8007d2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d17f      	bne.n	8007e32 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8007d32:	78bb      	ldrb	r3, [r7, #2]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fe fe36 	bl	80069a6 <VL53L0X_encode_vcsel_period>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d045      	beq.n	8007dd6 <VL53L0X_set_vcsel_pulse_period+0x470>
 8007d4a:	e06e      	b.n	8007e2a <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007d4c:	f107 0314 	add.w	r3, r7, #20
 8007d50:	461a      	mov	r2, r3
 8007d52:	2103      	movs	r1, #3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7ff fc33 	bl	80075c0 <get_sequence_step_timeout>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007d60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d109      	bne.n	8007d7c <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8007d68:	f107 0310 	add.w	r3, r7, #16
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	2102      	movs	r1, #2
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff fc25 	bl	80075c0 <get_sequence_step_timeout>
 8007d76:	4603      	mov	r3, r0
 8007d78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007d7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d109      	bne.n	8007d98 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8007d84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007d88:	461a      	mov	r2, r3
 8007d8a:	2150      	movs	r1, #80	; 0x50
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f001 f905 	bl	8008f9c <VL53L0X_WrByte>
 8007d92:	4603      	mov	r3, r0
 8007d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007d98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d108      	bne.n	8007db2 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	461a      	mov	r2, r3
 8007da4:	2103      	movs	r1, #3
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7ff fceb 	bl	8007782 <set_sequence_step_timeout>
 8007dac:	4603      	mov	r3, r0
 8007dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8007db2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d108      	bne.n	8007dcc <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	2102      	movs	r1, #2
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7ff fcde 	bl	8007782 <set_sequence_step_timeout>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	78ba      	ldrb	r2, [r7, #2]
 8007dd0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007dd4:	e02e      	b.n	8007e34 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007dd6:	f107 0318 	add.w	r3, r7, #24
 8007dda:	461a      	mov	r2, r3
 8007ddc:	2104      	movs	r1, #4
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff fbee 	bl	80075c0 <get_sequence_step_timeout>
 8007de4:	4603      	mov	r3, r0
 8007de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007dea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d109      	bne.n	8007e06 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8007df2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007df6:	461a      	mov	r2, r3
 8007df8:	2170      	movs	r1, #112	; 0x70
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f001 f8ce 	bl	8008f9c <VL53L0X_WrByte>
 8007e00:	4603      	mov	r3, r0
 8007e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007e06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d108      	bne.n	8007e20 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	461a      	mov	r2, r3
 8007e12:	2104      	movs	r1, #4
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f7ff fcb4 	bl	8007782 <set_sequence_step_timeout>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	78ba      	ldrb	r2, [r7, #2]
 8007e24:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007e28:	e004      	b.n	8007e34 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007e2a:	23fc      	movs	r3, #252	; 0xfc
 8007e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e30:	e000      	b.n	8007e34 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8007e32:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8007e34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d109      	bne.n	8007e50 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007e42:	69f9      	ldr	r1, [r7, #28]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7fc fd8f 	bl	8004968 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007e50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d109      	bne.n	8007e6c <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8007e58:	f107 010f 	add.w	r1, r7, #15
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	2200      	movs	r2, #0
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7fe fcbb 	bl	80067dc <VL53L0X_perform_phase_calibration>
 8007e66:	4603      	mov	r3, r0
 8007e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007e6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3728      	adds	r7, #40	; 0x28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	460b      	mov	r3, r1
 8007e82:	607a      	str	r2, [r7, #4]
 8007e84:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e86:	2300      	movs	r3, #0
 8007e88:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007e8a:	7afb      	ldrb	r3, [r7, #11]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d00a      	beq.n	8007eaa <VL53L0X_get_vcsel_pulse_period+0x32>
 8007e94:	e013      	b.n	8007ebe <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007e96:	f107 0316 	add.w	r3, r7, #22
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	2150      	movs	r1, #80	; 0x50
 8007e9e:	68f8      	ldr	r0, [r7, #12]
 8007ea0:	f001 f8fe 	bl	80090a0 <VL53L0X_RdByte>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007ea8:	e00b      	b.n	8007ec2 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007eaa:	f107 0316 	add.w	r3, r7, #22
 8007eae:	461a      	mov	r2, r3
 8007eb0:	2170      	movs	r1, #112	; 0x70
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f001 f8f4 	bl	80090a0 <VL53L0X_RdByte>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007ebc:	e001      	b.n	8007ec2 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ebe:	23fc      	movs	r3, #252	; 0xfc
 8007ec0:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d107      	bne.n	8007eda <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8007eca:	7dbb      	ldrb	r3, [r7, #22]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f7fe fd57 	bl	8006980 <VL53L0X_decode_vcsel_period>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	701a      	strb	r2, [r3, #0]

	return Status;
 8007eda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b090      	sub	sp, #64	; 0x40
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007ef6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007efa:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007efc:	f240 7376 	movw	r3, #1910	; 0x776
 8007f00:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 8007f02:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8007f06:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007f08:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 8007f0e:	f240 234e 	movw	r3, #590	; 0x24e
 8007f12:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 8007f14:	f240 23b2 	movw	r3, #690	; 0x2b2
 8007f18:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007f1a:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007f1e:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007f20:	f240 2326 	movw	r3, #550	; 0x226
 8007f24:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8007f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007f34:	683a      	ldr	r2, [r7, #0]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	63bb      	str	r3, [r7, #56]	; 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007f3a:	f107 0310 	add.w	r3, r7, #16
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7fc fe5b 	bl	8004bfc <VL53L0X_GetSequenceStepEnables>
 8007f46:	4603      	mov	r3, r0
 8007f48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 8007f4c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d15b      	bne.n	800800c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 8007f54:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8007f5a:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 8007f60:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d052      	beq.n	800800c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8007f66:	f107 030c 	add.w	r3, r7, #12
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	2102      	movs	r1, #2
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7ff fb26 	bl	80075c0 <get_sequence_step_timeout>
 8007f74:	4603      	mov	r3, r0
 8007f76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 8007f7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 8007f82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f86:	e07d      	b.n	8008084 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8007f88:	7c3b      	ldrb	r3, [r7, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00f      	beq.n	8007fae <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f92:	4413      	add	r3, r2
 8007f94:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 8007f96:	69ba      	ldr	r2, [r7, #24]
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d204      	bcs.n	8007fa8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8007f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fa6:	e002      	b.n	8007fae <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007fa8:	23fc      	movs	r3, #252	; 0xfc
 8007faa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8007fae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d002      	beq.n	8007fbc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 8007fb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007fba:	e063      	b.n	8008084 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8007fbc:	7cbb      	ldrb	r3, [r7, #18]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d011      	beq.n	8007fe6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	4413      	add	r3, r2
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d204      	bcs.n	8007fde <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fdc:	e016      	b.n	800800c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007fde:	23fc      	movs	r3, #252	; 0xfc
 8007fe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007fe4:	e012      	b.n	800800c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8007fe6:	7c7b      	ldrb	r3, [r7, #17]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00f      	beq.n	800800c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ff0:	4413      	add	r3, r2
 8007ff2:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d204      	bcs.n	8008006 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	63bb      	str	r3, [r7, #56]	; 0x38
 8008004:	e002      	b.n	800800c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008006:	23fc      	movs	r3, #252	; 0xfc
 8008008:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800800c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008010:	2b00      	cmp	r3, #0
 8008012:	d002      	beq.n	800801a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 8008014:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008018:	e034      	b.n	8008084 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800801a:	7cfb      	ldrb	r3, [r7, #19]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d019      	beq.n	8008054 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008020:	f107 0308 	add.w	r3, r7, #8
 8008024:	461a      	mov	r2, r3
 8008026:	2103      	movs	r1, #3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff fac9 	bl	80075c0 <get_sequence_step_timeout>
 800802e:	4603      	mov	r3, r0
 8008030:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	6a3a      	ldr	r2, [r7, #32]
 8008038:	4413      	add	r3, r2
 800803a:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	429a      	cmp	r2, r3
 8008042:	d204      	bcs.n	800804e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8008044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	63bb      	str	r3, [r7, #56]	; 0x38
 800804c:	e002      	b.n	8008054 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800804e:	23fc      	movs	r3, #252	; 0xfc
 8008050:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8008054:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008058:	2b00      	cmp	r3, #0
 800805a:	d111      	bne.n	8008080 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 800805c:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00e      	beq.n	8008080 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 8008062:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	63bb      	str	r3, [r7, #56]	; 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800806a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800806c:	2104      	movs	r1, #4
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f7ff fb87 	bl	8007782 <set_sequence_step_timeout>
 8008074:	4603      	mov	r3, r0
 8008076:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008080:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008084:	4618      	mov	r0, r3
 8008086:	3740      	adds	r7, #64	; 0x40
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b090      	sub	sp, #64	; 0x40
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008096:	2300      	movs	r3, #0
 8008098:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800809c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80080a0:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80080a2:	f240 7376 	movw	r3, #1910	; 0x776
 80080a6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80080a8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80080ac:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80080ae:	f44f 7325 	mov.w	r3, #660	; 0x294
 80080b2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80080b4:	f240 234e 	movw	r3, #590	; 0x24e
 80080b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80080ba:	f240 23b2 	movw	r3, #690	; 0x2b2
 80080be:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80080c0:	f44f 7325 	mov.w	r3, #660	; 0x294
 80080c4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80080c6:	f240 2326 	movw	r3, #550	; 0x226
 80080ca:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80080d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d4:	441a      	add	r2, r3
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80080da:	f107 0318 	add.w	r3, r7, #24
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7fc fd8b 	bl	8004bfc <VL53L0X_GetSequenceStepEnables>
 80080e6:	4603      	mov	r3, r0
 80080e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 80080ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 80080f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080f8:	e075      	b.n	80081e6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80080fa:	7e3b      	ldrb	r3, [r7, #24]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d105      	bne.n	800810c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8008100:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8008102:	2b00      	cmp	r3, #0
 8008104:	d102      	bne.n	800810c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8008106:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8008108:	2b00      	cmp	r3, #0
 800810a:	d030      	beq.n	800816e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800810c:	f107 0310 	add.w	r3, r7, #16
 8008110:	461a      	mov	r2, r3
 8008112:	2102      	movs	r1, #2
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f7ff fa53 	bl	80075c0 <get_sequence_step_timeout>
 800811a:	4603      	mov	r3, r0
 800811c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8008120:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008124:	2b00      	cmp	r3, #0
 8008126:	d122      	bne.n	800816e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8008128:	7e3b      	ldrb	r3, [r7, #24]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d007      	beq.n	800813e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008132:	6939      	ldr	r1, [r7, #16]
 8008134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008136:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008138:	441a      	add	r2, r3
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800813e:	7ebb      	ldrb	r3, [r7, #26]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d009      	beq.n	8008158 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8008148:	6939      	ldr	r1, [r7, #16]
 800814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814c:	440b      	add	r3, r1
 800814e:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008150:	441a      	add	r2, r3
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	e00a      	b.n	800816e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8008158:	7e7b      	ldrb	r3, [r7, #25]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d007      	beq.n	800816e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008162:	6939      	ldr	r1, [r7, #16]
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008168:	441a      	add	r2, r3
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800816e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008172:	2b00      	cmp	r3, #0
 8008174:	d114      	bne.n	80081a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8008176:	7efb      	ldrb	r3, [r7, #27]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d011      	beq.n	80081a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800817c:	f107 030c 	add.w	r3, r7, #12
 8008180:	461a      	mov	r2, r3
 8008182:	2103      	movs	r1, #3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff fa1b 	bl	80075c0 <get_sequence_step_timeout>
 800818a:	4603      	mov	r3, r0
 800818c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8008194:	68f9      	ldr	r1, [r7, #12]
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800819a:	441a      	add	r2, r3
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d114      	bne.n	80081d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80081a8:	7f3b      	ldrb	r3, [r7, #28]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d011      	beq.n	80081d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80081ae:	f107 0314 	add.w	r3, r7, #20
 80081b2:	461a      	mov	r2, r3
 80081b4:	2104      	movs	r1, #4
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff fa02 	bl	80075c0 <get_sequence_step_timeout>
 80081bc:	4603      	mov	r3, r0
 80081be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80081c6:	6979      	ldr	r1, [r7, #20]
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80081cc:	441a      	add	r2, r3
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d103      	bne.n	80081e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3740      	adds	r7, #64	; 0x40
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081fa:	2300      	movs	r3, #0
 80081fc:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008202:	e0c6      	b.n	8008392 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	683a      	ldr	r2, [r7, #0]
 8008208:	4413      	add	r3, r2
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	3301      	adds	r3, #1
 8008212:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8008214:	7cfb      	ldrb	r3, [r7, #19]
 8008216:	2bff      	cmp	r3, #255	; 0xff
 8008218:	f040 808d 	bne.w	8008336 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	4413      	add	r3, r2
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	747b      	strb	r3, [r7, #17]
			Index++;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	3301      	adds	r3, #1
 800822a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800822c:	7c7b      	ldrb	r3, [r7, #17]
 800822e:	2b03      	cmp	r3, #3
 8008230:	d87e      	bhi.n	8008330 <VL53L0X_load_tuning_settings+0x140>
 8008232:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <VL53L0X_load_tuning_settings+0x48>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	08008249 	.word	0x08008249
 800823c:	08008283 	.word	0x08008283
 8008240:	080082bd 	.word	0x080082bd
 8008244:	080082f7 	.word	0x080082f7
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	4413      	add	r3, r2
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	743b      	strb	r3, [r7, #16]
				Index++;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	3301      	adds	r3, #1
 8008256:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	4413      	add	r3, r2
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	3301      	adds	r3, #1
 8008266:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008268:	7c3b      	ldrb	r3, [r7, #16]
 800826a:	b29b      	uxth	r3, r3
 800826c:	021b      	lsls	r3, r3, #8
 800826e:	b29a      	uxth	r2, r3
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	b29b      	uxth	r3, r3
 8008274:	4413      	add	r3, r2
 8008276:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	89ba      	ldrh	r2, [r7, #12]
 800827c:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 8008280:	e087      	b.n	8008392 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	4413      	add	r3, r2
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	743b      	strb	r3, [r7, #16]
				Index++;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	3301      	adds	r3, #1
 8008290:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	4413      	add	r3, r2
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	3301      	adds	r3, #1
 80082a0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80082a2:	7c3b      	ldrb	r3, [r7, #16]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	021b      	lsls	r3, r3, #8
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	4413      	add	r3, r2
 80082b0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	89ba      	ldrh	r2, [r7, #12]
 80082b6:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 80082ba:	e06a      	b.n	8008392 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	4413      	add	r3, r2
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	743b      	strb	r3, [r7, #16]
				Index++;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	3301      	adds	r3, #1
 80082ca:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	4413      	add	r3, r2
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	3301      	adds	r3, #1
 80082da:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80082dc:	7c3b      	ldrb	r3, [r7, #16]
 80082de:	b29b      	uxth	r3, r3
 80082e0:	021b      	lsls	r3, r3, #8
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	4413      	add	r3, r2
 80082ea:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	89ba      	ldrh	r2, [r7, #12]
 80082f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 80082f4:	e04d      	b.n	8008392 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	4413      	add	r3, r2
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	743b      	strb	r3, [r7, #16]
				Index++;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	3301      	adds	r3, #1
 8008304:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	4413      	add	r3, r2
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	3301      	adds	r3, #1
 8008314:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008316:	7c3b      	ldrb	r3, [r7, #16]
 8008318:	b29b      	uxth	r3, r3
 800831a:	021b      	lsls	r3, r3, #8
 800831c:	b29a      	uxth	r2, r3
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	b29b      	uxth	r3, r3
 8008322:	4413      	add	r3, r2
 8008324:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	89ba      	ldrh	r2, [r7, #12]
 800832a:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 800832e:	e030      	b.n	8008392 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008330:	23fc      	movs	r3, #252	; 0xfc
 8008332:	77fb      	strb	r3, [r7, #31]
 8008334:	e02d      	b.n	8008392 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8008336:	7cfb      	ldrb	r3, [r7, #19]
 8008338:	2b04      	cmp	r3, #4
 800833a:	d828      	bhi.n	800838e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	4413      	add	r3, r2
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	74bb      	strb	r3, [r7, #18]
			Index++;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	3301      	adds	r3, #1
 800834a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800834c:	2300      	movs	r3, #0
 800834e:	61bb      	str	r3, [r7, #24]
 8008350:	e00f      	b.n	8008372 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	683a      	ldr	r2, [r7, #0]
 8008356:	4413      	add	r3, r2
 8008358:	7819      	ldrb	r1, [r3, #0]
 800835a:	f107 0208 	add.w	r2, r7, #8
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	4413      	add	r3, r2
 8008362:	460a      	mov	r2, r1
 8008364:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	3301      	adds	r3, #1
 800836a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	3301      	adds	r3, #1
 8008370:	61bb      	str	r3, [r7, #24]
 8008372:	7cfb      	ldrb	r3, [r7, #19]
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	429a      	cmp	r2, r3
 8008378:	dbeb      	blt.n	8008352 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800837a:	7cfb      	ldrb	r3, [r7, #19]
 800837c:	f107 0208 	add.w	r2, r7, #8
 8008380:	7cb9      	ldrb	r1, [r7, #18]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fdae 	bl	8008ee4 <VL53L0X_WriteMulti>
 8008388:	4603      	mov	r3, r0
 800838a:	77fb      	strb	r3, [r7, #31]
 800838c:	e001      	b.n	8008392 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800838e:	23fc      	movs	r3, #252	; 0xfc
 8008390:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	683a      	ldr	r2, [r7, #0]
 8008396:	4413      	add	r3, r2
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d004      	beq.n	80083a8 <VL53L0X_load_tuning_settings+0x1b8>
 800839e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f43f af2e 	beq.w	8008204 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3720      	adds	r7, #32
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083c0:	2300      	movs	r3, #0
 80083c2:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80083ca:	f107 0313 	add.w	r3, r7, #19
 80083ce:	4619      	mov	r1, r3
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f7fc fc9f 	bl	8004d14 <VL53L0X_GetXTalkCompensationEnable>
 80083d6:	4603      	mov	r3, r0
 80083d8:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80083da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d111      	bne.n	8008406 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 80083e2:	7cfb      	ldrb	r3, [r7, #19]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00e      	beq.n	8008406 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	8a9b      	ldrh	r3, [r3, #20]
 80083f2:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	fb02 f303 	mul.w	r3, r2, r3
 80083fa:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	3380      	adds	r3, #128	; 0x80
 8008400:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8008406:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3720      	adds	r7, #32
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b086      	sub	sp, #24
 8008416:	af00      	add	r7, sp, #0
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	60b9      	str	r1, [r7, #8]
 800841c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800841e:	2300      	movs	r3, #0
 8008420:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800842a:	f107 0310 	add.w	r3, r7, #16
 800842e:	461a      	mov	r2, r3
 8008430:	68b9      	ldr	r1, [r7, #8]
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f7ff ffbe 	bl	80083b4 <VL53L0X_get_total_xtalk_rate>
 8008438:	4603      	mov	r3, r0
 800843a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800843c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d105      	bne.n	8008450 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	441a      	add	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	601a      	str	r2, [r3, #0]

	return Status;
 8008450:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 800845c:	b084      	sub	sp, #16
 800845e:	b480      	push	{r7}
 8008460:	b085      	sub	sp, #20
 8008462:	af00      	add	r7, sp, #0
 8008464:	f107 0c18 	add.w	ip, r7, #24
 8008468:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800846c:	2300      	movs	r3, #0
 800846e:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 8008470:	2300      	movs	r3, #0
 8008472:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	60bb      	str	r3, [r7, #8]
	int index = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 800847c:	2300      	movs	r3, #0
 800847e:	607b      	str	r3, [r7, #4]
 8008480:	e00d      	b.n	800849e <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f107 0218 	add.w	r2, r7, #24
 8008488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800848c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800848e:	429a      	cmp	r2, r3
 8008490:	d802      	bhi.n	8008498 <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	60bb      	str	r3, [r7, #8]
			break;
 8008496:	e006      	b.n	80084a6 <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	3301      	adds	r3, #1
 800849c:	607b      	str	r3, [r7, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d8ed      	bhi.n	8008482 <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 80084a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d105      	bne.n	80084ba <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 80084ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084b0:	3b01      	subs	r3, #1
 80084b2:	60bb      	str	r3, [r7, #8]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	e008      	b.n	80084cc <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d102      	bne.n	80084c6 <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	e002      	b.n	80084cc <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	3b01      	subs	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084d0:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084d6:	601a      	str	r2, [r3, #0]

	return Status;
 80084d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3714      	adds	r7, #20
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	b004      	add	sp, #16
 80084e8:	4770      	bx	lr

080084ea <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 80084ea:	b5b0      	push	{r4, r5, r7, lr}
 80084ec:	b0ba      	sub	sp, #232	; 0xe8
 80084ee:	af0e      	add	r7, sp, #56	; 0x38
 80084f0:	60f8      	str	r0, [r7, #12]
 80084f2:	60b9      	str	r1, [r7, #8]
 80084f4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 80084fc:	2300      	movs	r3, #0
 80084fe:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008504:	f107 031c 	add.w	r3, r7, #28
 8008508:	4619      	mov	r1, r3
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f7fc f918 	bl	8004740 <VL53L0X_GetDeviceParameters>
 8008510:	4603      	mov	r3, r0
 8008512:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 8008516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	429a      	cmp	r2, r3
 800851c:	d803      	bhi.n	8008526 <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 800851e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008524:	e081      	b.n	800862a <VL53L0X_calc_dmax+0x140>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 8008526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	429a      	cmp	r2, r3
 800852c:	d304      	bcc.n	8008538 <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 800852e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008536:	e078      	b.n	800862a <VL53L0X_calc_dmax+0x140>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 8008538:	f107 0314 	add.w	r3, r7, #20
 800853c:	930d      	str	r3, [sp, #52]	; 0x34
 800853e:	f107 0318 	add.w	r3, r7, #24
 8008542:	930c      	str	r3, [sp, #48]	; 0x30
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	930b      	str	r3, [sp, #44]	; 0x2c
 8008548:	2307      	movs	r3, #7
 800854a:	930a      	str	r3, [sp, #40]	; 0x28
 800854c:	466d      	mov	r5, sp
 800854e:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8008552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800855a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800855e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008562:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008568:	f7ff ff78 	bl	800845c <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	429a      	cmp	r2, r3
 8008572:	d10a      	bne.n	800858a <VL53L0X_calc_dmax+0xa0>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	3314      	adds	r3, #20
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800857e:	4413      	add	r3, r2
 8008580:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8008584:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008588:	e04f      	b.n	800862a <VL53L0X_calc_dmax+0x140>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	330e      	adds	r3, #14
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8008594:	4413      	add	r3, r2
 8008596:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800859a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	330e      	adds	r3, #14
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80085a8:	4413      	add	r3, r2
 80085aa:	f853 3c90 	ldr.w	r3, [r3, #-144]
 80085ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	3314      	adds	r3, #20
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80085bc:	4413      	add	r3, r2
 80085be:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 80085c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	3314      	adds	r3, #20
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80085d0:	4413      	add	r3, r2
 80085d2:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 80085d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if ((amb1 - amb0) != 0) {
 80085da:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80085de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d01d      	beq.n	8008622 <VL53L0X_calc_dmax+0x138>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 80085e6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80085ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085ee:	1ad2      	subs	r2, r2, r3
 80085f0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80085f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085f8:	1acb      	subs	r3, r1, r3
 80085fa:	0a1b      	lsrs	r3, r3, #8
 80085fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008600:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 8008604:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 800860c:	0a1b      	lsrs	r3, r3, #8
 800860e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008612:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 8008616:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800861a:	4413      	add	r3, r2
 800861c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008620:	e003      	b.n	800862a <VL53L0X_calc_dmax+0x140>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 8008622:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008626:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 800862a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800862e:	0c1a      	lsrs	r2, r3, #16
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8008634:	f997 30ab 	ldrsb.w	r3, [r7, #171]	; 0xab
}
 8008638:	4618      	mov	r0, r3
 800863a:	37b0      	adds	r7, #176	; 0xb0
 800863c:	46bd      	mov	sp, r7
 800863e:	bdb0      	pop	{r4, r5, r7, pc}

08008640 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b0b0      	sub	sp, #192	; 0xc0
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800864c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8008650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8008654:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008658:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 800865c:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8008660:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8008664:	f241 235c 	movw	r3, #4700	; 0x125c
 8008668:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800866c:	4b98      	ldr	r3, [pc, #608]	; (80088d0 <VL53L0X_calc_sigma_estimate+0x290>)
 800866e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8008672:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800867a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800867e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008682:	fbb2 f3f3 	udiv	r3, r2, r3
 8008686:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800868a:	4b92      	ldr	r3, [pc, #584]	; (80088d4 <VL53L0X_calc_sigma_estimate+0x294>)
 800868c:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800868e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008692:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8008694:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8008698:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 800869a:	f240 6377 	movw	r3, #1655	; 0x677
 800869e:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086a0:	2300      	movs	r3, #0
 80086a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086b4:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80086b8:	0c1b      	lsrs	r3, r3, #16
 80086ba:	66bb      	str	r3, [r7, #104]	; 0x68

	Status = VL53L0X_get_total_signal_rate(
 80086bc:	f107 0314 	add.w	r3, r7, #20
 80086c0:	461a      	mov	r2, r3
 80086c2:	68b9      	ldr	r1, [r7, #8]
 80086c4:	68f8      	ldr	r0, [r7, #12]
 80086c6:	f7ff fea4 	bl	8008412 <VL53L0X_get_total_signal_rate>
 80086ca:	4603      	mov	r3, r0
 80086cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80086d0:	f107 0318 	add.w	r3, r7, #24
 80086d4:	461a      	mov	r2, r3
 80086d6:	68b9      	ldr	r1, [r7, #8]
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f7ff fe6b 	bl	80083b4 <VL53L0X_get_total_xtalk_rate>
 80086de:	4603      	mov	r3, r0
 80086e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086ea:	fb02 f303 	mul.w	r3, r2, r3
 80086ee:	667b      	str	r3, [r7, #100]	; 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80086f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80086f6:	0c1b      	lsrs	r3, r3, #16
 80086f8:	667b      	str	r3, [r7, #100]	; 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008700:	fb02 f303 	mul.w	r3, r2, r3
 8008704:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008708:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800870c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800870e:	429a      	cmp	r2, r3
 8008710:	d902      	bls.n	8008718 <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8008712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008714:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008718:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800871c:	2b00      	cmp	r3, #0
 800871e:	d160      	bne.n	80087e2 <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008726:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8008730:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008734:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8008738:	461a      	mov	r2, r3
 800873a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7fe feea 	bl	8007518 <VL53L0X_calc_timeout_mclks>
 8008744:	65f8      	str	r0, [r7, #92]	; 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800874c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8008756:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800875a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800875e:	461a      	mov	r2, r3
 8008760:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f7fe fed7 	bl	8007518 <VL53L0X_calc_timeout_mclks>
 800876a:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800876c:	2303      	movs	r3, #3
 800876e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 8008772:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8008776:	2b08      	cmp	r3, #8
 8008778:	d102      	bne.n	8008780 <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 800877a:	2302      	movs	r3, #2
 800877c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8008780:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008784:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008786:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800878a:	fb02 f303 	mul.w	r3, r2, r3
 800878e:	02db      	lsls	r3, r3, #11
 8008790:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008794:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008798:	4a4f      	ldr	r2, [pc, #316]	; (80088d8 <VL53L0X_calc_sigma_estimate+0x298>)
 800879a:	fba2 2303 	umull	r2, r3, r2, r3
 800879e:	099b      	lsrs	r3, r3, #6
 80087a0:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 80087a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087a4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80087a6:	fb02 f303 	mul.w	r3, r2, r3
 80087aa:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80087ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80087b2:	4a49      	ldr	r2, [pc, #292]	; (80088d8 <VL53L0X_calc_sigma_estimate+0x298>)
 80087b4:	fba2 2303 	umull	r2, r3, r2, r3
 80087b8:	099b      	lsrs	r3, r3, #6
 80087ba:	653b      	str	r3, [r7, #80]	; 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	3380      	adds	r3, #128	; 0x80
 80087c0:	0a1b      	lsrs	r3, r3, #8
 80087c2:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80087c4:	697a      	ldr	r2, [r7, #20]
 80087c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087c8:	fb02 f303 	mul.w	r3, r2, r3
 80087cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80087d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087d4:	3380      	adds	r3, #128	; 0x80
 80087d6:	0a1b      	lsrs	r3, r3, #8
 80087d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	021b      	lsls	r3, r3, #8
 80087e0:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80087e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d002      	beq.n	80087f0 <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 80087ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80087ee:	e14a      	b.n	8008a86 <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 80087f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d109      	bne.n	800880a <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80087fc:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008804:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008808:	e13b      	b.n	8008a82 <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 800880a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800880e:	2b00      	cmp	r3, #0
 8008810:	d102      	bne.n	8008818 <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 8008812:	2301      	movs	r3, #1
 8008814:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8008818:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800881c:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800881e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008820:	041a      	lsls	r2, r3, #16
 8008822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008824:	fbb2 f3f3 	udiv	r3, r2, r3
 8008828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800882c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008830:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008834:	429a      	cmp	r2, r3
 8008836:	d903      	bls.n	8008840 <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008838:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800883c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8008840:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008844:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008848:	fb02 f303 	mul.w	r3, r2, r3
 800884c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8008850:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008854:	4613      	mov	r3, r2
 8008856:	005b      	lsls	r3, r3, #1
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4618      	mov	r0, r3
 800885e:	f7fe f8b5 	bl	80069cc <VL53L0X_isqrt>
 8008862:	4603      	mov	r3, r0
 8008864:	005b      	lsls	r3, r3, #1
 8008866:	64bb      	str	r3, [r7, #72]	; 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	891b      	ldrh	r3, [r3, #8]
 800886c:	461a      	mov	r2, r3
 800886e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008870:	fb02 f303 	mul.w	r3, r2, r3
 8008874:	647b      	str	r3, [r7, #68]	; 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008878:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800887a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800887e:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008880:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008882:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008886:	4a14      	ldr	r2, [pc, #80]	; (80088d8 <VL53L0X_calc_sigma_estimate+0x298>)
 8008888:	fba2 2303 	umull	r2, r3, r2, r3
 800888c:	099b      	lsrs	r3, r3, #6
 800888e:	643b      	str	r3, [r7, #64]	; 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8008890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008892:	041b      	lsls	r3, r3, #16
 8008894:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008898:	4a0f      	ldr	r2, [pc, #60]	; (80088d8 <VL53L0X_calc_sigma_estimate+0x298>)
 800889a:	fba2 2303 	umull	r2, r3, r2, r3
 800889e:	099b      	lsrs	r3, r3, #6
 80088a0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 80088a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a4:	021b      	lsls	r3, r3, #8
 80088a6:	643b      	str	r3, [r7, #64]	; 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80088a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	bfb8      	it	lt
 80088b4:	425b      	neglt	r3, r3
 80088b6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	021b      	lsls	r3, r3, #8
 80088bc:	63bb      	str	r3, [r7, #56]	; 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	7e1b      	ldrb	r3, [r3, #24]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00a      	beq.n	80088dc <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 80088c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80088ce:	e032      	b.n	8008936 <VL53L0X_calc_sigma_estimate+0x2f6>
 80088d0:	028f87ae 	.word	0x028f87ae
 80088d4:	0006999a 	.word	0x0006999a
 80088d8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 80088dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80088ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ec:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 80088f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088f4:	fb02 f303 	mul.w	r3, r2, r3
 80088f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80088fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008902:	4413      	add	r3, r2
 8008904:	0c1b      	lsrs	r3, r3, #16
 8008906:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800890a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800890e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008912:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 8008916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800891a:	085b      	lsrs	r3, r3, #1
 800891c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008924:	fb03 f303 	mul.w	r3, r3, r3
 8008928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800892c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008930:	0b9b      	lsrs	r3, r3, #14
 8008932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008936:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800893a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800893c:	fb02 f303 	mul.w	r3, r2, r3
 8008940:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008944:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008948:	0c1b      	lsrs	r3, r3, #16
 800894a:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800894c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800894e:	fb03 f303 	mul.w	r3, r3, r3
 8008952:	637b      	str	r3, [r7, #52]	; 0x34

		sqr2 = sigmaEstimateP2;
 8008954:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008958:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800895a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008960:	0c1b      	lsrs	r3, r3, #16
 8008962:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8008964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008966:	fb03 f303 	mul.w	r3, r3, r3
 800896a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800896c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	4413      	add	r3, r2
 8008972:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8008974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008976:	f7fe f829 	bl	80069cc <VL53L0X_isqrt>
 800897a:	62b8      	str	r0, [r7, #40]	; 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800897c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897e:	041b      	lsls	r3, r3, #16
 8008980:	62bb      	str	r3, [r7, #40]	; 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8008982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008984:	3332      	adds	r3, #50	; 0x32
 8008986:	4a42      	ldr	r2, [pc, #264]	; (8008a90 <VL53L0X_calc_sigma_estimate+0x450>)
 8008988:	fba2 2303 	umull	r2, r3, r2, r3
 800898c:	095a      	lsrs	r2, r3, #5
 800898e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008990:	fbb2 f3f3 	udiv	r3, r2, r3
 8008994:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8008998:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800899c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80089a0:	fb02 f303 	mul.w	r3, r2, r3
 80089a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 80089a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089ac:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80089b0:	3308      	adds	r3, #8
 80089b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 80089b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80089ba:	4a36      	ldr	r2, [pc, #216]	; (8008a94 <VL53L0X_calc_sigma_estimate+0x454>)
 80089bc:	fba2 2303 	umull	r2, r3, r2, r3
 80089c0:	0b5b      	lsrs	r3, r3, #13
 80089c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80089c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d903      	bls.n	80089da <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 80089d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80089d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 80089da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80089de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80089e8:	4a2b      	ldr	r2, [pc, #172]	; (8008a98 <VL53L0X_calc_sigma_estimate+0x458>)
 80089ea:	fba2 2303 	umull	r2, r3, r2, r3
 80089ee:	099b      	lsrs	r3, r3, #6
 80089f0:	627b      	str	r3, [r7, #36]	; 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80089f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089fa:	441a      	add	r2, r3
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fd ffe2 	bl	80069cc <VL53L0X_isqrt>
 8008a08:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	021b      	lsls	r3, r3, #8
 8008a0e:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8008a10:	6a3b      	ldr	r3, [r7, #32]
 8008a12:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008a16:	4a20      	ldr	r2, [pc, #128]	; (8008a98 <VL53L0X_calc_sigma_estimate+0x458>)
 8008a18:	fba2 2303 	umull	r2, r3, r2, r3
 8008a1c:	099b      	lsrs	r3, r3, #6
 8008a1e:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8008a20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008a24:	fb03 f303 	mul.w	r3, r3, r3
 8008a28:	637b      	str	r3, [r7, #52]	; 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	fb03 f303 	mul.w	r3, r3, r3
 8008a30:	633b      	str	r3, [r7, #48]	; 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8008a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	4413      	add	r3, r2
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fd ffc7 	bl	80069cc <VL53L0X_isqrt>
 8008a3e:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a46:	fb02 f303 	mul.w	r3, r2, r3
 8008a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8008a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d009      	beq.n	8008a68 <VL53L0X_calc_sigma_estimate+0x428>
 8008a54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d005      	beq.n	8008a68 <VL53L0X_calc_sigma_estimate+0x428>
 8008a5c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008a60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d903      	bls.n	8008a70 <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 8008a68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008a76:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a82:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	37c0      	adds	r7, #192	; 0xc0
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	51eb851f 	.word	0x51eb851f
 8008a94:	d1b71759 	.word	0xd1b71759
 8008a98:	10624dd3 	.word	0x10624dd3

08008a9c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b090      	sub	sp, #64	; 0x40
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	607a      	str	r2, [r7, #4]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	72fb      	strb	r3, [r7, #11]
 8008aac:	4613      	mov	r3, r2
 8008aae:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008aee:	7afb      	ldrb	r3, [r7, #11]
 8008af0:	10db      	asrs	r3, r3, #3
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	f003 030f 	and.w	r3, r3, #15
 8008af8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008afc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d017      	beq.n	8008b34 <VL53L0X_get_pal_range_status+0x98>
 8008b04:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008b08:	2b05      	cmp	r3, #5
 8008b0a:	d013      	beq.n	8008b34 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008b0c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008b10:	2b07      	cmp	r3, #7
 8008b12:	d00f      	beq.n	8008b34 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008b14:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008b18:	2b0c      	cmp	r3, #12
 8008b1a:	d00b      	beq.n	8008b34 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008b1c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008b20:	2b0d      	cmp	r3, #13
 8008b22:	d007      	beq.n	8008b34 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008b24:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008b28:	2b0e      	cmp	r3, #14
 8008b2a:	d003      	beq.n	8008b34 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008b2c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008b30:	2b0f      	cmp	r3, #15
 8008b32:	d103      	bne.n	8008b3c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008b34:	2301      	movs	r3, #1
 8008b36:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008b3a:	e002      	b.n	8008b42 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008b42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d109      	bne.n	8008b5e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008b4a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008b4e:	461a      	mov	r2, r3
 8008b50:	2100      	movs	r1, #0
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7fc f9b2 	bl	8004ebc <VL53L0X_GetLimitCheckEnable>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8008b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d03c      	beq.n	8008be0 <VL53L0X_get_pal_range_status+0x144>
 8008b66:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d138      	bne.n	8008be0 <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8008b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b72:	461a      	mov	r2, r3
 8008b74:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f7ff fd62 	bl	8008640 <VL53L0X_calc_sigma_estimate>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 8008b82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10a      	bne.n	8008ba0 <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 8008b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	f107 0210 	add.w	r2, r7, #16
 8008b92:	4619      	mov	r1, r3
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f7ff fca8 	bl	80084ea <VL53L0X_calc_dmax>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8008ba0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d103      	bne.n	8008bb0 <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bae:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008bb0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d113      	bne.n	8008be0 <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008bb8:	f107 0320 	add.w	r3, r7, #32
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	68f8      	ldr	r0, [r7, #12]
 8008bc2:	f7fc fa01 	bl	8004fc8 <VL53L0X_GetLimitCheckValue>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d006      	beq.n	8008be0 <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 8008bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d902      	bls.n	8008be0 <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008be0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d109      	bne.n	8008bfc <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008be8:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008bec:	461a      	mov	r2, r3
 8008bee:	2102      	movs	r1, #2
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f7fc f963 	bl	8004ebc <VL53L0X_GetLimitCheckEnable>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008bfc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d044      	beq.n	8008c8e <VL53L0X_get_pal_range_status+0x1f2>
 8008c04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d140      	bne.n	8008c8e <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008c0c:	f107 031c 	add.w	r3, r7, #28
 8008c10:	461a      	mov	r2, r3
 8008c12:	2102      	movs	r1, #2
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f7fc f9d7 	bl	8004fc8 <VL53L0X_GetLimitCheckValue>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008c20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d107      	bne.n	8008c38 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008c28:	2201      	movs	r2, #1
 8008c2a:	21ff      	movs	r1, #255	; 0xff
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f000 f9b5 	bl	8008f9c <VL53L0X_WrByte>
 8008c32:	4603      	mov	r3, r0
 8008c34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008c38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d109      	bne.n	8008c54 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 8008c40:	f107 0316 	add.w	r3, r7, #22
 8008c44:	461a      	mov	r2, r3
 8008c46:	21b6      	movs	r1, #182	; 0xb6
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 fa53 	bl	80090f4 <VL53L0X_RdWord>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8008c54:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d107      	bne.n	8008c6c <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	21ff      	movs	r1, #255	; 0xff
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f000 f99b 	bl	8008f9c <VL53L0X_WrByte>
 8008c66:	4603      	mov	r3, r0
 8008c68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008c6c:	8afb      	ldrh	r3, [r7, #22]
 8008c6e:	025b      	lsls	r3, r3, #9
 8008c70:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c76:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d006      	beq.n	8008c8e <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008c80:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d902      	bls.n	8008c8e <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008c8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d109      	bne.n	8008caa <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008c96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	2103      	movs	r1, #3
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f7fc f90c 	bl	8004ebc <VL53L0X_GetLimitCheckEnable>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008caa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d023      	beq.n	8008cfa <VL53L0X_get_pal_range_status+0x25e>
 8008cb2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d11f      	bne.n	8008cfa <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008cba:	893b      	ldrh	r3, [r7, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d102      	bne.n	8008cc6 <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc4:	e005      	b.n	8008cd2 <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	021a      	lsls	r2, r3, #8
 8008cca:	893b      	ldrh	r3, [r7, #8]
 8008ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd0:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008cd2:	f107 0318 	add.w	r3, r7, #24
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	2103      	movs	r1, #3
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f7fc f974 	bl	8004fc8 <VL53L0X_GetLimitCheckValue>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d006      	beq.n	8008cfa <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008cec:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d202      	bcs.n	8008cfa <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008cfa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d14a      	bne.n	8008d98 <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 8008d02:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d103      	bne.n	8008d12 <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 8008d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d0c:	22ff      	movs	r2, #255	; 0xff
 8008d0e:	701a      	strb	r2, [r3, #0]
 8008d10:	e042      	b.n	8008d98 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008d12:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d007      	beq.n	8008d2a <VL53L0X_get_pal_range_status+0x28e>
 8008d1a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008d1e:	2b02      	cmp	r3, #2
 8008d20:	d003      	beq.n	8008d2a <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 8008d22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008d26:	2b03      	cmp	r3, #3
 8008d28:	d103      	bne.n	8008d32 <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8008d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d2c:	2205      	movs	r2, #5
 8008d2e:	701a      	strb	r2, [r3, #0]
 8008d30:	e032      	b.n	8008d98 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 8008d32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008d36:	2b06      	cmp	r3, #6
 8008d38:	d003      	beq.n	8008d42 <VL53L0X_get_pal_range_status+0x2a6>
 8008d3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008d3e:	2b09      	cmp	r3, #9
 8008d40:	d103      	bne.n	8008d4a <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8008d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d44:	2204      	movs	r2, #4
 8008d46:	701a      	strb	r2, [r3, #0]
 8008d48:	e026      	b.n	8008d98 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 8008d4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008d4e:	2b08      	cmp	r3, #8
 8008d50:	d007      	beq.n	8008d62 <VL53L0X_get_pal_range_status+0x2c6>
 8008d52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008d56:	2b0a      	cmp	r3, #10
 8008d58:	d003      	beq.n	8008d62 <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 8008d5a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d103      	bne.n	8008d6a <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8008d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d64:	2203      	movs	r2, #3
 8008d66:	701a      	strb	r2, [r3, #0]
 8008d68:	e016      	b.n	8008d98 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 8008d6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d003      	beq.n	8008d7a <VL53L0X_get_pal_range_status+0x2de>
 8008d72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d103      	bne.n	8008d82 <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8008d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	701a      	strb	r2, [r3, #0]
 8008d80:	e00a      	b.n	8008d98 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 8008d82:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d103      	bne.n	8008d92 <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8008d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	701a      	strb	r2, [r3, #0]
 8008d90:	e002      	b.n	8008d98 <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8008d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d94:	2200      	movs	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008d98:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	2101      	movs	r1, #1
 8008da0:	68f8      	ldr	r0, [r7, #12]
 8008da2:	f7fc f88b 	bl	8004ebc <VL53L0X_GetLimitCheckEnable>
 8008da6:	4603      	mov	r3, r0
 8008da8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8008dac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d14f      	bne.n	8008e54 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8008db4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <VL53L0X_get_pal_range_status+0x328>
 8008dbc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d103      	bne.n	8008dcc <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dca:	e002      	b.n	8008dd2 <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008dd8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008ddc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	d003      	beq.n	8008dec <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008de4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d103      	bne.n	8008df4 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 8008dec:	2301      	movs	r3, #1
 8008dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008df2:	e002      	b.n	8008dfa <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008e00:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008e04:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d003      	beq.n	8008e14 <VL53L0X_get_pal_range_status+0x378>
 8008e0c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d103      	bne.n	8008e1c <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008e14:	2301      	movs	r3, #1
 8008e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e1a:	e002      	b.n	8008e22 <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008e28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8008e2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <VL53L0X_get_pal_range_status+0x3a0>
 8008e34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d103      	bne.n	8008e44 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e42:	e002      	b.n	8008e4a <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008e50:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008e54:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3740      	adds	r7, #64	; 0x40
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b088      	sub	sp, #32
 8008e64:	af02      	add	r7, sp, #8
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	330a      	adds	r3, #10
 8008e70:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8008e7e:	b299      	uxth	r1, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	f7f9 fa42 	bl	8002314 <HAL_I2C_Master_Transmit>
 8008e90:	4603      	mov	r3, r0
 8008e92:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008e94:	693b      	ldr	r3, [r7, #16]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b088      	sub	sp, #32
 8008ea2:	af02      	add	r7, sp, #8
 8008ea4:	60f8      	str	r0, [r7, #12]
 8008ea6:	60b9      	str	r1, [r7, #8]
 8008ea8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	330a      	adds	r3, #10
 8008eae:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8008ebc:	f043 0301 	orr.w	r3, r3, #1
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	b299      	uxth	r1, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	4613      	mov	r3, r2
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	f7f9 fb1e 	bl	8002510 <HAL_I2C_Master_Receive>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008ed8:	693b      	ldr	r3, [r7, #16]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	607a      	str	r2, [r7, #4]
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b3f      	cmp	r3, #63	; 0x3f
 8008efc:	d902      	bls.n	8008f04 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8008efe:	f06f 0303 	mvn.w	r3, #3
 8008f02:	e016      	b.n	8008f32 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8008f04:	4a0d      	ldr	r2, [pc, #52]	; (8008f3c <VL53L0X_WriteMulti+0x58>)
 8008f06:	7afb      	ldrb	r3, [r7, #11]
 8008f08:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8008f0a:	683a      	ldr	r2, [r7, #0]
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	480c      	ldr	r0, [pc, #48]	; (8008f40 <VL53L0X_WriteMulti+0x5c>)
 8008f10:	f000 fbd8 	bl	80096c4 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	3301      	adds	r3, #1
 8008f18:	461a      	mov	r2, r3
 8008f1a:	4908      	ldr	r1, [pc, #32]	; (8008f3c <VL53L0X_WriteMulti+0x58>)
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f7ff ff9f 	bl	8008e60 <_I2CWrite>
 8008f22:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008f2a:	23ec      	movs	r3, #236	; 0xec
 8008f2c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008f2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	200004c8 	.word	0x200004c8
 8008f40:	200004c9 	.word	0x200004c9

08008f44 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	607a      	str	r2, [r7, #4]
 8008f4e:	603b      	str	r3, [r7, #0]
 8008f50:	460b      	mov	r3, r1
 8008f52:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f54:	2300      	movs	r3, #0
 8008f56:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008f58:	f107 030b 	add.w	r3, r7, #11
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	4619      	mov	r1, r3
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f7ff ff7d 	bl	8008e60 <_I2CWrite>
 8008f66:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d002      	beq.n	8008f74 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008f6e:	23ec      	movs	r3, #236	; 0xec
 8008f70:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008f72:	e00c      	b.n	8008f8e <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	6879      	ldr	r1, [r7, #4]
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f7ff ff90 	bl	8008e9e <_I2CRead>
 8008f7e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d002      	beq.n	8008f8c <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008f86:	23ec      	movs	r3, #236	; 0xec
 8008f88:	75fb      	strb	r3, [r7, #23]
 8008f8a:	e000      	b.n	8008f8e <VL53L0X_ReadMulti+0x4a>
    }
done:
 8008f8c:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <VL53L0X_WrByte>:
    return Status;
}



VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	460b      	mov	r3, r1
 8008fa6:	70fb      	strb	r3, [r7, #3]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fac:	2300      	movs	r3, #0
 8008fae:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008fb0:	4a0b      	ldr	r2, [pc, #44]	; (8008fe0 <VL53L0X_WrByte+0x44>)
 8008fb2:	78fb      	ldrb	r3, [r7, #3]
 8008fb4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8008fb6:	4a0a      	ldr	r2, [pc, #40]	; (8008fe0 <VL53L0X_WrByte+0x44>)
 8008fb8:	78bb      	ldrb	r3, [r7, #2]
 8008fba:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	4908      	ldr	r1, [pc, #32]	; (8008fe0 <VL53L0X_WrByte+0x44>)
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7ff ff4d 	bl	8008e60 <_I2CWrite>
 8008fc6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008fce:	23ec      	movs	r3, #236	; 0xec
 8008fd0:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	200004c8 	.word	0x200004c8

08008fe4 <VL53L0X_WrWord>:

    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	70fb      	strb	r3, [r7, #3]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008ff8:	4a0e      	ldr	r2, [pc, #56]	; (8009034 <VL53L0X_WrWord+0x50>)
 8008ffa:	78fb      	ldrb	r3, [r7, #3]
 8008ffc:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8008ffe:	883b      	ldrh	r3, [r7, #0]
 8009000:	0a1b      	lsrs	r3, r3, #8
 8009002:	b29b      	uxth	r3, r3
 8009004:	b2da      	uxtb	r2, r3
 8009006:	4b0b      	ldr	r3, [pc, #44]	; (8009034 <VL53L0X_WrWord+0x50>)
 8009008:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800900a:	883b      	ldrh	r3, [r7, #0]
 800900c:	b2da      	uxtb	r2, r3
 800900e:	4b09      	ldr	r3, [pc, #36]	; (8009034 <VL53L0X_WrWord+0x50>)
 8009010:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8009012:	2203      	movs	r2, #3
 8009014:	4907      	ldr	r1, [pc, #28]	; (8009034 <VL53L0X_WrWord+0x50>)
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7ff ff22 	bl	8008e60 <_I2CWrite>
 800901c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d001      	beq.n	8009028 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009024:	23ec      	movs	r3, #236	; 0xec
 8009026:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8009028:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	200004c8 	.word	0x200004c8

08009038 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	4608      	mov	r0, r1
 8009042:	4611      	mov	r1, r2
 8009044:	461a      	mov	r2, r3
 8009046:	4603      	mov	r3, r0
 8009048:	70fb      	strb	r3, [r7, #3]
 800904a:	460b      	mov	r3, r1
 800904c:	70bb      	strb	r3, [r7, #2]
 800904e:	4613      	mov	r3, r2
 8009050:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8009056:	f107 020e 	add.w	r2, r7, #14
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f81e 	bl	80090a0 <VL53L0X_RdByte>
 8009064:	4603      	mov	r3, r0
 8009066:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8009068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d110      	bne.n	8009092 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8009070:	7bba      	ldrb	r2, [r7, #14]
 8009072:	78bb      	ldrb	r3, [r7, #2]
 8009074:	4013      	ands	r3, r2
 8009076:	b2da      	uxtb	r2, r3
 8009078:	787b      	ldrb	r3, [r7, #1]
 800907a:	4313      	orrs	r3, r2
 800907c:	b2db      	uxtb	r3, r3
 800907e:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8009080:	7bba      	ldrb	r2, [r7, #14]
 8009082:	78fb      	ldrb	r3, [r7, #3]
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7ff ff88 	bl	8008f9c <VL53L0X_WrByte>
 800908c:	4603      	mov	r3, r0
 800908e:	73fb      	strb	r3, [r7, #15]
 8009090:	e000      	b.n	8009094 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8009092:	bf00      	nop
done:
    return Status;
 8009094:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b086      	sub	sp, #24
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	460b      	mov	r3, r1
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090ae:	2300      	movs	r3, #0
 80090b0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80090b2:	f107 030b 	add.w	r3, r7, #11
 80090b6:	2201      	movs	r2, #1
 80090b8:	4619      	mov	r1, r3
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f7ff fed0 	bl	8008e60 <_I2CWrite>
 80090c0:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d002      	beq.n	80090ce <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80090c8:	23ec      	movs	r3, #236	; 0xec
 80090ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 80090cc:	e00c      	b.n	80090e8 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 80090ce:	2201      	movs	r2, #1
 80090d0:	6879      	ldr	r1, [r7, #4]
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f7ff fee3 	bl	8008e9e <_I2CRead>
 80090d8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80090e0:	23ec      	movs	r3, #236	; 0xec
 80090e2:	75fb      	strb	r3, [r7, #23]
 80090e4:	e000      	b.n	80090e8 <VL53L0X_RdByte+0x48>
    }
done:
 80090e6:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80090e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3718      	adds	r7, #24
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <VL53L0X_RdWord>:

    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	60f8      	str	r0, [r7, #12]
 80090fc:	460b      	mov	r3, r1
 80090fe:	607a      	str	r2, [r7, #4]
 8009100:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009102:	2300      	movs	r3, #0
 8009104:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009106:	f107 030b 	add.w	r3, r7, #11
 800910a:	2201      	movs	r2, #1
 800910c:	4619      	mov	r1, r3
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f7ff fea6 	bl	8008e60 <_I2CWrite>
 8009114:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d002      	beq.n	8009122 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800911c:	23ec      	movs	r3, #236	; 0xec
 800911e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009120:	e017      	b.n	8009152 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8009122:	2202      	movs	r2, #2
 8009124:	490e      	ldr	r1, [pc, #56]	; (8009160 <VL53L0X_RdWord+0x6c>)
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f7ff feb9 	bl	8008e9e <_I2CRead>
 800912c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d002      	beq.n	800913a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8009134:	23ec      	movs	r3, #236	; 0xec
 8009136:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009138:	e00b      	b.n	8009152 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800913a:	4b09      	ldr	r3, [pc, #36]	; (8009160 <VL53L0X_RdWord+0x6c>)
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	b29b      	uxth	r3, r3
 8009140:	021b      	lsls	r3, r3, #8
 8009142:	b29a      	uxth	r2, r3
 8009144:	4b06      	ldr	r3, [pc, #24]	; (8009160 <VL53L0X_RdWord+0x6c>)
 8009146:	785b      	ldrb	r3, [r3, #1]
 8009148:	b29b      	uxth	r3, r3
 800914a:	4413      	add	r3, r2
 800914c:	b29a      	uxth	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8009152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3718      	adds	r7, #24
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	200004c8 	.word	0x200004c8

08009164 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	460b      	mov	r3, r1
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009172:	2300      	movs	r3, #0
 8009174:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8009176:	f107 030b 	add.w	r3, r7, #11
 800917a:	2201      	movs	r2, #1
 800917c:	4619      	mov	r1, r3
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f7ff fe6e 	bl	8008e60 <_I2CWrite>
 8009184:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d002      	beq.n	8009192 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800918c:	23ec      	movs	r3, #236	; 0xec
 800918e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8009190:	e01b      	b.n	80091ca <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8009192:	2204      	movs	r2, #4
 8009194:	4910      	ldr	r1, [pc, #64]	; (80091d8 <VL53L0X_RdDWord+0x74>)
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7ff fe81 	bl	8008e9e <_I2CRead>
 800919c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80091a4:	23ec      	movs	r3, #236	; 0xec
 80091a6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80091a8:	e00f      	b.n	80091ca <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80091aa:	4b0b      	ldr	r3, [pc, #44]	; (80091d8 <VL53L0X_RdDWord+0x74>)
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	061a      	lsls	r2, r3, #24
 80091b0:	4b09      	ldr	r3, [pc, #36]	; (80091d8 <VL53L0X_RdDWord+0x74>)
 80091b2:	785b      	ldrb	r3, [r3, #1]
 80091b4:	041b      	lsls	r3, r3, #16
 80091b6:	441a      	add	r2, r3
 80091b8:	4b07      	ldr	r3, [pc, #28]	; (80091d8 <VL53L0X_RdDWord+0x74>)
 80091ba:	789b      	ldrb	r3, [r3, #2]
 80091bc:	021b      	lsls	r3, r3, #8
 80091be:	4413      	add	r3, r2
 80091c0:	4a05      	ldr	r2, [pc, #20]	; (80091d8 <VL53L0X_RdDWord+0x74>)
 80091c2:	78d2      	ldrb	r2, [r2, #3]
 80091c4:	441a      	add	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 80091ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3718      	adds	r7, #24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	200004c8 	.word	0x200004c8

080091dc <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80091e8:	2002      	movs	r0, #2
 80091ea:	f7f8 fc97 	bl	8001b1c <HAL_Delay>
    return status;
 80091ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <__errno>:
 80091fc:	4b01      	ldr	r3, [pc, #4]	; (8009204 <__errno+0x8>)
 80091fe:	6818      	ldr	r0, [r3, #0]
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	200002cc 	.word	0x200002cc

08009208 <__sflush_r>:
 8009208:	898a      	ldrh	r2, [r1, #12]
 800920a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800920e:	4605      	mov	r5, r0
 8009210:	0710      	lsls	r0, r2, #28
 8009212:	460c      	mov	r4, r1
 8009214:	d458      	bmi.n	80092c8 <__sflush_r+0xc0>
 8009216:	684b      	ldr	r3, [r1, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	dc05      	bgt.n	8009228 <__sflush_r+0x20>
 800921c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800921e:	2b00      	cmp	r3, #0
 8009220:	dc02      	bgt.n	8009228 <__sflush_r+0x20>
 8009222:	2000      	movs	r0, #0
 8009224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800922a:	2e00      	cmp	r6, #0
 800922c:	d0f9      	beq.n	8009222 <__sflush_r+0x1a>
 800922e:	2300      	movs	r3, #0
 8009230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009234:	682f      	ldr	r7, [r5, #0]
 8009236:	602b      	str	r3, [r5, #0]
 8009238:	d032      	beq.n	80092a0 <__sflush_r+0x98>
 800923a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800923c:	89a3      	ldrh	r3, [r4, #12]
 800923e:	075a      	lsls	r2, r3, #29
 8009240:	d505      	bpl.n	800924e <__sflush_r+0x46>
 8009242:	6863      	ldr	r3, [r4, #4]
 8009244:	1ac0      	subs	r0, r0, r3
 8009246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009248:	b10b      	cbz	r3, 800924e <__sflush_r+0x46>
 800924a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800924c:	1ac0      	subs	r0, r0, r3
 800924e:	2300      	movs	r3, #0
 8009250:	4602      	mov	r2, r0
 8009252:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009254:	6a21      	ldr	r1, [r4, #32]
 8009256:	4628      	mov	r0, r5
 8009258:	47b0      	blx	r6
 800925a:	1c43      	adds	r3, r0, #1
 800925c:	89a3      	ldrh	r3, [r4, #12]
 800925e:	d106      	bne.n	800926e <__sflush_r+0x66>
 8009260:	6829      	ldr	r1, [r5, #0]
 8009262:	291d      	cmp	r1, #29
 8009264:	d82c      	bhi.n	80092c0 <__sflush_r+0xb8>
 8009266:	4a2a      	ldr	r2, [pc, #168]	; (8009310 <__sflush_r+0x108>)
 8009268:	40ca      	lsrs	r2, r1
 800926a:	07d6      	lsls	r6, r2, #31
 800926c:	d528      	bpl.n	80092c0 <__sflush_r+0xb8>
 800926e:	2200      	movs	r2, #0
 8009270:	6062      	str	r2, [r4, #4]
 8009272:	04d9      	lsls	r1, r3, #19
 8009274:	6922      	ldr	r2, [r4, #16]
 8009276:	6022      	str	r2, [r4, #0]
 8009278:	d504      	bpl.n	8009284 <__sflush_r+0x7c>
 800927a:	1c42      	adds	r2, r0, #1
 800927c:	d101      	bne.n	8009282 <__sflush_r+0x7a>
 800927e:	682b      	ldr	r3, [r5, #0]
 8009280:	b903      	cbnz	r3, 8009284 <__sflush_r+0x7c>
 8009282:	6560      	str	r0, [r4, #84]	; 0x54
 8009284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009286:	602f      	str	r7, [r5, #0]
 8009288:	2900      	cmp	r1, #0
 800928a:	d0ca      	beq.n	8009222 <__sflush_r+0x1a>
 800928c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009290:	4299      	cmp	r1, r3
 8009292:	d002      	beq.n	800929a <__sflush_r+0x92>
 8009294:	4628      	mov	r0, r5
 8009296:	f000 fa2b 	bl	80096f0 <_free_r>
 800929a:	2000      	movs	r0, #0
 800929c:	6360      	str	r0, [r4, #52]	; 0x34
 800929e:	e7c1      	b.n	8009224 <__sflush_r+0x1c>
 80092a0:	6a21      	ldr	r1, [r4, #32]
 80092a2:	2301      	movs	r3, #1
 80092a4:	4628      	mov	r0, r5
 80092a6:	47b0      	blx	r6
 80092a8:	1c41      	adds	r1, r0, #1
 80092aa:	d1c7      	bne.n	800923c <__sflush_r+0x34>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d0c4      	beq.n	800923c <__sflush_r+0x34>
 80092b2:	2b1d      	cmp	r3, #29
 80092b4:	d001      	beq.n	80092ba <__sflush_r+0xb2>
 80092b6:	2b16      	cmp	r3, #22
 80092b8:	d101      	bne.n	80092be <__sflush_r+0xb6>
 80092ba:	602f      	str	r7, [r5, #0]
 80092bc:	e7b1      	b.n	8009222 <__sflush_r+0x1a>
 80092be:	89a3      	ldrh	r3, [r4, #12]
 80092c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092c4:	81a3      	strh	r3, [r4, #12]
 80092c6:	e7ad      	b.n	8009224 <__sflush_r+0x1c>
 80092c8:	690f      	ldr	r7, [r1, #16]
 80092ca:	2f00      	cmp	r7, #0
 80092cc:	d0a9      	beq.n	8009222 <__sflush_r+0x1a>
 80092ce:	0793      	lsls	r3, r2, #30
 80092d0:	680e      	ldr	r6, [r1, #0]
 80092d2:	bf08      	it	eq
 80092d4:	694b      	ldreq	r3, [r1, #20]
 80092d6:	600f      	str	r7, [r1, #0]
 80092d8:	bf18      	it	ne
 80092da:	2300      	movne	r3, #0
 80092dc:	eba6 0807 	sub.w	r8, r6, r7
 80092e0:	608b      	str	r3, [r1, #8]
 80092e2:	f1b8 0f00 	cmp.w	r8, #0
 80092e6:	dd9c      	ble.n	8009222 <__sflush_r+0x1a>
 80092e8:	6a21      	ldr	r1, [r4, #32]
 80092ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092ec:	4643      	mov	r3, r8
 80092ee:	463a      	mov	r2, r7
 80092f0:	4628      	mov	r0, r5
 80092f2:	47b0      	blx	r6
 80092f4:	2800      	cmp	r0, #0
 80092f6:	dc06      	bgt.n	8009306 <__sflush_r+0xfe>
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092fe:	81a3      	strh	r3, [r4, #12]
 8009300:	f04f 30ff 	mov.w	r0, #4294967295
 8009304:	e78e      	b.n	8009224 <__sflush_r+0x1c>
 8009306:	4407      	add	r7, r0
 8009308:	eba8 0800 	sub.w	r8, r8, r0
 800930c:	e7e9      	b.n	80092e2 <__sflush_r+0xda>
 800930e:	bf00      	nop
 8009310:	20400001 	.word	0x20400001

08009314 <_fflush_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	690b      	ldr	r3, [r1, #16]
 8009318:	4605      	mov	r5, r0
 800931a:	460c      	mov	r4, r1
 800931c:	b913      	cbnz	r3, 8009324 <_fflush_r+0x10>
 800931e:	2500      	movs	r5, #0
 8009320:	4628      	mov	r0, r5
 8009322:	bd38      	pop	{r3, r4, r5, pc}
 8009324:	b118      	cbz	r0, 800932e <_fflush_r+0x1a>
 8009326:	6983      	ldr	r3, [r0, #24]
 8009328:	b90b      	cbnz	r3, 800932e <_fflush_r+0x1a>
 800932a:	f000 f887 	bl	800943c <__sinit>
 800932e:	4b14      	ldr	r3, [pc, #80]	; (8009380 <_fflush_r+0x6c>)
 8009330:	429c      	cmp	r4, r3
 8009332:	d11b      	bne.n	800936c <_fflush_r+0x58>
 8009334:	686c      	ldr	r4, [r5, #4]
 8009336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d0ef      	beq.n	800931e <_fflush_r+0xa>
 800933e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009340:	07d0      	lsls	r0, r2, #31
 8009342:	d404      	bmi.n	800934e <_fflush_r+0x3a>
 8009344:	0599      	lsls	r1, r3, #22
 8009346:	d402      	bmi.n	800934e <_fflush_r+0x3a>
 8009348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800934a:	f000 f94c 	bl	80095e6 <__retarget_lock_acquire_recursive>
 800934e:	4628      	mov	r0, r5
 8009350:	4621      	mov	r1, r4
 8009352:	f7ff ff59 	bl	8009208 <__sflush_r>
 8009356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009358:	07da      	lsls	r2, r3, #31
 800935a:	4605      	mov	r5, r0
 800935c:	d4e0      	bmi.n	8009320 <_fflush_r+0xc>
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	059b      	lsls	r3, r3, #22
 8009362:	d4dd      	bmi.n	8009320 <_fflush_r+0xc>
 8009364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009366:	f000 f93f 	bl	80095e8 <__retarget_lock_release_recursive>
 800936a:	e7d9      	b.n	8009320 <_fflush_r+0xc>
 800936c:	4b05      	ldr	r3, [pc, #20]	; (8009384 <_fflush_r+0x70>)
 800936e:	429c      	cmp	r4, r3
 8009370:	d101      	bne.n	8009376 <_fflush_r+0x62>
 8009372:	68ac      	ldr	r4, [r5, #8]
 8009374:	e7df      	b.n	8009336 <_fflush_r+0x22>
 8009376:	4b04      	ldr	r3, [pc, #16]	; (8009388 <_fflush_r+0x74>)
 8009378:	429c      	cmp	r4, r3
 800937a:	bf08      	it	eq
 800937c:	68ec      	ldreq	r4, [r5, #12]
 800937e:	e7da      	b.n	8009336 <_fflush_r+0x22>
 8009380:	0800bcc8 	.word	0x0800bcc8
 8009384:	0800bce8 	.word	0x0800bce8
 8009388:	0800bca8 	.word	0x0800bca8

0800938c <std>:
 800938c:	2300      	movs	r3, #0
 800938e:	b510      	push	{r4, lr}
 8009390:	4604      	mov	r4, r0
 8009392:	e9c0 3300 	strd	r3, r3, [r0]
 8009396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800939a:	6083      	str	r3, [r0, #8]
 800939c:	8181      	strh	r1, [r0, #12]
 800939e:	6643      	str	r3, [r0, #100]	; 0x64
 80093a0:	81c2      	strh	r2, [r0, #14]
 80093a2:	6183      	str	r3, [r0, #24]
 80093a4:	4619      	mov	r1, r3
 80093a6:	2208      	movs	r2, #8
 80093a8:	305c      	adds	r0, #92	; 0x5c
 80093aa:	f000 f999 	bl	80096e0 <memset>
 80093ae:	4b05      	ldr	r3, [pc, #20]	; (80093c4 <std+0x38>)
 80093b0:	6263      	str	r3, [r4, #36]	; 0x24
 80093b2:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <std+0x3c>)
 80093b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80093b6:	4b05      	ldr	r3, [pc, #20]	; (80093cc <std+0x40>)
 80093b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093ba:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <std+0x44>)
 80093bc:	6224      	str	r4, [r4, #32]
 80093be:	6323      	str	r3, [r4, #48]	; 0x30
 80093c0:	bd10      	pop	{r4, pc}
 80093c2:	bf00      	nop
 80093c4:	0800a41d 	.word	0x0800a41d
 80093c8:	0800a43f 	.word	0x0800a43f
 80093cc:	0800a477 	.word	0x0800a477
 80093d0:	0800a49b 	.word	0x0800a49b

080093d4 <_cleanup_r>:
 80093d4:	4901      	ldr	r1, [pc, #4]	; (80093dc <_cleanup_r+0x8>)
 80093d6:	f000 b8c1 	b.w	800955c <_fwalk_reent>
 80093da:	bf00      	nop
 80093dc:	08009315 	.word	0x08009315

080093e0 <__sfmoreglue>:
 80093e0:	b570      	push	{r4, r5, r6, lr}
 80093e2:	1e4a      	subs	r2, r1, #1
 80093e4:	2568      	movs	r5, #104	; 0x68
 80093e6:	4355      	muls	r5, r2
 80093e8:	460e      	mov	r6, r1
 80093ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093ee:	f000 f9cf 	bl	8009790 <_malloc_r>
 80093f2:	4604      	mov	r4, r0
 80093f4:	b140      	cbz	r0, 8009408 <__sfmoreglue+0x28>
 80093f6:	2100      	movs	r1, #0
 80093f8:	e9c0 1600 	strd	r1, r6, [r0]
 80093fc:	300c      	adds	r0, #12
 80093fe:	60a0      	str	r0, [r4, #8]
 8009400:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009404:	f000 f96c 	bl	80096e0 <memset>
 8009408:	4620      	mov	r0, r4
 800940a:	bd70      	pop	{r4, r5, r6, pc}

0800940c <__sfp_lock_acquire>:
 800940c:	4801      	ldr	r0, [pc, #4]	; (8009414 <__sfp_lock_acquire+0x8>)
 800940e:	f000 b8ea 	b.w	80095e6 <__retarget_lock_acquire_recursive>
 8009412:	bf00      	nop
 8009414:	200008d0 	.word	0x200008d0

08009418 <__sfp_lock_release>:
 8009418:	4801      	ldr	r0, [pc, #4]	; (8009420 <__sfp_lock_release+0x8>)
 800941a:	f000 b8e5 	b.w	80095e8 <__retarget_lock_release_recursive>
 800941e:	bf00      	nop
 8009420:	200008d0 	.word	0x200008d0

08009424 <__sinit_lock_acquire>:
 8009424:	4801      	ldr	r0, [pc, #4]	; (800942c <__sinit_lock_acquire+0x8>)
 8009426:	f000 b8de 	b.w	80095e6 <__retarget_lock_acquire_recursive>
 800942a:	bf00      	nop
 800942c:	200008cb 	.word	0x200008cb

08009430 <__sinit_lock_release>:
 8009430:	4801      	ldr	r0, [pc, #4]	; (8009438 <__sinit_lock_release+0x8>)
 8009432:	f000 b8d9 	b.w	80095e8 <__retarget_lock_release_recursive>
 8009436:	bf00      	nop
 8009438:	200008cb 	.word	0x200008cb

0800943c <__sinit>:
 800943c:	b510      	push	{r4, lr}
 800943e:	4604      	mov	r4, r0
 8009440:	f7ff fff0 	bl	8009424 <__sinit_lock_acquire>
 8009444:	69a3      	ldr	r3, [r4, #24]
 8009446:	b11b      	cbz	r3, 8009450 <__sinit+0x14>
 8009448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800944c:	f7ff bff0 	b.w	8009430 <__sinit_lock_release>
 8009450:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009454:	6523      	str	r3, [r4, #80]	; 0x50
 8009456:	4b13      	ldr	r3, [pc, #76]	; (80094a4 <__sinit+0x68>)
 8009458:	4a13      	ldr	r2, [pc, #76]	; (80094a8 <__sinit+0x6c>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	62a2      	str	r2, [r4, #40]	; 0x28
 800945e:	42a3      	cmp	r3, r4
 8009460:	bf04      	itt	eq
 8009462:	2301      	moveq	r3, #1
 8009464:	61a3      	streq	r3, [r4, #24]
 8009466:	4620      	mov	r0, r4
 8009468:	f000 f820 	bl	80094ac <__sfp>
 800946c:	6060      	str	r0, [r4, #4]
 800946e:	4620      	mov	r0, r4
 8009470:	f000 f81c 	bl	80094ac <__sfp>
 8009474:	60a0      	str	r0, [r4, #8]
 8009476:	4620      	mov	r0, r4
 8009478:	f000 f818 	bl	80094ac <__sfp>
 800947c:	2200      	movs	r2, #0
 800947e:	60e0      	str	r0, [r4, #12]
 8009480:	2104      	movs	r1, #4
 8009482:	6860      	ldr	r0, [r4, #4]
 8009484:	f7ff ff82 	bl	800938c <std>
 8009488:	68a0      	ldr	r0, [r4, #8]
 800948a:	2201      	movs	r2, #1
 800948c:	2109      	movs	r1, #9
 800948e:	f7ff ff7d 	bl	800938c <std>
 8009492:	68e0      	ldr	r0, [r4, #12]
 8009494:	2202      	movs	r2, #2
 8009496:	2112      	movs	r1, #18
 8009498:	f7ff ff78 	bl	800938c <std>
 800949c:	2301      	movs	r3, #1
 800949e:	61a3      	str	r3, [r4, #24]
 80094a0:	e7d2      	b.n	8009448 <__sinit+0xc>
 80094a2:	bf00      	nop
 80094a4:	0800bd08 	.word	0x0800bd08
 80094a8:	080093d5 	.word	0x080093d5

080094ac <__sfp>:
 80094ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ae:	4607      	mov	r7, r0
 80094b0:	f7ff ffac 	bl	800940c <__sfp_lock_acquire>
 80094b4:	4b1e      	ldr	r3, [pc, #120]	; (8009530 <__sfp+0x84>)
 80094b6:	681e      	ldr	r6, [r3, #0]
 80094b8:	69b3      	ldr	r3, [r6, #24]
 80094ba:	b913      	cbnz	r3, 80094c2 <__sfp+0x16>
 80094bc:	4630      	mov	r0, r6
 80094be:	f7ff ffbd 	bl	800943c <__sinit>
 80094c2:	3648      	adds	r6, #72	; 0x48
 80094c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094c8:	3b01      	subs	r3, #1
 80094ca:	d503      	bpl.n	80094d4 <__sfp+0x28>
 80094cc:	6833      	ldr	r3, [r6, #0]
 80094ce:	b30b      	cbz	r3, 8009514 <__sfp+0x68>
 80094d0:	6836      	ldr	r6, [r6, #0]
 80094d2:	e7f7      	b.n	80094c4 <__sfp+0x18>
 80094d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094d8:	b9d5      	cbnz	r5, 8009510 <__sfp+0x64>
 80094da:	4b16      	ldr	r3, [pc, #88]	; (8009534 <__sfp+0x88>)
 80094dc:	60e3      	str	r3, [r4, #12]
 80094de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094e2:	6665      	str	r5, [r4, #100]	; 0x64
 80094e4:	f000 f87e 	bl	80095e4 <__retarget_lock_init_recursive>
 80094e8:	f7ff ff96 	bl	8009418 <__sfp_lock_release>
 80094ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094f4:	6025      	str	r5, [r4, #0]
 80094f6:	61a5      	str	r5, [r4, #24]
 80094f8:	2208      	movs	r2, #8
 80094fa:	4629      	mov	r1, r5
 80094fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009500:	f000 f8ee 	bl	80096e0 <memset>
 8009504:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009508:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800950c:	4620      	mov	r0, r4
 800950e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009510:	3468      	adds	r4, #104	; 0x68
 8009512:	e7d9      	b.n	80094c8 <__sfp+0x1c>
 8009514:	2104      	movs	r1, #4
 8009516:	4638      	mov	r0, r7
 8009518:	f7ff ff62 	bl	80093e0 <__sfmoreglue>
 800951c:	4604      	mov	r4, r0
 800951e:	6030      	str	r0, [r6, #0]
 8009520:	2800      	cmp	r0, #0
 8009522:	d1d5      	bne.n	80094d0 <__sfp+0x24>
 8009524:	f7ff ff78 	bl	8009418 <__sfp_lock_release>
 8009528:	230c      	movs	r3, #12
 800952a:	603b      	str	r3, [r7, #0]
 800952c:	e7ee      	b.n	800950c <__sfp+0x60>
 800952e:	bf00      	nop
 8009530:	0800bd08 	.word	0x0800bd08
 8009534:	ffff0001 	.word	0xffff0001

08009538 <fiprintf>:
 8009538:	b40e      	push	{r1, r2, r3}
 800953a:	b503      	push	{r0, r1, lr}
 800953c:	4601      	mov	r1, r0
 800953e:	ab03      	add	r3, sp, #12
 8009540:	4805      	ldr	r0, [pc, #20]	; (8009558 <fiprintf+0x20>)
 8009542:	f853 2b04 	ldr.w	r2, [r3], #4
 8009546:	6800      	ldr	r0, [r0, #0]
 8009548:	9301      	str	r3, [sp, #4]
 800954a:	f000 f9a5 	bl	8009898 <_vfiprintf_r>
 800954e:	b002      	add	sp, #8
 8009550:	f85d eb04 	ldr.w	lr, [sp], #4
 8009554:	b003      	add	sp, #12
 8009556:	4770      	bx	lr
 8009558:	200002cc 	.word	0x200002cc

0800955c <_fwalk_reent>:
 800955c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009560:	4606      	mov	r6, r0
 8009562:	4688      	mov	r8, r1
 8009564:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009568:	2700      	movs	r7, #0
 800956a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800956e:	f1b9 0901 	subs.w	r9, r9, #1
 8009572:	d505      	bpl.n	8009580 <_fwalk_reent+0x24>
 8009574:	6824      	ldr	r4, [r4, #0]
 8009576:	2c00      	cmp	r4, #0
 8009578:	d1f7      	bne.n	800956a <_fwalk_reent+0xe>
 800957a:	4638      	mov	r0, r7
 800957c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009580:	89ab      	ldrh	r3, [r5, #12]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d907      	bls.n	8009596 <_fwalk_reent+0x3a>
 8009586:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800958a:	3301      	adds	r3, #1
 800958c:	d003      	beq.n	8009596 <_fwalk_reent+0x3a>
 800958e:	4629      	mov	r1, r5
 8009590:	4630      	mov	r0, r6
 8009592:	47c0      	blx	r8
 8009594:	4307      	orrs	r7, r0
 8009596:	3568      	adds	r5, #104	; 0x68
 8009598:	e7e9      	b.n	800956e <_fwalk_reent+0x12>
	...

0800959c <__libc_init_array>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	4d0d      	ldr	r5, [pc, #52]	; (80095d4 <__libc_init_array+0x38>)
 80095a0:	4c0d      	ldr	r4, [pc, #52]	; (80095d8 <__libc_init_array+0x3c>)
 80095a2:	1b64      	subs	r4, r4, r5
 80095a4:	10a4      	asrs	r4, r4, #2
 80095a6:	2600      	movs	r6, #0
 80095a8:	42a6      	cmp	r6, r4
 80095aa:	d109      	bne.n	80095c0 <__libc_init_array+0x24>
 80095ac:	4d0b      	ldr	r5, [pc, #44]	; (80095dc <__libc_init_array+0x40>)
 80095ae:	4c0c      	ldr	r4, [pc, #48]	; (80095e0 <__libc_init_array+0x44>)
 80095b0:	f002 fb46 	bl	800bc40 <_init>
 80095b4:	1b64      	subs	r4, r4, r5
 80095b6:	10a4      	asrs	r4, r4, #2
 80095b8:	2600      	movs	r6, #0
 80095ba:	42a6      	cmp	r6, r4
 80095bc:	d105      	bne.n	80095ca <__libc_init_array+0x2e>
 80095be:	bd70      	pop	{r4, r5, r6, pc}
 80095c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095c4:	4798      	blx	r3
 80095c6:	3601      	adds	r6, #1
 80095c8:	e7ee      	b.n	80095a8 <__libc_init_array+0xc>
 80095ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ce:	4798      	blx	r3
 80095d0:	3601      	adds	r6, #1
 80095d2:	e7f2      	b.n	80095ba <__libc_init_array+0x1e>
 80095d4:	0800c094 	.word	0x0800c094
 80095d8:	0800c094 	.word	0x0800c094
 80095dc:	0800c094 	.word	0x0800c094
 80095e0:	0800c098 	.word	0x0800c098

080095e4 <__retarget_lock_init_recursive>:
 80095e4:	4770      	bx	lr

080095e6 <__retarget_lock_acquire_recursive>:
 80095e6:	4770      	bx	lr

080095e8 <__retarget_lock_release_recursive>:
 80095e8:	4770      	bx	lr

080095ea <__swhatbuf_r>:
 80095ea:	b570      	push	{r4, r5, r6, lr}
 80095ec:	460e      	mov	r6, r1
 80095ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f2:	2900      	cmp	r1, #0
 80095f4:	b096      	sub	sp, #88	; 0x58
 80095f6:	4614      	mov	r4, r2
 80095f8:	461d      	mov	r5, r3
 80095fa:	da07      	bge.n	800960c <__swhatbuf_r+0x22>
 80095fc:	2300      	movs	r3, #0
 80095fe:	602b      	str	r3, [r5, #0]
 8009600:	89b3      	ldrh	r3, [r6, #12]
 8009602:	061a      	lsls	r2, r3, #24
 8009604:	d410      	bmi.n	8009628 <__swhatbuf_r+0x3e>
 8009606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800960a:	e00e      	b.n	800962a <__swhatbuf_r+0x40>
 800960c:	466a      	mov	r2, sp
 800960e:	f001 feab 	bl	800b368 <_fstat_r>
 8009612:	2800      	cmp	r0, #0
 8009614:	dbf2      	blt.n	80095fc <__swhatbuf_r+0x12>
 8009616:	9a01      	ldr	r2, [sp, #4]
 8009618:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800961c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009620:	425a      	negs	r2, r3
 8009622:	415a      	adcs	r2, r3
 8009624:	602a      	str	r2, [r5, #0]
 8009626:	e7ee      	b.n	8009606 <__swhatbuf_r+0x1c>
 8009628:	2340      	movs	r3, #64	; 0x40
 800962a:	2000      	movs	r0, #0
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	b016      	add	sp, #88	; 0x58
 8009630:	bd70      	pop	{r4, r5, r6, pc}
	...

08009634 <__smakebuf_r>:
 8009634:	898b      	ldrh	r3, [r1, #12]
 8009636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009638:	079d      	lsls	r5, r3, #30
 800963a:	4606      	mov	r6, r0
 800963c:	460c      	mov	r4, r1
 800963e:	d507      	bpl.n	8009650 <__smakebuf_r+0x1c>
 8009640:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	6123      	str	r3, [r4, #16]
 8009648:	2301      	movs	r3, #1
 800964a:	6163      	str	r3, [r4, #20]
 800964c:	b002      	add	sp, #8
 800964e:	bd70      	pop	{r4, r5, r6, pc}
 8009650:	ab01      	add	r3, sp, #4
 8009652:	466a      	mov	r2, sp
 8009654:	f7ff ffc9 	bl	80095ea <__swhatbuf_r>
 8009658:	9900      	ldr	r1, [sp, #0]
 800965a:	4605      	mov	r5, r0
 800965c:	4630      	mov	r0, r6
 800965e:	f000 f897 	bl	8009790 <_malloc_r>
 8009662:	b948      	cbnz	r0, 8009678 <__smakebuf_r+0x44>
 8009664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009668:	059a      	lsls	r2, r3, #22
 800966a:	d4ef      	bmi.n	800964c <__smakebuf_r+0x18>
 800966c:	f023 0303 	bic.w	r3, r3, #3
 8009670:	f043 0302 	orr.w	r3, r3, #2
 8009674:	81a3      	strh	r3, [r4, #12]
 8009676:	e7e3      	b.n	8009640 <__smakebuf_r+0xc>
 8009678:	4b0d      	ldr	r3, [pc, #52]	; (80096b0 <__smakebuf_r+0x7c>)
 800967a:	62b3      	str	r3, [r6, #40]	; 0x28
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	6020      	str	r0, [r4, #0]
 8009680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	9b00      	ldr	r3, [sp, #0]
 8009688:	6163      	str	r3, [r4, #20]
 800968a:	9b01      	ldr	r3, [sp, #4]
 800968c:	6120      	str	r0, [r4, #16]
 800968e:	b15b      	cbz	r3, 80096a8 <__smakebuf_r+0x74>
 8009690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009694:	4630      	mov	r0, r6
 8009696:	f001 fe79 	bl	800b38c <_isatty_r>
 800969a:	b128      	cbz	r0, 80096a8 <__smakebuf_r+0x74>
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	f023 0303 	bic.w	r3, r3, #3
 80096a2:	f043 0301 	orr.w	r3, r3, #1
 80096a6:	81a3      	strh	r3, [r4, #12]
 80096a8:	89a0      	ldrh	r0, [r4, #12]
 80096aa:	4305      	orrs	r5, r0
 80096ac:	81a5      	strh	r5, [r4, #12]
 80096ae:	e7cd      	b.n	800964c <__smakebuf_r+0x18>
 80096b0:	080093d5 	.word	0x080093d5

080096b4 <malloc>:
 80096b4:	4b02      	ldr	r3, [pc, #8]	; (80096c0 <malloc+0xc>)
 80096b6:	4601      	mov	r1, r0
 80096b8:	6818      	ldr	r0, [r3, #0]
 80096ba:	f000 b869 	b.w	8009790 <_malloc_r>
 80096be:	bf00      	nop
 80096c0:	200002cc 	.word	0x200002cc

080096c4 <memcpy>:
 80096c4:	440a      	add	r2, r1
 80096c6:	4291      	cmp	r1, r2
 80096c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80096cc:	d100      	bne.n	80096d0 <memcpy+0xc>
 80096ce:	4770      	bx	lr
 80096d0:	b510      	push	{r4, lr}
 80096d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096da:	4291      	cmp	r1, r2
 80096dc:	d1f9      	bne.n	80096d2 <memcpy+0xe>
 80096de:	bd10      	pop	{r4, pc}

080096e0 <memset>:
 80096e0:	4402      	add	r2, r0
 80096e2:	4603      	mov	r3, r0
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d100      	bne.n	80096ea <memset+0xa>
 80096e8:	4770      	bx	lr
 80096ea:	f803 1b01 	strb.w	r1, [r3], #1
 80096ee:	e7f9      	b.n	80096e4 <memset+0x4>

080096f0 <_free_r>:
 80096f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096f2:	2900      	cmp	r1, #0
 80096f4:	d048      	beq.n	8009788 <_free_r+0x98>
 80096f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096fa:	9001      	str	r0, [sp, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f1a1 0404 	sub.w	r4, r1, #4
 8009702:	bfb8      	it	lt
 8009704:	18e4      	addlt	r4, r4, r3
 8009706:	f001 fe67 	bl	800b3d8 <__malloc_lock>
 800970a:	4a20      	ldr	r2, [pc, #128]	; (800978c <_free_r+0x9c>)
 800970c:	9801      	ldr	r0, [sp, #4]
 800970e:	6813      	ldr	r3, [r2, #0]
 8009710:	4615      	mov	r5, r2
 8009712:	b933      	cbnz	r3, 8009722 <_free_r+0x32>
 8009714:	6063      	str	r3, [r4, #4]
 8009716:	6014      	str	r4, [r2, #0]
 8009718:	b003      	add	sp, #12
 800971a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800971e:	f001 be61 	b.w	800b3e4 <__malloc_unlock>
 8009722:	42a3      	cmp	r3, r4
 8009724:	d90b      	bls.n	800973e <_free_r+0x4e>
 8009726:	6821      	ldr	r1, [r4, #0]
 8009728:	1862      	adds	r2, r4, r1
 800972a:	4293      	cmp	r3, r2
 800972c:	bf04      	itt	eq
 800972e:	681a      	ldreq	r2, [r3, #0]
 8009730:	685b      	ldreq	r3, [r3, #4]
 8009732:	6063      	str	r3, [r4, #4]
 8009734:	bf04      	itt	eq
 8009736:	1852      	addeq	r2, r2, r1
 8009738:	6022      	streq	r2, [r4, #0]
 800973a:	602c      	str	r4, [r5, #0]
 800973c:	e7ec      	b.n	8009718 <_free_r+0x28>
 800973e:	461a      	mov	r2, r3
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	b10b      	cbz	r3, 8009748 <_free_r+0x58>
 8009744:	42a3      	cmp	r3, r4
 8009746:	d9fa      	bls.n	800973e <_free_r+0x4e>
 8009748:	6811      	ldr	r1, [r2, #0]
 800974a:	1855      	adds	r5, r2, r1
 800974c:	42a5      	cmp	r5, r4
 800974e:	d10b      	bne.n	8009768 <_free_r+0x78>
 8009750:	6824      	ldr	r4, [r4, #0]
 8009752:	4421      	add	r1, r4
 8009754:	1854      	adds	r4, r2, r1
 8009756:	42a3      	cmp	r3, r4
 8009758:	6011      	str	r1, [r2, #0]
 800975a:	d1dd      	bne.n	8009718 <_free_r+0x28>
 800975c:	681c      	ldr	r4, [r3, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	6053      	str	r3, [r2, #4]
 8009762:	4421      	add	r1, r4
 8009764:	6011      	str	r1, [r2, #0]
 8009766:	e7d7      	b.n	8009718 <_free_r+0x28>
 8009768:	d902      	bls.n	8009770 <_free_r+0x80>
 800976a:	230c      	movs	r3, #12
 800976c:	6003      	str	r3, [r0, #0]
 800976e:	e7d3      	b.n	8009718 <_free_r+0x28>
 8009770:	6825      	ldr	r5, [r4, #0]
 8009772:	1961      	adds	r1, r4, r5
 8009774:	428b      	cmp	r3, r1
 8009776:	bf04      	itt	eq
 8009778:	6819      	ldreq	r1, [r3, #0]
 800977a:	685b      	ldreq	r3, [r3, #4]
 800977c:	6063      	str	r3, [r4, #4]
 800977e:	bf04      	itt	eq
 8009780:	1949      	addeq	r1, r1, r5
 8009782:	6021      	streq	r1, [r4, #0]
 8009784:	6054      	str	r4, [r2, #4]
 8009786:	e7c7      	b.n	8009718 <_free_r+0x28>
 8009788:	b003      	add	sp, #12
 800978a:	bd30      	pop	{r4, r5, pc}
 800978c:	200004c0 	.word	0x200004c0

08009790 <_malloc_r>:
 8009790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009792:	1ccd      	adds	r5, r1, #3
 8009794:	f025 0503 	bic.w	r5, r5, #3
 8009798:	3508      	adds	r5, #8
 800979a:	2d0c      	cmp	r5, #12
 800979c:	bf38      	it	cc
 800979e:	250c      	movcc	r5, #12
 80097a0:	2d00      	cmp	r5, #0
 80097a2:	4606      	mov	r6, r0
 80097a4:	db01      	blt.n	80097aa <_malloc_r+0x1a>
 80097a6:	42a9      	cmp	r1, r5
 80097a8:	d903      	bls.n	80097b2 <_malloc_r+0x22>
 80097aa:	230c      	movs	r3, #12
 80097ac:	6033      	str	r3, [r6, #0]
 80097ae:	2000      	movs	r0, #0
 80097b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097b2:	f001 fe11 	bl	800b3d8 <__malloc_lock>
 80097b6:	4921      	ldr	r1, [pc, #132]	; (800983c <_malloc_r+0xac>)
 80097b8:	680a      	ldr	r2, [r1, #0]
 80097ba:	4614      	mov	r4, r2
 80097bc:	b99c      	cbnz	r4, 80097e6 <_malloc_r+0x56>
 80097be:	4f20      	ldr	r7, [pc, #128]	; (8009840 <_malloc_r+0xb0>)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	b923      	cbnz	r3, 80097ce <_malloc_r+0x3e>
 80097c4:	4621      	mov	r1, r4
 80097c6:	4630      	mov	r0, r6
 80097c8:	f000 fe18 	bl	800a3fc <_sbrk_r>
 80097cc:	6038      	str	r0, [r7, #0]
 80097ce:	4629      	mov	r1, r5
 80097d0:	4630      	mov	r0, r6
 80097d2:	f000 fe13 	bl	800a3fc <_sbrk_r>
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	d123      	bne.n	8009822 <_malloc_r+0x92>
 80097da:	230c      	movs	r3, #12
 80097dc:	6033      	str	r3, [r6, #0]
 80097de:	4630      	mov	r0, r6
 80097e0:	f001 fe00 	bl	800b3e4 <__malloc_unlock>
 80097e4:	e7e3      	b.n	80097ae <_malloc_r+0x1e>
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	1b5b      	subs	r3, r3, r5
 80097ea:	d417      	bmi.n	800981c <_malloc_r+0x8c>
 80097ec:	2b0b      	cmp	r3, #11
 80097ee:	d903      	bls.n	80097f8 <_malloc_r+0x68>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	441c      	add	r4, r3
 80097f4:	6025      	str	r5, [r4, #0]
 80097f6:	e004      	b.n	8009802 <_malloc_r+0x72>
 80097f8:	6863      	ldr	r3, [r4, #4]
 80097fa:	42a2      	cmp	r2, r4
 80097fc:	bf0c      	ite	eq
 80097fe:	600b      	streq	r3, [r1, #0]
 8009800:	6053      	strne	r3, [r2, #4]
 8009802:	4630      	mov	r0, r6
 8009804:	f001 fdee 	bl	800b3e4 <__malloc_unlock>
 8009808:	f104 000b 	add.w	r0, r4, #11
 800980c:	1d23      	adds	r3, r4, #4
 800980e:	f020 0007 	bic.w	r0, r0, #7
 8009812:	1ac2      	subs	r2, r0, r3
 8009814:	d0cc      	beq.n	80097b0 <_malloc_r+0x20>
 8009816:	1a1b      	subs	r3, r3, r0
 8009818:	50a3      	str	r3, [r4, r2]
 800981a:	e7c9      	b.n	80097b0 <_malloc_r+0x20>
 800981c:	4622      	mov	r2, r4
 800981e:	6864      	ldr	r4, [r4, #4]
 8009820:	e7cc      	b.n	80097bc <_malloc_r+0x2c>
 8009822:	1cc4      	adds	r4, r0, #3
 8009824:	f024 0403 	bic.w	r4, r4, #3
 8009828:	42a0      	cmp	r0, r4
 800982a:	d0e3      	beq.n	80097f4 <_malloc_r+0x64>
 800982c:	1a21      	subs	r1, r4, r0
 800982e:	4630      	mov	r0, r6
 8009830:	f000 fde4 	bl	800a3fc <_sbrk_r>
 8009834:	3001      	adds	r0, #1
 8009836:	d1dd      	bne.n	80097f4 <_malloc_r+0x64>
 8009838:	e7cf      	b.n	80097da <_malloc_r+0x4a>
 800983a:	bf00      	nop
 800983c:	200004c0 	.word	0x200004c0
 8009840:	200004c4 	.word	0x200004c4

08009844 <__sfputc_r>:
 8009844:	6893      	ldr	r3, [r2, #8]
 8009846:	3b01      	subs	r3, #1
 8009848:	2b00      	cmp	r3, #0
 800984a:	b410      	push	{r4}
 800984c:	6093      	str	r3, [r2, #8]
 800984e:	da08      	bge.n	8009862 <__sfputc_r+0x1e>
 8009850:	6994      	ldr	r4, [r2, #24]
 8009852:	42a3      	cmp	r3, r4
 8009854:	db01      	blt.n	800985a <__sfputc_r+0x16>
 8009856:	290a      	cmp	r1, #10
 8009858:	d103      	bne.n	8009862 <__sfputc_r+0x1e>
 800985a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800985e:	f000 be29 	b.w	800a4b4 <__swbuf_r>
 8009862:	6813      	ldr	r3, [r2, #0]
 8009864:	1c58      	adds	r0, r3, #1
 8009866:	6010      	str	r0, [r2, #0]
 8009868:	7019      	strb	r1, [r3, #0]
 800986a:	4608      	mov	r0, r1
 800986c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009870:	4770      	bx	lr

08009872 <__sfputs_r>:
 8009872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009874:	4606      	mov	r6, r0
 8009876:	460f      	mov	r7, r1
 8009878:	4614      	mov	r4, r2
 800987a:	18d5      	adds	r5, r2, r3
 800987c:	42ac      	cmp	r4, r5
 800987e:	d101      	bne.n	8009884 <__sfputs_r+0x12>
 8009880:	2000      	movs	r0, #0
 8009882:	e007      	b.n	8009894 <__sfputs_r+0x22>
 8009884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009888:	463a      	mov	r2, r7
 800988a:	4630      	mov	r0, r6
 800988c:	f7ff ffda 	bl	8009844 <__sfputc_r>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d1f3      	bne.n	800987c <__sfputs_r+0xa>
 8009894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009898 <_vfiprintf_r>:
 8009898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989c:	460d      	mov	r5, r1
 800989e:	b09d      	sub	sp, #116	; 0x74
 80098a0:	4614      	mov	r4, r2
 80098a2:	4698      	mov	r8, r3
 80098a4:	4606      	mov	r6, r0
 80098a6:	b118      	cbz	r0, 80098b0 <_vfiprintf_r+0x18>
 80098a8:	6983      	ldr	r3, [r0, #24]
 80098aa:	b90b      	cbnz	r3, 80098b0 <_vfiprintf_r+0x18>
 80098ac:	f7ff fdc6 	bl	800943c <__sinit>
 80098b0:	4b89      	ldr	r3, [pc, #548]	; (8009ad8 <_vfiprintf_r+0x240>)
 80098b2:	429d      	cmp	r5, r3
 80098b4:	d11b      	bne.n	80098ee <_vfiprintf_r+0x56>
 80098b6:	6875      	ldr	r5, [r6, #4]
 80098b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098ba:	07d9      	lsls	r1, r3, #31
 80098bc:	d405      	bmi.n	80098ca <_vfiprintf_r+0x32>
 80098be:	89ab      	ldrh	r3, [r5, #12]
 80098c0:	059a      	lsls	r2, r3, #22
 80098c2:	d402      	bmi.n	80098ca <_vfiprintf_r+0x32>
 80098c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098c6:	f7ff fe8e 	bl	80095e6 <__retarget_lock_acquire_recursive>
 80098ca:	89ab      	ldrh	r3, [r5, #12]
 80098cc:	071b      	lsls	r3, r3, #28
 80098ce:	d501      	bpl.n	80098d4 <_vfiprintf_r+0x3c>
 80098d0:	692b      	ldr	r3, [r5, #16]
 80098d2:	b9eb      	cbnz	r3, 8009910 <_vfiprintf_r+0x78>
 80098d4:	4629      	mov	r1, r5
 80098d6:	4630      	mov	r0, r6
 80098d8:	f000 fe50 	bl	800a57c <__swsetup_r>
 80098dc:	b1c0      	cbz	r0, 8009910 <_vfiprintf_r+0x78>
 80098de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098e0:	07dc      	lsls	r4, r3, #31
 80098e2:	d50e      	bpl.n	8009902 <_vfiprintf_r+0x6a>
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	b01d      	add	sp, #116	; 0x74
 80098ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ee:	4b7b      	ldr	r3, [pc, #492]	; (8009adc <_vfiprintf_r+0x244>)
 80098f0:	429d      	cmp	r5, r3
 80098f2:	d101      	bne.n	80098f8 <_vfiprintf_r+0x60>
 80098f4:	68b5      	ldr	r5, [r6, #8]
 80098f6:	e7df      	b.n	80098b8 <_vfiprintf_r+0x20>
 80098f8:	4b79      	ldr	r3, [pc, #484]	; (8009ae0 <_vfiprintf_r+0x248>)
 80098fa:	429d      	cmp	r5, r3
 80098fc:	bf08      	it	eq
 80098fe:	68f5      	ldreq	r5, [r6, #12]
 8009900:	e7da      	b.n	80098b8 <_vfiprintf_r+0x20>
 8009902:	89ab      	ldrh	r3, [r5, #12]
 8009904:	0598      	lsls	r0, r3, #22
 8009906:	d4ed      	bmi.n	80098e4 <_vfiprintf_r+0x4c>
 8009908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800990a:	f7ff fe6d 	bl	80095e8 <__retarget_lock_release_recursive>
 800990e:	e7e9      	b.n	80098e4 <_vfiprintf_r+0x4c>
 8009910:	2300      	movs	r3, #0
 8009912:	9309      	str	r3, [sp, #36]	; 0x24
 8009914:	2320      	movs	r3, #32
 8009916:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800991a:	f8cd 800c 	str.w	r8, [sp, #12]
 800991e:	2330      	movs	r3, #48	; 0x30
 8009920:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ae4 <_vfiprintf_r+0x24c>
 8009924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009928:	f04f 0901 	mov.w	r9, #1
 800992c:	4623      	mov	r3, r4
 800992e:	469a      	mov	sl, r3
 8009930:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009934:	b10a      	cbz	r2, 800993a <_vfiprintf_r+0xa2>
 8009936:	2a25      	cmp	r2, #37	; 0x25
 8009938:	d1f9      	bne.n	800992e <_vfiprintf_r+0x96>
 800993a:	ebba 0b04 	subs.w	fp, sl, r4
 800993e:	d00b      	beq.n	8009958 <_vfiprintf_r+0xc0>
 8009940:	465b      	mov	r3, fp
 8009942:	4622      	mov	r2, r4
 8009944:	4629      	mov	r1, r5
 8009946:	4630      	mov	r0, r6
 8009948:	f7ff ff93 	bl	8009872 <__sfputs_r>
 800994c:	3001      	adds	r0, #1
 800994e:	f000 80aa 	beq.w	8009aa6 <_vfiprintf_r+0x20e>
 8009952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009954:	445a      	add	r2, fp
 8009956:	9209      	str	r2, [sp, #36]	; 0x24
 8009958:	f89a 3000 	ldrb.w	r3, [sl]
 800995c:	2b00      	cmp	r3, #0
 800995e:	f000 80a2 	beq.w	8009aa6 <_vfiprintf_r+0x20e>
 8009962:	2300      	movs	r3, #0
 8009964:	f04f 32ff 	mov.w	r2, #4294967295
 8009968:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800996c:	f10a 0a01 	add.w	sl, sl, #1
 8009970:	9304      	str	r3, [sp, #16]
 8009972:	9307      	str	r3, [sp, #28]
 8009974:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009978:	931a      	str	r3, [sp, #104]	; 0x68
 800997a:	4654      	mov	r4, sl
 800997c:	2205      	movs	r2, #5
 800997e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009982:	4858      	ldr	r0, [pc, #352]	; (8009ae4 <_vfiprintf_r+0x24c>)
 8009984:	f7f6 fc4c 	bl	8000220 <memchr>
 8009988:	9a04      	ldr	r2, [sp, #16]
 800998a:	b9d8      	cbnz	r0, 80099c4 <_vfiprintf_r+0x12c>
 800998c:	06d1      	lsls	r1, r2, #27
 800998e:	bf44      	itt	mi
 8009990:	2320      	movmi	r3, #32
 8009992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009996:	0713      	lsls	r3, r2, #28
 8009998:	bf44      	itt	mi
 800999a:	232b      	movmi	r3, #43	; 0x2b
 800999c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099a0:	f89a 3000 	ldrb.w	r3, [sl]
 80099a4:	2b2a      	cmp	r3, #42	; 0x2a
 80099a6:	d015      	beq.n	80099d4 <_vfiprintf_r+0x13c>
 80099a8:	9a07      	ldr	r2, [sp, #28]
 80099aa:	4654      	mov	r4, sl
 80099ac:	2000      	movs	r0, #0
 80099ae:	f04f 0c0a 	mov.w	ip, #10
 80099b2:	4621      	mov	r1, r4
 80099b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099b8:	3b30      	subs	r3, #48	; 0x30
 80099ba:	2b09      	cmp	r3, #9
 80099bc:	d94e      	bls.n	8009a5c <_vfiprintf_r+0x1c4>
 80099be:	b1b0      	cbz	r0, 80099ee <_vfiprintf_r+0x156>
 80099c0:	9207      	str	r2, [sp, #28]
 80099c2:	e014      	b.n	80099ee <_vfiprintf_r+0x156>
 80099c4:	eba0 0308 	sub.w	r3, r0, r8
 80099c8:	fa09 f303 	lsl.w	r3, r9, r3
 80099cc:	4313      	orrs	r3, r2
 80099ce:	9304      	str	r3, [sp, #16]
 80099d0:	46a2      	mov	sl, r4
 80099d2:	e7d2      	b.n	800997a <_vfiprintf_r+0xe2>
 80099d4:	9b03      	ldr	r3, [sp, #12]
 80099d6:	1d19      	adds	r1, r3, #4
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	9103      	str	r1, [sp, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	bfbb      	ittet	lt
 80099e0:	425b      	neglt	r3, r3
 80099e2:	f042 0202 	orrlt.w	r2, r2, #2
 80099e6:	9307      	strge	r3, [sp, #28]
 80099e8:	9307      	strlt	r3, [sp, #28]
 80099ea:	bfb8      	it	lt
 80099ec:	9204      	strlt	r2, [sp, #16]
 80099ee:	7823      	ldrb	r3, [r4, #0]
 80099f0:	2b2e      	cmp	r3, #46	; 0x2e
 80099f2:	d10c      	bne.n	8009a0e <_vfiprintf_r+0x176>
 80099f4:	7863      	ldrb	r3, [r4, #1]
 80099f6:	2b2a      	cmp	r3, #42	; 0x2a
 80099f8:	d135      	bne.n	8009a66 <_vfiprintf_r+0x1ce>
 80099fa:	9b03      	ldr	r3, [sp, #12]
 80099fc:	1d1a      	adds	r2, r3, #4
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	9203      	str	r2, [sp, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	bfb8      	it	lt
 8009a06:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a0a:	3402      	adds	r4, #2
 8009a0c:	9305      	str	r3, [sp, #20]
 8009a0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009af4 <_vfiprintf_r+0x25c>
 8009a12:	7821      	ldrb	r1, [r4, #0]
 8009a14:	2203      	movs	r2, #3
 8009a16:	4650      	mov	r0, sl
 8009a18:	f7f6 fc02 	bl	8000220 <memchr>
 8009a1c:	b140      	cbz	r0, 8009a30 <_vfiprintf_r+0x198>
 8009a1e:	2340      	movs	r3, #64	; 0x40
 8009a20:	eba0 000a 	sub.w	r0, r0, sl
 8009a24:	fa03 f000 	lsl.w	r0, r3, r0
 8009a28:	9b04      	ldr	r3, [sp, #16]
 8009a2a:	4303      	orrs	r3, r0
 8009a2c:	3401      	adds	r4, #1
 8009a2e:	9304      	str	r3, [sp, #16]
 8009a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a34:	482c      	ldr	r0, [pc, #176]	; (8009ae8 <_vfiprintf_r+0x250>)
 8009a36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a3a:	2206      	movs	r2, #6
 8009a3c:	f7f6 fbf0 	bl	8000220 <memchr>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d03f      	beq.n	8009ac4 <_vfiprintf_r+0x22c>
 8009a44:	4b29      	ldr	r3, [pc, #164]	; (8009aec <_vfiprintf_r+0x254>)
 8009a46:	bb1b      	cbnz	r3, 8009a90 <_vfiprintf_r+0x1f8>
 8009a48:	9b03      	ldr	r3, [sp, #12]
 8009a4a:	3307      	adds	r3, #7
 8009a4c:	f023 0307 	bic.w	r3, r3, #7
 8009a50:	3308      	adds	r3, #8
 8009a52:	9303      	str	r3, [sp, #12]
 8009a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a56:	443b      	add	r3, r7
 8009a58:	9309      	str	r3, [sp, #36]	; 0x24
 8009a5a:	e767      	b.n	800992c <_vfiprintf_r+0x94>
 8009a5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a60:	460c      	mov	r4, r1
 8009a62:	2001      	movs	r0, #1
 8009a64:	e7a5      	b.n	80099b2 <_vfiprintf_r+0x11a>
 8009a66:	2300      	movs	r3, #0
 8009a68:	3401      	adds	r4, #1
 8009a6a:	9305      	str	r3, [sp, #20]
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	f04f 0c0a 	mov.w	ip, #10
 8009a72:	4620      	mov	r0, r4
 8009a74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a78:	3a30      	subs	r2, #48	; 0x30
 8009a7a:	2a09      	cmp	r2, #9
 8009a7c:	d903      	bls.n	8009a86 <_vfiprintf_r+0x1ee>
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0c5      	beq.n	8009a0e <_vfiprintf_r+0x176>
 8009a82:	9105      	str	r1, [sp, #20]
 8009a84:	e7c3      	b.n	8009a0e <_vfiprintf_r+0x176>
 8009a86:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e7f0      	b.n	8009a72 <_vfiprintf_r+0x1da>
 8009a90:	ab03      	add	r3, sp, #12
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	462a      	mov	r2, r5
 8009a96:	4b16      	ldr	r3, [pc, #88]	; (8009af0 <_vfiprintf_r+0x258>)
 8009a98:	a904      	add	r1, sp, #16
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f000 f8cc 	bl	8009c38 <_printf_float>
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	1c78      	adds	r0, r7, #1
 8009aa4:	d1d6      	bne.n	8009a54 <_vfiprintf_r+0x1bc>
 8009aa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aa8:	07d9      	lsls	r1, r3, #31
 8009aaa:	d405      	bmi.n	8009ab8 <_vfiprintf_r+0x220>
 8009aac:	89ab      	ldrh	r3, [r5, #12]
 8009aae:	059a      	lsls	r2, r3, #22
 8009ab0:	d402      	bmi.n	8009ab8 <_vfiprintf_r+0x220>
 8009ab2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ab4:	f7ff fd98 	bl	80095e8 <__retarget_lock_release_recursive>
 8009ab8:	89ab      	ldrh	r3, [r5, #12]
 8009aba:	065b      	lsls	r3, r3, #25
 8009abc:	f53f af12 	bmi.w	80098e4 <_vfiprintf_r+0x4c>
 8009ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ac2:	e711      	b.n	80098e8 <_vfiprintf_r+0x50>
 8009ac4:	ab03      	add	r3, sp, #12
 8009ac6:	9300      	str	r3, [sp, #0]
 8009ac8:	462a      	mov	r2, r5
 8009aca:	4b09      	ldr	r3, [pc, #36]	; (8009af0 <_vfiprintf_r+0x258>)
 8009acc:	a904      	add	r1, sp, #16
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f000 fb56 	bl	800a180 <_printf_i>
 8009ad4:	e7e4      	b.n	8009aa0 <_vfiprintf_r+0x208>
 8009ad6:	bf00      	nop
 8009ad8:	0800bcc8 	.word	0x0800bcc8
 8009adc:	0800bce8 	.word	0x0800bce8
 8009ae0:	0800bca8 	.word	0x0800bca8
 8009ae4:	0800bd0c 	.word	0x0800bd0c
 8009ae8:	0800bd16 	.word	0x0800bd16
 8009aec:	08009c39 	.word	0x08009c39
 8009af0:	08009873 	.word	0x08009873
 8009af4:	0800bd12 	.word	0x0800bd12

08009af8 <__cvt>:
 8009af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009afc:	ec55 4b10 	vmov	r4, r5, d0
 8009b00:	2d00      	cmp	r5, #0
 8009b02:	460e      	mov	r6, r1
 8009b04:	4619      	mov	r1, r3
 8009b06:	462b      	mov	r3, r5
 8009b08:	bfbb      	ittet	lt
 8009b0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b0e:	461d      	movlt	r5, r3
 8009b10:	2300      	movge	r3, #0
 8009b12:	232d      	movlt	r3, #45	; 0x2d
 8009b14:	700b      	strb	r3, [r1, #0]
 8009b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b1c:	4691      	mov	r9, r2
 8009b1e:	f023 0820 	bic.w	r8, r3, #32
 8009b22:	bfbc      	itt	lt
 8009b24:	4622      	movlt	r2, r4
 8009b26:	4614      	movlt	r4, r2
 8009b28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b2c:	d005      	beq.n	8009b3a <__cvt+0x42>
 8009b2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b32:	d100      	bne.n	8009b36 <__cvt+0x3e>
 8009b34:	3601      	adds	r6, #1
 8009b36:	2102      	movs	r1, #2
 8009b38:	e000      	b.n	8009b3c <__cvt+0x44>
 8009b3a:	2103      	movs	r1, #3
 8009b3c:	ab03      	add	r3, sp, #12
 8009b3e:	9301      	str	r3, [sp, #4]
 8009b40:	ab02      	add	r3, sp, #8
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	ec45 4b10 	vmov	d0, r4, r5
 8009b48:	4653      	mov	r3, sl
 8009b4a:	4632      	mov	r2, r6
 8009b4c:	f000 fe20 	bl	800a790 <_dtoa_r>
 8009b50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b54:	4607      	mov	r7, r0
 8009b56:	d102      	bne.n	8009b5e <__cvt+0x66>
 8009b58:	f019 0f01 	tst.w	r9, #1
 8009b5c:	d022      	beq.n	8009ba4 <__cvt+0xac>
 8009b5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b62:	eb07 0906 	add.w	r9, r7, r6
 8009b66:	d110      	bne.n	8009b8a <__cvt+0x92>
 8009b68:	783b      	ldrb	r3, [r7, #0]
 8009b6a:	2b30      	cmp	r3, #48	; 0x30
 8009b6c:	d10a      	bne.n	8009b84 <__cvt+0x8c>
 8009b6e:	2200      	movs	r2, #0
 8009b70:	2300      	movs	r3, #0
 8009b72:	4620      	mov	r0, r4
 8009b74:	4629      	mov	r1, r5
 8009b76:	f7f6 ffc7 	bl	8000b08 <__aeabi_dcmpeq>
 8009b7a:	b918      	cbnz	r0, 8009b84 <__cvt+0x8c>
 8009b7c:	f1c6 0601 	rsb	r6, r6, #1
 8009b80:	f8ca 6000 	str.w	r6, [sl]
 8009b84:	f8da 3000 	ldr.w	r3, [sl]
 8009b88:	4499      	add	r9, r3
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	4620      	mov	r0, r4
 8009b90:	4629      	mov	r1, r5
 8009b92:	f7f6 ffb9 	bl	8000b08 <__aeabi_dcmpeq>
 8009b96:	b108      	cbz	r0, 8009b9c <__cvt+0xa4>
 8009b98:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b9c:	2230      	movs	r2, #48	; 0x30
 8009b9e:	9b03      	ldr	r3, [sp, #12]
 8009ba0:	454b      	cmp	r3, r9
 8009ba2:	d307      	bcc.n	8009bb4 <__cvt+0xbc>
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ba8:	1bdb      	subs	r3, r3, r7
 8009baa:	4638      	mov	r0, r7
 8009bac:	6013      	str	r3, [r2, #0]
 8009bae:	b004      	add	sp, #16
 8009bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bb4:	1c59      	adds	r1, r3, #1
 8009bb6:	9103      	str	r1, [sp, #12]
 8009bb8:	701a      	strb	r2, [r3, #0]
 8009bba:	e7f0      	b.n	8009b9e <__cvt+0xa6>

08009bbc <__exponent>:
 8009bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2900      	cmp	r1, #0
 8009bc2:	bfb8      	it	lt
 8009bc4:	4249      	neglt	r1, r1
 8009bc6:	f803 2b02 	strb.w	r2, [r3], #2
 8009bca:	bfb4      	ite	lt
 8009bcc:	222d      	movlt	r2, #45	; 0x2d
 8009bce:	222b      	movge	r2, #43	; 0x2b
 8009bd0:	2909      	cmp	r1, #9
 8009bd2:	7042      	strb	r2, [r0, #1]
 8009bd4:	dd2a      	ble.n	8009c2c <__exponent+0x70>
 8009bd6:	f10d 0407 	add.w	r4, sp, #7
 8009bda:	46a4      	mov	ip, r4
 8009bdc:	270a      	movs	r7, #10
 8009bde:	46a6      	mov	lr, r4
 8009be0:	460a      	mov	r2, r1
 8009be2:	fb91 f6f7 	sdiv	r6, r1, r7
 8009be6:	fb07 1516 	mls	r5, r7, r6, r1
 8009bea:	3530      	adds	r5, #48	; 0x30
 8009bec:	2a63      	cmp	r2, #99	; 0x63
 8009bee:	f104 34ff 	add.w	r4, r4, #4294967295
 8009bf2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	dcf1      	bgt.n	8009bde <__exponent+0x22>
 8009bfa:	3130      	adds	r1, #48	; 0x30
 8009bfc:	f1ae 0502 	sub.w	r5, lr, #2
 8009c00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c04:	1c44      	adds	r4, r0, #1
 8009c06:	4629      	mov	r1, r5
 8009c08:	4561      	cmp	r1, ip
 8009c0a:	d30a      	bcc.n	8009c22 <__exponent+0x66>
 8009c0c:	f10d 0209 	add.w	r2, sp, #9
 8009c10:	eba2 020e 	sub.w	r2, r2, lr
 8009c14:	4565      	cmp	r5, ip
 8009c16:	bf88      	it	hi
 8009c18:	2200      	movhi	r2, #0
 8009c1a:	4413      	add	r3, r2
 8009c1c:	1a18      	subs	r0, r3, r0
 8009c1e:	b003      	add	sp, #12
 8009c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c26:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009c2a:	e7ed      	b.n	8009c08 <__exponent+0x4c>
 8009c2c:	2330      	movs	r3, #48	; 0x30
 8009c2e:	3130      	adds	r1, #48	; 0x30
 8009c30:	7083      	strb	r3, [r0, #2]
 8009c32:	70c1      	strb	r1, [r0, #3]
 8009c34:	1d03      	adds	r3, r0, #4
 8009c36:	e7f1      	b.n	8009c1c <__exponent+0x60>

08009c38 <_printf_float>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	ed2d 8b02 	vpush	{d8}
 8009c40:	b08d      	sub	sp, #52	; 0x34
 8009c42:	460c      	mov	r4, r1
 8009c44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c48:	4616      	mov	r6, r2
 8009c4a:	461f      	mov	r7, r3
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	f001 fbad 	bl	800b3ac <_localeconv_r>
 8009c52:	f8d0 a000 	ldr.w	sl, [r0]
 8009c56:	4650      	mov	r0, sl
 8009c58:	f7f6 fada 	bl	8000210 <strlen>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	9305      	str	r3, [sp, #20]
 8009c64:	f8d8 3000 	ldr.w	r3, [r8]
 8009c68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009c6c:	3307      	adds	r3, #7
 8009c6e:	f023 0307 	bic.w	r3, r3, #7
 8009c72:	f103 0208 	add.w	r2, r3, #8
 8009c76:	f8c8 2000 	str.w	r2, [r8]
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009c82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009c86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c8a:	9307      	str	r3, [sp, #28]
 8009c8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c90:	ee08 0a10 	vmov	s16, r0
 8009c94:	4b9f      	ldr	r3, [pc, #636]	; (8009f14 <_printf_float+0x2dc>)
 8009c96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c9e:	f7f6 ff65 	bl	8000b6c <__aeabi_dcmpun>
 8009ca2:	bb88      	cbnz	r0, 8009d08 <_printf_float+0xd0>
 8009ca4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ca8:	4b9a      	ldr	r3, [pc, #616]	; (8009f14 <_printf_float+0x2dc>)
 8009caa:	f04f 32ff 	mov.w	r2, #4294967295
 8009cae:	f7f6 ff3f 	bl	8000b30 <__aeabi_dcmple>
 8009cb2:	bb48      	cbnz	r0, 8009d08 <_printf_float+0xd0>
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	4640      	mov	r0, r8
 8009cba:	4649      	mov	r1, r9
 8009cbc:	f7f6 ff2e 	bl	8000b1c <__aeabi_dcmplt>
 8009cc0:	b110      	cbz	r0, 8009cc8 <_printf_float+0x90>
 8009cc2:	232d      	movs	r3, #45	; 0x2d
 8009cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cc8:	4b93      	ldr	r3, [pc, #588]	; (8009f18 <_printf_float+0x2e0>)
 8009cca:	4894      	ldr	r0, [pc, #592]	; (8009f1c <_printf_float+0x2e4>)
 8009ccc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009cd0:	bf94      	ite	ls
 8009cd2:	4698      	movls	r8, r3
 8009cd4:	4680      	movhi	r8, r0
 8009cd6:	2303      	movs	r3, #3
 8009cd8:	6123      	str	r3, [r4, #16]
 8009cda:	9b05      	ldr	r3, [sp, #20]
 8009cdc:	f023 0204 	bic.w	r2, r3, #4
 8009ce0:	6022      	str	r2, [r4, #0]
 8009ce2:	f04f 0900 	mov.w	r9, #0
 8009ce6:	9700      	str	r7, [sp, #0]
 8009ce8:	4633      	mov	r3, r6
 8009cea:	aa0b      	add	r2, sp, #44	; 0x2c
 8009cec:	4621      	mov	r1, r4
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f000 f9d8 	bl	800a0a4 <_printf_common>
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	f040 8090 	bne.w	8009e1a <_printf_float+0x1e2>
 8009cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfe:	b00d      	add	sp, #52	; 0x34
 8009d00:	ecbd 8b02 	vpop	{d8}
 8009d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d08:	4642      	mov	r2, r8
 8009d0a:	464b      	mov	r3, r9
 8009d0c:	4640      	mov	r0, r8
 8009d0e:	4649      	mov	r1, r9
 8009d10:	f7f6 ff2c 	bl	8000b6c <__aeabi_dcmpun>
 8009d14:	b140      	cbz	r0, 8009d28 <_printf_float+0xf0>
 8009d16:	464b      	mov	r3, r9
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	bfbc      	itt	lt
 8009d1c:	232d      	movlt	r3, #45	; 0x2d
 8009d1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d22:	487f      	ldr	r0, [pc, #508]	; (8009f20 <_printf_float+0x2e8>)
 8009d24:	4b7f      	ldr	r3, [pc, #508]	; (8009f24 <_printf_float+0x2ec>)
 8009d26:	e7d1      	b.n	8009ccc <_printf_float+0x94>
 8009d28:	6863      	ldr	r3, [r4, #4]
 8009d2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d2e:	9206      	str	r2, [sp, #24]
 8009d30:	1c5a      	adds	r2, r3, #1
 8009d32:	d13f      	bne.n	8009db4 <_printf_float+0x17c>
 8009d34:	2306      	movs	r3, #6
 8009d36:	6063      	str	r3, [r4, #4]
 8009d38:	9b05      	ldr	r3, [sp, #20]
 8009d3a:	6861      	ldr	r1, [r4, #4]
 8009d3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d40:	2300      	movs	r3, #0
 8009d42:	9303      	str	r3, [sp, #12]
 8009d44:	ab0a      	add	r3, sp, #40	; 0x28
 8009d46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d4a:	ab09      	add	r3, sp, #36	; 0x24
 8009d4c:	ec49 8b10 	vmov	d0, r8, r9
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	6022      	str	r2, [r4, #0]
 8009d54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009d58:	4628      	mov	r0, r5
 8009d5a:	f7ff fecd 	bl	8009af8 <__cvt>
 8009d5e:	9b06      	ldr	r3, [sp, #24]
 8009d60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d62:	2b47      	cmp	r3, #71	; 0x47
 8009d64:	4680      	mov	r8, r0
 8009d66:	d108      	bne.n	8009d7a <_printf_float+0x142>
 8009d68:	1cc8      	adds	r0, r1, #3
 8009d6a:	db02      	blt.n	8009d72 <_printf_float+0x13a>
 8009d6c:	6863      	ldr	r3, [r4, #4]
 8009d6e:	4299      	cmp	r1, r3
 8009d70:	dd41      	ble.n	8009df6 <_printf_float+0x1be>
 8009d72:	f1ab 0b02 	sub.w	fp, fp, #2
 8009d76:	fa5f fb8b 	uxtb.w	fp, fp
 8009d7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d7e:	d820      	bhi.n	8009dc2 <_printf_float+0x18a>
 8009d80:	3901      	subs	r1, #1
 8009d82:	465a      	mov	r2, fp
 8009d84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d88:	9109      	str	r1, [sp, #36]	; 0x24
 8009d8a:	f7ff ff17 	bl	8009bbc <__exponent>
 8009d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d90:	1813      	adds	r3, r2, r0
 8009d92:	2a01      	cmp	r2, #1
 8009d94:	4681      	mov	r9, r0
 8009d96:	6123      	str	r3, [r4, #16]
 8009d98:	dc02      	bgt.n	8009da0 <_printf_float+0x168>
 8009d9a:	6822      	ldr	r2, [r4, #0]
 8009d9c:	07d2      	lsls	r2, r2, #31
 8009d9e:	d501      	bpl.n	8009da4 <_printf_float+0x16c>
 8009da0:	3301      	adds	r3, #1
 8009da2:	6123      	str	r3, [r4, #16]
 8009da4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d09c      	beq.n	8009ce6 <_printf_float+0xae>
 8009dac:	232d      	movs	r3, #45	; 0x2d
 8009dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009db2:	e798      	b.n	8009ce6 <_printf_float+0xae>
 8009db4:	9a06      	ldr	r2, [sp, #24]
 8009db6:	2a47      	cmp	r2, #71	; 0x47
 8009db8:	d1be      	bne.n	8009d38 <_printf_float+0x100>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1bc      	bne.n	8009d38 <_printf_float+0x100>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e7b9      	b.n	8009d36 <_printf_float+0xfe>
 8009dc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009dc6:	d118      	bne.n	8009dfa <_printf_float+0x1c2>
 8009dc8:	2900      	cmp	r1, #0
 8009dca:	6863      	ldr	r3, [r4, #4]
 8009dcc:	dd0b      	ble.n	8009de6 <_printf_float+0x1ae>
 8009dce:	6121      	str	r1, [r4, #16]
 8009dd0:	b913      	cbnz	r3, 8009dd8 <_printf_float+0x1a0>
 8009dd2:	6822      	ldr	r2, [r4, #0]
 8009dd4:	07d0      	lsls	r0, r2, #31
 8009dd6:	d502      	bpl.n	8009dde <_printf_float+0x1a6>
 8009dd8:	3301      	adds	r3, #1
 8009dda:	440b      	add	r3, r1
 8009ddc:	6123      	str	r3, [r4, #16]
 8009dde:	65a1      	str	r1, [r4, #88]	; 0x58
 8009de0:	f04f 0900 	mov.w	r9, #0
 8009de4:	e7de      	b.n	8009da4 <_printf_float+0x16c>
 8009de6:	b913      	cbnz	r3, 8009dee <_printf_float+0x1b6>
 8009de8:	6822      	ldr	r2, [r4, #0]
 8009dea:	07d2      	lsls	r2, r2, #31
 8009dec:	d501      	bpl.n	8009df2 <_printf_float+0x1ba>
 8009dee:	3302      	adds	r3, #2
 8009df0:	e7f4      	b.n	8009ddc <_printf_float+0x1a4>
 8009df2:	2301      	movs	r3, #1
 8009df4:	e7f2      	b.n	8009ddc <_printf_float+0x1a4>
 8009df6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dfc:	4299      	cmp	r1, r3
 8009dfe:	db05      	blt.n	8009e0c <_printf_float+0x1d4>
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	6121      	str	r1, [r4, #16]
 8009e04:	07d8      	lsls	r0, r3, #31
 8009e06:	d5ea      	bpl.n	8009dde <_printf_float+0x1a6>
 8009e08:	1c4b      	adds	r3, r1, #1
 8009e0a:	e7e7      	b.n	8009ddc <_printf_float+0x1a4>
 8009e0c:	2900      	cmp	r1, #0
 8009e0e:	bfd4      	ite	le
 8009e10:	f1c1 0202 	rsble	r2, r1, #2
 8009e14:	2201      	movgt	r2, #1
 8009e16:	4413      	add	r3, r2
 8009e18:	e7e0      	b.n	8009ddc <_printf_float+0x1a4>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	055a      	lsls	r2, r3, #21
 8009e1e:	d407      	bmi.n	8009e30 <_printf_float+0x1f8>
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	4642      	mov	r2, r8
 8009e24:	4631      	mov	r1, r6
 8009e26:	4628      	mov	r0, r5
 8009e28:	47b8      	blx	r7
 8009e2a:	3001      	adds	r0, #1
 8009e2c:	d12c      	bne.n	8009e88 <_printf_float+0x250>
 8009e2e:	e764      	b.n	8009cfa <_printf_float+0xc2>
 8009e30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e34:	f240 80e0 	bls.w	8009ff8 <_printf_float+0x3c0>
 8009e38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2300      	movs	r3, #0
 8009e40:	f7f6 fe62 	bl	8000b08 <__aeabi_dcmpeq>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d034      	beq.n	8009eb2 <_printf_float+0x27a>
 8009e48:	4a37      	ldr	r2, [pc, #220]	; (8009f28 <_printf_float+0x2f0>)
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	4631      	mov	r1, r6
 8009e4e:	4628      	mov	r0, r5
 8009e50:	47b8      	blx	r7
 8009e52:	3001      	adds	r0, #1
 8009e54:	f43f af51 	beq.w	8009cfa <_printf_float+0xc2>
 8009e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	db02      	blt.n	8009e66 <_printf_float+0x22e>
 8009e60:	6823      	ldr	r3, [r4, #0]
 8009e62:	07d8      	lsls	r0, r3, #31
 8009e64:	d510      	bpl.n	8009e88 <_printf_float+0x250>
 8009e66:	ee18 3a10 	vmov	r3, s16
 8009e6a:	4652      	mov	r2, sl
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4628      	mov	r0, r5
 8009e70:	47b8      	blx	r7
 8009e72:	3001      	adds	r0, #1
 8009e74:	f43f af41 	beq.w	8009cfa <_printf_float+0xc2>
 8009e78:	f04f 0800 	mov.w	r8, #0
 8009e7c:	f104 091a 	add.w	r9, r4, #26
 8009e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e82:	3b01      	subs	r3, #1
 8009e84:	4543      	cmp	r3, r8
 8009e86:	dc09      	bgt.n	8009e9c <_printf_float+0x264>
 8009e88:	6823      	ldr	r3, [r4, #0]
 8009e8a:	079b      	lsls	r3, r3, #30
 8009e8c:	f100 8105 	bmi.w	800a09a <_printf_float+0x462>
 8009e90:	68e0      	ldr	r0, [r4, #12]
 8009e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e94:	4298      	cmp	r0, r3
 8009e96:	bfb8      	it	lt
 8009e98:	4618      	movlt	r0, r3
 8009e9a:	e730      	b.n	8009cfe <_printf_float+0xc6>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	464a      	mov	r2, r9
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	47b8      	blx	r7
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	f43f af27 	beq.w	8009cfa <_printf_float+0xc2>
 8009eac:	f108 0801 	add.w	r8, r8, #1
 8009eb0:	e7e6      	b.n	8009e80 <_printf_float+0x248>
 8009eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	dc39      	bgt.n	8009f2c <_printf_float+0x2f4>
 8009eb8:	4a1b      	ldr	r2, [pc, #108]	; (8009f28 <_printf_float+0x2f0>)
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b8      	blx	r7
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	f43f af19 	beq.w	8009cfa <_printf_float+0xc2>
 8009ec8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	d102      	bne.n	8009ed6 <_printf_float+0x29e>
 8009ed0:	6823      	ldr	r3, [r4, #0]
 8009ed2:	07d9      	lsls	r1, r3, #31
 8009ed4:	d5d8      	bpl.n	8009e88 <_printf_float+0x250>
 8009ed6:	ee18 3a10 	vmov	r3, s16
 8009eda:	4652      	mov	r2, sl
 8009edc:	4631      	mov	r1, r6
 8009ede:	4628      	mov	r0, r5
 8009ee0:	47b8      	blx	r7
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	f43f af09 	beq.w	8009cfa <_printf_float+0xc2>
 8009ee8:	f04f 0900 	mov.w	r9, #0
 8009eec:	f104 0a1a 	add.w	sl, r4, #26
 8009ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef2:	425b      	negs	r3, r3
 8009ef4:	454b      	cmp	r3, r9
 8009ef6:	dc01      	bgt.n	8009efc <_printf_float+0x2c4>
 8009ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009efa:	e792      	b.n	8009e22 <_printf_float+0x1ea>
 8009efc:	2301      	movs	r3, #1
 8009efe:	4652      	mov	r2, sl
 8009f00:	4631      	mov	r1, r6
 8009f02:	4628      	mov	r0, r5
 8009f04:	47b8      	blx	r7
 8009f06:	3001      	adds	r0, #1
 8009f08:	f43f aef7 	beq.w	8009cfa <_printf_float+0xc2>
 8009f0c:	f109 0901 	add.w	r9, r9, #1
 8009f10:	e7ee      	b.n	8009ef0 <_printf_float+0x2b8>
 8009f12:	bf00      	nop
 8009f14:	7fefffff 	.word	0x7fefffff
 8009f18:	0800bd1d 	.word	0x0800bd1d
 8009f1c:	0800bd21 	.word	0x0800bd21
 8009f20:	0800bd29 	.word	0x0800bd29
 8009f24:	0800bd25 	.word	0x0800bd25
 8009f28:	0800bd2d 	.word	0x0800bd2d
 8009f2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f30:	429a      	cmp	r2, r3
 8009f32:	bfa8      	it	ge
 8009f34:	461a      	movge	r2, r3
 8009f36:	2a00      	cmp	r2, #0
 8009f38:	4691      	mov	r9, r2
 8009f3a:	dc37      	bgt.n	8009fac <_printf_float+0x374>
 8009f3c:	f04f 0b00 	mov.w	fp, #0
 8009f40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f44:	f104 021a 	add.w	r2, r4, #26
 8009f48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f4a:	9305      	str	r3, [sp, #20]
 8009f4c:	eba3 0309 	sub.w	r3, r3, r9
 8009f50:	455b      	cmp	r3, fp
 8009f52:	dc33      	bgt.n	8009fbc <_printf_float+0x384>
 8009f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	db3b      	blt.n	8009fd4 <_printf_float+0x39c>
 8009f5c:	6823      	ldr	r3, [r4, #0]
 8009f5e:	07da      	lsls	r2, r3, #31
 8009f60:	d438      	bmi.n	8009fd4 <_printf_float+0x39c>
 8009f62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f64:	9b05      	ldr	r3, [sp, #20]
 8009f66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	eba2 0901 	sub.w	r9, r2, r1
 8009f6e:	4599      	cmp	r9, r3
 8009f70:	bfa8      	it	ge
 8009f72:	4699      	movge	r9, r3
 8009f74:	f1b9 0f00 	cmp.w	r9, #0
 8009f78:	dc35      	bgt.n	8009fe6 <_printf_float+0x3ae>
 8009f7a:	f04f 0800 	mov.w	r8, #0
 8009f7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f82:	f104 0a1a 	add.w	sl, r4, #26
 8009f86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f8a:	1a9b      	subs	r3, r3, r2
 8009f8c:	eba3 0309 	sub.w	r3, r3, r9
 8009f90:	4543      	cmp	r3, r8
 8009f92:	f77f af79 	ble.w	8009e88 <_printf_float+0x250>
 8009f96:	2301      	movs	r3, #1
 8009f98:	4652      	mov	r2, sl
 8009f9a:	4631      	mov	r1, r6
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	47b8      	blx	r7
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	f43f aeaa 	beq.w	8009cfa <_printf_float+0xc2>
 8009fa6:	f108 0801 	add.w	r8, r8, #1
 8009faa:	e7ec      	b.n	8009f86 <_printf_float+0x34e>
 8009fac:	4613      	mov	r3, r2
 8009fae:	4631      	mov	r1, r6
 8009fb0:	4642      	mov	r2, r8
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	47b8      	blx	r7
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	d1c0      	bne.n	8009f3c <_printf_float+0x304>
 8009fba:	e69e      	b.n	8009cfa <_printf_float+0xc2>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	9205      	str	r2, [sp, #20]
 8009fc4:	47b8      	blx	r7
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	f43f ae97 	beq.w	8009cfa <_printf_float+0xc2>
 8009fcc:	9a05      	ldr	r2, [sp, #20]
 8009fce:	f10b 0b01 	add.w	fp, fp, #1
 8009fd2:	e7b9      	b.n	8009f48 <_printf_float+0x310>
 8009fd4:	ee18 3a10 	vmov	r3, s16
 8009fd8:	4652      	mov	r2, sl
 8009fda:	4631      	mov	r1, r6
 8009fdc:	4628      	mov	r0, r5
 8009fde:	47b8      	blx	r7
 8009fe0:	3001      	adds	r0, #1
 8009fe2:	d1be      	bne.n	8009f62 <_printf_float+0x32a>
 8009fe4:	e689      	b.n	8009cfa <_printf_float+0xc2>
 8009fe6:	9a05      	ldr	r2, [sp, #20]
 8009fe8:	464b      	mov	r3, r9
 8009fea:	4442      	add	r2, r8
 8009fec:	4631      	mov	r1, r6
 8009fee:	4628      	mov	r0, r5
 8009ff0:	47b8      	blx	r7
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d1c1      	bne.n	8009f7a <_printf_float+0x342>
 8009ff6:	e680      	b.n	8009cfa <_printf_float+0xc2>
 8009ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ffa:	2a01      	cmp	r2, #1
 8009ffc:	dc01      	bgt.n	800a002 <_printf_float+0x3ca>
 8009ffe:	07db      	lsls	r3, r3, #31
 800a000:	d538      	bpl.n	800a074 <_printf_float+0x43c>
 800a002:	2301      	movs	r3, #1
 800a004:	4642      	mov	r2, r8
 800a006:	4631      	mov	r1, r6
 800a008:	4628      	mov	r0, r5
 800a00a:	47b8      	blx	r7
 800a00c:	3001      	adds	r0, #1
 800a00e:	f43f ae74 	beq.w	8009cfa <_printf_float+0xc2>
 800a012:	ee18 3a10 	vmov	r3, s16
 800a016:	4652      	mov	r2, sl
 800a018:	4631      	mov	r1, r6
 800a01a:	4628      	mov	r0, r5
 800a01c:	47b8      	blx	r7
 800a01e:	3001      	adds	r0, #1
 800a020:	f43f ae6b 	beq.w	8009cfa <_printf_float+0xc2>
 800a024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a028:	2200      	movs	r2, #0
 800a02a:	2300      	movs	r3, #0
 800a02c:	f7f6 fd6c 	bl	8000b08 <__aeabi_dcmpeq>
 800a030:	b9d8      	cbnz	r0, 800a06a <_printf_float+0x432>
 800a032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a034:	f108 0201 	add.w	r2, r8, #1
 800a038:	3b01      	subs	r3, #1
 800a03a:	4631      	mov	r1, r6
 800a03c:	4628      	mov	r0, r5
 800a03e:	47b8      	blx	r7
 800a040:	3001      	adds	r0, #1
 800a042:	d10e      	bne.n	800a062 <_printf_float+0x42a>
 800a044:	e659      	b.n	8009cfa <_printf_float+0xc2>
 800a046:	2301      	movs	r3, #1
 800a048:	4652      	mov	r2, sl
 800a04a:	4631      	mov	r1, r6
 800a04c:	4628      	mov	r0, r5
 800a04e:	47b8      	blx	r7
 800a050:	3001      	adds	r0, #1
 800a052:	f43f ae52 	beq.w	8009cfa <_printf_float+0xc2>
 800a056:	f108 0801 	add.w	r8, r8, #1
 800a05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a05c:	3b01      	subs	r3, #1
 800a05e:	4543      	cmp	r3, r8
 800a060:	dcf1      	bgt.n	800a046 <_printf_float+0x40e>
 800a062:	464b      	mov	r3, r9
 800a064:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a068:	e6dc      	b.n	8009e24 <_printf_float+0x1ec>
 800a06a:	f04f 0800 	mov.w	r8, #0
 800a06e:	f104 0a1a 	add.w	sl, r4, #26
 800a072:	e7f2      	b.n	800a05a <_printf_float+0x422>
 800a074:	2301      	movs	r3, #1
 800a076:	4642      	mov	r2, r8
 800a078:	e7df      	b.n	800a03a <_printf_float+0x402>
 800a07a:	2301      	movs	r3, #1
 800a07c:	464a      	mov	r2, r9
 800a07e:	4631      	mov	r1, r6
 800a080:	4628      	mov	r0, r5
 800a082:	47b8      	blx	r7
 800a084:	3001      	adds	r0, #1
 800a086:	f43f ae38 	beq.w	8009cfa <_printf_float+0xc2>
 800a08a:	f108 0801 	add.w	r8, r8, #1
 800a08e:	68e3      	ldr	r3, [r4, #12]
 800a090:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a092:	1a5b      	subs	r3, r3, r1
 800a094:	4543      	cmp	r3, r8
 800a096:	dcf0      	bgt.n	800a07a <_printf_float+0x442>
 800a098:	e6fa      	b.n	8009e90 <_printf_float+0x258>
 800a09a:	f04f 0800 	mov.w	r8, #0
 800a09e:	f104 0919 	add.w	r9, r4, #25
 800a0a2:	e7f4      	b.n	800a08e <_printf_float+0x456>

0800a0a4 <_printf_common>:
 800a0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a8:	4616      	mov	r6, r2
 800a0aa:	4699      	mov	r9, r3
 800a0ac:	688a      	ldr	r2, [r1, #8]
 800a0ae:	690b      	ldr	r3, [r1, #16]
 800a0b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	bfb8      	it	lt
 800a0b8:	4613      	movlt	r3, r2
 800a0ba:	6033      	str	r3, [r6, #0]
 800a0bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a0c0:	4607      	mov	r7, r0
 800a0c2:	460c      	mov	r4, r1
 800a0c4:	b10a      	cbz	r2, 800a0ca <_printf_common+0x26>
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	6033      	str	r3, [r6, #0]
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	0699      	lsls	r1, r3, #26
 800a0ce:	bf42      	ittt	mi
 800a0d0:	6833      	ldrmi	r3, [r6, #0]
 800a0d2:	3302      	addmi	r3, #2
 800a0d4:	6033      	strmi	r3, [r6, #0]
 800a0d6:	6825      	ldr	r5, [r4, #0]
 800a0d8:	f015 0506 	ands.w	r5, r5, #6
 800a0dc:	d106      	bne.n	800a0ec <_printf_common+0x48>
 800a0de:	f104 0a19 	add.w	sl, r4, #25
 800a0e2:	68e3      	ldr	r3, [r4, #12]
 800a0e4:	6832      	ldr	r2, [r6, #0]
 800a0e6:	1a9b      	subs	r3, r3, r2
 800a0e8:	42ab      	cmp	r3, r5
 800a0ea:	dc26      	bgt.n	800a13a <_printf_common+0x96>
 800a0ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0f0:	1e13      	subs	r3, r2, #0
 800a0f2:	6822      	ldr	r2, [r4, #0]
 800a0f4:	bf18      	it	ne
 800a0f6:	2301      	movne	r3, #1
 800a0f8:	0692      	lsls	r2, r2, #26
 800a0fa:	d42b      	bmi.n	800a154 <_printf_common+0xb0>
 800a0fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a100:	4649      	mov	r1, r9
 800a102:	4638      	mov	r0, r7
 800a104:	47c0      	blx	r8
 800a106:	3001      	adds	r0, #1
 800a108:	d01e      	beq.n	800a148 <_printf_common+0xa4>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	68e5      	ldr	r5, [r4, #12]
 800a10e:	6832      	ldr	r2, [r6, #0]
 800a110:	f003 0306 	and.w	r3, r3, #6
 800a114:	2b04      	cmp	r3, #4
 800a116:	bf08      	it	eq
 800a118:	1aad      	subeq	r5, r5, r2
 800a11a:	68a3      	ldr	r3, [r4, #8]
 800a11c:	6922      	ldr	r2, [r4, #16]
 800a11e:	bf0c      	ite	eq
 800a120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a124:	2500      	movne	r5, #0
 800a126:	4293      	cmp	r3, r2
 800a128:	bfc4      	itt	gt
 800a12a:	1a9b      	subgt	r3, r3, r2
 800a12c:	18ed      	addgt	r5, r5, r3
 800a12e:	2600      	movs	r6, #0
 800a130:	341a      	adds	r4, #26
 800a132:	42b5      	cmp	r5, r6
 800a134:	d11a      	bne.n	800a16c <_printf_common+0xc8>
 800a136:	2000      	movs	r0, #0
 800a138:	e008      	b.n	800a14c <_printf_common+0xa8>
 800a13a:	2301      	movs	r3, #1
 800a13c:	4652      	mov	r2, sl
 800a13e:	4649      	mov	r1, r9
 800a140:	4638      	mov	r0, r7
 800a142:	47c0      	blx	r8
 800a144:	3001      	adds	r0, #1
 800a146:	d103      	bne.n	800a150 <_printf_common+0xac>
 800a148:	f04f 30ff 	mov.w	r0, #4294967295
 800a14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a150:	3501      	adds	r5, #1
 800a152:	e7c6      	b.n	800a0e2 <_printf_common+0x3e>
 800a154:	18e1      	adds	r1, r4, r3
 800a156:	1c5a      	adds	r2, r3, #1
 800a158:	2030      	movs	r0, #48	; 0x30
 800a15a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a15e:	4422      	add	r2, r4
 800a160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a168:	3302      	adds	r3, #2
 800a16a:	e7c7      	b.n	800a0fc <_printf_common+0x58>
 800a16c:	2301      	movs	r3, #1
 800a16e:	4622      	mov	r2, r4
 800a170:	4649      	mov	r1, r9
 800a172:	4638      	mov	r0, r7
 800a174:	47c0      	blx	r8
 800a176:	3001      	adds	r0, #1
 800a178:	d0e6      	beq.n	800a148 <_printf_common+0xa4>
 800a17a:	3601      	adds	r6, #1
 800a17c:	e7d9      	b.n	800a132 <_printf_common+0x8e>
	...

0800a180 <_printf_i>:
 800a180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a184:	460c      	mov	r4, r1
 800a186:	4691      	mov	r9, r2
 800a188:	7e27      	ldrb	r7, [r4, #24]
 800a18a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a18c:	2f78      	cmp	r7, #120	; 0x78
 800a18e:	4680      	mov	r8, r0
 800a190:	469a      	mov	sl, r3
 800a192:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a196:	d807      	bhi.n	800a1a8 <_printf_i+0x28>
 800a198:	2f62      	cmp	r7, #98	; 0x62
 800a19a:	d80a      	bhi.n	800a1b2 <_printf_i+0x32>
 800a19c:	2f00      	cmp	r7, #0
 800a19e:	f000 80d8 	beq.w	800a352 <_printf_i+0x1d2>
 800a1a2:	2f58      	cmp	r7, #88	; 0x58
 800a1a4:	f000 80a3 	beq.w	800a2ee <_printf_i+0x16e>
 800a1a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a1ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a1b0:	e03a      	b.n	800a228 <_printf_i+0xa8>
 800a1b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a1b6:	2b15      	cmp	r3, #21
 800a1b8:	d8f6      	bhi.n	800a1a8 <_printf_i+0x28>
 800a1ba:	a001      	add	r0, pc, #4	; (adr r0, 800a1c0 <_printf_i+0x40>)
 800a1bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a1c0:	0800a219 	.word	0x0800a219
 800a1c4:	0800a22d 	.word	0x0800a22d
 800a1c8:	0800a1a9 	.word	0x0800a1a9
 800a1cc:	0800a1a9 	.word	0x0800a1a9
 800a1d0:	0800a1a9 	.word	0x0800a1a9
 800a1d4:	0800a1a9 	.word	0x0800a1a9
 800a1d8:	0800a22d 	.word	0x0800a22d
 800a1dc:	0800a1a9 	.word	0x0800a1a9
 800a1e0:	0800a1a9 	.word	0x0800a1a9
 800a1e4:	0800a1a9 	.word	0x0800a1a9
 800a1e8:	0800a1a9 	.word	0x0800a1a9
 800a1ec:	0800a339 	.word	0x0800a339
 800a1f0:	0800a25d 	.word	0x0800a25d
 800a1f4:	0800a31b 	.word	0x0800a31b
 800a1f8:	0800a1a9 	.word	0x0800a1a9
 800a1fc:	0800a1a9 	.word	0x0800a1a9
 800a200:	0800a35b 	.word	0x0800a35b
 800a204:	0800a1a9 	.word	0x0800a1a9
 800a208:	0800a25d 	.word	0x0800a25d
 800a20c:	0800a1a9 	.word	0x0800a1a9
 800a210:	0800a1a9 	.word	0x0800a1a9
 800a214:	0800a323 	.word	0x0800a323
 800a218:	680b      	ldr	r3, [r1, #0]
 800a21a:	1d1a      	adds	r2, r3, #4
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	600a      	str	r2, [r1, #0]
 800a220:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a228:	2301      	movs	r3, #1
 800a22a:	e0a3      	b.n	800a374 <_printf_i+0x1f4>
 800a22c:	6825      	ldr	r5, [r4, #0]
 800a22e:	6808      	ldr	r0, [r1, #0]
 800a230:	062e      	lsls	r6, r5, #24
 800a232:	f100 0304 	add.w	r3, r0, #4
 800a236:	d50a      	bpl.n	800a24e <_printf_i+0xce>
 800a238:	6805      	ldr	r5, [r0, #0]
 800a23a:	600b      	str	r3, [r1, #0]
 800a23c:	2d00      	cmp	r5, #0
 800a23e:	da03      	bge.n	800a248 <_printf_i+0xc8>
 800a240:	232d      	movs	r3, #45	; 0x2d
 800a242:	426d      	negs	r5, r5
 800a244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a248:	485e      	ldr	r0, [pc, #376]	; (800a3c4 <_printf_i+0x244>)
 800a24a:	230a      	movs	r3, #10
 800a24c:	e019      	b.n	800a282 <_printf_i+0x102>
 800a24e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a252:	6805      	ldr	r5, [r0, #0]
 800a254:	600b      	str	r3, [r1, #0]
 800a256:	bf18      	it	ne
 800a258:	b22d      	sxthne	r5, r5
 800a25a:	e7ef      	b.n	800a23c <_printf_i+0xbc>
 800a25c:	680b      	ldr	r3, [r1, #0]
 800a25e:	6825      	ldr	r5, [r4, #0]
 800a260:	1d18      	adds	r0, r3, #4
 800a262:	6008      	str	r0, [r1, #0]
 800a264:	0628      	lsls	r0, r5, #24
 800a266:	d501      	bpl.n	800a26c <_printf_i+0xec>
 800a268:	681d      	ldr	r5, [r3, #0]
 800a26a:	e002      	b.n	800a272 <_printf_i+0xf2>
 800a26c:	0669      	lsls	r1, r5, #25
 800a26e:	d5fb      	bpl.n	800a268 <_printf_i+0xe8>
 800a270:	881d      	ldrh	r5, [r3, #0]
 800a272:	4854      	ldr	r0, [pc, #336]	; (800a3c4 <_printf_i+0x244>)
 800a274:	2f6f      	cmp	r7, #111	; 0x6f
 800a276:	bf0c      	ite	eq
 800a278:	2308      	moveq	r3, #8
 800a27a:	230a      	movne	r3, #10
 800a27c:	2100      	movs	r1, #0
 800a27e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a282:	6866      	ldr	r6, [r4, #4]
 800a284:	60a6      	str	r6, [r4, #8]
 800a286:	2e00      	cmp	r6, #0
 800a288:	bfa2      	ittt	ge
 800a28a:	6821      	ldrge	r1, [r4, #0]
 800a28c:	f021 0104 	bicge.w	r1, r1, #4
 800a290:	6021      	strge	r1, [r4, #0]
 800a292:	b90d      	cbnz	r5, 800a298 <_printf_i+0x118>
 800a294:	2e00      	cmp	r6, #0
 800a296:	d04d      	beq.n	800a334 <_printf_i+0x1b4>
 800a298:	4616      	mov	r6, r2
 800a29a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a29e:	fb03 5711 	mls	r7, r3, r1, r5
 800a2a2:	5dc7      	ldrb	r7, [r0, r7]
 800a2a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2a8:	462f      	mov	r7, r5
 800a2aa:	42bb      	cmp	r3, r7
 800a2ac:	460d      	mov	r5, r1
 800a2ae:	d9f4      	bls.n	800a29a <_printf_i+0x11a>
 800a2b0:	2b08      	cmp	r3, #8
 800a2b2:	d10b      	bne.n	800a2cc <_printf_i+0x14c>
 800a2b4:	6823      	ldr	r3, [r4, #0]
 800a2b6:	07df      	lsls	r7, r3, #31
 800a2b8:	d508      	bpl.n	800a2cc <_printf_i+0x14c>
 800a2ba:	6923      	ldr	r3, [r4, #16]
 800a2bc:	6861      	ldr	r1, [r4, #4]
 800a2be:	4299      	cmp	r1, r3
 800a2c0:	bfde      	ittt	le
 800a2c2:	2330      	movle	r3, #48	; 0x30
 800a2c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a2cc:	1b92      	subs	r2, r2, r6
 800a2ce:	6122      	str	r2, [r4, #16]
 800a2d0:	f8cd a000 	str.w	sl, [sp]
 800a2d4:	464b      	mov	r3, r9
 800a2d6:	aa03      	add	r2, sp, #12
 800a2d8:	4621      	mov	r1, r4
 800a2da:	4640      	mov	r0, r8
 800a2dc:	f7ff fee2 	bl	800a0a4 <_printf_common>
 800a2e0:	3001      	adds	r0, #1
 800a2e2:	d14c      	bne.n	800a37e <_printf_i+0x1fe>
 800a2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e8:	b004      	add	sp, #16
 800a2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ee:	4835      	ldr	r0, [pc, #212]	; (800a3c4 <_printf_i+0x244>)
 800a2f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	680e      	ldr	r6, [r1, #0]
 800a2f8:	061f      	lsls	r7, r3, #24
 800a2fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800a2fe:	600e      	str	r6, [r1, #0]
 800a300:	d514      	bpl.n	800a32c <_printf_i+0x1ac>
 800a302:	07d9      	lsls	r1, r3, #31
 800a304:	bf44      	itt	mi
 800a306:	f043 0320 	orrmi.w	r3, r3, #32
 800a30a:	6023      	strmi	r3, [r4, #0]
 800a30c:	b91d      	cbnz	r5, 800a316 <_printf_i+0x196>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	f023 0320 	bic.w	r3, r3, #32
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	2310      	movs	r3, #16
 800a318:	e7b0      	b.n	800a27c <_printf_i+0xfc>
 800a31a:	6823      	ldr	r3, [r4, #0]
 800a31c:	f043 0320 	orr.w	r3, r3, #32
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	2378      	movs	r3, #120	; 0x78
 800a324:	4828      	ldr	r0, [pc, #160]	; (800a3c8 <_printf_i+0x248>)
 800a326:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a32a:	e7e3      	b.n	800a2f4 <_printf_i+0x174>
 800a32c:	065e      	lsls	r6, r3, #25
 800a32e:	bf48      	it	mi
 800a330:	b2ad      	uxthmi	r5, r5
 800a332:	e7e6      	b.n	800a302 <_printf_i+0x182>
 800a334:	4616      	mov	r6, r2
 800a336:	e7bb      	b.n	800a2b0 <_printf_i+0x130>
 800a338:	680b      	ldr	r3, [r1, #0]
 800a33a:	6826      	ldr	r6, [r4, #0]
 800a33c:	6960      	ldr	r0, [r4, #20]
 800a33e:	1d1d      	adds	r5, r3, #4
 800a340:	600d      	str	r5, [r1, #0]
 800a342:	0635      	lsls	r5, r6, #24
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	d501      	bpl.n	800a34c <_printf_i+0x1cc>
 800a348:	6018      	str	r0, [r3, #0]
 800a34a:	e002      	b.n	800a352 <_printf_i+0x1d2>
 800a34c:	0671      	lsls	r1, r6, #25
 800a34e:	d5fb      	bpl.n	800a348 <_printf_i+0x1c8>
 800a350:	8018      	strh	r0, [r3, #0]
 800a352:	2300      	movs	r3, #0
 800a354:	6123      	str	r3, [r4, #16]
 800a356:	4616      	mov	r6, r2
 800a358:	e7ba      	b.n	800a2d0 <_printf_i+0x150>
 800a35a:	680b      	ldr	r3, [r1, #0]
 800a35c:	1d1a      	adds	r2, r3, #4
 800a35e:	600a      	str	r2, [r1, #0]
 800a360:	681e      	ldr	r6, [r3, #0]
 800a362:	6862      	ldr	r2, [r4, #4]
 800a364:	2100      	movs	r1, #0
 800a366:	4630      	mov	r0, r6
 800a368:	f7f5 ff5a 	bl	8000220 <memchr>
 800a36c:	b108      	cbz	r0, 800a372 <_printf_i+0x1f2>
 800a36e:	1b80      	subs	r0, r0, r6
 800a370:	6060      	str	r0, [r4, #4]
 800a372:	6863      	ldr	r3, [r4, #4]
 800a374:	6123      	str	r3, [r4, #16]
 800a376:	2300      	movs	r3, #0
 800a378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a37c:	e7a8      	b.n	800a2d0 <_printf_i+0x150>
 800a37e:	6923      	ldr	r3, [r4, #16]
 800a380:	4632      	mov	r2, r6
 800a382:	4649      	mov	r1, r9
 800a384:	4640      	mov	r0, r8
 800a386:	47d0      	blx	sl
 800a388:	3001      	adds	r0, #1
 800a38a:	d0ab      	beq.n	800a2e4 <_printf_i+0x164>
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	079b      	lsls	r3, r3, #30
 800a390:	d413      	bmi.n	800a3ba <_printf_i+0x23a>
 800a392:	68e0      	ldr	r0, [r4, #12]
 800a394:	9b03      	ldr	r3, [sp, #12]
 800a396:	4298      	cmp	r0, r3
 800a398:	bfb8      	it	lt
 800a39a:	4618      	movlt	r0, r3
 800a39c:	e7a4      	b.n	800a2e8 <_printf_i+0x168>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	4632      	mov	r2, r6
 800a3a2:	4649      	mov	r1, r9
 800a3a4:	4640      	mov	r0, r8
 800a3a6:	47d0      	blx	sl
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	d09b      	beq.n	800a2e4 <_printf_i+0x164>
 800a3ac:	3501      	adds	r5, #1
 800a3ae:	68e3      	ldr	r3, [r4, #12]
 800a3b0:	9903      	ldr	r1, [sp, #12]
 800a3b2:	1a5b      	subs	r3, r3, r1
 800a3b4:	42ab      	cmp	r3, r5
 800a3b6:	dcf2      	bgt.n	800a39e <_printf_i+0x21e>
 800a3b8:	e7eb      	b.n	800a392 <_printf_i+0x212>
 800a3ba:	2500      	movs	r5, #0
 800a3bc:	f104 0619 	add.w	r6, r4, #25
 800a3c0:	e7f5      	b.n	800a3ae <_printf_i+0x22e>
 800a3c2:	bf00      	nop
 800a3c4:	0800bd2f 	.word	0x0800bd2f
 800a3c8:	0800bd40 	.word	0x0800bd40

0800a3cc <iprintf>:
 800a3cc:	b40f      	push	{r0, r1, r2, r3}
 800a3ce:	4b0a      	ldr	r3, [pc, #40]	; (800a3f8 <iprintf+0x2c>)
 800a3d0:	b513      	push	{r0, r1, r4, lr}
 800a3d2:	681c      	ldr	r4, [r3, #0]
 800a3d4:	b124      	cbz	r4, 800a3e0 <iprintf+0x14>
 800a3d6:	69a3      	ldr	r3, [r4, #24]
 800a3d8:	b913      	cbnz	r3, 800a3e0 <iprintf+0x14>
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f7ff f82e 	bl	800943c <__sinit>
 800a3e0:	ab05      	add	r3, sp, #20
 800a3e2:	9a04      	ldr	r2, [sp, #16]
 800a3e4:	68a1      	ldr	r1, [r4, #8]
 800a3e6:	9301      	str	r3, [sp, #4]
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f7ff fa55 	bl	8009898 <_vfiprintf_r>
 800a3ee:	b002      	add	sp, #8
 800a3f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f4:	b004      	add	sp, #16
 800a3f6:	4770      	bx	lr
 800a3f8:	200002cc 	.word	0x200002cc

0800a3fc <_sbrk_r>:
 800a3fc:	b538      	push	{r3, r4, r5, lr}
 800a3fe:	4d06      	ldr	r5, [pc, #24]	; (800a418 <_sbrk_r+0x1c>)
 800a400:	2300      	movs	r3, #0
 800a402:	4604      	mov	r4, r0
 800a404:	4608      	mov	r0, r1
 800a406:	602b      	str	r3, [r5, #0]
 800a408:	f7f7 faa4 	bl	8001954 <_sbrk>
 800a40c:	1c43      	adds	r3, r0, #1
 800a40e:	d102      	bne.n	800a416 <_sbrk_r+0x1a>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	b103      	cbz	r3, 800a416 <_sbrk_r+0x1a>
 800a414:	6023      	str	r3, [r4, #0]
 800a416:	bd38      	pop	{r3, r4, r5, pc}
 800a418:	200008d4 	.word	0x200008d4

0800a41c <__sread>:
 800a41c:	b510      	push	{r4, lr}
 800a41e:	460c      	mov	r4, r1
 800a420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a424:	f001 fb72 	bl	800bb0c <_read_r>
 800a428:	2800      	cmp	r0, #0
 800a42a:	bfab      	itete	ge
 800a42c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a42e:	89a3      	ldrhlt	r3, [r4, #12]
 800a430:	181b      	addge	r3, r3, r0
 800a432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a436:	bfac      	ite	ge
 800a438:	6563      	strge	r3, [r4, #84]	; 0x54
 800a43a:	81a3      	strhlt	r3, [r4, #12]
 800a43c:	bd10      	pop	{r4, pc}

0800a43e <__swrite>:
 800a43e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a442:	461f      	mov	r7, r3
 800a444:	898b      	ldrh	r3, [r1, #12]
 800a446:	05db      	lsls	r3, r3, #23
 800a448:	4605      	mov	r5, r0
 800a44a:	460c      	mov	r4, r1
 800a44c:	4616      	mov	r6, r2
 800a44e:	d505      	bpl.n	800a45c <__swrite+0x1e>
 800a450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a454:	2302      	movs	r3, #2
 800a456:	2200      	movs	r2, #0
 800a458:	f000 ffac 	bl	800b3b4 <_lseek_r>
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a462:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a466:	81a3      	strh	r3, [r4, #12]
 800a468:	4632      	mov	r2, r6
 800a46a:	463b      	mov	r3, r7
 800a46c:	4628      	mov	r0, r5
 800a46e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a472:	f000 b871 	b.w	800a558 <_write_r>

0800a476 <__sseek>:
 800a476:	b510      	push	{r4, lr}
 800a478:	460c      	mov	r4, r1
 800a47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a47e:	f000 ff99 	bl	800b3b4 <_lseek_r>
 800a482:	1c43      	adds	r3, r0, #1
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	bf15      	itete	ne
 800a488:	6560      	strne	r0, [r4, #84]	; 0x54
 800a48a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a48e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a492:	81a3      	strheq	r3, [r4, #12]
 800a494:	bf18      	it	ne
 800a496:	81a3      	strhne	r3, [r4, #12]
 800a498:	bd10      	pop	{r4, pc}

0800a49a <__sclose>:
 800a49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a49e:	f000 b8db 	b.w	800a658 <_close_r>

0800a4a2 <strcpy>:
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4a8:	f803 2b01 	strb.w	r2, [r3], #1
 800a4ac:	2a00      	cmp	r2, #0
 800a4ae:	d1f9      	bne.n	800a4a4 <strcpy+0x2>
 800a4b0:	4770      	bx	lr
	...

0800a4b4 <__swbuf_r>:
 800a4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b6:	460e      	mov	r6, r1
 800a4b8:	4614      	mov	r4, r2
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	b118      	cbz	r0, 800a4c6 <__swbuf_r+0x12>
 800a4be:	6983      	ldr	r3, [r0, #24]
 800a4c0:	b90b      	cbnz	r3, 800a4c6 <__swbuf_r+0x12>
 800a4c2:	f7fe ffbb 	bl	800943c <__sinit>
 800a4c6:	4b21      	ldr	r3, [pc, #132]	; (800a54c <__swbuf_r+0x98>)
 800a4c8:	429c      	cmp	r4, r3
 800a4ca:	d12b      	bne.n	800a524 <__swbuf_r+0x70>
 800a4cc:	686c      	ldr	r4, [r5, #4]
 800a4ce:	69a3      	ldr	r3, [r4, #24]
 800a4d0:	60a3      	str	r3, [r4, #8]
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	071a      	lsls	r2, r3, #28
 800a4d6:	d52f      	bpl.n	800a538 <__swbuf_r+0x84>
 800a4d8:	6923      	ldr	r3, [r4, #16]
 800a4da:	b36b      	cbz	r3, 800a538 <__swbuf_r+0x84>
 800a4dc:	6923      	ldr	r3, [r4, #16]
 800a4de:	6820      	ldr	r0, [r4, #0]
 800a4e0:	1ac0      	subs	r0, r0, r3
 800a4e2:	6963      	ldr	r3, [r4, #20]
 800a4e4:	b2f6      	uxtb	r6, r6
 800a4e6:	4283      	cmp	r3, r0
 800a4e8:	4637      	mov	r7, r6
 800a4ea:	dc04      	bgt.n	800a4f6 <__swbuf_r+0x42>
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f7fe ff10 	bl	8009314 <_fflush_r>
 800a4f4:	bb30      	cbnz	r0, 800a544 <__swbuf_r+0x90>
 800a4f6:	68a3      	ldr	r3, [r4, #8]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	60a3      	str	r3, [r4, #8]
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	6022      	str	r2, [r4, #0]
 800a502:	701e      	strb	r6, [r3, #0]
 800a504:	6963      	ldr	r3, [r4, #20]
 800a506:	3001      	adds	r0, #1
 800a508:	4283      	cmp	r3, r0
 800a50a:	d004      	beq.n	800a516 <__swbuf_r+0x62>
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	07db      	lsls	r3, r3, #31
 800a510:	d506      	bpl.n	800a520 <__swbuf_r+0x6c>
 800a512:	2e0a      	cmp	r6, #10
 800a514:	d104      	bne.n	800a520 <__swbuf_r+0x6c>
 800a516:	4621      	mov	r1, r4
 800a518:	4628      	mov	r0, r5
 800a51a:	f7fe fefb 	bl	8009314 <_fflush_r>
 800a51e:	b988      	cbnz	r0, 800a544 <__swbuf_r+0x90>
 800a520:	4638      	mov	r0, r7
 800a522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a524:	4b0a      	ldr	r3, [pc, #40]	; (800a550 <__swbuf_r+0x9c>)
 800a526:	429c      	cmp	r4, r3
 800a528:	d101      	bne.n	800a52e <__swbuf_r+0x7a>
 800a52a:	68ac      	ldr	r4, [r5, #8]
 800a52c:	e7cf      	b.n	800a4ce <__swbuf_r+0x1a>
 800a52e:	4b09      	ldr	r3, [pc, #36]	; (800a554 <__swbuf_r+0xa0>)
 800a530:	429c      	cmp	r4, r3
 800a532:	bf08      	it	eq
 800a534:	68ec      	ldreq	r4, [r5, #12]
 800a536:	e7ca      	b.n	800a4ce <__swbuf_r+0x1a>
 800a538:	4621      	mov	r1, r4
 800a53a:	4628      	mov	r0, r5
 800a53c:	f000 f81e 	bl	800a57c <__swsetup_r>
 800a540:	2800      	cmp	r0, #0
 800a542:	d0cb      	beq.n	800a4dc <__swbuf_r+0x28>
 800a544:	f04f 37ff 	mov.w	r7, #4294967295
 800a548:	e7ea      	b.n	800a520 <__swbuf_r+0x6c>
 800a54a:	bf00      	nop
 800a54c:	0800bcc8 	.word	0x0800bcc8
 800a550:	0800bce8 	.word	0x0800bce8
 800a554:	0800bca8 	.word	0x0800bca8

0800a558 <_write_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4d07      	ldr	r5, [pc, #28]	; (800a578 <_write_r+0x20>)
 800a55c:	4604      	mov	r4, r0
 800a55e:	4608      	mov	r0, r1
 800a560:	4611      	mov	r1, r2
 800a562:	2200      	movs	r2, #0
 800a564:	602a      	str	r2, [r5, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	f7f7 f9a3 	bl	80018b2 <_write>
 800a56c:	1c43      	adds	r3, r0, #1
 800a56e:	d102      	bne.n	800a576 <_write_r+0x1e>
 800a570:	682b      	ldr	r3, [r5, #0]
 800a572:	b103      	cbz	r3, 800a576 <_write_r+0x1e>
 800a574:	6023      	str	r3, [r4, #0]
 800a576:	bd38      	pop	{r3, r4, r5, pc}
 800a578:	200008d4 	.word	0x200008d4

0800a57c <__swsetup_r>:
 800a57c:	4b32      	ldr	r3, [pc, #200]	; (800a648 <__swsetup_r+0xcc>)
 800a57e:	b570      	push	{r4, r5, r6, lr}
 800a580:	681d      	ldr	r5, [r3, #0]
 800a582:	4606      	mov	r6, r0
 800a584:	460c      	mov	r4, r1
 800a586:	b125      	cbz	r5, 800a592 <__swsetup_r+0x16>
 800a588:	69ab      	ldr	r3, [r5, #24]
 800a58a:	b913      	cbnz	r3, 800a592 <__swsetup_r+0x16>
 800a58c:	4628      	mov	r0, r5
 800a58e:	f7fe ff55 	bl	800943c <__sinit>
 800a592:	4b2e      	ldr	r3, [pc, #184]	; (800a64c <__swsetup_r+0xd0>)
 800a594:	429c      	cmp	r4, r3
 800a596:	d10f      	bne.n	800a5b8 <__swsetup_r+0x3c>
 800a598:	686c      	ldr	r4, [r5, #4]
 800a59a:	89a3      	ldrh	r3, [r4, #12]
 800a59c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5a0:	0719      	lsls	r1, r3, #28
 800a5a2:	d42c      	bmi.n	800a5fe <__swsetup_r+0x82>
 800a5a4:	06dd      	lsls	r5, r3, #27
 800a5a6:	d411      	bmi.n	800a5cc <__swsetup_r+0x50>
 800a5a8:	2309      	movs	r3, #9
 800a5aa:	6033      	str	r3, [r6, #0]
 800a5ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5b0:	81a3      	strh	r3, [r4, #12]
 800a5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b6:	e03e      	b.n	800a636 <__swsetup_r+0xba>
 800a5b8:	4b25      	ldr	r3, [pc, #148]	; (800a650 <__swsetup_r+0xd4>)
 800a5ba:	429c      	cmp	r4, r3
 800a5bc:	d101      	bne.n	800a5c2 <__swsetup_r+0x46>
 800a5be:	68ac      	ldr	r4, [r5, #8]
 800a5c0:	e7eb      	b.n	800a59a <__swsetup_r+0x1e>
 800a5c2:	4b24      	ldr	r3, [pc, #144]	; (800a654 <__swsetup_r+0xd8>)
 800a5c4:	429c      	cmp	r4, r3
 800a5c6:	bf08      	it	eq
 800a5c8:	68ec      	ldreq	r4, [r5, #12]
 800a5ca:	e7e6      	b.n	800a59a <__swsetup_r+0x1e>
 800a5cc:	0758      	lsls	r0, r3, #29
 800a5ce:	d512      	bpl.n	800a5f6 <__swsetup_r+0x7a>
 800a5d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5d2:	b141      	cbz	r1, 800a5e6 <__swsetup_r+0x6a>
 800a5d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5d8:	4299      	cmp	r1, r3
 800a5da:	d002      	beq.n	800a5e2 <__swsetup_r+0x66>
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f7ff f887 	bl	80096f0 <_free_r>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	6363      	str	r3, [r4, #52]	; 0x34
 800a5e6:	89a3      	ldrh	r3, [r4, #12]
 800a5e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5ec:	81a3      	strh	r3, [r4, #12]
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	6063      	str	r3, [r4, #4]
 800a5f2:	6923      	ldr	r3, [r4, #16]
 800a5f4:	6023      	str	r3, [r4, #0]
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	f043 0308 	orr.w	r3, r3, #8
 800a5fc:	81a3      	strh	r3, [r4, #12]
 800a5fe:	6923      	ldr	r3, [r4, #16]
 800a600:	b94b      	cbnz	r3, 800a616 <__swsetup_r+0x9a>
 800a602:	89a3      	ldrh	r3, [r4, #12]
 800a604:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a60c:	d003      	beq.n	800a616 <__swsetup_r+0x9a>
 800a60e:	4621      	mov	r1, r4
 800a610:	4630      	mov	r0, r6
 800a612:	f7ff f80f 	bl	8009634 <__smakebuf_r>
 800a616:	89a0      	ldrh	r0, [r4, #12]
 800a618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a61c:	f010 0301 	ands.w	r3, r0, #1
 800a620:	d00a      	beq.n	800a638 <__swsetup_r+0xbc>
 800a622:	2300      	movs	r3, #0
 800a624:	60a3      	str	r3, [r4, #8]
 800a626:	6963      	ldr	r3, [r4, #20]
 800a628:	425b      	negs	r3, r3
 800a62a:	61a3      	str	r3, [r4, #24]
 800a62c:	6923      	ldr	r3, [r4, #16]
 800a62e:	b943      	cbnz	r3, 800a642 <__swsetup_r+0xc6>
 800a630:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a634:	d1ba      	bne.n	800a5ac <__swsetup_r+0x30>
 800a636:	bd70      	pop	{r4, r5, r6, pc}
 800a638:	0781      	lsls	r1, r0, #30
 800a63a:	bf58      	it	pl
 800a63c:	6963      	ldrpl	r3, [r4, #20]
 800a63e:	60a3      	str	r3, [r4, #8]
 800a640:	e7f4      	b.n	800a62c <__swsetup_r+0xb0>
 800a642:	2000      	movs	r0, #0
 800a644:	e7f7      	b.n	800a636 <__swsetup_r+0xba>
 800a646:	bf00      	nop
 800a648:	200002cc 	.word	0x200002cc
 800a64c:	0800bcc8 	.word	0x0800bcc8
 800a650:	0800bce8 	.word	0x0800bce8
 800a654:	0800bca8 	.word	0x0800bca8

0800a658 <_close_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4d06      	ldr	r5, [pc, #24]	; (800a674 <_close_r+0x1c>)
 800a65c:	2300      	movs	r3, #0
 800a65e:	4604      	mov	r4, r0
 800a660:	4608      	mov	r0, r1
 800a662:	602b      	str	r3, [r5, #0]
 800a664:	f7f7 f941 	bl	80018ea <_close>
 800a668:	1c43      	adds	r3, r0, #1
 800a66a:	d102      	bne.n	800a672 <_close_r+0x1a>
 800a66c:	682b      	ldr	r3, [r5, #0]
 800a66e:	b103      	cbz	r3, 800a672 <_close_r+0x1a>
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	bd38      	pop	{r3, r4, r5, pc}
 800a674:	200008d4 	.word	0x200008d4

0800a678 <quorem>:
 800a678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	6903      	ldr	r3, [r0, #16]
 800a67e:	690c      	ldr	r4, [r1, #16]
 800a680:	42a3      	cmp	r3, r4
 800a682:	4607      	mov	r7, r0
 800a684:	f2c0 8081 	blt.w	800a78a <quorem+0x112>
 800a688:	3c01      	subs	r4, #1
 800a68a:	f101 0814 	add.w	r8, r1, #20
 800a68e:	f100 0514 	add.w	r5, r0, #20
 800a692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a696:	9301      	str	r3, [sp, #4]
 800a698:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a69c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a6a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6b0:	d331      	bcc.n	800a716 <quorem+0x9e>
 800a6b2:	f04f 0e00 	mov.w	lr, #0
 800a6b6:	4640      	mov	r0, r8
 800a6b8:	46ac      	mov	ip, r5
 800a6ba:	46f2      	mov	sl, lr
 800a6bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a6c0:	b293      	uxth	r3, r2
 800a6c2:	fb06 e303 	mla	r3, r6, r3, lr
 800a6c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	ebaa 0303 	sub.w	r3, sl, r3
 800a6d0:	0c12      	lsrs	r2, r2, #16
 800a6d2:	f8dc a000 	ldr.w	sl, [ip]
 800a6d6:	fb06 e202 	mla	r2, r6, r2, lr
 800a6da:	fa13 f38a 	uxtah	r3, r3, sl
 800a6de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6e2:	fa1f fa82 	uxth.w	sl, r2
 800a6e6:	f8dc 2000 	ldr.w	r2, [ip]
 800a6ea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a6ee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6f8:	4581      	cmp	r9, r0
 800a6fa:	f84c 3b04 	str.w	r3, [ip], #4
 800a6fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a702:	d2db      	bcs.n	800a6bc <quorem+0x44>
 800a704:	f855 300b 	ldr.w	r3, [r5, fp]
 800a708:	b92b      	cbnz	r3, 800a716 <quorem+0x9e>
 800a70a:	9b01      	ldr	r3, [sp, #4]
 800a70c:	3b04      	subs	r3, #4
 800a70e:	429d      	cmp	r5, r3
 800a710:	461a      	mov	r2, r3
 800a712:	d32e      	bcc.n	800a772 <quorem+0xfa>
 800a714:	613c      	str	r4, [r7, #16]
 800a716:	4638      	mov	r0, r7
 800a718:	f001 f8e8 	bl	800b8ec <__mcmp>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	db24      	blt.n	800a76a <quorem+0xf2>
 800a720:	3601      	adds	r6, #1
 800a722:	4628      	mov	r0, r5
 800a724:	f04f 0c00 	mov.w	ip, #0
 800a728:	f858 2b04 	ldr.w	r2, [r8], #4
 800a72c:	f8d0 e000 	ldr.w	lr, [r0]
 800a730:	b293      	uxth	r3, r2
 800a732:	ebac 0303 	sub.w	r3, ip, r3
 800a736:	0c12      	lsrs	r2, r2, #16
 800a738:	fa13 f38e 	uxtah	r3, r3, lr
 800a73c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a740:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a744:	b29b      	uxth	r3, r3
 800a746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a74a:	45c1      	cmp	r9, r8
 800a74c:	f840 3b04 	str.w	r3, [r0], #4
 800a750:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a754:	d2e8      	bcs.n	800a728 <quorem+0xb0>
 800a756:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a75a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a75e:	b922      	cbnz	r2, 800a76a <quorem+0xf2>
 800a760:	3b04      	subs	r3, #4
 800a762:	429d      	cmp	r5, r3
 800a764:	461a      	mov	r2, r3
 800a766:	d30a      	bcc.n	800a77e <quorem+0x106>
 800a768:	613c      	str	r4, [r7, #16]
 800a76a:	4630      	mov	r0, r6
 800a76c:	b003      	add	sp, #12
 800a76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a772:	6812      	ldr	r2, [r2, #0]
 800a774:	3b04      	subs	r3, #4
 800a776:	2a00      	cmp	r2, #0
 800a778:	d1cc      	bne.n	800a714 <quorem+0x9c>
 800a77a:	3c01      	subs	r4, #1
 800a77c:	e7c7      	b.n	800a70e <quorem+0x96>
 800a77e:	6812      	ldr	r2, [r2, #0]
 800a780:	3b04      	subs	r3, #4
 800a782:	2a00      	cmp	r2, #0
 800a784:	d1f0      	bne.n	800a768 <quorem+0xf0>
 800a786:	3c01      	subs	r4, #1
 800a788:	e7eb      	b.n	800a762 <quorem+0xea>
 800a78a:	2000      	movs	r0, #0
 800a78c:	e7ee      	b.n	800a76c <quorem+0xf4>
	...

0800a790 <_dtoa_r>:
 800a790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	ed2d 8b02 	vpush	{d8}
 800a798:	ec57 6b10 	vmov	r6, r7, d0
 800a79c:	b095      	sub	sp, #84	; 0x54
 800a79e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a7a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a7a4:	9105      	str	r1, [sp, #20]
 800a7a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7b0:	b975      	cbnz	r5, 800a7d0 <_dtoa_r+0x40>
 800a7b2:	2010      	movs	r0, #16
 800a7b4:	f7fe ff7e 	bl	80096b4 <malloc>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	6260      	str	r0, [r4, #36]	; 0x24
 800a7bc:	b920      	cbnz	r0, 800a7c8 <_dtoa_r+0x38>
 800a7be:	4bb2      	ldr	r3, [pc, #712]	; (800aa88 <_dtoa_r+0x2f8>)
 800a7c0:	21ea      	movs	r1, #234	; 0xea
 800a7c2:	48b2      	ldr	r0, [pc, #712]	; (800aa8c <_dtoa_r+0x2fc>)
 800a7c4:	f001 f9b4 	bl	800bb30 <__assert_func>
 800a7c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7cc:	6005      	str	r5, [r0, #0]
 800a7ce:	60c5      	str	r5, [r0, #12]
 800a7d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7d2:	6819      	ldr	r1, [r3, #0]
 800a7d4:	b151      	cbz	r1, 800a7ec <_dtoa_r+0x5c>
 800a7d6:	685a      	ldr	r2, [r3, #4]
 800a7d8:	604a      	str	r2, [r1, #4]
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4093      	lsls	r3, r2
 800a7de:	608b      	str	r3, [r1, #8]
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f000 fe45 	bl	800b470 <_Bfree>
 800a7e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	1e3b      	subs	r3, r7, #0
 800a7ee:	bfb9      	ittee	lt
 800a7f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a7f4:	9303      	strlt	r3, [sp, #12]
 800a7f6:	2300      	movge	r3, #0
 800a7f8:	f8c8 3000 	strge.w	r3, [r8]
 800a7fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a800:	4ba3      	ldr	r3, [pc, #652]	; (800aa90 <_dtoa_r+0x300>)
 800a802:	bfbc      	itt	lt
 800a804:	2201      	movlt	r2, #1
 800a806:	f8c8 2000 	strlt.w	r2, [r8]
 800a80a:	ea33 0309 	bics.w	r3, r3, r9
 800a80e:	d11b      	bne.n	800a848 <_dtoa_r+0xb8>
 800a810:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a812:	f242 730f 	movw	r3, #9999	; 0x270f
 800a816:	6013      	str	r3, [r2, #0]
 800a818:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a81c:	4333      	orrs	r3, r6
 800a81e:	f000 857a 	beq.w	800b316 <_dtoa_r+0xb86>
 800a822:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a824:	b963      	cbnz	r3, 800a840 <_dtoa_r+0xb0>
 800a826:	4b9b      	ldr	r3, [pc, #620]	; (800aa94 <_dtoa_r+0x304>)
 800a828:	e024      	b.n	800a874 <_dtoa_r+0xe4>
 800a82a:	4b9b      	ldr	r3, [pc, #620]	; (800aa98 <_dtoa_r+0x308>)
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	3308      	adds	r3, #8
 800a830:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a832:	6013      	str	r3, [r2, #0]
 800a834:	9800      	ldr	r0, [sp, #0]
 800a836:	b015      	add	sp, #84	; 0x54
 800a838:	ecbd 8b02 	vpop	{d8}
 800a83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a840:	4b94      	ldr	r3, [pc, #592]	; (800aa94 <_dtoa_r+0x304>)
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	3303      	adds	r3, #3
 800a846:	e7f3      	b.n	800a830 <_dtoa_r+0xa0>
 800a848:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a84c:	2200      	movs	r2, #0
 800a84e:	ec51 0b17 	vmov	r0, r1, d7
 800a852:	2300      	movs	r3, #0
 800a854:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a858:	f7f6 f956 	bl	8000b08 <__aeabi_dcmpeq>
 800a85c:	4680      	mov	r8, r0
 800a85e:	b158      	cbz	r0, 800a878 <_dtoa_r+0xe8>
 800a860:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a862:	2301      	movs	r3, #1
 800a864:	6013      	str	r3, [r2, #0]
 800a866:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f000 8551 	beq.w	800b310 <_dtoa_r+0xb80>
 800a86e:	488b      	ldr	r0, [pc, #556]	; (800aa9c <_dtoa_r+0x30c>)
 800a870:	6018      	str	r0, [r3, #0]
 800a872:	1e43      	subs	r3, r0, #1
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	e7dd      	b.n	800a834 <_dtoa_r+0xa4>
 800a878:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a87c:	aa12      	add	r2, sp, #72	; 0x48
 800a87e:	a913      	add	r1, sp, #76	; 0x4c
 800a880:	4620      	mov	r0, r4
 800a882:	f001 f8d7 	bl	800ba34 <__d2b>
 800a886:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a88a:	4683      	mov	fp, r0
 800a88c:	2d00      	cmp	r5, #0
 800a88e:	d07c      	beq.n	800a98a <_dtoa_r+0x1fa>
 800a890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a892:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a89a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a89e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a8a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a8a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a8aa:	4b7d      	ldr	r3, [pc, #500]	; (800aaa0 <_dtoa_r+0x310>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	4639      	mov	r1, r7
 800a8b2:	f7f5 fd09 	bl	80002c8 <__aeabi_dsub>
 800a8b6:	a36e      	add	r3, pc, #440	; (adr r3, 800aa70 <_dtoa_r+0x2e0>)
 800a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8bc:	f7f5 febc 	bl	8000638 <__aeabi_dmul>
 800a8c0:	a36d      	add	r3, pc, #436	; (adr r3, 800aa78 <_dtoa_r+0x2e8>)
 800a8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c6:	f7f5 fd01 	bl	80002cc <__adddf3>
 800a8ca:	4606      	mov	r6, r0
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	460f      	mov	r7, r1
 800a8d0:	f7f5 fe48 	bl	8000564 <__aeabi_i2d>
 800a8d4:	a36a      	add	r3, pc, #424	; (adr r3, 800aa80 <_dtoa_r+0x2f0>)
 800a8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8da:	f7f5 fead 	bl	8000638 <__aeabi_dmul>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	460b      	mov	r3, r1
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	f7f5 fcf1 	bl	80002cc <__adddf3>
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	460f      	mov	r7, r1
 800a8ee:	f7f6 f953 	bl	8000b98 <__aeabi_d2iz>
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	4682      	mov	sl, r0
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	4639      	mov	r1, r7
 800a8fc:	f7f6 f90e 	bl	8000b1c <__aeabi_dcmplt>
 800a900:	b148      	cbz	r0, 800a916 <_dtoa_r+0x186>
 800a902:	4650      	mov	r0, sl
 800a904:	f7f5 fe2e 	bl	8000564 <__aeabi_i2d>
 800a908:	4632      	mov	r2, r6
 800a90a:	463b      	mov	r3, r7
 800a90c:	f7f6 f8fc 	bl	8000b08 <__aeabi_dcmpeq>
 800a910:	b908      	cbnz	r0, 800a916 <_dtoa_r+0x186>
 800a912:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a916:	f1ba 0f16 	cmp.w	sl, #22
 800a91a:	d854      	bhi.n	800a9c6 <_dtoa_r+0x236>
 800a91c:	4b61      	ldr	r3, [pc, #388]	; (800aaa4 <_dtoa_r+0x314>)
 800a91e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a92a:	f7f6 f8f7 	bl	8000b1c <__aeabi_dcmplt>
 800a92e:	2800      	cmp	r0, #0
 800a930:	d04b      	beq.n	800a9ca <_dtoa_r+0x23a>
 800a932:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a936:	2300      	movs	r3, #0
 800a938:	930e      	str	r3, [sp, #56]	; 0x38
 800a93a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a93c:	1b5d      	subs	r5, r3, r5
 800a93e:	1e6b      	subs	r3, r5, #1
 800a940:	9304      	str	r3, [sp, #16]
 800a942:	bf43      	ittte	mi
 800a944:	2300      	movmi	r3, #0
 800a946:	f1c5 0801 	rsbmi	r8, r5, #1
 800a94a:	9304      	strmi	r3, [sp, #16]
 800a94c:	f04f 0800 	movpl.w	r8, #0
 800a950:	f1ba 0f00 	cmp.w	sl, #0
 800a954:	db3b      	blt.n	800a9ce <_dtoa_r+0x23e>
 800a956:	9b04      	ldr	r3, [sp, #16]
 800a958:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a95c:	4453      	add	r3, sl
 800a95e:	9304      	str	r3, [sp, #16]
 800a960:	2300      	movs	r3, #0
 800a962:	9306      	str	r3, [sp, #24]
 800a964:	9b05      	ldr	r3, [sp, #20]
 800a966:	2b09      	cmp	r3, #9
 800a968:	d869      	bhi.n	800aa3e <_dtoa_r+0x2ae>
 800a96a:	2b05      	cmp	r3, #5
 800a96c:	bfc4      	itt	gt
 800a96e:	3b04      	subgt	r3, #4
 800a970:	9305      	strgt	r3, [sp, #20]
 800a972:	9b05      	ldr	r3, [sp, #20]
 800a974:	f1a3 0302 	sub.w	r3, r3, #2
 800a978:	bfcc      	ite	gt
 800a97a:	2500      	movgt	r5, #0
 800a97c:	2501      	movle	r5, #1
 800a97e:	2b03      	cmp	r3, #3
 800a980:	d869      	bhi.n	800aa56 <_dtoa_r+0x2c6>
 800a982:	e8df f003 	tbb	[pc, r3]
 800a986:	4e2c      	.short	0x4e2c
 800a988:	5a4c      	.short	0x5a4c
 800a98a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a98e:	441d      	add	r5, r3
 800a990:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a994:	2b20      	cmp	r3, #32
 800a996:	bfc1      	itttt	gt
 800a998:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a99c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a9a0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a9a4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a9a8:	bfda      	itte	le
 800a9aa:	f1c3 0320 	rsble	r3, r3, #32
 800a9ae:	fa06 f003 	lslle.w	r0, r6, r3
 800a9b2:	4318      	orrgt	r0, r3
 800a9b4:	f7f5 fdc6 	bl	8000544 <__aeabi_ui2d>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a9c0:	3d01      	subs	r5, #1
 800a9c2:	9310      	str	r3, [sp, #64]	; 0x40
 800a9c4:	e771      	b.n	800a8aa <_dtoa_r+0x11a>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e7b6      	b.n	800a938 <_dtoa_r+0x1a8>
 800a9ca:	900e      	str	r0, [sp, #56]	; 0x38
 800a9cc:	e7b5      	b.n	800a93a <_dtoa_r+0x1aa>
 800a9ce:	f1ca 0300 	rsb	r3, sl, #0
 800a9d2:	9306      	str	r3, [sp, #24]
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	eba8 080a 	sub.w	r8, r8, sl
 800a9da:	930d      	str	r3, [sp, #52]	; 0x34
 800a9dc:	e7c2      	b.n	800a964 <_dtoa_r+0x1d4>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	9308      	str	r3, [sp, #32]
 800a9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	dc39      	bgt.n	800aa5c <_dtoa_r+0x2cc>
 800a9e8:	f04f 0901 	mov.w	r9, #1
 800a9ec:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9f0:	464b      	mov	r3, r9
 800a9f2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a9f6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	6042      	str	r2, [r0, #4]
 800a9fc:	2204      	movs	r2, #4
 800a9fe:	f102 0614 	add.w	r6, r2, #20
 800aa02:	429e      	cmp	r6, r3
 800aa04:	6841      	ldr	r1, [r0, #4]
 800aa06:	d92f      	bls.n	800aa68 <_dtoa_r+0x2d8>
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f000 fcf1 	bl	800b3f0 <_Balloc>
 800aa0e:	9000      	str	r0, [sp, #0]
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d14b      	bne.n	800aaac <_dtoa_r+0x31c>
 800aa14:	4b24      	ldr	r3, [pc, #144]	; (800aaa8 <_dtoa_r+0x318>)
 800aa16:	4602      	mov	r2, r0
 800aa18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aa1c:	e6d1      	b.n	800a7c2 <_dtoa_r+0x32>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e7de      	b.n	800a9e0 <_dtoa_r+0x250>
 800aa22:	2300      	movs	r3, #0
 800aa24:	9308      	str	r3, [sp, #32]
 800aa26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa28:	eb0a 0903 	add.w	r9, sl, r3
 800aa2c:	f109 0301 	add.w	r3, r9, #1
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	9301      	str	r3, [sp, #4]
 800aa34:	bfb8      	it	lt
 800aa36:	2301      	movlt	r3, #1
 800aa38:	e7dd      	b.n	800a9f6 <_dtoa_r+0x266>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e7f2      	b.n	800aa24 <_dtoa_r+0x294>
 800aa3e:	2501      	movs	r5, #1
 800aa40:	2300      	movs	r3, #0
 800aa42:	9305      	str	r3, [sp, #20]
 800aa44:	9508      	str	r5, [sp, #32]
 800aa46:	f04f 39ff 	mov.w	r9, #4294967295
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f8cd 9004 	str.w	r9, [sp, #4]
 800aa50:	2312      	movs	r3, #18
 800aa52:	9209      	str	r2, [sp, #36]	; 0x24
 800aa54:	e7cf      	b.n	800a9f6 <_dtoa_r+0x266>
 800aa56:	2301      	movs	r3, #1
 800aa58:	9308      	str	r3, [sp, #32]
 800aa5a:	e7f4      	b.n	800aa46 <_dtoa_r+0x2b6>
 800aa5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800aa60:	f8cd 9004 	str.w	r9, [sp, #4]
 800aa64:	464b      	mov	r3, r9
 800aa66:	e7c6      	b.n	800a9f6 <_dtoa_r+0x266>
 800aa68:	3101      	adds	r1, #1
 800aa6a:	6041      	str	r1, [r0, #4]
 800aa6c:	0052      	lsls	r2, r2, #1
 800aa6e:	e7c6      	b.n	800a9fe <_dtoa_r+0x26e>
 800aa70:	636f4361 	.word	0x636f4361
 800aa74:	3fd287a7 	.word	0x3fd287a7
 800aa78:	8b60c8b3 	.word	0x8b60c8b3
 800aa7c:	3fc68a28 	.word	0x3fc68a28
 800aa80:	509f79fb 	.word	0x509f79fb
 800aa84:	3fd34413 	.word	0x3fd34413
 800aa88:	0800bd5e 	.word	0x0800bd5e
 800aa8c:	0800bd75 	.word	0x0800bd75
 800aa90:	7ff00000 	.word	0x7ff00000
 800aa94:	0800bd5a 	.word	0x0800bd5a
 800aa98:	0800bd51 	.word	0x0800bd51
 800aa9c:	0800bd2e 	.word	0x0800bd2e
 800aaa0:	3ff80000 	.word	0x3ff80000
 800aaa4:	0800be70 	.word	0x0800be70
 800aaa8:	0800bdd4 	.word	0x0800bdd4
 800aaac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaae:	9a00      	ldr	r2, [sp, #0]
 800aab0:	601a      	str	r2, [r3, #0]
 800aab2:	9b01      	ldr	r3, [sp, #4]
 800aab4:	2b0e      	cmp	r3, #14
 800aab6:	f200 80ad 	bhi.w	800ac14 <_dtoa_r+0x484>
 800aaba:	2d00      	cmp	r5, #0
 800aabc:	f000 80aa 	beq.w	800ac14 <_dtoa_r+0x484>
 800aac0:	f1ba 0f00 	cmp.w	sl, #0
 800aac4:	dd36      	ble.n	800ab34 <_dtoa_r+0x3a4>
 800aac6:	4ac3      	ldr	r2, [pc, #780]	; (800add4 <_dtoa_r+0x644>)
 800aac8:	f00a 030f 	and.w	r3, sl, #15
 800aacc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aad0:	ed93 7b00 	vldr	d7, [r3]
 800aad4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aad8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800aadc:	eeb0 8a47 	vmov.f32	s16, s14
 800aae0:	eef0 8a67 	vmov.f32	s17, s15
 800aae4:	d016      	beq.n	800ab14 <_dtoa_r+0x384>
 800aae6:	4bbc      	ldr	r3, [pc, #752]	; (800add8 <_dtoa_r+0x648>)
 800aae8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aaec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aaf0:	f7f5 fecc 	bl	800088c <__aeabi_ddiv>
 800aaf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaf8:	f007 070f 	and.w	r7, r7, #15
 800aafc:	2503      	movs	r5, #3
 800aafe:	4eb6      	ldr	r6, [pc, #728]	; (800add8 <_dtoa_r+0x648>)
 800ab00:	b957      	cbnz	r7, 800ab18 <_dtoa_r+0x388>
 800ab02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab06:	ec53 2b18 	vmov	r2, r3, d8
 800ab0a:	f7f5 febf 	bl	800088c <__aeabi_ddiv>
 800ab0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab12:	e029      	b.n	800ab68 <_dtoa_r+0x3d8>
 800ab14:	2502      	movs	r5, #2
 800ab16:	e7f2      	b.n	800aafe <_dtoa_r+0x36e>
 800ab18:	07f9      	lsls	r1, r7, #31
 800ab1a:	d508      	bpl.n	800ab2e <_dtoa_r+0x39e>
 800ab1c:	ec51 0b18 	vmov	r0, r1, d8
 800ab20:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ab24:	f7f5 fd88 	bl	8000638 <__aeabi_dmul>
 800ab28:	ec41 0b18 	vmov	d8, r0, r1
 800ab2c:	3501      	adds	r5, #1
 800ab2e:	107f      	asrs	r7, r7, #1
 800ab30:	3608      	adds	r6, #8
 800ab32:	e7e5      	b.n	800ab00 <_dtoa_r+0x370>
 800ab34:	f000 80a6 	beq.w	800ac84 <_dtoa_r+0x4f4>
 800ab38:	f1ca 0600 	rsb	r6, sl, #0
 800ab3c:	4ba5      	ldr	r3, [pc, #660]	; (800add4 <_dtoa_r+0x644>)
 800ab3e:	4fa6      	ldr	r7, [pc, #664]	; (800add8 <_dtoa_r+0x648>)
 800ab40:	f006 020f 	and.w	r2, r6, #15
 800ab44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab50:	f7f5 fd72 	bl	8000638 <__aeabi_dmul>
 800ab54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab58:	1136      	asrs	r6, r6, #4
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	2502      	movs	r5, #2
 800ab5e:	2e00      	cmp	r6, #0
 800ab60:	f040 8085 	bne.w	800ac6e <_dtoa_r+0x4de>
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1d2      	bne.n	800ab0e <_dtoa_r+0x37e>
 800ab68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f000 808c 	beq.w	800ac88 <_dtoa_r+0x4f8>
 800ab70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab74:	4b99      	ldr	r3, [pc, #612]	; (800addc <_dtoa_r+0x64c>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	4630      	mov	r0, r6
 800ab7a:	4639      	mov	r1, r7
 800ab7c:	f7f5 ffce 	bl	8000b1c <__aeabi_dcmplt>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	f000 8081 	beq.w	800ac88 <_dtoa_r+0x4f8>
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d07d      	beq.n	800ac88 <_dtoa_r+0x4f8>
 800ab8c:	f1b9 0f00 	cmp.w	r9, #0
 800ab90:	dd3c      	ble.n	800ac0c <_dtoa_r+0x47c>
 800ab92:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ab96:	9307      	str	r3, [sp, #28]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	4b91      	ldr	r3, [pc, #580]	; (800ade0 <_dtoa_r+0x650>)
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	4639      	mov	r1, r7
 800aba0:	f7f5 fd4a 	bl	8000638 <__aeabi_dmul>
 800aba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aba8:	3501      	adds	r5, #1
 800abaa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800abae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800abb2:	4628      	mov	r0, r5
 800abb4:	f7f5 fcd6 	bl	8000564 <__aeabi_i2d>
 800abb8:	4632      	mov	r2, r6
 800abba:	463b      	mov	r3, r7
 800abbc:	f7f5 fd3c 	bl	8000638 <__aeabi_dmul>
 800abc0:	4b88      	ldr	r3, [pc, #544]	; (800ade4 <_dtoa_r+0x654>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	f7f5 fb82 	bl	80002cc <__adddf3>
 800abc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800abcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abd0:	9303      	str	r3, [sp, #12]
 800abd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d15c      	bne.n	800ac92 <_dtoa_r+0x502>
 800abd8:	4b83      	ldr	r3, [pc, #524]	; (800ade8 <_dtoa_r+0x658>)
 800abda:	2200      	movs	r2, #0
 800abdc:	4630      	mov	r0, r6
 800abde:	4639      	mov	r1, r7
 800abe0:	f7f5 fb72 	bl	80002c8 <__aeabi_dsub>
 800abe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abe8:	4606      	mov	r6, r0
 800abea:	460f      	mov	r7, r1
 800abec:	f7f5 ffb4 	bl	8000b58 <__aeabi_dcmpgt>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	f040 8296 	bne.w	800b122 <_dtoa_r+0x992>
 800abf6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800abfa:	4630      	mov	r0, r6
 800abfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac00:	4639      	mov	r1, r7
 800ac02:	f7f5 ff8b 	bl	8000b1c <__aeabi_dcmplt>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	f040 8288 	bne.w	800b11c <_dtoa_r+0x98c>
 800ac0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ac10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f2c0 8158 	blt.w	800aecc <_dtoa_r+0x73c>
 800ac1c:	f1ba 0f0e 	cmp.w	sl, #14
 800ac20:	f300 8154 	bgt.w	800aecc <_dtoa_r+0x73c>
 800ac24:	4b6b      	ldr	r3, [pc, #428]	; (800add4 <_dtoa_r+0x644>)
 800ac26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ac2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f280 80e3 	bge.w	800adfc <_dtoa_r+0x66c>
 800ac36:	9b01      	ldr	r3, [sp, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f300 80df 	bgt.w	800adfc <_dtoa_r+0x66c>
 800ac3e:	f040 826d 	bne.w	800b11c <_dtoa_r+0x98c>
 800ac42:	4b69      	ldr	r3, [pc, #420]	; (800ade8 <_dtoa_r+0x658>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	4640      	mov	r0, r8
 800ac48:	4649      	mov	r1, r9
 800ac4a:	f7f5 fcf5 	bl	8000638 <__aeabi_dmul>
 800ac4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac52:	f7f5 ff77 	bl	8000b44 <__aeabi_dcmpge>
 800ac56:	9e01      	ldr	r6, [sp, #4]
 800ac58:	4637      	mov	r7, r6
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	f040 8243 	bne.w	800b0e6 <_dtoa_r+0x956>
 800ac60:	9d00      	ldr	r5, [sp, #0]
 800ac62:	2331      	movs	r3, #49	; 0x31
 800ac64:	f805 3b01 	strb.w	r3, [r5], #1
 800ac68:	f10a 0a01 	add.w	sl, sl, #1
 800ac6c:	e23f      	b.n	800b0ee <_dtoa_r+0x95e>
 800ac6e:	07f2      	lsls	r2, r6, #31
 800ac70:	d505      	bpl.n	800ac7e <_dtoa_r+0x4ee>
 800ac72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac76:	f7f5 fcdf 	bl	8000638 <__aeabi_dmul>
 800ac7a:	3501      	adds	r5, #1
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	1076      	asrs	r6, r6, #1
 800ac80:	3708      	adds	r7, #8
 800ac82:	e76c      	b.n	800ab5e <_dtoa_r+0x3ce>
 800ac84:	2502      	movs	r5, #2
 800ac86:	e76f      	b.n	800ab68 <_dtoa_r+0x3d8>
 800ac88:	9b01      	ldr	r3, [sp, #4]
 800ac8a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ac8e:	930c      	str	r3, [sp, #48]	; 0x30
 800ac90:	e78d      	b.n	800abae <_dtoa_r+0x41e>
 800ac92:	9900      	ldr	r1, [sp, #0]
 800ac94:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ac96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac98:	4b4e      	ldr	r3, [pc, #312]	; (800add4 <_dtoa_r+0x644>)
 800ac9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac9e:	4401      	add	r1, r0
 800aca0:	9102      	str	r1, [sp, #8]
 800aca2:	9908      	ldr	r1, [sp, #32]
 800aca4:	eeb0 8a47 	vmov.f32	s16, s14
 800aca8:	eef0 8a67 	vmov.f32	s17, s15
 800acac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acb0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800acb4:	2900      	cmp	r1, #0
 800acb6:	d045      	beq.n	800ad44 <_dtoa_r+0x5b4>
 800acb8:	494c      	ldr	r1, [pc, #304]	; (800adec <_dtoa_r+0x65c>)
 800acba:	2000      	movs	r0, #0
 800acbc:	f7f5 fde6 	bl	800088c <__aeabi_ddiv>
 800acc0:	ec53 2b18 	vmov	r2, r3, d8
 800acc4:	f7f5 fb00 	bl	80002c8 <__aeabi_dsub>
 800acc8:	9d00      	ldr	r5, [sp, #0]
 800acca:	ec41 0b18 	vmov	d8, r0, r1
 800acce:	4639      	mov	r1, r7
 800acd0:	4630      	mov	r0, r6
 800acd2:	f7f5 ff61 	bl	8000b98 <__aeabi_d2iz>
 800acd6:	900c      	str	r0, [sp, #48]	; 0x30
 800acd8:	f7f5 fc44 	bl	8000564 <__aeabi_i2d>
 800acdc:	4602      	mov	r2, r0
 800acde:	460b      	mov	r3, r1
 800ace0:	4630      	mov	r0, r6
 800ace2:	4639      	mov	r1, r7
 800ace4:	f7f5 faf0 	bl	80002c8 <__aeabi_dsub>
 800ace8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acea:	3330      	adds	r3, #48	; 0x30
 800acec:	f805 3b01 	strb.w	r3, [r5], #1
 800acf0:	ec53 2b18 	vmov	r2, r3, d8
 800acf4:	4606      	mov	r6, r0
 800acf6:	460f      	mov	r7, r1
 800acf8:	f7f5 ff10 	bl	8000b1c <__aeabi_dcmplt>
 800acfc:	2800      	cmp	r0, #0
 800acfe:	d165      	bne.n	800adcc <_dtoa_r+0x63c>
 800ad00:	4632      	mov	r2, r6
 800ad02:	463b      	mov	r3, r7
 800ad04:	4935      	ldr	r1, [pc, #212]	; (800addc <_dtoa_r+0x64c>)
 800ad06:	2000      	movs	r0, #0
 800ad08:	f7f5 fade 	bl	80002c8 <__aeabi_dsub>
 800ad0c:	ec53 2b18 	vmov	r2, r3, d8
 800ad10:	f7f5 ff04 	bl	8000b1c <__aeabi_dcmplt>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	f040 80b9 	bne.w	800ae8c <_dtoa_r+0x6fc>
 800ad1a:	9b02      	ldr	r3, [sp, #8]
 800ad1c:	429d      	cmp	r5, r3
 800ad1e:	f43f af75 	beq.w	800ac0c <_dtoa_r+0x47c>
 800ad22:	4b2f      	ldr	r3, [pc, #188]	; (800ade0 <_dtoa_r+0x650>)
 800ad24:	ec51 0b18 	vmov	r0, r1, d8
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f7f5 fc85 	bl	8000638 <__aeabi_dmul>
 800ad2e:	4b2c      	ldr	r3, [pc, #176]	; (800ade0 <_dtoa_r+0x650>)
 800ad30:	ec41 0b18 	vmov	d8, r0, r1
 800ad34:	2200      	movs	r2, #0
 800ad36:	4630      	mov	r0, r6
 800ad38:	4639      	mov	r1, r7
 800ad3a:	f7f5 fc7d 	bl	8000638 <__aeabi_dmul>
 800ad3e:	4606      	mov	r6, r0
 800ad40:	460f      	mov	r7, r1
 800ad42:	e7c4      	b.n	800acce <_dtoa_r+0x53e>
 800ad44:	ec51 0b17 	vmov	r0, r1, d7
 800ad48:	f7f5 fc76 	bl	8000638 <__aeabi_dmul>
 800ad4c:	9b02      	ldr	r3, [sp, #8]
 800ad4e:	9d00      	ldr	r5, [sp, #0]
 800ad50:	930c      	str	r3, [sp, #48]	; 0x30
 800ad52:	ec41 0b18 	vmov	d8, r0, r1
 800ad56:	4639      	mov	r1, r7
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f7f5 ff1d 	bl	8000b98 <__aeabi_d2iz>
 800ad5e:	9011      	str	r0, [sp, #68]	; 0x44
 800ad60:	f7f5 fc00 	bl	8000564 <__aeabi_i2d>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	4630      	mov	r0, r6
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	f7f5 faac 	bl	80002c8 <__aeabi_dsub>
 800ad70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad72:	3330      	adds	r3, #48	; 0x30
 800ad74:	f805 3b01 	strb.w	r3, [r5], #1
 800ad78:	9b02      	ldr	r3, [sp, #8]
 800ad7a:	429d      	cmp	r5, r3
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	460f      	mov	r7, r1
 800ad80:	f04f 0200 	mov.w	r2, #0
 800ad84:	d134      	bne.n	800adf0 <_dtoa_r+0x660>
 800ad86:	4b19      	ldr	r3, [pc, #100]	; (800adec <_dtoa_r+0x65c>)
 800ad88:	ec51 0b18 	vmov	r0, r1, d8
 800ad8c:	f7f5 fa9e 	bl	80002cc <__adddf3>
 800ad90:	4602      	mov	r2, r0
 800ad92:	460b      	mov	r3, r1
 800ad94:	4630      	mov	r0, r6
 800ad96:	4639      	mov	r1, r7
 800ad98:	f7f5 fede 	bl	8000b58 <__aeabi_dcmpgt>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d175      	bne.n	800ae8c <_dtoa_r+0x6fc>
 800ada0:	ec53 2b18 	vmov	r2, r3, d8
 800ada4:	4911      	ldr	r1, [pc, #68]	; (800adec <_dtoa_r+0x65c>)
 800ada6:	2000      	movs	r0, #0
 800ada8:	f7f5 fa8e 	bl	80002c8 <__aeabi_dsub>
 800adac:	4602      	mov	r2, r0
 800adae:	460b      	mov	r3, r1
 800adb0:	4630      	mov	r0, r6
 800adb2:	4639      	mov	r1, r7
 800adb4:	f7f5 feb2 	bl	8000b1c <__aeabi_dcmplt>
 800adb8:	2800      	cmp	r0, #0
 800adba:	f43f af27 	beq.w	800ac0c <_dtoa_r+0x47c>
 800adbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800adc0:	1e6b      	subs	r3, r5, #1
 800adc2:	930c      	str	r3, [sp, #48]	; 0x30
 800adc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800adc8:	2b30      	cmp	r3, #48	; 0x30
 800adca:	d0f8      	beq.n	800adbe <_dtoa_r+0x62e>
 800adcc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800add0:	e04a      	b.n	800ae68 <_dtoa_r+0x6d8>
 800add2:	bf00      	nop
 800add4:	0800be70 	.word	0x0800be70
 800add8:	0800be48 	.word	0x0800be48
 800addc:	3ff00000 	.word	0x3ff00000
 800ade0:	40240000 	.word	0x40240000
 800ade4:	401c0000 	.word	0x401c0000
 800ade8:	40140000 	.word	0x40140000
 800adec:	3fe00000 	.word	0x3fe00000
 800adf0:	4baf      	ldr	r3, [pc, #700]	; (800b0b0 <_dtoa_r+0x920>)
 800adf2:	f7f5 fc21 	bl	8000638 <__aeabi_dmul>
 800adf6:	4606      	mov	r6, r0
 800adf8:	460f      	mov	r7, r1
 800adfa:	e7ac      	b.n	800ad56 <_dtoa_r+0x5c6>
 800adfc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ae00:	9d00      	ldr	r5, [sp, #0]
 800ae02:	4642      	mov	r2, r8
 800ae04:	464b      	mov	r3, r9
 800ae06:	4630      	mov	r0, r6
 800ae08:	4639      	mov	r1, r7
 800ae0a:	f7f5 fd3f 	bl	800088c <__aeabi_ddiv>
 800ae0e:	f7f5 fec3 	bl	8000b98 <__aeabi_d2iz>
 800ae12:	9002      	str	r0, [sp, #8]
 800ae14:	f7f5 fba6 	bl	8000564 <__aeabi_i2d>
 800ae18:	4642      	mov	r2, r8
 800ae1a:	464b      	mov	r3, r9
 800ae1c:	f7f5 fc0c 	bl	8000638 <__aeabi_dmul>
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	4630      	mov	r0, r6
 800ae26:	4639      	mov	r1, r7
 800ae28:	f7f5 fa4e 	bl	80002c8 <__aeabi_dsub>
 800ae2c:	9e02      	ldr	r6, [sp, #8]
 800ae2e:	9f01      	ldr	r7, [sp, #4]
 800ae30:	3630      	adds	r6, #48	; 0x30
 800ae32:	f805 6b01 	strb.w	r6, [r5], #1
 800ae36:	9e00      	ldr	r6, [sp, #0]
 800ae38:	1bae      	subs	r6, r5, r6
 800ae3a:	42b7      	cmp	r7, r6
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	d137      	bne.n	800aeb2 <_dtoa_r+0x722>
 800ae42:	f7f5 fa43 	bl	80002cc <__adddf3>
 800ae46:	4642      	mov	r2, r8
 800ae48:	464b      	mov	r3, r9
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	460f      	mov	r7, r1
 800ae4e:	f7f5 fe83 	bl	8000b58 <__aeabi_dcmpgt>
 800ae52:	b9c8      	cbnz	r0, 800ae88 <_dtoa_r+0x6f8>
 800ae54:	4642      	mov	r2, r8
 800ae56:	464b      	mov	r3, r9
 800ae58:	4630      	mov	r0, r6
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	f7f5 fe54 	bl	8000b08 <__aeabi_dcmpeq>
 800ae60:	b110      	cbz	r0, 800ae68 <_dtoa_r+0x6d8>
 800ae62:	9b02      	ldr	r3, [sp, #8]
 800ae64:	07d9      	lsls	r1, r3, #31
 800ae66:	d40f      	bmi.n	800ae88 <_dtoa_r+0x6f8>
 800ae68:	4620      	mov	r0, r4
 800ae6a:	4659      	mov	r1, fp
 800ae6c:	f000 fb00 	bl	800b470 <_Bfree>
 800ae70:	2300      	movs	r3, #0
 800ae72:	702b      	strb	r3, [r5, #0]
 800ae74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae76:	f10a 0001 	add.w	r0, sl, #1
 800ae7a:	6018      	str	r0, [r3, #0]
 800ae7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f43f acd8 	beq.w	800a834 <_dtoa_r+0xa4>
 800ae84:	601d      	str	r5, [r3, #0]
 800ae86:	e4d5      	b.n	800a834 <_dtoa_r+0xa4>
 800ae88:	f8cd a01c 	str.w	sl, [sp, #28]
 800ae8c:	462b      	mov	r3, r5
 800ae8e:	461d      	mov	r5, r3
 800ae90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae94:	2a39      	cmp	r2, #57	; 0x39
 800ae96:	d108      	bne.n	800aeaa <_dtoa_r+0x71a>
 800ae98:	9a00      	ldr	r2, [sp, #0]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d1f7      	bne.n	800ae8e <_dtoa_r+0x6fe>
 800ae9e:	9a07      	ldr	r2, [sp, #28]
 800aea0:	9900      	ldr	r1, [sp, #0]
 800aea2:	3201      	adds	r2, #1
 800aea4:	9207      	str	r2, [sp, #28]
 800aea6:	2230      	movs	r2, #48	; 0x30
 800aea8:	700a      	strb	r2, [r1, #0]
 800aeaa:	781a      	ldrb	r2, [r3, #0]
 800aeac:	3201      	adds	r2, #1
 800aeae:	701a      	strb	r2, [r3, #0]
 800aeb0:	e78c      	b.n	800adcc <_dtoa_r+0x63c>
 800aeb2:	4b7f      	ldr	r3, [pc, #508]	; (800b0b0 <_dtoa_r+0x920>)
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f7f5 fbbf 	bl	8000638 <__aeabi_dmul>
 800aeba:	2200      	movs	r2, #0
 800aebc:	2300      	movs	r3, #0
 800aebe:	4606      	mov	r6, r0
 800aec0:	460f      	mov	r7, r1
 800aec2:	f7f5 fe21 	bl	8000b08 <__aeabi_dcmpeq>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d09b      	beq.n	800ae02 <_dtoa_r+0x672>
 800aeca:	e7cd      	b.n	800ae68 <_dtoa_r+0x6d8>
 800aecc:	9a08      	ldr	r2, [sp, #32]
 800aece:	2a00      	cmp	r2, #0
 800aed0:	f000 80c4 	beq.w	800b05c <_dtoa_r+0x8cc>
 800aed4:	9a05      	ldr	r2, [sp, #20]
 800aed6:	2a01      	cmp	r2, #1
 800aed8:	f300 80a8 	bgt.w	800b02c <_dtoa_r+0x89c>
 800aedc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aede:	2a00      	cmp	r2, #0
 800aee0:	f000 80a0 	beq.w	800b024 <_dtoa_r+0x894>
 800aee4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aee8:	9e06      	ldr	r6, [sp, #24]
 800aeea:	4645      	mov	r5, r8
 800aeec:	9a04      	ldr	r2, [sp, #16]
 800aeee:	2101      	movs	r1, #1
 800aef0:	441a      	add	r2, r3
 800aef2:	4620      	mov	r0, r4
 800aef4:	4498      	add	r8, r3
 800aef6:	9204      	str	r2, [sp, #16]
 800aef8:	f000 fb76 	bl	800b5e8 <__i2b>
 800aefc:	4607      	mov	r7, r0
 800aefe:	2d00      	cmp	r5, #0
 800af00:	dd0b      	ble.n	800af1a <_dtoa_r+0x78a>
 800af02:	9b04      	ldr	r3, [sp, #16]
 800af04:	2b00      	cmp	r3, #0
 800af06:	dd08      	ble.n	800af1a <_dtoa_r+0x78a>
 800af08:	42ab      	cmp	r3, r5
 800af0a:	9a04      	ldr	r2, [sp, #16]
 800af0c:	bfa8      	it	ge
 800af0e:	462b      	movge	r3, r5
 800af10:	eba8 0803 	sub.w	r8, r8, r3
 800af14:	1aed      	subs	r5, r5, r3
 800af16:	1ad3      	subs	r3, r2, r3
 800af18:	9304      	str	r3, [sp, #16]
 800af1a:	9b06      	ldr	r3, [sp, #24]
 800af1c:	b1fb      	cbz	r3, 800af5e <_dtoa_r+0x7ce>
 800af1e:	9b08      	ldr	r3, [sp, #32]
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 809f 	beq.w	800b064 <_dtoa_r+0x8d4>
 800af26:	2e00      	cmp	r6, #0
 800af28:	dd11      	ble.n	800af4e <_dtoa_r+0x7be>
 800af2a:	4639      	mov	r1, r7
 800af2c:	4632      	mov	r2, r6
 800af2e:	4620      	mov	r0, r4
 800af30:	f000 fc16 	bl	800b760 <__pow5mult>
 800af34:	465a      	mov	r2, fp
 800af36:	4601      	mov	r1, r0
 800af38:	4607      	mov	r7, r0
 800af3a:	4620      	mov	r0, r4
 800af3c:	f000 fb6a 	bl	800b614 <__multiply>
 800af40:	4659      	mov	r1, fp
 800af42:	9007      	str	r0, [sp, #28]
 800af44:	4620      	mov	r0, r4
 800af46:	f000 fa93 	bl	800b470 <_Bfree>
 800af4a:	9b07      	ldr	r3, [sp, #28]
 800af4c:	469b      	mov	fp, r3
 800af4e:	9b06      	ldr	r3, [sp, #24]
 800af50:	1b9a      	subs	r2, r3, r6
 800af52:	d004      	beq.n	800af5e <_dtoa_r+0x7ce>
 800af54:	4659      	mov	r1, fp
 800af56:	4620      	mov	r0, r4
 800af58:	f000 fc02 	bl	800b760 <__pow5mult>
 800af5c:	4683      	mov	fp, r0
 800af5e:	2101      	movs	r1, #1
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fb41 	bl	800b5e8 <__i2b>
 800af66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af68:	2b00      	cmp	r3, #0
 800af6a:	4606      	mov	r6, r0
 800af6c:	dd7c      	ble.n	800b068 <_dtoa_r+0x8d8>
 800af6e:	461a      	mov	r2, r3
 800af70:	4601      	mov	r1, r0
 800af72:	4620      	mov	r0, r4
 800af74:	f000 fbf4 	bl	800b760 <__pow5mult>
 800af78:	9b05      	ldr	r3, [sp, #20]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	4606      	mov	r6, r0
 800af7e:	dd76      	ble.n	800b06e <_dtoa_r+0x8de>
 800af80:	2300      	movs	r3, #0
 800af82:	9306      	str	r3, [sp, #24]
 800af84:	6933      	ldr	r3, [r6, #16]
 800af86:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af8a:	6918      	ldr	r0, [r3, #16]
 800af8c:	f000 fadc 	bl	800b548 <__hi0bits>
 800af90:	f1c0 0020 	rsb	r0, r0, #32
 800af94:	9b04      	ldr	r3, [sp, #16]
 800af96:	4418      	add	r0, r3
 800af98:	f010 001f 	ands.w	r0, r0, #31
 800af9c:	f000 8086 	beq.w	800b0ac <_dtoa_r+0x91c>
 800afa0:	f1c0 0320 	rsb	r3, r0, #32
 800afa4:	2b04      	cmp	r3, #4
 800afa6:	dd7f      	ble.n	800b0a8 <_dtoa_r+0x918>
 800afa8:	f1c0 001c 	rsb	r0, r0, #28
 800afac:	9b04      	ldr	r3, [sp, #16]
 800afae:	4403      	add	r3, r0
 800afb0:	4480      	add	r8, r0
 800afb2:	4405      	add	r5, r0
 800afb4:	9304      	str	r3, [sp, #16]
 800afb6:	f1b8 0f00 	cmp.w	r8, #0
 800afba:	dd05      	ble.n	800afc8 <_dtoa_r+0x838>
 800afbc:	4659      	mov	r1, fp
 800afbe:	4642      	mov	r2, r8
 800afc0:	4620      	mov	r0, r4
 800afc2:	f000 fc27 	bl	800b814 <__lshift>
 800afc6:	4683      	mov	fp, r0
 800afc8:	9b04      	ldr	r3, [sp, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	dd05      	ble.n	800afda <_dtoa_r+0x84a>
 800afce:	4631      	mov	r1, r6
 800afd0:	461a      	mov	r2, r3
 800afd2:	4620      	mov	r0, r4
 800afd4:	f000 fc1e 	bl	800b814 <__lshift>
 800afd8:	4606      	mov	r6, r0
 800afda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d069      	beq.n	800b0b4 <_dtoa_r+0x924>
 800afe0:	4631      	mov	r1, r6
 800afe2:	4658      	mov	r0, fp
 800afe4:	f000 fc82 	bl	800b8ec <__mcmp>
 800afe8:	2800      	cmp	r0, #0
 800afea:	da63      	bge.n	800b0b4 <_dtoa_r+0x924>
 800afec:	2300      	movs	r3, #0
 800afee:	4659      	mov	r1, fp
 800aff0:	220a      	movs	r2, #10
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 fa5e 	bl	800b4b4 <__multadd>
 800aff8:	9b08      	ldr	r3, [sp, #32]
 800affa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800affe:	4683      	mov	fp, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	f000 818f 	beq.w	800b324 <_dtoa_r+0xb94>
 800b006:	4639      	mov	r1, r7
 800b008:	2300      	movs	r3, #0
 800b00a:	220a      	movs	r2, #10
 800b00c:	4620      	mov	r0, r4
 800b00e:	f000 fa51 	bl	800b4b4 <__multadd>
 800b012:	f1b9 0f00 	cmp.w	r9, #0
 800b016:	4607      	mov	r7, r0
 800b018:	f300 808e 	bgt.w	800b138 <_dtoa_r+0x9a8>
 800b01c:	9b05      	ldr	r3, [sp, #20]
 800b01e:	2b02      	cmp	r3, #2
 800b020:	dc50      	bgt.n	800b0c4 <_dtoa_r+0x934>
 800b022:	e089      	b.n	800b138 <_dtoa_r+0x9a8>
 800b024:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b026:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b02a:	e75d      	b.n	800aee8 <_dtoa_r+0x758>
 800b02c:	9b01      	ldr	r3, [sp, #4]
 800b02e:	1e5e      	subs	r6, r3, #1
 800b030:	9b06      	ldr	r3, [sp, #24]
 800b032:	42b3      	cmp	r3, r6
 800b034:	bfbf      	itttt	lt
 800b036:	9b06      	ldrlt	r3, [sp, #24]
 800b038:	9606      	strlt	r6, [sp, #24]
 800b03a:	1af2      	sublt	r2, r6, r3
 800b03c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b03e:	bfb6      	itet	lt
 800b040:	189b      	addlt	r3, r3, r2
 800b042:	1b9e      	subge	r6, r3, r6
 800b044:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b046:	9b01      	ldr	r3, [sp, #4]
 800b048:	bfb8      	it	lt
 800b04a:	2600      	movlt	r6, #0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	bfb5      	itete	lt
 800b050:	eba8 0503 	sublt.w	r5, r8, r3
 800b054:	9b01      	ldrge	r3, [sp, #4]
 800b056:	2300      	movlt	r3, #0
 800b058:	4645      	movge	r5, r8
 800b05a:	e747      	b.n	800aeec <_dtoa_r+0x75c>
 800b05c:	9e06      	ldr	r6, [sp, #24]
 800b05e:	9f08      	ldr	r7, [sp, #32]
 800b060:	4645      	mov	r5, r8
 800b062:	e74c      	b.n	800aefe <_dtoa_r+0x76e>
 800b064:	9a06      	ldr	r2, [sp, #24]
 800b066:	e775      	b.n	800af54 <_dtoa_r+0x7c4>
 800b068:	9b05      	ldr	r3, [sp, #20]
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	dc18      	bgt.n	800b0a0 <_dtoa_r+0x910>
 800b06e:	9b02      	ldr	r3, [sp, #8]
 800b070:	b9b3      	cbnz	r3, 800b0a0 <_dtoa_r+0x910>
 800b072:	9b03      	ldr	r3, [sp, #12]
 800b074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b078:	b9a3      	cbnz	r3, 800b0a4 <_dtoa_r+0x914>
 800b07a:	9b03      	ldr	r3, [sp, #12]
 800b07c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b080:	0d1b      	lsrs	r3, r3, #20
 800b082:	051b      	lsls	r3, r3, #20
 800b084:	b12b      	cbz	r3, 800b092 <_dtoa_r+0x902>
 800b086:	9b04      	ldr	r3, [sp, #16]
 800b088:	3301      	adds	r3, #1
 800b08a:	9304      	str	r3, [sp, #16]
 800b08c:	f108 0801 	add.w	r8, r8, #1
 800b090:	2301      	movs	r3, #1
 800b092:	9306      	str	r3, [sp, #24]
 800b094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b096:	2b00      	cmp	r3, #0
 800b098:	f47f af74 	bne.w	800af84 <_dtoa_r+0x7f4>
 800b09c:	2001      	movs	r0, #1
 800b09e:	e779      	b.n	800af94 <_dtoa_r+0x804>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	e7f6      	b.n	800b092 <_dtoa_r+0x902>
 800b0a4:	9b02      	ldr	r3, [sp, #8]
 800b0a6:	e7f4      	b.n	800b092 <_dtoa_r+0x902>
 800b0a8:	d085      	beq.n	800afb6 <_dtoa_r+0x826>
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	301c      	adds	r0, #28
 800b0ae:	e77d      	b.n	800afac <_dtoa_r+0x81c>
 800b0b0:	40240000 	.word	0x40240000
 800b0b4:	9b01      	ldr	r3, [sp, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	dc38      	bgt.n	800b12c <_dtoa_r+0x99c>
 800b0ba:	9b05      	ldr	r3, [sp, #20]
 800b0bc:	2b02      	cmp	r3, #2
 800b0be:	dd35      	ble.n	800b12c <_dtoa_r+0x99c>
 800b0c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b0c4:	f1b9 0f00 	cmp.w	r9, #0
 800b0c8:	d10d      	bne.n	800b0e6 <_dtoa_r+0x956>
 800b0ca:	4631      	mov	r1, r6
 800b0cc:	464b      	mov	r3, r9
 800b0ce:	2205      	movs	r2, #5
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f000 f9ef 	bl	800b4b4 <__multadd>
 800b0d6:	4601      	mov	r1, r0
 800b0d8:	4606      	mov	r6, r0
 800b0da:	4658      	mov	r0, fp
 800b0dc:	f000 fc06 	bl	800b8ec <__mcmp>
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	f73f adbd 	bgt.w	800ac60 <_dtoa_r+0x4d0>
 800b0e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e8:	9d00      	ldr	r5, [sp, #0]
 800b0ea:	ea6f 0a03 	mvn.w	sl, r3
 800b0ee:	f04f 0800 	mov.w	r8, #0
 800b0f2:	4631      	mov	r1, r6
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f000 f9bb 	bl	800b470 <_Bfree>
 800b0fa:	2f00      	cmp	r7, #0
 800b0fc:	f43f aeb4 	beq.w	800ae68 <_dtoa_r+0x6d8>
 800b100:	f1b8 0f00 	cmp.w	r8, #0
 800b104:	d005      	beq.n	800b112 <_dtoa_r+0x982>
 800b106:	45b8      	cmp	r8, r7
 800b108:	d003      	beq.n	800b112 <_dtoa_r+0x982>
 800b10a:	4641      	mov	r1, r8
 800b10c:	4620      	mov	r0, r4
 800b10e:	f000 f9af 	bl	800b470 <_Bfree>
 800b112:	4639      	mov	r1, r7
 800b114:	4620      	mov	r0, r4
 800b116:	f000 f9ab 	bl	800b470 <_Bfree>
 800b11a:	e6a5      	b.n	800ae68 <_dtoa_r+0x6d8>
 800b11c:	2600      	movs	r6, #0
 800b11e:	4637      	mov	r7, r6
 800b120:	e7e1      	b.n	800b0e6 <_dtoa_r+0x956>
 800b122:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b124:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b128:	4637      	mov	r7, r6
 800b12a:	e599      	b.n	800ac60 <_dtoa_r+0x4d0>
 800b12c:	9b08      	ldr	r3, [sp, #32]
 800b12e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	f000 80fd 	beq.w	800b332 <_dtoa_r+0xba2>
 800b138:	2d00      	cmp	r5, #0
 800b13a:	dd05      	ble.n	800b148 <_dtoa_r+0x9b8>
 800b13c:	4639      	mov	r1, r7
 800b13e:	462a      	mov	r2, r5
 800b140:	4620      	mov	r0, r4
 800b142:	f000 fb67 	bl	800b814 <__lshift>
 800b146:	4607      	mov	r7, r0
 800b148:	9b06      	ldr	r3, [sp, #24]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d05c      	beq.n	800b208 <_dtoa_r+0xa78>
 800b14e:	6879      	ldr	r1, [r7, #4]
 800b150:	4620      	mov	r0, r4
 800b152:	f000 f94d 	bl	800b3f0 <_Balloc>
 800b156:	4605      	mov	r5, r0
 800b158:	b928      	cbnz	r0, 800b166 <_dtoa_r+0x9d6>
 800b15a:	4b80      	ldr	r3, [pc, #512]	; (800b35c <_dtoa_r+0xbcc>)
 800b15c:	4602      	mov	r2, r0
 800b15e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b162:	f7ff bb2e 	b.w	800a7c2 <_dtoa_r+0x32>
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	3202      	adds	r2, #2
 800b16a:	0092      	lsls	r2, r2, #2
 800b16c:	f107 010c 	add.w	r1, r7, #12
 800b170:	300c      	adds	r0, #12
 800b172:	f7fe faa7 	bl	80096c4 <memcpy>
 800b176:	2201      	movs	r2, #1
 800b178:	4629      	mov	r1, r5
 800b17a:	4620      	mov	r0, r4
 800b17c:	f000 fb4a 	bl	800b814 <__lshift>
 800b180:	9b00      	ldr	r3, [sp, #0]
 800b182:	3301      	adds	r3, #1
 800b184:	9301      	str	r3, [sp, #4]
 800b186:	9b00      	ldr	r3, [sp, #0]
 800b188:	444b      	add	r3, r9
 800b18a:	9307      	str	r3, [sp, #28]
 800b18c:	9b02      	ldr	r3, [sp, #8]
 800b18e:	f003 0301 	and.w	r3, r3, #1
 800b192:	46b8      	mov	r8, r7
 800b194:	9306      	str	r3, [sp, #24]
 800b196:	4607      	mov	r7, r0
 800b198:	9b01      	ldr	r3, [sp, #4]
 800b19a:	4631      	mov	r1, r6
 800b19c:	3b01      	subs	r3, #1
 800b19e:	4658      	mov	r0, fp
 800b1a0:	9302      	str	r3, [sp, #8]
 800b1a2:	f7ff fa69 	bl	800a678 <quorem>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	3330      	adds	r3, #48	; 0x30
 800b1aa:	9004      	str	r0, [sp, #16]
 800b1ac:	4641      	mov	r1, r8
 800b1ae:	4658      	mov	r0, fp
 800b1b0:	9308      	str	r3, [sp, #32]
 800b1b2:	f000 fb9b 	bl	800b8ec <__mcmp>
 800b1b6:	463a      	mov	r2, r7
 800b1b8:	4681      	mov	r9, r0
 800b1ba:	4631      	mov	r1, r6
 800b1bc:	4620      	mov	r0, r4
 800b1be:	f000 fbb1 	bl	800b924 <__mdiff>
 800b1c2:	68c2      	ldr	r2, [r0, #12]
 800b1c4:	9b08      	ldr	r3, [sp, #32]
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	bb02      	cbnz	r2, 800b20c <_dtoa_r+0xa7c>
 800b1ca:	4601      	mov	r1, r0
 800b1cc:	4658      	mov	r0, fp
 800b1ce:	f000 fb8d 	bl	800b8ec <__mcmp>
 800b1d2:	9b08      	ldr	r3, [sp, #32]
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	4620      	mov	r0, r4
 800b1da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b1de:	f000 f947 	bl	800b470 <_Bfree>
 800b1e2:	9b05      	ldr	r3, [sp, #20]
 800b1e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1e6:	9d01      	ldr	r5, [sp, #4]
 800b1e8:	ea43 0102 	orr.w	r1, r3, r2
 800b1ec:	9b06      	ldr	r3, [sp, #24]
 800b1ee:	430b      	orrs	r3, r1
 800b1f0:	9b08      	ldr	r3, [sp, #32]
 800b1f2:	d10d      	bne.n	800b210 <_dtoa_r+0xa80>
 800b1f4:	2b39      	cmp	r3, #57	; 0x39
 800b1f6:	d029      	beq.n	800b24c <_dtoa_r+0xabc>
 800b1f8:	f1b9 0f00 	cmp.w	r9, #0
 800b1fc:	dd01      	ble.n	800b202 <_dtoa_r+0xa72>
 800b1fe:	9b04      	ldr	r3, [sp, #16]
 800b200:	3331      	adds	r3, #49	; 0x31
 800b202:	9a02      	ldr	r2, [sp, #8]
 800b204:	7013      	strb	r3, [r2, #0]
 800b206:	e774      	b.n	800b0f2 <_dtoa_r+0x962>
 800b208:	4638      	mov	r0, r7
 800b20a:	e7b9      	b.n	800b180 <_dtoa_r+0x9f0>
 800b20c:	2201      	movs	r2, #1
 800b20e:	e7e2      	b.n	800b1d6 <_dtoa_r+0xa46>
 800b210:	f1b9 0f00 	cmp.w	r9, #0
 800b214:	db06      	blt.n	800b224 <_dtoa_r+0xa94>
 800b216:	9905      	ldr	r1, [sp, #20]
 800b218:	ea41 0909 	orr.w	r9, r1, r9
 800b21c:	9906      	ldr	r1, [sp, #24]
 800b21e:	ea59 0101 	orrs.w	r1, r9, r1
 800b222:	d120      	bne.n	800b266 <_dtoa_r+0xad6>
 800b224:	2a00      	cmp	r2, #0
 800b226:	ddec      	ble.n	800b202 <_dtoa_r+0xa72>
 800b228:	4659      	mov	r1, fp
 800b22a:	2201      	movs	r2, #1
 800b22c:	4620      	mov	r0, r4
 800b22e:	9301      	str	r3, [sp, #4]
 800b230:	f000 faf0 	bl	800b814 <__lshift>
 800b234:	4631      	mov	r1, r6
 800b236:	4683      	mov	fp, r0
 800b238:	f000 fb58 	bl	800b8ec <__mcmp>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	9b01      	ldr	r3, [sp, #4]
 800b240:	dc02      	bgt.n	800b248 <_dtoa_r+0xab8>
 800b242:	d1de      	bne.n	800b202 <_dtoa_r+0xa72>
 800b244:	07da      	lsls	r2, r3, #31
 800b246:	d5dc      	bpl.n	800b202 <_dtoa_r+0xa72>
 800b248:	2b39      	cmp	r3, #57	; 0x39
 800b24a:	d1d8      	bne.n	800b1fe <_dtoa_r+0xa6e>
 800b24c:	9a02      	ldr	r2, [sp, #8]
 800b24e:	2339      	movs	r3, #57	; 0x39
 800b250:	7013      	strb	r3, [r2, #0]
 800b252:	462b      	mov	r3, r5
 800b254:	461d      	mov	r5, r3
 800b256:	3b01      	subs	r3, #1
 800b258:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b25c:	2a39      	cmp	r2, #57	; 0x39
 800b25e:	d050      	beq.n	800b302 <_dtoa_r+0xb72>
 800b260:	3201      	adds	r2, #1
 800b262:	701a      	strb	r2, [r3, #0]
 800b264:	e745      	b.n	800b0f2 <_dtoa_r+0x962>
 800b266:	2a00      	cmp	r2, #0
 800b268:	dd03      	ble.n	800b272 <_dtoa_r+0xae2>
 800b26a:	2b39      	cmp	r3, #57	; 0x39
 800b26c:	d0ee      	beq.n	800b24c <_dtoa_r+0xabc>
 800b26e:	3301      	adds	r3, #1
 800b270:	e7c7      	b.n	800b202 <_dtoa_r+0xa72>
 800b272:	9a01      	ldr	r2, [sp, #4]
 800b274:	9907      	ldr	r1, [sp, #28]
 800b276:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b27a:	428a      	cmp	r2, r1
 800b27c:	d02a      	beq.n	800b2d4 <_dtoa_r+0xb44>
 800b27e:	4659      	mov	r1, fp
 800b280:	2300      	movs	r3, #0
 800b282:	220a      	movs	r2, #10
 800b284:	4620      	mov	r0, r4
 800b286:	f000 f915 	bl	800b4b4 <__multadd>
 800b28a:	45b8      	cmp	r8, r7
 800b28c:	4683      	mov	fp, r0
 800b28e:	f04f 0300 	mov.w	r3, #0
 800b292:	f04f 020a 	mov.w	r2, #10
 800b296:	4641      	mov	r1, r8
 800b298:	4620      	mov	r0, r4
 800b29a:	d107      	bne.n	800b2ac <_dtoa_r+0xb1c>
 800b29c:	f000 f90a 	bl	800b4b4 <__multadd>
 800b2a0:	4680      	mov	r8, r0
 800b2a2:	4607      	mov	r7, r0
 800b2a4:	9b01      	ldr	r3, [sp, #4]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	9301      	str	r3, [sp, #4]
 800b2aa:	e775      	b.n	800b198 <_dtoa_r+0xa08>
 800b2ac:	f000 f902 	bl	800b4b4 <__multadd>
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	4680      	mov	r8, r0
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	220a      	movs	r2, #10
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f000 f8fb 	bl	800b4b4 <__multadd>
 800b2be:	4607      	mov	r7, r0
 800b2c0:	e7f0      	b.n	800b2a4 <_dtoa_r+0xb14>
 800b2c2:	f1b9 0f00 	cmp.w	r9, #0
 800b2c6:	9a00      	ldr	r2, [sp, #0]
 800b2c8:	bfcc      	ite	gt
 800b2ca:	464d      	movgt	r5, r9
 800b2cc:	2501      	movle	r5, #1
 800b2ce:	4415      	add	r5, r2
 800b2d0:	f04f 0800 	mov.w	r8, #0
 800b2d4:	4659      	mov	r1, fp
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	4620      	mov	r0, r4
 800b2da:	9301      	str	r3, [sp, #4]
 800b2dc:	f000 fa9a 	bl	800b814 <__lshift>
 800b2e0:	4631      	mov	r1, r6
 800b2e2:	4683      	mov	fp, r0
 800b2e4:	f000 fb02 	bl	800b8ec <__mcmp>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	dcb2      	bgt.n	800b252 <_dtoa_r+0xac2>
 800b2ec:	d102      	bne.n	800b2f4 <_dtoa_r+0xb64>
 800b2ee:	9b01      	ldr	r3, [sp, #4]
 800b2f0:	07db      	lsls	r3, r3, #31
 800b2f2:	d4ae      	bmi.n	800b252 <_dtoa_r+0xac2>
 800b2f4:	462b      	mov	r3, r5
 800b2f6:	461d      	mov	r5, r3
 800b2f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2fc:	2a30      	cmp	r2, #48	; 0x30
 800b2fe:	d0fa      	beq.n	800b2f6 <_dtoa_r+0xb66>
 800b300:	e6f7      	b.n	800b0f2 <_dtoa_r+0x962>
 800b302:	9a00      	ldr	r2, [sp, #0]
 800b304:	429a      	cmp	r2, r3
 800b306:	d1a5      	bne.n	800b254 <_dtoa_r+0xac4>
 800b308:	f10a 0a01 	add.w	sl, sl, #1
 800b30c:	2331      	movs	r3, #49	; 0x31
 800b30e:	e779      	b.n	800b204 <_dtoa_r+0xa74>
 800b310:	4b13      	ldr	r3, [pc, #76]	; (800b360 <_dtoa_r+0xbd0>)
 800b312:	f7ff baaf 	b.w	800a874 <_dtoa_r+0xe4>
 800b316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f47f aa86 	bne.w	800a82a <_dtoa_r+0x9a>
 800b31e:	4b11      	ldr	r3, [pc, #68]	; (800b364 <_dtoa_r+0xbd4>)
 800b320:	f7ff baa8 	b.w	800a874 <_dtoa_r+0xe4>
 800b324:	f1b9 0f00 	cmp.w	r9, #0
 800b328:	dc03      	bgt.n	800b332 <_dtoa_r+0xba2>
 800b32a:	9b05      	ldr	r3, [sp, #20]
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	f73f aec9 	bgt.w	800b0c4 <_dtoa_r+0x934>
 800b332:	9d00      	ldr	r5, [sp, #0]
 800b334:	4631      	mov	r1, r6
 800b336:	4658      	mov	r0, fp
 800b338:	f7ff f99e 	bl	800a678 <quorem>
 800b33c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b340:	f805 3b01 	strb.w	r3, [r5], #1
 800b344:	9a00      	ldr	r2, [sp, #0]
 800b346:	1aaa      	subs	r2, r5, r2
 800b348:	4591      	cmp	r9, r2
 800b34a:	ddba      	ble.n	800b2c2 <_dtoa_r+0xb32>
 800b34c:	4659      	mov	r1, fp
 800b34e:	2300      	movs	r3, #0
 800b350:	220a      	movs	r2, #10
 800b352:	4620      	mov	r0, r4
 800b354:	f000 f8ae 	bl	800b4b4 <__multadd>
 800b358:	4683      	mov	fp, r0
 800b35a:	e7eb      	b.n	800b334 <_dtoa_r+0xba4>
 800b35c:	0800bdd4 	.word	0x0800bdd4
 800b360:	0800bd2d 	.word	0x0800bd2d
 800b364:	0800bd51 	.word	0x0800bd51

0800b368 <_fstat_r>:
 800b368:	b538      	push	{r3, r4, r5, lr}
 800b36a:	4d07      	ldr	r5, [pc, #28]	; (800b388 <_fstat_r+0x20>)
 800b36c:	2300      	movs	r3, #0
 800b36e:	4604      	mov	r4, r0
 800b370:	4608      	mov	r0, r1
 800b372:	4611      	mov	r1, r2
 800b374:	602b      	str	r3, [r5, #0]
 800b376:	f7f6 fac4 	bl	8001902 <_fstat>
 800b37a:	1c43      	adds	r3, r0, #1
 800b37c:	d102      	bne.n	800b384 <_fstat_r+0x1c>
 800b37e:	682b      	ldr	r3, [r5, #0]
 800b380:	b103      	cbz	r3, 800b384 <_fstat_r+0x1c>
 800b382:	6023      	str	r3, [r4, #0]
 800b384:	bd38      	pop	{r3, r4, r5, pc}
 800b386:	bf00      	nop
 800b388:	200008d4 	.word	0x200008d4

0800b38c <_isatty_r>:
 800b38c:	b538      	push	{r3, r4, r5, lr}
 800b38e:	4d06      	ldr	r5, [pc, #24]	; (800b3a8 <_isatty_r+0x1c>)
 800b390:	2300      	movs	r3, #0
 800b392:	4604      	mov	r4, r0
 800b394:	4608      	mov	r0, r1
 800b396:	602b      	str	r3, [r5, #0]
 800b398:	f7f6 fac3 	bl	8001922 <_isatty>
 800b39c:	1c43      	adds	r3, r0, #1
 800b39e:	d102      	bne.n	800b3a6 <_isatty_r+0x1a>
 800b3a0:	682b      	ldr	r3, [r5, #0]
 800b3a2:	b103      	cbz	r3, 800b3a6 <_isatty_r+0x1a>
 800b3a4:	6023      	str	r3, [r4, #0]
 800b3a6:	bd38      	pop	{r3, r4, r5, pc}
 800b3a8:	200008d4 	.word	0x200008d4

0800b3ac <_localeconv_r>:
 800b3ac:	4800      	ldr	r0, [pc, #0]	; (800b3b0 <_localeconv_r+0x4>)
 800b3ae:	4770      	bx	lr
 800b3b0:	20000420 	.word	0x20000420

0800b3b4 <_lseek_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4d07      	ldr	r5, [pc, #28]	; (800b3d4 <_lseek_r+0x20>)
 800b3b8:	4604      	mov	r4, r0
 800b3ba:	4608      	mov	r0, r1
 800b3bc:	4611      	mov	r1, r2
 800b3be:	2200      	movs	r2, #0
 800b3c0:	602a      	str	r2, [r5, #0]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	f7f6 fab8 	bl	8001938 <_lseek>
 800b3c8:	1c43      	adds	r3, r0, #1
 800b3ca:	d102      	bne.n	800b3d2 <_lseek_r+0x1e>
 800b3cc:	682b      	ldr	r3, [r5, #0]
 800b3ce:	b103      	cbz	r3, 800b3d2 <_lseek_r+0x1e>
 800b3d0:	6023      	str	r3, [r4, #0]
 800b3d2:	bd38      	pop	{r3, r4, r5, pc}
 800b3d4:	200008d4 	.word	0x200008d4

0800b3d8 <__malloc_lock>:
 800b3d8:	4801      	ldr	r0, [pc, #4]	; (800b3e0 <__malloc_lock+0x8>)
 800b3da:	f7fe b904 	b.w	80095e6 <__retarget_lock_acquire_recursive>
 800b3de:	bf00      	nop
 800b3e0:	200008cc 	.word	0x200008cc

0800b3e4 <__malloc_unlock>:
 800b3e4:	4801      	ldr	r0, [pc, #4]	; (800b3ec <__malloc_unlock+0x8>)
 800b3e6:	f7fe b8ff 	b.w	80095e8 <__retarget_lock_release_recursive>
 800b3ea:	bf00      	nop
 800b3ec:	200008cc 	.word	0x200008cc

0800b3f0 <_Balloc>:
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b3f4:	4604      	mov	r4, r0
 800b3f6:	460d      	mov	r5, r1
 800b3f8:	b976      	cbnz	r6, 800b418 <_Balloc+0x28>
 800b3fa:	2010      	movs	r0, #16
 800b3fc:	f7fe f95a 	bl	80096b4 <malloc>
 800b400:	4602      	mov	r2, r0
 800b402:	6260      	str	r0, [r4, #36]	; 0x24
 800b404:	b920      	cbnz	r0, 800b410 <_Balloc+0x20>
 800b406:	4b18      	ldr	r3, [pc, #96]	; (800b468 <_Balloc+0x78>)
 800b408:	4818      	ldr	r0, [pc, #96]	; (800b46c <_Balloc+0x7c>)
 800b40a:	2166      	movs	r1, #102	; 0x66
 800b40c:	f000 fb90 	bl	800bb30 <__assert_func>
 800b410:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b414:	6006      	str	r6, [r0, #0]
 800b416:	60c6      	str	r6, [r0, #12]
 800b418:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b41a:	68f3      	ldr	r3, [r6, #12]
 800b41c:	b183      	cbz	r3, 800b440 <_Balloc+0x50>
 800b41e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b426:	b9b8      	cbnz	r0, 800b458 <_Balloc+0x68>
 800b428:	2101      	movs	r1, #1
 800b42a:	fa01 f605 	lsl.w	r6, r1, r5
 800b42e:	1d72      	adds	r2, r6, #5
 800b430:	0092      	lsls	r2, r2, #2
 800b432:	4620      	mov	r0, r4
 800b434:	f000 fb5a 	bl	800baec <_calloc_r>
 800b438:	b160      	cbz	r0, 800b454 <_Balloc+0x64>
 800b43a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b43e:	e00e      	b.n	800b45e <_Balloc+0x6e>
 800b440:	2221      	movs	r2, #33	; 0x21
 800b442:	2104      	movs	r1, #4
 800b444:	4620      	mov	r0, r4
 800b446:	f000 fb51 	bl	800baec <_calloc_r>
 800b44a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b44c:	60f0      	str	r0, [r6, #12]
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1e4      	bne.n	800b41e <_Balloc+0x2e>
 800b454:	2000      	movs	r0, #0
 800b456:	bd70      	pop	{r4, r5, r6, pc}
 800b458:	6802      	ldr	r2, [r0, #0]
 800b45a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b45e:	2300      	movs	r3, #0
 800b460:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b464:	e7f7      	b.n	800b456 <_Balloc+0x66>
 800b466:	bf00      	nop
 800b468:	0800bd5e 	.word	0x0800bd5e
 800b46c:	0800bde5 	.word	0x0800bde5

0800b470 <_Bfree>:
 800b470:	b570      	push	{r4, r5, r6, lr}
 800b472:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b474:	4605      	mov	r5, r0
 800b476:	460c      	mov	r4, r1
 800b478:	b976      	cbnz	r6, 800b498 <_Bfree+0x28>
 800b47a:	2010      	movs	r0, #16
 800b47c:	f7fe f91a 	bl	80096b4 <malloc>
 800b480:	4602      	mov	r2, r0
 800b482:	6268      	str	r0, [r5, #36]	; 0x24
 800b484:	b920      	cbnz	r0, 800b490 <_Bfree+0x20>
 800b486:	4b09      	ldr	r3, [pc, #36]	; (800b4ac <_Bfree+0x3c>)
 800b488:	4809      	ldr	r0, [pc, #36]	; (800b4b0 <_Bfree+0x40>)
 800b48a:	218a      	movs	r1, #138	; 0x8a
 800b48c:	f000 fb50 	bl	800bb30 <__assert_func>
 800b490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b494:	6006      	str	r6, [r0, #0]
 800b496:	60c6      	str	r6, [r0, #12]
 800b498:	b13c      	cbz	r4, 800b4aa <_Bfree+0x3a>
 800b49a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b49c:	6862      	ldr	r2, [r4, #4]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b4a4:	6021      	str	r1, [r4, #0]
 800b4a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b4aa:	bd70      	pop	{r4, r5, r6, pc}
 800b4ac:	0800bd5e 	.word	0x0800bd5e
 800b4b0:	0800bde5 	.word	0x0800bde5

0800b4b4 <__multadd>:
 800b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b8:	690e      	ldr	r6, [r1, #16]
 800b4ba:	4607      	mov	r7, r0
 800b4bc:	4698      	mov	r8, r3
 800b4be:	460c      	mov	r4, r1
 800b4c0:	f101 0014 	add.w	r0, r1, #20
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	6805      	ldr	r5, [r0, #0]
 800b4c8:	b2a9      	uxth	r1, r5
 800b4ca:	fb02 8101 	mla	r1, r2, r1, r8
 800b4ce:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b4d2:	0c2d      	lsrs	r5, r5, #16
 800b4d4:	fb02 c505 	mla	r5, r2, r5, ip
 800b4d8:	b289      	uxth	r1, r1
 800b4da:	3301      	adds	r3, #1
 800b4dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b4e0:	429e      	cmp	r6, r3
 800b4e2:	f840 1b04 	str.w	r1, [r0], #4
 800b4e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b4ea:	dcec      	bgt.n	800b4c6 <__multadd+0x12>
 800b4ec:	f1b8 0f00 	cmp.w	r8, #0
 800b4f0:	d022      	beq.n	800b538 <__multadd+0x84>
 800b4f2:	68a3      	ldr	r3, [r4, #8]
 800b4f4:	42b3      	cmp	r3, r6
 800b4f6:	dc19      	bgt.n	800b52c <__multadd+0x78>
 800b4f8:	6861      	ldr	r1, [r4, #4]
 800b4fa:	4638      	mov	r0, r7
 800b4fc:	3101      	adds	r1, #1
 800b4fe:	f7ff ff77 	bl	800b3f0 <_Balloc>
 800b502:	4605      	mov	r5, r0
 800b504:	b928      	cbnz	r0, 800b512 <__multadd+0x5e>
 800b506:	4602      	mov	r2, r0
 800b508:	4b0d      	ldr	r3, [pc, #52]	; (800b540 <__multadd+0x8c>)
 800b50a:	480e      	ldr	r0, [pc, #56]	; (800b544 <__multadd+0x90>)
 800b50c:	21b5      	movs	r1, #181	; 0xb5
 800b50e:	f000 fb0f 	bl	800bb30 <__assert_func>
 800b512:	6922      	ldr	r2, [r4, #16]
 800b514:	3202      	adds	r2, #2
 800b516:	f104 010c 	add.w	r1, r4, #12
 800b51a:	0092      	lsls	r2, r2, #2
 800b51c:	300c      	adds	r0, #12
 800b51e:	f7fe f8d1 	bl	80096c4 <memcpy>
 800b522:	4621      	mov	r1, r4
 800b524:	4638      	mov	r0, r7
 800b526:	f7ff ffa3 	bl	800b470 <_Bfree>
 800b52a:	462c      	mov	r4, r5
 800b52c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b530:	3601      	adds	r6, #1
 800b532:	f8c3 8014 	str.w	r8, [r3, #20]
 800b536:	6126      	str	r6, [r4, #16]
 800b538:	4620      	mov	r0, r4
 800b53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b53e:	bf00      	nop
 800b540:	0800bdd4 	.word	0x0800bdd4
 800b544:	0800bde5 	.word	0x0800bde5

0800b548 <__hi0bits>:
 800b548:	0c03      	lsrs	r3, r0, #16
 800b54a:	041b      	lsls	r3, r3, #16
 800b54c:	b9d3      	cbnz	r3, 800b584 <__hi0bits+0x3c>
 800b54e:	0400      	lsls	r0, r0, #16
 800b550:	2310      	movs	r3, #16
 800b552:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b556:	bf04      	itt	eq
 800b558:	0200      	lsleq	r0, r0, #8
 800b55a:	3308      	addeq	r3, #8
 800b55c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b560:	bf04      	itt	eq
 800b562:	0100      	lsleq	r0, r0, #4
 800b564:	3304      	addeq	r3, #4
 800b566:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b56a:	bf04      	itt	eq
 800b56c:	0080      	lsleq	r0, r0, #2
 800b56e:	3302      	addeq	r3, #2
 800b570:	2800      	cmp	r0, #0
 800b572:	db05      	blt.n	800b580 <__hi0bits+0x38>
 800b574:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b578:	f103 0301 	add.w	r3, r3, #1
 800b57c:	bf08      	it	eq
 800b57e:	2320      	moveq	r3, #32
 800b580:	4618      	mov	r0, r3
 800b582:	4770      	bx	lr
 800b584:	2300      	movs	r3, #0
 800b586:	e7e4      	b.n	800b552 <__hi0bits+0xa>

0800b588 <__lo0bits>:
 800b588:	6803      	ldr	r3, [r0, #0]
 800b58a:	f013 0207 	ands.w	r2, r3, #7
 800b58e:	4601      	mov	r1, r0
 800b590:	d00b      	beq.n	800b5aa <__lo0bits+0x22>
 800b592:	07da      	lsls	r2, r3, #31
 800b594:	d424      	bmi.n	800b5e0 <__lo0bits+0x58>
 800b596:	0798      	lsls	r0, r3, #30
 800b598:	bf49      	itett	mi
 800b59a:	085b      	lsrmi	r3, r3, #1
 800b59c:	089b      	lsrpl	r3, r3, #2
 800b59e:	2001      	movmi	r0, #1
 800b5a0:	600b      	strmi	r3, [r1, #0]
 800b5a2:	bf5c      	itt	pl
 800b5a4:	600b      	strpl	r3, [r1, #0]
 800b5a6:	2002      	movpl	r0, #2
 800b5a8:	4770      	bx	lr
 800b5aa:	b298      	uxth	r0, r3
 800b5ac:	b9b0      	cbnz	r0, 800b5dc <__lo0bits+0x54>
 800b5ae:	0c1b      	lsrs	r3, r3, #16
 800b5b0:	2010      	movs	r0, #16
 800b5b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b5b6:	bf04      	itt	eq
 800b5b8:	0a1b      	lsreq	r3, r3, #8
 800b5ba:	3008      	addeq	r0, #8
 800b5bc:	071a      	lsls	r2, r3, #28
 800b5be:	bf04      	itt	eq
 800b5c0:	091b      	lsreq	r3, r3, #4
 800b5c2:	3004      	addeq	r0, #4
 800b5c4:	079a      	lsls	r2, r3, #30
 800b5c6:	bf04      	itt	eq
 800b5c8:	089b      	lsreq	r3, r3, #2
 800b5ca:	3002      	addeq	r0, #2
 800b5cc:	07da      	lsls	r2, r3, #31
 800b5ce:	d403      	bmi.n	800b5d8 <__lo0bits+0x50>
 800b5d0:	085b      	lsrs	r3, r3, #1
 800b5d2:	f100 0001 	add.w	r0, r0, #1
 800b5d6:	d005      	beq.n	800b5e4 <__lo0bits+0x5c>
 800b5d8:	600b      	str	r3, [r1, #0]
 800b5da:	4770      	bx	lr
 800b5dc:	4610      	mov	r0, r2
 800b5de:	e7e8      	b.n	800b5b2 <__lo0bits+0x2a>
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	4770      	bx	lr
 800b5e4:	2020      	movs	r0, #32
 800b5e6:	4770      	bx	lr

0800b5e8 <__i2b>:
 800b5e8:	b510      	push	{r4, lr}
 800b5ea:	460c      	mov	r4, r1
 800b5ec:	2101      	movs	r1, #1
 800b5ee:	f7ff feff 	bl	800b3f0 <_Balloc>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	b928      	cbnz	r0, 800b602 <__i2b+0x1a>
 800b5f6:	4b05      	ldr	r3, [pc, #20]	; (800b60c <__i2b+0x24>)
 800b5f8:	4805      	ldr	r0, [pc, #20]	; (800b610 <__i2b+0x28>)
 800b5fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b5fe:	f000 fa97 	bl	800bb30 <__assert_func>
 800b602:	2301      	movs	r3, #1
 800b604:	6144      	str	r4, [r0, #20]
 800b606:	6103      	str	r3, [r0, #16]
 800b608:	bd10      	pop	{r4, pc}
 800b60a:	bf00      	nop
 800b60c:	0800bdd4 	.word	0x0800bdd4
 800b610:	0800bde5 	.word	0x0800bde5

0800b614 <__multiply>:
 800b614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b618:	4614      	mov	r4, r2
 800b61a:	690a      	ldr	r2, [r1, #16]
 800b61c:	6923      	ldr	r3, [r4, #16]
 800b61e:	429a      	cmp	r2, r3
 800b620:	bfb8      	it	lt
 800b622:	460b      	movlt	r3, r1
 800b624:	460d      	mov	r5, r1
 800b626:	bfbc      	itt	lt
 800b628:	4625      	movlt	r5, r4
 800b62a:	461c      	movlt	r4, r3
 800b62c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b630:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b634:	68ab      	ldr	r3, [r5, #8]
 800b636:	6869      	ldr	r1, [r5, #4]
 800b638:	eb0a 0709 	add.w	r7, sl, r9
 800b63c:	42bb      	cmp	r3, r7
 800b63e:	b085      	sub	sp, #20
 800b640:	bfb8      	it	lt
 800b642:	3101      	addlt	r1, #1
 800b644:	f7ff fed4 	bl	800b3f0 <_Balloc>
 800b648:	b930      	cbnz	r0, 800b658 <__multiply+0x44>
 800b64a:	4602      	mov	r2, r0
 800b64c:	4b42      	ldr	r3, [pc, #264]	; (800b758 <__multiply+0x144>)
 800b64e:	4843      	ldr	r0, [pc, #268]	; (800b75c <__multiply+0x148>)
 800b650:	f240 115d 	movw	r1, #349	; 0x15d
 800b654:	f000 fa6c 	bl	800bb30 <__assert_func>
 800b658:	f100 0614 	add.w	r6, r0, #20
 800b65c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b660:	4633      	mov	r3, r6
 800b662:	2200      	movs	r2, #0
 800b664:	4543      	cmp	r3, r8
 800b666:	d31e      	bcc.n	800b6a6 <__multiply+0x92>
 800b668:	f105 0c14 	add.w	ip, r5, #20
 800b66c:	f104 0314 	add.w	r3, r4, #20
 800b670:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b674:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b678:	9202      	str	r2, [sp, #8]
 800b67a:	ebac 0205 	sub.w	r2, ip, r5
 800b67e:	3a15      	subs	r2, #21
 800b680:	f022 0203 	bic.w	r2, r2, #3
 800b684:	3204      	adds	r2, #4
 800b686:	f105 0115 	add.w	r1, r5, #21
 800b68a:	458c      	cmp	ip, r1
 800b68c:	bf38      	it	cc
 800b68e:	2204      	movcc	r2, #4
 800b690:	9201      	str	r2, [sp, #4]
 800b692:	9a02      	ldr	r2, [sp, #8]
 800b694:	9303      	str	r3, [sp, #12]
 800b696:	429a      	cmp	r2, r3
 800b698:	d808      	bhi.n	800b6ac <__multiply+0x98>
 800b69a:	2f00      	cmp	r7, #0
 800b69c:	dc55      	bgt.n	800b74a <__multiply+0x136>
 800b69e:	6107      	str	r7, [r0, #16]
 800b6a0:	b005      	add	sp, #20
 800b6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a6:	f843 2b04 	str.w	r2, [r3], #4
 800b6aa:	e7db      	b.n	800b664 <__multiply+0x50>
 800b6ac:	f8b3 a000 	ldrh.w	sl, [r3]
 800b6b0:	f1ba 0f00 	cmp.w	sl, #0
 800b6b4:	d020      	beq.n	800b6f8 <__multiply+0xe4>
 800b6b6:	f105 0e14 	add.w	lr, r5, #20
 800b6ba:	46b1      	mov	r9, r6
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b6c2:	f8d9 b000 	ldr.w	fp, [r9]
 800b6c6:	b2a1      	uxth	r1, r4
 800b6c8:	fa1f fb8b 	uxth.w	fp, fp
 800b6cc:	fb0a b101 	mla	r1, sl, r1, fp
 800b6d0:	4411      	add	r1, r2
 800b6d2:	f8d9 2000 	ldr.w	r2, [r9]
 800b6d6:	0c24      	lsrs	r4, r4, #16
 800b6d8:	0c12      	lsrs	r2, r2, #16
 800b6da:	fb0a 2404 	mla	r4, sl, r4, r2
 800b6de:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b6e2:	b289      	uxth	r1, r1
 800b6e4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b6e8:	45f4      	cmp	ip, lr
 800b6ea:	f849 1b04 	str.w	r1, [r9], #4
 800b6ee:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b6f2:	d8e4      	bhi.n	800b6be <__multiply+0xaa>
 800b6f4:	9901      	ldr	r1, [sp, #4]
 800b6f6:	5072      	str	r2, [r6, r1]
 800b6f8:	9a03      	ldr	r2, [sp, #12]
 800b6fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b6fe:	3304      	adds	r3, #4
 800b700:	f1b9 0f00 	cmp.w	r9, #0
 800b704:	d01f      	beq.n	800b746 <__multiply+0x132>
 800b706:	6834      	ldr	r4, [r6, #0]
 800b708:	f105 0114 	add.w	r1, r5, #20
 800b70c:	46b6      	mov	lr, r6
 800b70e:	f04f 0a00 	mov.w	sl, #0
 800b712:	880a      	ldrh	r2, [r1, #0]
 800b714:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b718:	fb09 b202 	mla	r2, r9, r2, fp
 800b71c:	4492      	add	sl, r2
 800b71e:	b2a4      	uxth	r4, r4
 800b720:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b724:	f84e 4b04 	str.w	r4, [lr], #4
 800b728:	f851 4b04 	ldr.w	r4, [r1], #4
 800b72c:	f8be 2000 	ldrh.w	r2, [lr]
 800b730:	0c24      	lsrs	r4, r4, #16
 800b732:	fb09 2404 	mla	r4, r9, r4, r2
 800b736:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b73a:	458c      	cmp	ip, r1
 800b73c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b740:	d8e7      	bhi.n	800b712 <__multiply+0xfe>
 800b742:	9a01      	ldr	r2, [sp, #4]
 800b744:	50b4      	str	r4, [r6, r2]
 800b746:	3604      	adds	r6, #4
 800b748:	e7a3      	b.n	800b692 <__multiply+0x7e>
 800b74a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1a5      	bne.n	800b69e <__multiply+0x8a>
 800b752:	3f01      	subs	r7, #1
 800b754:	e7a1      	b.n	800b69a <__multiply+0x86>
 800b756:	bf00      	nop
 800b758:	0800bdd4 	.word	0x0800bdd4
 800b75c:	0800bde5 	.word	0x0800bde5

0800b760 <__pow5mult>:
 800b760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b764:	4615      	mov	r5, r2
 800b766:	f012 0203 	ands.w	r2, r2, #3
 800b76a:	4606      	mov	r6, r0
 800b76c:	460f      	mov	r7, r1
 800b76e:	d007      	beq.n	800b780 <__pow5mult+0x20>
 800b770:	4c25      	ldr	r4, [pc, #148]	; (800b808 <__pow5mult+0xa8>)
 800b772:	3a01      	subs	r2, #1
 800b774:	2300      	movs	r3, #0
 800b776:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b77a:	f7ff fe9b 	bl	800b4b4 <__multadd>
 800b77e:	4607      	mov	r7, r0
 800b780:	10ad      	asrs	r5, r5, #2
 800b782:	d03d      	beq.n	800b800 <__pow5mult+0xa0>
 800b784:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b786:	b97c      	cbnz	r4, 800b7a8 <__pow5mult+0x48>
 800b788:	2010      	movs	r0, #16
 800b78a:	f7fd ff93 	bl	80096b4 <malloc>
 800b78e:	4602      	mov	r2, r0
 800b790:	6270      	str	r0, [r6, #36]	; 0x24
 800b792:	b928      	cbnz	r0, 800b7a0 <__pow5mult+0x40>
 800b794:	4b1d      	ldr	r3, [pc, #116]	; (800b80c <__pow5mult+0xac>)
 800b796:	481e      	ldr	r0, [pc, #120]	; (800b810 <__pow5mult+0xb0>)
 800b798:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b79c:	f000 f9c8 	bl	800bb30 <__assert_func>
 800b7a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7a4:	6004      	str	r4, [r0, #0]
 800b7a6:	60c4      	str	r4, [r0, #12]
 800b7a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b7ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7b0:	b94c      	cbnz	r4, 800b7c6 <__pow5mult+0x66>
 800b7b2:	f240 2171 	movw	r1, #625	; 0x271
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f7ff ff16 	bl	800b5e8 <__i2b>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	f8c8 0008 	str.w	r0, [r8, #8]
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	6003      	str	r3, [r0, #0]
 800b7c6:	f04f 0900 	mov.w	r9, #0
 800b7ca:	07eb      	lsls	r3, r5, #31
 800b7cc:	d50a      	bpl.n	800b7e4 <__pow5mult+0x84>
 800b7ce:	4639      	mov	r1, r7
 800b7d0:	4622      	mov	r2, r4
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	f7ff ff1e 	bl	800b614 <__multiply>
 800b7d8:	4639      	mov	r1, r7
 800b7da:	4680      	mov	r8, r0
 800b7dc:	4630      	mov	r0, r6
 800b7de:	f7ff fe47 	bl	800b470 <_Bfree>
 800b7e2:	4647      	mov	r7, r8
 800b7e4:	106d      	asrs	r5, r5, #1
 800b7e6:	d00b      	beq.n	800b800 <__pow5mult+0xa0>
 800b7e8:	6820      	ldr	r0, [r4, #0]
 800b7ea:	b938      	cbnz	r0, 800b7fc <__pow5mult+0x9c>
 800b7ec:	4622      	mov	r2, r4
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f7ff ff0f 	bl	800b614 <__multiply>
 800b7f6:	6020      	str	r0, [r4, #0]
 800b7f8:	f8c0 9000 	str.w	r9, [r0]
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	e7e4      	b.n	800b7ca <__pow5mult+0x6a>
 800b800:	4638      	mov	r0, r7
 800b802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b806:	bf00      	nop
 800b808:	0800bf38 	.word	0x0800bf38
 800b80c:	0800bd5e 	.word	0x0800bd5e
 800b810:	0800bde5 	.word	0x0800bde5

0800b814 <__lshift>:
 800b814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b818:	460c      	mov	r4, r1
 800b81a:	6849      	ldr	r1, [r1, #4]
 800b81c:	6923      	ldr	r3, [r4, #16]
 800b81e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b822:	68a3      	ldr	r3, [r4, #8]
 800b824:	4607      	mov	r7, r0
 800b826:	4691      	mov	r9, r2
 800b828:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b82c:	f108 0601 	add.w	r6, r8, #1
 800b830:	42b3      	cmp	r3, r6
 800b832:	db0b      	blt.n	800b84c <__lshift+0x38>
 800b834:	4638      	mov	r0, r7
 800b836:	f7ff fddb 	bl	800b3f0 <_Balloc>
 800b83a:	4605      	mov	r5, r0
 800b83c:	b948      	cbnz	r0, 800b852 <__lshift+0x3e>
 800b83e:	4602      	mov	r2, r0
 800b840:	4b28      	ldr	r3, [pc, #160]	; (800b8e4 <__lshift+0xd0>)
 800b842:	4829      	ldr	r0, [pc, #164]	; (800b8e8 <__lshift+0xd4>)
 800b844:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b848:	f000 f972 	bl	800bb30 <__assert_func>
 800b84c:	3101      	adds	r1, #1
 800b84e:	005b      	lsls	r3, r3, #1
 800b850:	e7ee      	b.n	800b830 <__lshift+0x1c>
 800b852:	2300      	movs	r3, #0
 800b854:	f100 0114 	add.w	r1, r0, #20
 800b858:	f100 0210 	add.w	r2, r0, #16
 800b85c:	4618      	mov	r0, r3
 800b85e:	4553      	cmp	r3, sl
 800b860:	db33      	blt.n	800b8ca <__lshift+0xb6>
 800b862:	6920      	ldr	r0, [r4, #16]
 800b864:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b868:	f104 0314 	add.w	r3, r4, #20
 800b86c:	f019 091f 	ands.w	r9, r9, #31
 800b870:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b874:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b878:	d02b      	beq.n	800b8d2 <__lshift+0xbe>
 800b87a:	f1c9 0e20 	rsb	lr, r9, #32
 800b87e:	468a      	mov	sl, r1
 800b880:	2200      	movs	r2, #0
 800b882:	6818      	ldr	r0, [r3, #0]
 800b884:	fa00 f009 	lsl.w	r0, r0, r9
 800b888:	4302      	orrs	r2, r0
 800b88a:	f84a 2b04 	str.w	r2, [sl], #4
 800b88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b892:	459c      	cmp	ip, r3
 800b894:	fa22 f20e 	lsr.w	r2, r2, lr
 800b898:	d8f3      	bhi.n	800b882 <__lshift+0x6e>
 800b89a:	ebac 0304 	sub.w	r3, ip, r4
 800b89e:	3b15      	subs	r3, #21
 800b8a0:	f023 0303 	bic.w	r3, r3, #3
 800b8a4:	3304      	adds	r3, #4
 800b8a6:	f104 0015 	add.w	r0, r4, #21
 800b8aa:	4584      	cmp	ip, r0
 800b8ac:	bf38      	it	cc
 800b8ae:	2304      	movcc	r3, #4
 800b8b0:	50ca      	str	r2, [r1, r3]
 800b8b2:	b10a      	cbz	r2, 800b8b8 <__lshift+0xa4>
 800b8b4:	f108 0602 	add.w	r6, r8, #2
 800b8b8:	3e01      	subs	r6, #1
 800b8ba:	4638      	mov	r0, r7
 800b8bc:	612e      	str	r6, [r5, #16]
 800b8be:	4621      	mov	r1, r4
 800b8c0:	f7ff fdd6 	bl	800b470 <_Bfree>
 800b8c4:	4628      	mov	r0, r5
 800b8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	e7c5      	b.n	800b85e <__lshift+0x4a>
 800b8d2:	3904      	subs	r1, #4
 800b8d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b8dc:	459c      	cmp	ip, r3
 800b8de:	d8f9      	bhi.n	800b8d4 <__lshift+0xc0>
 800b8e0:	e7ea      	b.n	800b8b8 <__lshift+0xa4>
 800b8e2:	bf00      	nop
 800b8e4:	0800bdd4 	.word	0x0800bdd4
 800b8e8:	0800bde5 	.word	0x0800bde5

0800b8ec <__mcmp>:
 800b8ec:	b530      	push	{r4, r5, lr}
 800b8ee:	6902      	ldr	r2, [r0, #16]
 800b8f0:	690c      	ldr	r4, [r1, #16]
 800b8f2:	1b12      	subs	r2, r2, r4
 800b8f4:	d10e      	bne.n	800b914 <__mcmp+0x28>
 800b8f6:	f100 0314 	add.w	r3, r0, #20
 800b8fa:	3114      	adds	r1, #20
 800b8fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b900:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b904:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b908:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b90c:	42a5      	cmp	r5, r4
 800b90e:	d003      	beq.n	800b918 <__mcmp+0x2c>
 800b910:	d305      	bcc.n	800b91e <__mcmp+0x32>
 800b912:	2201      	movs	r2, #1
 800b914:	4610      	mov	r0, r2
 800b916:	bd30      	pop	{r4, r5, pc}
 800b918:	4283      	cmp	r3, r0
 800b91a:	d3f3      	bcc.n	800b904 <__mcmp+0x18>
 800b91c:	e7fa      	b.n	800b914 <__mcmp+0x28>
 800b91e:	f04f 32ff 	mov.w	r2, #4294967295
 800b922:	e7f7      	b.n	800b914 <__mcmp+0x28>

0800b924 <__mdiff>:
 800b924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b928:	460c      	mov	r4, r1
 800b92a:	4606      	mov	r6, r0
 800b92c:	4611      	mov	r1, r2
 800b92e:	4620      	mov	r0, r4
 800b930:	4617      	mov	r7, r2
 800b932:	f7ff ffdb 	bl	800b8ec <__mcmp>
 800b936:	1e05      	subs	r5, r0, #0
 800b938:	d110      	bne.n	800b95c <__mdiff+0x38>
 800b93a:	4629      	mov	r1, r5
 800b93c:	4630      	mov	r0, r6
 800b93e:	f7ff fd57 	bl	800b3f0 <_Balloc>
 800b942:	b930      	cbnz	r0, 800b952 <__mdiff+0x2e>
 800b944:	4b39      	ldr	r3, [pc, #228]	; (800ba2c <__mdiff+0x108>)
 800b946:	4602      	mov	r2, r0
 800b948:	f240 2132 	movw	r1, #562	; 0x232
 800b94c:	4838      	ldr	r0, [pc, #224]	; (800ba30 <__mdiff+0x10c>)
 800b94e:	f000 f8ef 	bl	800bb30 <__assert_func>
 800b952:	2301      	movs	r3, #1
 800b954:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b958:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95c:	bfa4      	itt	ge
 800b95e:	463b      	movge	r3, r7
 800b960:	4627      	movge	r7, r4
 800b962:	4630      	mov	r0, r6
 800b964:	6879      	ldr	r1, [r7, #4]
 800b966:	bfa6      	itte	ge
 800b968:	461c      	movge	r4, r3
 800b96a:	2500      	movge	r5, #0
 800b96c:	2501      	movlt	r5, #1
 800b96e:	f7ff fd3f 	bl	800b3f0 <_Balloc>
 800b972:	b920      	cbnz	r0, 800b97e <__mdiff+0x5a>
 800b974:	4b2d      	ldr	r3, [pc, #180]	; (800ba2c <__mdiff+0x108>)
 800b976:	4602      	mov	r2, r0
 800b978:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b97c:	e7e6      	b.n	800b94c <__mdiff+0x28>
 800b97e:	693e      	ldr	r6, [r7, #16]
 800b980:	60c5      	str	r5, [r0, #12]
 800b982:	6925      	ldr	r5, [r4, #16]
 800b984:	f107 0114 	add.w	r1, r7, #20
 800b988:	f104 0914 	add.w	r9, r4, #20
 800b98c:	f100 0e14 	add.w	lr, r0, #20
 800b990:	f107 0210 	add.w	r2, r7, #16
 800b994:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b998:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b99c:	46f2      	mov	sl, lr
 800b99e:	2700      	movs	r7, #0
 800b9a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b9a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b9a8:	fa1f f883 	uxth.w	r8, r3
 800b9ac:	fa17 f78b 	uxtah	r7, r7, fp
 800b9b0:	0c1b      	lsrs	r3, r3, #16
 800b9b2:	eba7 0808 	sub.w	r8, r7, r8
 800b9b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b9ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b9be:	fa1f f888 	uxth.w	r8, r8
 800b9c2:	141f      	asrs	r7, r3, #16
 800b9c4:	454d      	cmp	r5, r9
 800b9c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b9ca:	f84a 3b04 	str.w	r3, [sl], #4
 800b9ce:	d8e7      	bhi.n	800b9a0 <__mdiff+0x7c>
 800b9d0:	1b2b      	subs	r3, r5, r4
 800b9d2:	3b15      	subs	r3, #21
 800b9d4:	f023 0303 	bic.w	r3, r3, #3
 800b9d8:	3304      	adds	r3, #4
 800b9da:	3415      	adds	r4, #21
 800b9dc:	42a5      	cmp	r5, r4
 800b9de:	bf38      	it	cc
 800b9e0:	2304      	movcc	r3, #4
 800b9e2:	4419      	add	r1, r3
 800b9e4:	4473      	add	r3, lr
 800b9e6:	469e      	mov	lr, r3
 800b9e8:	460d      	mov	r5, r1
 800b9ea:	4565      	cmp	r5, ip
 800b9ec:	d30e      	bcc.n	800ba0c <__mdiff+0xe8>
 800b9ee:	f10c 0203 	add.w	r2, ip, #3
 800b9f2:	1a52      	subs	r2, r2, r1
 800b9f4:	f022 0203 	bic.w	r2, r2, #3
 800b9f8:	3903      	subs	r1, #3
 800b9fa:	458c      	cmp	ip, r1
 800b9fc:	bf38      	it	cc
 800b9fe:	2200      	movcc	r2, #0
 800ba00:	441a      	add	r2, r3
 800ba02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ba06:	b17b      	cbz	r3, 800ba28 <__mdiff+0x104>
 800ba08:	6106      	str	r6, [r0, #16]
 800ba0a:	e7a5      	b.n	800b958 <__mdiff+0x34>
 800ba0c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ba10:	fa17 f488 	uxtah	r4, r7, r8
 800ba14:	1422      	asrs	r2, r4, #16
 800ba16:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ba1a:	b2a4      	uxth	r4, r4
 800ba1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ba20:	f84e 4b04 	str.w	r4, [lr], #4
 800ba24:	1417      	asrs	r7, r2, #16
 800ba26:	e7e0      	b.n	800b9ea <__mdiff+0xc6>
 800ba28:	3e01      	subs	r6, #1
 800ba2a:	e7ea      	b.n	800ba02 <__mdiff+0xde>
 800ba2c:	0800bdd4 	.word	0x0800bdd4
 800ba30:	0800bde5 	.word	0x0800bde5

0800ba34 <__d2b>:
 800ba34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba38:	4689      	mov	r9, r1
 800ba3a:	2101      	movs	r1, #1
 800ba3c:	ec57 6b10 	vmov	r6, r7, d0
 800ba40:	4690      	mov	r8, r2
 800ba42:	f7ff fcd5 	bl	800b3f0 <_Balloc>
 800ba46:	4604      	mov	r4, r0
 800ba48:	b930      	cbnz	r0, 800ba58 <__d2b+0x24>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	4b25      	ldr	r3, [pc, #148]	; (800bae4 <__d2b+0xb0>)
 800ba4e:	4826      	ldr	r0, [pc, #152]	; (800bae8 <__d2b+0xb4>)
 800ba50:	f240 310a 	movw	r1, #778	; 0x30a
 800ba54:	f000 f86c 	bl	800bb30 <__assert_func>
 800ba58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ba5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba60:	bb35      	cbnz	r5, 800bab0 <__d2b+0x7c>
 800ba62:	2e00      	cmp	r6, #0
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	d028      	beq.n	800baba <__d2b+0x86>
 800ba68:	4668      	mov	r0, sp
 800ba6a:	9600      	str	r6, [sp, #0]
 800ba6c:	f7ff fd8c 	bl	800b588 <__lo0bits>
 800ba70:	9900      	ldr	r1, [sp, #0]
 800ba72:	b300      	cbz	r0, 800bab6 <__d2b+0x82>
 800ba74:	9a01      	ldr	r2, [sp, #4]
 800ba76:	f1c0 0320 	rsb	r3, r0, #32
 800ba7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba7e:	430b      	orrs	r3, r1
 800ba80:	40c2      	lsrs	r2, r0
 800ba82:	6163      	str	r3, [r4, #20]
 800ba84:	9201      	str	r2, [sp, #4]
 800ba86:	9b01      	ldr	r3, [sp, #4]
 800ba88:	61a3      	str	r3, [r4, #24]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	bf14      	ite	ne
 800ba8e:	2202      	movne	r2, #2
 800ba90:	2201      	moveq	r2, #1
 800ba92:	6122      	str	r2, [r4, #16]
 800ba94:	b1d5      	cbz	r5, 800bacc <__d2b+0x98>
 800ba96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba9a:	4405      	add	r5, r0
 800ba9c:	f8c9 5000 	str.w	r5, [r9]
 800baa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800baa4:	f8c8 0000 	str.w	r0, [r8]
 800baa8:	4620      	mov	r0, r4
 800baaa:	b003      	add	sp, #12
 800baac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bab0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bab4:	e7d5      	b.n	800ba62 <__d2b+0x2e>
 800bab6:	6161      	str	r1, [r4, #20]
 800bab8:	e7e5      	b.n	800ba86 <__d2b+0x52>
 800baba:	a801      	add	r0, sp, #4
 800babc:	f7ff fd64 	bl	800b588 <__lo0bits>
 800bac0:	9b01      	ldr	r3, [sp, #4]
 800bac2:	6163      	str	r3, [r4, #20]
 800bac4:	2201      	movs	r2, #1
 800bac6:	6122      	str	r2, [r4, #16]
 800bac8:	3020      	adds	r0, #32
 800baca:	e7e3      	b.n	800ba94 <__d2b+0x60>
 800bacc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bad0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bad4:	f8c9 0000 	str.w	r0, [r9]
 800bad8:	6918      	ldr	r0, [r3, #16]
 800bada:	f7ff fd35 	bl	800b548 <__hi0bits>
 800bade:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bae2:	e7df      	b.n	800baa4 <__d2b+0x70>
 800bae4:	0800bdd4 	.word	0x0800bdd4
 800bae8:	0800bde5 	.word	0x0800bde5

0800baec <_calloc_r>:
 800baec:	b513      	push	{r0, r1, r4, lr}
 800baee:	434a      	muls	r2, r1
 800baf0:	4611      	mov	r1, r2
 800baf2:	9201      	str	r2, [sp, #4]
 800baf4:	f7fd fe4c 	bl	8009790 <_malloc_r>
 800baf8:	4604      	mov	r4, r0
 800bafa:	b118      	cbz	r0, 800bb04 <_calloc_r+0x18>
 800bafc:	9a01      	ldr	r2, [sp, #4]
 800bafe:	2100      	movs	r1, #0
 800bb00:	f7fd fdee 	bl	80096e0 <memset>
 800bb04:	4620      	mov	r0, r4
 800bb06:	b002      	add	sp, #8
 800bb08:	bd10      	pop	{r4, pc}
	...

0800bb0c <_read_r>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	4d07      	ldr	r5, [pc, #28]	; (800bb2c <_read_r+0x20>)
 800bb10:	4604      	mov	r4, r0
 800bb12:	4608      	mov	r0, r1
 800bb14:	4611      	mov	r1, r2
 800bb16:	2200      	movs	r2, #0
 800bb18:	602a      	str	r2, [r5, #0]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	f7f5 feac 	bl	8001878 <_read>
 800bb20:	1c43      	adds	r3, r0, #1
 800bb22:	d102      	bne.n	800bb2a <_read_r+0x1e>
 800bb24:	682b      	ldr	r3, [r5, #0]
 800bb26:	b103      	cbz	r3, 800bb2a <_read_r+0x1e>
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	bd38      	pop	{r3, r4, r5, pc}
 800bb2c:	200008d4 	.word	0x200008d4

0800bb30 <__assert_func>:
 800bb30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb32:	4614      	mov	r4, r2
 800bb34:	461a      	mov	r2, r3
 800bb36:	4b09      	ldr	r3, [pc, #36]	; (800bb5c <__assert_func+0x2c>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	68d8      	ldr	r0, [r3, #12]
 800bb3e:	b14c      	cbz	r4, 800bb54 <__assert_func+0x24>
 800bb40:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <__assert_func+0x30>)
 800bb42:	9100      	str	r1, [sp, #0]
 800bb44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb48:	4906      	ldr	r1, [pc, #24]	; (800bb64 <__assert_func+0x34>)
 800bb4a:	462b      	mov	r3, r5
 800bb4c:	f7fd fcf4 	bl	8009538 <fiprintf>
 800bb50:	f000 f82b 	bl	800bbaa <abort>
 800bb54:	4b04      	ldr	r3, [pc, #16]	; (800bb68 <__assert_func+0x38>)
 800bb56:	461c      	mov	r4, r3
 800bb58:	e7f3      	b.n	800bb42 <__assert_func+0x12>
 800bb5a:	bf00      	nop
 800bb5c:	200002cc 	.word	0x200002cc
 800bb60:	0800bf44 	.word	0x0800bf44
 800bb64:	0800bf51 	.word	0x0800bf51
 800bb68:	0800bf7f 	.word	0x0800bf7f

0800bb6c <__ascii_mbtowc>:
 800bb6c:	b082      	sub	sp, #8
 800bb6e:	b901      	cbnz	r1, 800bb72 <__ascii_mbtowc+0x6>
 800bb70:	a901      	add	r1, sp, #4
 800bb72:	b142      	cbz	r2, 800bb86 <__ascii_mbtowc+0x1a>
 800bb74:	b14b      	cbz	r3, 800bb8a <__ascii_mbtowc+0x1e>
 800bb76:	7813      	ldrb	r3, [r2, #0]
 800bb78:	600b      	str	r3, [r1, #0]
 800bb7a:	7812      	ldrb	r2, [r2, #0]
 800bb7c:	1e10      	subs	r0, r2, #0
 800bb7e:	bf18      	it	ne
 800bb80:	2001      	movne	r0, #1
 800bb82:	b002      	add	sp, #8
 800bb84:	4770      	bx	lr
 800bb86:	4610      	mov	r0, r2
 800bb88:	e7fb      	b.n	800bb82 <__ascii_mbtowc+0x16>
 800bb8a:	f06f 0001 	mvn.w	r0, #1
 800bb8e:	e7f8      	b.n	800bb82 <__ascii_mbtowc+0x16>

0800bb90 <__ascii_wctomb>:
 800bb90:	b149      	cbz	r1, 800bba6 <__ascii_wctomb+0x16>
 800bb92:	2aff      	cmp	r2, #255	; 0xff
 800bb94:	bf85      	ittet	hi
 800bb96:	238a      	movhi	r3, #138	; 0x8a
 800bb98:	6003      	strhi	r3, [r0, #0]
 800bb9a:	700a      	strbls	r2, [r1, #0]
 800bb9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bba0:	bf98      	it	ls
 800bba2:	2001      	movls	r0, #1
 800bba4:	4770      	bx	lr
 800bba6:	4608      	mov	r0, r1
 800bba8:	4770      	bx	lr

0800bbaa <abort>:
 800bbaa:	b508      	push	{r3, lr}
 800bbac:	2006      	movs	r0, #6
 800bbae:	f000 f82b 	bl	800bc08 <raise>
 800bbb2:	2001      	movs	r0, #1
 800bbb4:	f7f5 fe56 	bl	8001864 <_exit>

0800bbb8 <_raise_r>:
 800bbb8:	291f      	cmp	r1, #31
 800bbba:	b538      	push	{r3, r4, r5, lr}
 800bbbc:	4604      	mov	r4, r0
 800bbbe:	460d      	mov	r5, r1
 800bbc0:	d904      	bls.n	800bbcc <_raise_r+0x14>
 800bbc2:	2316      	movs	r3, #22
 800bbc4:	6003      	str	r3, [r0, #0]
 800bbc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbca:	bd38      	pop	{r3, r4, r5, pc}
 800bbcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bbce:	b112      	cbz	r2, 800bbd6 <_raise_r+0x1e>
 800bbd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbd4:	b94b      	cbnz	r3, 800bbea <_raise_r+0x32>
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f000 f830 	bl	800bc3c <_getpid_r>
 800bbdc:	462a      	mov	r2, r5
 800bbde:	4601      	mov	r1, r0
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbe6:	f000 b817 	b.w	800bc18 <_kill_r>
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d00a      	beq.n	800bc04 <_raise_r+0x4c>
 800bbee:	1c59      	adds	r1, r3, #1
 800bbf0:	d103      	bne.n	800bbfa <_raise_r+0x42>
 800bbf2:	2316      	movs	r3, #22
 800bbf4:	6003      	str	r3, [r0, #0]
 800bbf6:	2001      	movs	r0, #1
 800bbf8:	e7e7      	b.n	800bbca <_raise_r+0x12>
 800bbfa:	2400      	movs	r4, #0
 800bbfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc00:	4628      	mov	r0, r5
 800bc02:	4798      	blx	r3
 800bc04:	2000      	movs	r0, #0
 800bc06:	e7e0      	b.n	800bbca <_raise_r+0x12>

0800bc08 <raise>:
 800bc08:	4b02      	ldr	r3, [pc, #8]	; (800bc14 <raise+0xc>)
 800bc0a:	4601      	mov	r1, r0
 800bc0c:	6818      	ldr	r0, [r3, #0]
 800bc0e:	f7ff bfd3 	b.w	800bbb8 <_raise_r>
 800bc12:	bf00      	nop
 800bc14:	200002cc 	.word	0x200002cc

0800bc18 <_kill_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	4d07      	ldr	r5, [pc, #28]	; (800bc38 <_kill_r+0x20>)
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	4604      	mov	r4, r0
 800bc20:	4608      	mov	r0, r1
 800bc22:	4611      	mov	r1, r2
 800bc24:	602b      	str	r3, [r5, #0]
 800bc26:	f7f5 fe0d 	bl	8001844 <_kill>
 800bc2a:	1c43      	adds	r3, r0, #1
 800bc2c:	d102      	bne.n	800bc34 <_kill_r+0x1c>
 800bc2e:	682b      	ldr	r3, [r5, #0]
 800bc30:	b103      	cbz	r3, 800bc34 <_kill_r+0x1c>
 800bc32:	6023      	str	r3, [r4, #0]
 800bc34:	bd38      	pop	{r3, r4, r5, pc}
 800bc36:	bf00      	nop
 800bc38:	200008d4 	.word	0x200008d4

0800bc3c <_getpid_r>:
 800bc3c:	f7f5 bdfa 	b.w	8001834 <_getpid>

0800bc40 <_init>:
 800bc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc42:	bf00      	nop
 800bc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc46:	bc08      	pop	{r3}
 800bc48:	469e      	mov	lr, r3
 800bc4a:	4770      	bx	lr

0800bc4c <_fini>:
 800bc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4e:	bf00      	nop
 800bc50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc52:	bc08      	pop	{r3}
 800bc54:	469e      	mov	lr, r3
 800bc56:	4770      	bx	lr
