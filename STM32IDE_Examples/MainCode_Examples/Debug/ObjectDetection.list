
ObjectDetection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002378  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800253c  0800253c  0001253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025b4  080025b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080025b4  080025b4  000125b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025bc  080025bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025bc  080025bc  000125bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025c0  080025c0  000125c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080025c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08002634  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08002634  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdf3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b19  00000000  00000000  0002ce93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b8  00000000  00000000  0002f3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002268d  00000000  00000000  0002fdb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d578  00000000  00000000  0005243d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfb76  00000000  00000000  0005f9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012f52b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd4  00000000  00000000  0012f580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002524 	.word	0x08002524

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08002524 	.word	0x08002524

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
  HAL_Init();
 8000502:	f000 fc1b 	bl	8000d3c <HAL_Init>

  SystemClock_Config();
 8000506:	f000 f957 	bl	80007b8 <SystemClock_Config>

  MX_GPIO_Init();
 800050a:	f000 fa1b 	bl	8000944 <MX_GPIO_Init>
  MX_I2C2_Init();
 800050e:	f000 f9c1 	bl	8000894 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000512:	f000 f9ed 	bl	80008f0 <MX_USART2_UART_Init>
  // Brett_VL53L0X_StartMultiSensing(VL53L0X_DEV Dev)
  // TODO: sned multipl Devs and Distances not 1 at a time
  // VL53L0X_Error Brett_VL53L0X_FinishMultiSensing(VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData);

  // init update timers
  time_t startTime = clock();
 8000516:	f001 ffc1 	bl	800249c <clock>
 800051a:	4603      	mov	r3, r0
 800051c:	461a      	mov	r2, r3
 800051e:	f04f 0300 	mov.w	r3, #0
 8000522:	e9c7 2300 	strd	r2, r3, [r7]
  timer_IR = startTime;
 8000526:	490a      	ldr	r1, [pc, #40]	; (8000550 <main+0x54>)
 8000528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800052c:	e9c1 2300 	strd	r2, r3, [r1]
  timer_GPS = startTime;
 8000530:	4908      	ldr	r1, [pc, #32]	; (8000554 <main+0x58>)
 8000532:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000536:	e9c1 2300 	strd	r2, r3, [r1]

  // start IR multi sense so we can get the data when timer is up
  // Brett_VL53L0X_StartMultiSensing(VL53L0X_DEV Dev)

  // start loop 3
  brett_status = Loop3_NoObject();
 800053a:	f000 f80f 	bl	800055c <Loop3_NoObject>
 800053e:	4603      	mov	r3, r0
 8000540:	4a05      	ldr	r2, [pc, #20]	; (8000558 <main+0x5c>)
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200000f0 	.word	0x200000f0
 8000554:	20000090 	.word	0x20000090
 8000558:	2000008c 	.word	0x2000008c

0800055c <Loop3_NoObject>:

int Loop3_NoObject()
{
 800055c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000560:	b086      	sub	sp, #24
 8000562:	af00      	add	r7, sp, #0
	// grab current clock time
	time_t currentTime = clock();
 8000564:	f001 ff9a 	bl	800249c <clock>
 8000568:	4603      	mov	r3, r0
 800056a:	461a      	mov	r2, r3
 800056c:	f04f 0300 	mov.w	r3, #0
 8000570:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// check GPS
	if (timer_GPS + DELAY_GPS >= currentTime)
 8000574:	4b2a      	ldr	r3, [pc, #168]	; (8000620 <Loop3_NoObject+0xc4>)
 8000576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800057a:	f512 787a 	adds.w	r8, r2, #1000	; 0x3e8
 800057e:	f143 0900 	adc.w	r9, r3, #0
 8000582:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000586:	4590      	cmp	r8, r2
 8000588:	eb79 0303 	sbcs.w	r3, r9, r3
 800058c:	db04      	blt.n	8000598 <Loop3_NoObject+0x3c>
	{
		// update GPS
		// TODO: Write GPS stuff here

		// update gps timer
		timer_GPS = currentTime;
 800058e:	4924      	ldr	r1, [pc, #144]	; (8000620 <Loop3_NoObject+0xc4>)
 8000590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000594:	e9c1 2300 	strd	r2, r3, [r1]
	}

	// check IRs
	if (timer_IR + DELAY_IR >= currentTime)
 8000598:	4b22      	ldr	r3, [pc, #136]	; (8000624 <Loop3_NoObject+0xc8>)
 800059a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800059e:	f112 04c8 	adds.w	r4, r2, #200	; 0xc8
 80005a2:	f143 0500 	adc.w	r5, r3, #0
 80005a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80005aa:	4294      	cmp	r4, r2
 80005ac:	eb75 0303 	sbcs.w	r3, r5, r3
 80005b0:	db2f      	blt.n	8000612 <Loop3_NoObject+0xb6>
		// VL53L0X_Error error_IR = Brett_VL53L0X_FinishMultiSensing(VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData);
		// error_IR = Brett_VL53L0X_StartMultiSensing(VL53L0X_DEV Dev);
		// TODO: check error_IR

		// update IR timer
		timer_IR = currentTime;
 80005b2:	491c      	ldr	r1, [pc, #112]	; (8000624 <Loop3_NoObject+0xc8>)
 80005b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80005b8:	e9c1 2300 	strd	r2, r3, [r1]

		// check if object is in front of us
		bool objectInOuterRing = false;
 80005bc:	2300      	movs	r3, #0
 80005be:	75fb      	strb	r3, [r7, #23]
		if (distances[SENSOR_FRONT] < RANGE_OUTER)
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <Loop3_NoObject+0xcc>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80005c8:	dc01      	bgt.n	80005ce <Loop3_NoObject+0x72>
			objectInOuterRing = true;
 80005ca:	2301      	movs	r3, #1
 80005cc:	75fb      	strb	r3, [r7, #23]
		if (objectInOuterRing)
 80005ce:	7dfb      	ldrb	r3, [r7, #23]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d01e      	beq.n	8000612 <Loop3_NoObject+0xb6>
		{
			// init
			OuterRing_init(&initalHitDis);
 80005d4:	4815      	ldr	r0, [pc, #84]	; (800062c <Loop3_NoObject+0xd0>)
 80005d6:	f000 fb50 	bl	8000c7a <OuterRing_init>

			// loop
			int res = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
			int reason = 1;
 80005de:	2301      	movs	r3, #1
 80005e0:	603b      	str	r3, [r7, #0]
			while (1)
			{
				// control
				res = OuterRing_control(distances, reason, initalDetachHit, initalHitDis);
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <Loop3_NoObject+0xd4>)
 80005e6:	7812      	ldrb	r2, [r2, #0]
 80005e8:	4910      	ldr	r1, [pc, #64]	; (800062c <Loop3_NoObject+0xd0>)
 80005ea:	edd1 7a00 	vldr	s15, [r1]
 80005ee:	eeb0 0a67 	vmov.f32	s0, s15
 80005f2:	4619      	mov	r1, r3
 80005f4:	480c      	ldr	r0, [pc, #48]	; (8000628 <Loop3_NoObject+0xcc>)
 80005f6:	f000 fb4b 	bl	8000c90 <OuterRing_control>
 80005fa:	6078      	str	r0, [r7, #4]

				// res == 1 returns to no object loop
				if (res == 1)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d006      	beq.n	8000610 <Loop3_NoObject+0xb4>
					break;

				// Loop4
				reason = Loop4_OuterLoop(&reason);
 8000602:	463b      	mov	r3, r7
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f815 	bl	8000634 <Loop4_OuterLoop>
 800060a:	4603      	mov	r3, r0
 800060c:	603b      	str	r3, [r7, #0]
				res = OuterRing_control(distances, reason, initalDetachHit, initalHitDis);
 800060e:	e7e8      	b.n	80005e2 <Loop3_NoObject+0x86>
					break;
 8000610:	bf00      	nop
			}
		}
	}
	return 0;
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800061e:	bf00      	nop
 8000620:	20000090 	.word	0x20000090
 8000624:	200000f0 	.word	0x200000f0
 8000628:	20000140 	.word	0x20000140
 800062c:	200000f8 	.word	0x200000f8
 8000630:	20000160 	.word	0x20000160

08000634 <Loop4_OuterLoop>:

int Loop4_OuterLoop(int *reason)
{
 8000634:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000638:	b088      	sub	sp, #32
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]
	while (1)
	{
		// grab current clock time
		time_t currentTime = clock();
 800063e:	f001 ff2d 	bl	800249c <clock>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	f04f 0300 	mov.w	r3, #0
 800064a:	e9c7 2302 	strd	r2, r3, [r7, #8]

		// check GPS
		if (timer_GPS + DELAY_GPS >= currentTime)
 800064e:	4b34      	ldr	r3, [pc, #208]	; (8000720 <Loop4_OuterLoop+0xec>)
 8000650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000654:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8000658:	f143 0500 	adc.w	r5, r3, #0
 800065c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000660:	4294      	cmp	r4, r2
 8000662:	eb75 0303 	sbcs.w	r3, r5, r3
 8000666:	db04      	blt.n	8000672 <Loop4_OuterLoop+0x3e>
		{
			// update GPS
			// TODO: Write GPS stuff here

			// update gps timer
			timer_GPS = currentTime;
 8000668:	492d      	ldr	r1, [pc, #180]	; (8000720 <Loop4_OuterLoop+0xec>)
 800066a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800066e:	e9c1 2300 	strd	r2, r3, [r1]
		}

		// check IRs
		if (timer_IR + DELAY_IR >= currentTime)
 8000672:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <Loop4_OuterLoop+0xf0>)
 8000674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000678:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 800067c:	f143 0900 	adc.w	r9, r3, #0
 8000680:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000684:	4590      	cmp	r8, r2
 8000686:	eb79 0303 	sbcs.w	r3, r9, r3
 800068a:	db23      	blt.n	80006d4 <Loop4_OuterLoop+0xa0>
			// VL53L0X_Error error_IR = Brett_VL53L0X_FinishMultiSensing(VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData);
			// error_IR = Brett_VL53L0X_StartMultiSensing(VL53L0X_DEV Dev);
			// TODO: check error_IR

			// update IR timer
			timer_IR = currentTime;
 800068c:	4925      	ldr	r1, [pc, #148]	; (8000724 <Loop4_OuterLoop+0xf0>)
 800068e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000692:	e9c1 2300 	strd	r2, r3, [r1]

			// check if there is an object in inner ring
			bool objectInInnerRing = false;
 8000696:	2300      	movs	r3, #0
 8000698:	77fb      	strb	r3, [r7, #31]
			int hitDir;
			for (int i = 0; i < AMOUNT_IRS; i++)
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	e00d      	b.n	80006bc <Loop4_OuterLoop+0x88>
			{
				if (distances[i] < RANGE_INNER)
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <Loop4_OuterLoop+0xf4>)
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a8:	2bc7      	cmp	r3, #199	; 0xc7
 80006aa:	dc04      	bgt.n	80006b6 <Loop4_OuterLoop+0x82>
				{
					objectInInnerRing = true;
 80006ac:	2301      	movs	r3, #1
 80006ae:	77fb      	strb	r3, [r7, #31]
					hitDir = i;
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	61bb      	str	r3, [r7, #24]
					break;
 80006b4:	e005      	b.n	80006c2 <Loop4_OuterLoop+0x8e>
			for (int i = 0; i < AMOUNT_IRS; i++)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	2b07      	cmp	r3, #7
 80006c0:	ddee      	ble.n	80006a0 <Loop4_OuterLoop+0x6c>
				}
			}

			// if there is something in inner ring
			// call inner loop
			if (objectInInnerRing)
 80006c2:	7ffb      	ldrb	r3, [r7, #31]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d005      	beq.n	80006d4 <Loop4_OuterLoop+0xa0>
			{
				// init

				// control
				InnerRing_control(hitDir);
 80006c8:	69b8      	ldr	r0, [r7, #24]
 80006ca:	f000 fac2 	bl	8000c52 <InnerRing_control>

				//loop
				Loop5_InnerRing(hitDir);
 80006ce:	69b8      	ldr	r0, [r7, #24]
 80006d0:	f000 f82e 	bl	8000730 <Loop5_InnerRing>
			}
		}

		// check for initalDetachHit
		if (!initalDetachHit)
 80006d4:	4b15      	ldr	r3, [pc, #84]	; (800072c <Loop4_OuterLoop+0xf8>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	f083 0301 	eor.w	r3, r3, #1
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <Loop4_OuterLoop+0xbe>
		{
			// check detach sensor
			if (distances[SENSOR_DETACH] < RANGE_OUTER)
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <Loop4_OuterLoop+0xf4>)
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80006ea:	dc02      	bgt.n	80006f2 <Loop4_OuterLoop+0xbe>
				initalDetachHit = true;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <Loop4_OuterLoop+0xf8>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
		}

		// check for objects infront of us
		if (distances[SENSOR_FRONT < RANGE_OUTER])
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <Loop4_OuterLoop+0xf4>)
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <Loop4_OuterLoop+0xca>
			return 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00a      	b.n	8000714 <Loop4_OuterLoop+0xe0>

		// check if we detached
		if (initalDetachHit)
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <Loop4_OuterLoop+0xf8>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d09b      	beq.n	800063e <Loop4_OuterLoop+0xa>
		{
			if (distances[SENSOR_DETACH] > RANGE_OUTER)
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <Loop4_OuterLoop+0xf4>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	f240 2261 	movw	r2, #609	; 0x261
 800070e:	4293      	cmp	r3, r2
 8000710:	dd95      	ble.n	800063e <Loop4_OuterLoop+0xa>
						return 2;
 8000712:	2302      	movs	r3, #2
	}

	// maybe make a saftey exit
	// like 10-20sec then revert to main loop
	return 0;
}
 8000714:	4618      	mov	r0, r3
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800071e:	bf00      	nop
 8000720:	20000090 	.word	0x20000090
 8000724:	200000f0 	.word	0x200000f0
 8000728:	20000140 	.word	0x20000140
 800072c:	20000160 	.word	0x20000160

08000730 <Loop5_InnerRing>:

int Loop5_InnerRing(int hitDir)
{
 8000730:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000734:	b084      	sub	sp, #16
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// grab current clock time
		time_t currentTime = clock();
 800073a:	f001 feaf 	bl	800249c <clock>
 800073e:	4603      	mov	r3, r0
 8000740:	461a      	mov	r2, r3
 8000742:	f04f 0300 	mov.w	r3, #0
 8000746:	e9c7 2302 	strd	r2, r3, [r7, #8]

		// check GPS
		if (timer_GPS + DELAY_GPS >= currentTime)
 800074a:	4b18      	ldr	r3, [pc, #96]	; (80007ac <Loop5_InnerRing+0x7c>)
 800074c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000750:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8000754:	f143 0500 	adc.w	r5, r3, #0
 8000758:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800075c:	4294      	cmp	r4, r2
 800075e:	eb75 0303 	sbcs.w	r3, r5, r3
 8000762:	db04      	blt.n	800076e <Loop5_InnerRing+0x3e>
		{
			// update GPS
			// TODO: Write GPS stuff here

			// update gps timer
			timer_GPS = currentTime;
 8000764:	4911      	ldr	r1, [pc, #68]	; (80007ac <Loop5_InnerRing+0x7c>)
 8000766:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800076a:	e9c1 2300 	strd	r2, r3, [r1]
		}

		// check IRs
		if (timer_IR + DELAY_IR >= currentTime)
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <Loop5_InnerRing+0x80>)
 8000770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000774:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 8000778:	f143 0900 	adc.w	r9, r3, #0
 800077c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000780:	4590      	cmp	r8, r2
 8000782:	eb79 0303 	sbcs.w	r3, r9, r3
 8000786:	db04      	blt.n	8000792 <Loop5_InnerRing+0x62>
			// VL53L0X_Error error_IR = Brett_VL53L0X_FinishMultiSensing(VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData);
			// error_IR = Brett_VL53L0X_StartMultiSensing(VL53L0X_DEV Dev);
			// TODO: check error_IR

			// update IR timer
			timer_IR = currentTime;
 8000788:	4909      	ldr	r1, [pc, #36]	; (80007b0 <Loop5_InnerRing+0x80>)
 800078a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800078e:	e9c1 2300 	strd	r2, r3, [r1]
		}

		// move until X distance away from inner hit
		// TODO: 50mm is a random number, test this
		if (distances[hitDir] > RANGE_INNER + 50)
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <Loop5_InnerRing+0x84>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079a:	2bfa      	cmp	r3, #250	; 0xfa
 800079c:	ddcd      	ble.n	800073a <Loop5_InnerRing+0xa>
		{
			return 0;
 800079e:	2300      	movs	r3, #0
		}
	}
	return 0;
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80007aa:	bf00      	nop
 80007ac:	20000090 	.word	0x20000090
 80007b0:	200000f0 	.word	0x200000f0
 80007b4:	20000140 	.word	0x20000140

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	; 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2234      	movs	r2, #52	; 0x34
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fea0 	bl	800250c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <SystemClock_Config+0xd4>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a29      	ldr	r2, [pc, #164]	; (800088c <SystemClock_Config+0xd4>)
 80007e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <SystemClock_Config+0xd4>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007f8:	2300      	movs	r3, #0
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <SystemClock_Config+0xd8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000804:	4a22      	ldr	r2, [pc, #136]	; (8000890 <SystemClock_Config+0xd8>)
 8000806:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080a:	6013      	str	r3, [r2, #0]
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <SystemClock_Config+0xd8>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000818:	2302      	movs	r3, #2
 800081a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800081c:	2301      	movs	r3, #1
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000820:	2310      	movs	r3, #16
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000828:	2300      	movs	r3, #0
 800082a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800082c:	2310      	movs	r3, #16
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000830:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000834:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000836:	2304      	movs	r3, #4
 8000838:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4618      	mov	r0, r3
 8000848:	f001 f974 	bl	8001b34 <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000852:	f000 f8ad 	bl	80009b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	2302      	movs	r3, #2
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	2102      	movs	r1, #2
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fe92 	bl	800159c <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800087e:	f000 f897 	bl	80009b0 <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	; 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2C2_Init+0x50>)
 800089a:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <MX_I2C2_Init+0x54>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008a0:	4a12      	ldr	r2, [pc, #72]	; (80008ec <MX_I2C2_Init+0x58>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_I2C2_Init+0x50>)
 80008d2:	f000 fd1f 	bl	8001314 <HAL_I2C_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008dc:	f000 f868 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000098 	.word	0x20000098
 80008e8:	40005800 	.word	0x40005800
 80008ec:	000186a0 	.word	0x000186a0

080008f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_USART2_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_USART2_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_USART2_UART_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_USART2_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_USART2_UART_Init+0x4c>)
 8000928:	f001 fba2 	bl	8002070 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f83d 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200000fc 	.word	0x200000fc
 8000940:	40004400 	.word	0x40004400

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_GPIO_Init+0x68>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a16      	ldr	r2, [pc, #88]	; (80009ac <MX_GPIO_Init+0x68>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_GPIO_Init+0x68>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <MX_GPIO_Init+0x68>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a0f      	ldr	r2, [pc, #60]	; (80009ac <MX_GPIO_Init+0x68>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <MX_GPIO_Init+0x68>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_GPIO_Init+0x68>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a08      	ldr	r2, [pc, #32]	; (80009ac <MX_GPIO_Init+0x68>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_GPIO_Init+0x68>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a0f      	ldr	r2, [pc, #60]	; (8000a08 <HAL_MspInit+0x4c>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x4c>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fa:	2007      	movs	r0, #7
 80009fc:	f000 fac2 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a00:	bf00      	nop
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800

08000a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a29      	ldr	r2, [pc, #164]	; (8000ad0 <HAL_I2C_MspInit+0xc4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d14b      	bne.n	8000ac6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <HAL_I2C_MspInit+0xc8>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a27      	ldr	r2, [pc, #156]	; (8000ad4 <HAL_I2C_MspInit+0xc8>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <HAL_I2C_MspInit+0xc8>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <HAL_I2C_MspInit+0xc8>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a20      	ldr	r2, [pc, #128]	; (8000ad4 <HAL_I2C_MspInit+0xc8>)
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <HAL_I2C_MspInit+0xc8>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a6c:	2312      	movs	r3, #18
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4815      	ldr	r0, [pc, #84]	; (8000ad8 <HAL_I2C_MspInit+0xcc>)
 8000a84:	f000 fab2 	bl	8000fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a8e:	2312      	movs	r3, #18
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a9a:	2304      	movs	r3, #4
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480d      	ldr	r0, [pc, #52]	; (8000adc <HAL_I2C_MspInit+0xd0>)
 8000aa6:	f000 faa1 	bl	8000fec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_I2C_MspInit+0xc8>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_I2C_MspInit+0xc8>)
 8000ab4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_I2C_MspInit+0xc8>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40005800 	.word	0x40005800
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	40020800 	.word	0x40020800

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <HAL_UART_MspInit+0x84>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12b      	bne.n	8000b5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	6413      	str	r3, [r2, #64]	; 0x40
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_UART_MspInit+0x88>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <HAL_UART_MspInit+0x8c>)
 8000b56:	f000 fa49 	bl	8000fec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3728      	adds	r7, #40	; 0x28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f910 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_times>:
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	return -1;
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480d      	ldr	r0, [pc, #52]	; (8000c3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c06:	490e      	ldr	r1, [pc, #56]	; (8000c40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c08:	4a0e      	ldr	r2, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c1c:	4c0b      	ldr	r4, [pc, #44]	; (8000c4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c2a:	f7ff ffd7 	bl	8000bdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f001 fc49 	bl	80024c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fc63 	bl	80004fc <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c44:	080025c4 	.word	0x080025c4
  ldr r2, =_sbss
 8000c48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c4c:	20000168 	.word	0x20000168

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>

08000c52 <InnerRing_control>:

#include "InnerRing.h"


int InnerRing_control(int hitDir)
{
 8000c52:	b480      	push	{r7}
 8000c54:	b085      	sub	sp, #20
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
	// find direction oposite of hitDir
	int newDir = hitDir + 4;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	60fb      	str	r3, [r7, #12]
	if (newDir > 7)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b07      	cmp	r3, #7
 8000c64:	dd02      	ble.n	8000c6c <InnerRing_control+0x1a>
		newDir -= 8;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3b08      	subs	r3, #8
 8000c6a:	60fb      	str	r3, [r7, #12]

	// turn towards newDir
	// TODO: turn(newdir)

	// return to go to Loop 5 (inner ring)
	return 0;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <OuterRing_init>:



// TODO: give ptr to GPS data
int OuterRing_init(float *initalHitDis)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	// TODO: Capture our current position

	return 0;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <OuterRing_control>:


int OuterRing_control(int distances[], int reason, bool initalDetachHit, float initalHitDis)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	; 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	ed87 0a00 	vstr	s0, [r7]
 8000ca0:	71fb      	strb	r3, [r7, #7]
	// reason == 1 means object ahead
	if (reason == 1)
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d132      	bne.n	8000d0e <OuterRing_control+0x7e>
	{
		// turn to first open position, clockwise
		int direction;
		int backup = distances[0];	// highest valued direction
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < AMOUNT_IRS; i++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	e01c      	b.n	8000cee <OuterRing_control+0x5e>
		{
			// if greater than outer range then its open
			if (distances[i] >= RANGE_OUTER)
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4413      	add	r3, r2
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000cc2:	dd02      	ble.n	8000cca <OuterRing_control+0x3a>
			{
				direction = i;
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	617b      	str	r3, [r7, #20]
				break;
 8000cc8:	e014      	b.n	8000cf4 <OuterRing_control+0x64>
			}

			// keep tack of farthest reading
			if (distances[i] > backup)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	69fa      	ldr	r2, [r7, #28]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	da01      	bge.n	8000cde <OuterRing_control+0x4e>
				backup = i;
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	61fb      	str	r3, [r7, #28]

			// if we didnt find anything just settle for backup
			// this really shoulnt happen
			// TODO: consider printf debug here
			if (i == AMOUNT_IRS - 1)
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	2b07      	cmp	r3, #7
 8000ce2:	d101      	bne.n	8000ce8 <OuterRing_control+0x58>
				direction = backup;
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < AMOUNT_IRS; i++)
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	3301      	adds	r3, #1
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	2b07      	cmp	r3, #7
 8000cf2:	dddf      	ble.n	8000cb4 <OuterRing_control+0x24>

		// turn to choosen direction
		//TODO: turn(direction)

		// update initalDetachHit
		if (distances[SENSOR_DETACH] < RANGE_OUTER)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	3314      	adds	r3, #20
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000cfe:	dc02      	bgt.n	8000d06 <OuterRing_control+0x76>
			initalDetachHit = true;
 8000d00:	2301      	movs	r3, #1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	e001      	b.n	8000d0a <OuterRing_control+0x7a>
		else
			initalDetachHit = false;
 8000d06:	2300      	movs	r3, #0
 8000d08:	71fb      	strb	r3, [r7, #7]

		// return to Loop 3
		return 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e010      	b.n	8000d30 <OuterRing_control+0xa0>
	}
	else if (reason == 2)
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d10c      	bne.n	8000d2e <OuterRing_control+0x9e>

		// turn to detach + 1
		// TODO: turn(detach + 1 direction)

		// update initalDetachHit
		if (distances[SENSOR_DETACH] < RANGE_OUTER)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	3314      	adds	r3, #20
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000d1e:	dc02      	bgt.n	8000d26 <OuterRing_control+0x96>
			initalDetachHit = true;
 8000d20:	2301      	movs	r3, #1
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	e001      	b.n	8000d2a <OuterRing_control+0x9a>
		else
			initalDetachHit = false;
 8000d26:	2300      	movs	r3, #0
 8000d28:	71fb      	strb	r3, [r7, #7]

		// return to Loop 3
		return 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <OuterRing_control+0xa0>
	}
	else
	{
		// do nothing
	}
	return 0;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3724      	adds	r7, #36	; 0x24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0d      	ldr	r2, [pc, #52]	; (8000d7c <HAL_Init+0x40>)
 8000d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <HAL_Init+0x40>)
 8000d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_Init+0x40>)
 8000d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f90d 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f808 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fe24 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023c00 	.word	0x40023c00

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x54>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_InitTick+0x58>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f917 	bl	8000fd2 <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00e      	b.n	8000dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d80a      	bhi.n	8000dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 f8ed 	bl	8000f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	; (8000ddc <HAL_InitTick+0x5c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000004 	.word	0x20000004

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000164 	.word	0x20000164

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000164 	.word	0x20000164

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	; (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43da      	mvns	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	4313      	orrs	r3, r2
         );
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	; 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00f      	b.n	8000f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <SysTick_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f7ff ff8e 	bl	8000e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <SysTick_Config+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <SysTick_Config+0x40>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff47 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff5c 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ff8e 	bl	8000ed8 <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff5d 	bl	8000e84 <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ffb0 	bl	8000f40 <SysTick_Config>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	e165      	b.n	80012d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 8154 	bne.w	80012ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b01      	cmp	r3, #1
 8001030:	d005      	beq.n	800103e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103a:	2b02      	cmp	r3, #2
 800103c:	d130      	bne.n	80010a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	f003 0201 	and.w	r2, r3, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d017      	beq.n	80010dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d123      	bne.n	8001130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	69b9      	ldr	r1, [r7, #24]
 800112c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0203 	and.w	r2, r3, #3
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80ae 	beq.w	80012ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <HAL_GPIO_Init+0x300>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a5c      	ldr	r2, [pc, #368]	; (80012ec <HAL_GPIO_Init+0x300>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b5a      	ldr	r3, [pc, #360]	; (80012ec <HAL_GPIO_Init+0x300>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800118e:	4a58      	ldr	r2, [pc, #352]	; (80012f0 <HAL_GPIO_Init+0x304>)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4f      	ldr	r2, [pc, #316]	; (80012f4 <HAL_GPIO_Init+0x308>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d025      	beq.n	8001206 <HAL_GPIO_Init+0x21a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4e      	ldr	r2, [pc, #312]	; (80012f8 <HAL_GPIO_Init+0x30c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d01f      	beq.n	8001202 <HAL_GPIO_Init+0x216>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4d      	ldr	r2, [pc, #308]	; (80012fc <HAL_GPIO_Init+0x310>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0x212>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4c      	ldr	r2, [pc, #304]	; (8001300 <HAL_GPIO_Init+0x314>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0x20e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4b      	ldr	r2, [pc, #300]	; (8001304 <HAL_GPIO_Init+0x318>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00d      	beq.n	80011f6 <HAL_GPIO_Init+0x20a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4a      	ldr	r2, [pc, #296]	; (8001308 <HAL_GPIO_Init+0x31c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x206>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a49      	ldr	r2, [pc, #292]	; (800130c <HAL_GPIO_Init+0x320>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_GPIO_Init+0x202>
 80011ea:	2306      	movs	r3, #6
 80011ec:	e00c      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011ee:	2307      	movs	r3, #7
 80011f0:	e00a      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011f2:	2305      	movs	r3, #5
 80011f4:	e008      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011f6:	2304      	movs	r3, #4
 80011f8:	e006      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011fa:	2303      	movs	r3, #3
 80011fc:	e004      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 80011fe:	2302      	movs	r3, #2
 8001200:	e002      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x21c>
 8001206:	2300      	movs	r3, #0
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	f002 0203 	and.w	r2, r2, #3
 800120e:	0092      	lsls	r2, r2, #2
 8001210:	4093      	lsls	r3, r2
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4313      	orrs	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001218:	4935      	ldr	r1, [pc, #212]	; (80012f0 <HAL_GPIO_Init+0x304>)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001226:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <HAL_GPIO_Init+0x324>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800124a:	4a31      	ldr	r2, [pc, #196]	; (8001310 <HAL_GPIO_Init+0x324>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001250:	4b2f      	ldr	r3, [pc, #188]	; (8001310 <HAL_GPIO_Init+0x324>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d003      	beq.n	8001274 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001274:	4a26      	ldr	r2, [pc, #152]	; (8001310 <HAL_GPIO_Init+0x324>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127a:	4b25      	ldr	r3, [pc, #148]	; (8001310 <HAL_GPIO_Init+0x324>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c8:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	f67f ae96 	bls.w	8001008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40013800 	.word	0x40013800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020400 	.word	0x40020400
 80012fc:	40020800 	.word	0x40020800
 8001300:	40020c00 	.word	0x40020c00
 8001304:	40021000 	.word	0x40021000
 8001308:	40021400 	.word	0x40021400
 800130c:	40021800 	.word	0x40021800
 8001310:	40013c00 	.word	0x40013c00

08001314 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e12b      	b.n	800157e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d106      	bne.n	8001340 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fb66 	bl	8000a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2224      	movs	r2, #36	; 0x24
 8001344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001366:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001376:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001378:	f000 fa02 	bl	8001780 <HAL_RCC_GetPCLK1Freq>
 800137c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4a81      	ldr	r2, [pc, #516]	; (8001588 <HAL_I2C_Init+0x274>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d807      	bhi.n	8001398 <HAL_I2C_Init+0x84>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4a80      	ldr	r2, [pc, #512]	; (800158c <HAL_I2C_Init+0x278>)
 800138c:	4293      	cmp	r3, r2
 800138e:	bf94      	ite	ls
 8001390:	2301      	movls	r3, #1
 8001392:	2300      	movhi	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	e006      	b.n	80013a6 <HAL_I2C_Init+0x92>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4a7d      	ldr	r2, [pc, #500]	; (8001590 <HAL_I2C_Init+0x27c>)
 800139c:	4293      	cmp	r3, r2
 800139e:	bf94      	ite	ls
 80013a0:	2301      	movls	r3, #1
 80013a2:	2300      	movhi	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e0e7      	b.n	800157e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4a78      	ldr	r2, [pc, #480]	; (8001594 <HAL_I2C_Init+0x280>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0c9b      	lsrs	r3, r3, #18
 80013b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	4a6a      	ldr	r2, [pc, #424]	; (8001588 <HAL_I2C_Init+0x274>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d802      	bhi.n	80013e8 <HAL_I2C_Init+0xd4>
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3301      	adds	r3, #1
 80013e6:	e009      	b.n	80013fc <HAL_I2C_Init+0xe8>
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013ee:	fb02 f303 	mul.w	r3, r2, r3
 80013f2:	4a69      	ldr	r2, [pc, #420]	; (8001598 <HAL_I2C_Init+0x284>)
 80013f4:	fba2 2303 	umull	r2, r3, r2, r3
 80013f8:	099b      	lsrs	r3, r3, #6
 80013fa:	3301      	adds	r3, #1
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	430b      	orrs	r3, r1
 8001402:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800140e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	495c      	ldr	r1, [pc, #368]	; (8001588 <HAL_I2C_Init+0x274>)
 8001418:	428b      	cmp	r3, r1
 800141a:	d819      	bhi.n	8001450 <HAL_I2C_Init+0x13c>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	1e59      	subs	r1, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fbb1 f3f3 	udiv	r3, r1, r3
 800142a:	1c59      	adds	r1, r3, #1
 800142c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001430:	400b      	ands	r3, r1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00a      	beq.n	800144c <HAL_I2C_Init+0x138>
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1e59      	subs	r1, r3, #1
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fbb1 f3f3 	udiv	r3, r1, r3
 8001444:	3301      	adds	r3, #1
 8001446:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800144a:	e051      	b.n	80014f0 <HAL_I2C_Init+0x1dc>
 800144c:	2304      	movs	r3, #4
 800144e:	e04f      	b.n	80014f0 <HAL_I2C_Init+0x1dc>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d111      	bne.n	800147c <HAL_I2C_Init+0x168>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1e58      	subs	r0, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6859      	ldr	r1, [r3, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	440b      	add	r3, r1
 8001466:	fbb0 f3f3 	udiv	r3, r0, r3
 800146a:	3301      	adds	r3, #1
 800146c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf0c      	ite	eq
 8001474:	2301      	moveq	r3, #1
 8001476:	2300      	movne	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	e012      	b.n	80014a2 <HAL_I2C_Init+0x18e>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1e58      	subs	r0, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6859      	ldr	r1, [r3, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	0099      	lsls	r1, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001492:	3301      	adds	r3, #1
 8001494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001498:	2b00      	cmp	r3, #0
 800149a:	bf0c      	ite	eq
 800149c:	2301      	moveq	r3, #1
 800149e:	2300      	movne	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_I2C_Init+0x196>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e022      	b.n	80014f0 <HAL_I2C_Init+0x1dc>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10e      	bne.n	80014d0 <HAL_I2C_Init+0x1bc>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1e58      	subs	r0, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6859      	ldr	r1, [r3, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	440b      	add	r3, r1
 80014c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c4:	3301      	adds	r3, #1
 80014c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ce:	e00f      	b.n	80014f0 <HAL_I2C_Init+0x1dc>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1e58      	subs	r0, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6859      	ldr	r1, [r3, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	0099      	lsls	r1, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	6809      	ldr	r1, [r1, #0]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800151e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6911      	ldr	r1, [r2, #16]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68d2      	ldr	r2, [r2, #12]
 800152a:	4311      	orrs	r1, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	430b      	orrs	r3, r1
 8001532:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0201 	orr.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2220      	movs	r2, #32
 800156a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	000186a0 	.word	0x000186a0
 800158c:	001e847f 	.word	0x001e847f
 8001590:	003d08ff 	.word	0x003d08ff
 8001594:	431bde83 	.word	0x431bde83
 8001598:	10624dd3 	.word	0x10624dd3

0800159c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0cc      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015b0:	4b68      	ldr	r3, [pc, #416]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d90c      	bls.n	80015d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b65      	ldr	r3, [pc, #404]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c6:	4b63      	ldr	r3, [pc, #396]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e0b8      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d020      	beq.n	8001626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f0:	4b59      	ldr	r3, [pc, #356]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4a58      	ldr	r2, [pc, #352]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001608:	4b53      	ldr	r3, [pc, #332]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4a52      	ldr	r2, [pc, #328]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001614:	4b50      	ldr	r3, [pc, #320]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	494d      	ldr	r1, [pc, #308]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	4313      	orrs	r3, r2
 8001624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d044      	beq.n	80016bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800163a:	4b47      	ldr	r3, [pc, #284]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d119      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e07f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d003      	beq.n	800165a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001656:	2b03      	cmp	r3, #3
 8001658:	d107      	bne.n	800166a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165a:	4b3f      	ldr	r3, [pc, #252]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d109      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e06f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e067      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167a:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f023 0203 	bic.w	r2, r3, #3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4934      	ldr	r1, [pc, #208]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001688:	4313      	orrs	r3, r2
 800168a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800168c:	f7ff fbbc 	bl	8000e08 <HAL_GetTick>
 8001690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001692:	e00a      	b.n	80016aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001694:	f7ff fbb8 	bl	8000e08 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e04f      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 020c 	and.w	r2, r3, #12
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d1eb      	bne.n	8001694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016bc:	4b25      	ldr	r3, [pc, #148]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d20c      	bcs.n	80016e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e032      	b.n	800174a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d008      	beq.n	8001702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	4916      	ldr	r1, [pc, #88]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d009      	beq.n	8001722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	490e      	ldr	r1, [pc, #56]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001722:	f000 f855 	bl	80017d0 <HAL_RCC_GetSysClockFreq>
 8001726:	4602      	mov	r2, r0
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	490a      	ldr	r1, [pc, #40]	; (800175c <HAL_RCC_ClockConfig+0x1c0>)
 8001734:	5ccb      	ldrb	r3, [r1, r3]
 8001736:	fa22 f303 	lsr.w	r3, r2, r3
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <HAL_RCC_ClockConfig+0x1c4>)
 800173c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800173e:	4b09      	ldr	r3, [pc, #36]	; (8001764 <HAL_RCC_ClockConfig+0x1c8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fb1c 	bl	8000d80 <HAL_InitTick>

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023c00 	.word	0x40023c00
 8001758:	40023800 	.word	0x40023800
 800175c:	0800253c 	.word	0x0800253c
 8001760:	20000000 	.word	0x20000000
 8001764:	20000004 	.word	0x20000004

08001768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_RCC_GetHCLKFreq+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000000 	.word	0x20000000

08001780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001784:	f7ff fff0 	bl	8001768 <HAL_RCC_GetHCLKFreq>
 8001788:	4602      	mov	r2, r0
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	0a9b      	lsrs	r3, r3, #10
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	4903      	ldr	r1, [pc, #12]	; (80017a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001796:	5ccb      	ldrb	r3, [r1, r3]
 8001798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800179c:	4618      	mov	r0, r3
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	0800254c 	.word	0x0800254c

080017a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017ac:	f7ff ffdc 	bl	8001768 <HAL_RCC_GetHCLKFreq>
 80017b0:	4602      	mov	r2, r0
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	0b5b      	lsrs	r3, r3, #13
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	4903      	ldr	r1, [pc, #12]	; (80017cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80017be:	5ccb      	ldrb	r3, [r1, r3]
 80017c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40023800 	.word	0x40023800
 80017cc:	0800254c 	.word	0x0800254c

080017d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d4:	b088      	sub	sp, #32
 80017d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017ec:	4bce      	ldr	r3, [pc, #824]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x358>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 030c 	and.w	r3, r3, #12
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	f200 818d 	bhi.w	8001b14 <HAL_RCC_GetSysClockFreq+0x344>
 80017fa:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <HAL_RCC_GetSysClockFreq+0x30>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	08001835 	.word	0x08001835
 8001804:	08001b15 	.word	0x08001b15
 8001808:	08001b15 	.word	0x08001b15
 800180c:	08001b15 	.word	0x08001b15
 8001810:	0800183b 	.word	0x0800183b
 8001814:	08001b15 	.word	0x08001b15
 8001818:	08001b15 	.word	0x08001b15
 800181c:	08001b15 	.word	0x08001b15
 8001820:	08001841 	.word	0x08001841
 8001824:	08001b15 	.word	0x08001b15
 8001828:	08001b15 	.word	0x08001b15
 800182c:	08001b15 	.word	0x08001b15
 8001830:	080019b5 	.word	0x080019b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001834:	4bbd      	ldr	r3, [pc, #756]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001836:	61bb      	str	r3, [r7, #24]
       break;
 8001838:	e16f      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800183a:	4bbd      	ldr	r3, [pc, #756]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x360>)
 800183c:	61bb      	str	r3, [r7, #24]
      break;
 800183e:	e16c      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001840:	4bb9      	ldr	r3, [pc, #740]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x358>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001848:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800184a:	4bb7      	ldr	r3, [pc, #732]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x358>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d053      	beq.n	80018fe <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001856:	4bb4      	ldr	r3, [pc, #720]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x358>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	099b      	lsrs	r3, r3, #6
 800185c:	461a      	mov	r2, r3
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001866:	f04f 0100 	mov.w	r1, #0
 800186a:	ea02 0400 	and.w	r4, r2, r0
 800186e:	603c      	str	r4, [r7, #0]
 8001870:	400b      	ands	r3, r1
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001878:	4620      	mov	r0, r4
 800187a:	4629      	mov	r1, r5
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	014b      	lsls	r3, r1, #5
 8001886:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800188a:	0142      	lsls	r2, r0, #5
 800188c:	4610      	mov	r0, r2
 800188e:	4619      	mov	r1, r3
 8001890:	4623      	mov	r3, r4
 8001892:	1ac0      	subs	r0, r0, r3
 8001894:	462b      	mov	r3, r5
 8001896:	eb61 0103 	sbc.w	r1, r1, r3
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	f04f 0300 	mov.w	r3, #0
 80018a2:	018b      	lsls	r3, r1, #6
 80018a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80018a8:	0182      	lsls	r2, r0, #6
 80018aa:	1a12      	subs	r2, r2, r0
 80018ac:	eb63 0301 	sbc.w	r3, r3, r1
 80018b0:	f04f 0000 	mov.w	r0, #0
 80018b4:	f04f 0100 	mov.w	r1, #0
 80018b8:	00d9      	lsls	r1, r3, #3
 80018ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018be:	00d0      	lsls	r0, r2, #3
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4621      	mov	r1, r4
 80018c6:	1852      	adds	r2, r2, r1
 80018c8:	4629      	mov	r1, r5
 80018ca:	eb43 0101 	adc.w	r1, r3, r1
 80018ce:	460b      	mov	r3, r1
 80018d0:	f04f 0000 	mov.w	r0, #0
 80018d4:	f04f 0100 	mov.w	r1, #0
 80018d8:	0259      	lsls	r1, r3, #9
 80018da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80018de:	0250      	lsls	r0, r2, #9
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	461a      	mov	r2, r3
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	f7fe fc88 	bl	8000204 <__aeabi_uldivmod>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4613      	mov	r3, r2
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	e04c      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fe:	4b8a      	ldr	r3, [pc, #552]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x358>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	099b      	lsrs	r3, r3, #6
 8001904:	461a      	mov	r2, r3
 8001906:	f04f 0300 	mov.w	r3, #0
 800190a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800190e:	f04f 0100 	mov.w	r1, #0
 8001912:	ea02 0a00 	and.w	sl, r2, r0
 8001916:	ea03 0b01 	and.w	fp, r3, r1
 800191a:	4650      	mov	r0, sl
 800191c:	4659      	mov	r1, fp
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	014b      	lsls	r3, r1, #5
 8001928:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800192c:	0142      	lsls	r2, r0, #5
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	ebb0 000a 	subs.w	r0, r0, sl
 8001936:	eb61 010b 	sbc.w	r1, r1, fp
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	018b      	lsls	r3, r1, #6
 8001944:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001948:	0182      	lsls	r2, r0, #6
 800194a:	1a12      	subs	r2, r2, r0
 800194c:	eb63 0301 	sbc.w	r3, r3, r1
 8001950:	f04f 0000 	mov.w	r0, #0
 8001954:	f04f 0100 	mov.w	r1, #0
 8001958:	00d9      	lsls	r1, r3, #3
 800195a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800195e:	00d0      	lsls	r0, r2, #3
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	eb12 020a 	adds.w	r2, r2, sl
 8001968:	eb43 030b 	adc.w	r3, r3, fp
 800196c:	f04f 0000 	mov.w	r0, #0
 8001970:	f04f 0100 	mov.w	r1, #0
 8001974:	0299      	lsls	r1, r3, #10
 8001976:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800197a:	0290      	lsls	r0, r2, #10
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	461a      	mov	r2, r3
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	f7fe fc3a 	bl	8000204 <__aeabi_uldivmod>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4613      	mov	r3, r2
 8001996:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001998:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x358>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	0c1b      	lsrs	r3, r3, #16
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	3301      	adds	r3, #1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b0:	61bb      	str	r3, [r7, #24]
      break;
 80019b2:	e0b2      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b4:	4b5c      	ldr	r3, [pc, #368]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x358>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019bc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019be:	4b5a      	ldr	r3, [pc, #360]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x358>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d04d      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ca:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x358>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	099b      	lsrs	r3, r3, #6
 80019d0:	461a      	mov	r2, r3
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019da:	f04f 0100 	mov.w	r1, #0
 80019de:	ea02 0800 	and.w	r8, r2, r0
 80019e2:	ea03 0901 	and.w	r9, r3, r1
 80019e6:	4640      	mov	r0, r8
 80019e8:	4649      	mov	r1, r9
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	014b      	lsls	r3, r1, #5
 80019f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019f8:	0142      	lsls	r2, r0, #5
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	ebb0 0008 	subs.w	r0, r0, r8
 8001a02:	eb61 0109 	sbc.w	r1, r1, r9
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	018b      	lsls	r3, r1, #6
 8001a10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a14:	0182      	lsls	r2, r0, #6
 8001a16:	1a12      	subs	r2, r2, r0
 8001a18:	eb63 0301 	sbc.w	r3, r3, r1
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	00d9      	lsls	r1, r3, #3
 8001a26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a2a:	00d0      	lsls	r0, r2, #3
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	eb12 0208 	adds.w	r2, r2, r8
 8001a34:	eb43 0309 	adc.w	r3, r3, r9
 8001a38:	f04f 0000 	mov.w	r0, #0
 8001a3c:	f04f 0100 	mov.w	r1, #0
 8001a40:	0259      	lsls	r1, r3, #9
 8001a42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a46:	0250      	lsls	r0, r2, #9
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	461a      	mov	r2, r3
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	f7fe fbd4 	bl	8000204 <__aeabi_uldivmod>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4613      	mov	r3, r2
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	e04a      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a66:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	099b      	lsrs	r3, r3, #6
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a76:	f04f 0100 	mov.w	r1, #0
 8001a7a:	ea02 0400 	and.w	r4, r2, r0
 8001a7e:	ea03 0501 	and.w	r5, r3, r1
 8001a82:	4620      	mov	r0, r4
 8001a84:	4629      	mov	r1, r5
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	f04f 0300 	mov.w	r3, #0
 8001a8e:	014b      	lsls	r3, r1, #5
 8001a90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a94:	0142      	lsls	r2, r0, #5
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	1b00      	subs	r0, r0, r4
 8001a9c:	eb61 0105 	sbc.w	r1, r1, r5
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	018b      	lsls	r3, r1, #6
 8001aaa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001aae:	0182      	lsls	r2, r0, #6
 8001ab0:	1a12      	subs	r2, r2, r0
 8001ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab6:	f04f 0000 	mov.w	r0, #0
 8001aba:	f04f 0100 	mov.w	r1, #0
 8001abe:	00d9      	lsls	r1, r3, #3
 8001ac0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ac4:	00d0      	lsls	r0, r2, #3
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	1912      	adds	r2, r2, r4
 8001acc:	eb45 0303 	adc.w	r3, r5, r3
 8001ad0:	f04f 0000 	mov.w	r0, #0
 8001ad4:	f04f 0100 	mov.w	r1, #0
 8001ad8:	0299      	lsls	r1, r3, #10
 8001ada:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ade:	0290      	lsls	r0, r2, #10
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	461a      	mov	r2, r3
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	f7fe fb88 	bl	8000204 <__aeabi_uldivmod>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4613      	mov	r3, r2
 8001afa:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x358>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	0f1b      	lsrs	r3, r3, #28
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b10:	61bb      	str	r3, [r7, #24]
      break;
 8001b12:	e002      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b16:	61bb      	str	r3, [r7, #24]
      break;
 8001b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b1a:	69bb      	ldr	r3, [r7, #24]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	00f42400 	.word	0x00f42400
 8001b30:	007a1200 	.word	0x007a1200

08001b34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e28d      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8083 	beq.w	8001c5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b54:	4b94      	ldr	r3, [pc, #592]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d019      	beq.n	8001b94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b60:	4b91      	ldr	r3, [pc, #580]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b6c:	4b8e      	ldr	r3, [pc, #568]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b78:	d00c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7a:	4b8b      	ldr	r3, [pc, #556]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d112      	bne.n	8001bac <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b86:	4b88      	ldr	r3, [pc, #544]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b92:	d10b      	bne.n	8001bac <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	4b84      	ldr	r3, [pc, #528]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d05b      	beq.n	8001c58 <HAL_RCC_OscConfig+0x124>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d157      	bne.n	8001c58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e25a      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb4:	d106      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x90>
 8001bb6:	4b7c      	ldr	r3, [pc, #496]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a7b      	ldr	r2, [pc, #492]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e01d      	b.n	8001c00 <HAL_RCC_OscConfig+0xcc>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0xb4>
 8001bce:	4b76      	ldr	r3, [pc, #472]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a75      	ldr	r2, [pc, #468]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b73      	ldr	r3, [pc, #460]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a72      	ldr	r2, [pc, #456]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e00b      	b.n	8001c00 <HAL_RCC_OscConfig+0xcc>
 8001be8:	4b6f      	ldr	r3, [pc, #444]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a6e      	ldr	r2, [pc, #440]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b6c      	ldr	r3, [pc, #432]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a6b      	ldr	r2, [pc, #428]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d013      	beq.n	8001c30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff f8fe 	bl	8000e08 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff f8fa 	bl	8000e08 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e21f      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	4b61      	ldr	r3, [pc, #388]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0xdc>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff f8ea 	bl	8000e08 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff f8e6 	bl	8000e08 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e20b      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	4b57      	ldr	r3, [pc, #348]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x104>
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d06f      	beq.n	8001d46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c66:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d017      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c72:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c7a:	2b08      	cmp	r3, #8
 8001c7c:	d105      	bne.n	8001c8a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c7e:	4b4a      	ldr	r3, [pc, #296]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00b      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8a:	4b47      	ldr	r3, [pc, #284]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d11c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c96:	4b44      	ldr	r3, [pc, #272]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d116      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	4b41      	ldr	r3, [pc, #260]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <HAL_RCC_OscConfig+0x186>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d001      	beq.n	8001cba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e1d3      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4937      	ldr	r1, [pc, #220]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cce:	e03a      	b.n	8001d46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd8:	4b34      	ldr	r3, [pc, #208]	; (8001dac <HAL_RCC_OscConfig+0x278>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff f893 	bl	8000e08 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff f88f 	bl	8000e08 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e1b4      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf8:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4925      	ldr	r1, [pc, #148]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
 8001d18:	e015      	b.n	8001d46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <HAL_RCC_OscConfig+0x278>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff f872 	bl	8000e08 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d28:	f7ff f86e 	bl	8000e08 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e193      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d036      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d016      	beq.n	8001d88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d5a:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d60:	f7ff f852 	bl	8000e08 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d68:	f7ff f84e 	bl	8000e08 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e173      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x234>
 8001d86:	e01b      	b.n	8001dc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d8e:	f7ff f83b 	bl	8000e08 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d94:	e00e      	b.n	8001db4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d96:	f7ff f837 	bl	8000e08 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d907      	bls.n	8001db4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e15c      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
 8001da8:	40023800 	.word	0x40023800
 8001dac:	42470000 	.word	0x42470000
 8001db0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	4b8a      	ldr	r3, [pc, #552]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ea      	bne.n	8001d96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 8097 	beq.w	8001efc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b83      	ldr	r3, [pc, #524]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10f      	bne.n	8001dfe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a7e      	ldr	r2, [pc, #504]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b7c      	ldr	r3, [pc, #496]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b79      	ldr	r3, [pc, #484]	; (8001fe4 <HAL_RCC_OscConfig+0x4b0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0a:	4b76      	ldr	r3, [pc, #472]	; (8001fe4 <HAL_RCC_OscConfig+0x4b0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a75      	ldr	r2, [pc, #468]	; (8001fe4 <HAL_RCC_OscConfig+0x4b0>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e16:	f7fe fff7 	bl	8000e08 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7fe fff3 	bl	8000e08 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e118      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b6c      	ldr	r3, [pc, #432]	; (8001fe4 <HAL_RCC_OscConfig+0x4b0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x31e>
 8001e44:	4b66      	ldr	r3, [pc, #408]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e48:	4a65      	ldr	r2, [pc, #404]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e50:	e01c      	b.n	8001e8c <HAL_RCC_OscConfig+0x358>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x340>
 8001e5a:	4b61      	ldr	r3, [pc, #388]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	4a60      	ldr	r2, [pc, #384]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	6713      	str	r3, [r2, #112]	; 0x70
 8001e66:	4b5e      	ldr	r3, [pc, #376]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	4a5d      	ldr	r2, [pc, #372]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6713      	str	r3, [r2, #112]	; 0x70
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_OscConfig+0x358>
 8001e74:	4b5a      	ldr	r3, [pc, #360]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	4a59      	ldr	r2, [pc, #356]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e80:	4b57      	ldr	r3, [pc, #348]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e84:	4a56      	ldr	r2, [pc, #344]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001e86:	f023 0304 	bic.w	r3, r3, #4
 8001e8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d015      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7fe ffb8 	bl	8000e08 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e9c:	f7fe ffb4 	bl	8000e08 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0d7      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb2:	4b4b      	ldr	r3, [pc, #300]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0ee      	beq.n	8001e9c <HAL_RCC_OscConfig+0x368>
 8001ebe:	e014      	b.n	8001eea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	f7fe ffa2 	bl	8000e08 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7fe ff9e 	bl	8000e08 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e0c1      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ede:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1ee      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eea:	7dfb      	ldrb	r3, [r7, #23]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d105      	bne.n	8001efc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef0:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	4a3a      	ldr	r2, [pc, #232]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80ad 	beq.w	8002060 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f06:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d060      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d145      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b33      	ldr	r3, [pc, #204]	; (8001fe8 <HAL_RCC_OscConfig+0x4b4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe ff72 	bl	8000e08 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f28:	f7fe ff6e 	bl	8000e08 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e093      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	019b      	lsls	r3, r3, #6
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	085b      	lsrs	r3, r3, #1
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f68:	061b      	lsls	r3, r3, #24
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	071b      	lsls	r3, r3, #28
 8001f72:	491b      	ldr	r1, [pc, #108]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <HAL_RCC_OscConfig+0x4b4>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7e:	f7fe ff43 	bl	8000e08 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f86:	f7fe ff3f 	bl	8000e08 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e064      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x452>
 8001fa4:	e05c      	b.n	8002060 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <HAL_RCC_OscConfig+0x4b4>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7fe ff2c 	bl	8000e08 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7fe ff28 	bl	8000e08 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e04d      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_RCC_OscConfig+0x4ac>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x480>
 8001fd2:	e045      	b.n	8002060 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d107      	bne.n	8001fec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e040      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40007000 	.word	0x40007000
 8001fe8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <HAL_RCC_OscConfig+0x538>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d030      	beq.n	800205c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d129      	bne.n	800205c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d122      	bne.n	800205c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800201c:	4013      	ands	r3, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002022:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002024:	4293      	cmp	r3, r2
 8002026:	d119      	bne.n	800205c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	085b      	lsrs	r3, r3, #1
 8002034:	3b01      	subs	r3, #1
 8002036:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002038:	429a      	cmp	r2, r3
 800203a:	d10f      	bne.n	800205c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002046:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002048:	429a      	cmp	r2, r3
 800204a:	d107      	bne.n	800205c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002058:	429a      	cmp	r2, r3
 800205a:	d001      	beq.n	8002060 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800

08002070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e03f      	b.n	8002102 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7fe fd22 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2224      	movs	r2, #36	; 0x24
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f829 	bl	800210c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
	...

0800210c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800210c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002110:	b09f      	sub	sp, #124	; 0x7c
 8002112:	af00      	add	r7, sp, #0
 8002114:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002122:	68d9      	ldr	r1, [r3, #12]
 8002124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	ea40 0301 	orr.w	r3, r0, r1
 800212c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800212e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	431a      	orrs	r2, r3
 8002138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	431a      	orrs	r2, r3
 800213e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	4313      	orrs	r3, r2
 8002144:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002150:	f021 010c 	bic.w	r1, r1, #12
 8002154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800215a:	430b      	orrs	r3, r1
 800215c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800215e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216a:	6999      	ldr	r1, [r3, #24]
 800216c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	ea40 0301 	orr.w	r3, r0, r1
 8002174:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4bc5      	ldr	r3, [pc, #788]	; (8002490 <UART_SetConfig+0x384>)
 800217c:	429a      	cmp	r2, r3
 800217e:	d004      	beq.n	800218a <UART_SetConfig+0x7e>
 8002180:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4bc3      	ldr	r3, [pc, #780]	; (8002494 <UART_SetConfig+0x388>)
 8002186:	429a      	cmp	r2, r3
 8002188:	d103      	bne.n	8002192 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800218a:	f7ff fb0d 	bl	80017a8 <HAL_RCC_GetPCLK2Freq>
 800218e:	6778      	str	r0, [r7, #116]	; 0x74
 8002190:	e002      	b.n	8002198 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002192:	f7ff faf5 	bl	8001780 <HAL_RCC_GetPCLK1Freq>
 8002196:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021a0:	f040 80b6 	bne.w	8002310 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021a6:	461c      	mov	r4, r3
 80021a8:	f04f 0500 	mov.w	r5, #0
 80021ac:	4622      	mov	r2, r4
 80021ae:	462b      	mov	r3, r5
 80021b0:	1891      	adds	r1, r2, r2
 80021b2:	6439      	str	r1, [r7, #64]	; 0x40
 80021b4:	415b      	adcs	r3, r3
 80021b6:	647b      	str	r3, [r7, #68]	; 0x44
 80021b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021bc:	1912      	adds	r2, r2, r4
 80021be:	eb45 0303 	adc.w	r3, r5, r3
 80021c2:	f04f 0000 	mov.w	r0, #0
 80021c6:	f04f 0100 	mov.w	r1, #0
 80021ca:	00d9      	lsls	r1, r3, #3
 80021cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021d0:	00d0      	lsls	r0, r2, #3
 80021d2:	4602      	mov	r2, r0
 80021d4:	460b      	mov	r3, r1
 80021d6:	1911      	adds	r1, r2, r4
 80021d8:	6639      	str	r1, [r7, #96]	; 0x60
 80021da:	416b      	adcs	r3, r5
 80021dc:	667b      	str	r3, [r7, #100]	; 0x64
 80021de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	461a      	mov	r2, r3
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	1891      	adds	r1, r2, r2
 80021ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80021ec:	415b      	adcs	r3, r3
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80021f8:	f7fe f804 	bl	8000204 <__aeabi_uldivmod>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4ba5      	ldr	r3, [pc, #660]	; (8002498 <UART_SetConfig+0x38c>)
 8002202:	fba3 2302 	umull	r2, r3, r3, r2
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	011e      	lsls	r6, r3, #4
 800220a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800220c:	461c      	mov	r4, r3
 800220e:	f04f 0500 	mov.w	r5, #0
 8002212:	4622      	mov	r2, r4
 8002214:	462b      	mov	r3, r5
 8002216:	1891      	adds	r1, r2, r2
 8002218:	6339      	str	r1, [r7, #48]	; 0x30
 800221a:	415b      	adcs	r3, r3
 800221c:	637b      	str	r3, [r7, #52]	; 0x34
 800221e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002222:	1912      	adds	r2, r2, r4
 8002224:	eb45 0303 	adc.w	r3, r5, r3
 8002228:	f04f 0000 	mov.w	r0, #0
 800222c:	f04f 0100 	mov.w	r1, #0
 8002230:	00d9      	lsls	r1, r3, #3
 8002232:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002236:	00d0      	lsls	r0, r2, #3
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	1911      	adds	r1, r2, r4
 800223e:	65b9      	str	r1, [r7, #88]	; 0x58
 8002240:	416b      	adcs	r3, r5
 8002242:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	461a      	mov	r2, r3
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	1891      	adds	r1, r2, r2
 8002250:	62b9      	str	r1, [r7, #40]	; 0x28
 8002252:	415b      	adcs	r3, r3
 8002254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800225a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800225e:	f7fd ffd1 	bl	8000204 <__aeabi_uldivmod>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4b8c      	ldr	r3, [pc, #560]	; (8002498 <UART_SetConfig+0x38c>)
 8002268:	fba3 1302 	umull	r1, r3, r3, r2
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	2164      	movs	r1, #100	; 0x64
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	3332      	adds	r3, #50	; 0x32
 800227a:	4a87      	ldr	r2, [pc, #540]	; (8002498 <UART_SetConfig+0x38c>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002288:	441e      	add	r6, r3
 800228a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800228c:	4618      	mov	r0, r3
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	1894      	adds	r4, r2, r2
 8002298:	623c      	str	r4, [r7, #32]
 800229a:	415b      	adcs	r3, r3
 800229c:	627b      	str	r3, [r7, #36]	; 0x24
 800229e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022a2:	1812      	adds	r2, r2, r0
 80022a4:	eb41 0303 	adc.w	r3, r1, r3
 80022a8:	f04f 0400 	mov.w	r4, #0
 80022ac:	f04f 0500 	mov.w	r5, #0
 80022b0:	00dd      	lsls	r5, r3, #3
 80022b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80022b6:	00d4      	lsls	r4, r2, #3
 80022b8:	4622      	mov	r2, r4
 80022ba:	462b      	mov	r3, r5
 80022bc:	1814      	adds	r4, r2, r0
 80022be:	653c      	str	r4, [r7, #80]	; 0x50
 80022c0:	414b      	adcs	r3, r1
 80022c2:	657b      	str	r3, [r7, #84]	; 0x54
 80022c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	461a      	mov	r2, r3
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	1891      	adds	r1, r2, r2
 80022d0:	61b9      	str	r1, [r7, #24]
 80022d2:	415b      	adcs	r3, r3
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80022de:	f7fd ff91 	bl	8000204 <__aeabi_uldivmod>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4b6c      	ldr	r3, [pc, #432]	; (8002498 <UART_SetConfig+0x38c>)
 80022e8:	fba3 1302 	umull	r1, r3, r3, r2
 80022ec:	095b      	lsrs	r3, r3, #5
 80022ee:	2164      	movs	r1, #100	; 0x64
 80022f0:	fb01 f303 	mul.w	r3, r1, r3
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	3332      	adds	r3, #50	; 0x32
 80022fa:	4a67      	ldr	r2, [pc, #412]	; (8002498 <UART_SetConfig+0x38c>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	f003 0207 	and.w	r2, r3, #7
 8002306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4432      	add	r2, r6
 800230c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800230e:	e0b9      	b.n	8002484 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002312:	461c      	mov	r4, r3
 8002314:	f04f 0500 	mov.w	r5, #0
 8002318:	4622      	mov	r2, r4
 800231a:	462b      	mov	r3, r5
 800231c:	1891      	adds	r1, r2, r2
 800231e:	6139      	str	r1, [r7, #16]
 8002320:	415b      	adcs	r3, r3
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002328:	1912      	adds	r2, r2, r4
 800232a:	eb45 0303 	adc.w	r3, r5, r3
 800232e:	f04f 0000 	mov.w	r0, #0
 8002332:	f04f 0100 	mov.w	r1, #0
 8002336:	00d9      	lsls	r1, r3, #3
 8002338:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800233c:	00d0      	lsls	r0, r2, #3
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	eb12 0804 	adds.w	r8, r2, r4
 8002346:	eb43 0905 	adc.w	r9, r3, r5
 800234a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	4618      	mov	r0, r3
 8002350:	f04f 0100 	mov.w	r1, #0
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	008b      	lsls	r3, r1, #2
 800235e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002362:	0082      	lsls	r2, r0, #2
 8002364:	4640      	mov	r0, r8
 8002366:	4649      	mov	r1, r9
 8002368:	f7fd ff4c 	bl	8000204 <__aeabi_uldivmod>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4b49      	ldr	r3, [pc, #292]	; (8002498 <UART_SetConfig+0x38c>)
 8002372:	fba3 2302 	umull	r2, r3, r3, r2
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	011e      	lsls	r6, r3, #4
 800237a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800237c:	4618      	mov	r0, r3
 800237e:	f04f 0100 	mov.w	r1, #0
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	1894      	adds	r4, r2, r2
 8002388:	60bc      	str	r4, [r7, #8]
 800238a:	415b      	adcs	r3, r3
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002392:	1812      	adds	r2, r2, r0
 8002394:	eb41 0303 	adc.w	r3, r1, r3
 8002398:	f04f 0400 	mov.w	r4, #0
 800239c:	f04f 0500 	mov.w	r5, #0
 80023a0:	00dd      	lsls	r5, r3, #3
 80023a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80023a6:	00d4      	lsls	r4, r2, #3
 80023a8:	4622      	mov	r2, r4
 80023aa:	462b      	mov	r3, r5
 80023ac:	1814      	adds	r4, r2, r0
 80023ae:	64bc      	str	r4, [r7, #72]	; 0x48
 80023b0:	414b      	adcs	r3, r1
 80023b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	008b      	lsls	r3, r1, #2
 80023c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80023cc:	0082      	lsls	r2, r0, #2
 80023ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80023d2:	f7fd ff17 	bl	8000204 <__aeabi_uldivmod>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <UART_SetConfig+0x38c>)
 80023dc:	fba3 1302 	umull	r1, r3, r3, r2
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	2164      	movs	r1, #100	; 0x64
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	3332      	adds	r3, #50	; 0x32
 80023ee:	4a2a      	ldr	r2, [pc, #168]	; (8002498 <UART_SetConfig+0x38c>)
 80023f0:	fba2 2303 	umull	r2, r3, r2, r3
 80023f4:	095b      	lsrs	r3, r3, #5
 80023f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023fa:	441e      	add	r6, r3
 80023fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023fe:	4618      	mov	r0, r3
 8002400:	f04f 0100 	mov.w	r1, #0
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	1894      	adds	r4, r2, r2
 800240a:	603c      	str	r4, [r7, #0]
 800240c:	415b      	adcs	r3, r3
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002414:	1812      	adds	r2, r2, r0
 8002416:	eb41 0303 	adc.w	r3, r1, r3
 800241a:	f04f 0400 	mov.w	r4, #0
 800241e:	f04f 0500 	mov.w	r5, #0
 8002422:	00dd      	lsls	r5, r3, #3
 8002424:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002428:	00d4      	lsls	r4, r2, #3
 800242a:	4622      	mov	r2, r4
 800242c:	462b      	mov	r3, r5
 800242e:	eb12 0a00 	adds.w	sl, r2, r0
 8002432:	eb43 0b01 	adc.w	fp, r3, r1
 8002436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4618      	mov	r0, r3
 800243c:	f04f 0100 	mov.w	r1, #0
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	008b      	lsls	r3, r1, #2
 800244a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800244e:	0082      	lsls	r2, r0, #2
 8002450:	4650      	mov	r0, sl
 8002452:	4659      	mov	r1, fp
 8002454:	f7fd fed6 	bl	8000204 <__aeabi_uldivmod>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <UART_SetConfig+0x38c>)
 800245e:	fba3 1302 	umull	r1, r3, r3, r2
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	2164      	movs	r1, #100	; 0x64
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	3332      	adds	r3, #50	; 0x32
 8002470:	4a09      	ldr	r2, [pc, #36]	; (8002498 <UART_SetConfig+0x38c>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	f003 020f 	and.w	r2, r3, #15
 800247c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4432      	add	r2, r6
 8002482:	609a      	str	r2, [r3, #8]
}
 8002484:	bf00      	nop
 8002486:	377c      	adds	r7, #124	; 0x7c
 8002488:	46bd      	mov	sp, r7
 800248a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800248e:	bf00      	nop
 8002490:	40011000 	.word	0x40011000
 8002494:	40011400 	.word	0x40011400
 8002498:	51eb851f 	.word	0x51eb851f

0800249c <clock>:
 800249c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <clock+0x24>)
 80024a0:	4669      	mov	r1, sp
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	f000 f83a 	bl	800251c <_times_r>
 80024a8:	1c43      	adds	r3, r0, #1
 80024aa:	d006      	beq.n	80024ba <clock+0x1e>
 80024ac:	e9dd 0300 	ldrd	r0, r3, [sp]
 80024b0:	4418      	add	r0, r3
 80024b2:	9b02      	ldr	r3, [sp, #8]
 80024b4:	4418      	add	r0, r3
 80024b6:	9b03      	ldr	r3, [sp, #12]
 80024b8:	4418      	add	r0, r3
 80024ba:	b005      	add	sp, #20
 80024bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80024c0:	2000000c 	.word	0x2000000c

080024c4 <__libc_init_array>:
 80024c4:	b570      	push	{r4, r5, r6, lr}
 80024c6:	4d0d      	ldr	r5, [pc, #52]	; (80024fc <__libc_init_array+0x38>)
 80024c8:	4c0d      	ldr	r4, [pc, #52]	; (8002500 <__libc_init_array+0x3c>)
 80024ca:	1b64      	subs	r4, r4, r5
 80024cc:	10a4      	asrs	r4, r4, #2
 80024ce:	2600      	movs	r6, #0
 80024d0:	42a6      	cmp	r6, r4
 80024d2:	d109      	bne.n	80024e8 <__libc_init_array+0x24>
 80024d4:	4d0b      	ldr	r5, [pc, #44]	; (8002504 <__libc_init_array+0x40>)
 80024d6:	4c0c      	ldr	r4, [pc, #48]	; (8002508 <__libc_init_array+0x44>)
 80024d8:	f000 f824 	bl	8002524 <_init>
 80024dc:	1b64      	subs	r4, r4, r5
 80024de:	10a4      	asrs	r4, r4, #2
 80024e0:	2600      	movs	r6, #0
 80024e2:	42a6      	cmp	r6, r4
 80024e4:	d105      	bne.n	80024f2 <__libc_init_array+0x2e>
 80024e6:	bd70      	pop	{r4, r5, r6, pc}
 80024e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80024ec:	4798      	blx	r3
 80024ee:	3601      	adds	r6, #1
 80024f0:	e7ee      	b.n	80024d0 <__libc_init_array+0xc>
 80024f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80024f6:	4798      	blx	r3
 80024f8:	3601      	adds	r6, #1
 80024fa:	e7f2      	b.n	80024e2 <__libc_init_array+0x1e>
 80024fc:	080025bc 	.word	0x080025bc
 8002500:	080025bc 	.word	0x080025bc
 8002504:	080025bc 	.word	0x080025bc
 8002508:	080025c0 	.word	0x080025c0

0800250c <memset>:
 800250c:	4402      	add	r2, r0
 800250e:	4603      	mov	r3, r0
 8002510:	4293      	cmp	r3, r2
 8002512:	d100      	bne.n	8002516 <memset+0xa>
 8002514:	4770      	bx	lr
 8002516:	f803 1b01 	strb.w	r1, [r3], #1
 800251a:	e7f9      	b.n	8002510 <memset+0x4>

0800251c <_times_r>:
 800251c:	4608      	mov	r0, r1
 800251e:	f7fe bb51 	b.w	8000bc4 <_times>
	...

08002524 <_init>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	bf00      	nop
 8002528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	469e      	mov	lr, r3
 800252e:	4770      	bx	lr

08002530 <_fini>:
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002532:	bf00      	nop
 8002534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002536:	bc08      	pop	{r3}
 8002538:	469e      	mov	lr, r3
 800253a:	4770      	bx	lr
