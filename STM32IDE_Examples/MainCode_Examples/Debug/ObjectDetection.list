
ObjectDetection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f14  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  080080e8  080080e8  000180e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008668  08008668  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008670  08008670  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008674  08008674  00018674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  200001dc  08008854  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009d0  08008854  000209d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139a5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025bf  00000000  00000000  00033bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00036170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00036db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002498b  00000000  00000000  00037930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116a9  00000000  00000000  0005c2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7394  00000000  00000000  0006d964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00144cf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000435c  00000000  00000000  00144d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080080cc 	.word	0x080080cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080080cc 	.word	0x080080cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <__io_putchar>:
static void MX_RTC_Init(void);

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8000f88:	1d39      	adds	r1, r7, #4
 8000f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <__io_putchar+0x20>)
 8000f92:	f003 ff0d 	bl	8004db0 <HAL_UART_Transmit>
	return ch;
 8000f96:	687b      	ldr	r3, [r7, #4]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000090c 	.word	0x2000090c
 8000fa4:	00000000 	.word	0x00000000

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fac:	b08c      	sub	sp, #48	; 0x30
 8000fae:	af04      	add	r7, sp, #16
	HAL_Init();
 8000fb0:	f001 f8f6 	bl	80021a0 <HAL_Init>

	SystemClock_Config();
 8000fb4:	f000 f8a4 	bl	8001100 <SystemClock_Config>

	MX_GPIO_Init();
 8000fb8:	f000 f9c4 	bl	8001344 <MX_GPIO_Init>
	MX_I2C2_Init();
 8000fbc:	f000 f910 	bl	80011e0 <MX_I2C2_Init>
	MX_USART2_UART_Init();
 8000fc0:	f000 f996 	bl	80012f0 <MX_USART2_UART_Init>
	MX_RTC_Init();
 8000fc4:	f000 f93a 	bl	800123c <MX_RTC_Init>
//	  if (brett_status != 0)
//		  printf("first multi sense bad\n\r");
//	}

	// init IMU
	IMU_init(&hi2c2);
 8000fc8:	4845      	ldr	r0, [pc, #276]	; (80010e0 <main+0x138>)
 8000fca:	f000 fc89 	bl	80018e0 <IMU_init>

	float d1[3];
	float d2[3];
	magcalMPU9250(&hi2c2, d1, d2);
 8000fce:	1d3a      	adds	r2, r7, #4
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4842      	ldr	r0, [pc, #264]	; (80010e0 <main+0x138>)
 8000fd8:	f000 feca 	bl	8001d70 <magcalMPU9250>
	printf("d1 = {%f, %f, %f}\n\r", d1[0], d1[1], d1[2]);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fad2 	bl	8000588 <__aeabi_f2d>
 8000fe4:	4680      	mov	r8, r0
 8000fe6:	4689      	mov	r9, r1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff facc 	bl	8000588 <__aeabi_f2d>
 8000ff0:	4604      	mov	r4, r0
 8000ff2:	460d      	mov	r5, r1
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff fac6 	bl	8000588 <__aeabi_f2d>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001004:	e9cd 4500 	strd	r4, r5, [sp]
 8001008:	4642      	mov	r2, r8
 800100a:	464b      	mov	r3, r9
 800100c:	4835      	ldr	r0, [pc, #212]	; (80010e4 <main+0x13c>)
 800100e:	f005 fa7f 	bl	8006510 <iprintf>
	printf("d2 = {%f, %f, %f}\n\r", d2[0], d2[1], d2[2]);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fab7 	bl	8000588 <__aeabi_f2d>
 800101a:	4680      	mov	r8, r0
 800101c:	4689      	mov	r9, r1
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fab1 	bl	8000588 <__aeabi_f2d>
 8001026:	4604      	mov	r4, r0
 8001028:	460d      	mov	r5, r1
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff faab 	bl	8000588 <__aeabi_f2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800103a:	e9cd 4500 	strd	r4, r5, [sp]
 800103e:	4642      	mov	r2, r8
 8001040:	464b      	mov	r3, r9
 8001042:	4829      	ldr	r0, [pc, #164]	; (80010e8 <main+0x140>)
 8001044:	f005 fa64 	bl	8006510 <iprintf>

	while(1)
	{

		// get data
		IMU_getAccurateMag(&hi2c2, mag);
 8001048:	4928      	ldr	r1, [pc, #160]	; (80010ec <main+0x144>)
 800104a:	4825      	ldr	r0, [pc, #148]	; (80010e0 <main+0x138>)
 800104c:	f000 fd2a 	bl	8001aa4 <IMU_getAccurateMag>

		printf("magx = %f\n\r", mag[0]);
 8001050:	4b26      	ldr	r3, [pc, #152]	; (80010ec <main+0x144>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa97 	bl	8000588 <__aeabi_f2d>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4824      	ldr	r0, [pc, #144]	; (80010f0 <main+0x148>)
 8001060:	f005 fa56 	bl	8006510 <iprintf>
		printf("magy = %f\n\r", mag[1]);
 8001064:	4b21      	ldr	r3, [pc, #132]	; (80010ec <main+0x144>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa8d 	bl	8000588 <__aeabi_f2d>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4820      	ldr	r0, [pc, #128]	; (80010f4 <main+0x14c>)
 8001074:	f005 fa4c 	bl	8006510 <iprintf>
		float att = atan(mag[1]/mag[0]);
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <main+0x144>)
 800107a:	ed93 7a01 	vldr	s14, [r3, #4]
 800107e:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <main+0x144>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001088:	ee16 0a90 	vmov	r0, s13
 800108c:	f7ff fa7c 	bl	8000588 <__aeabi_f2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	ec43 2b10 	vmov	d0, r2, r3
 8001098:	f006 fe6e 	bl	8007d78 <atan>
 800109c:	ec53 2b10 	vmov	r2, r3, d0
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fda0 	bl	8000be8 <__aeabi_d2f>
 80010a8:	4603      	mov	r3, r0
 80010aa:	61fb      	str	r3, [r7, #28]
		printf("degree = %f\n\r", att * (180.0 / 3.14159));
 80010ac:	69f8      	ldr	r0, [r7, #28]
 80010ae:	f7ff fa6b 	bl	8000588 <__aeabi_f2d>
 80010b2:	a309      	add	r3, pc, #36	; (adr r3, 80010d8 <main+0x130>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff fabe 	bl	8000638 <__aeabi_dmul>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	480d      	ldr	r0, [pc, #52]	; (80010f8 <main+0x150>)
 80010c2:	f005 fa25 	bl	8006510 <iprintf>
		printf("\n\r");
 80010c6:	480d      	ldr	r0, [pc, #52]	; (80010fc <main+0x154>)
 80010c8:	f005 fa22 	bl	8006510 <iprintf>

		// print data

		// delay for 1 sec for next reading
		HAL_Delay(100);
 80010cc:	2064      	movs	r0, #100	; 0x64
 80010ce:	f001 f8d9 	bl	8002284 <HAL_Delay>
	{
 80010d2:	e7b9      	b.n	8001048 <main+0xa0>
 80010d4:	f3af 8000 	nop.w
 80010d8:	b05cc3e8 	.word	0xb05cc3e8
 80010dc:	404ca5dd 	.word	0x404ca5dd
 80010e0:	20000874 	.word	0x20000874
 80010e4:	080080e8 	.word	0x080080e8
 80010e8:	080080fc 	.word	0x080080fc
 80010ec:	20000960 	.word	0x20000960
 80010f0:	08008110 	.word	0x08008110
 80010f4:	0800811c 	.word	0x0800811c
 80010f8:	08008128 	.word	0x08008128
 80010fc:	08008138 	.word	0x08008138

08001100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b094      	sub	sp, #80	; 0x50
 8001104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	2234      	movs	r2, #52	; 0x34
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f004 fb88 	bl	8005824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <SystemClock_Config+0xd8>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	4a2a      	ldr	r2, [pc, #168]	; (80011d8 <SystemClock_Config+0xd8>)
 800112e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001132:	6413      	str	r3, [r2, #64]	; 0x40
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <SystemClock_Config+0xd8>)
 8001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001140:	2300      	movs	r3, #0
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	4b25      	ldr	r3, [pc, #148]	; (80011dc <SystemClock_Config+0xdc>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800114c:	4a23      	ldr	r2, [pc, #140]	; (80011dc <SystemClock_Config+0xdc>)
 800114e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <SystemClock_Config+0xdc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001160:	2306      	movs	r3, #6
 8001162:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001164:	2301      	movs	r3, #1
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001168:	2301      	movs	r3, #1
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800116c:	2310      	movs	r3, #16
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001170:	2302      	movs	r3, #2
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001174:	2300      	movs	r3, #0
 8001176:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001178:	2310      	movs	r3, #16
 800117a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800117c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001180:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001182:	2304      	movs	r3, #4
 8001184:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001186:	2302      	movs	r3, #2
 8001188:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800118a:	2302      	movs	r3, #2
 800118c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4618      	mov	r0, r3
 8001194:	f003 f8ba 	bl	800430c <HAL_RCC_OscConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800119e:	f000 f969 	bl	8001474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a2:	230f      	movs	r3, #15
 80011a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a6:	2302      	movs	r3, #2
 80011a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	2102      	movs	r1, #2
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 faae 	bl	8003720 <HAL_RCC_ClockConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0xce>
  {
    Error_Handler();
 80011ca:	f000 f953 	bl	8001474 <Error_Handler>
  }
}
 80011ce:	bf00      	nop
 80011d0:	3750      	adds	r7, #80	; 0x50
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40007000 	.word	0x40007000

080011e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_I2C2_Init+0x50>)
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <MX_I2C2_Init+0x54>)
 80011e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_I2C2_Init+0x50>)
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <MX_I2C2_Init+0x58>)
 80011ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_I2C2_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_I2C2_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_I2C2_Init+0x50>)
 80011fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001202:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <MX_I2C2_Init+0x50>)
 8001206:	2200      	movs	r2, #0
 8001208:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_I2C2_Init+0x50>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <MX_I2C2_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_I2C2_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	; (8001230 <MX_I2C2_Init+0x50>)
 800121e:	f001 fae9 	bl	80027f4 <HAL_I2C_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001228:	f000 f924 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000874 	.word	0x20000874
 8001234:	40005800 	.word	0x40005800
 8001238:	000186a0 	.word	0x000186a0

0800123c <MX_RTC_Init>:

static void MX_RTC_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */
	RTC_TimeTypeDef time = {0};
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = {0};
 8001250:	2300      	movs	r3, #0
 8001252:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	*/
	hrtc.Instance = RTC;
 8001254:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <MX_RTC_Init+0xac>)
 8001256:	4a25      	ldr	r2, [pc, #148]	; (80012ec <MX_RTC_Init+0xb0>)
 8001258:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <MX_RTC_Init+0xac>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001260:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <MX_RTC_Init+0xac>)
 8001262:	227f      	movs	r2, #127	; 0x7f
 8001264:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <MX_RTC_Init+0xac>)
 8001268:	22ff      	movs	r2, #255	; 0xff
 800126a:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_RTC_Init+0xac>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_RTC_Init+0xac>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_RTC_Init+0xac>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800127e:	481a      	ldr	r0, [pc, #104]	; (80012e8 <MX_RTC_Init+0xac>)
 8001280:	f003 fae2 	bl	8004848 <HAL_RTC_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_RTC_Init+0x52>
	{
	Error_Handler();
 800128a:	f000 f8f3 	bl	8001474 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */
	time.Hours = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	713b      	strb	r3, [r7, #4]
	time.Minutes = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	717b      	strb	r3, [r7, #5]
	time.Seconds = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	71bb      	strb	r3, [r7, #6]
	time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
	time.StoreOperation = RTC_STOREOPERATION_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BCD) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	2201      	movs	r2, #1
 80012a6:	4619      	mov	r1, r3
 80012a8:	480f      	ldr	r0, [pc, #60]	; (80012e8 <MX_RTC_Init+0xac>)
 80012aa:	f003 fb5e 	bl	800496a <HAL_RTC_SetTime>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_RTC_Init+0x7c>
	{
		Error_Handler();
 80012b4:	f000 f8de 	bl	8001474 <Error_Handler>
	}
	date.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80012b8:	2303      	movs	r3, #3
 80012ba:	703b      	strb	r3, [r7, #0]
	date.Month = RTC_MONTH_APRIL;
 80012bc:	2304      	movs	r3, #4
 80012be:	707b      	strb	r3, [r7, #1]
	date.Date = 6;
 80012c0:	2306      	movs	r3, #6
 80012c2:	70bb      	strb	r3, [r7, #2]
	date.Year = 22;
 80012c4:	2316      	movs	r3, #22
 80012c6:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BCD) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	2201      	movs	r2, #1
 80012cc:	4619      	mov	r1, r3
 80012ce:	4806      	ldr	r0, [pc, #24]	; (80012e8 <MX_RTC_Init+0xac>)
 80012d0:	f003 fc08 	bl	8004ae4 <HAL_RTC_SetDate>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_RTC_Init+0xa2>
	{
		Error_Handler();
 80012da:	f000 f8cb 	bl	8001474 <Error_Handler>
	}
	/* USER CODE END RTC_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200008e8 	.word	0x200008e8
 80012ec:	40002800 	.word	0x40002800

080012f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_USART2_UART_Init+0x4c>)
 80012f6:	4a12      	ldr	r2, [pc, #72]	; (8001340 <MX_USART2_UART_Init+0x50>)
 80012f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <MX_USART2_UART_Init+0x4c>)
 80012fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_USART2_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001316:	220c      	movs	r2, #12
 8001318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_USART2_UART_Init+0x4c>)
 8001328:	f003 fcf5 	bl	8004d16 <HAL_UART_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001332:	f000 f89f 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000090c 	.word	0x2000090c
 8001340:	40004400 	.word	0x40004400

08001344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b41      	ldr	r3, [pc, #260]	; (8001464 <MX_GPIO_Init+0x120>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a40      	ldr	r2, [pc, #256]	; (8001464 <MX_GPIO_Init+0x120>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <MX_GPIO_Init+0x120>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b3a      	ldr	r3, [pc, #232]	; (8001464 <MX_GPIO_Init+0x120>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a39      	ldr	r2, [pc, #228]	; (8001464 <MX_GPIO_Init+0x120>)
 8001380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b37      	ldr	r3, [pc, #220]	; (8001464 <MX_GPIO_Init+0x120>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b33      	ldr	r3, [pc, #204]	; (8001464 <MX_GPIO_Init+0x120>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <MX_GPIO_Init+0x120>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b30      	ldr	r3, [pc, #192]	; (8001464 <MX_GPIO_Init+0x120>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b2c      	ldr	r3, [pc, #176]	; (8001464 <MX_GPIO_Init+0x120>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a2b      	ldr	r2, [pc, #172]	; (8001464 <MX_GPIO_Init+0x120>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b29      	ldr	r3, [pc, #164]	; (8001464 <MX_GPIO_Init+0x120>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 80013d0:	4825      	ldr	r0, [pc, #148]	; (8001468 <MX_GPIO_Init+0x124>)
 80013d2:	f001 f9f5 	bl	80027c0 <HAL_GPIO_WritePin>
						  |GPIO_PIN_10, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2180      	movs	r1, #128	; 0x80
 80013da:	4824      	ldr	r0, [pc, #144]	; (800146c <MX_GPIO_Init+0x128>)
 80013dc:	f001 f9f0 	bl	80027c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2170      	movs	r1, #112	; 0x70
 80013e4:	4822      	ldr	r0, [pc, #136]	; (8001470 <MX_GPIO_Init+0x12c>)
 80013e6:	f001 f9eb 	bl	80027c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80013ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	481a      	ldr	r0, [pc, #104]	; (800146c <MX_GPIO_Init+0x128>)
 8001402:	f001 f849 	bl	8002498 <HAL_GPIO_Init>



	/*Configure GPIO pins : LD2_Pin PA7 PA8 PA9
						   PA10 */
	GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001406:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
 800140a:	617b      	str	r3, [r7, #20]
						  |GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	4619      	mov	r1, r3
 800141e:	4812      	ldr	r0, [pc, #72]	; (8001468 <MX_GPIO_Init+0x124>)
 8001420:	f001 f83a 	bl	8002498 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_GPIO_Init+0x128>)
 800143c:	f001 f82c 	bl	8002498 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB4 PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001440:	2370      	movs	r3, #112	; 0x70
 8001442:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_GPIO_Init+0x12c>)
 8001458:	f001 f81e 	bl	8002498 <HAL_GPIO_Init>

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020800 	.word	0x40020800
 8001470:	40020400 	.word	0x40020400

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147c:	e7fe      	b.n	800147c <Error_Handler+0x8>
	...

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_MspInit+0x4c>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	4a0f      	ldr	r2, [pc, #60]	; (80014cc <HAL_MspInit+0x4c>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001494:	6453      	str	r3, [r2, #68]	; 0x44
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_MspInit+0x4c>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_MspInit+0x4c>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014be:	2007      	movs	r0, #7
 80014c0:	f000 ffb6 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800

080014d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a29      	ldr	r2, [pc, #164]	; (8001594 <HAL_I2C_MspInit+0xc4>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d14b      	bne.n	800158a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_I2C_MspInit+0xc8>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a27      	ldr	r2, [pc, #156]	; (8001598 <HAL_I2C_MspInit+0xc8>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b25      	ldr	r3, [pc, #148]	; (8001598 <HAL_I2C_MspInit+0xc8>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <HAL_I2C_MspInit+0xc8>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a20      	ldr	r2, [pc, #128]	; (8001598 <HAL_I2C_MspInit+0xc8>)
 8001518:	f043 0304 	orr.w	r3, r3, #4
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <HAL_I2C_MspInit+0xc8>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800152a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001530:	2312      	movs	r3, #18
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800153c:	2304      	movs	r3, #4
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4815      	ldr	r0, [pc, #84]	; (800159c <HAL_I2C_MspInit+0xcc>)
 8001548:	f000 ffa6 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001552:	2312      	movs	r3, #18
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800155e:	2304      	movs	r3, #4
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	480d      	ldr	r0, [pc, #52]	; (80015a0 <HAL_I2C_MspInit+0xd0>)
 800156a:	f000 ff95 	bl	8002498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_I2C_MspInit+0xc8>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <HAL_I2C_MspInit+0xc8>)
 8001578:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800157c:	6413      	str	r3, [r2, #64]	; 0x40
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_I2C_MspInit+0xc8>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40005800 	.word	0x40005800
 8001598:	40023800 	.word	0x40023800
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800

080015a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b09a      	sub	sp, #104	; 0x68
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	225c      	movs	r2, #92	; 0x5c
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 f935 	bl	8005824 <memset>
  if(hrtc->Instance==RTC)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <HAL_RTC_MspInit+0x4c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d111      	bne.n	80015e8 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80015c4:	2320      	movs	r3, #32
 80015c6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80015c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 f9be 	bl	8003954 <HAL_RCCEx_PeriphCLKConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80015de:	f7ff ff49 	bl	8001474 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <HAL_RTC_MspInit+0x50>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3768      	adds	r7, #104	; 0x68
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40002800 	.word	0x40002800
 80015f4:	42470e3c 	.word	0x42470e3c

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_UART_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12b      	bne.n	8001672 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_UART_MspInit+0x88>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_UART_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a10      	ldr	r2, [pc, #64]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <HAL_UART_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001652:	230c      	movs	r3, #12
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001662:	2307      	movs	r3, #7
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4805      	ldr	r0, [pc, #20]	; (8001684 <HAL_UART_MspInit+0x8c>)
 800166e:	f000 ff13 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40004400 	.word	0x40004400
 8001680:	40023800 	.word	0x40023800
 8001684:	40020000 	.word	0x40020000

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d4:	f000 fdb6 	bl	8002244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
	return 1;
 80016e0:	2301      	movs	r3, #1
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_kill>:

int _kill(int pid, int sig)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016f6:	f003 fe23 	bl	8005340 <__errno>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2216      	movs	r2, #22
 80016fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_exit>:

void _exit (int status)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ffe7 	bl	80016ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800171e:	e7fe      	b.n	800171e <_exit+0x12>

08001720 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e00a      	b.n	8001748 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001732:	f3af 8000 	nop.w
 8001736:	4601      	mov	r1, r0
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf0      	blt.n	8001732 <_read+0x12>
	}

return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e009      	b.n	8001780 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	60ba      	str	r2, [r7, #8]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fc03 	bl	8000f80 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	dbf1      	blt.n	800176c <_write+0x12>
	}
	return len;
 8001788:	687b      	ldr	r3, [r7, #4]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_close>:

int _close(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
	return -1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ba:	605a      	str	r2, [r3, #4]
	return 0;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_isatty>:

int _isatty(int file)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
	return 1;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
	return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001804:	4a14      	ldr	r2, [pc, #80]	; (8001858 <_sbrk+0x5c>)
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <_sbrk+0x60>)
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <_sbrk+0x64>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <_sbrk+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800182c:	f003 fd88 	bl	8005340 <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	220c      	movs	r2, #12
 8001834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	e009      	b.n	8001850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <_sbrk+0x64>)
 800184c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20020000 	.word	0x20020000
 800185c:	00000400 	.word	0x00000400
 8001860:	200001f8 	.word	0x200001f8
 8001864:	200009d0 	.word	0x200009d0

08001868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <SystemInit+0x20>)
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <SystemInit+0x20>)
 8001874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800188c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001890:	480d      	ldr	r0, [pc, #52]	; (80018c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001892:	490e      	ldr	r1, [pc, #56]	; (80018cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001894:	4a0e      	ldr	r2, [pc, #56]	; (80018d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018a8:	4c0b      	ldr	r4, [pc, #44]	; (80018d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018b6:	f7ff ffd7 	bl	8001868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ba:	f003 ff11 	bl	80056e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018be:	f7ff fb73 	bl	8000fa8 <main>
  bx  lr    
 80018c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018cc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80018d0:	08008678 	.word	0x08008678
  ldr r2, =_sbss
 80018d4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80018d8:	200009d0 	.word	0x200009d0

080018dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018dc:	e7fe      	b.n	80018dc <ADC_IRQHandler>
	...

080018e0 <IMU_init>:
float asax;
float asay;
float asaz;

int IMU_init(I2C_HandleTypeDef *hi2c2)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	6078      	str	r0, [r7, #4]
	int status = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
	uint8_t sensAdjust[3];

	// setup clock
	// set the clock reference to X axis gyroscope to get a better accuracy
	status = WrByte(hi2c2, MPU9250_AD, PWR_MGMT_1_AD, 0x01);
 80018ec:	23d0      	movs	r3, #208	; 0xd0
 80018ee:	b299      	uxth	r1, r3
 80018f0:	2301      	movs	r3, #1
 80018f2:	226b      	movs	r2, #107	; 0x6b
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fba3 	bl	8002040 <WrByte>
 80018fa:	60f8      	str	r0, [r7, #12]

	// setup gyro and accel
	// Set the accel scale to 4g
	status = WrByte(hi2c2, MPU9250_AD, ACCEL_CONFIG_1_AD, 0x08);
 80018fc:	23d0      	movs	r3, #208	; 0xd0
 80018fe:	b299      	uxth	r1, r3
 8001900:	2308      	movs	r3, #8
 8001902:	221c      	movs	r2, #28
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 fb9b 	bl	8002040 <WrByte>
 800190a:	60f8      	str	r0, [r7, #12]
	// Set the gyro scale to 500 °/s and FCHOICE_B
	status = WrByte(hi2c2, MPU9250_AD, GYRO_CONFIG_AD, 0x08);
 800190c:	23d0      	movs	r3, #208	; 0xd0
 800190e:	b299      	uxth	r1, r3
 8001910:	2308      	movs	r3, #8
 8001912:	221b      	movs	r2, #27
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 fb93 	bl	8002040 <WrByte>
 800191a:	60f8      	str	r0, [r7, #12]
	// Turn on the internal low-pass filter for accelerometer with 10.2Hz bandwidth
	status = WrByte(hi2c2, MPU9250_AD, ACCEL_CONFIG_2_AD, 0x05);
 800191c:	23d0      	movs	r3, #208	; 0xd0
 800191e:	b299      	uxth	r1, r3
 8001920:	2305      	movs	r3, #5
 8001922:	221d      	movs	r2, #29
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 fb8b 	bl	8002040 <WrByte>
 800192a:	60f8      	str	r0, [r7, #12]
	// Turn on the internal low-pass filter for gyroscope with 10Hz bandwidth
	status = WrByte(hi2c2, MPU9250_AD, CONFIG_AD, 0x05);
 800192c:	23d0      	movs	r3, #208	; 0xd0
 800192e:	b299      	uxth	r1, r3
 8001930:	2305      	movs	r3, #5
 8001932:	221a      	movs	r2, #26
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 fb83 	bl	8002040 <WrByte>
 800193a:	60f8      	str	r0, [r7, #12]

	// setup the magnetometer
	// turn on the bypass multiplexer
	status = WrByte(hi2c2, MPU9250_AD, INT_BYPASS_CONFIG_AD, 0x02);
 800193c:	23d0      	movs	r3, #208	; 0xd0
 800193e:	b299      	uxth	r1, r3
 8001940:	2302      	movs	r3, #2
 8001942:	2237      	movs	r2, #55	; 0x37
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fb7b 	bl	8002040 <WrByte>
 800194a:	60f8      	str	r0, [r7, #12]

	// setup the Magnetometer to fuse ROM access mode to get the Sensitivity Adjustment values and 16-bit output
	status = WrByte(hi2c2, MAG_AD, CNTL1_AD, 0x1F);
 800194c:	2318      	movs	r3, #24
 800194e:	b299      	uxth	r1, r3
 8001950:	231f      	movs	r3, #31
 8001952:	220a      	movs	r2, #10
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 fb73 	bl	8002040 <WrByte>
 800195a:	60f8      	str	r0, [r7, #12]
	HAL_Delay(100);  //wait for the mode changes
 800195c:	2064      	movs	r0, #100	; 0x64
 800195e:	f000 fc91 	bl	8002284 <HAL_Delay>

	//read the Sensitivity Adjustment values
	status = ReadMulti(hi2c2, MAG_AD, ASAX_AD, &sensAdjust[0], 3);
 8001962:	2318      	movs	r3, #24
 8001964:	b299      	uxth	r1, r3
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	2203      	movs	r2, #3
 800196c:	9200      	str	r2, [sp, #0]
 800196e:	2210      	movs	r2, #16
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fbf0 	bl	8002156 <ReadMulti>
 8001976:	60f8      	str	r0, [r7, #12]
	asax = (sensAdjust[0] -128)*0.5/128+1;
 8001978:	7a3b      	ldrb	r3, [r7, #8]
 800197a:	3b80      	subs	r3, #128	; 0x80
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fdf1 	bl	8000564 <__aeabi_i2d>
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <IMU_init+0x1ac>)
 8001988:	f7fe fe56 	bl	8000638 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <IMU_init+0x1b0>)
 800199a:	f7fe ff77 	bl	800088c <__aeabi_ddiv>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <IMU_init+0x1b4>)
 80019ac:	f7fe fc8e 	bl	80002cc <__adddf3>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7ff f916 	bl	8000be8 <__aeabi_d2f>
 80019bc:	4603      	mov	r3, r0
 80019be:	4a36      	ldr	r2, [pc, #216]	; (8001a98 <IMU_init+0x1b8>)
 80019c0:	6013      	str	r3, [r2, #0]
	asay = (sensAdjust[1] -128)*0.5/128+1;
 80019c2:	7a7b      	ldrb	r3, [r7, #9]
 80019c4:	3b80      	subs	r3, #128	; 0x80
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fdcc 	bl	8000564 <__aeabi_i2d>
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <IMU_init+0x1ac>)
 80019d2:	f7fe fe31 	bl	8000638 <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <IMU_init+0x1b0>)
 80019e4:	f7fe ff52 	bl	800088c <__aeabi_ddiv>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4610      	mov	r0, r2
 80019ee:	4619      	mov	r1, r3
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <IMU_init+0x1b4>)
 80019f6:	f7fe fc69 	bl	80002cc <__adddf3>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4610      	mov	r0, r2
 8001a00:	4619      	mov	r1, r3
 8001a02:	f7ff f8f1 	bl	8000be8 <__aeabi_d2f>
 8001a06:	4603      	mov	r3, r0
 8001a08:	4a24      	ldr	r2, [pc, #144]	; (8001a9c <IMU_init+0x1bc>)
 8001a0a:	6013      	str	r3, [r2, #0]
	asaz = (sensAdjust[2] -128)*0.5/128+1;
 8001a0c:	7abb      	ldrb	r3, [r7, #10]
 8001a0e:	3b80      	subs	r3, #128	; 0x80
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7fe fda7 	bl	8000564 <__aeabi_i2d>
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <IMU_init+0x1ac>)
 8001a1c:	f7fe fe0c 	bl	8000638 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <IMU_init+0x1b0>)
 8001a2e:	f7fe ff2d 	bl	800088c <__aeabi_ddiv>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <IMU_init+0x1b4>)
 8001a40:	f7fe fc44 	bl	80002cc <__adddf3>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7ff f8cc 	bl	8000be8 <__aeabi_d2f>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a13      	ldr	r2, [pc, #76]	; (8001aa0 <IMU_init+0x1c0>)
 8001a54:	6013      	str	r3, [r2, #0]

	//reset the Magnetometer to power down mode
	status = WrByte(hi2c2, MAG_AD, CNTL1_AD, 0x00);
 8001a56:	2318      	movs	r3, #24
 8001a58:	b299      	uxth	r1, r3
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	220a      	movs	r2, #10
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 faee 	bl	8002040 <WrByte>
 8001a64:	60f8      	str	r0, [r7, #12]
	HAL_Delay(100);  //wait for the mode changes
 8001a66:	2064      	movs	r0, #100	; 0x64
 8001a68:	f000 fc0c 	bl	8002284 <HAL_Delay>

	//set the Magnetometer to continuous mode 2（100Hz) and 16-bit output
	status = WrByte(hi2c2, MAG_AD, CNTL1_AD, 0x16);
 8001a6c:	2318      	movs	r3, #24
 8001a6e:	b299      	uxth	r1, r3
 8001a70:	2316      	movs	r3, #22
 8001a72:	220a      	movs	r2, #10
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fae3 	bl	8002040 <WrByte>
 8001a7a:	60f8      	str	r0, [r7, #12]
	//wait for the mode changes
	HAL_Delay(100);
 8001a7c:	2064      	movs	r0, #100	; 0x64
 8001a7e:	f000 fc01 	bl	8002284 <HAL_Delay>

	return status;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	3fe00000 	.word	0x3fe00000
 8001a90:	40600000 	.word	0x40600000
 8001a94:	3ff00000 	.word	0x3ff00000
 8001a98:	20000978 	.word	0x20000978
 8001a9c:	20000970 	.word	0x20000970
 8001aa0:	20000974 	.word	0x20000974

08001aa4 <IMU_getAccurateMag>:
	accel[2] = tempAccel[2] / ACCEL_SENS;
	return status;
}

int IMU_getAccurateMag(I2C_HandleTypeDef *hi2c2, float *mag)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
	float magData[3];
	for (int i = 0; i < 40; i++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e026      	b.n	8001b02 <IMU_getAccurateMag+0x5e>
	{
		IMU_getMagData(hi2c2, mag);
 8001ab4:	6839      	ldr	r1, [r7, #0]
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f84a 	bl	8001b50 <IMU_getMagData>
		magData[0] += mag[0];
 8001abc:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	edd3 7a00 	vldr	s15, [r3]
 8001ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aca:	edc7 7a02 	vstr	s15, [r7, #8]
		magData[1] += mag[1];
 8001ace:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ade:	edc7 7a03 	vstr	s15, [r7, #12]
		magData[2] += mag[2];
 8001ae2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	3308      	adds	r3, #8
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af2:	edc7 7a04 	vstr	s15, [r7, #16]
		HAL_Delay(10);
 8001af6:	200a      	movs	r0, #10
 8001af8:	f000 fbc4 	bl	8002284 <HAL_Delay>
	for (int i = 0; i < 40; i++)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	2b27      	cmp	r3, #39	; 0x27
 8001b06:	ddd5      	ble.n	8001ab4 <IMU_getAccurateMag+0x10>
	}

	mag[0] = magData[0]/40;
 8001b08:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b0c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001b4c <IMU_getAccurateMag+0xa8>
 8001b10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	edc3 7a00 	vstr	s15, [r3]
	mag[1] = magData[1]/40;
 8001b1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	3304      	adds	r3, #4
 8001b22:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001b4c <IMU_getAccurateMag+0xa8>
 8001b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b2a:	edc3 7a00 	vstr	s15, [r3]
	mag[2] = magData[2]/40;
 8001b2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	3308      	adds	r3, #8
 8001b36:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001b4c <IMU_getAccurateMag+0xa8>
 8001b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b3e:	edc3 7a00 	vstr	s15, [r3]
}
 8001b42:	bf00      	nop
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	42200000 	.word	0x42200000

08001b50 <IMU_getMagData>:

int IMU_getMagData(I2C_HandleTypeDef *hi2c2, float *mag)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b08a      	sub	sp, #40	; 0x28
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
	int status = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
	uint8_t magBuff[6];
	uint8_t DRDYbit = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	74fb      	strb	r3, [r7, #19]
	uint8_t magicbit = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	74bb      	strb	r3, [r7, #18]

	// wait for data to be ready
	while(!DRDYbit)
 8001b66:	e011      	b.n	8001b8c <IMU_getMagData+0x3c>
	{
		status = RdByte(hi2c2, MAG_AD, STATUS_1_AD, &DRDYbit);
 8001b68:	2318      	movs	r3, #24
 8001b6a:	b299      	uxth	r1, r3
 8001b6c:	f107 0313 	add.w	r3, r7, #19
 8001b70:	2202      	movs	r2, #2
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 faa8 	bl	80020c8 <RdByte>
 8001b78:	61f8      	str	r0, [r7, #28]
		if (DRDYbit && DATA_READY_MASK)
 8001b7a:	7cfb      	ldrb	r3, [r7, #19]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d109      	bne.n	8001b94 <IMU_getMagData+0x44>
			break;
		printf("mag data not ready\n\r");
 8001b80:	4841      	ldr	r0, [pc, #260]	; (8001c88 <IMU_getMagData+0x138>)
 8001b82:	f004 fcc5 	bl	8006510 <iprintf>
		HAL_Delay(10);
 8001b86:	200a      	movs	r0, #10
 8001b88:	f000 fb7c 	bl	8002284 <HAL_Delay>
	while(!DRDYbit)
 8001b8c:	7cfb      	ldrb	r3, [r7, #19]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0ea      	beq.n	8001b68 <IMU_getMagData+0x18>
 8001b92:	e000      	b.n	8001b96 <IMU_getMagData+0x46>
			break;
 8001b94:	bf00      	nop
	}

	status = ReadMulti(hi2c2, MAG_AD, HXL_AD, &magBuff[0], 6);
 8001b96:	2318      	movs	r3, #24
 8001b98:	b299      	uxth	r1, r3
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	2206      	movs	r2, #6
 8001ba0:	9200      	str	r2, [sp, #0]
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 fad6 	bl	8002156 <ReadMulti>
 8001baa:	61f8      	str	r0, [r7, #28]
	if (status != 0)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <IMU_getMagData+0x68>
		return -3;
 8001bb2:	f06f 0302 	mvn.w	r3, #2
 8001bb6:	e062      	b.n	8001c7e <IMU_getMagData+0x12e>
	status = RdByte(hi2c2, MAG_AD, STATUS_2_AD, &magicbit);
 8001bb8:	2318      	movs	r3, #24
 8001bba:	b299      	uxth	r1, r3
 8001bbc:	f107 0312 	add.w	r3, r7, #18
 8001bc0:	2209      	movs	r2, #9
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 fa80 	bl	80020c8 <RdByte>
 8001bc8:	61f8      	str	r0, [r7, #28]
	if (!(magicbit && MAGIC_OVERFLOW_MASK))
 8001bca:	7cbb      	ldrb	r3, [r7, #18]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <IMU_getMagData+0x86>
		return -4;
 8001bd0:	f06f 0303 	mvn.w	r3, #3
 8001bd4:	e053      	b.n	8001c7e <IMU_getMagData+0x12e>

	int16_t tempMag [3];
	tempMag[0] = magBuff[0] | (magBuff[1]<<8);
 8001bd6:	7d3b      	ldrb	r3, [r7, #20]
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	7d7b      	ldrb	r3, [r7, #21]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b21b      	sxth	r3, r3
 8001be4:	81bb      	strh	r3, [r7, #12]
	tempMag[1] = magBuff[2] | (magBuff[3]<<8);
 8001be6:	7dbb      	ldrb	r3, [r7, #22]
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	021b      	lsls	r3, r3, #8
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b21b      	sxth	r3, r3
 8001bf4:	81fb      	strh	r3, [r7, #14]
	tempMag[2] = magBuff[4] | (magBuff[5]<<8);
 8001bf6:	7e3b      	ldrb	r3, [r7, #24]
 8001bf8:	b21a      	sxth	r2, r3
 8001bfa:	7e7b      	ldrb	r3, [r7, #25]
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	4313      	orrs	r3, r2
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	823b      	strh	r3, [r7, #16]
	mag[0] = ((tempMag[0] - d1[0]) * MPU9250mRes*asax);
 8001c06:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c12:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001c8c <IMU_getMagData+0x13c>
 8001c16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c1a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001c90 <IMU_getMagData+0x140>
 8001c1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c22:	4b1c      	ldr	r3, [pc, #112]	; (8001c94 <IMU_getMagData+0x144>)
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	edc3 7a00 	vstr	s15, [r3]
	mag[1] = (tempMag[0] - d1[0]);
 8001c32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001c8c <IMU_getMagData+0x13c>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	3304      	adds	r3, #4
 8001c46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c4a:	edc3 7a00 	vstr	s15, [r3]
	mag[2] = ((tempMag[2] - d1[2]) * MPU9250mRes*asaz);
 8001c4e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001c98 <IMU_getMagData+0x148>
 8001c5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c62:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001c90 <IMU_getMagData+0x140>
 8001c66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <IMU_getMagData+0x14c>)
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	3308      	adds	r3, #8
 8001c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c78:	edc3 7a00 	vstr	s15, [r3]
	return status;
 8001c7c:	69fb      	ldr	r3, [r7, #28]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3720      	adds	r7, #32
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	080081a4 	.word	0x080081a4
 8001c8c:	c2580000 	.word	0xc2580000
 8001c90:	3fbfebff 	.word	0x3fbfebff
 8001c94:	20000978 	.word	0x20000978
 8001c98:	c3480000 	.word	0xc3480000
 8001c9c:	20000974 	.word	0x20000974

08001ca0 <calibration_GetMag>:

int calibration_GetMag(I2C_HandleTypeDef *hi2c2, int16_t *mag)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b088      	sub	sp, #32
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
	int status = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
	uint8_t magBuff[6];
	uint8_t DRDYbit = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	72fb      	strb	r3, [r7, #11]
	uint8_t magicbit = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	72bb      	strb	r3, [r7, #10]

	// wait for data to be ready
	while(!DRDYbit)
 8001cb6:	e011      	b.n	8001cdc <calibration_GetMag+0x3c>
	{
		status = RdByte(hi2c2, MAG_AD, STATUS_1_AD, &DRDYbit);
 8001cb8:	2318      	movs	r3, #24
 8001cba:	b299      	uxth	r1, r3
 8001cbc:	f107 030b 	add.w	r3, r7, #11
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 fa00 	bl	80020c8 <RdByte>
 8001cc8:	6178      	str	r0, [r7, #20]
		if (DRDYbit && DATA_READY_MASK)
 8001cca:	7afb      	ldrb	r3, [r7, #11]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <calibration_GetMag+0x44>
			break;
		printf("mag data not ready\n\r");
 8001cd0:	4826      	ldr	r0, [pc, #152]	; (8001d6c <calibration_GetMag+0xcc>)
 8001cd2:	f004 fc1d 	bl	8006510 <iprintf>
		HAL_Delay(10);
 8001cd6:	200a      	movs	r0, #10
 8001cd8:	f000 fad4 	bl	8002284 <HAL_Delay>
	while(!DRDYbit)
 8001cdc:	7afb      	ldrb	r3, [r7, #11]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0ea      	beq.n	8001cb8 <calibration_GetMag+0x18>
 8001ce2:	e000      	b.n	8001ce6 <calibration_GetMag+0x46>
			break;
 8001ce4:	bf00      	nop
	}

	status = ReadMulti(hi2c2, MAG_AD, HXL_AD, &magBuff[0], 6);
 8001ce6:	2318      	movs	r3, #24
 8001ce8:	b299      	uxth	r1, r3
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	2206      	movs	r2, #6
 8001cf0:	9200      	str	r2, [sp, #0]
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fa2e 	bl	8002156 <ReadMulti>
 8001cfa:	6178      	str	r0, [r7, #20]
	if (status != 0)
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d002      	beq.n	8001d08 <calibration_GetMag+0x68>
		return -3;
 8001d02:	f06f 0302 	mvn.w	r3, #2
 8001d06:	e02c      	b.n	8001d62 <calibration_GetMag+0xc2>
	status = RdByte(hi2c2, MAG_AD, STATUS_2_AD, &magicbit);
 8001d08:	2318      	movs	r3, #24
 8001d0a:	b299      	uxth	r1, r3
 8001d0c:	f107 030a 	add.w	r3, r7, #10
 8001d10:	2209      	movs	r2, #9
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f9d8 	bl	80020c8 <RdByte>
 8001d18:	6178      	str	r0, [r7, #20]
	if (magicbit && MAGIC_OVERFLOW_MASK)
 8001d1a:	7abb      	ldrb	r3, [r7, #10]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <calibration_GetMag+0x86>
		return -4;
 8001d20:	f06f 0303 	mvn.w	r3, #3
 8001d24:	e01d      	b.n	8001d62 <calibration_GetMag+0xc2>

	mag[0] = magBuff[0] | (magBuff[1]<<8);
 8001d26:	7b3b      	ldrb	r3, [r7, #12]
 8001d28:	b21a      	sxth	r2, r3
 8001d2a:	7b7b      	ldrb	r3, [r7, #13]
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	b21b      	sxth	r3, r3
 8001d30:	4313      	orrs	r3, r2
 8001d32:	b21a      	sxth	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	801a      	strh	r2, [r3, #0]
	mag[1] = magBuff[2] | (magBuff[3]<<8);
 8001d38:	7bbb      	ldrb	r3, [r7, #14]
 8001d3a:	b219      	sxth	r1, r3
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	021b      	lsls	r3, r3, #8
 8001d40:	b21a      	sxth	r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	3302      	adds	r3, #2
 8001d46:	430a      	orrs	r2, r1
 8001d48:	b212      	sxth	r2, r2
 8001d4a:	801a      	strh	r2, [r3, #0]
	mag[2] = magBuff[4] | (magBuff[5]<<8);
 8001d4c:	7c3b      	ldrb	r3, [r7, #16]
 8001d4e:	b219      	sxth	r1, r3
 8001d50:	7c7b      	ldrb	r3, [r7, #17]
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	b212      	sxth	r2, r2
 8001d5e:	801a      	strh	r2, [r3, #0]

	return status;
 8001d60:	697b      	ldr	r3, [r7, #20]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	080081a4 	.word	0x080081a4

08001d70 <magcalMPU9250>:

void magcalMPU9250(I2C_HandleTypeDef *hi2c2, float * dest1, float * dest2)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b098      	sub	sp, #96	; 0x60
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
	uint16_t ii = 0, sample_count = 0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 8001d88:	2300      	movs	r3, #0
 8001d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d90:	2300      	movs	r3, #0
 8001d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d94:	2300      	movs	r3, #0
 8001d96:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d98:	2300      	movs	r3, #0
 8001d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	643b      	str	r3, [r7, #64]	; 0x40
	int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 8001da0:	4aa3      	ldr	r2, [pc, #652]	; (8002030 <magcalMPU9250+0x2c0>)
 8001da2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001da6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001daa:	6018      	str	r0, [r3, #0]
 8001dac:	3304      	adds	r3, #4
 8001dae:	8019      	strh	r1, [r3, #0]
 8001db0:	4aa0      	ldr	r2, [pc, #640]	; (8002034 <magcalMPU9250+0x2c4>)
 8001db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dba:	6018      	str	r0, [r3, #0]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	8019      	strh	r1, [r3, #0]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	843b      	strh	r3, [r7, #32]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8001dc8:	2300      	movs	r3, #0
 8001dca:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t MPU9250Mmode = 0x06;
 8001dcc:	2306      	movs	r3, #6
 8001dce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	printf("Mag Calibration: Wave device in a figure eight until done!\n\r");
 8001dd2:	4899      	ldr	r0, [pc, #612]	; (8002038 <magcalMPU9250+0x2c8>)
 8001dd4:	f004 fb9c 	bl	8006510 <iprintf>
	HAL_Delay(4000);
 8001dd8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001ddc:	f000 fa52 	bl	8002284 <HAL_Delay>

	// shoot for ~fifteen seconds of mag data
	if(MPU9250Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 8001de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d102      	bne.n	8001dee <magcalMPU9250+0x7e>
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	if(MPU9250Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 8001dee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001df2:	2b06      	cmp	r3, #6
 8001df4:	d103      	bne.n	8001dfe <magcalMPU9250+0x8e>
 8001df6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001dfa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	for(ii = 0; ii < sample_count; ii++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001e04:	e078      	b.n	8001ef8 <magcalMPU9250+0x188>
	{
		int16_t magBuff [6];
		calibration_GetMag(hi2c2, &magBuff[0]);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f7ff ff47 	bl	8001ca0 <calibration_GetMag>
		mag_temp[0] = (int16_t)(magBuff[0] | (magBuff[1]<<8));
 8001e12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001e16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	b21b      	sxth	r3, r3
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	843b      	strh	r3, [r7, #32]
		mag_temp[1] = (int16_t)(magBuff[2] | (magBuff[3]<<8));
 8001e24:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001e28:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	b21b      	sxth	r3, r3
 8001e30:	4313      	orrs	r3, r2
 8001e32:	b21b      	sxth	r3, r3
 8001e34:	847b      	strh	r3, [r7, #34]	; 0x22
		mag_temp[2] = (int16_t)(magBuff[4] | (magBuff[5]<<8));
 8001e36:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001e3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	b21b      	sxth	r3, r3
 8001e42:	4313      	orrs	r3, r2
 8001e44:	b21b      	sxth	r3, r3
 8001e46:	84bb      	strh	r3, [r7, #36]	; 0x24
		for (int jj = 0; jj < 3; jj++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e4c:	e03e      	b.n	8001ecc <magcalMPU9250+0x15c>
		{
			if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8001e4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e56:	4413      	add	r3, r2
 8001e58:	f933 2c40 	ldrsh.w	r2, [r3, #-64]
 8001e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001e64:	440b      	add	r3, r1
 8001e66:	f933 3c30 	ldrsh.w	r3, [r3, #-48]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	dd0d      	ble.n	8001e8a <magcalMPU9250+0x11a>
 8001e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e76:	4413      	add	r3, r2
 8001e78:	f933 2c40 	ldrsh.w	r2, [r3, #-64]
 8001e7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001e84:	440b      	add	r3, r1
 8001e86:	f823 2c30 	strh.w	r2, [r3, #-48]
			if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 8001e8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e92:	4413      	add	r3, r2
 8001e94:	f933 2c40 	ldrsh.w	r2, [r3, #-64]
 8001e98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001ea0:	440b      	add	r3, r1
 8001ea2:	f933 3c38 	ldrsh.w	r3, [r3, #-56]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	da0d      	bge.n	8001ec6 <magcalMPU9250+0x156>
 8001eaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f933 2c40 	ldrsh.w	r2, [r3, #-64]
 8001eb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001ec0:	440b      	add	r3, r1
 8001ec2:	f823 2c38 	strh.w	r2, [r3, #-56]
		for (int jj = 0; jj < 3; jj++)
 8001ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ec8:	3301      	adds	r3, #1
 8001eca:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	ddbd      	ble.n	8001e4e <magcalMPU9250+0xde>
		}
		if(MPU9250Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 8001ed2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d102      	bne.n	8001ee0 <magcalMPU9250+0x170>
 8001eda:	2087      	movs	r0, #135	; 0x87
 8001edc:	f000 f9d2 	bl	8002284 <HAL_Delay>
		if(MPU9250Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 8001ee0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001ee4:	2b06      	cmp	r3, #6
 8001ee6:	d102      	bne.n	8001eee <magcalMPU9250+0x17e>
 8001ee8:	200c      	movs	r0, #12
 8001eea:	f000 f9cb 	bl	8002284 <HAL_Delay>
	for(ii = 0; ii < sample_count; ii++)
 8001eee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001ef8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001efc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d380      	bcc.n	8001e06 <magcalMPU9250+0x96>
	}

	// Get hard iron correction
	mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8001f04:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001f0e:	4413      	add	r3, r2
 8001f10:	0fda      	lsrs	r2, r3, #31
 8001f12:	4413      	add	r3, r2
 8001f14:	105b      	asrs	r3, r3, #1
 8001f16:	647b      	str	r3, [r7, #68]	; 0x44
	mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8001f18:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f22:	4413      	add	r3, r2
 8001f24:	0fda      	lsrs	r2, r3, #31
 8001f26:	4413      	add	r3, r2
 8001f28:	105b      	asrs	r3, r3, #1
 8001f2a:	64bb      	str	r3, [r7, #72]	; 0x48
	mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8001f2c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001f30:	461a      	mov	r2, r3
 8001f32:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001f36:	4413      	add	r3, r2
 8001f38:	0fda      	lsrs	r2, r3, #31
 8001f3a:	4413      	add	r3, r2
 8001f3c:	105b      	asrs	r3, r3, #1
 8001f3e:	64fb      	str	r3, [r7, #76]	; 0x4c

	dest1[0] = (float) mag_bias[0];  // save mag biases in G for main program
 8001f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	edc3 7a00 	vstr	s15, [r3]
	dest1[1] = (float) mag_bias[1];
 8001f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	3304      	adds	r3, #4
 8001f56:	ee07 2a90 	vmov	s15, r2
 8001f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5e:	edc3 7a00 	vstr	s15, [r3]
	dest1[2] = (float) mag_bias[2];
 8001f62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	3308      	adds	r3, #8
 8001f68:	ee07 2a90 	vmov	s15, r2
 8001f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f70:	edc3 7a00 	vstr	s15, [r3]

	// Get soft iron correction estimate
	mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8001f74:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	0fda      	lsrs	r2, r3, #31
 8001f82:	4413      	add	r3, r2
 8001f84:	105b      	asrs	r3, r3, #1
 8001f86:	63bb      	str	r3, [r7, #56]	; 0x38
	mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8001f88:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	0fda      	lsrs	r2, r3, #31
 8001f96:	4413      	add	r3, r2
 8001f98:	105b      	asrs	r3, r3, #1
 8001f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8001f9c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	0fda      	lsrs	r2, r3, #31
 8001faa:	4413      	add	r3, r2
 8001fac:	105b      	asrs	r3, r3, #1
 8001fae:	643b      	str	r3, [r7, #64]	; 0x40

	float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8001fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb4:	441a      	add	r2, r3
 8001fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb8:	4413      	add	r3, r2
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	avg_rad /= 3.0;
 8001fc6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001fca:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8001fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fd2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	dest2[0] = avg_rad/((float)mag_scale[0]);
 8001fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fe0:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8001fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	edc3 7a00 	vstr	s15, [r3]
	dest2[1] = avg_rad/((float)mag_scale[1]);
 8001fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8002000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002004:	edc3 7a00 	vstr	s15, [r3]
	dest2[2] = avg_rad/((float)mag_scale[2]);
 8002008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200a:	ee07 3a90 	vmov	s15, r3
 800200e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3308      	adds	r3, #8
 8002016:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800201a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800201e:	edc3 7a00 	vstr	s15, [r3]

	printf("Mag Calibration done!\n\r");
 8002022:	4806      	ldr	r0, [pc, #24]	; (800203c <magcalMPU9250+0x2cc>)
 8002024:	f004 fa74 	bl	8006510 <iprintf>
}
 8002028:	bf00      	nop
 800202a:	3760      	adds	r7, #96	; 0x60
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	08008214 	.word	0x08008214
 8002034:	0800821c 	.word	0x0800821c
 8002038:	080081bc 	.word	0x080081bc
 800203c:	080081fc 	.word	0x080081fc

08002040 <WrByte>:

#include "helpful_i2c.h"

uint8_t _I2CBuffer[64];

int WrByte(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t index, uint8_t data) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	4603      	mov	r3, r0
 8002050:	807b      	strh	r3, [r7, #2]
 8002052:	460b      	mov	r3, r1
 8002054:	707b      	strb	r3, [r7, #1]
 8002056:	4613      	mov	r3, r2
 8002058:	703b      	strb	r3, [r7, #0]
	int status = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]

    _I2CBuffer[0] = index;
 800205e:	4a09      	ldr	r2, [pc, #36]	; (8002084 <WrByte+0x44>)
 8002060:	787b      	ldrb	r3, [r7, #1]
 8002062:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8002064:	4a07      	ldr	r2, [pc, #28]	; (8002084 <WrByte+0x44>)
 8002066:	783b      	ldrb	r3, [r7, #0]
 8002068:	7053      	strb	r3, [r2, #1]

    status = Brett_I2CWrite(hi2c, DevAddress, _I2CBuffer, 2);
 800206a:	8879      	ldrh	r1, [r7, #2]
 800206c:	2302      	movs	r3, #2
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <WrByte+0x44>)
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f809 	bl	8002088 <Brett_I2CWrite>
 8002076:	60f8      	str	r0, [r7, #12]

    return status;
 8002078:	68fb      	ldr	r3, [r7, #12]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	2000097c 	.word	0x2000097c

08002088 <Brett_I2CWrite>:

int Brett_I2CWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pdata, uint32_t count) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af02      	add	r7, sp, #8
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	460b      	mov	r3, r1
 8002096:	817b      	strh	r3, [r7, #10]
	int status = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	617b      	str	r3, [r7, #20]

	status = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
    int i2c_time_out = 10+ count* 1;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	330a      	adds	r3, #10
 80020a4:	613b      	str	r3, [r7, #16]

    status = HAL_I2C_Master_Transmit(hi2c, DevAddress, pdata, count, i2c_time_out);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	8979      	ldrh	r1, [r7, #10]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	4613      	mov	r3, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68f8      	ldr	r0, [r7, #12]
 80020b6:	f000 fce1 	bl	8002a7c <HAL_I2C_Master_Transmit>
 80020ba:	4603      	mov	r3, r0
 80020bc:	617b      	str	r3, [r7, #20]

    return status;
 80020be:	697b      	ldr	r3, [r7, #20]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <RdByte>:

int RdByte(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t index, uint8_t *data) {
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	817b      	strh	r3, [r7, #10]
 80020d6:	4613      	mov	r3, r2
 80020d8:	727b      	strb	r3, [r7, #9]
	int status = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]

	status = Brett_I2CWrite(hi2c, DevAddress, &index, 1);
 80020de:	f107 0209 	add.w	r2, r7, #9
 80020e2:	8979      	ldrh	r1, [r7, #10]
 80020e4:	2301      	movs	r3, #1
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7ff ffce 	bl	8002088 <Brett_I2CWrite>
 80020ec:	6178      	str	r0, [r7, #20]
    if(status != 0)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <RdByte+0x3c>
    	goto done;

    status = Brett_I2CRead(hi2c, DevAddress, data, 1);
 80020f4:	8979      	ldrh	r1, [r7, #10]
 80020f6:	2301      	movs	r3, #1
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f808 	bl	8002110 <Brett_I2CRead>
 8002100:	6178      	str	r0, [r7, #20]
 8002102:	e000      	b.n	8002106 <RdByte+0x3e>
    	goto done;
 8002104:	bf00      	nop

done:
    return status;
 8002106:	697b      	ldr	r3, [r7, #20]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <Brett_I2CRead>:

int Brett_I2CRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pdata, uint32_t count) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	460b      	mov	r3, r1
 800211e:	817b      	strh	r3, [r7, #10]
	int status = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

	status = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
    int i2c_time_out = 10+ count* 1;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	330a      	adds	r3, #10
 800212c:	613b      	str	r3, [r7, #16]

    status = HAL_I2C_Master_Receive(hi2c, DevAddress|1, pdata, count, i2c_time_out);
 800212e:	897b      	ldrh	r3, [r7, #10]
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	b299      	uxth	r1, r3
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b29a      	uxth	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	4613      	mov	r3, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fd98 	bl	8002c78 <HAL_I2C_Master_Receive>
 8002148:	4603      	mov	r3, r0
 800214a:	617b      	str	r3, [r7, #20]

    return status;
 800214c:	697b      	ldr	r3, [r7, #20]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
int ReadMulti(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t index, uint8_t *pdata, uint32_t count) {
 8002156:	b580      	push	{r7, lr}
 8002158:	b086      	sub	sp, #24
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	817b      	strh	r3, [r7, #10]
 8002164:	4613      	mov	r3, r2
 8002166:	727b      	strb	r3, [r7, #9]
	int status = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

    status = Brett_I2CWrite(hi2c, DevAddress, &index, 1);
 800216c:	f107 0209 	add.w	r2, r7, #9
 8002170:	8979      	ldrh	r1, [r7, #10]
 8002172:	2301      	movs	r3, #1
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f7ff ff87 	bl	8002088 <Brett_I2CWrite>
 800217a:	6178      	str	r0, [r7, #20]
    if (status != 0)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d107      	bne.n	8002192 <ReadMulti+0x3c>
        goto done;

    status = Brett_I2CRead(hi2c, DevAddress, pdata, count);
 8002182:	8979      	ldrh	r1, [r7, #10]
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7ff ffc1 	bl	8002110 <Brett_I2CRead>
 800218e:	6178      	str	r0, [r7, #20]
 8002190:	e000      	b.n	8002194 <ReadMulti+0x3e>
        goto done;
 8002192:	bf00      	nop

done:
    return status;
 8002194:	697b      	ldr	r3, [r7, #20]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a4:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <HAL_Init+0x40>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0d      	ldr	r2, [pc, #52]	; (80021e0 <HAL_Init+0x40>)
 80021aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_Init+0x40>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <HAL_Init+0x40>)
 80021b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_Init+0x40>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_Init+0x40>)
 80021c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 f931 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ce:	2000      	movs	r0, #0
 80021d0:	f000 f808 	bl	80021e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d4:	f7ff f954 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023c00 	.word	0x40023c00

080021e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_InitTick+0x54>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <HAL_InitTick+0x58>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	4619      	mov	r1, r3
 80021f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f000 f93b 	bl	800247e <HAL_SYSTICK_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00e      	b.n	8002230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b0f      	cmp	r3, #15
 8002216:	d80a      	bhi.n	800222e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002218:	2200      	movs	r2, #0
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f000 f911 	bl	8002446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002224:	4a06      	ldr	r2, [pc, #24]	; (8002240 <HAL_InitTick+0x5c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
}
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20000000 	.word	0x20000000
 800223c:	20000008 	.word	0x20000008
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_IncTick+0x20>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_IncTick+0x24>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_IncTick+0x24>)
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	20000008 	.word	0x20000008
 8002268:	200009bc 	.word	0x200009bc

0800226c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <HAL_GetTick+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	200009bc 	.word	0x200009bc

08002284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800228c:	f7ff ffee 	bl	800226c <HAL_GetTick>
 8002290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d005      	beq.n	80022aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229e:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <HAL_Delay+0x44>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022aa:	bf00      	nop
 80022ac:	f7ff ffde 	bl	800226c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d8f7      	bhi.n	80022ac <HAL_Delay+0x28>
  {
  }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000008 	.word	0x20000008

080022cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e8:	4013      	ands	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fe:	4a04      	ldr	r2, [pc, #16]	; (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	60d3      	str	r3, [r2, #12]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <__NVIC_GetPriorityGrouping+0x18>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	f003 0307 	and.w	r3, r3, #7
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	2b00      	cmp	r3, #0
 8002342:	db0a      	blt.n	800235a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	490c      	ldr	r1, [pc, #48]	; (800237c <__NVIC_SetPriority+0x4c>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	0112      	lsls	r2, r2, #4
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	440b      	add	r3, r1
 8002354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002358:	e00a      	b.n	8002370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4908      	ldr	r1, [pc, #32]	; (8002380 <__NVIC_SetPriority+0x50>)
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	3b04      	subs	r3, #4
 8002368:	0112      	lsls	r2, r2, #4
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	440b      	add	r3, r1
 800236e:	761a      	strb	r2, [r3, #24]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000e100 	.word	0xe000e100
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f1c3 0307 	rsb	r3, r3, #7
 800239e:	2b04      	cmp	r3, #4
 80023a0:	bf28      	it	cs
 80023a2:	2304      	movcs	r3, #4
 80023a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d902      	bls.n	80023b4 <NVIC_EncodePriority+0x30>
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3b03      	subs	r3, #3
 80023b2:	e000      	b.n	80023b6 <NVIC_EncodePriority+0x32>
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	f04f 32ff 	mov.w	r2, #4294967295
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43d9      	mvns	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	4313      	orrs	r3, r2
         );
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3724      	adds	r7, #36	; 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023fc:	d301      	bcc.n	8002402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fe:	2301      	movs	r3, #1
 8002400:	e00f      	b.n	8002422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <SysTick_Config+0x40>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240a:	210f      	movs	r1, #15
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f7ff ff8e 	bl	8002330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <SysTick_Config+0x40>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <SysTick_Config+0x40>)
 800241c:	2207      	movs	r2, #7
 800241e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	e000e010 	.word	0xe000e010

08002430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff47 	bl	80022cc <__NVIC_SetPriorityGrouping>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002458:	f7ff ff5c 	bl	8002314 <__NVIC_GetPriorityGrouping>
 800245c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff ff8e 	bl	8002384 <NVIC_EncodePriority>
 8002468:	4602      	mov	r2, r0
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff5d 	bl	8002330 <__NVIC_SetPriority>
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffb0 	bl	80023ec <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
 80024b2:	e165      	b.n	8002780 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b4:	2201      	movs	r2, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	f040 8154 	bne.w	800277a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d005      	beq.n	80024ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d130      	bne.n	800254c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	2203      	movs	r2, #3
 80024f6:	fa02 f303 	lsl.w	r3, r2, r3
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002520:	2201      	movs	r2, #1
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 0201 	and.w	r2, r3, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b03      	cmp	r3, #3
 8002556:	d017      	beq.n	8002588 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d123      	bne.n	80025dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	08da      	lsrs	r2, r3, #3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3208      	adds	r2, #8
 800259c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	220f      	movs	r2, #15
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	08da      	lsrs	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3208      	adds	r2, #8
 80025d6:	69b9      	ldr	r1, [r7, #24]
 80025d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0203 	and.w	r2, r3, #3
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80ae 	beq.w	800277a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b5d      	ldr	r3, [pc, #372]	; (8002798 <HAL_GPIO_Init+0x300>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	4a5c      	ldr	r2, [pc, #368]	; (8002798 <HAL_GPIO_Init+0x300>)
 8002628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800262c:	6453      	str	r3, [r2, #68]	; 0x44
 800262e:	4b5a      	ldr	r3, [pc, #360]	; (8002798 <HAL_GPIO_Init+0x300>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800263a:	4a58      	ldr	r2, [pc, #352]	; (800279c <HAL_GPIO_Init+0x304>)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	3302      	adds	r3, #2
 8002642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	220f      	movs	r2, #15
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4f      	ldr	r2, [pc, #316]	; (80027a0 <HAL_GPIO_Init+0x308>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d025      	beq.n	80026b2 <HAL_GPIO_Init+0x21a>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4e      	ldr	r2, [pc, #312]	; (80027a4 <HAL_GPIO_Init+0x30c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01f      	beq.n	80026ae <HAL_GPIO_Init+0x216>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a4d      	ldr	r2, [pc, #308]	; (80027a8 <HAL_GPIO_Init+0x310>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d019      	beq.n	80026aa <HAL_GPIO_Init+0x212>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a4c      	ldr	r2, [pc, #304]	; (80027ac <HAL_GPIO_Init+0x314>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <HAL_GPIO_Init+0x20e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a4b      	ldr	r2, [pc, #300]	; (80027b0 <HAL_GPIO_Init+0x318>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00d      	beq.n	80026a2 <HAL_GPIO_Init+0x20a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a4a      	ldr	r2, [pc, #296]	; (80027b4 <HAL_GPIO_Init+0x31c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d007      	beq.n	800269e <HAL_GPIO_Init+0x206>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a49      	ldr	r2, [pc, #292]	; (80027b8 <HAL_GPIO_Init+0x320>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d101      	bne.n	800269a <HAL_GPIO_Init+0x202>
 8002696:	2306      	movs	r3, #6
 8002698:	e00c      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 800269a:	2307      	movs	r3, #7
 800269c:	e00a      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 800269e:	2305      	movs	r3, #5
 80026a0:	e008      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026a2:	2304      	movs	r3, #4
 80026a4:	e006      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026a6:	2303      	movs	r3, #3
 80026a8:	e004      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e002      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_GPIO_Init+0x21c>
 80026b2:	2300      	movs	r3, #0
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	f002 0203 	and.w	r2, r2, #3
 80026ba:	0092      	lsls	r2, r2, #2
 80026bc:	4093      	lsls	r3, r2
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c4:	4935      	ldr	r1, [pc, #212]	; (800279c <HAL_GPIO_Init+0x304>)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	3302      	adds	r3, #2
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d2:	4b3a      	ldr	r3, [pc, #232]	; (80027bc <HAL_GPIO_Init+0x324>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f6:	4a31      	ldr	r2, [pc, #196]	; (80027bc <HAL_GPIO_Init+0x324>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <HAL_GPIO_Init+0x324>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002720:	4a26      	ldr	r2, [pc, #152]	; (80027bc <HAL_GPIO_Init+0x324>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002726:	4b25      	ldr	r3, [pc, #148]	; (80027bc <HAL_GPIO_Init+0x324>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800274a:	4a1c      	ldr	r2, [pc, #112]	; (80027bc <HAL_GPIO_Init+0x324>)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002750:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <HAL_GPIO_Init+0x324>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002774:	4a11      	ldr	r2, [pc, #68]	; (80027bc <HAL_GPIO_Init+0x324>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3301      	adds	r3, #1
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2b0f      	cmp	r3, #15
 8002784:	f67f ae96 	bls.w	80024b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
 800279c:	40013800 	.word	0x40013800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40020800 	.word	0x40020800
 80027ac:	40020c00 	.word	0x40020c00
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40021400 	.word	0x40021400
 80027b8:	40021800 	.word	0x40021800
 80027bc:	40013c00 	.word	0x40013c00

080027c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027dc:	e003      	b.n	80027e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027de:	887b      	ldrh	r3, [r7, #2]
 80027e0:	041a      	lsls	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	619a      	str	r2, [r3, #24]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e12b      	b.n	8002a5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe fe58 	bl	80014d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002846:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002856:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002858:	f001 f854 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 800285c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4a81      	ldr	r2, [pc, #516]	; (8002a68 <HAL_I2C_Init+0x274>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d807      	bhi.n	8002878 <HAL_I2C_Init+0x84>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4a80      	ldr	r2, [pc, #512]	; (8002a6c <HAL_I2C_Init+0x278>)
 800286c:	4293      	cmp	r3, r2
 800286e:	bf94      	ite	ls
 8002870:	2301      	movls	r3, #1
 8002872:	2300      	movhi	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e006      	b.n	8002886 <HAL_I2C_Init+0x92>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a7d      	ldr	r2, [pc, #500]	; (8002a70 <HAL_I2C_Init+0x27c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	bf94      	ite	ls
 8002880:	2301      	movls	r3, #1
 8002882:	2300      	movhi	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0e7      	b.n	8002a5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4a78      	ldr	r2, [pc, #480]	; (8002a74 <HAL_I2C_Init+0x280>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0c9b      	lsrs	r3, r3, #18
 8002898:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a6a      	ldr	r2, [pc, #424]	; (8002a68 <HAL_I2C_Init+0x274>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d802      	bhi.n	80028c8 <HAL_I2C_Init+0xd4>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3301      	adds	r3, #1
 80028c6:	e009      	b.n	80028dc <HAL_I2C_Init+0xe8>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	4a69      	ldr	r2, [pc, #420]	; (8002a78 <HAL_I2C_Init+0x284>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	099b      	lsrs	r3, r3, #6
 80028da:	3301      	adds	r3, #1
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	430b      	orrs	r3, r1
 80028e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	495c      	ldr	r1, [pc, #368]	; (8002a68 <HAL_I2C_Init+0x274>)
 80028f8:	428b      	cmp	r3, r1
 80028fa:	d819      	bhi.n	8002930 <HAL_I2C_Init+0x13c>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e59      	subs	r1, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fbb1 f3f3 	udiv	r3, r1, r3
 800290a:	1c59      	adds	r1, r3, #1
 800290c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002910:	400b      	ands	r3, r1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_I2C_Init+0x138>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1e59      	subs	r1, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fbb1 f3f3 	udiv	r3, r1, r3
 8002924:	3301      	adds	r3, #1
 8002926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292a:	e051      	b.n	80029d0 <HAL_I2C_Init+0x1dc>
 800292c:	2304      	movs	r3, #4
 800292e:	e04f      	b.n	80029d0 <HAL_I2C_Init+0x1dc>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d111      	bne.n	800295c <HAL_I2C_Init+0x168>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1e58      	subs	r0, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	440b      	add	r3, r1
 8002946:	fbb0 f3f3 	udiv	r3, r0, r3
 800294a:	3301      	adds	r3, #1
 800294c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e012      	b.n	8002982 <HAL_I2C_Init+0x18e>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1e58      	subs	r0, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	0099      	lsls	r1, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002972:	3301      	adds	r3, #1
 8002974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Init+0x196>
 8002986:	2301      	movs	r3, #1
 8002988:	e022      	b.n	80029d0 <HAL_I2C_Init+0x1dc>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10e      	bne.n	80029b0 <HAL_I2C_Init+0x1bc>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1e58      	subs	r0, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	460b      	mov	r3, r1
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	440b      	add	r3, r1
 80029a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ae:	e00f      	b.n	80029d0 <HAL_I2C_Init+0x1dc>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1e58      	subs	r0, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	0099      	lsls	r1, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c6:	3301      	adds	r3, #1
 80029c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	6809      	ldr	r1, [r1, #0]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6911      	ldr	r1, [r2, #16]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68d2      	ldr	r2, [r2, #12]
 8002a0a:	4311      	orrs	r1, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	430b      	orrs	r3, r1
 8002a12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	000186a0 	.word	0x000186a0
 8002a6c:	001e847f 	.word	0x001e847f
 8002a70:	003d08ff 	.word	0x003d08ff
 8002a74:	431bde83 	.word	0x431bde83
 8002a78:	10624dd3 	.word	0x10624dd3

08002a7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	461a      	mov	r2, r3
 8002a88:	460b      	mov	r3, r1
 8002a8a:	817b      	strh	r3, [r7, #10]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a90:	f7ff fbec 	bl	800226c <HAL_GetTick>
 8002a94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	f040 80e0 	bne.w	8002c64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2319      	movs	r3, #25
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4970      	ldr	r1, [pc, #448]	; (8002c70 <HAL_I2C_Master_Transmit+0x1f4>)
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fc58 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
 8002abc:	e0d3      	b.n	8002c66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_I2C_Master_Transmit+0x50>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e0cc      	b.n	8002c66 <HAL_I2C_Master_Transmit+0x1ea>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d007      	beq.n	8002af2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0201 	orr.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2221      	movs	r2, #33	; 0x21
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	893a      	ldrh	r2, [r7, #8]
 8002b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4a50      	ldr	r2, [pc, #320]	; (8002c74 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b34:	8979      	ldrh	r1, [r7, #10]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	6a3a      	ldr	r2, [r7, #32]
 8002b3a:	68f8      	ldr	r0, [r7, #12]
 8002b3c:	f000 fac2 	bl	80030c4 <I2C_MasterRequestWrite>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e08d      	b.n	8002c66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b60:	e066      	b.n	8002c30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	6a39      	ldr	r1, [r7, #32]
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fcd2 	bl	8003510 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00d      	beq.n	8002b8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d107      	bne.n	8002b8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e06b      	b.n	8002c66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	781a      	ldrb	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d11b      	bne.n	8002c04 <HAL_I2C_Master_Transmit+0x188>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d017      	beq.n	8002c04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	781a      	ldrb	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	6a39      	ldr	r1, [r7, #32]
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fcc2 	bl	8003592 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00d      	beq.n	8002c30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d107      	bne.n	8002c2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e01a      	b.n	8002c66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d194      	bne.n	8002b62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	e000      	b.n	8002c66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c64:	2302      	movs	r3, #2
  }
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	00100002 	.word	0x00100002
 8002c74:	ffff0000 	.word	0xffff0000

08002c78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	; 0x30
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	461a      	mov	r2, r3
 8002c84:	460b      	mov	r3, r1
 8002c86:	817b      	strh	r3, [r7, #10]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c8c:	f7ff faee 	bl	800226c <HAL_GetTick>
 8002c90:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	f040 820b 	bne.w	80030b6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2319      	movs	r3, #25
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	497c      	ldr	r1, [pc, #496]	; (8002e9c <HAL_I2C_Master_Receive+0x224>)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 fb5a 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e1fe      	b.n	80030b8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_I2C_Master_Receive+0x50>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e1f7      	b.n	80030b8 <HAL_I2C_Master_Receive+0x440>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d007      	beq.n	8002cee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0201 	orr.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cfc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2222      	movs	r2, #34	; 0x22
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2210      	movs	r2, #16
 8002d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	893a      	ldrh	r2, [r7, #8]
 8002d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4a5c      	ldr	r2, [pc, #368]	; (8002ea0 <HAL_I2C_Master_Receive+0x228>)
 8002d2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d30:	8979      	ldrh	r1, [r7, #10]
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fa46 	bl	80031c8 <I2C_MasterRequestRead>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e1b8      	b.n	80030b8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d113      	bne.n	8002d76 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	623b      	str	r3, [r7, #32]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e18c      	b.n	8003090 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d11b      	bne.n	8002db6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e16c      	b.n	8003090 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d11b      	bne.n	8002df6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	e14c      	b.n	8003090 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e06:	2300      	movs	r3, #0
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e1c:	e138      	b.n	8003090 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	f200 80f1 	bhi.w	800300a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d123      	bne.n	8002e78 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 fbed 	bl	8003614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e139      	b.n	80030b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e76:	e10b      	b.n	8003090 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d14e      	bne.n	8002f1e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e86:	2200      	movs	r2, #0
 8002e88:	4906      	ldr	r1, [pc, #24]	; (8002ea4 <HAL_I2C_Master_Receive+0x22c>)
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fa6a 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e10e      	b.n	80030b8 <HAL_I2C_Master_Receive+0x440>
 8002e9a:	bf00      	nop
 8002e9c:	00100002 	.word	0x00100002
 8002ea0:	ffff0000 	.word	0xffff0000
 8002ea4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f1c:	e0b8      	b.n	8003090 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	2200      	movs	r2, #0
 8002f26:	4966      	ldr	r1, [pc, #408]	; (80030c0 <HAL_I2C_Master_Receive+0x448>)
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fa1b 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0bf      	b.n	80030b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	2200      	movs	r2, #0
 8002f82:	494f      	ldr	r1, [pc, #316]	; (80030c0 <HAL_I2C_Master_Receive+0x448>)
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f9ed 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e091      	b.n	80030b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	1c5a      	adds	r2, r3, #1
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003008:	e042      	b.n	8003090 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800300a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fb00 	bl	8003614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e04c      	b.n	80030b8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b04      	cmp	r3, #4
 800305c:	d118      	bne.n	8003090 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003094:	2b00      	cmp	r3, #0
 8003096:	f47f aec2 	bne.w	8002e1e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3728      	adds	r7, #40	; 0x28
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	00010004 	.word	0x00010004

080030c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af02      	add	r7, sp, #8
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	607a      	str	r2, [r7, #4]
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	460b      	mov	r3, r1
 80030d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d006      	beq.n	80030ee <I2C_MasterRequestWrite+0x2a>
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d003      	beq.n	80030ee <I2C_MasterRequestWrite+0x2a>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030ec:	d108      	bne.n	8003100 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e00b      	b.n	8003118 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	2b12      	cmp	r3, #18
 8003106:	d107      	bne.n	8003118 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003116:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 f91d 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00d      	beq.n	800314c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800313e:	d103      	bne.n	8003148 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003146:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e035      	b.n	80031b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003154:	d108      	bne.n	8003168 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003156:	897b      	ldrh	r3, [r7, #10]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003164:	611a      	str	r2, [r3, #16]
 8003166:	e01b      	b.n	80031a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003168:	897b      	ldrh	r3, [r7, #10]
 800316a:	11db      	asrs	r3, r3, #7
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f003 0306 	and.w	r3, r3, #6
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f063 030f 	orn	r3, r3, #15
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	490e      	ldr	r1, [pc, #56]	; (80031c0 <I2C_MasterRequestWrite+0xfc>)
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f943 	bl	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e010      	b.n	80031b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003196:	897b      	ldrh	r3, [r7, #10]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	4907      	ldr	r1, [pc, #28]	; (80031c4 <I2C_MasterRequestWrite+0x100>)
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f933 	bl	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	00010008 	.word	0x00010008
 80031c4:	00010002 	.word	0x00010002

080031c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	460b      	mov	r3, r1
 80031d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d006      	beq.n	8003202 <I2C_MasterRequestRead+0x3a>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d003      	beq.n	8003202 <I2C_MasterRequestRead+0x3a>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003200:	d108      	bne.n	8003214 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	e00b      	b.n	800322c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003218:	2b11      	cmp	r3, #17
 800321a:	d107      	bne.n	800322c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800322a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f893 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00d      	beq.n	8003260 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800324e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003252:	d103      	bne.n	800325c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800325a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e079      	b.n	8003354 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003268:	d108      	bne.n	800327c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800326a:	897b      	ldrh	r3, [r7, #10]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	b2da      	uxtb	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	611a      	str	r2, [r3, #16]
 800327a:	e05f      	b.n	800333c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800327c:	897b      	ldrh	r3, [r7, #10]
 800327e:	11db      	asrs	r3, r3, #7
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f003 0306 	and.w	r3, r3, #6
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f063 030f 	orn	r3, r3, #15
 800328c:	b2da      	uxtb	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4930      	ldr	r1, [pc, #192]	; (800335c <I2C_MasterRequestRead+0x194>)
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 f8b9 	bl	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e054      	b.n	8003354 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032aa:	897b      	ldrh	r3, [r7, #10]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4929      	ldr	r1, [pc, #164]	; (8003360 <I2C_MasterRequestRead+0x198>)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f8a9 	bl	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e044      	b.n	8003354 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f831 	bl	8003364 <I2C_WaitOnFlagUntilTimeout>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00d      	beq.n	8003324 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003316:	d103      	bne.n	8003320 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800331e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e017      	b.n	8003354 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003324:	897b      	ldrh	r3, [r7, #10]
 8003326:	11db      	asrs	r3, r3, #7
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 0306 	and.w	r3, r3, #6
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f063 030e 	orn	r3, r3, #14
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4907      	ldr	r1, [pc, #28]	; (8003360 <I2C_MasterRequestRead+0x198>)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f865 	bl	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3718      	adds	r7, #24
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	00010008 	.word	0x00010008
 8003360:	00010002 	.word	0x00010002

08003364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	4613      	mov	r3, r2
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003374:	e025      	b.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337c:	d021      	beq.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7fe ff75 	bl	800226c <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d302      	bcc.n	8003394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d116      	bne.n	80033c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f043 0220 	orr.w	r2, r3, #32
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e023      	b.n	800340a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d10d      	bne.n	80033e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	43da      	mvns	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	4013      	ands	r3, r2
 80033d8:	b29b      	uxth	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	e00c      	b.n	8003402 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	43da      	mvns	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4013      	ands	r3, r2
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	429a      	cmp	r2, r3
 8003406:	d0b6      	beq.n	8003376 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003420:	e051      	b.n	80034c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003430:	d123      	bne.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003440:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800344a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f043 0204 	orr.w	r2, r3, #4
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e046      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d021      	beq.n	80034c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003482:	f7fe fef3 	bl	800226c <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	429a      	cmp	r2, r3
 8003490:	d302      	bcc.n	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d116      	bne.n	80034c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f043 0220 	orr.w	r2, r3, #32
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e020      	b.n	8003508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	0c1b      	lsrs	r3, r3, #16
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d10c      	bne.n	80034ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	43da      	mvns	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	4013      	ands	r3, r2
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bf14      	ite	ne
 80034e2:	2301      	movne	r3, #1
 80034e4:	2300      	moveq	r3, #0
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e00b      	b.n	8003502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	43da      	mvns	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4013      	ands	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d18d      	bne.n	8003422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800351c:	e02d      	b.n	800357a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f8ce 	bl	80036c0 <I2C_IsAcknowledgeFailed>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e02d      	b.n	800358a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d021      	beq.n	800357a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7fe fe99 	bl	800226c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d116      	bne.n	800357a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e007      	b.n	800358a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	2b80      	cmp	r3, #128	; 0x80
 8003586:	d1ca      	bne.n	800351e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800359e:	e02d      	b.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f88d 	bl	80036c0 <I2C_IsAcknowledgeFailed>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e02d      	b.n	800360c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b6:	d021      	beq.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b8:	f7fe fe58 	bl	800226c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d302      	bcc.n	80035ce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d116      	bne.n	80035fc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e007      	b.n	800360c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	f003 0304 	and.w	r3, r3, #4
 8003606:	2b04      	cmp	r3, #4
 8003608:	d1ca      	bne.n	80035a0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003620:	e042      	b.n	80036a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b10      	cmp	r3, #16
 800362e:	d119      	bne.n	8003664 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0210 	mvn.w	r2, #16
 8003638:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e029      	b.n	80036b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003664:	f7fe fe02 	bl	800226c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	429a      	cmp	r2, r3
 8003672:	d302      	bcc.n	800367a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d116      	bne.n	80036a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e007      	b.n	80036b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b40      	cmp	r3, #64	; 0x40
 80036b4:	d1b5      	bne.n	8003622 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d6:	d11b      	bne.n	8003710 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	f043 0204 	orr.w	r2, r3, #4
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0cc      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b68      	ldr	r3, [pc, #416]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d90c      	bls.n	800375c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b65      	ldr	r3, [pc, #404]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b63      	ldr	r3, [pc, #396]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0b8      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003774:	4b59      	ldr	r3, [pc, #356]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4a58      	ldr	r2, [pc, #352]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800377e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800378c:	4b53      	ldr	r3, [pc, #332]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a52      	ldr	r2, [pc, #328]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003798:	4b50      	ldr	r3, [pc, #320]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	494d      	ldr	r1, [pc, #308]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d044      	beq.n	8003840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	4b47      	ldr	r3, [pc, #284]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d119      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e07f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d003      	beq.n	80037de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037de:	4b3f      	ldr	r3, [pc, #252]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e06f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ee:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e067      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037fe:	4b37      	ldr	r3, [pc, #220]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f023 0203 	bic.w	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4934      	ldr	r1, [pc, #208]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003810:	f7fe fd2c 	bl	800226c <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	e00a      	b.n	800382e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003818:	f7fe fd28 	bl	800226c <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e04f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382e:	4b2b      	ldr	r3, [pc, #172]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 020c 	and.w	r2, r3, #12
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	429a      	cmp	r2, r3
 800383e:	d1eb      	bne.n	8003818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003840:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d20c      	bcs.n	8003868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384e:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	b2d2      	uxtb	r2, r2
 8003854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b20      	ldr	r3, [pc, #128]	; (80038d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e032      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4916      	ldr	r1, [pc, #88]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003892:	4b12      	ldr	r3, [pc, #72]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	490e      	ldr	r1, [pc, #56]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038a6:	f000 fb7f 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 80038aa:	4602      	mov	r2, r0
 80038ac:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	490a      	ldr	r1, [pc, #40]	; (80038e0 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	5ccb      	ldrb	r3, [r1, r3]
 80038ba:	fa22 f303 	lsr.w	r3, r2, r3
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x1c8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fc8c 	bl	80021e4 <HAL_InitTick>

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023c00 	.word	0x40023c00
 80038dc:	40023800 	.word	0x40023800
 80038e0:	08008224 	.word	0x08008224
 80038e4:	20000000 	.word	0x20000000
 80038e8:	20000004 	.word	0x20000004

080038ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000000 	.word	0x20000000

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003908:	f7ff fff0 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b05      	ldr	r3, [pc, #20]	; (8003924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0a9b      	lsrs	r3, r3, #10
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4903      	ldr	r1, [pc, #12]	; (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40023800 	.word	0x40023800
 8003928:	08008234 	.word	0x08008234

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003930:	f7ff ffdc 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0b5b      	lsrs	r3, r3, #13
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4903      	ldr	r1, [pc, #12]	; (8003950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40023800 	.word	0x40023800
 8003950:	08008234 	.word	0x08008234

08003954 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08c      	sub	sp, #48	; 0x30
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d010      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800398c:	4b6f      	ldr	r3, [pc, #444]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800398e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003992:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	496c      	ldr	r1, [pc, #432]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80039aa:	2301      	movs	r3, #1
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d010      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80039ba:	4b64      	ldr	r3, [pc, #400]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	4960      	ldr	r1, [pc, #384]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80039d8:	2301      	movs	r3, #1
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d017      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039e8:	4b58      	ldr	r3, [pc, #352]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	4955      	ldr	r1, [pc, #340]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a06:	d101      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003a14:	2301      	movs	r3, #1
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d017      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a24:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a32:	4946      	ldr	r1, [pc, #280]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a42:	d101      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003a44:	2301      	movs	r3, #1
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003a50:	2301      	movs	r3, #1
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 808a 	beq.w	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a62:	2300      	movs	r3, #0
 8003a64:	60bb      	str	r3, [r7, #8]
 8003a66:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	4a38      	ldr	r2, [pc, #224]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a70:	6413      	str	r3, [r2, #64]	; 0x40
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003a7e:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a33      	ldr	r2, [pc, #204]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a8a:	f7fe fbef 	bl	800226c <HAL_GetTick>
 8003a8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7fe fbeb 	bl	800226c <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e278      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003aa4:	4b2a      	ldr	r3, [pc, #168]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ab0:	4b26      	ldr	r3, [pc, #152]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02f      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d028      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ace:	4b1f      	ldr	r3, [pc, #124]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ad8:	4b1e      	ldr	r3, [pc, #120]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ade:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ae4:	4a19      	ldr	r2, [pc, #100]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003aea:	4b18      	ldr	r3, [pc, #96]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d114      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003af6:	f7fe fbb9 	bl	800226c <HAL_GetTick>
 8003afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fe fbb5 	bl	800226c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e240      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b14:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ee      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b2c:	d114      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003b2e:	4b07      	ldr	r3, [pc, #28]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b42:	4902      	ldr	r1, [pc, #8]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	608b      	str	r3, [r1, #8]
 8003b48:	e00c      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40007000 	.word	0x40007000
 8003b54:	42470e40 	.word	0x42470e40
 8003b58:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	4a49      	ldr	r2, [pc, #292]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b5e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b62:	6093      	str	r3, [r2, #8]
 8003b64:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b70:	4944      	ldr	r1, [pc, #272]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d004      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003b88:	4b3f      	ldr	r3, [pc, #252]	; (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003b8a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003b98:	4b3a      	ldr	r3, [pc, #232]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	4937      	ldr	r1, [pc, #220]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bba:	4b32      	ldr	r3, [pc, #200]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc8:	492e      	ldr	r1, [pc, #184]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d011      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003bdc:	4b29      	ldr	r3, [pc, #164]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	4926      	ldr	r1, [pc, #152]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	491a      	ldr	r1, [pc, #104]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d011      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003c2e:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c34:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c3c:	4911      	ldr	r1, [pc, #68]	; (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d005      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c60:	f040 80ff 	bne.w	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c6a:	f7fe faff 	bl	800226c <HAL_GetTick>
 8003c6e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c70:	e00e      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c72:	f7fe fafb 	bl	800226c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d907      	bls.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e188      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003c84:	40023800 	.word	0x40023800
 8003c88:	424711e0 	.word	0x424711e0
 8003c8c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c90:	4b7e      	ldr	r3, [pc, #504]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1ea      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d009      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d028      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d124      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003cc4:	4b71      	ldr	r3, [pc, #452]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003cd6:	4b6d      	ldr	r3, [pc, #436]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cdc:	0e1b      	lsrs	r3, r3, #24
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	019b      	lsls	r3, r3, #6
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	041b      	lsls	r3, r3, #16
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	061b      	lsls	r3, r3, #24
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	071b      	lsls	r3, r3, #28
 8003d06:	4961      	ldr	r1, [pc, #388]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d22:	d00a      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d035      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d38:	d130      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003d3a:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d40:	0c1b      	lsrs	r3, r3, #16
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	3301      	adds	r3, #1
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d4c:	4b4f      	ldr	r3, [pc, #316]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d52:	0f1b      	lsrs	r3, r3, #28
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	019b      	lsls	r3, r3, #6
 8003d64:	431a      	orrs	r2, r3
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	061b      	lsls	r3, r3, #24
 8003d76:	431a      	orrs	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	071b      	lsls	r3, r3, #28
 8003d7c:	4943      	ldr	r1, [pc, #268]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d84:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d8a:	f023 021f 	bic.w	r2, r3, #31
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	3b01      	subs	r3, #1
 8003d94:	493d      	ldr	r1, [pc, #244]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d029      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003db0:	d124      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003db2:	4b36      	ldr	r3, [pc, #216]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dc4:	4b31      	ldr	r3, [pc, #196]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dca:	0f1b      	lsrs	r3, r3, #28
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	019b      	lsls	r3, r3, #6
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	3b01      	subs	r3, #1
 8003de6:	041b      	lsls	r3, r3, #16
 8003de8:	431a      	orrs	r2, r3
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	061b      	lsls	r3, r3, #24
 8003dee:	431a      	orrs	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	071b      	lsls	r3, r3, #28
 8003df4:	4925      	ldr	r1, [pc, #148]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d016      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	019b      	lsls	r3, r3, #6
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	085b      	lsrs	r3, r3, #1
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	061b      	lsls	r3, r3, #24
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	071b      	lsls	r3, r3, #28
 8003e2e:	4917      	ldr	r1, [pc, #92]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e3c:	f7fe fa16 	bl	800226c <HAL_GetTick>
 8003e40:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e44:	f7fe fa12 	bl	800226c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e09f      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e56:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	f040 8095 	bne.w	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e70:	f7fe f9fc 	bl	800226c <HAL_GetTick>
 8003e74:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e76:	e00f      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e78:	f7fe f9f8 	bl	800226c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d908      	bls.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e085      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003e8a:	bf00      	nop
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	42470068 	.word	0x42470068
 8003e94:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e98:	4b41      	ldr	r3, [pc, #260]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea4:	d0e8      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d003      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d009      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d02b      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d127      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003ece:	4b34      	ldr	r3, [pc, #208]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	3301      	adds	r3, #1
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699a      	ldr	r2, [r3, #24]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	019b      	lsls	r3, r3, #6
 8003eea:	431a      	orrs	r2, r3
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	041b      	lsls	r3, r3, #16
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	061b      	lsls	r3, r3, #24
 8003efc:	4928      	ldr	r1, [pc, #160]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f04:	4b26      	ldr	r3, [pc, #152]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f0a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	3b01      	subs	r3, #1
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	4922      	ldr	r1, [pc, #136]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01d      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f32:	d118      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	0e1b      	lsrs	r3, r3, #24
 8003f3c:	f003 030f 	and.w	r3, r3, #15
 8003f40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	019b      	lsls	r3, r3, #6
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	085b      	lsrs	r3, r3, #1
 8003f54:	3b01      	subs	r3, #1
 8003f56:	041b      	lsls	r3, r3, #16
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	061b      	lsls	r3, r3, #24
 8003f5e:	4910      	ldr	r1, [pc, #64]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f66:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f6c:	f7fe f97e 	bl	800226c <HAL_GetTick>
 8003f70:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f74:	f7fe f97a 	bl	800226c <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e007      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f86:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f92:	d1ef      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3730      	adds	r7, #48	; 0x30
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	42470070 	.word	0x42470070

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fac:	b088      	sub	sp, #32
 8003fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc4:	4bce      	ldr	r3, [pc, #824]	; (8004300 <HAL_RCC_GetSysClockFreq+0x358>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 030c 	and.w	r3, r3, #12
 8003fcc:	2b0c      	cmp	r3, #12
 8003fce:	f200 818d 	bhi.w	80042ec <HAL_RCC_GetSysClockFreq+0x344>
 8003fd2:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <HAL_RCC_GetSysClockFreq+0x30>)
 8003fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd8:	0800400d 	.word	0x0800400d
 8003fdc:	080042ed 	.word	0x080042ed
 8003fe0:	080042ed 	.word	0x080042ed
 8003fe4:	080042ed 	.word	0x080042ed
 8003fe8:	08004013 	.word	0x08004013
 8003fec:	080042ed 	.word	0x080042ed
 8003ff0:	080042ed 	.word	0x080042ed
 8003ff4:	080042ed 	.word	0x080042ed
 8003ff8:	08004019 	.word	0x08004019
 8003ffc:	080042ed 	.word	0x080042ed
 8004000:	080042ed 	.word	0x080042ed
 8004004:	080042ed 	.word	0x080042ed
 8004008:	0800418d 	.word	0x0800418d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800400c:	4bbd      	ldr	r3, [pc, #756]	; (8004304 <HAL_RCC_GetSysClockFreq+0x35c>)
 800400e:	61bb      	str	r3, [r7, #24]
       break;
 8004010:	e16f      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004012:	4bbd      	ldr	r3, [pc, #756]	; (8004308 <HAL_RCC_GetSysClockFreq+0x360>)
 8004014:	61bb      	str	r3, [r7, #24]
      break;
 8004016:	e16c      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004018:	4bb9      	ldr	r3, [pc, #740]	; (8004300 <HAL_RCC_GetSysClockFreq+0x358>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004020:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004022:	4bb7      	ldr	r3, [pc, #732]	; (8004300 <HAL_RCC_GetSysClockFreq+0x358>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d053      	beq.n	80040d6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800402e:	4bb4      	ldr	r3, [pc, #720]	; (8004300 <HAL_RCC_GetSysClockFreq+0x358>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	099b      	lsrs	r3, r3, #6
 8004034:	461a      	mov	r2, r3
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	ea02 0400 	and.w	r4, r2, r0
 8004046:	603c      	str	r4, [r7, #0]
 8004048:	400b      	ands	r3, r1
 800404a:	607b      	str	r3, [r7, #4]
 800404c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004050:	4620      	mov	r0, r4
 8004052:	4629      	mov	r1, r5
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	f04f 0300 	mov.w	r3, #0
 800405c:	014b      	lsls	r3, r1, #5
 800405e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004062:	0142      	lsls	r2, r0, #5
 8004064:	4610      	mov	r0, r2
 8004066:	4619      	mov	r1, r3
 8004068:	4623      	mov	r3, r4
 800406a:	1ac0      	subs	r0, r0, r3
 800406c:	462b      	mov	r3, r5
 800406e:	eb61 0103 	sbc.w	r1, r1, r3
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	018b      	lsls	r3, r1, #6
 800407c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004080:	0182      	lsls	r2, r0, #6
 8004082:	1a12      	subs	r2, r2, r0
 8004084:	eb63 0301 	sbc.w	r3, r3, r1
 8004088:	f04f 0000 	mov.w	r0, #0
 800408c:	f04f 0100 	mov.w	r1, #0
 8004090:	00d9      	lsls	r1, r3, #3
 8004092:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004096:	00d0      	lsls	r0, r2, #3
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4621      	mov	r1, r4
 800409e:	1852      	adds	r2, r2, r1
 80040a0:	4629      	mov	r1, r5
 80040a2:	eb43 0101 	adc.w	r1, r3, r1
 80040a6:	460b      	mov	r3, r1
 80040a8:	f04f 0000 	mov.w	r0, #0
 80040ac:	f04f 0100 	mov.w	r1, #0
 80040b0:	0259      	lsls	r1, r3, #9
 80040b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80040b6:	0250      	lsls	r0, r2, #9
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4610      	mov	r0, r2
 80040be:	4619      	mov	r1, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	461a      	mov	r2, r3
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	f7fc fdde 	bl	8000c88 <__aeabi_uldivmod>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4613      	mov	r3, r2
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	e04c      	b.n	8004170 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d6:	4b8a      	ldr	r3, [pc, #552]	; (8004300 <HAL_RCC_GetSysClockFreq+0x358>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	099b      	lsrs	r3, r3, #6
 80040dc:	461a      	mov	r2, r3
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040e6:	f04f 0100 	mov.w	r1, #0
 80040ea:	ea02 0a00 	and.w	sl, r2, r0
 80040ee:	ea03 0b01 	and.w	fp, r3, r1
 80040f2:	4650      	mov	r0, sl
 80040f4:	4659      	mov	r1, fp
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	014b      	lsls	r3, r1, #5
 8004100:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004104:	0142      	lsls	r2, r0, #5
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	ebb0 000a 	subs.w	r0, r0, sl
 800410e:	eb61 010b 	sbc.w	r1, r1, fp
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	018b      	lsls	r3, r1, #6
 800411c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004120:	0182      	lsls	r2, r0, #6
 8004122:	1a12      	subs	r2, r2, r0
 8004124:	eb63 0301 	sbc.w	r3, r3, r1
 8004128:	f04f 0000 	mov.w	r0, #0
 800412c:	f04f 0100 	mov.w	r1, #0
 8004130:	00d9      	lsls	r1, r3, #3
 8004132:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004136:	00d0      	lsls	r0, r2, #3
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	eb12 020a 	adds.w	r2, r2, sl
 8004140:	eb43 030b 	adc.w	r3, r3, fp
 8004144:	f04f 0000 	mov.w	r0, #0
 8004148:	f04f 0100 	mov.w	r1, #0
 800414c:	0299      	lsls	r1, r3, #10
 800414e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004152:	0290      	lsls	r0, r2, #10
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	461a      	mov	r2, r3
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	f7fc fd90 	bl	8000c88 <__aeabi_uldivmod>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4613      	mov	r3, r2
 800416e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004170:	4b63      	ldr	r3, [pc, #396]	; (8004300 <HAL_RCC_GetSysClockFreq+0x358>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	3301      	adds	r3, #1
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004180:	69fa      	ldr	r2, [r7, #28]
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	61bb      	str	r3, [r7, #24]
      break;
 800418a:	e0b2      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800418c:	4b5c      	ldr	r3, [pc, #368]	; (8004300 <HAL_RCC_GetSysClockFreq+0x358>)
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004194:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004196:	4b5a      	ldr	r3, [pc, #360]	; (8004300 <HAL_RCC_GetSysClockFreq+0x358>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d04d      	beq.n	800423e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a2:	4b57      	ldr	r3, [pc, #348]	; (8004300 <HAL_RCC_GetSysClockFreq+0x358>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	099b      	lsrs	r3, r3, #6
 80041a8:	461a      	mov	r2, r3
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041b2:	f04f 0100 	mov.w	r1, #0
 80041b6:	ea02 0800 	and.w	r8, r2, r0
 80041ba:	ea03 0901 	and.w	r9, r3, r1
 80041be:	4640      	mov	r0, r8
 80041c0:	4649      	mov	r1, r9
 80041c2:	f04f 0200 	mov.w	r2, #0
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	014b      	lsls	r3, r1, #5
 80041cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041d0:	0142      	lsls	r2, r0, #5
 80041d2:	4610      	mov	r0, r2
 80041d4:	4619      	mov	r1, r3
 80041d6:	ebb0 0008 	subs.w	r0, r0, r8
 80041da:	eb61 0109 	sbc.w	r1, r1, r9
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	018b      	lsls	r3, r1, #6
 80041e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041ec:	0182      	lsls	r2, r0, #6
 80041ee:	1a12      	subs	r2, r2, r0
 80041f0:	eb63 0301 	sbc.w	r3, r3, r1
 80041f4:	f04f 0000 	mov.w	r0, #0
 80041f8:	f04f 0100 	mov.w	r1, #0
 80041fc:	00d9      	lsls	r1, r3, #3
 80041fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004202:	00d0      	lsls	r0, r2, #3
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	eb12 0208 	adds.w	r2, r2, r8
 800420c:	eb43 0309 	adc.w	r3, r3, r9
 8004210:	f04f 0000 	mov.w	r0, #0
 8004214:	f04f 0100 	mov.w	r1, #0
 8004218:	0259      	lsls	r1, r3, #9
 800421a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800421e:	0250      	lsls	r0, r2, #9
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	461a      	mov	r2, r3
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	f7fc fd2a 	bl	8000c88 <__aeabi_uldivmod>
 8004234:	4602      	mov	r2, r0
 8004236:	460b      	mov	r3, r1
 8004238:	4613      	mov	r3, r2
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	e04a      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800423e:	4b30      	ldr	r3, [pc, #192]	; (8004300 <HAL_RCC_GetSysClockFreq+0x358>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	099b      	lsrs	r3, r3, #6
 8004244:	461a      	mov	r2, r3
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800424e:	f04f 0100 	mov.w	r1, #0
 8004252:	ea02 0400 	and.w	r4, r2, r0
 8004256:	ea03 0501 	and.w	r5, r3, r1
 800425a:	4620      	mov	r0, r4
 800425c:	4629      	mov	r1, r5
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	014b      	lsls	r3, r1, #5
 8004268:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800426c:	0142      	lsls	r2, r0, #5
 800426e:	4610      	mov	r0, r2
 8004270:	4619      	mov	r1, r3
 8004272:	1b00      	subs	r0, r0, r4
 8004274:	eb61 0105 	sbc.w	r1, r1, r5
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	018b      	lsls	r3, r1, #6
 8004282:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004286:	0182      	lsls	r2, r0, #6
 8004288:	1a12      	subs	r2, r2, r0
 800428a:	eb63 0301 	sbc.w	r3, r3, r1
 800428e:	f04f 0000 	mov.w	r0, #0
 8004292:	f04f 0100 	mov.w	r1, #0
 8004296:	00d9      	lsls	r1, r3, #3
 8004298:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800429c:	00d0      	lsls	r0, r2, #3
 800429e:	4602      	mov	r2, r0
 80042a0:	460b      	mov	r3, r1
 80042a2:	1912      	adds	r2, r2, r4
 80042a4:	eb45 0303 	adc.w	r3, r5, r3
 80042a8:	f04f 0000 	mov.w	r0, #0
 80042ac:	f04f 0100 	mov.w	r1, #0
 80042b0:	0299      	lsls	r1, r3, #10
 80042b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042b6:	0290      	lsls	r0, r2, #10
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	461a      	mov	r2, r3
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	f7fc fcde 	bl	8000c88 <__aeabi_uldivmod>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4613      	mov	r3, r2
 80042d2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <HAL_RCC_GetSysClockFreq+0x358>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	0f1b      	lsrs	r3, r3, #28
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e8:	61bb      	str	r3, [r7, #24]
      break;
 80042ea:	e002      	b.n	80042f2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <HAL_RCC_GetSysClockFreq+0x35c>)
 80042ee:	61bb      	str	r3, [r7, #24]
      break;
 80042f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042f2:	69bb      	ldr	r3, [r7, #24]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3720      	adds	r7, #32
 80042f8:	46bd      	mov	sp, r7
 80042fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800
 8004304:	00f42400 	.word	0x00f42400
 8004308:	007a1200 	.word	0x007a1200

0800430c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e28d      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 8083 	beq.w	8004432 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800432c:	4b94      	ldr	r3, [pc, #592]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f003 030c 	and.w	r3, r3, #12
 8004334:	2b04      	cmp	r3, #4
 8004336:	d019      	beq.n	800436c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004338:	4b91      	ldr	r3, [pc, #580]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004340:	2b08      	cmp	r3, #8
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004344:	4b8e      	ldr	r3, [pc, #568]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004350:	d00c      	beq.n	800436c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004352:	4b8b      	ldr	r3, [pc, #556]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d112      	bne.n	8004384 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435e:	4b88      	ldr	r3, [pc, #544]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800436a:	d10b      	bne.n	8004384 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800436c:	4b84      	ldr	r3, [pc, #528]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d05b      	beq.n	8004430 <HAL_RCC_OscConfig+0x124>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d157      	bne.n	8004430 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e25a      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800438c:	d106      	bne.n	800439c <HAL_RCC_OscConfig+0x90>
 800438e:	4b7c      	ldr	r3, [pc, #496]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a7b      	ldr	r2, [pc, #492]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e01d      	b.n	80043d8 <HAL_RCC_OscConfig+0xcc>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCC_OscConfig+0xb4>
 80043a6:	4b76      	ldr	r3, [pc, #472]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a75      	ldr	r2, [pc, #468]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 80043ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	4b73      	ldr	r3, [pc, #460]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a72      	ldr	r2, [pc, #456]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e00b      	b.n	80043d8 <HAL_RCC_OscConfig+0xcc>
 80043c0:	4b6f      	ldr	r3, [pc, #444]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a6e      	ldr	r2, [pc, #440]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	4b6c      	ldr	r3, [pc, #432]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a6b      	ldr	r2, [pc, #428]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 80043d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d013      	beq.n	8004408 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fd ff44 	bl	800226c <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fd ff40 	bl	800226c <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e21f      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	4b61      	ldr	r3, [pc, #388]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0xdc>
 8004406:	e014      	b.n	8004432 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fd ff30 	bl	800226c <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004410:	f7fd ff2c 	bl	800226c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	; 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e20b      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004422:	4b57      	ldr	r3, [pc, #348]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x104>
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d06f      	beq.n	800451e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800443e:	4b50      	ldr	r3, [pc, #320]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b00      	cmp	r3, #0
 8004448:	d017      	beq.n	800447a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800444a:	4b4d      	ldr	r3, [pc, #308]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004452:	2b08      	cmp	r3, #8
 8004454:	d105      	bne.n	8004462 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004456:	4b4a      	ldr	r3, [pc, #296]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004462:	4b47      	ldr	r3, [pc, #284]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800446a:	2b0c      	cmp	r3, #12
 800446c:	d11c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800446e:	4b44      	ldr	r3, [pc, #272]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d116      	bne.n	80044a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	4b41      	ldr	r3, [pc, #260]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <HAL_RCC_OscConfig+0x186>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d001      	beq.n	8004492 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e1d3      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004492:	4b3b      	ldr	r3, [pc, #236]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	4937      	ldr	r1, [pc, #220]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a6:	e03a      	b.n	800451e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d020      	beq.n	80044f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b0:	4b34      	ldr	r3, [pc, #208]	; (8004584 <HAL_RCC_OscConfig+0x278>)
 80044b2:	2201      	movs	r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b6:	f7fd fed9 	bl	800226c <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044be:	f7fd fed5 	bl	800226c <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e1b4      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d0:	4b2b      	ldr	r3, [pc, #172]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0f0      	beq.n	80044be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044dc:	4b28      	ldr	r3, [pc, #160]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	4925      	ldr	r1, [pc, #148]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	600b      	str	r3, [r1, #0]
 80044f0:	e015      	b.n	800451e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f2:	4b24      	ldr	r3, [pc, #144]	; (8004584 <HAL_RCC_OscConfig+0x278>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fd feb8 	bl	800226c <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004500:	f7fd feb4 	bl	800226c <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e193      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004512:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d036      	beq.n	8004598 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d016      	beq.n	8004560 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004532:	4b15      	ldr	r3, [pc, #84]	; (8004588 <HAL_RCC_OscConfig+0x27c>)
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004538:	f7fd fe98 	bl	800226c <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004540:	f7fd fe94 	bl	800226c <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e173      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004552:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <HAL_RCC_OscConfig+0x274>)
 8004554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0x234>
 800455e:	e01b      	b.n	8004598 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <HAL_RCC_OscConfig+0x27c>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004566:	f7fd fe81 	bl	800226c <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800456c:	e00e      	b.n	800458c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456e:	f7fd fe7d 	bl	800226c <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d907      	bls.n	800458c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e15c      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
 8004580:	40023800 	.word	0x40023800
 8004584:	42470000 	.word	0x42470000
 8004588:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800458c:	4b8a      	ldr	r3, [pc, #552]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 800458e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1ea      	bne.n	800456e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 8097 	beq.w	80046d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045a6:	2300      	movs	r3, #0
 80045a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045aa:	4b83      	ldr	r3, [pc, #524]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10f      	bne.n	80045d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b6:	2300      	movs	r3, #0
 80045b8:	60bb      	str	r3, [r7, #8]
 80045ba:	4b7f      	ldr	r3, [pc, #508]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	4a7e      	ldr	r2, [pc, #504]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80045c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c4:	6413      	str	r3, [r2, #64]	; 0x40
 80045c6:	4b7c      	ldr	r3, [pc, #496]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d2:	2301      	movs	r3, #1
 80045d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d6:	4b79      	ldr	r3, [pc, #484]	; (80047bc <HAL_RCC_OscConfig+0x4b0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d118      	bne.n	8004614 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045e2:	4b76      	ldr	r3, [pc, #472]	; (80047bc <HAL_RCC_OscConfig+0x4b0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a75      	ldr	r2, [pc, #468]	; (80047bc <HAL_RCC_OscConfig+0x4b0>)
 80045e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045ee:	f7fd fe3d 	bl	800226c <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f6:	f7fd fe39 	bl	800226c <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e118      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004608:	4b6c      	ldr	r3, [pc, #432]	; (80047bc <HAL_RCC_OscConfig+0x4b0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d106      	bne.n	800462a <HAL_RCC_OscConfig+0x31e>
 800461c:	4b66      	ldr	r3, [pc, #408]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004620:	4a65      	ldr	r2, [pc, #404]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	6713      	str	r3, [r2, #112]	; 0x70
 8004628:	e01c      	b.n	8004664 <HAL_RCC_OscConfig+0x358>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b05      	cmp	r3, #5
 8004630:	d10c      	bne.n	800464c <HAL_RCC_OscConfig+0x340>
 8004632:	4b61      	ldr	r3, [pc, #388]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	4a60      	ldr	r2, [pc, #384]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004638:	f043 0304 	orr.w	r3, r3, #4
 800463c:	6713      	str	r3, [r2, #112]	; 0x70
 800463e:	4b5e      	ldr	r3, [pc, #376]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004642:	4a5d      	ldr	r2, [pc, #372]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004644:	f043 0301 	orr.w	r3, r3, #1
 8004648:	6713      	str	r3, [r2, #112]	; 0x70
 800464a:	e00b      	b.n	8004664 <HAL_RCC_OscConfig+0x358>
 800464c:	4b5a      	ldr	r3, [pc, #360]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	4a59      	ldr	r2, [pc, #356]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004652:	f023 0301 	bic.w	r3, r3, #1
 8004656:	6713      	str	r3, [r2, #112]	; 0x70
 8004658:	4b57      	ldr	r3, [pc, #348]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 800465a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465c:	4a56      	ldr	r2, [pc, #344]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 800465e:	f023 0304 	bic.w	r3, r3, #4
 8004662:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d015      	beq.n	8004698 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fd fdfe 	bl	800226c <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004672:	e00a      	b.n	800468a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004674:	f7fd fdfa 	bl	800226c <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e0d7      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800468a:	4b4b      	ldr	r3, [pc, #300]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0ee      	beq.n	8004674 <HAL_RCC_OscConfig+0x368>
 8004696:	e014      	b.n	80046c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7fd fde8 	bl	800226c <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a0:	f7fd fde4 	bl	800226c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e0c1      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046b6:	4b40      	ldr	r3, [pc, #256]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ee      	bne.n	80046a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d105      	bne.n	80046d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046c8:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	4a3a      	ldr	r2, [pc, #232]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80046ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 80ad 	beq.w	8004838 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046de:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d060      	beq.n	80047ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d145      	bne.n	800477e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b33      	ldr	r3, [pc, #204]	; (80047c0 <HAL_RCC_OscConfig+0x4b4>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fd fdb8 	bl	800226c <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004700:	f7fd fdb4 	bl	800226c <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e093      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	4b29      	ldr	r3, [pc, #164]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69da      	ldr	r2, [r3, #28]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	085b      	lsrs	r3, r3, #1
 8004736:	3b01      	subs	r3, #1
 8004738:	041b      	lsls	r3, r3, #16
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	061b      	lsls	r3, r3, #24
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	071b      	lsls	r3, r3, #28
 800474a:	491b      	ldr	r1, [pc, #108]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 800474c:	4313      	orrs	r3, r2
 800474e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004750:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <HAL_RCC_OscConfig+0x4b4>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004756:	f7fd fd89 	bl	800226c <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475e:	f7fd fd85 	bl	800226c <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e064      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004770:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCC_OscConfig+0x452>
 800477c:	e05c      	b.n	8004838 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <HAL_RCC_OscConfig+0x4b4>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fd fd72 	bl	800226c <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800478c:	f7fd fd6e 	bl	800226c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e04d      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800479e:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <HAL_RCC_OscConfig+0x4ac>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x480>
 80047aa:	e045      	b.n	8004838 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d107      	bne.n	80047c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e040      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40007000 	.word	0x40007000
 80047c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047c4:	4b1f      	ldr	r3, [pc, #124]	; (8004844 <HAL_RCC_OscConfig+0x538>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d030      	beq.n	8004834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d129      	bne.n	8004834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d122      	bne.n	8004834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047f4:	4013      	ands	r3, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d119      	bne.n	8004834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	085b      	lsrs	r3, r3, #1
 800480c:	3b01      	subs	r3, #1
 800480e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004810:	429a      	cmp	r2, r3
 8004812:	d10f      	bne.n	8004834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004820:	429a      	cmp	r2, r3
 8004822:	d107      	bne.n	8004834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800

08004848 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e083      	b.n	8004962 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	7f5b      	ldrb	r3, [r3, #29]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fc fe9a 	bl	80015a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	22ca      	movs	r2, #202	; 0xca
 800487c:	625a      	str	r2, [r3, #36]	; 0x24
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2253      	movs	r2, #83	; 0x53
 8004884:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f9fb 	bl	8004c82 <RTC_EnterInitMode>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	22ff      	movs	r2, #255	; 0xff
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2204      	movs	r2, #4
 800489e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e05e      	b.n	8004962 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6812      	ldr	r2, [r2, #0]
 80048ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80048b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6899      	ldr	r1, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	431a      	orrs	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68d2      	ldr	r2, [r2, #12]
 80048de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6919      	ldr	r1, [r3, #16]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	041a      	lsls	r2, r3, #16
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004902:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10e      	bne.n	8004930 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f98d 	bl	8004c32 <HAL_RTC_WaitForSynchro>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d008      	beq.n	8004930 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	22ff      	movs	r2, #255	; 0xff
 8004924:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2204      	movs	r2, #4
 800492a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e018      	b.n	8004962 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800493e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	22ff      	movs	r2, #255	; 0xff
 8004958:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004960:	2300      	movs	r3, #0
  }
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}

0800496a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800496a:	b590      	push	{r4, r7, lr}
 800496c:	b087      	sub	sp, #28
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	7f1b      	ldrb	r3, [r3, #28]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_RTC_SetTime+0x1c>
 8004982:	2302      	movs	r3, #2
 8004984:	e0aa      	b.n	8004adc <HAL_RTC_SetTime+0x172>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2201      	movs	r2, #1
 800498a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2202      	movs	r2, #2
 8004990:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d126      	bne.n	80049e6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d102      	bne.n	80049ac <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2200      	movs	r2, #0
 80049aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 f992 	bl	8004cda <RTC_ByteToBcd2>
 80049b6:	4603      	mov	r3, r0
 80049b8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	785b      	ldrb	r3, [r3, #1]
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 f98b 	bl	8004cda <RTC_ByteToBcd2>
 80049c4:	4603      	mov	r3, r0
 80049c6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80049c8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	789b      	ldrb	r3, [r3, #2]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 f983 	bl	8004cda <RTC_ByteToBcd2>
 80049d4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80049d6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	78db      	ldrb	r3, [r3, #3]
 80049de:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	e018      	b.n	8004a18 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2200      	movs	r2, #0
 80049f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	785b      	ldrb	r3, [r3, #1]
 8004a04:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a06:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004a0c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	78db      	ldrb	r3, [r3, #3]
 8004a12:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	22ca      	movs	r2, #202	; 0xca
 8004a1e:	625a      	str	r2, [r3, #36]	; 0x24
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2253      	movs	r2, #83	; 0x53
 8004a26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f92a 	bl	8004c82 <RTC_EnterInitMode>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00b      	beq.n	8004a4c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	22ff      	movs	r2, #255	; 0xff
 8004a3a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2204      	movs	r2, #4
 8004a40:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e047      	b.n	8004adc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004a56:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004a5a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a6a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6899      	ldr	r1, [r3, #8]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a92:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d111      	bne.n	8004ac6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 f8c5 	bl	8004c32 <HAL_RTC_WaitForSynchro>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00b      	beq.n	8004ac6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	22ff      	movs	r2, #255	; 0xff
 8004ab4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2204      	movs	r2, #4
 8004aba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e00a      	b.n	8004adc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	22ff      	movs	r2, #255	; 0xff
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004ada:	2300      	movs	r3, #0
  }
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd90      	pop	{r4, r7, pc}

08004ae4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ae4:	b590      	push	{r4, r7, lr}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	7f1b      	ldrb	r3, [r3, #28]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_RTC_SetDate+0x1c>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e094      	b.n	8004c2a <HAL_RTC_SetDate+0x146>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2202      	movs	r2, #2
 8004b0a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10e      	bne.n	8004b30 <HAL_RTC_SetDate+0x4c>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	785b      	ldrb	r3, [r3, #1]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d008      	beq.n	8004b30 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	785b      	ldrb	r3, [r3, #1]
 8004b22:	f023 0310 	bic.w	r3, r3, #16
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	330a      	adds	r3, #10
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d11c      	bne.n	8004b70 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	78db      	ldrb	r3, [r3, #3]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 f8cd 	bl	8004cda <RTC_ByteToBcd2>
 8004b40:	4603      	mov	r3, r0
 8004b42:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	785b      	ldrb	r3, [r3, #1]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 f8c6 	bl	8004cda <RTC_ByteToBcd2>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b52:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	789b      	ldrb	r3, [r3, #2]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 f8be 	bl	8004cda <RTC_ByteToBcd2>
 8004b5e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004b60:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	e00e      	b.n	8004b8e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	78db      	ldrb	r3, [r3, #3]
 8004b74:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	785b      	ldrb	r3, [r3, #1]
 8004b7a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b7c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004b82:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	22ca      	movs	r2, #202	; 0xca
 8004b94:	625a      	str	r2, [r3, #36]	; 0x24
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2253      	movs	r2, #83	; 0x53
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f86f 	bl	8004c82 <RTC_EnterInitMode>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	22ff      	movs	r2, #255	; 0xff
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2204      	movs	r2, #4
 8004bb6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e033      	b.n	8004c2a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004bcc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004bd0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004be0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 0320 	and.w	r3, r3, #32
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d111      	bne.n	8004c14 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f81e 	bl	8004c32 <HAL_RTC_WaitForSynchro>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	22ff      	movs	r2, #255	; 0xff
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2204      	movs	r2, #4
 8004c08:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e00a      	b.n	8004c2a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	22ff      	movs	r2, #255	; 0xff
 8004c1a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004c28:	2300      	movs	r3, #0
  }
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd90      	pop	{r4, r7, pc}

08004c32 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c4c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c4e:	f7fd fb0d 	bl	800226c <HAL_GetTick>
 8004c52:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c54:	e009      	b.n	8004c6a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004c56:	f7fd fb09 	bl	800226c <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c64:	d901      	bls.n	8004c6a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e007      	b.n	8004c7a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f003 0320 	and.w	r3, r3, #32
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0ee      	beq.n	8004c56 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d119      	bne.n	8004cd0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ca6:	f7fd fae1 	bl	800226c <HAL_GetTick>
 8004caa:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004cac:	e009      	b.n	8004cc2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cae:	f7fd fadd 	bl	800226c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cbc:	d901      	bls.n	8004cc2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e007      	b.n	8004cd2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0ee      	beq.n	8004cae <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b085      	sub	sp, #20
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004ce8:	e005      	b.n	8004cf6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3301      	adds	r3, #1
 8004cee:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004cf0:	79fb      	ldrb	r3, [r7, #7]
 8004cf2:	3b0a      	subs	r3, #10
 8004cf4:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	2b09      	cmp	r3, #9
 8004cfa:	d8f6      	bhi.n	8004cea <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	79fb      	ldrb	r3, [r7, #7]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	b2db      	uxtb	r3, r3
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e03f      	b.n	8004da8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7fc fc5b 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2224      	movs	r2, #36	; 0x24
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f928 	bl	8004fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08a      	sub	sp, #40	; 0x28
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d17c      	bne.n	8004eca <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_UART_Transmit+0x2c>
 8004dd6:	88fb      	ldrh	r3, [r7, #6]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e075      	b.n	8004ecc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Transmit+0x3e>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e06e      	b.n	8004ecc <HAL_UART_Transmit+0x11c>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2221      	movs	r2, #33	; 0x21
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e04:	f7fd fa32 	bl	800226c <HAL_GetTick>
 8004e08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	88fa      	ldrh	r2, [r7, #6]
 8004e0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	88fa      	ldrh	r2, [r7, #6]
 8004e14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1e:	d108      	bne.n	8004e32 <HAL_UART_Transmit+0x82>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d104      	bne.n	8004e32 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	e003      	b.n	8004e3a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e42:	e02a      	b.n	8004e9a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2180      	movs	r1, #128	; 0x80
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f840 	bl	8004ed4 <UART_WaitOnFlagUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e036      	b.n	8004ecc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10b      	bne.n	8004e7c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	881b      	ldrh	r3, [r3, #0]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e72:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	3302      	adds	r3, #2
 8004e78:	61bb      	str	r3, [r7, #24]
 8004e7a:	e007      	b.n	8004e8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	781a      	ldrb	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1cf      	bne.n	8004e44 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2140      	movs	r1, #64	; 0x40
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 f810 	bl	8004ed4 <UART_WaitOnFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e006      	b.n	8004ecc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e000      	b.n	8004ecc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3720      	adds	r7, #32
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b090      	sub	sp, #64	; 0x40
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee4:	e050      	b.n	8004f88 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eec:	d04c      	beq.n	8004f88 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ef4:	f7fd f9ba 	bl	800226c <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d241      	bcs.n	8004f88 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	330c      	adds	r3, #12
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	330c      	adds	r3, #12
 8004f22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f24:	637a      	str	r2, [r7, #52]	; 0x34
 8004f26:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e5      	bne.n	8004f04 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3314      	adds	r3, #20
 8004f3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	613b      	str	r3, [r7, #16]
   return(result);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f023 0301 	bic.w	r3, r3, #1
 8004f4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	3314      	adds	r3, #20
 8004f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f58:	623a      	str	r2, [r7, #32]
 8004f5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	69f9      	ldr	r1, [r7, #28]
 8004f5e:	6a3a      	ldr	r2, [r7, #32]
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e5      	bne.n	8004f38 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e00f      	b.n	8004fa8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4013      	ands	r3, r2
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	bf0c      	ite	eq
 8004f98:	2301      	moveq	r3, #1
 8004f9a:	2300      	movne	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	79fb      	ldrb	r3, [r7, #7]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d09f      	beq.n	8004ee6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3740      	adds	r7, #64	; 0x40
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb4:	b09f      	sub	sp, #124	; 0x7c
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc6:	68d9      	ldr	r1, [r3, #12]
 8004fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	ea40 0301 	orr.w	r3, r0, r1
 8004fd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd4:	689a      	ldr	r2, [r3, #8]
 8004fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ff4:	f021 010c 	bic.w	r1, r1, #12
 8004ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ffe:	430b      	orrs	r3, r1
 8005000:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800500c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800500e:	6999      	ldr	r1, [r3, #24]
 8005010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	ea40 0301 	orr.w	r3, r0, r1
 8005018:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800501a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	4bc5      	ldr	r3, [pc, #788]	; (8005334 <UART_SetConfig+0x384>)
 8005020:	429a      	cmp	r2, r3
 8005022:	d004      	beq.n	800502e <UART_SetConfig+0x7e>
 8005024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	4bc3      	ldr	r3, [pc, #780]	; (8005338 <UART_SetConfig+0x388>)
 800502a:	429a      	cmp	r2, r3
 800502c:	d103      	bne.n	8005036 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800502e:	f7fe fc7d 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 8005032:	6778      	str	r0, [r7, #116]	; 0x74
 8005034:	e002      	b.n	800503c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005036:	f7fe fc65 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 800503a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800503c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005044:	f040 80b6 	bne.w	80051b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800504a:	461c      	mov	r4, r3
 800504c:	f04f 0500 	mov.w	r5, #0
 8005050:	4622      	mov	r2, r4
 8005052:	462b      	mov	r3, r5
 8005054:	1891      	adds	r1, r2, r2
 8005056:	6439      	str	r1, [r7, #64]	; 0x40
 8005058:	415b      	adcs	r3, r3
 800505a:	647b      	str	r3, [r7, #68]	; 0x44
 800505c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005060:	1912      	adds	r2, r2, r4
 8005062:	eb45 0303 	adc.w	r3, r5, r3
 8005066:	f04f 0000 	mov.w	r0, #0
 800506a:	f04f 0100 	mov.w	r1, #0
 800506e:	00d9      	lsls	r1, r3, #3
 8005070:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005074:	00d0      	lsls	r0, r2, #3
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	1911      	adds	r1, r2, r4
 800507c:	6639      	str	r1, [r7, #96]	; 0x60
 800507e:	416b      	adcs	r3, r5
 8005080:	667b      	str	r3, [r7, #100]	; 0x64
 8005082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	461a      	mov	r2, r3
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	1891      	adds	r1, r2, r2
 800508e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005090:	415b      	adcs	r3, r3
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005094:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005098:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800509c:	f7fb fdf4 	bl	8000c88 <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4ba5      	ldr	r3, [pc, #660]	; (800533c <UART_SetConfig+0x38c>)
 80050a6:	fba3 2302 	umull	r2, r3, r3, r2
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	011e      	lsls	r6, r3, #4
 80050ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b0:	461c      	mov	r4, r3
 80050b2:	f04f 0500 	mov.w	r5, #0
 80050b6:	4622      	mov	r2, r4
 80050b8:	462b      	mov	r3, r5
 80050ba:	1891      	adds	r1, r2, r2
 80050bc:	6339      	str	r1, [r7, #48]	; 0x30
 80050be:	415b      	adcs	r3, r3
 80050c0:	637b      	str	r3, [r7, #52]	; 0x34
 80050c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80050c6:	1912      	adds	r2, r2, r4
 80050c8:	eb45 0303 	adc.w	r3, r5, r3
 80050cc:	f04f 0000 	mov.w	r0, #0
 80050d0:	f04f 0100 	mov.w	r1, #0
 80050d4:	00d9      	lsls	r1, r3, #3
 80050d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050da:	00d0      	lsls	r0, r2, #3
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	1911      	adds	r1, r2, r4
 80050e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80050e4:	416b      	adcs	r3, r5
 80050e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	461a      	mov	r2, r3
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	1891      	adds	r1, r2, r2
 80050f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80050f6:	415b      	adcs	r3, r3
 80050f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005102:	f7fb fdc1 	bl	8000c88 <__aeabi_uldivmod>
 8005106:	4602      	mov	r2, r0
 8005108:	460b      	mov	r3, r1
 800510a:	4b8c      	ldr	r3, [pc, #560]	; (800533c <UART_SetConfig+0x38c>)
 800510c:	fba3 1302 	umull	r1, r3, r3, r2
 8005110:	095b      	lsrs	r3, r3, #5
 8005112:	2164      	movs	r1, #100	; 0x64
 8005114:	fb01 f303 	mul.w	r3, r1, r3
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	3332      	adds	r3, #50	; 0x32
 800511e:	4a87      	ldr	r2, [pc, #540]	; (800533c <UART_SetConfig+0x38c>)
 8005120:	fba2 2303 	umull	r2, r3, r2, r3
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800512c:	441e      	add	r6, r3
 800512e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005130:	4618      	mov	r0, r3
 8005132:	f04f 0100 	mov.w	r1, #0
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	1894      	adds	r4, r2, r2
 800513c:	623c      	str	r4, [r7, #32]
 800513e:	415b      	adcs	r3, r3
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
 8005142:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005146:	1812      	adds	r2, r2, r0
 8005148:	eb41 0303 	adc.w	r3, r1, r3
 800514c:	f04f 0400 	mov.w	r4, #0
 8005150:	f04f 0500 	mov.w	r5, #0
 8005154:	00dd      	lsls	r5, r3, #3
 8005156:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800515a:	00d4      	lsls	r4, r2, #3
 800515c:	4622      	mov	r2, r4
 800515e:	462b      	mov	r3, r5
 8005160:	1814      	adds	r4, r2, r0
 8005162:	653c      	str	r4, [r7, #80]	; 0x50
 8005164:	414b      	adcs	r3, r1
 8005166:	657b      	str	r3, [r7, #84]	; 0x54
 8005168:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	461a      	mov	r2, r3
 800516e:	f04f 0300 	mov.w	r3, #0
 8005172:	1891      	adds	r1, r2, r2
 8005174:	61b9      	str	r1, [r7, #24]
 8005176:	415b      	adcs	r3, r3
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800517e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005182:	f7fb fd81 	bl	8000c88 <__aeabi_uldivmod>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4b6c      	ldr	r3, [pc, #432]	; (800533c <UART_SetConfig+0x38c>)
 800518c:	fba3 1302 	umull	r1, r3, r3, r2
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	2164      	movs	r1, #100	; 0x64
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	3332      	adds	r3, #50	; 0x32
 800519e:	4a67      	ldr	r2, [pc, #412]	; (800533c <UART_SetConfig+0x38c>)
 80051a0:	fba2 2303 	umull	r2, r3, r2, r3
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	f003 0207 	and.w	r2, r3, #7
 80051aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4432      	add	r2, r6
 80051b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051b2:	e0b9      	b.n	8005328 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051b6:	461c      	mov	r4, r3
 80051b8:	f04f 0500 	mov.w	r5, #0
 80051bc:	4622      	mov	r2, r4
 80051be:	462b      	mov	r3, r5
 80051c0:	1891      	adds	r1, r2, r2
 80051c2:	6139      	str	r1, [r7, #16]
 80051c4:	415b      	adcs	r3, r3
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051cc:	1912      	adds	r2, r2, r4
 80051ce:	eb45 0303 	adc.w	r3, r5, r3
 80051d2:	f04f 0000 	mov.w	r0, #0
 80051d6:	f04f 0100 	mov.w	r1, #0
 80051da:	00d9      	lsls	r1, r3, #3
 80051dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051e0:	00d0      	lsls	r0, r2, #3
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	eb12 0804 	adds.w	r8, r2, r4
 80051ea:	eb43 0905 	adc.w	r9, r3, r5
 80051ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f04f 0100 	mov.w	r1, #0
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	008b      	lsls	r3, r1, #2
 8005202:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005206:	0082      	lsls	r2, r0, #2
 8005208:	4640      	mov	r0, r8
 800520a:	4649      	mov	r1, r9
 800520c:	f7fb fd3c 	bl	8000c88 <__aeabi_uldivmod>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	4b49      	ldr	r3, [pc, #292]	; (800533c <UART_SetConfig+0x38c>)
 8005216:	fba3 2302 	umull	r2, r3, r3, r2
 800521a:	095b      	lsrs	r3, r3, #5
 800521c:	011e      	lsls	r6, r3, #4
 800521e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005220:	4618      	mov	r0, r3
 8005222:	f04f 0100 	mov.w	r1, #0
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	1894      	adds	r4, r2, r2
 800522c:	60bc      	str	r4, [r7, #8]
 800522e:	415b      	adcs	r3, r3
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005236:	1812      	adds	r2, r2, r0
 8005238:	eb41 0303 	adc.w	r3, r1, r3
 800523c:	f04f 0400 	mov.w	r4, #0
 8005240:	f04f 0500 	mov.w	r5, #0
 8005244:	00dd      	lsls	r5, r3, #3
 8005246:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800524a:	00d4      	lsls	r4, r2, #3
 800524c:	4622      	mov	r2, r4
 800524e:	462b      	mov	r3, r5
 8005250:	1814      	adds	r4, r2, r0
 8005252:	64bc      	str	r4, [r7, #72]	; 0x48
 8005254:	414b      	adcs	r3, r1
 8005256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	4618      	mov	r0, r3
 800525e:	f04f 0100 	mov.w	r1, #0
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	008b      	lsls	r3, r1, #2
 800526c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005270:	0082      	lsls	r2, r0, #2
 8005272:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005276:	f7fb fd07 	bl	8000c88 <__aeabi_uldivmod>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4b2f      	ldr	r3, [pc, #188]	; (800533c <UART_SetConfig+0x38c>)
 8005280:	fba3 1302 	umull	r1, r3, r3, r2
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	2164      	movs	r1, #100	; 0x64
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	3332      	adds	r3, #50	; 0x32
 8005292:	4a2a      	ldr	r2, [pc, #168]	; (800533c <UART_SetConfig+0x38c>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800529e:	441e      	add	r6, r3
 80052a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052a2:	4618      	mov	r0, r3
 80052a4:	f04f 0100 	mov.w	r1, #0
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	1894      	adds	r4, r2, r2
 80052ae:	603c      	str	r4, [r7, #0]
 80052b0:	415b      	adcs	r3, r3
 80052b2:	607b      	str	r3, [r7, #4]
 80052b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052b8:	1812      	adds	r2, r2, r0
 80052ba:	eb41 0303 	adc.w	r3, r1, r3
 80052be:	f04f 0400 	mov.w	r4, #0
 80052c2:	f04f 0500 	mov.w	r5, #0
 80052c6:	00dd      	lsls	r5, r3, #3
 80052c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052cc:	00d4      	lsls	r4, r2, #3
 80052ce:	4622      	mov	r2, r4
 80052d0:	462b      	mov	r3, r5
 80052d2:	eb12 0a00 	adds.w	sl, r2, r0
 80052d6:	eb43 0b01 	adc.w	fp, r3, r1
 80052da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	4618      	mov	r0, r3
 80052e0:	f04f 0100 	mov.w	r1, #0
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	008b      	lsls	r3, r1, #2
 80052ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052f2:	0082      	lsls	r2, r0, #2
 80052f4:	4650      	mov	r0, sl
 80052f6:	4659      	mov	r1, fp
 80052f8:	f7fb fcc6 	bl	8000c88 <__aeabi_uldivmod>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4b0e      	ldr	r3, [pc, #56]	; (800533c <UART_SetConfig+0x38c>)
 8005302:	fba3 1302 	umull	r1, r3, r3, r2
 8005306:	095b      	lsrs	r3, r3, #5
 8005308:	2164      	movs	r1, #100	; 0x64
 800530a:	fb01 f303 	mul.w	r3, r1, r3
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	3332      	adds	r3, #50	; 0x32
 8005314:	4a09      	ldr	r2, [pc, #36]	; (800533c <UART_SetConfig+0x38c>)
 8005316:	fba2 2303 	umull	r2, r3, r2, r3
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	f003 020f 	and.w	r2, r3, #15
 8005320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4432      	add	r2, r6
 8005326:	609a      	str	r2, [r3, #8]
}
 8005328:	bf00      	nop
 800532a:	377c      	adds	r7, #124	; 0x7c
 800532c:	46bd      	mov	sp, r7
 800532e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005332:	bf00      	nop
 8005334:	40011000 	.word	0x40011000
 8005338:	40011400 	.word	0x40011400
 800533c:	51eb851f 	.word	0x51eb851f

08005340 <__errno>:
 8005340:	4b01      	ldr	r3, [pc, #4]	; (8005348 <__errno+0x8>)
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	2000000c 	.word	0x2000000c

0800534c <__sflush_r>:
 800534c:	898a      	ldrh	r2, [r1, #12]
 800534e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005352:	4605      	mov	r5, r0
 8005354:	0710      	lsls	r0, r2, #28
 8005356:	460c      	mov	r4, r1
 8005358:	d458      	bmi.n	800540c <__sflush_r+0xc0>
 800535a:	684b      	ldr	r3, [r1, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	dc05      	bgt.n	800536c <__sflush_r+0x20>
 8005360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	dc02      	bgt.n	800536c <__sflush_r+0x20>
 8005366:	2000      	movs	r0, #0
 8005368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800536c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800536e:	2e00      	cmp	r6, #0
 8005370:	d0f9      	beq.n	8005366 <__sflush_r+0x1a>
 8005372:	2300      	movs	r3, #0
 8005374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005378:	682f      	ldr	r7, [r5, #0]
 800537a:	602b      	str	r3, [r5, #0]
 800537c:	d032      	beq.n	80053e4 <__sflush_r+0x98>
 800537e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005380:	89a3      	ldrh	r3, [r4, #12]
 8005382:	075a      	lsls	r2, r3, #29
 8005384:	d505      	bpl.n	8005392 <__sflush_r+0x46>
 8005386:	6863      	ldr	r3, [r4, #4]
 8005388:	1ac0      	subs	r0, r0, r3
 800538a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800538c:	b10b      	cbz	r3, 8005392 <__sflush_r+0x46>
 800538e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005390:	1ac0      	subs	r0, r0, r3
 8005392:	2300      	movs	r3, #0
 8005394:	4602      	mov	r2, r0
 8005396:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005398:	6a21      	ldr	r1, [r4, #32]
 800539a:	4628      	mov	r0, r5
 800539c:	47b0      	blx	r6
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	d106      	bne.n	80053b2 <__sflush_r+0x66>
 80053a4:	6829      	ldr	r1, [r5, #0]
 80053a6:	291d      	cmp	r1, #29
 80053a8:	d82c      	bhi.n	8005404 <__sflush_r+0xb8>
 80053aa:	4a2a      	ldr	r2, [pc, #168]	; (8005454 <__sflush_r+0x108>)
 80053ac:	40ca      	lsrs	r2, r1
 80053ae:	07d6      	lsls	r6, r2, #31
 80053b0:	d528      	bpl.n	8005404 <__sflush_r+0xb8>
 80053b2:	2200      	movs	r2, #0
 80053b4:	6062      	str	r2, [r4, #4]
 80053b6:	04d9      	lsls	r1, r3, #19
 80053b8:	6922      	ldr	r2, [r4, #16]
 80053ba:	6022      	str	r2, [r4, #0]
 80053bc:	d504      	bpl.n	80053c8 <__sflush_r+0x7c>
 80053be:	1c42      	adds	r2, r0, #1
 80053c0:	d101      	bne.n	80053c6 <__sflush_r+0x7a>
 80053c2:	682b      	ldr	r3, [r5, #0]
 80053c4:	b903      	cbnz	r3, 80053c8 <__sflush_r+0x7c>
 80053c6:	6560      	str	r0, [r4, #84]	; 0x54
 80053c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053ca:	602f      	str	r7, [r5, #0]
 80053cc:	2900      	cmp	r1, #0
 80053ce:	d0ca      	beq.n	8005366 <__sflush_r+0x1a>
 80053d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053d4:	4299      	cmp	r1, r3
 80053d6:	d002      	beq.n	80053de <__sflush_r+0x92>
 80053d8:	4628      	mov	r0, r5
 80053da:	f000 fa2b 	bl	8005834 <_free_r>
 80053de:	2000      	movs	r0, #0
 80053e0:	6360      	str	r0, [r4, #52]	; 0x34
 80053e2:	e7c1      	b.n	8005368 <__sflush_r+0x1c>
 80053e4:	6a21      	ldr	r1, [r4, #32]
 80053e6:	2301      	movs	r3, #1
 80053e8:	4628      	mov	r0, r5
 80053ea:	47b0      	blx	r6
 80053ec:	1c41      	adds	r1, r0, #1
 80053ee:	d1c7      	bne.n	8005380 <__sflush_r+0x34>
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0c4      	beq.n	8005380 <__sflush_r+0x34>
 80053f6:	2b1d      	cmp	r3, #29
 80053f8:	d001      	beq.n	80053fe <__sflush_r+0xb2>
 80053fa:	2b16      	cmp	r3, #22
 80053fc:	d101      	bne.n	8005402 <__sflush_r+0xb6>
 80053fe:	602f      	str	r7, [r5, #0]
 8005400:	e7b1      	b.n	8005366 <__sflush_r+0x1a>
 8005402:	89a3      	ldrh	r3, [r4, #12]
 8005404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005408:	81a3      	strh	r3, [r4, #12]
 800540a:	e7ad      	b.n	8005368 <__sflush_r+0x1c>
 800540c:	690f      	ldr	r7, [r1, #16]
 800540e:	2f00      	cmp	r7, #0
 8005410:	d0a9      	beq.n	8005366 <__sflush_r+0x1a>
 8005412:	0793      	lsls	r3, r2, #30
 8005414:	680e      	ldr	r6, [r1, #0]
 8005416:	bf08      	it	eq
 8005418:	694b      	ldreq	r3, [r1, #20]
 800541a:	600f      	str	r7, [r1, #0]
 800541c:	bf18      	it	ne
 800541e:	2300      	movne	r3, #0
 8005420:	eba6 0807 	sub.w	r8, r6, r7
 8005424:	608b      	str	r3, [r1, #8]
 8005426:	f1b8 0f00 	cmp.w	r8, #0
 800542a:	dd9c      	ble.n	8005366 <__sflush_r+0x1a>
 800542c:	6a21      	ldr	r1, [r4, #32]
 800542e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005430:	4643      	mov	r3, r8
 8005432:	463a      	mov	r2, r7
 8005434:	4628      	mov	r0, r5
 8005436:	47b0      	blx	r6
 8005438:	2800      	cmp	r0, #0
 800543a:	dc06      	bgt.n	800544a <__sflush_r+0xfe>
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005442:	81a3      	strh	r3, [r4, #12]
 8005444:	f04f 30ff 	mov.w	r0, #4294967295
 8005448:	e78e      	b.n	8005368 <__sflush_r+0x1c>
 800544a:	4407      	add	r7, r0
 800544c:	eba8 0800 	sub.w	r8, r8, r0
 8005450:	e7e9      	b.n	8005426 <__sflush_r+0xda>
 8005452:	bf00      	nop
 8005454:	20400001 	.word	0x20400001

08005458 <_fflush_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	690b      	ldr	r3, [r1, #16]
 800545c:	4605      	mov	r5, r0
 800545e:	460c      	mov	r4, r1
 8005460:	b913      	cbnz	r3, 8005468 <_fflush_r+0x10>
 8005462:	2500      	movs	r5, #0
 8005464:	4628      	mov	r0, r5
 8005466:	bd38      	pop	{r3, r4, r5, pc}
 8005468:	b118      	cbz	r0, 8005472 <_fflush_r+0x1a>
 800546a:	6983      	ldr	r3, [r0, #24]
 800546c:	b90b      	cbnz	r3, 8005472 <_fflush_r+0x1a>
 800546e:	f000 f887 	bl	8005580 <__sinit>
 8005472:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <_fflush_r+0x6c>)
 8005474:	429c      	cmp	r4, r3
 8005476:	d11b      	bne.n	80054b0 <_fflush_r+0x58>
 8005478:	686c      	ldr	r4, [r5, #4]
 800547a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0ef      	beq.n	8005462 <_fflush_r+0xa>
 8005482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005484:	07d0      	lsls	r0, r2, #31
 8005486:	d404      	bmi.n	8005492 <_fflush_r+0x3a>
 8005488:	0599      	lsls	r1, r3, #22
 800548a:	d402      	bmi.n	8005492 <_fflush_r+0x3a>
 800548c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800548e:	f000 f94c 	bl	800572a <__retarget_lock_acquire_recursive>
 8005492:	4628      	mov	r0, r5
 8005494:	4621      	mov	r1, r4
 8005496:	f7ff ff59 	bl	800534c <__sflush_r>
 800549a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800549c:	07da      	lsls	r2, r3, #31
 800549e:	4605      	mov	r5, r0
 80054a0:	d4e0      	bmi.n	8005464 <_fflush_r+0xc>
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	059b      	lsls	r3, r3, #22
 80054a6:	d4dd      	bmi.n	8005464 <_fflush_r+0xc>
 80054a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054aa:	f000 f93f 	bl	800572c <__retarget_lock_release_recursive>
 80054ae:	e7d9      	b.n	8005464 <_fflush_r+0xc>
 80054b0:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <_fflush_r+0x70>)
 80054b2:	429c      	cmp	r4, r3
 80054b4:	d101      	bne.n	80054ba <_fflush_r+0x62>
 80054b6:	68ac      	ldr	r4, [r5, #8]
 80054b8:	e7df      	b.n	800547a <_fflush_r+0x22>
 80054ba:	4b04      	ldr	r3, [pc, #16]	; (80054cc <_fflush_r+0x74>)
 80054bc:	429c      	cmp	r4, r3
 80054be:	bf08      	it	eq
 80054c0:	68ec      	ldreq	r4, [r5, #12]
 80054c2:	e7da      	b.n	800547a <_fflush_r+0x22>
 80054c4:	0800825c 	.word	0x0800825c
 80054c8:	0800827c 	.word	0x0800827c
 80054cc:	0800823c 	.word	0x0800823c

080054d0 <std>:
 80054d0:	2300      	movs	r3, #0
 80054d2:	b510      	push	{r4, lr}
 80054d4:	4604      	mov	r4, r0
 80054d6:	e9c0 3300 	strd	r3, r3, [r0]
 80054da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054de:	6083      	str	r3, [r0, #8]
 80054e0:	8181      	strh	r1, [r0, #12]
 80054e2:	6643      	str	r3, [r0, #100]	; 0x64
 80054e4:	81c2      	strh	r2, [r0, #14]
 80054e6:	6183      	str	r3, [r0, #24]
 80054e8:	4619      	mov	r1, r3
 80054ea:	2208      	movs	r2, #8
 80054ec:	305c      	adds	r0, #92	; 0x5c
 80054ee:	f000 f999 	bl	8005824 <memset>
 80054f2:	4b05      	ldr	r3, [pc, #20]	; (8005508 <std+0x38>)
 80054f4:	6263      	str	r3, [r4, #36]	; 0x24
 80054f6:	4b05      	ldr	r3, [pc, #20]	; (800550c <std+0x3c>)
 80054f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80054fa:	4b05      	ldr	r3, [pc, #20]	; (8005510 <std+0x40>)
 80054fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054fe:	4b05      	ldr	r3, [pc, #20]	; (8005514 <std+0x44>)
 8005500:	6224      	str	r4, [r4, #32]
 8005502:	6323      	str	r3, [r4, #48]	; 0x30
 8005504:	bd10      	pop	{r4, pc}
 8005506:	bf00      	nop
 8005508:	08006561 	.word	0x08006561
 800550c:	08006583 	.word	0x08006583
 8005510:	080065bb 	.word	0x080065bb
 8005514:	080065df 	.word	0x080065df

08005518 <_cleanup_r>:
 8005518:	4901      	ldr	r1, [pc, #4]	; (8005520 <_cleanup_r+0x8>)
 800551a:	f000 b8c1 	b.w	80056a0 <_fwalk_reent>
 800551e:	bf00      	nop
 8005520:	08005459 	.word	0x08005459

08005524 <__sfmoreglue>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	1e4a      	subs	r2, r1, #1
 8005528:	2568      	movs	r5, #104	; 0x68
 800552a:	4355      	muls	r5, r2
 800552c:	460e      	mov	r6, r1
 800552e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005532:	f000 f9cf 	bl	80058d4 <_malloc_r>
 8005536:	4604      	mov	r4, r0
 8005538:	b140      	cbz	r0, 800554c <__sfmoreglue+0x28>
 800553a:	2100      	movs	r1, #0
 800553c:	e9c0 1600 	strd	r1, r6, [r0]
 8005540:	300c      	adds	r0, #12
 8005542:	60a0      	str	r0, [r4, #8]
 8005544:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005548:	f000 f96c 	bl	8005824 <memset>
 800554c:	4620      	mov	r0, r4
 800554e:	bd70      	pop	{r4, r5, r6, pc}

08005550 <__sfp_lock_acquire>:
 8005550:	4801      	ldr	r0, [pc, #4]	; (8005558 <__sfp_lock_acquire+0x8>)
 8005552:	f000 b8ea 	b.w	800572a <__retarget_lock_acquire_recursive>
 8005556:	bf00      	nop
 8005558:	200009c8 	.word	0x200009c8

0800555c <__sfp_lock_release>:
 800555c:	4801      	ldr	r0, [pc, #4]	; (8005564 <__sfp_lock_release+0x8>)
 800555e:	f000 b8e5 	b.w	800572c <__retarget_lock_release_recursive>
 8005562:	bf00      	nop
 8005564:	200009c8 	.word	0x200009c8

08005568 <__sinit_lock_acquire>:
 8005568:	4801      	ldr	r0, [pc, #4]	; (8005570 <__sinit_lock_acquire+0x8>)
 800556a:	f000 b8de 	b.w	800572a <__retarget_lock_acquire_recursive>
 800556e:	bf00      	nop
 8005570:	200009c3 	.word	0x200009c3

08005574 <__sinit_lock_release>:
 8005574:	4801      	ldr	r0, [pc, #4]	; (800557c <__sinit_lock_release+0x8>)
 8005576:	f000 b8d9 	b.w	800572c <__retarget_lock_release_recursive>
 800557a:	bf00      	nop
 800557c:	200009c3 	.word	0x200009c3

08005580 <__sinit>:
 8005580:	b510      	push	{r4, lr}
 8005582:	4604      	mov	r4, r0
 8005584:	f7ff fff0 	bl	8005568 <__sinit_lock_acquire>
 8005588:	69a3      	ldr	r3, [r4, #24]
 800558a:	b11b      	cbz	r3, 8005594 <__sinit+0x14>
 800558c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005590:	f7ff bff0 	b.w	8005574 <__sinit_lock_release>
 8005594:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005598:	6523      	str	r3, [r4, #80]	; 0x50
 800559a:	4b13      	ldr	r3, [pc, #76]	; (80055e8 <__sinit+0x68>)
 800559c:	4a13      	ldr	r2, [pc, #76]	; (80055ec <__sinit+0x6c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80055a2:	42a3      	cmp	r3, r4
 80055a4:	bf04      	itt	eq
 80055a6:	2301      	moveq	r3, #1
 80055a8:	61a3      	streq	r3, [r4, #24]
 80055aa:	4620      	mov	r0, r4
 80055ac:	f000 f820 	bl	80055f0 <__sfp>
 80055b0:	6060      	str	r0, [r4, #4]
 80055b2:	4620      	mov	r0, r4
 80055b4:	f000 f81c 	bl	80055f0 <__sfp>
 80055b8:	60a0      	str	r0, [r4, #8]
 80055ba:	4620      	mov	r0, r4
 80055bc:	f000 f818 	bl	80055f0 <__sfp>
 80055c0:	2200      	movs	r2, #0
 80055c2:	60e0      	str	r0, [r4, #12]
 80055c4:	2104      	movs	r1, #4
 80055c6:	6860      	ldr	r0, [r4, #4]
 80055c8:	f7ff ff82 	bl	80054d0 <std>
 80055cc:	68a0      	ldr	r0, [r4, #8]
 80055ce:	2201      	movs	r2, #1
 80055d0:	2109      	movs	r1, #9
 80055d2:	f7ff ff7d 	bl	80054d0 <std>
 80055d6:	68e0      	ldr	r0, [r4, #12]
 80055d8:	2202      	movs	r2, #2
 80055da:	2112      	movs	r1, #18
 80055dc:	f7ff ff78 	bl	80054d0 <std>
 80055e0:	2301      	movs	r3, #1
 80055e2:	61a3      	str	r3, [r4, #24]
 80055e4:	e7d2      	b.n	800558c <__sinit+0xc>
 80055e6:	bf00      	nop
 80055e8:	0800829c 	.word	0x0800829c
 80055ec:	08005519 	.word	0x08005519

080055f0 <__sfp>:
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	4607      	mov	r7, r0
 80055f4:	f7ff ffac 	bl	8005550 <__sfp_lock_acquire>
 80055f8:	4b1e      	ldr	r3, [pc, #120]	; (8005674 <__sfp+0x84>)
 80055fa:	681e      	ldr	r6, [r3, #0]
 80055fc:	69b3      	ldr	r3, [r6, #24]
 80055fe:	b913      	cbnz	r3, 8005606 <__sfp+0x16>
 8005600:	4630      	mov	r0, r6
 8005602:	f7ff ffbd 	bl	8005580 <__sinit>
 8005606:	3648      	adds	r6, #72	; 0x48
 8005608:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800560c:	3b01      	subs	r3, #1
 800560e:	d503      	bpl.n	8005618 <__sfp+0x28>
 8005610:	6833      	ldr	r3, [r6, #0]
 8005612:	b30b      	cbz	r3, 8005658 <__sfp+0x68>
 8005614:	6836      	ldr	r6, [r6, #0]
 8005616:	e7f7      	b.n	8005608 <__sfp+0x18>
 8005618:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800561c:	b9d5      	cbnz	r5, 8005654 <__sfp+0x64>
 800561e:	4b16      	ldr	r3, [pc, #88]	; (8005678 <__sfp+0x88>)
 8005620:	60e3      	str	r3, [r4, #12]
 8005622:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005626:	6665      	str	r5, [r4, #100]	; 0x64
 8005628:	f000 f87e 	bl	8005728 <__retarget_lock_init_recursive>
 800562c:	f7ff ff96 	bl	800555c <__sfp_lock_release>
 8005630:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005634:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005638:	6025      	str	r5, [r4, #0]
 800563a:	61a5      	str	r5, [r4, #24]
 800563c:	2208      	movs	r2, #8
 800563e:	4629      	mov	r1, r5
 8005640:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005644:	f000 f8ee 	bl	8005824 <memset>
 8005648:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800564c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005650:	4620      	mov	r0, r4
 8005652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005654:	3468      	adds	r4, #104	; 0x68
 8005656:	e7d9      	b.n	800560c <__sfp+0x1c>
 8005658:	2104      	movs	r1, #4
 800565a:	4638      	mov	r0, r7
 800565c:	f7ff ff62 	bl	8005524 <__sfmoreglue>
 8005660:	4604      	mov	r4, r0
 8005662:	6030      	str	r0, [r6, #0]
 8005664:	2800      	cmp	r0, #0
 8005666:	d1d5      	bne.n	8005614 <__sfp+0x24>
 8005668:	f7ff ff78 	bl	800555c <__sfp_lock_release>
 800566c:	230c      	movs	r3, #12
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	e7ee      	b.n	8005650 <__sfp+0x60>
 8005672:	bf00      	nop
 8005674:	0800829c 	.word	0x0800829c
 8005678:	ffff0001 	.word	0xffff0001

0800567c <fiprintf>:
 800567c:	b40e      	push	{r1, r2, r3}
 800567e:	b503      	push	{r0, r1, lr}
 8005680:	4601      	mov	r1, r0
 8005682:	ab03      	add	r3, sp, #12
 8005684:	4805      	ldr	r0, [pc, #20]	; (800569c <fiprintf+0x20>)
 8005686:	f853 2b04 	ldr.w	r2, [r3], #4
 800568a:	6800      	ldr	r0, [r0, #0]
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	f000 f9a5 	bl	80059dc <_vfiprintf_r>
 8005692:	b002      	add	sp, #8
 8005694:	f85d eb04 	ldr.w	lr, [sp], #4
 8005698:	b003      	add	sp, #12
 800569a:	4770      	bx	lr
 800569c:	2000000c 	.word	0x2000000c

080056a0 <_fwalk_reent>:
 80056a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056a4:	4606      	mov	r6, r0
 80056a6:	4688      	mov	r8, r1
 80056a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80056ac:	2700      	movs	r7, #0
 80056ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056b2:	f1b9 0901 	subs.w	r9, r9, #1
 80056b6:	d505      	bpl.n	80056c4 <_fwalk_reent+0x24>
 80056b8:	6824      	ldr	r4, [r4, #0]
 80056ba:	2c00      	cmp	r4, #0
 80056bc:	d1f7      	bne.n	80056ae <_fwalk_reent+0xe>
 80056be:	4638      	mov	r0, r7
 80056c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056c4:	89ab      	ldrh	r3, [r5, #12]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d907      	bls.n	80056da <_fwalk_reent+0x3a>
 80056ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056ce:	3301      	adds	r3, #1
 80056d0:	d003      	beq.n	80056da <_fwalk_reent+0x3a>
 80056d2:	4629      	mov	r1, r5
 80056d4:	4630      	mov	r0, r6
 80056d6:	47c0      	blx	r8
 80056d8:	4307      	orrs	r7, r0
 80056da:	3568      	adds	r5, #104	; 0x68
 80056dc:	e7e9      	b.n	80056b2 <_fwalk_reent+0x12>
	...

080056e0 <__libc_init_array>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	4d0d      	ldr	r5, [pc, #52]	; (8005718 <__libc_init_array+0x38>)
 80056e4:	4c0d      	ldr	r4, [pc, #52]	; (800571c <__libc_init_array+0x3c>)
 80056e6:	1b64      	subs	r4, r4, r5
 80056e8:	10a4      	asrs	r4, r4, #2
 80056ea:	2600      	movs	r6, #0
 80056ec:	42a6      	cmp	r6, r4
 80056ee:	d109      	bne.n	8005704 <__libc_init_array+0x24>
 80056f0:	4d0b      	ldr	r5, [pc, #44]	; (8005720 <__libc_init_array+0x40>)
 80056f2:	4c0c      	ldr	r4, [pc, #48]	; (8005724 <__libc_init_array+0x44>)
 80056f4:	f002 fcea 	bl	80080cc <_init>
 80056f8:	1b64      	subs	r4, r4, r5
 80056fa:	10a4      	asrs	r4, r4, #2
 80056fc:	2600      	movs	r6, #0
 80056fe:	42a6      	cmp	r6, r4
 8005700:	d105      	bne.n	800570e <__libc_init_array+0x2e>
 8005702:	bd70      	pop	{r4, r5, r6, pc}
 8005704:	f855 3b04 	ldr.w	r3, [r5], #4
 8005708:	4798      	blx	r3
 800570a:	3601      	adds	r6, #1
 800570c:	e7ee      	b.n	80056ec <__libc_init_array+0xc>
 800570e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005712:	4798      	blx	r3
 8005714:	3601      	adds	r6, #1
 8005716:	e7f2      	b.n	80056fe <__libc_init_array+0x1e>
 8005718:	08008670 	.word	0x08008670
 800571c:	08008670 	.word	0x08008670
 8005720:	08008670 	.word	0x08008670
 8005724:	08008674 	.word	0x08008674

08005728 <__retarget_lock_init_recursive>:
 8005728:	4770      	bx	lr

0800572a <__retarget_lock_acquire_recursive>:
 800572a:	4770      	bx	lr

0800572c <__retarget_lock_release_recursive>:
 800572c:	4770      	bx	lr

0800572e <__swhatbuf_r>:
 800572e:	b570      	push	{r4, r5, r6, lr}
 8005730:	460e      	mov	r6, r1
 8005732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005736:	2900      	cmp	r1, #0
 8005738:	b096      	sub	sp, #88	; 0x58
 800573a:	4614      	mov	r4, r2
 800573c:	461d      	mov	r5, r3
 800573e:	da07      	bge.n	8005750 <__swhatbuf_r+0x22>
 8005740:	2300      	movs	r3, #0
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	89b3      	ldrh	r3, [r6, #12]
 8005746:	061a      	lsls	r2, r3, #24
 8005748:	d410      	bmi.n	800576c <__swhatbuf_r+0x3e>
 800574a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800574e:	e00e      	b.n	800576e <__swhatbuf_r+0x40>
 8005750:	466a      	mov	r2, sp
 8005752:	f001 fea5 	bl	80074a0 <_fstat_r>
 8005756:	2800      	cmp	r0, #0
 8005758:	dbf2      	blt.n	8005740 <__swhatbuf_r+0x12>
 800575a:	9a01      	ldr	r2, [sp, #4]
 800575c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005760:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005764:	425a      	negs	r2, r3
 8005766:	415a      	adcs	r2, r3
 8005768:	602a      	str	r2, [r5, #0]
 800576a:	e7ee      	b.n	800574a <__swhatbuf_r+0x1c>
 800576c:	2340      	movs	r3, #64	; 0x40
 800576e:	2000      	movs	r0, #0
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	b016      	add	sp, #88	; 0x58
 8005774:	bd70      	pop	{r4, r5, r6, pc}
	...

08005778 <__smakebuf_r>:
 8005778:	898b      	ldrh	r3, [r1, #12]
 800577a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800577c:	079d      	lsls	r5, r3, #30
 800577e:	4606      	mov	r6, r0
 8005780:	460c      	mov	r4, r1
 8005782:	d507      	bpl.n	8005794 <__smakebuf_r+0x1c>
 8005784:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	6123      	str	r3, [r4, #16]
 800578c:	2301      	movs	r3, #1
 800578e:	6163      	str	r3, [r4, #20]
 8005790:	b002      	add	sp, #8
 8005792:	bd70      	pop	{r4, r5, r6, pc}
 8005794:	ab01      	add	r3, sp, #4
 8005796:	466a      	mov	r2, sp
 8005798:	f7ff ffc9 	bl	800572e <__swhatbuf_r>
 800579c:	9900      	ldr	r1, [sp, #0]
 800579e:	4605      	mov	r5, r0
 80057a0:	4630      	mov	r0, r6
 80057a2:	f000 f897 	bl	80058d4 <_malloc_r>
 80057a6:	b948      	cbnz	r0, 80057bc <__smakebuf_r+0x44>
 80057a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057ac:	059a      	lsls	r2, r3, #22
 80057ae:	d4ef      	bmi.n	8005790 <__smakebuf_r+0x18>
 80057b0:	f023 0303 	bic.w	r3, r3, #3
 80057b4:	f043 0302 	orr.w	r3, r3, #2
 80057b8:	81a3      	strh	r3, [r4, #12]
 80057ba:	e7e3      	b.n	8005784 <__smakebuf_r+0xc>
 80057bc:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <__smakebuf_r+0x7c>)
 80057be:	62b3      	str	r3, [r6, #40]	; 0x28
 80057c0:	89a3      	ldrh	r3, [r4, #12]
 80057c2:	6020      	str	r0, [r4, #0]
 80057c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c8:	81a3      	strh	r3, [r4, #12]
 80057ca:	9b00      	ldr	r3, [sp, #0]
 80057cc:	6163      	str	r3, [r4, #20]
 80057ce:	9b01      	ldr	r3, [sp, #4]
 80057d0:	6120      	str	r0, [r4, #16]
 80057d2:	b15b      	cbz	r3, 80057ec <__smakebuf_r+0x74>
 80057d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057d8:	4630      	mov	r0, r6
 80057da:	f001 fe73 	bl	80074c4 <_isatty_r>
 80057de:	b128      	cbz	r0, 80057ec <__smakebuf_r+0x74>
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	f023 0303 	bic.w	r3, r3, #3
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	81a3      	strh	r3, [r4, #12]
 80057ec:	89a0      	ldrh	r0, [r4, #12]
 80057ee:	4305      	orrs	r5, r0
 80057f0:	81a5      	strh	r5, [r4, #12]
 80057f2:	e7cd      	b.n	8005790 <__smakebuf_r+0x18>
 80057f4:	08005519 	.word	0x08005519

080057f8 <malloc>:
 80057f8:	4b02      	ldr	r3, [pc, #8]	; (8005804 <malloc+0xc>)
 80057fa:	4601      	mov	r1, r0
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	f000 b869 	b.w	80058d4 <_malloc_r>
 8005802:	bf00      	nop
 8005804:	2000000c 	.word	0x2000000c

08005808 <memcpy>:
 8005808:	440a      	add	r2, r1
 800580a:	4291      	cmp	r1, r2
 800580c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005810:	d100      	bne.n	8005814 <memcpy+0xc>
 8005812:	4770      	bx	lr
 8005814:	b510      	push	{r4, lr}
 8005816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800581a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800581e:	4291      	cmp	r1, r2
 8005820:	d1f9      	bne.n	8005816 <memcpy+0xe>
 8005822:	bd10      	pop	{r4, pc}

08005824 <memset>:
 8005824:	4402      	add	r2, r0
 8005826:	4603      	mov	r3, r0
 8005828:	4293      	cmp	r3, r2
 800582a:	d100      	bne.n	800582e <memset+0xa>
 800582c:	4770      	bx	lr
 800582e:	f803 1b01 	strb.w	r1, [r3], #1
 8005832:	e7f9      	b.n	8005828 <memset+0x4>

08005834 <_free_r>:
 8005834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005836:	2900      	cmp	r1, #0
 8005838:	d048      	beq.n	80058cc <_free_r+0x98>
 800583a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800583e:	9001      	str	r0, [sp, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	f1a1 0404 	sub.w	r4, r1, #4
 8005846:	bfb8      	it	lt
 8005848:	18e4      	addlt	r4, r4, r3
 800584a:	f001 fe61 	bl	8007510 <__malloc_lock>
 800584e:	4a20      	ldr	r2, [pc, #128]	; (80058d0 <_free_r+0x9c>)
 8005850:	9801      	ldr	r0, [sp, #4]
 8005852:	6813      	ldr	r3, [r2, #0]
 8005854:	4615      	mov	r5, r2
 8005856:	b933      	cbnz	r3, 8005866 <_free_r+0x32>
 8005858:	6063      	str	r3, [r4, #4]
 800585a:	6014      	str	r4, [r2, #0]
 800585c:	b003      	add	sp, #12
 800585e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005862:	f001 be5b 	b.w	800751c <__malloc_unlock>
 8005866:	42a3      	cmp	r3, r4
 8005868:	d90b      	bls.n	8005882 <_free_r+0x4e>
 800586a:	6821      	ldr	r1, [r4, #0]
 800586c:	1862      	adds	r2, r4, r1
 800586e:	4293      	cmp	r3, r2
 8005870:	bf04      	itt	eq
 8005872:	681a      	ldreq	r2, [r3, #0]
 8005874:	685b      	ldreq	r3, [r3, #4]
 8005876:	6063      	str	r3, [r4, #4]
 8005878:	bf04      	itt	eq
 800587a:	1852      	addeq	r2, r2, r1
 800587c:	6022      	streq	r2, [r4, #0]
 800587e:	602c      	str	r4, [r5, #0]
 8005880:	e7ec      	b.n	800585c <_free_r+0x28>
 8005882:	461a      	mov	r2, r3
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	b10b      	cbz	r3, 800588c <_free_r+0x58>
 8005888:	42a3      	cmp	r3, r4
 800588a:	d9fa      	bls.n	8005882 <_free_r+0x4e>
 800588c:	6811      	ldr	r1, [r2, #0]
 800588e:	1855      	adds	r5, r2, r1
 8005890:	42a5      	cmp	r5, r4
 8005892:	d10b      	bne.n	80058ac <_free_r+0x78>
 8005894:	6824      	ldr	r4, [r4, #0]
 8005896:	4421      	add	r1, r4
 8005898:	1854      	adds	r4, r2, r1
 800589a:	42a3      	cmp	r3, r4
 800589c:	6011      	str	r1, [r2, #0]
 800589e:	d1dd      	bne.n	800585c <_free_r+0x28>
 80058a0:	681c      	ldr	r4, [r3, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	6053      	str	r3, [r2, #4]
 80058a6:	4421      	add	r1, r4
 80058a8:	6011      	str	r1, [r2, #0]
 80058aa:	e7d7      	b.n	800585c <_free_r+0x28>
 80058ac:	d902      	bls.n	80058b4 <_free_r+0x80>
 80058ae:	230c      	movs	r3, #12
 80058b0:	6003      	str	r3, [r0, #0]
 80058b2:	e7d3      	b.n	800585c <_free_r+0x28>
 80058b4:	6825      	ldr	r5, [r4, #0]
 80058b6:	1961      	adds	r1, r4, r5
 80058b8:	428b      	cmp	r3, r1
 80058ba:	bf04      	itt	eq
 80058bc:	6819      	ldreq	r1, [r3, #0]
 80058be:	685b      	ldreq	r3, [r3, #4]
 80058c0:	6063      	str	r3, [r4, #4]
 80058c2:	bf04      	itt	eq
 80058c4:	1949      	addeq	r1, r1, r5
 80058c6:	6021      	streq	r1, [r4, #0]
 80058c8:	6054      	str	r4, [r2, #4]
 80058ca:	e7c7      	b.n	800585c <_free_r+0x28>
 80058cc:	b003      	add	sp, #12
 80058ce:	bd30      	pop	{r4, r5, pc}
 80058d0:	200001fc 	.word	0x200001fc

080058d4 <_malloc_r>:
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	1ccd      	adds	r5, r1, #3
 80058d8:	f025 0503 	bic.w	r5, r5, #3
 80058dc:	3508      	adds	r5, #8
 80058de:	2d0c      	cmp	r5, #12
 80058e0:	bf38      	it	cc
 80058e2:	250c      	movcc	r5, #12
 80058e4:	2d00      	cmp	r5, #0
 80058e6:	4606      	mov	r6, r0
 80058e8:	db01      	blt.n	80058ee <_malloc_r+0x1a>
 80058ea:	42a9      	cmp	r1, r5
 80058ec:	d903      	bls.n	80058f6 <_malloc_r+0x22>
 80058ee:	230c      	movs	r3, #12
 80058f0:	6033      	str	r3, [r6, #0]
 80058f2:	2000      	movs	r0, #0
 80058f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f6:	f001 fe0b 	bl	8007510 <__malloc_lock>
 80058fa:	4921      	ldr	r1, [pc, #132]	; (8005980 <_malloc_r+0xac>)
 80058fc:	680a      	ldr	r2, [r1, #0]
 80058fe:	4614      	mov	r4, r2
 8005900:	b99c      	cbnz	r4, 800592a <_malloc_r+0x56>
 8005902:	4f20      	ldr	r7, [pc, #128]	; (8005984 <_malloc_r+0xb0>)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	b923      	cbnz	r3, 8005912 <_malloc_r+0x3e>
 8005908:	4621      	mov	r1, r4
 800590a:	4630      	mov	r0, r6
 800590c:	f000 fe18 	bl	8006540 <_sbrk_r>
 8005910:	6038      	str	r0, [r7, #0]
 8005912:	4629      	mov	r1, r5
 8005914:	4630      	mov	r0, r6
 8005916:	f000 fe13 	bl	8006540 <_sbrk_r>
 800591a:	1c43      	adds	r3, r0, #1
 800591c:	d123      	bne.n	8005966 <_malloc_r+0x92>
 800591e:	230c      	movs	r3, #12
 8005920:	6033      	str	r3, [r6, #0]
 8005922:	4630      	mov	r0, r6
 8005924:	f001 fdfa 	bl	800751c <__malloc_unlock>
 8005928:	e7e3      	b.n	80058f2 <_malloc_r+0x1e>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	1b5b      	subs	r3, r3, r5
 800592e:	d417      	bmi.n	8005960 <_malloc_r+0x8c>
 8005930:	2b0b      	cmp	r3, #11
 8005932:	d903      	bls.n	800593c <_malloc_r+0x68>
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	441c      	add	r4, r3
 8005938:	6025      	str	r5, [r4, #0]
 800593a:	e004      	b.n	8005946 <_malloc_r+0x72>
 800593c:	6863      	ldr	r3, [r4, #4]
 800593e:	42a2      	cmp	r2, r4
 8005940:	bf0c      	ite	eq
 8005942:	600b      	streq	r3, [r1, #0]
 8005944:	6053      	strne	r3, [r2, #4]
 8005946:	4630      	mov	r0, r6
 8005948:	f001 fde8 	bl	800751c <__malloc_unlock>
 800594c:	f104 000b 	add.w	r0, r4, #11
 8005950:	1d23      	adds	r3, r4, #4
 8005952:	f020 0007 	bic.w	r0, r0, #7
 8005956:	1ac2      	subs	r2, r0, r3
 8005958:	d0cc      	beq.n	80058f4 <_malloc_r+0x20>
 800595a:	1a1b      	subs	r3, r3, r0
 800595c:	50a3      	str	r3, [r4, r2]
 800595e:	e7c9      	b.n	80058f4 <_malloc_r+0x20>
 8005960:	4622      	mov	r2, r4
 8005962:	6864      	ldr	r4, [r4, #4]
 8005964:	e7cc      	b.n	8005900 <_malloc_r+0x2c>
 8005966:	1cc4      	adds	r4, r0, #3
 8005968:	f024 0403 	bic.w	r4, r4, #3
 800596c:	42a0      	cmp	r0, r4
 800596e:	d0e3      	beq.n	8005938 <_malloc_r+0x64>
 8005970:	1a21      	subs	r1, r4, r0
 8005972:	4630      	mov	r0, r6
 8005974:	f000 fde4 	bl	8006540 <_sbrk_r>
 8005978:	3001      	adds	r0, #1
 800597a:	d1dd      	bne.n	8005938 <_malloc_r+0x64>
 800597c:	e7cf      	b.n	800591e <_malloc_r+0x4a>
 800597e:	bf00      	nop
 8005980:	200001fc 	.word	0x200001fc
 8005984:	20000200 	.word	0x20000200

08005988 <__sfputc_r>:
 8005988:	6893      	ldr	r3, [r2, #8]
 800598a:	3b01      	subs	r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	b410      	push	{r4}
 8005990:	6093      	str	r3, [r2, #8]
 8005992:	da08      	bge.n	80059a6 <__sfputc_r+0x1e>
 8005994:	6994      	ldr	r4, [r2, #24]
 8005996:	42a3      	cmp	r3, r4
 8005998:	db01      	blt.n	800599e <__sfputc_r+0x16>
 800599a:	290a      	cmp	r1, #10
 800599c:	d103      	bne.n	80059a6 <__sfputc_r+0x1e>
 800599e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059a2:	f000 be21 	b.w	80065e8 <__swbuf_r>
 80059a6:	6813      	ldr	r3, [r2, #0]
 80059a8:	1c58      	adds	r0, r3, #1
 80059aa:	6010      	str	r0, [r2, #0]
 80059ac:	7019      	strb	r1, [r3, #0]
 80059ae:	4608      	mov	r0, r1
 80059b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <__sfputs_r>:
 80059b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b8:	4606      	mov	r6, r0
 80059ba:	460f      	mov	r7, r1
 80059bc:	4614      	mov	r4, r2
 80059be:	18d5      	adds	r5, r2, r3
 80059c0:	42ac      	cmp	r4, r5
 80059c2:	d101      	bne.n	80059c8 <__sfputs_r+0x12>
 80059c4:	2000      	movs	r0, #0
 80059c6:	e007      	b.n	80059d8 <__sfputs_r+0x22>
 80059c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059cc:	463a      	mov	r2, r7
 80059ce:	4630      	mov	r0, r6
 80059d0:	f7ff ffda 	bl	8005988 <__sfputc_r>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d1f3      	bne.n	80059c0 <__sfputs_r+0xa>
 80059d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059dc <_vfiprintf_r>:
 80059dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e0:	460d      	mov	r5, r1
 80059e2:	b09d      	sub	sp, #116	; 0x74
 80059e4:	4614      	mov	r4, r2
 80059e6:	4698      	mov	r8, r3
 80059e8:	4606      	mov	r6, r0
 80059ea:	b118      	cbz	r0, 80059f4 <_vfiprintf_r+0x18>
 80059ec:	6983      	ldr	r3, [r0, #24]
 80059ee:	b90b      	cbnz	r3, 80059f4 <_vfiprintf_r+0x18>
 80059f0:	f7ff fdc6 	bl	8005580 <__sinit>
 80059f4:	4b89      	ldr	r3, [pc, #548]	; (8005c1c <_vfiprintf_r+0x240>)
 80059f6:	429d      	cmp	r5, r3
 80059f8:	d11b      	bne.n	8005a32 <_vfiprintf_r+0x56>
 80059fa:	6875      	ldr	r5, [r6, #4]
 80059fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059fe:	07d9      	lsls	r1, r3, #31
 8005a00:	d405      	bmi.n	8005a0e <_vfiprintf_r+0x32>
 8005a02:	89ab      	ldrh	r3, [r5, #12]
 8005a04:	059a      	lsls	r2, r3, #22
 8005a06:	d402      	bmi.n	8005a0e <_vfiprintf_r+0x32>
 8005a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a0a:	f7ff fe8e 	bl	800572a <__retarget_lock_acquire_recursive>
 8005a0e:	89ab      	ldrh	r3, [r5, #12]
 8005a10:	071b      	lsls	r3, r3, #28
 8005a12:	d501      	bpl.n	8005a18 <_vfiprintf_r+0x3c>
 8005a14:	692b      	ldr	r3, [r5, #16]
 8005a16:	b9eb      	cbnz	r3, 8005a54 <_vfiprintf_r+0x78>
 8005a18:	4629      	mov	r1, r5
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f000 fe48 	bl	80066b0 <__swsetup_r>
 8005a20:	b1c0      	cbz	r0, 8005a54 <_vfiprintf_r+0x78>
 8005a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a24:	07dc      	lsls	r4, r3, #31
 8005a26:	d50e      	bpl.n	8005a46 <_vfiprintf_r+0x6a>
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2c:	b01d      	add	sp, #116	; 0x74
 8005a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a32:	4b7b      	ldr	r3, [pc, #492]	; (8005c20 <_vfiprintf_r+0x244>)
 8005a34:	429d      	cmp	r5, r3
 8005a36:	d101      	bne.n	8005a3c <_vfiprintf_r+0x60>
 8005a38:	68b5      	ldr	r5, [r6, #8]
 8005a3a:	e7df      	b.n	80059fc <_vfiprintf_r+0x20>
 8005a3c:	4b79      	ldr	r3, [pc, #484]	; (8005c24 <_vfiprintf_r+0x248>)
 8005a3e:	429d      	cmp	r5, r3
 8005a40:	bf08      	it	eq
 8005a42:	68f5      	ldreq	r5, [r6, #12]
 8005a44:	e7da      	b.n	80059fc <_vfiprintf_r+0x20>
 8005a46:	89ab      	ldrh	r3, [r5, #12]
 8005a48:	0598      	lsls	r0, r3, #22
 8005a4a:	d4ed      	bmi.n	8005a28 <_vfiprintf_r+0x4c>
 8005a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a4e:	f7ff fe6d 	bl	800572c <__retarget_lock_release_recursive>
 8005a52:	e7e9      	b.n	8005a28 <_vfiprintf_r+0x4c>
 8005a54:	2300      	movs	r3, #0
 8005a56:	9309      	str	r3, [sp, #36]	; 0x24
 8005a58:	2320      	movs	r3, #32
 8005a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a62:	2330      	movs	r3, #48	; 0x30
 8005a64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c28 <_vfiprintf_r+0x24c>
 8005a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a6c:	f04f 0901 	mov.w	r9, #1
 8005a70:	4623      	mov	r3, r4
 8005a72:	469a      	mov	sl, r3
 8005a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a78:	b10a      	cbz	r2, 8005a7e <_vfiprintf_r+0xa2>
 8005a7a:	2a25      	cmp	r2, #37	; 0x25
 8005a7c:	d1f9      	bne.n	8005a72 <_vfiprintf_r+0x96>
 8005a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a82:	d00b      	beq.n	8005a9c <_vfiprintf_r+0xc0>
 8005a84:	465b      	mov	r3, fp
 8005a86:	4622      	mov	r2, r4
 8005a88:	4629      	mov	r1, r5
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f7ff ff93 	bl	80059b6 <__sfputs_r>
 8005a90:	3001      	adds	r0, #1
 8005a92:	f000 80aa 	beq.w	8005bea <_vfiprintf_r+0x20e>
 8005a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a98:	445a      	add	r2, fp
 8005a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 80a2 	beq.w	8005bea <_vfiprintf_r+0x20e>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ab0:	f10a 0a01 	add.w	sl, sl, #1
 8005ab4:	9304      	str	r3, [sp, #16]
 8005ab6:	9307      	str	r3, [sp, #28]
 8005ab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005abc:	931a      	str	r3, [sp, #104]	; 0x68
 8005abe:	4654      	mov	r4, sl
 8005ac0:	2205      	movs	r2, #5
 8005ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ac6:	4858      	ldr	r0, [pc, #352]	; (8005c28 <_vfiprintf_r+0x24c>)
 8005ac8:	f7fa fbaa 	bl	8000220 <memchr>
 8005acc:	9a04      	ldr	r2, [sp, #16]
 8005ace:	b9d8      	cbnz	r0, 8005b08 <_vfiprintf_r+0x12c>
 8005ad0:	06d1      	lsls	r1, r2, #27
 8005ad2:	bf44      	itt	mi
 8005ad4:	2320      	movmi	r3, #32
 8005ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ada:	0713      	lsls	r3, r2, #28
 8005adc:	bf44      	itt	mi
 8005ade:	232b      	movmi	r3, #43	; 0x2b
 8005ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aea:	d015      	beq.n	8005b18 <_vfiprintf_r+0x13c>
 8005aec:	9a07      	ldr	r2, [sp, #28]
 8005aee:	4654      	mov	r4, sl
 8005af0:	2000      	movs	r0, #0
 8005af2:	f04f 0c0a 	mov.w	ip, #10
 8005af6:	4621      	mov	r1, r4
 8005af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005afc:	3b30      	subs	r3, #48	; 0x30
 8005afe:	2b09      	cmp	r3, #9
 8005b00:	d94e      	bls.n	8005ba0 <_vfiprintf_r+0x1c4>
 8005b02:	b1b0      	cbz	r0, 8005b32 <_vfiprintf_r+0x156>
 8005b04:	9207      	str	r2, [sp, #28]
 8005b06:	e014      	b.n	8005b32 <_vfiprintf_r+0x156>
 8005b08:	eba0 0308 	sub.w	r3, r0, r8
 8005b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b10:	4313      	orrs	r3, r2
 8005b12:	9304      	str	r3, [sp, #16]
 8005b14:	46a2      	mov	sl, r4
 8005b16:	e7d2      	b.n	8005abe <_vfiprintf_r+0xe2>
 8005b18:	9b03      	ldr	r3, [sp, #12]
 8005b1a:	1d19      	adds	r1, r3, #4
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	9103      	str	r1, [sp, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bfbb      	ittet	lt
 8005b24:	425b      	neglt	r3, r3
 8005b26:	f042 0202 	orrlt.w	r2, r2, #2
 8005b2a:	9307      	strge	r3, [sp, #28]
 8005b2c:	9307      	strlt	r3, [sp, #28]
 8005b2e:	bfb8      	it	lt
 8005b30:	9204      	strlt	r2, [sp, #16]
 8005b32:	7823      	ldrb	r3, [r4, #0]
 8005b34:	2b2e      	cmp	r3, #46	; 0x2e
 8005b36:	d10c      	bne.n	8005b52 <_vfiprintf_r+0x176>
 8005b38:	7863      	ldrb	r3, [r4, #1]
 8005b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b3c:	d135      	bne.n	8005baa <_vfiprintf_r+0x1ce>
 8005b3e:	9b03      	ldr	r3, [sp, #12]
 8005b40:	1d1a      	adds	r2, r3, #4
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	9203      	str	r2, [sp, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	bfb8      	it	lt
 8005b4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b4e:	3402      	adds	r4, #2
 8005b50:	9305      	str	r3, [sp, #20]
 8005b52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c38 <_vfiprintf_r+0x25c>
 8005b56:	7821      	ldrb	r1, [r4, #0]
 8005b58:	2203      	movs	r2, #3
 8005b5a:	4650      	mov	r0, sl
 8005b5c:	f7fa fb60 	bl	8000220 <memchr>
 8005b60:	b140      	cbz	r0, 8005b74 <_vfiprintf_r+0x198>
 8005b62:	2340      	movs	r3, #64	; 0x40
 8005b64:	eba0 000a 	sub.w	r0, r0, sl
 8005b68:	fa03 f000 	lsl.w	r0, r3, r0
 8005b6c:	9b04      	ldr	r3, [sp, #16]
 8005b6e:	4303      	orrs	r3, r0
 8005b70:	3401      	adds	r4, #1
 8005b72:	9304      	str	r3, [sp, #16]
 8005b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b78:	482c      	ldr	r0, [pc, #176]	; (8005c2c <_vfiprintf_r+0x250>)
 8005b7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b7e:	2206      	movs	r2, #6
 8005b80:	f7fa fb4e 	bl	8000220 <memchr>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	d03f      	beq.n	8005c08 <_vfiprintf_r+0x22c>
 8005b88:	4b29      	ldr	r3, [pc, #164]	; (8005c30 <_vfiprintf_r+0x254>)
 8005b8a:	bb1b      	cbnz	r3, 8005bd4 <_vfiprintf_r+0x1f8>
 8005b8c:	9b03      	ldr	r3, [sp, #12]
 8005b8e:	3307      	adds	r3, #7
 8005b90:	f023 0307 	bic.w	r3, r3, #7
 8005b94:	3308      	adds	r3, #8
 8005b96:	9303      	str	r3, [sp, #12]
 8005b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b9a:	443b      	add	r3, r7
 8005b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b9e:	e767      	b.n	8005a70 <_vfiprintf_r+0x94>
 8005ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	e7a5      	b.n	8005af6 <_vfiprintf_r+0x11a>
 8005baa:	2300      	movs	r3, #0
 8005bac:	3401      	adds	r4, #1
 8005bae:	9305      	str	r3, [sp, #20]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	f04f 0c0a 	mov.w	ip, #10
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bbc:	3a30      	subs	r2, #48	; 0x30
 8005bbe:	2a09      	cmp	r2, #9
 8005bc0:	d903      	bls.n	8005bca <_vfiprintf_r+0x1ee>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0c5      	beq.n	8005b52 <_vfiprintf_r+0x176>
 8005bc6:	9105      	str	r1, [sp, #20]
 8005bc8:	e7c3      	b.n	8005b52 <_vfiprintf_r+0x176>
 8005bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bce:	4604      	mov	r4, r0
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e7f0      	b.n	8005bb6 <_vfiprintf_r+0x1da>
 8005bd4:	ab03      	add	r3, sp, #12
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	462a      	mov	r2, r5
 8005bda:	4b16      	ldr	r3, [pc, #88]	; (8005c34 <_vfiprintf_r+0x258>)
 8005bdc:	a904      	add	r1, sp, #16
 8005bde:	4630      	mov	r0, r6
 8005be0:	f000 f8cc 	bl	8005d7c <_printf_float>
 8005be4:	4607      	mov	r7, r0
 8005be6:	1c78      	adds	r0, r7, #1
 8005be8:	d1d6      	bne.n	8005b98 <_vfiprintf_r+0x1bc>
 8005bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bec:	07d9      	lsls	r1, r3, #31
 8005bee:	d405      	bmi.n	8005bfc <_vfiprintf_r+0x220>
 8005bf0:	89ab      	ldrh	r3, [r5, #12]
 8005bf2:	059a      	lsls	r2, r3, #22
 8005bf4:	d402      	bmi.n	8005bfc <_vfiprintf_r+0x220>
 8005bf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bf8:	f7ff fd98 	bl	800572c <__retarget_lock_release_recursive>
 8005bfc:	89ab      	ldrh	r3, [r5, #12]
 8005bfe:	065b      	lsls	r3, r3, #25
 8005c00:	f53f af12 	bmi.w	8005a28 <_vfiprintf_r+0x4c>
 8005c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c06:	e711      	b.n	8005a2c <_vfiprintf_r+0x50>
 8005c08:	ab03      	add	r3, sp, #12
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	462a      	mov	r2, r5
 8005c0e:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <_vfiprintf_r+0x258>)
 8005c10:	a904      	add	r1, sp, #16
 8005c12:	4630      	mov	r0, r6
 8005c14:	f000 fb56 	bl	80062c4 <_printf_i>
 8005c18:	e7e4      	b.n	8005be4 <_vfiprintf_r+0x208>
 8005c1a:	bf00      	nop
 8005c1c:	0800825c 	.word	0x0800825c
 8005c20:	0800827c 	.word	0x0800827c
 8005c24:	0800823c 	.word	0x0800823c
 8005c28:	080082a0 	.word	0x080082a0
 8005c2c:	080082aa 	.word	0x080082aa
 8005c30:	08005d7d 	.word	0x08005d7d
 8005c34:	080059b7 	.word	0x080059b7
 8005c38:	080082a6 	.word	0x080082a6

08005c3c <__cvt>:
 8005c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c40:	ec55 4b10 	vmov	r4, r5, d0
 8005c44:	2d00      	cmp	r5, #0
 8005c46:	460e      	mov	r6, r1
 8005c48:	4619      	mov	r1, r3
 8005c4a:	462b      	mov	r3, r5
 8005c4c:	bfbb      	ittet	lt
 8005c4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c52:	461d      	movlt	r5, r3
 8005c54:	2300      	movge	r3, #0
 8005c56:	232d      	movlt	r3, #45	; 0x2d
 8005c58:	700b      	strb	r3, [r1, #0]
 8005c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c60:	4691      	mov	r9, r2
 8005c62:	f023 0820 	bic.w	r8, r3, #32
 8005c66:	bfbc      	itt	lt
 8005c68:	4622      	movlt	r2, r4
 8005c6a:	4614      	movlt	r4, r2
 8005c6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c70:	d005      	beq.n	8005c7e <__cvt+0x42>
 8005c72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c76:	d100      	bne.n	8005c7a <__cvt+0x3e>
 8005c78:	3601      	adds	r6, #1
 8005c7a:	2102      	movs	r1, #2
 8005c7c:	e000      	b.n	8005c80 <__cvt+0x44>
 8005c7e:	2103      	movs	r1, #3
 8005c80:	ab03      	add	r3, sp, #12
 8005c82:	9301      	str	r3, [sp, #4]
 8005c84:	ab02      	add	r3, sp, #8
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	ec45 4b10 	vmov	d0, r4, r5
 8005c8c:	4653      	mov	r3, sl
 8005c8e:	4632      	mov	r2, r6
 8005c90:	f000 fe1a 	bl	80068c8 <_dtoa_r>
 8005c94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c98:	4607      	mov	r7, r0
 8005c9a:	d102      	bne.n	8005ca2 <__cvt+0x66>
 8005c9c:	f019 0f01 	tst.w	r9, #1
 8005ca0:	d022      	beq.n	8005ce8 <__cvt+0xac>
 8005ca2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ca6:	eb07 0906 	add.w	r9, r7, r6
 8005caa:	d110      	bne.n	8005cce <__cvt+0x92>
 8005cac:	783b      	ldrb	r3, [r7, #0]
 8005cae:	2b30      	cmp	r3, #48	; 0x30
 8005cb0:	d10a      	bne.n	8005cc8 <__cvt+0x8c>
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	4629      	mov	r1, r5
 8005cba:	f7fa ff25 	bl	8000b08 <__aeabi_dcmpeq>
 8005cbe:	b918      	cbnz	r0, 8005cc8 <__cvt+0x8c>
 8005cc0:	f1c6 0601 	rsb	r6, r6, #1
 8005cc4:	f8ca 6000 	str.w	r6, [sl]
 8005cc8:	f8da 3000 	ldr.w	r3, [sl]
 8005ccc:	4499      	add	r9, r3
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	f7fa ff17 	bl	8000b08 <__aeabi_dcmpeq>
 8005cda:	b108      	cbz	r0, 8005ce0 <__cvt+0xa4>
 8005cdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ce0:	2230      	movs	r2, #48	; 0x30
 8005ce2:	9b03      	ldr	r3, [sp, #12]
 8005ce4:	454b      	cmp	r3, r9
 8005ce6:	d307      	bcc.n	8005cf8 <__cvt+0xbc>
 8005ce8:	9b03      	ldr	r3, [sp, #12]
 8005cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cec:	1bdb      	subs	r3, r3, r7
 8005cee:	4638      	mov	r0, r7
 8005cf0:	6013      	str	r3, [r2, #0]
 8005cf2:	b004      	add	sp, #16
 8005cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf8:	1c59      	adds	r1, r3, #1
 8005cfa:	9103      	str	r1, [sp, #12]
 8005cfc:	701a      	strb	r2, [r3, #0]
 8005cfe:	e7f0      	b.n	8005ce2 <__cvt+0xa6>

08005d00 <__exponent>:
 8005d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d02:	4603      	mov	r3, r0
 8005d04:	2900      	cmp	r1, #0
 8005d06:	bfb8      	it	lt
 8005d08:	4249      	neglt	r1, r1
 8005d0a:	f803 2b02 	strb.w	r2, [r3], #2
 8005d0e:	bfb4      	ite	lt
 8005d10:	222d      	movlt	r2, #45	; 0x2d
 8005d12:	222b      	movge	r2, #43	; 0x2b
 8005d14:	2909      	cmp	r1, #9
 8005d16:	7042      	strb	r2, [r0, #1]
 8005d18:	dd2a      	ble.n	8005d70 <__exponent+0x70>
 8005d1a:	f10d 0407 	add.w	r4, sp, #7
 8005d1e:	46a4      	mov	ip, r4
 8005d20:	270a      	movs	r7, #10
 8005d22:	46a6      	mov	lr, r4
 8005d24:	460a      	mov	r2, r1
 8005d26:	fb91 f6f7 	sdiv	r6, r1, r7
 8005d2a:	fb07 1516 	mls	r5, r7, r6, r1
 8005d2e:	3530      	adds	r5, #48	; 0x30
 8005d30:	2a63      	cmp	r2, #99	; 0x63
 8005d32:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	dcf1      	bgt.n	8005d22 <__exponent+0x22>
 8005d3e:	3130      	adds	r1, #48	; 0x30
 8005d40:	f1ae 0502 	sub.w	r5, lr, #2
 8005d44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d48:	1c44      	adds	r4, r0, #1
 8005d4a:	4629      	mov	r1, r5
 8005d4c:	4561      	cmp	r1, ip
 8005d4e:	d30a      	bcc.n	8005d66 <__exponent+0x66>
 8005d50:	f10d 0209 	add.w	r2, sp, #9
 8005d54:	eba2 020e 	sub.w	r2, r2, lr
 8005d58:	4565      	cmp	r5, ip
 8005d5a:	bf88      	it	hi
 8005d5c:	2200      	movhi	r2, #0
 8005d5e:	4413      	add	r3, r2
 8005d60:	1a18      	subs	r0, r3, r0
 8005d62:	b003      	add	sp, #12
 8005d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d6e:	e7ed      	b.n	8005d4c <__exponent+0x4c>
 8005d70:	2330      	movs	r3, #48	; 0x30
 8005d72:	3130      	adds	r1, #48	; 0x30
 8005d74:	7083      	strb	r3, [r0, #2]
 8005d76:	70c1      	strb	r1, [r0, #3]
 8005d78:	1d03      	adds	r3, r0, #4
 8005d7a:	e7f1      	b.n	8005d60 <__exponent+0x60>

08005d7c <_printf_float>:
 8005d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d80:	ed2d 8b02 	vpush	{d8}
 8005d84:	b08d      	sub	sp, #52	; 0x34
 8005d86:	460c      	mov	r4, r1
 8005d88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d8c:	4616      	mov	r6, r2
 8005d8e:	461f      	mov	r7, r3
 8005d90:	4605      	mov	r5, r0
 8005d92:	f001 fba7 	bl	80074e4 <_localeconv_r>
 8005d96:	f8d0 a000 	ldr.w	sl, [r0]
 8005d9a:	4650      	mov	r0, sl
 8005d9c:	f7fa fa38 	bl	8000210 <strlen>
 8005da0:	2300      	movs	r3, #0
 8005da2:	930a      	str	r3, [sp, #40]	; 0x28
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	9305      	str	r3, [sp, #20]
 8005da8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005db0:	3307      	adds	r3, #7
 8005db2:	f023 0307 	bic.w	r3, r3, #7
 8005db6:	f103 0208 	add.w	r2, r3, #8
 8005dba:	f8c8 2000 	str.w	r2, [r8]
 8005dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005dc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005dca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005dce:	9307      	str	r3, [sp, #28]
 8005dd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005dd4:	ee08 0a10 	vmov	s16, r0
 8005dd8:	4b9f      	ldr	r3, [pc, #636]	; (8006058 <_printf_float+0x2dc>)
 8005dda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dde:	f04f 32ff 	mov.w	r2, #4294967295
 8005de2:	f7fa fec3 	bl	8000b6c <__aeabi_dcmpun>
 8005de6:	bb88      	cbnz	r0, 8005e4c <_printf_float+0xd0>
 8005de8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dec:	4b9a      	ldr	r3, [pc, #616]	; (8006058 <_printf_float+0x2dc>)
 8005dee:	f04f 32ff 	mov.w	r2, #4294967295
 8005df2:	f7fa fe9d 	bl	8000b30 <__aeabi_dcmple>
 8005df6:	bb48      	cbnz	r0, 8005e4c <_printf_float+0xd0>
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	4640      	mov	r0, r8
 8005dfe:	4649      	mov	r1, r9
 8005e00:	f7fa fe8c 	bl	8000b1c <__aeabi_dcmplt>
 8005e04:	b110      	cbz	r0, 8005e0c <_printf_float+0x90>
 8005e06:	232d      	movs	r3, #45	; 0x2d
 8005e08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e0c:	4b93      	ldr	r3, [pc, #588]	; (800605c <_printf_float+0x2e0>)
 8005e0e:	4894      	ldr	r0, [pc, #592]	; (8006060 <_printf_float+0x2e4>)
 8005e10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005e14:	bf94      	ite	ls
 8005e16:	4698      	movls	r8, r3
 8005e18:	4680      	movhi	r8, r0
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	6123      	str	r3, [r4, #16]
 8005e1e:	9b05      	ldr	r3, [sp, #20]
 8005e20:	f023 0204 	bic.w	r2, r3, #4
 8005e24:	6022      	str	r2, [r4, #0]
 8005e26:	f04f 0900 	mov.w	r9, #0
 8005e2a:	9700      	str	r7, [sp, #0]
 8005e2c:	4633      	mov	r3, r6
 8005e2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005e30:	4621      	mov	r1, r4
 8005e32:	4628      	mov	r0, r5
 8005e34:	f000 f9d8 	bl	80061e8 <_printf_common>
 8005e38:	3001      	adds	r0, #1
 8005e3a:	f040 8090 	bne.w	8005f5e <_printf_float+0x1e2>
 8005e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e42:	b00d      	add	sp, #52	; 0x34
 8005e44:	ecbd 8b02 	vpop	{d8}
 8005e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	464b      	mov	r3, r9
 8005e50:	4640      	mov	r0, r8
 8005e52:	4649      	mov	r1, r9
 8005e54:	f7fa fe8a 	bl	8000b6c <__aeabi_dcmpun>
 8005e58:	b140      	cbz	r0, 8005e6c <_printf_float+0xf0>
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	bfbc      	itt	lt
 8005e60:	232d      	movlt	r3, #45	; 0x2d
 8005e62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e66:	487f      	ldr	r0, [pc, #508]	; (8006064 <_printf_float+0x2e8>)
 8005e68:	4b7f      	ldr	r3, [pc, #508]	; (8006068 <_printf_float+0x2ec>)
 8005e6a:	e7d1      	b.n	8005e10 <_printf_float+0x94>
 8005e6c:	6863      	ldr	r3, [r4, #4]
 8005e6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e72:	9206      	str	r2, [sp, #24]
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	d13f      	bne.n	8005ef8 <_printf_float+0x17c>
 8005e78:	2306      	movs	r3, #6
 8005e7a:	6063      	str	r3, [r4, #4]
 8005e7c:	9b05      	ldr	r3, [sp, #20]
 8005e7e:	6861      	ldr	r1, [r4, #4]
 8005e80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e84:	2300      	movs	r3, #0
 8005e86:	9303      	str	r3, [sp, #12]
 8005e88:	ab0a      	add	r3, sp, #40	; 0x28
 8005e8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e8e:	ab09      	add	r3, sp, #36	; 0x24
 8005e90:	ec49 8b10 	vmov	d0, r8, r9
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	6022      	str	r2, [r4, #0]
 8005e98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	f7ff fecd 	bl	8005c3c <__cvt>
 8005ea2:	9b06      	ldr	r3, [sp, #24]
 8005ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ea6:	2b47      	cmp	r3, #71	; 0x47
 8005ea8:	4680      	mov	r8, r0
 8005eaa:	d108      	bne.n	8005ebe <_printf_float+0x142>
 8005eac:	1cc8      	adds	r0, r1, #3
 8005eae:	db02      	blt.n	8005eb6 <_printf_float+0x13a>
 8005eb0:	6863      	ldr	r3, [r4, #4]
 8005eb2:	4299      	cmp	r1, r3
 8005eb4:	dd41      	ble.n	8005f3a <_printf_float+0x1be>
 8005eb6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005eba:	fa5f fb8b 	uxtb.w	fp, fp
 8005ebe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ec2:	d820      	bhi.n	8005f06 <_printf_float+0x18a>
 8005ec4:	3901      	subs	r1, #1
 8005ec6:	465a      	mov	r2, fp
 8005ec8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ecc:	9109      	str	r1, [sp, #36]	; 0x24
 8005ece:	f7ff ff17 	bl	8005d00 <__exponent>
 8005ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ed4:	1813      	adds	r3, r2, r0
 8005ed6:	2a01      	cmp	r2, #1
 8005ed8:	4681      	mov	r9, r0
 8005eda:	6123      	str	r3, [r4, #16]
 8005edc:	dc02      	bgt.n	8005ee4 <_printf_float+0x168>
 8005ede:	6822      	ldr	r2, [r4, #0]
 8005ee0:	07d2      	lsls	r2, r2, #31
 8005ee2:	d501      	bpl.n	8005ee8 <_printf_float+0x16c>
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	6123      	str	r3, [r4, #16]
 8005ee8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d09c      	beq.n	8005e2a <_printf_float+0xae>
 8005ef0:	232d      	movs	r3, #45	; 0x2d
 8005ef2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ef6:	e798      	b.n	8005e2a <_printf_float+0xae>
 8005ef8:	9a06      	ldr	r2, [sp, #24]
 8005efa:	2a47      	cmp	r2, #71	; 0x47
 8005efc:	d1be      	bne.n	8005e7c <_printf_float+0x100>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1bc      	bne.n	8005e7c <_printf_float+0x100>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e7b9      	b.n	8005e7a <_printf_float+0xfe>
 8005f06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005f0a:	d118      	bne.n	8005f3e <_printf_float+0x1c2>
 8005f0c:	2900      	cmp	r1, #0
 8005f0e:	6863      	ldr	r3, [r4, #4]
 8005f10:	dd0b      	ble.n	8005f2a <_printf_float+0x1ae>
 8005f12:	6121      	str	r1, [r4, #16]
 8005f14:	b913      	cbnz	r3, 8005f1c <_printf_float+0x1a0>
 8005f16:	6822      	ldr	r2, [r4, #0]
 8005f18:	07d0      	lsls	r0, r2, #31
 8005f1a:	d502      	bpl.n	8005f22 <_printf_float+0x1a6>
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	440b      	add	r3, r1
 8005f20:	6123      	str	r3, [r4, #16]
 8005f22:	65a1      	str	r1, [r4, #88]	; 0x58
 8005f24:	f04f 0900 	mov.w	r9, #0
 8005f28:	e7de      	b.n	8005ee8 <_printf_float+0x16c>
 8005f2a:	b913      	cbnz	r3, 8005f32 <_printf_float+0x1b6>
 8005f2c:	6822      	ldr	r2, [r4, #0]
 8005f2e:	07d2      	lsls	r2, r2, #31
 8005f30:	d501      	bpl.n	8005f36 <_printf_float+0x1ba>
 8005f32:	3302      	adds	r3, #2
 8005f34:	e7f4      	b.n	8005f20 <_printf_float+0x1a4>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e7f2      	b.n	8005f20 <_printf_float+0x1a4>
 8005f3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f40:	4299      	cmp	r1, r3
 8005f42:	db05      	blt.n	8005f50 <_printf_float+0x1d4>
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	6121      	str	r1, [r4, #16]
 8005f48:	07d8      	lsls	r0, r3, #31
 8005f4a:	d5ea      	bpl.n	8005f22 <_printf_float+0x1a6>
 8005f4c:	1c4b      	adds	r3, r1, #1
 8005f4e:	e7e7      	b.n	8005f20 <_printf_float+0x1a4>
 8005f50:	2900      	cmp	r1, #0
 8005f52:	bfd4      	ite	le
 8005f54:	f1c1 0202 	rsble	r2, r1, #2
 8005f58:	2201      	movgt	r2, #1
 8005f5a:	4413      	add	r3, r2
 8005f5c:	e7e0      	b.n	8005f20 <_printf_float+0x1a4>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	055a      	lsls	r2, r3, #21
 8005f62:	d407      	bmi.n	8005f74 <_printf_float+0x1f8>
 8005f64:	6923      	ldr	r3, [r4, #16]
 8005f66:	4642      	mov	r2, r8
 8005f68:	4631      	mov	r1, r6
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	47b8      	blx	r7
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d12c      	bne.n	8005fcc <_printf_float+0x250>
 8005f72:	e764      	b.n	8005e3e <_printf_float+0xc2>
 8005f74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f78:	f240 80e0 	bls.w	800613c <_printf_float+0x3c0>
 8005f7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f80:	2200      	movs	r2, #0
 8005f82:	2300      	movs	r3, #0
 8005f84:	f7fa fdc0 	bl	8000b08 <__aeabi_dcmpeq>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	d034      	beq.n	8005ff6 <_printf_float+0x27a>
 8005f8c:	4a37      	ldr	r2, [pc, #220]	; (800606c <_printf_float+0x2f0>)
 8005f8e:	2301      	movs	r3, #1
 8005f90:	4631      	mov	r1, r6
 8005f92:	4628      	mov	r0, r5
 8005f94:	47b8      	blx	r7
 8005f96:	3001      	adds	r0, #1
 8005f98:	f43f af51 	beq.w	8005e3e <_printf_float+0xc2>
 8005f9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	db02      	blt.n	8005faa <_printf_float+0x22e>
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	07d8      	lsls	r0, r3, #31
 8005fa8:	d510      	bpl.n	8005fcc <_printf_float+0x250>
 8005faa:	ee18 3a10 	vmov	r3, s16
 8005fae:	4652      	mov	r2, sl
 8005fb0:	4631      	mov	r1, r6
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	47b8      	blx	r7
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	f43f af41 	beq.w	8005e3e <_printf_float+0xc2>
 8005fbc:	f04f 0800 	mov.w	r8, #0
 8005fc0:	f104 091a 	add.w	r9, r4, #26
 8005fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	4543      	cmp	r3, r8
 8005fca:	dc09      	bgt.n	8005fe0 <_printf_float+0x264>
 8005fcc:	6823      	ldr	r3, [r4, #0]
 8005fce:	079b      	lsls	r3, r3, #30
 8005fd0:	f100 8105 	bmi.w	80061de <_printf_float+0x462>
 8005fd4:	68e0      	ldr	r0, [r4, #12]
 8005fd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fd8:	4298      	cmp	r0, r3
 8005fda:	bfb8      	it	lt
 8005fdc:	4618      	movlt	r0, r3
 8005fde:	e730      	b.n	8005e42 <_printf_float+0xc6>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	464a      	mov	r2, r9
 8005fe4:	4631      	mov	r1, r6
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	47b8      	blx	r7
 8005fea:	3001      	adds	r0, #1
 8005fec:	f43f af27 	beq.w	8005e3e <_printf_float+0xc2>
 8005ff0:	f108 0801 	add.w	r8, r8, #1
 8005ff4:	e7e6      	b.n	8005fc4 <_printf_float+0x248>
 8005ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	dc39      	bgt.n	8006070 <_printf_float+0x2f4>
 8005ffc:	4a1b      	ldr	r2, [pc, #108]	; (800606c <_printf_float+0x2f0>)
 8005ffe:	2301      	movs	r3, #1
 8006000:	4631      	mov	r1, r6
 8006002:	4628      	mov	r0, r5
 8006004:	47b8      	blx	r7
 8006006:	3001      	adds	r0, #1
 8006008:	f43f af19 	beq.w	8005e3e <_printf_float+0xc2>
 800600c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006010:	4313      	orrs	r3, r2
 8006012:	d102      	bne.n	800601a <_printf_float+0x29e>
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	07d9      	lsls	r1, r3, #31
 8006018:	d5d8      	bpl.n	8005fcc <_printf_float+0x250>
 800601a:	ee18 3a10 	vmov	r3, s16
 800601e:	4652      	mov	r2, sl
 8006020:	4631      	mov	r1, r6
 8006022:	4628      	mov	r0, r5
 8006024:	47b8      	blx	r7
 8006026:	3001      	adds	r0, #1
 8006028:	f43f af09 	beq.w	8005e3e <_printf_float+0xc2>
 800602c:	f04f 0900 	mov.w	r9, #0
 8006030:	f104 0a1a 	add.w	sl, r4, #26
 8006034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006036:	425b      	negs	r3, r3
 8006038:	454b      	cmp	r3, r9
 800603a:	dc01      	bgt.n	8006040 <_printf_float+0x2c4>
 800603c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800603e:	e792      	b.n	8005f66 <_printf_float+0x1ea>
 8006040:	2301      	movs	r3, #1
 8006042:	4652      	mov	r2, sl
 8006044:	4631      	mov	r1, r6
 8006046:	4628      	mov	r0, r5
 8006048:	47b8      	blx	r7
 800604a:	3001      	adds	r0, #1
 800604c:	f43f aef7 	beq.w	8005e3e <_printf_float+0xc2>
 8006050:	f109 0901 	add.w	r9, r9, #1
 8006054:	e7ee      	b.n	8006034 <_printf_float+0x2b8>
 8006056:	bf00      	nop
 8006058:	7fefffff 	.word	0x7fefffff
 800605c:	080082b1 	.word	0x080082b1
 8006060:	080082b5 	.word	0x080082b5
 8006064:	080082bd 	.word	0x080082bd
 8006068:	080082b9 	.word	0x080082b9
 800606c:	080082c1 	.word	0x080082c1
 8006070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006072:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006074:	429a      	cmp	r2, r3
 8006076:	bfa8      	it	ge
 8006078:	461a      	movge	r2, r3
 800607a:	2a00      	cmp	r2, #0
 800607c:	4691      	mov	r9, r2
 800607e:	dc37      	bgt.n	80060f0 <_printf_float+0x374>
 8006080:	f04f 0b00 	mov.w	fp, #0
 8006084:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006088:	f104 021a 	add.w	r2, r4, #26
 800608c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800608e:	9305      	str	r3, [sp, #20]
 8006090:	eba3 0309 	sub.w	r3, r3, r9
 8006094:	455b      	cmp	r3, fp
 8006096:	dc33      	bgt.n	8006100 <_printf_float+0x384>
 8006098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800609c:	429a      	cmp	r2, r3
 800609e:	db3b      	blt.n	8006118 <_printf_float+0x39c>
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	07da      	lsls	r2, r3, #31
 80060a4:	d438      	bmi.n	8006118 <_printf_float+0x39c>
 80060a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060a8:	9b05      	ldr	r3, [sp, #20]
 80060aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	eba2 0901 	sub.w	r9, r2, r1
 80060b2:	4599      	cmp	r9, r3
 80060b4:	bfa8      	it	ge
 80060b6:	4699      	movge	r9, r3
 80060b8:	f1b9 0f00 	cmp.w	r9, #0
 80060bc:	dc35      	bgt.n	800612a <_printf_float+0x3ae>
 80060be:	f04f 0800 	mov.w	r8, #0
 80060c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80060c6:	f104 0a1a 	add.w	sl, r4, #26
 80060ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060ce:	1a9b      	subs	r3, r3, r2
 80060d0:	eba3 0309 	sub.w	r3, r3, r9
 80060d4:	4543      	cmp	r3, r8
 80060d6:	f77f af79 	ble.w	8005fcc <_printf_float+0x250>
 80060da:	2301      	movs	r3, #1
 80060dc:	4652      	mov	r2, sl
 80060de:	4631      	mov	r1, r6
 80060e0:	4628      	mov	r0, r5
 80060e2:	47b8      	blx	r7
 80060e4:	3001      	adds	r0, #1
 80060e6:	f43f aeaa 	beq.w	8005e3e <_printf_float+0xc2>
 80060ea:	f108 0801 	add.w	r8, r8, #1
 80060ee:	e7ec      	b.n	80060ca <_printf_float+0x34e>
 80060f0:	4613      	mov	r3, r2
 80060f2:	4631      	mov	r1, r6
 80060f4:	4642      	mov	r2, r8
 80060f6:	4628      	mov	r0, r5
 80060f8:	47b8      	blx	r7
 80060fa:	3001      	adds	r0, #1
 80060fc:	d1c0      	bne.n	8006080 <_printf_float+0x304>
 80060fe:	e69e      	b.n	8005e3e <_printf_float+0xc2>
 8006100:	2301      	movs	r3, #1
 8006102:	4631      	mov	r1, r6
 8006104:	4628      	mov	r0, r5
 8006106:	9205      	str	r2, [sp, #20]
 8006108:	47b8      	blx	r7
 800610a:	3001      	adds	r0, #1
 800610c:	f43f ae97 	beq.w	8005e3e <_printf_float+0xc2>
 8006110:	9a05      	ldr	r2, [sp, #20]
 8006112:	f10b 0b01 	add.w	fp, fp, #1
 8006116:	e7b9      	b.n	800608c <_printf_float+0x310>
 8006118:	ee18 3a10 	vmov	r3, s16
 800611c:	4652      	mov	r2, sl
 800611e:	4631      	mov	r1, r6
 8006120:	4628      	mov	r0, r5
 8006122:	47b8      	blx	r7
 8006124:	3001      	adds	r0, #1
 8006126:	d1be      	bne.n	80060a6 <_printf_float+0x32a>
 8006128:	e689      	b.n	8005e3e <_printf_float+0xc2>
 800612a:	9a05      	ldr	r2, [sp, #20]
 800612c:	464b      	mov	r3, r9
 800612e:	4442      	add	r2, r8
 8006130:	4631      	mov	r1, r6
 8006132:	4628      	mov	r0, r5
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	d1c1      	bne.n	80060be <_printf_float+0x342>
 800613a:	e680      	b.n	8005e3e <_printf_float+0xc2>
 800613c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800613e:	2a01      	cmp	r2, #1
 8006140:	dc01      	bgt.n	8006146 <_printf_float+0x3ca>
 8006142:	07db      	lsls	r3, r3, #31
 8006144:	d538      	bpl.n	80061b8 <_printf_float+0x43c>
 8006146:	2301      	movs	r3, #1
 8006148:	4642      	mov	r2, r8
 800614a:	4631      	mov	r1, r6
 800614c:	4628      	mov	r0, r5
 800614e:	47b8      	blx	r7
 8006150:	3001      	adds	r0, #1
 8006152:	f43f ae74 	beq.w	8005e3e <_printf_float+0xc2>
 8006156:	ee18 3a10 	vmov	r3, s16
 800615a:	4652      	mov	r2, sl
 800615c:	4631      	mov	r1, r6
 800615e:	4628      	mov	r0, r5
 8006160:	47b8      	blx	r7
 8006162:	3001      	adds	r0, #1
 8006164:	f43f ae6b 	beq.w	8005e3e <_printf_float+0xc2>
 8006168:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800616c:	2200      	movs	r2, #0
 800616e:	2300      	movs	r3, #0
 8006170:	f7fa fcca 	bl	8000b08 <__aeabi_dcmpeq>
 8006174:	b9d8      	cbnz	r0, 80061ae <_printf_float+0x432>
 8006176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006178:	f108 0201 	add.w	r2, r8, #1
 800617c:	3b01      	subs	r3, #1
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	d10e      	bne.n	80061a6 <_printf_float+0x42a>
 8006188:	e659      	b.n	8005e3e <_printf_float+0xc2>
 800618a:	2301      	movs	r3, #1
 800618c:	4652      	mov	r2, sl
 800618e:	4631      	mov	r1, r6
 8006190:	4628      	mov	r0, r5
 8006192:	47b8      	blx	r7
 8006194:	3001      	adds	r0, #1
 8006196:	f43f ae52 	beq.w	8005e3e <_printf_float+0xc2>
 800619a:	f108 0801 	add.w	r8, r8, #1
 800619e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061a0:	3b01      	subs	r3, #1
 80061a2:	4543      	cmp	r3, r8
 80061a4:	dcf1      	bgt.n	800618a <_printf_float+0x40e>
 80061a6:	464b      	mov	r3, r9
 80061a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80061ac:	e6dc      	b.n	8005f68 <_printf_float+0x1ec>
 80061ae:	f04f 0800 	mov.w	r8, #0
 80061b2:	f104 0a1a 	add.w	sl, r4, #26
 80061b6:	e7f2      	b.n	800619e <_printf_float+0x422>
 80061b8:	2301      	movs	r3, #1
 80061ba:	4642      	mov	r2, r8
 80061bc:	e7df      	b.n	800617e <_printf_float+0x402>
 80061be:	2301      	movs	r3, #1
 80061c0:	464a      	mov	r2, r9
 80061c2:	4631      	mov	r1, r6
 80061c4:	4628      	mov	r0, r5
 80061c6:	47b8      	blx	r7
 80061c8:	3001      	adds	r0, #1
 80061ca:	f43f ae38 	beq.w	8005e3e <_printf_float+0xc2>
 80061ce:	f108 0801 	add.w	r8, r8, #1
 80061d2:	68e3      	ldr	r3, [r4, #12]
 80061d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061d6:	1a5b      	subs	r3, r3, r1
 80061d8:	4543      	cmp	r3, r8
 80061da:	dcf0      	bgt.n	80061be <_printf_float+0x442>
 80061dc:	e6fa      	b.n	8005fd4 <_printf_float+0x258>
 80061de:	f04f 0800 	mov.w	r8, #0
 80061e2:	f104 0919 	add.w	r9, r4, #25
 80061e6:	e7f4      	b.n	80061d2 <_printf_float+0x456>

080061e8 <_printf_common>:
 80061e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061ec:	4616      	mov	r6, r2
 80061ee:	4699      	mov	r9, r3
 80061f0:	688a      	ldr	r2, [r1, #8]
 80061f2:	690b      	ldr	r3, [r1, #16]
 80061f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061f8:	4293      	cmp	r3, r2
 80061fa:	bfb8      	it	lt
 80061fc:	4613      	movlt	r3, r2
 80061fe:	6033      	str	r3, [r6, #0]
 8006200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006204:	4607      	mov	r7, r0
 8006206:	460c      	mov	r4, r1
 8006208:	b10a      	cbz	r2, 800620e <_printf_common+0x26>
 800620a:	3301      	adds	r3, #1
 800620c:	6033      	str	r3, [r6, #0]
 800620e:	6823      	ldr	r3, [r4, #0]
 8006210:	0699      	lsls	r1, r3, #26
 8006212:	bf42      	ittt	mi
 8006214:	6833      	ldrmi	r3, [r6, #0]
 8006216:	3302      	addmi	r3, #2
 8006218:	6033      	strmi	r3, [r6, #0]
 800621a:	6825      	ldr	r5, [r4, #0]
 800621c:	f015 0506 	ands.w	r5, r5, #6
 8006220:	d106      	bne.n	8006230 <_printf_common+0x48>
 8006222:	f104 0a19 	add.w	sl, r4, #25
 8006226:	68e3      	ldr	r3, [r4, #12]
 8006228:	6832      	ldr	r2, [r6, #0]
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	42ab      	cmp	r3, r5
 800622e:	dc26      	bgt.n	800627e <_printf_common+0x96>
 8006230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006234:	1e13      	subs	r3, r2, #0
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	bf18      	it	ne
 800623a:	2301      	movne	r3, #1
 800623c:	0692      	lsls	r2, r2, #26
 800623e:	d42b      	bmi.n	8006298 <_printf_common+0xb0>
 8006240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006244:	4649      	mov	r1, r9
 8006246:	4638      	mov	r0, r7
 8006248:	47c0      	blx	r8
 800624a:	3001      	adds	r0, #1
 800624c:	d01e      	beq.n	800628c <_printf_common+0xa4>
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	68e5      	ldr	r5, [r4, #12]
 8006252:	6832      	ldr	r2, [r6, #0]
 8006254:	f003 0306 	and.w	r3, r3, #6
 8006258:	2b04      	cmp	r3, #4
 800625a:	bf08      	it	eq
 800625c:	1aad      	subeq	r5, r5, r2
 800625e:	68a3      	ldr	r3, [r4, #8]
 8006260:	6922      	ldr	r2, [r4, #16]
 8006262:	bf0c      	ite	eq
 8006264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006268:	2500      	movne	r5, #0
 800626a:	4293      	cmp	r3, r2
 800626c:	bfc4      	itt	gt
 800626e:	1a9b      	subgt	r3, r3, r2
 8006270:	18ed      	addgt	r5, r5, r3
 8006272:	2600      	movs	r6, #0
 8006274:	341a      	adds	r4, #26
 8006276:	42b5      	cmp	r5, r6
 8006278:	d11a      	bne.n	80062b0 <_printf_common+0xc8>
 800627a:	2000      	movs	r0, #0
 800627c:	e008      	b.n	8006290 <_printf_common+0xa8>
 800627e:	2301      	movs	r3, #1
 8006280:	4652      	mov	r2, sl
 8006282:	4649      	mov	r1, r9
 8006284:	4638      	mov	r0, r7
 8006286:	47c0      	blx	r8
 8006288:	3001      	adds	r0, #1
 800628a:	d103      	bne.n	8006294 <_printf_common+0xac>
 800628c:	f04f 30ff 	mov.w	r0, #4294967295
 8006290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006294:	3501      	adds	r5, #1
 8006296:	e7c6      	b.n	8006226 <_printf_common+0x3e>
 8006298:	18e1      	adds	r1, r4, r3
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	2030      	movs	r0, #48	; 0x30
 800629e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062a2:	4422      	add	r2, r4
 80062a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062ac:	3302      	adds	r3, #2
 80062ae:	e7c7      	b.n	8006240 <_printf_common+0x58>
 80062b0:	2301      	movs	r3, #1
 80062b2:	4622      	mov	r2, r4
 80062b4:	4649      	mov	r1, r9
 80062b6:	4638      	mov	r0, r7
 80062b8:	47c0      	blx	r8
 80062ba:	3001      	adds	r0, #1
 80062bc:	d0e6      	beq.n	800628c <_printf_common+0xa4>
 80062be:	3601      	adds	r6, #1
 80062c0:	e7d9      	b.n	8006276 <_printf_common+0x8e>
	...

080062c4 <_printf_i>:
 80062c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062c8:	460c      	mov	r4, r1
 80062ca:	4691      	mov	r9, r2
 80062cc:	7e27      	ldrb	r7, [r4, #24]
 80062ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80062d0:	2f78      	cmp	r7, #120	; 0x78
 80062d2:	4680      	mov	r8, r0
 80062d4:	469a      	mov	sl, r3
 80062d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062da:	d807      	bhi.n	80062ec <_printf_i+0x28>
 80062dc:	2f62      	cmp	r7, #98	; 0x62
 80062de:	d80a      	bhi.n	80062f6 <_printf_i+0x32>
 80062e0:	2f00      	cmp	r7, #0
 80062e2:	f000 80d8 	beq.w	8006496 <_printf_i+0x1d2>
 80062e6:	2f58      	cmp	r7, #88	; 0x58
 80062e8:	f000 80a3 	beq.w	8006432 <_printf_i+0x16e>
 80062ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062f4:	e03a      	b.n	800636c <_printf_i+0xa8>
 80062f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062fa:	2b15      	cmp	r3, #21
 80062fc:	d8f6      	bhi.n	80062ec <_printf_i+0x28>
 80062fe:	a001      	add	r0, pc, #4	; (adr r0, 8006304 <_printf_i+0x40>)
 8006300:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006304:	0800635d 	.word	0x0800635d
 8006308:	08006371 	.word	0x08006371
 800630c:	080062ed 	.word	0x080062ed
 8006310:	080062ed 	.word	0x080062ed
 8006314:	080062ed 	.word	0x080062ed
 8006318:	080062ed 	.word	0x080062ed
 800631c:	08006371 	.word	0x08006371
 8006320:	080062ed 	.word	0x080062ed
 8006324:	080062ed 	.word	0x080062ed
 8006328:	080062ed 	.word	0x080062ed
 800632c:	080062ed 	.word	0x080062ed
 8006330:	0800647d 	.word	0x0800647d
 8006334:	080063a1 	.word	0x080063a1
 8006338:	0800645f 	.word	0x0800645f
 800633c:	080062ed 	.word	0x080062ed
 8006340:	080062ed 	.word	0x080062ed
 8006344:	0800649f 	.word	0x0800649f
 8006348:	080062ed 	.word	0x080062ed
 800634c:	080063a1 	.word	0x080063a1
 8006350:	080062ed 	.word	0x080062ed
 8006354:	080062ed 	.word	0x080062ed
 8006358:	08006467 	.word	0x08006467
 800635c:	680b      	ldr	r3, [r1, #0]
 800635e:	1d1a      	adds	r2, r3, #4
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	600a      	str	r2, [r1, #0]
 8006364:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800636c:	2301      	movs	r3, #1
 800636e:	e0a3      	b.n	80064b8 <_printf_i+0x1f4>
 8006370:	6825      	ldr	r5, [r4, #0]
 8006372:	6808      	ldr	r0, [r1, #0]
 8006374:	062e      	lsls	r6, r5, #24
 8006376:	f100 0304 	add.w	r3, r0, #4
 800637a:	d50a      	bpl.n	8006392 <_printf_i+0xce>
 800637c:	6805      	ldr	r5, [r0, #0]
 800637e:	600b      	str	r3, [r1, #0]
 8006380:	2d00      	cmp	r5, #0
 8006382:	da03      	bge.n	800638c <_printf_i+0xc8>
 8006384:	232d      	movs	r3, #45	; 0x2d
 8006386:	426d      	negs	r5, r5
 8006388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800638c:	485e      	ldr	r0, [pc, #376]	; (8006508 <_printf_i+0x244>)
 800638e:	230a      	movs	r3, #10
 8006390:	e019      	b.n	80063c6 <_printf_i+0x102>
 8006392:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006396:	6805      	ldr	r5, [r0, #0]
 8006398:	600b      	str	r3, [r1, #0]
 800639a:	bf18      	it	ne
 800639c:	b22d      	sxthne	r5, r5
 800639e:	e7ef      	b.n	8006380 <_printf_i+0xbc>
 80063a0:	680b      	ldr	r3, [r1, #0]
 80063a2:	6825      	ldr	r5, [r4, #0]
 80063a4:	1d18      	adds	r0, r3, #4
 80063a6:	6008      	str	r0, [r1, #0]
 80063a8:	0628      	lsls	r0, r5, #24
 80063aa:	d501      	bpl.n	80063b0 <_printf_i+0xec>
 80063ac:	681d      	ldr	r5, [r3, #0]
 80063ae:	e002      	b.n	80063b6 <_printf_i+0xf2>
 80063b0:	0669      	lsls	r1, r5, #25
 80063b2:	d5fb      	bpl.n	80063ac <_printf_i+0xe8>
 80063b4:	881d      	ldrh	r5, [r3, #0]
 80063b6:	4854      	ldr	r0, [pc, #336]	; (8006508 <_printf_i+0x244>)
 80063b8:	2f6f      	cmp	r7, #111	; 0x6f
 80063ba:	bf0c      	ite	eq
 80063bc:	2308      	moveq	r3, #8
 80063be:	230a      	movne	r3, #10
 80063c0:	2100      	movs	r1, #0
 80063c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063c6:	6866      	ldr	r6, [r4, #4]
 80063c8:	60a6      	str	r6, [r4, #8]
 80063ca:	2e00      	cmp	r6, #0
 80063cc:	bfa2      	ittt	ge
 80063ce:	6821      	ldrge	r1, [r4, #0]
 80063d0:	f021 0104 	bicge.w	r1, r1, #4
 80063d4:	6021      	strge	r1, [r4, #0]
 80063d6:	b90d      	cbnz	r5, 80063dc <_printf_i+0x118>
 80063d8:	2e00      	cmp	r6, #0
 80063da:	d04d      	beq.n	8006478 <_printf_i+0x1b4>
 80063dc:	4616      	mov	r6, r2
 80063de:	fbb5 f1f3 	udiv	r1, r5, r3
 80063e2:	fb03 5711 	mls	r7, r3, r1, r5
 80063e6:	5dc7      	ldrb	r7, [r0, r7]
 80063e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063ec:	462f      	mov	r7, r5
 80063ee:	42bb      	cmp	r3, r7
 80063f0:	460d      	mov	r5, r1
 80063f2:	d9f4      	bls.n	80063de <_printf_i+0x11a>
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d10b      	bne.n	8006410 <_printf_i+0x14c>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	07df      	lsls	r7, r3, #31
 80063fc:	d508      	bpl.n	8006410 <_printf_i+0x14c>
 80063fe:	6923      	ldr	r3, [r4, #16]
 8006400:	6861      	ldr	r1, [r4, #4]
 8006402:	4299      	cmp	r1, r3
 8006404:	bfde      	ittt	le
 8006406:	2330      	movle	r3, #48	; 0x30
 8006408:	f806 3c01 	strble.w	r3, [r6, #-1]
 800640c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006410:	1b92      	subs	r2, r2, r6
 8006412:	6122      	str	r2, [r4, #16]
 8006414:	f8cd a000 	str.w	sl, [sp]
 8006418:	464b      	mov	r3, r9
 800641a:	aa03      	add	r2, sp, #12
 800641c:	4621      	mov	r1, r4
 800641e:	4640      	mov	r0, r8
 8006420:	f7ff fee2 	bl	80061e8 <_printf_common>
 8006424:	3001      	adds	r0, #1
 8006426:	d14c      	bne.n	80064c2 <_printf_i+0x1fe>
 8006428:	f04f 30ff 	mov.w	r0, #4294967295
 800642c:	b004      	add	sp, #16
 800642e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006432:	4835      	ldr	r0, [pc, #212]	; (8006508 <_printf_i+0x244>)
 8006434:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	680e      	ldr	r6, [r1, #0]
 800643c:	061f      	lsls	r7, r3, #24
 800643e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006442:	600e      	str	r6, [r1, #0]
 8006444:	d514      	bpl.n	8006470 <_printf_i+0x1ac>
 8006446:	07d9      	lsls	r1, r3, #31
 8006448:	bf44      	itt	mi
 800644a:	f043 0320 	orrmi.w	r3, r3, #32
 800644e:	6023      	strmi	r3, [r4, #0]
 8006450:	b91d      	cbnz	r5, 800645a <_printf_i+0x196>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	f023 0320 	bic.w	r3, r3, #32
 8006458:	6023      	str	r3, [r4, #0]
 800645a:	2310      	movs	r3, #16
 800645c:	e7b0      	b.n	80063c0 <_printf_i+0xfc>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	f043 0320 	orr.w	r3, r3, #32
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	2378      	movs	r3, #120	; 0x78
 8006468:	4828      	ldr	r0, [pc, #160]	; (800650c <_printf_i+0x248>)
 800646a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800646e:	e7e3      	b.n	8006438 <_printf_i+0x174>
 8006470:	065e      	lsls	r6, r3, #25
 8006472:	bf48      	it	mi
 8006474:	b2ad      	uxthmi	r5, r5
 8006476:	e7e6      	b.n	8006446 <_printf_i+0x182>
 8006478:	4616      	mov	r6, r2
 800647a:	e7bb      	b.n	80063f4 <_printf_i+0x130>
 800647c:	680b      	ldr	r3, [r1, #0]
 800647e:	6826      	ldr	r6, [r4, #0]
 8006480:	6960      	ldr	r0, [r4, #20]
 8006482:	1d1d      	adds	r5, r3, #4
 8006484:	600d      	str	r5, [r1, #0]
 8006486:	0635      	lsls	r5, r6, #24
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	d501      	bpl.n	8006490 <_printf_i+0x1cc>
 800648c:	6018      	str	r0, [r3, #0]
 800648e:	e002      	b.n	8006496 <_printf_i+0x1d2>
 8006490:	0671      	lsls	r1, r6, #25
 8006492:	d5fb      	bpl.n	800648c <_printf_i+0x1c8>
 8006494:	8018      	strh	r0, [r3, #0]
 8006496:	2300      	movs	r3, #0
 8006498:	6123      	str	r3, [r4, #16]
 800649a:	4616      	mov	r6, r2
 800649c:	e7ba      	b.n	8006414 <_printf_i+0x150>
 800649e:	680b      	ldr	r3, [r1, #0]
 80064a0:	1d1a      	adds	r2, r3, #4
 80064a2:	600a      	str	r2, [r1, #0]
 80064a4:	681e      	ldr	r6, [r3, #0]
 80064a6:	6862      	ldr	r2, [r4, #4]
 80064a8:	2100      	movs	r1, #0
 80064aa:	4630      	mov	r0, r6
 80064ac:	f7f9 feb8 	bl	8000220 <memchr>
 80064b0:	b108      	cbz	r0, 80064b6 <_printf_i+0x1f2>
 80064b2:	1b80      	subs	r0, r0, r6
 80064b4:	6060      	str	r0, [r4, #4]
 80064b6:	6863      	ldr	r3, [r4, #4]
 80064b8:	6123      	str	r3, [r4, #16]
 80064ba:	2300      	movs	r3, #0
 80064bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064c0:	e7a8      	b.n	8006414 <_printf_i+0x150>
 80064c2:	6923      	ldr	r3, [r4, #16]
 80064c4:	4632      	mov	r2, r6
 80064c6:	4649      	mov	r1, r9
 80064c8:	4640      	mov	r0, r8
 80064ca:	47d0      	blx	sl
 80064cc:	3001      	adds	r0, #1
 80064ce:	d0ab      	beq.n	8006428 <_printf_i+0x164>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	079b      	lsls	r3, r3, #30
 80064d4:	d413      	bmi.n	80064fe <_printf_i+0x23a>
 80064d6:	68e0      	ldr	r0, [r4, #12]
 80064d8:	9b03      	ldr	r3, [sp, #12]
 80064da:	4298      	cmp	r0, r3
 80064dc:	bfb8      	it	lt
 80064de:	4618      	movlt	r0, r3
 80064e0:	e7a4      	b.n	800642c <_printf_i+0x168>
 80064e2:	2301      	movs	r3, #1
 80064e4:	4632      	mov	r2, r6
 80064e6:	4649      	mov	r1, r9
 80064e8:	4640      	mov	r0, r8
 80064ea:	47d0      	blx	sl
 80064ec:	3001      	adds	r0, #1
 80064ee:	d09b      	beq.n	8006428 <_printf_i+0x164>
 80064f0:	3501      	adds	r5, #1
 80064f2:	68e3      	ldr	r3, [r4, #12]
 80064f4:	9903      	ldr	r1, [sp, #12]
 80064f6:	1a5b      	subs	r3, r3, r1
 80064f8:	42ab      	cmp	r3, r5
 80064fa:	dcf2      	bgt.n	80064e2 <_printf_i+0x21e>
 80064fc:	e7eb      	b.n	80064d6 <_printf_i+0x212>
 80064fe:	2500      	movs	r5, #0
 8006500:	f104 0619 	add.w	r6, r4, #25
 8006504:	e7f5      	b.n	80064f2 <_printf_i+0x22e>
 8006506:	bf00      	nop
 8006508:	080082c3 	.word	0x080082c3
 800650c:	080082d4 	.word	0x080082d4

08006510 <iprintf>:
 8006510:	b40f      	push	{r0, r1, r2, r3}
 8006512:	4b0a      	ldr	r3, [pc, #40]	; (800653c <iprintf+0x2c>)
 8006514:	b513      	push	{r0, r1, r4, lr}
 8006516:	681c      	ldr	r4, [r3, #0]
 8006518:	b124      	cbz	r4, 8006524 <iprintf+0x14>
 800651a:	69a3      	ldr	r3, [r4, #24]
 800651c:	b913      	cbnz	r3, 8006524 <iprintf+0x14>
 800651e:	4620      	mov	r0, r4
 8006520:	f7ff f82e 	bl	8005580 <__sinit>
 8006524:	ab05      	add	r3, sp, #20
 8006526:	9a04      	ldr	r2, [sp, #16]
 8006528:	68a1      	ldr	r1, [r4, #8]
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	4620      	mov	r0, r4
 800652e:	f7ff fa55 	bl	80059dc <_vfiprintf_r>
 8006532:	b002      	add	sp, #8
 8006534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006538:	b004      	add	sp, #16
 800653a:	4770      	bx	lr
 800653c:	2000000c 	.word	0x2000000c

08006540 <_sbrk_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	4d06      	ldr	r5, [pc, #24]	; (800655c <_sbrk_r+0x1c>)
 8006544:	2300      	movs	r3, #0
 8006546:	4604      	mov	r4, r0
 8006548:	4608      	mov	r0, r1
 800654a:	602b      	str	r3, [r5, #0]
 800654c:	f7fb f956 	bl	80017fc <_sbrk>
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	d102      	bne.n	800655a <_sbrk_r+0x1a>
 8006554:	682b      	ldr	r3, [r5, #0]
 8006556:	b103      	cbz	r3, 800655a <_sbrk_r+0x1a>
 8006558:	6023      	str	r3, [r4, #0]
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	200009cc 	.word	0x200009cc

08006560 <__sread>:
 8006560:	b510      	push	{r4, lr}
 8006562:	460c      	mov	r4, r1
 8006564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006568:	f001 fb6c 	bl	8007c44 <_read_r>
 800656c:	2800      	cmp	r0, #0
 800656e:	bfab      	itete	ge
 8006570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006572:	89a3      	ldrhlt	r3, [r4, #12]
 8006574:	181b      	addge	r3, r3, r0
 8006576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800657a:	bfac      	ite	ge
 800657c:	6563      	strge	r3, [r4, #84]	; 0x54
 800657e:	81a3      	strhlt	r3, [r4, #12]
 8006580:	bd10      	pop	{r4, pc}

08006582 <__swrite>:
 8006582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006586:	461f      	mov	r7, r3
 8006588:	898b      	ldrh	r3, [r1, #12]
 800658a:	05db      	lsls	r3, r3, #23
 800658c:	4605      	mov	r5, r0
 800658e:	460c      	mov	r4, r1
 8006590:	4616      	mov	r6, r2
 8006592:	d505      	bpl.n	80065a0 <__swrite+0x1e>
 8006594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006598:	2302      	movs	r3, #2
 800659a:	2200      	movs	r2, #0
 800659c:	f000 ffa6 	bl	80074ec <_lseek_r>
 80065a0:	89a3      	ldrh	r3, [r4, #12]
 80065a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065aa:	81a3      	strh	r3, [r4, #12]
 80065ac:	4632      	mov	r2, r6
 80065ae:	463b      	mov	r3, r7
 80065b0:	4628      	mov	r0, r5
 80065b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065b6:	f000 b869 	b.w	800668c <_write_r>

080065ba <__sseek>:
 80065ba:	b510      	push	{r4, lr}
 80065bc:	460c      	mov	r4, r1
 80065be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c2:	f000 ff93 	bl	80074ec <_lseek_r>
 80065c6:	1c43      	adds	r3, r0, #1
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	bf15      	itete	ne
 80065cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80065ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065d6:	81a3      	strheq	r3, [r4, #12]
 80065d8:	bf18      	it	ne
 80065da:	81a3      	strhne	r3, [r4, #12]
 80065dc:	bd10      	pop	{r4, pc}

080065de <__sclose>:
 80065de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e2:	f000 b8d3 	b.w	800678c <_close_r>
	...

080065e8 <__swbuf_r>:
 80065e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ea:	460e      	mov	r6, r1
 80065ec:	4614      	mov	r4, r2
 80065ee:	4605      	mov	r5, r0
 80065f0:	b118      	cbz	r0, 80065fa <__swbuf_r+0x12>
 80065f2:	6983      	ldr	r3, [r0, #24]
 80065f4:	b90b      	cbnz	r3, 80065fa <__swbuf_r+0x12>
 80065f6:	f7fe ffc3 	bl	8005580 <__sinit>
 80065fa:	4b21      	ldr	r3, [pc, #132]	; (8006680 <__swbuf_r+0x98>)
 80065fc:	429c      	cmp	r4, r3
 80065fe:	d12b      	bne.n	8006658 <__swbuf_r+0x70>
 8006600:	686c      	ldr	r4, [r5, #4]
 8006602:	69a3      	ldr	r3, [r4, #24]
 8006604:	60a3      	str	r3, [r4, #8]
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	071a      	lsls	r2, r3, #28
 800660a:	d52f      	bpl.n	800666c <__swbuf_r+0x84>
 800660c:	6923      	ldr	r3, [r4, #16]
 800660e:	b36b      	cbz	r3, 800666c <__swbuf_r+0x84>
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	6820      	ldr	r0, [r4, #0]
 8006614:	1ac0      	subs	r0, r0, r3
 8006616:	6963      	ldr	r3, [r4, #20]
 8006618:	b2f6      	uxtb	r6, r6
 800661a:	4283      	cmp	r3, r0
 800661c:	4637      	mov	r7, r6
 800661e:	dc04      	bgt.n	800662a <__swbuf_r+0x42>
 8006620:	4621      	mov	r1, r4
 8006622:	4628      	mov	r0, r5
 8006624:	f7fe ff18 	bl	8005458 <_fflush_r>
 8006628:	bb30      	cbnz	r0, 8006678 <__swbuf_r+0x90>
 800662a:	68a3      	ldr	r3, [r4, #8]
 800662c:	3b01      	subs	r3, #1
 800662e:	60a3      	str	r3, [r4, #8]
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	6022      	str	r2, [r4, #0]
 8006636:	701e      	strb	r6, [r3, #0]
 8006638:	6963      	ldr	r3, [r4, #20]
 800663a:	3001      	adds	r0, #1
 800663c:	4283      	cmp	r3, r0
 800663e:	d004      	beq.n	800664a <__swbuf_r+0x62>
 8006640:	89a3      	ldrh	r3, [r4, #12]
 8006642:	07db      	lsls	r3, r3, #31
 8006644:	d506      	bpl.n	8006654 <__swbuf_r+0x6c>
 8006646:	2e0a      	cmp	r6, #10
 8006648:	d104      	bne.n	8006654 <__swbuf_r+0x6c>
 800664a:	4621      	mov	r1, r4
 800664c:	4628      	mov	r0, r5
 800664e:	f7fe ff03 	bl	8005458 <_fflush_r>
 8006652:	b988      	cbnz	r0, 8006678 <__swbuf_r+0x90>
 8006654:	4638      	mov	r0, r7
 8006656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006658:	4b0a      	ldr	r3, [pc, #40]	; (8006684 <__swbuf_r+0x9c>)
 800665a:	429c      	cmp	r4, r3
 800665c:	d101      	bne.n	8006662 <__swbuf_r+0x7a>
 800665e:	68ac      	ldr	r4, [r5, #8]
 8006660:	e7cf      	b.n	8006602 <__swbuf_r+0x1a>
 8006662:	4b09      	ldr	r3, [pc, #36]	; (8006688 <__swbuf_r+0xa0>)
 8006664:	429c      	cmp	r4, r3
 8006666:	bf08      	it	eq
 8006668:	68ec      	ldreq	r4, [r5, #12]
 800666a:	e7ca      	b.n	8006602 <__swbuf_r+0x1a>
 800666c:	4621      	mov	r1, r4
 800666e:	4628      	mov	r0, r5
 8006670:	f000 f81e 	bl	80066b0 <__swsetup_r>
 8006674:	2800      	cmp	r0, #0
 8006676:	d0cb      	beq.n	8006610 <__swbuf_r+0x28>
 8006678:	f04f 37ff 	mov.w	r7, #4294967295
 800667c:	e7ea      	b.n	8006654 <__swbuf_r+0x6c>
 800667e:	bf00      	nop
 8006680:	0800825c 	.word	0x0800825c
 8006684:	0800827c 	.word	0x0800827c
 8006688:	0800823c 	.word	0x0800823c

0800668c <_write_r>:
 800668c:	b538      	push	{r3, r4, r5, lr}
 800668e:	4d07      	ldr	r5, [pc, #28]	; (80066ac <_write_r+0x20>)
 8006690:	4604      	mov	r4, r0
 8006692:	4608      	mov	r0, r1
 8006694:	4611      	mov	r1, r2
 8006696:	2200      	movs	r2, #0
 8006698:	602a      	str	r2, [r5, #0]
 800669a:	461a      	mov	r2, r3
 800669c:	f7fb f85d 	bl	800175a <_write>
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	d102      	bne.n	80066aa <_write_r+0x1e>
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	b103      	cbz	r3, 80066aa <_write_r+0x1e>
 80066a8:	6023      	str	r3, [r4, #0]
 80066aa:	bd38      	pop	{r3, r4, r5, pc}
 80066ac:	200009cc 	.word	0x200009cc

080066b0 <__swsetup_r>:
 80066b0:	4b32      	ldr	r3, [pc, #200]	; (800677c <__swsetup_r+0xcc>)
 80066b2:	b570      	push	{r4, r5, r6, lr}
 80066b4:	681d      	ldr	r5, [r3, #0]
 80066b6:	4606      	mov	r6, r0
 80066b8:	460c      	mov	r4, r1
 80066ba:	b125      	cbz	r5, 80066c6 <__swsetup_r+0x16>
 80066bc:	69ab      	ldr	r3, [r5, #24]
 80066be:	b913      	cbnz	r3, 80066c6 <__swsetup_r+0x16>
 80066c0:	4628      	mov	r0, r5
 80066c2:	f7fe ff5d 	bl	8005580 <__sinit>
 80066c6:	4b2e      	ldr	r3, [pc, #184]	; (8006780 <__swsetup_r+0xd0>)
 80066c8:	429c      	cmp	r4, r3
 80066ca:	d10f      	bne.n	80066ec <__swsetup_r+0x3c>
 80066cc:	686c      	ldr	r4, [r5, #4]
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066d4:	0719      	lsls	r1, r3, #28
 80066d6:	d42c      	bmi.n	8006732 <__swsetup_r+0x82>
 80066d8:	06dd      	lsls	r5, r3, #27
 80066da:	d411      	bmi.n	8006700 <__swsetup_r+0x50>
 80066dc:	2309      	movs	r3, #9
 80066de:	6033      	str	r3, [r6, #0]
 80066e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066e4:	81a3      	strh	r3, [r4, #12]
 80066e6:	f04f 30ff 	mov.w	r0, #4294967295
 80066ea:	e03e      	b.n	800676a <__swsetup_r+0xba>
 80066ec:	4b25      	ldr	r3, [pc, #148]	; (8006784 <__swsetup_r+0xd4>)
 80066ee:	429c      	cmp	r4, r3
 80066f0:	d101      	bne.n	80066f6 <__swsetup_r+0x46>
 80066f2:	68ac      	ldr	r4, [r5, #8]
 80066f4:	e7eb      	b.n	80066ce <__swsetup_r+0x1e>
 80066f6:	4b24      	ldr	r3, [pc, #144]	; (8006788 <__swsetup_r+0xd8>)
 80066f8:	429c      	cmp	r4, r3
 80066fa:	bf08      	it	eq
 80066fc:	68ec      	ldreq	r4, [r5, #12]
 80066fe:	e7e6      	b.n	80066ce <__swsetup_r+0x1e>
 8006700:	0758      	lsls	r0, r3, #29
 8006702:	d512      	bpl.n	800672a <__swsetup_r+0x7a>
 8006704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006706:	b141      	cbz	r1, 800671a <__swsetup_r+0x6a>
 8006708:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800670c:	4299      	cmp	r1, r3
 800670e:	d002      	beq.n	8006716 <__swsetup_r+0x66>
 8006710:	4630      	mov	r0, r6
 8006712:	f7ff f88f 	bl	8005834 <_free_r>
 8006716:	2300      	movs	r3, #0
 8006718:	6363      	str	r3, [r4, #52]	; 0x34
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006720:	81a3      	strh	r3, [r4, #12]
 8006722:	2300      	movs	r3, #0
 8006724:	6063      	str	r3, [r4, #4]
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	89a3      	ldrh	r3, [r4, #12]
 800672c:	f043 0308 	orr.w	r3, r3, #8
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	6923      	ldr	r3, [r4, #16]
 8006734:	b94b      	cbnz	r3, 800674a <__swsetup_r+0x9a>
 8006736:	89a3      	ldrh	r3, [r4, #12]
 8006738:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800673c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006740:	d003      	beq.n	800674a <__swsetup_r+0x9a>
 8006742:	4621      	mov	r1, r4
 8006744:	4630      	mov	r0, r6
 8006746:	f7ff f817 	bl	8005778 <__smakebuf_r>
 800674a:	89a0      	ldrh	r0, [r4, #12]
 800674c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006750:	f010 0301 	ands.w	r3, r0, #1
 8006754:	d00a      	beq.n	800676c <__swsetup_r+0xbc>
 8006756:	2300      	movs	r3, #0
 8006758:	60a3      	str	r3, [r4, #8]
 800675a:	6963      	ldr	r3, [r4, #20]
 800675c:	425b      	negs	r3, r3
 800675e:	61a3      	str	r3, [r4, #24]
 8006760:	6923      	ldr	r3, [r4, #16]
 8006762:	b943      	cbnz	r3, 8006776 <__swsetup_r+0xc6>
 8006764:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006768:	d1ba      	bne.n	80066e0 <__swsetup_r+0x30>
 800676a:	bd70      	pop	{r4, r5, r6, pc}
 800676c:	0781      	lsls	r1, r0, #30
 800676e:	bf58      	it	pl
 8006770:	6963      	ldrpl	r3, [r4, #20]
 8006772:	60a3      	str	r3, [r4, #8]
 8006774:	e7f4      	b.n	8006760 <__swsetup_r+0xb0>
 8006776:	2000      	movs	r0, #0
 8006778:	e7f7      	b.n	800676a <__swsetup_r+0xba>
 800677a:	bf00      	nop
 800677c:	2000000c 	.word	0x2000000c
 8006780:	0800825c 	.word	0x0800825c
 8006784:	0800827c 	.word	0x0800827c
 8006788:	0800823c 	.word	0x0800823c

0800678c <_close_r>:
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	4d06      	ldr	r5, [pc, #24]	; (80067a8 <_close_r+0x1c>)
 8006790:	2300      	movs	r3, #0
 8006792:	4604      	mov	r4, r0
 8006794:	4608      	mov	r0, r1
 8006796:	602b      	str	r3, [r5, #0]
 8006798:	f7fa fffb 	bl	8001792 <_close>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_close_r+0x1a>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_close_r+0x1a>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	200009cc 	.word	0x200009cc

080067ac <quorem>:
 80067ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b0:	6903      	ldr	r3, [r0, #16]
 80067b2:	690c      	ldr	r4, [r1, #16]
 80067b4:	42a3      	cmp	r3, r4
 80067b6:	4607      	mov	r7, r0
 80067b8:	f2c0 8081 	blt.w	80068be <quorem+0x112>
 80067bc:	3c01      	subs	r4, #1
 80067be:	f101 0814 	add.w	r8, r1, #20
 80067c2:	f100 0514 	add.w	r5, r0, #20
 80067c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067ca:	9301      	str	r3, [sp, #4]
 80067cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067d4:	3301      	adds	r3, #1
 80067d6:	429a      	cmp	r2, r3
 80067d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80067dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80067e4:	d331      	bcc.n	800684a <quorem+0x9e>
 80067e6:	f04f 0e00 	mov.w	lr, #0
 80067ea:	4640      	mov	r0, r8
 80067ec:	46ac      	mov	ip, r5
 80067ee:	46f2      	mov	sl, lr
 80067f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80067f4:	b293      	uxth	r3, r2
 80067f6:	fb06 e303 	mla	r3, r6, r3, lr
 80067fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80067fe:	b29b      	uxth	r3, r3
 8006800:	ebaa 0303 	sub.w	r3, sl, r3
 8006804:	0c12      	lsrs	r2, r2, #16
 8006806:	f8dc a000 	ldr.w	sl, [ip]
 800680a:	fb06 e202 	mla	r2, r6, r2, lr
 800680e:	fa13 f38a 	uxtah	r3, r3, sl
 8006812:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006816:	fa1f fa82 	uxth.w	sl, r2
 800681a:	f8dc 2000 	ldr.w	r2, [ip]
 800681e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006822:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006826:	b29b      	uxth	r3, r3
 8006828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800682c:	4581      	cmp	r9, r0
 800682e:	f84c 3b04 	str.w	r3, [ip], #4
 8006832:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006836:	d2db      	bcs.n	80067f0 <quorem+0x44>
 8006838:	f855 300b 	ldr.w	r3, [r5, fp]
 800683c:	b92b      	cbnz	r3, 800684a <quorem+0x9e>
 800683e:	9b01      	ldr	r3, [sp, #4]
 8006840:	3b04      	subs	r3, #4
 8006842:	429d      	cmp	r5, r3
 8006844:	461a      	mov	r2, r3
 8006846:	d32e      	bcc.n	80068a6 <quorem+0xfa>
 8006848:	613c      	str	r4, [r7, #16]
 800684a:	4638      	mov	r0, r7
 800684c:	f001 f8ea 	bl	8007a24 <__mcmp>
 8006850:	2800      	cmp	r0, #0
 8006852:	db24      	blt.n	800689e <quorem+0xf2>
 8006854:	3601      	adds	r6, #1
 8006856:	4628      	mov	r0, r5
 8006858:	f04f 0c00 	mov.w	ip, #0
 800685c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006860:	f8d0 e000 	ldr.w	lr, [r0]
 8006864:	b293      	uxth	r3, r2
 8006866:	ebac 0303 	sub.w	r3, ip, r3
 800686a:	0c12      	lsrs	r2, r2, #16
 800686c:	fa13 f38e 	uxtah	r3, r3, lr
 8006870:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006874:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006878:	b29b      	uxth	r3, r3
 800687a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800687e:	45c1      	cmp	r9, r8
 8006880:	f840 3b04 	str.w	r3, [r0], #4
 8006884:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006888:	d2e8      	bcs.n	800685c <quorem+0xb0>
 800688a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800688e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006892:	b922      	cbnz	r2, 800689e <quorem+0xf2>
 8006894:	3b04      	subs	r3, #4
 8006896:	429d      	cmp	r5, r3
 8006898:	461a      	mov	r2, r3
 800689a:	d30a      	bcc.n	80068b2 <quorem+0x106>
 800689c:	613c      	str	r4, [r7, #16]
 800689e:	4630      	mov	r0, r6
 80068a0:	b003      	add	sp, #12
 80068a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a6:	6812      	ldr	r2, [r2, #0]
 80068a8:	3b04      	subs	r3, #4
 80068aa:	2a00      	cmp	r2, #0
 80068ac:	d1cc      	bne.n	8006848 <quorem+0x9c>
 80068ae:	3c01      	subs	r4, #1
 80068b0:	e7c7      	b.n	8006842 <quorem+0x96>
 80068b2:	6812      	ldr	r2, [r2, #0]
 80068b4:	3b04      	subs	r3, #4
 80068b6:	2a00      	cmp	r2, #0
 80068b8:	d1f0      	bne.n	800689c <quorem+0xf0>
 80068ba:	3c01      	subs	r4, #1
 80068bc:	e7eb      	b.n	8006896 <quorem+0xea>
 80068be:	2000      	movs	r0, #0
 80068c0:	e7ee      	b.n	80068a0 <quorem+0xf4>
 80068c2:	0000      	movs	r0, r0
 80068c4:	0000      	movs	r0, r0
	...

080068c8 <_dtoa_r>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	ed2d 8b02 	vpush	{d8}
 80068d0:	ec57 6b10 	vmov	r6, r7, d0
 80068d4:	b095      	sub	sp, #84	; 0x54
 80068d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80068d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80068dc:	9105      	str	r1, [sp, #20]
 80068de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80068e2:	4604      	mov	r4, r0
 80068e4:	9209      	str	r2, [sp, #36]	; 0x24
 80068e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80068e8:	b975      	cbnz	r5, 8006908 <_dtoa_r+0x40>
 80068ea:	2010      	movs	r0, #16
 80068ec:	f7fe ff84 	bl	80057f8 <malloc>
 80068f0:	4602      	mov	r2, r0
 80068f2:	6260      	str	r0, [r4, #36]	; 0x24
 80068f4:	b920      	cbnz	r0, 8006900 <_dtoa_r+0x38>
 80068f6:	4bb2      	ldr	r3, [pc, #712]	; (8006bc0 <_dtoa_r+0x2f8>)
 80068f8:	21ea      	movs	r1, #234	; 0xea
 80068fa:	48b2      	ldr	r0, [pc, #712]	; (8006bc4 <_dtoa_r+0x2fc>)
 80068fc:	f001 f9b4 	bl	8007c68 <__assert_func>
 8006900:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006904:	6005      	str	r5, [r0, #0]
 8006906:	60c5      	str	r5, [r0, #12]
 8006908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800690a:	6819      	ldr	r1, [r3, #0]
 800690c:	b151      	cbz	r1, 8006924 <_dtoa_r+0x5c>
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	604a      	str	r2, [r1, #4]
 8006912:	2301      	movs	r3, #1
 8006914:	4093      	lsls	r3, r2
 8006916:	608b      	str	r3, [r1, #8]
 8006918:	4620      	mov	r0, r4
 800691a:	f000 fe45 	bl	80075a8 <_Bfree>
 800691e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	1e3b      	subs	r3, r7, #0
 8006926:	bfb9      	ittee	lt
 8006928:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800692c:	9303      	strlt	r3, [sp, #12]
 800692e:	2300      	movge	r3, #0
 8006930:	f8c8 3000 	strge.w	r3, [r8]
 8006934:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006938:	4ba3      	ldr	r3, [pc, #652]	; (8006bc8 <_dtoa_r+0x300>)
 800693a:	bfbc      	itt	lt
 800693c:	2201      	movlt	r2, #1
 800693e:	f8c8 2000 	strlt.w	r2, [r8]
 8006942:	ea33 0309 	bics.w	r3, r3, r9
 8006946:	d11b      	bne.n	8006980 <_dtoa_r+0xb8>
 8006948:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800694a:	f242 730f 	movw	r3, #9999	; 0x270f
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006954:	4333      	orrs	r3, r6
 8006956:	f000 857a 	beq.w	800744e <_dtoa_r+0xb86>
 800695a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800695c:	b963      	cbnz	r3, 8006978 <_dtoa_r+0xb0>
 800695e:	4b9b      	ldr	r3, [pc, #620]	; (8006bcc <_dtoa_r+0x304>)
 8006960:	e024      	b.n	80069ac <_dtoa_r+0xe4>
 8006962:	4b9b      	ldr	r3, [pc, #620]	; (8006bd0 <_dtoa_r+0x308>)
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	3308      	adds	r3, #8
 8006968:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	9800      	ldr	r0, [sp, #0]
 800696e:	b015      	add	sp, #84	; 0x54
 8006970:	ecbd 8b02 	vpop	{d8}
 8006974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006978:	4b94      	ldr	r3, [pc, #592]	; (8006bcc <_dtoa_r+0x304>)
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	3303      	adds	r3, #3
 800697e:	e7f3      	b.n	8006968 <_dtoa_r+0xa0>
 8006980:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006984:	2200      	movs	r2, #0
 8006986:	ec51 0b17 	vmov	r0, r1, d7
 800698a:	2300      	movs	r3, #0
 800698c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006990:	f7fa f8ba 	bl	8000b08 <__aeabi_dcmpeq>
 8006994:	4680      	mov	r8, r0
 8006996:	b158      	cbz	r0, 80069b0 <_dtoa_r+0xe8>
 8006998:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800699a:	2301      	movs	r3, #1
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8551 	beq.w	8007448 <_dtoa_r+0xb80>
 80069a6:	488b      	ldr	r0, [pc, #556]	; (8006bd4 <_dtoa_r+0x30c>)
 80069a8:	6018      	str	r0, [r3, #0]
 80069aa:	1e43      	subs	r3, r0, #1
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	e7dd      	b.n	800696c <_dtoa_r+0xa4>
 80069b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80069b4:	aa12      	add	r2, sp, #72	; 0x48
 80069b6:	a913      	add	r1, sp, #76	; 0x4c
 80069b8:	4620      	mov	r0, r4
 80069ba:	f001 f8d7 	bl	8007b6c <__d2b>
 80069be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80069c2:	4683      	mov	fp, r0
 80069c4:	2d00      	cmp	r5, #0
 80069c6:	d07c      	beq.n	8006ac2 <_dtoa_r+0x1fa>
 80069c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80069ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80069ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80069d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80069da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80069de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80069e2:	4b7d      	ldr	r3, [pc, #500]	; (8006bd8 <_dtoa_r+0x310>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	4630      	mov	r0, r6
 80069e8:	4639      	mov	r1, r7
 80069ea:	f7f9 fc6d 	bl	80002c8 <__aeabi_dsub>
 80069ee:	a36e      	add	r3, pc, #440	; (adr r3, 8006ba8 <_dtoa_r+0x2e0>)
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	f7f9 fe20 	bl	8000638 <__aeabi_dmul>
 80069f8:	a36d      	add	r3, pc, #436	; (adr r3, 8006bb0 <_dtoa_r+0x2e8>)
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	f7f9 fc65 	bl	80002cc <__adddf3>
 8006a02:	4606      	mov	r6, r0
 8006a04:	4628      	mov	r0, r5
 8006a06:	460f      	mov	r7, r1
 8006a08:	f7f9 fdac 	bl	8000564 <__aeabi_i2d>
 8006a0c:	a36a      	add	r3, pc, #424	; (adr r3, 8006bb8 <_dtoa_r+0x2f0>)
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f7f9 fe11 	bl	8000638 <__aeabi_dmul>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	f7f9 fc55 	bl	80002cc <__adddf3>
 8006a22:	4606      	mov	r6, r0
 8006a24:	460f      	mov	r7, r1
 8006a26:	f7fa f8b7 	bl	8000b98 <__aeabi_d2iz>
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	4682      	mov	sl, r0
 8006a2e:	2300      	movs	r3, #0
 8006a30:	4630      	mov	r0, r6
 8006a32:	4639      	mov	r1, r7
 8006a34:	f7fa f872 	bl	8000b1c <__aeabi_dcmplt>
 8006a38:	b148      	cbz	r0, 8006a4e <_dtoa_r+0x186>
 8006a3a:	4650      	mov	r0, sl
 8006a3c:	f7f9 fd92 	bl	8000564 <__aeabi_i2d>
 8006a40:	4632      	mov	r2, r6
 8006a42:	463b      	mov	r3, r7
 8006a44:	f7fa f860 	bl	8000b08 <__aeabi_dcmpeq>
 8006a48:	b908      	cbnz	r0, 8006a4e <_dtoa_r+0x186>
 8006a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a4e:	f1ba 0f16 	cmp.w	sl, #22
 8006a52:	d854      	bhi.n	8006afe <_dtoa_r+0x236>
 8006a54:	4b61      	ldr	r3, [pc, #388]	; (8006bdc <_dtoa_r+0x314>)
 8006a56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a62:	f7fa f85b 	bl	8000b1c <__aeabi_dcmplt>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d04b      	beq.n	8006b02 <_dtoa_r+0x23a>
 8006a6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a6e:	2300      	movs	r3, #0
 8006a70:	930e      	str	r3, [sp, #56]	; 0x38
 8006a72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a74:	1b5d      	subs	r5, r3, r5
 8006a76:	1e6b      	subs	r3, r5, #1
 8006a78:	9304      	str	r3, [sp, #16]
 8006a7a:	bf43      	ittte	mi
 8006a7c:	2300      	movmi	r3, #0
 8006a7e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006a82:	9304      	strmi	r3, [sp, #16]
 8006a84:	f04f 0800 	movpl.w	r8, #0
 8006a88:	f1ba 0f00 	cmp.w	sl, #0
 8006a8c:	db3b      	blt.n	8006b06 <_dtoa_r+0x23e>
 8006a8e:	9b04      	ldr	r3, [sp, #16]
 8006a90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006a94:	4453      	add	r3, sl
 8006a96:	9304      	str	r3, [sp, #16]
 8006a98:	2300      	movs	r3, #0
 8006a9a:	9306      	str	r3, [sp, #24]
 8006a9c:	9b05      	ldr	r3, [sp, #20]
 8006a9e:	2b09      	cmp	r3, #9
 8006aa0:	d869      	bhi.n	8006b76 <_dtoa_r+0x2ae>
 8006aa2:	2b05      	cmp	r3, #5
 8006aa4:	bfc4      	itt	gt
 8006aa6:	3b04      	subgt	r3, #4
 8006aa8:	9305      	strgt	r3, [sp, #20]
 8006aaa:	9b05      	ldr	r3, [sp, #20]
 8006aac:	f1a3 0302 	sub.w	r3, r3, #2
 8006ab0:	bfcc      	ite	gt
 8006ab2:	2500      	movgt	r5, #0
 8006ab4:	2501      	movle	r5, #1
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d869      	bhi.n	8006b8e <_dtoa_r+0x2c6>
 8006aba:	e8df f003 	tbb	[pc, r3]
 8006abe:	4e2c      	.short	0x4e2c
 8006ac0:	5a4c      	.short	0x5a4c
 8006ac2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006ac6:	441d      	add	r5, r3
 8006ac8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	bfc1      	itttt	gt
 8006ad0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ad4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006ad8:	fa09 f303 	lslgt.w	r3, r9, r3
 8006adc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006ae0:	bfda      	itte	le
 8006ae2:	f1c3 0320 	rsble	r3, r3, #32
 8006ae6:	fa06 f003 	lslle.w	r0, r6, r3
 8006aea:	4318      	orrgt	r0, r3
 8006aec:	f7f9 fd2a 	bl	8000544 <__aeabi_ui2d>
 8006af0:	2301      	movs	r3, #1
 8006af2:	4606      	mov	r6, r0
 8006af4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006af8:	3d01      	subs	r5, #1
 8006afa:	9310      	str	r3, [sp, #64]	; 0x40
 8006afc:	e771      	b.n	80069e2 <_dtoa_r+0x11a>
 8006afe:	2301      	movs	r3, #1
 8006b00:	e7b6      	b.n	8006a70 <_dtoa_r+0x1a8>
 8006b02:	900e      	str	r0, [sp, #56]	; 0x38
 8006b04:	e7b5      	b.n	8006a72 <_dtoa_r+0x1aa>
 8006b06:	f1ca 0300 	rsb	r3, sl, #0
 8006b0a:	9306      	str	r3, [sp, #24]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	eba8 080a 	sub.w	r8, r8, sl
 8006b12:	930d      	str	r3, [sp, #52]	; 0x34
 8006b14:	e7c2      	b.n	8006a9c <_dtoa_r+0x1d4>
 8006b16:	2300      	movs	r3, #0
 8006b18:	9308      	str	r3, [sp, #32]
 8006b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	dc39      	bgt.n	8006b94 <_dtoa_r+0x2cc>
 8006b20:	f04f 0901 	mov.w	r9, #1
 8006b24:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b28:	464b      	mov	r3, r9
 8006b2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006b2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b30:	2200      	movs	r2, #0
 8006b32:	6042      	str	r2, [r0, #4]
 8006b34:	2204      	movs	r2, #4
 8006b36:	f102 0614 	add.w	r6, r2, #20
 8006b3a:	429e      	cmp	r6, r3
 8006b3c:	6841      	ldr	r1, [r0, #4]
 8006b3e:	d92f      	bls.n	8006ba0 <_dtoa_r+0x2d8>
 8006b40:	4620      	mov	r0, r4
 8006b42:	f000 fcf1 	bl	8007528 <_Balloc>
 8006b46:	9000      	str	r0, [sp, #0]
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d14b      	bne.n	8006be4 <_dtoa_r+0x31c>
 8006b4c:	4b24      	ldr	r3, [pc, #144]	; (8006be0 <_dtoa_r+0x318>)
 8006b4e:	4602      	mov	r2, r0
 8006b50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006b54:	e6d1      	b.n	80068fa <_dtoa_r+0x32>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e7de      	b.n	8006b18 <_dtoa_r+0x250>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	9308      	str	r3, [sp, #32]
 8006b5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b60:	eb0a 0903 	add.w	r9, sl, r3
 8006b64:	f109 0301 	add.w	r3, r9, #1
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	9301      	str	r3, [sp, #4]
 8006b6c:	bfb8      	it	lt
 8006b6e:	2301      	movlt	r3, #1
 8006b70:	e7dd      	b.n	8006b2e <_dtoa_r+0x266>
 8006b72:	2301      	movs	r3, #1
 8006b74:	e7f2      	b.n	8006b5c <_dtoa_r+0x294>
 8006b76:	2501      	movs	r5, #1
 8006b78:	2300      	movs	r3, #0
 8006b7a:	9305      	str	r3, [sp, #20]
 8006b7c:	9508      	str	r5, [sp, #32]
 8006b7e:	f04f 39ff 	mov.w	r9, #4294967295
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b88:	2312      	movs	r3, #18
 8006b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8006b8c:	e7cf      	b.n	8006b2e <_dtoa_r+0x266>
 8006b8e:	2301      	movs	r3, #1
 8006b90:	9308      	str	r3, [sp, #32]
 8006b92:	e7f4      	b.n	8006b7e <_dtoa_r+0x2b6>
 8006b94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006b98:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b9c:	464b      	mov	r3, r9
 8006b9e:	e7c6      	b.n	8006b2e <_dtoa_r+0x266>
 8006ba0:	3101      	adds	r1, #1
 8006ba2:	6041      	str	r1, [r0, #4]
 8006ba4:	0052      	lsls	r2, r2, #1
 8006ba6:	e7c6      	b.n	8006b36 <_dtoa_r+0x26e>
 8006ba8:	636f4361 	.word	0x636f4361
 8006bac:	3fd287a7 	.word	0x3fd287a7
 8006bb0:	8b60c8b3 	.word	0x8b60c8b3
 8006bb4:	3fc68a28 	.word	0x3fc68a28
 8006bb8:	509f79fb 	.word	0x509f79fb
 8006bbc:	3fd34413 	.word	0x3fd34413
 8006bc0:	080082f2 	.word	0x080082f2
 8006bc4:	08008309 	.word	0x08008309
 8006bc8:	7ff00000 	.word	0x7ff00000
 8006bcc:	080082ee 	.word	0x080082ee
 8006bd0:	080082e5 	.word	0x080082e5
 8006bd4:	080082c2 	.word	0x080082c2
 8006bd8:	3ff80000 	.word	0x3ff80000
 8006bdc:	08008408 	.word	0x08008408
 8006be0:	08008368 	.word	0x08008368
 8006be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006be6:	9a00      	ldr	r2, [sp, #0]
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	9b01      	ldr	r3, [sp, #4]
 8006bec:	2b0e      	cmp	r3, #14
 8006bee:	f200 80ad 	bhi.w	8006d4c <_dtoa_r+0x484>
 8006bf2:	2d00      	cmp	r5, #0
 8006bf4:	f000 80aa 	beq.w	8006d4c <_dtoa_r+0x484>
 8006bf8:	f1ba 0f00 	cmp.w	sl, #0
 8006bfc:	dd36      	ble.n	8006c6c <_dtoa_r+0x3a4>
 8006bfe:	4ac3      	ldr	r2, [pc, #780]	; (8006f0c <_dtoa_r+0x644>)
 8006c00:	f00a 030f 	and.w	r3, sl, #15
 8006c04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c08:	ed93 7b00 	vldr	d7, [r3]
 8006c0c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006c10:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006c14:	eeb0 8a47 	vmov.f32	s16, s14
 8006c18:	eef0 8a67 	vmov.f32	s17, s15
 8006c1c:	d016      	beq.n	8006c4c <_dtoa_r+0x384>
 8006c1e:	4bbc      	ldr	r3, [pc, #752]	; (8006f10 <_dtoa_r+0x648>)
 8006c20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c28:	f7f9 fe30 	bl	800088c <__aeabi_ddiv>
 8006c2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c30:	f007 070f 	and.w	r7, r7, #15
 8006c34:	2503      	movs	r5, #3
 8006c36:	4eb6      	ldr	r6, [pc, #728]	; (8006f10 <_dtoa_r+0x648>)
 8006c38:	b957      	cbnz	r7, 8006c50 <_dtoa_r+0x388>
 8006c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c3e:	ec53 2b18 	vmov	r2, r3, d8
 8006c42:	f7f9 fe23 	bl	800088c <__aeabi_ddiv>
 8006c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c4a:	e029      	b.n	8006ca0 <_dtoa_r+0x3d8>
 8006c4c:	2502      	movs	r5, #2
 8006c4e:	e7f2      	b.n	8006c36 <_dtoa_r+0x36e>
 8006c50:	07f9      	lsls	r1, r7, #31
 8006c52:	d508      	bpl.n	8006c66 <_dtoa_r+0x39e>
 8006c54:	ec51 0b18 	vmov	r0, r1, d8
 8006c58:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c5c:	f7f9 fcec 	bl	8000638 <__aeabi_dmul>
 8006c60:	ec41 0b18 	vmov	d8, r0, r1
 8006c64:	3501      	adds	r5, #1
 8006c66:	107f      	asrs	r7, r7, #1
 8006c68:	3608      	adds	r6, #8
 8006c6a:	e7e5      	b.n	8006c38 <_dtoa_r+0x370>
 8006c6c:	f000 80a6 	beq.w	8006dbc <_dtoa_r+0x4f4>
 8006c70:	f1ca 0600 	rsb	r6, sl, #0
 8006c74:	4ba5      	ldr	r3, [pc, #660]	; (8006f0c <_dtoa_r+0x644>)
 8006c76:	4fa6      	ldr	r7, [pc, #664]	; (8006f10 <_dtoa_r+0x648>)
 8006c78:	f006 020f 	and.w	r2, r6, #15
 8006c7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006c88:	f7f9 fcd6 	bl	8000638 <__aeabi_dmul>
 8006c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c90:	1136      	asrs	r6, r6, #4
 8006c92:	2300      	movs	r3, #0
 8006c94:	2502      	movs	r5, #2
 8006c96:	2e00      	cmp	r6, #0
 8006c98:	f040 8085 	bne.w	8006da6 <_dtoa_r+0x4de>
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1d2      	bne.n	8006c46 <_dtoa_r+0x37e>
 8006ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 808c 	beq.w	8006dc0 <_dtoa_r+0x4f8>
 8006ca8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006cac:	4b99      	ldr	r3, [pc, #612]	; (8006f14 <_dtoa_r+0x64c>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	4639      	mov	r1, r7
 8006cb4:	f7f9 ff32 	bl	8000b1c <__aeabi_dcmplt>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	f000 8081 	beq.w	8006dc0 <_dtoa_r+0x4f8>
 8006cbe:	9b01      	ldr	r3, [sp, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d07d      	beq.n	8006dc0 <_dtoa_r+0x4f8>
 8006cc4:	f1b9 0f00 	cmp.w	r9, #0
 8006cc8:	dd3c      	ble.n	8006d44 <_dtoa_r+0x47c>
 8006cca:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006cce:	9307      	str	r3, [sp, #28]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4b91      	ldr	r3, [pc, #580]	; (8006f18 <_dtoa_r+0x650>)
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	4639      	mov	r1, r7
 8006cd8:	f7f9 fcae 	bl	8000638 <__aeabi_dmul>
 8006cdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce0:	3501      	adds	r5, #1
 8006ce2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006ce6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006cea:	4628      	mov	r0, r5
 8006cec:	f7f9 fc3a 	bl	8000564 <__aeabi_i2d>
 8006cf0:	4632      	mov	r2, r6
 8006cf2:	463b      	mov	r3, r7
 8006cf4:	f7f9 fca0 	bl	8000638 <__aeabi_dmul>
 8006cf8:	4b88      	ldr	r3, [pc, #544]	; (8006f1c <_dtoa_r+0x654>)
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f7f9 fae6 	bl	80002cc <__adddf3>
 8006d00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006d04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d08:	9303      	str	r3, [sp, #12]
 8006d0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d15c      	bne.n	8006dca <_dtoa_r+0x502>
 8006d10:	4b83      	ldr	r3, [pc, #524]	; (8006f20 <_dtoa_r+0x658>)
 8006d12:	2200      	movs	r2, #0
 8006d14:	4630      	mov	r0, r6
 8006d16:	4639      	mov	r1, r7
 8006d18:	f7f9 fad6 	bl	80002c8 <__aeabi_dsub>
 8006d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d20:	4606      	mov	r6, r0
 8006d22:	460f      	mov	r7, r1
 8006d24:	f7f9 ff18 	bl	8000b58 <__aeabi_dcmpgt>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	f040 8296 	bne.w	800725a <_dtoa_r+0x992>
 8006d2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006d32:	4630      	mov	r0, r6
 8006d34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d38:	4639      	mov	r1, r7
 8006d3a:	f7f9 feef 	bl	8000b1c <__aeabi_dcmplt>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	f040 8288 	bne.w	8007254 <_dtoa_r+0x98c>
 8006d44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f2c0 8158 	blt.w	8007004 <_dtoa_r+0x73c>
 8006d54:	f1ba 0f0e 	cmp.w	sl, #14
 8006d58:	f300 8154 	bgt.w	8007004 <_dtoa_r+0x73c>
 8006d5c:	4b6b      	ldr	r3, [pc, #428]	; (8006f0c <_dtoa_r+0x644>)
 8006d5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006d62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f280 80e3 	bge.w	8006f34 <_dtoa_r+0x66c>
 8006d6e:	9b01      	ldr	r3, [sp, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f300 80df 	bgt.w	8006f34 <_dtoa_r+0x66c>
 8006d76:	f040 826d 	bne.w	8007254 <_dtoa_r+0x98c>
 8006d7a:	4b69      	ldr	r3, [pc, #420]	; (8006f20 <_dtoa_r+0x658>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 fc59 	bl	8000638 <__aeabi_dmul>
 8006d86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d8a:	f7f9 fedb 	bl	8000b44 <__aeabi_dcmpge>
 8006d8e:	9e01      	ldr	r6, [sp, #4]
 8006d90:	4637      	mov	r7, r6
 8006d92:	2800      	cmp	r0, #0
 8006d94:	f040 8243 	bne.w	800721e <_dtoa_r+0x956>
 8006d98:	9d00      	ldr	r5, [sp, #0]
 8006d9a:	2331      	movs	r3, #49	; 0x31
 8006d9c:	f805 3b01 	strb.w	r3, [r5], #1
 8006da0:	f10a 0a01 	add.w	sl, sl, #1
 8006da4:	e23f      	b.n	8007226 <_dtoa_r+0x95e>
 8006da6:	07f2      	lsls	r2, r6, #31
 8006da8:	d505      	bpl.n	8006db6 <_dtoa_r+0x4ee>
 8006daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dae:	f7f9 fc43 	bl	8000638 <__aeabi_dmul>
 8006db2:	3501      	adds	r5, #1
 8006db4:	2301      	movs	r3, #1
 8006db6:	1076      	asrs	r6, r6, #1
 8006db8:	3708      	adds	r7, #8
 8006dba:	e76c      	b.n	8006c96 <_dtoa_r+0x3ce>
 8006dbc:	2502      	movs	r5, #2
 8006dbe:	e76f      	b.n	8006ca0 <_dtoa_r+0x3d8>
 8006dc0:	9b01      	ldr	r3, [sp, #4]
 8006dc2:	f8cd a01c 	str.w	sl, [sp, #28]
 8006dc6:	930c      	str	r3, [sp, #48]	; 0x30
 8006dc8:	e78d      	b.n	8006ce6 <_dtoa_r+0x41e>
 8006dca:	9900      	ldr	r1, [sp, #0]
 8006dcc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006dce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dd0:	4b4e      	ldr	r3, [pc, #312]	; (8006f0c <_dtoa_r+0x644>)
 8006dd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006dd6:	4401      	add	r1, r0
 8006dd8:	9102      	str	r1, [sp, #8]
 8006dda:	9908      	ldr	r1, [sp, #32]
 8006ddc:	eeb0 8a47 	vmov.f32	s16, s14
 8006de0:	eef0 8a67 	vmov.f32	s17, s15
 8006de4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006de8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006dec:	2900      	cmp	r1, #0
 8006dee:	d045      	beq.n	8006e7c <_dtoa_r+0x5b4>
 8006df0:	494c      	ldr	r1, [pc, #304]	; (8006f24 <_dtoa_r+0x65c>)
 8006df2:	2000      	movs	r0, #0
 8006df4:	f7f9 fd4a 	bl	800088c <__aeabi_ddiv>
 8006df8:	ec53 2b18 	vmov	r2, r3, d8
 8006dfc:	f7f9 fa64 	bl	80002c8 <__aeabi_dsub>
 8006e00:	9d00      	ldr	r5, [sp, #0]
 8006e02:	ec41 0b18 	vmov	d8, r0, r1
 8006e06:	4639      	mov	r1, r7
 8006e08:	4630      	mov	r0, r6
 8006e0a:	f7f9 fec5 	bl	8000b98 <__aeabi_d2iz>
 8006e0e:	900c      	str	r0, [sp, #48]	; 0x30
 8006e10:	f7f9 fba8 	bl	8000564 <__aeabi_i2d>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4630      	mov	r0, r6
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	f7f9 fa54 	bl	80002c8 <__aeabi_dsub>
 8006e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e22:	3330      	adds	r3, #48	; 0x30
 8006e24:	f805 3b01 	strb.w	r3, [r5], #1
 8006e28:	ec53 2b18 	vmov	r2, r3, d8
 8006e2c:	4606      	mov	r6, r0
 8006e2e:	460f      	mov	r7, r1
 8006e30:	f7f9 fe74 	bl	8000b1c <__aeabi_dcmplt>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d165      	bne.n	8006f04 <_dtoa_r+0x63c>
 8006e38:	4632      	mov	r2, r6
 8006e3a:	463b      	mov	r3, r7
 8006e3c:	4935      	ldr	r1, [pc, #212]	; (8006f14 <_dtoa_r+0x64c>)
 8006e3e:	2000      	movs	r0, #0
 8006e40:	f7f9 fa42 	bl	80002c8 <__aeabi_dsub>
 8006e44:	ec53 2b18 	vmov	r2, r3, d8
 8006e48:	f7f9 fe68 	bl	8000b1c <__aeabi_dcmplt>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	f040 80b9 	bne.w	8006fc4 <_dtoa_r+0x6fc>
 8006e52:	9b02      	ldr	r3, [sp, #8]
 8006e54:	429d      	cmp	r5, r3
 8006e56:	f43f af75 	beq.w	8006d44 <_dtoa_r+0x47c>
 8006e5a:	4b2f      	ldr	r3, [pc, #188]	; (8006f18 <_dtoa_r+0x650>)
 8006e5c:	ec51 0b18 	vmov	r0, r1, d8
 8006e60:	2200      	movs	r2, #0
 8006e62:	f7f9 fbe9 	bl	8000638 <__aeabi_dmul>
 8006e66:	4b2c      	ldr	r3, [pc, #176]	; (8006f18 <_dtoa_r+0x650>)
 8006e68:	ec41 0b18 	vmov	d8, r0, r1
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4630      	mov	r0, r6
 8006e70:	4639      	mov	r1, r7
 8006e72:	f7f9 fbe1 	bl	8000638 <__aeabi_dmul>
 8006e76:	4606      	mov	r6, r0
 8006e78:	460f      	mov	r7, r1
 8006e7a:	e7c4      	b.n	8006e06 <_dtoa_r+0x53e>
 8006e7c:	ec51 0b17 	vmov	r0, r1, d7
 8006e80:	f7f9 fbda 	bl	8000638 <__aeabi_dmul>
 8006e84:	9b02      	ldr	r3, [sp, #8]
 8006e86:	9d00      	ldr	r5, [sp, #0]
 8006e88:	930c      	str	r3, [sp, #48]	; 0x30
 8006e8a:	ec41 0b18 	vmov	d8, r0, r1
 8006e8e:	4639      	mov	r1, r7
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7f9 fe81 	bl	8000b98 <__aeabi_d2iz>
 8006e96:	9011      	str	r0, [sp, #68]	; 0x44
 8006e98:	f7f9 fb64 	bl	8000564 <__aeabi_i2d>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	4639      	mov	r1, r7
 8006ea4:	f7f9 fa10 	bl	80002c8 <__aeabi_dsub>
 8006ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eaa:	3330      	adds	r3, #48	; 0x30
 8006eac:	f805 3b01 	strb.w	r3, [r5], #1
 8006eb0:	9b02      	ldr	r3, [sp, #8]
 8006eb2:	429d      	cmp	r5, r3
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	460f      	mov	r7, r1
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	d134      	bne.n	8006f28 <_dtoa_r+0x660>
 8006ebe:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <_dtoa_r+0x65c>)
 8006ec0:	ec51 0b18 	vmov	r0, r1, d8
 8006ec4:	f7f9 fa02 	bl	80002cc <__adddf3>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4630      	mov	r0, r6
 8006ece:	4639      	mov	r1, r7
 8006ed0:	f7f9 fe42 	bl	8000b58 <__aeabi_dcmpgt>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d175      	bne.n	8006fc4 <_dtoa_r+0x6fc>
 8006ed8:	ec53 2b18 	vmov	r2, r3, d8
 8006edc:	4911      	ldr	r1, [pc, #68]	; (8006f24 <_dtoa_r+0x65c>)
 8006ede:	2000      	movs	r0, #0
 8006ee0:	f7f9 f9f2 	bl	80002c8 <__aeabi_dsub>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4630      	mov	r0, r6
 8006eea:	4639      	mov	r1, r7
 8006eec:	f7f9 fe16 	bl	8000b1c <__aeabi_dcmplt>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	f43f af27 	beq.w	8006d44 <_dtoa_r+0x47c>
 8006ef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ef8:	1e6b      	subs	r3, r5, #1
 8006efa:	930c      	str	r3, [sp, #48]	; 0x30
 8006efc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f00:	2b30      	cmp	r3, #48	; 0x30
 8006f02:	d0f8      	beq.n	8006ef6 <_dtoa_r+0x62e>
 8006f04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006f08:	e04a      	b.n	8006fa0 <_dtoa_r+0x6d8>
 8006f0a:	bf00      	nop
 8006f0c:	08008408 	.word	0x08008408
 8006f10:	080083e0 	.word	0x080083e0
 8006f14:	3ff00000 	.word	0x3ff00000
 8006f18:	40240000 	.word	0x40240000
 8006f1c:	401c0000 	.word	0x401c0000
 8006f20:	40140000 	.word	0x40140000
 8006f24:	3fe00000 	.word	0x3fe00000
 8006f28:	4baf      	ldr	r3, [pc, #700]	; (80071e8 <_dtoa_r+0x920>)
 8006f2a:	f7f9 fb85 	bl	8000638 <__aeabi_dmul>
 8006f2e:	4606      	mov	r6, r0
 8006f30:	460f      	mov	r7, r1
 8006f32:	e7ac      	b.n	8006e8e <_dtoa_r+0x5c6>
 8006f34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006f38:	9d00      	ldr	r5, [sp, #0]
 8006f3a:	4642      	mov	r2, r8
 8006f3c:	464b      	mov	r3, r9
 8006f3e:	4630      	mov	r0, r6
 8006f40:	4639      	mov	r1, r7
 8006f42:	f7f9 fca3 	bl	800088c <__aeabi_ddiv>
 8006f46:	f7f9 fe27 	bl	8000b98 <__aeabi_d2iz>
 8006f4a:	9002      	str	r0, [sp, #8]
 8006f4c:	f7f9 fb0a 	bl	8000564 <__aeabi_i2d>
 8006f50:	4642      	mov	r2, r8
 8006f52:	464b      	mov	r3, r9
 8006f54:	f7f9 fb70 	bl	8000638 <__aeabi_dmul>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	4639      	mov	r1, r7
 8006f60:	f7f9 f9b2 	bl	80002c8 <__aeabi_dsub>
 8006f64:	9e02      	ldr	r6, [sp, #8]
 8006f66:	9f01      	ldr	r7, [sp, #4]
 8006f68:	3630      	adds	r6, #48	; 0x30
 8006f6a:	f805 6b01 	strb.w	r6, [r5], #1
 8006f6e:	9e00      	ldr	r6, [sp, #0]
 8006f70:	1bae      	subs	r6, r5, r6
 8006f72:	42b7      	cmp	r7, r6
 8006f74:	4602      	mov	r2, r0
 8006f76:	460b      	mov	r3, r1
 8006f78:	d137      	bne.n	8006fea <_dtoa_r+0x722>
 8006f7a:	f7f9 f9a7 	bl	80002cc <__adddf3>
 8006f7e:	4642      	mov	r2, r8
 8006f80:	464b      	mov	r3, r9
 8006f82:	4606      	mov	r6, r0
 8006f84:	460f      	mov	r7, r1
 8006f86:	f7f9 fde7 	bl	8000b58 <__aeabi_dcmpgt>
 8006f8a:	b9c8      	cbnz	r0, 8006fc0 <_dtoa_r+0x6f8>
 8006f8c:	4642      	mov	r2, r8
 8006f8e:	464b      	mov	r3, r9
 8006f90:	4630      	mov	r0, r6
 8006f92:	4639      	mov	r1, r7
 8006f94:	f7f9 fdb8 	bl	8000b08 <__aeabi_dcmpeq>
 8006f98:	b110      	cbz	r0, 8006fa0 <_dtoa_r+0x6d8>
 8006f9a:	9b02      	ldr	r3, [sp, #8]
 8006f9c:	07d9      	lsls	r1, r3, #31
 8006f9e:	d40f      	bmi.n	8006fc0 <_dtoa_r+0x6f8>
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	4659      	mov	r1, fp
 8006fa4:	f000 fb00 	bl	80075a8 <_Bfree>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	702b      	strb	r3, [r5, #0]
 8006fac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006fae:	f10a 0001 	add.w	r0, sl, #1
 8006fb2:	6018      	str	r0, [r3, #0]
 8006fb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f43f acd8 	beq.w	800696c <_dtoa_r+0xa4>
 8006fbc:	601d      	str	r5, [r3, #0]
 8006fbe:	e4d5      	b.n	800696c <_dtoa_r+0xa4>
 8006fc0:	f8cd a01c 	str.w	sl, [sp, #28]
 8006fc4:	462b      	mov	r3, r5
 8006fc6:	461d      	mov	r5, r3
 8006fc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fcc:	2a39      	cmp	r2, #57	; 0x39
 8006fce:	d108      	bne.n	8006fe2 <_dtoa_r+0x71a>
 8006fd0:	9a00      	ldr	r2, [sp, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d1f7      	bne.n	8006fc6 <_dtoa_r+0x6fe>
 8006fd6:	9a07      	ldr	r2, [sp, #28]
 8006fd8:	9900      	ldr	r1, [sp, #0]
 8006fda:	3201      	adds	r2, #1
 8006fdc:	9207      	str	r2, [sp, #28]
 8006fde:	2230      	movs	r2, #48	; 0x30
 8006fe0:	700a      	strb	r2, [r1, #0]
 8006fe2:	781a      	ldrb	r2, [r3, #0]
 8006fe4:	3201      	adds	r2, #1
 8006fe6:	701a      	strb	r2, [r3, #0]
 8006fe8:	e78c      	b.n	8006f04 <_dtoa_r+0x63c>
 8006fea:	4b7f      	ldr	r3, [pc, #508]	; (80071e8 <_dtoa_r+0x920>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	f7f9 fb23 	bl	8000638 <__aeabi_dmul>
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4606      	mov	r6, r0
 8006ff8:	460f      	mov	r7, r1
 8006ffa:	f7f9 fd85 	bl	8000b08 <__aeabi_dcmpeq>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d09b      	beq.n	8006f3a <_dtoa_r+0x672>
 8007002:	e7cd      	b.n	8006fa0 <_dtoa_r+0x6d8>
 8007004:	9a08      	ldr	r2, [sp, #32]
 8007006:	2a00      	cmp	r2, #0
 8007008:	f000 80c4 	beq.w	8007194 <_dtoa_r+0x8cc>
 800700c:	9a05      	ldr	r2, [sp, #20]
 800700e:	2a01      	cmp	r2, #1
 8007010:	f300 80a8 	bgt.w	8007164 <_dtoa_r+0x89c>
 8007014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007016:	2a00      	cmp	r2, #0
 8007018:	f000 80a0 	beq.w	800715c <_dtoa_r+0x894>
 800701c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007020:	9e06      	ldr	r6, [sp, #24]
 8007022:	4645      	mov	r5, r8
 8007024:	9a04      	ldr	r2, [sp, #16]
 8007026:	2101      	movs	r1, #1
 8007028:	441a      	add	r2, r3
 800702a:	4620      	mov	r0, r4
 800702c:	4498      	add	r8, r3
 800702e:	9204      	str	r2, [sp, #16]
 8007030:	f000 fb76 	bl	8007720 <__i2b>
 8007034:	4607      	mov	r7, r0
 8007036:	2d00      	cmp	r5, #0
 8007038:	dd0b      	ble.n	8007052 <_dtoa_r+0x78a>
 800703a:	9b04      	ldr	r3, [sp, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	dd08      	ble.n	8007052 <_dtoa_r+0x78a>
 8007040:	42ab      	cmp	r3, r5
 8007042:	9a04      	ldr	r2, [sp, #16]
 8007044:	bfa8      	it	ge
 8007046:	462b      	movge	r3, r5
 8007048:	eba8 0803 	sub.w	r8, r8, r3
 800704c:	1aed      	subs	r5, r5, r3
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	9304      	str	r3, [sp, #16]
 8007052:	9b06      	ldr	r3, [sp, #24]
 8007054:	b1fb      	cbz	r3, 8007096 <_dtoa_r+0x7ce>
 8007056:	9b08      	ldr	r3, [sp, #32]
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 809f 	beq.w	800719c <_dtoa_r+0x8d4>
 800705e:	2e00      	cmp	r6, #0
 8007060:	dd11      	ble.n	8007086 <_dtoa_r+0x7be>
 8007062:	4639      	mov	r1, r7
 8007064:	4632      	mov	r2, r6
 8007066:	4620      	mov	r0, r4
 8007068:	f000 fc16 	bl	8007898 <__pow5mult>
 800706c:	465a      	mov	r2, fp
 800706e:	4601      	mov	r1, r0
 8007070:	4607      	mov	r7, r0
 8007072:	4620      	mov	r0, r4
 8007074:	f000 fb6a 	bl	800774c <__multiply>
 8007078:	4659      	mov	r1, fp
 800707a:	9007      	str	r0, [sp, #28]
 800707c:	4620      	mov	r0, r4
 800707e:	f000 fa93 	bl	80075a8 <_Bfree>
 8007082:	9b07      	ldr	r3, [sp, #28]
 8007084:	469b      	mov	fp, r3
 8007086:	9b06      	ldr	r3, [sp, #24]
 8007088:	1b9a      	subs	r2, r3, r6
 800708a:	d004      	beq.n	8007096 <_dtoa_r+0x7ce>
 800708c:	4659      	mov	r1, fp
 800708e:	4620      	mov	r0, r4
 8007090:	f000 fc02 	bl	8007898 <__pow5mult>
 8007094:	4683      	mov	fp, r0
 8007096:	2101      	movs	r1, #1
 8007098:	4620      	mov	r0, r4
 800709a:	f000 fb41 	bl	8007720 <__i2b>
 800709e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	4606      	mov	r6, r0
 80070a4:	dd7c      	ble.n	80071a0 <_dtoa_r+0x8d8>
 80070a6:	461a      	mov	r2, r3
 80070a8:	4601      	mov	r1, r0
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 fbf4 	bl	8007898 <__pow5mult>
 80070b0:	9b05      	ldr	r3, [sp, #20]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	4606      	mov	r6, r0
 80070b6:	dd76      	ble.n	80071a6 <_dtoa_r+0x8de>
 80070b8:	2300      	movs	r3, #0
 80070ba:	9306      	str	r3, [sp, #24]
 80070bc:	6933      	ldr	r3, [r6, #16]
 80070be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80070c2:	6918      	ldr	r0, [r3, #16]
 80070c4:	f000 fadc 	bl	8007680 <__hi0bits>
 80070c8:	f1c0 0020 	rsb	r0, r0, #32
 80070cc:	9b04      	ldr	r3, [sp, #16]
 80070ce:	4418      	add	r0, r3
 80070d0:	f010 001f 	ands.w	r0, r0, #31
 80070d4:	f000 8086 	beq.w	80071e4 <_dtoa_r+0x91c>
 80070d8:	f1c0 0320 	rsb	r3, r0, #32
 80070dc:	2b04      	cmp	r3, #4
 80070de:	dd7f      	ble.n	80071e0 <_dtoa_r+0x918>
 80070e0:	f1c0 001c 	rsb	r0, r0, #28
 80070e4:	9b04      	ldr	r3, [sp, #16]
 80070e6:	4403      	add	r3, r0
 80070e8:	4480      	add	r8, r0
 80070ea:	4405      	add	r5, r0
 80070ec:	9304      	str	r3, [sp, #16]
 80070ee:	f1b8 0f00 	cmp.w	r8, #0
 80070f2:	dd05      	ble.n	8007100 <_dtoa_r+0x838>
 80070f4:	4659      	mov	r1, fp
 80070f6:	4642      	mov	r2, r8
 80070f8:	4620      	mov	r0, r4
 80070fa:	f000 fc27 	bl	800794c <__lshift>
 80070fe:	4683      	mov	fp, r0
 8007100:	9b04      	ldr	r3, [sp, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	dd05      	ble.n	8007112 <_dtoa_r+0x84a>
 8007106:	4631      	mov	r1, r6
 8007108:	461a      	mov	r2, r3
 800710a:	4620      	mov	r0, r4
 800710c:	f000 fc1e 	bl	800794c <__lshift>
 8007110:	4606      	mov	r6, r0
 8007112:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007114:	2b00      	cmp	r3, #0
 8007116:	d069      	beq.n	80071ec <_dtoa_r+0x924>
 8007118:	4631      	mov	r1, r6
 800711a:	4658      	mov	r0, fp
 800711c:	f000 fc82 	bl	8007a24 <__mcmp>
 8007120:	2800      	cmp	r0, #0
 8007122:	da63      	bge.n	80071ec <_dtoa_r+0x924>
 8007124:	2300      	movs	r3, #0
 8007126:	4659      	mov	r1, fp
 8007128:	220a      	movs	r2, #10
 800712a:	4620      	mov	r0, r4
 800712c:	f000 fa5e 	bl	80075ec <__multadd>
 8007130:	9b08      	ldr	r3, [sp, #32]
 8007132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007136:	4683      	mov	fp, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 818f 	beq.w	800745c <_dtoa_r+0xb94>
 800713e:	4639      	mov	r1, r7
 8007140:	2300      	movs	r3, #0
 8007142:	220a      	movs	r2, #10
 8007144:	4620      	mov	r0, r4
 8007146:	f000 fa51 	bl	80075ec <__multadd>
 800714a:	f1b9 0f00 	cmp.w	r9, #0
 800714e:	4607      	mov	r7, r0
 8007150:	f300 808e 	bgt.w	8007270 <_dtoa_r+0x9a8>
 8007154:	9b05      	ldr	r3, [sp, #20]
 8007156:	2b02      	cmp	r3, #2
 8007158:	dc50      	bgt.n	80071fc <_dtoa_r+0x934>
 800715a:	e089      	b.n	8007270 <_dtoa_r+0x9a8>
 800715c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800715e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007162:	e75d      	b.n	8007020 <_dtoa_r+0x758>
 8007164:	9b01      	ldr	r3, [sp, #4]
 8007166:	1e5e      	subs	r6, r3, #1
 8007168:	9b06      	ldr	r3, [sp, #24]
 800716a:	42b3      	cmp	r3, r6
 800716c:	bfbf      	itttt	lt
 800716e:	9b06      	ldrlt	r3, [sp, #24]
 8007170:	9606      	strlt	r6, [sp, #24]
 8007172:	1af2      	sublt	r2, r6, r3
 8007174:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007176:	bfb6      	itet	lt
 8007178:	189b      	addlt	r3, r3, r2
 800717a:	1b9e      	subge	r6, r3, r6
 800717c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800717e:	9b01      	ldr	r3, [sp, #4]
 8007180:	bfb8      	it	lt
 8007182:	2600      	movlt	r6, #0
 8007184:	2b00      	cmp	r3, #0
 8007186:	bfb5      	itete	lt
 8007188:	eba8 0503 	sublt.w	r5, r8, r3
 800718c:	9b01      	ldrge	r3, [sp, #4]
 800718e:	2300      	movlt	r3, #0
 8007190:	4645      	movge	r5, r8
 8007192:	e747      	b.n	8007024 <_dtoa_r+0x75c>
 8007194:	9e06      	ldr	r6, [sp, #24]
 8007196:	9f08      	ldr	r7, [sp, #32]
 8007198:	4645      	mov	r5, r8
 800719a:	e74c      	b.n	8007036 <_dtoa_r+0x76e>
 800719c:	9a06      	ldr	r2, [sp, #24]
 800719e:	e775      	b.n	800708c <_dtoa_r+0x7c4>
 80071a0:	9b05      	ldr	r3, [sp, #20]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	dc18      	bgt.n	80071d8 <_dtoa_r+0x910>
 80071a6:	9b02      	ldr	r3, [sp, #8]
 80071a8:	b9b3      	cbnz	r3, 80071d8 <_dtoa_r+0x910>
 80071aa:	9b03      	ldr	r3, [sp, #12]
 80071ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071b0:	b9a3      	cbnz	r3, 80071dc <_dtoa_r+0x914>
 80071b2:	9b03      	ldr	r3, [sp, #12]
 80071b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071b8:	0d1b      	lsrs	r3, r3, #20
 80071ba:	051b      	lsls	r3, r3, #20
 80071bc:	b12b      	cbz	r3, 80071ca <_dtoa_r+0x902>
 80071be:	9b04      	ldr	r3, [sp, #16]
 80071c0:	3301      	adds	r3, #1
 80071c2:	9304      	str	r3, [sp, #16]
 80071c4:	f108 0801 	add.w	r8, r8, #1
 80071c8:	2301      	movs	r3, #1
 80071ca:	9306      	str	r3, [sp, #24]
 80071cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f47f af74 	bne.w	80070bc <_dtoa_r+0x7f4>
 80071d4:	2001      	movs	r0, #1
 80071d6:	e779      	b.n	80070cc <_dtoa_r+0x804>
 80071d8:	2300      	movs	r3, #0
 80071da:	e7f6      	b.n	80071ca <_dtoa_r+0x902>
 80071dc:	9b02      	ldr	r3, [sp, #8]
 80071de:	e7f4      	b.n	80071ca <_dtoa_r+0x902>
 80071e0:	d085      	beq.n	80070ee <_dtoa_r+0x826>
 80071e2:	4618      	mov	r0, r3
 80071e4:	301c      	adds	r0, #28
 80071e6:	e77d      	b.n	80070e4 <_dtoa_r+0x81c>
 80071e8:	40240000 	.word	0x40240000
 80071ec:	9b01      	ldr	r3, [sp, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	dc38      	bgt.n	8007264 <_dtoa_r+0x99c>
 80071f2:	9b05      	ldr	r3, [sp, #20]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	dd35      	ble.n	8007264 <_dtoa_r+0x99c>
 80071f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80071fc:	f1b9 0f00 	cmp.w	r9, #0
 8007200:	d10d      	bne.n	800721e <_dtoa_r+0x956>
 8007202:	4631      	mov	r1, r6
 8007204:	464b      	mov	r3, r9
 8007206:	2205      	movs	r2, #5
 8007208:	4620      	mov	r0, r4
 800720a:	f000 f9ef 	bl	80075ec <__multadd>
 800720e:	4601      	mov	r1, r0
 8007210:	4606      	mov	r6, r0
 8007212:	4658      	mov	r0, fp
 8007214:	f000 fc06 	bl	8007a24 <__mcmp>
 8007218:	2800      	cmp	r0, #0
 800721a:	f73f adbd 	bgt.w	8006d98 <_dtoa_r+0x4d0>
 800721e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007220:	9d00      	ldr	r5, [sp, #0]
 8007222:	ea6f 0a03 	mvn.w	sl, r3
 8007226:	f04f 0800 	mov.w	r8, #0
 800722a:	4631      	mov	r1, r6
 800722c:	4620      	mov	r0, r4
 800722e:	f000 f9bb 	bl	80075a8 <_Bfree>
 8007232:	2f00      	cmp	r7, #0
 8007234:	f43f aeb4 	beq.w	8006fa0 <_dtoa_r+0x6d8>
 8007238:	f1b8 0f00 	cmp.w	r8, #0
 800723c:	d005      	beq.n	800724a <_dtoa_r+0x982>
 800723e:	45b8      	cmp	r8, r7
 8007240:	d003      	beq.n	800724a <_dtoa_r+0x982>
 8007242:	4641      	mov	r1, r8
 8007244:	4620      	mov	r0, r4
 8007246:	f000 f9af 	bl	80075a8 <_Bfree>
 800724a:	4639      	mov	r1, r7
 800724c:	4620      	mov	r0, r4
 800724e:	f000 f9ab 	bl	80075a8 <_Bfree>
 8007252:	e6a5      	b.n	8006fa0 <_dtoa_r+0x6d8>
 8007254:	2600      	movs	r6, #0
 8007256:	4637      	mov	r7, r6
 8007258:	e7e1      	b.n	800721e <_dtoa_r+0x956>
 800725a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800725c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007260:	4637      	mov	r7, r6
 8007262:	e599      	b.n	8006d98 <_dtoa_r+0x4d0>
 8007264:	9b08      	ldr	r3, [sp, #32]
 8007266:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 80fd 	beq.w	800746a <_dtoa_r+0xba2>
 8007270:	2d00      	cmp	r5, #0
 8007272:	dd05      	ble.n	8007280 <_dtoa_r+0x9b8>
 8007274:	4639      	mov	r1, r7
 8007276:	462a      	mov	r2, r5
 8007278:	4620      	mov	r0, r4
 800727a:	f000 fb67 	bl	800794c <__lshift>
 800727e:	4607      	mov	r7, r0
 8007280:	9b06      	ldr	r3, [sp, #24]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d05c      	beq.n	8007340 <_dtoa_r+0xa78>
 8007286:	6879      	ldr	r1, [r7, #4]
 8007288:	4620      	mov	r0, r4
 800728a:	f000 f94d 	bl	8007528 <_Balloc>
 800728e:	4605      	mov	r5, r0
 8007290:	b928      	cbnz	r0, 800729e <_dtoa_r+0x9d6>
 8007292:	4b80      	ldr	r3, [pc, #512]	; (8007494 <_dtoa_r+0xbcc>)
 8007294:	4602      	mov	r2, r0
 8007296:	f240 21ea 	movw	r1, #746	; 0x2ea
 800729a:	f7ff bb2e 	b.w	80068fa <_dtoa_r+0x32>
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	3202      	adds	r2, #2
 80072a2:	0092      	lsls	r2, r2, #2
 80072a4:	f107 010c 	add.w	r1, r7, #12
 80072a8:	300c      	adds	r0, #12
 80072aa:	f7fe faad 	bl	8005808 <memcpy>
 80072ae:	2201      	movs	r2, #1
 80072b0:	4629      	mov	r1, r5
 80072b2:	4620      	mov	r0, r4
 80072b4:	f000 fb4a 	bl	800794c <__lshift>
 80072b8:	9b00      	ldr	r3, [sp, #0]
 80072ba:	3301      	adds	r3, #1
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	9b00      	ldr	r3, [sp, #0]
 80072c0:	444b      	add	r3, r9
 80072c2:	9307      	str	r3, [sp, #28]
 80072c4:	9b02      	ldr	r3, [sp, #8]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	46b8      	mov	r8, r7
 80072cc:	9306      	str	r3, [sp, #24]
 80072ce:	4607      	mov	r7, r0
 80072d0:	9b01      	ldr	r3, [sp, #4]
 80072d2:	4631      	mov	r1, r6
 80072d4:	3b01      	subs	r3, #1
 80072d6:	4658      	mov	r0, fp
 80072d8:	9302      	str	r3, [sp, #8]
 80072da:	f7ff fa67 	bl	80067ac <quorem>
 80072de:	4603      	mov	r3, r0
 80072e0:	3330      	adds	r3, #48	; 0x30
 80072e2:	9004      	str	r0, [sp, #16]
 80072e4:	4641      	mov	r1, r8
 80072e6:	4658      	mov	r0, fp
 80072e8:	9308      	str	r3, [sp, #32]
 80072ea:	f000 fb9b 	bl	8007a24 <__mcmp>
 80072ee:	463a      	mov	r2, r7
 80072f0:	4681      	mov	r9, r0
 80072f2:	4631      	mov	r1, r6
 80072f4:	4620      	mov	r0, r4
 80072f6:	f000 fbb1 	bl	8007a5c <__mdiff>
 80072fa:	68c2      	ldr	r2, [r0, #12]
 80072fc:	9b08      	ldr	r3, [sp, #32]
 80072fe:	4605      	mov	r5, r0
 8007300:	bb02      	cbnz	r2, 8007344 <_dtoa_r+0xa7c>
 8007302:	4601      	mov	r1, r0
 8007304:	4658      	mov	r0, fp
 8007306:	f000 fb8d 	bl	8007a24 <__mcmp>
 800730a:	9b08      	ldr	r3, [sp, #32]
 800730c:	4602      	mov	r2, r0
 800730e:	4629      	mov	r1, r5
 8007310:	4620      	mov	r0, r4
 8007312:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007316:	f000 f947 	bl	80075a8 <_Bfree>
 800731a:	9b05      	ldr	r3, [sp, #20]
 800731c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800731e:	9d01      	ldr	r5, [sp, #4]
 8007320:	ea43 0102 	orr.w	r1, r3, r2
 8007324:	9b06      	ldr	r3, [sp, #24]
 8007326:	430b      	orrs	r3, r1
 8007328:	9b08      	ldr	r3, [sp, #32]
 800732a:	d10d      	bne.n	8007348 <_dtoa_r+0xa80>
 800732c:	2b39      	cmp	r3, #57	; 0x39
 800732e:	d029      	beq.n	8007384 <_dtoa_r+0xabc>
 8007330:	f1b9 0f00 	cmp.w	r9, #0
 8007334:	dd01      	ble.n	800733a <_dtoa_r+0xa72>
 8007336:	9b04      	ldr	r3, [sp, #16]
 8007338:	3331      	adds	r3, #49	; 0x31
 800733a:	9a02      	ldr	r2, [sp, #8]
 800733c:	7013      	strb	r3, [r2, #0]
 800733e:	e774      	b.n	800722a <_dtoa_r+0x962>
 8007340:	4638      	mov	r0, r7
 8007342:	e7b9      	b.n	80072b8 <_dtoa_r+0x9f0>
 8007344:	2201      	movs	r2, #1
 8007346:	e7e2      	b.n	800730e <_dtoa_r+0xa46>
 8007348:	f1b9 0f00 	cmp.w	r9, #0
 800734c:	db06      	blt.n	800735c <_dtoa_r+0xa94>
 800734e:	9905      	ldr	r1, [sp, #20]
 8007350:	ea41 0909 	orr.w	r9, r1, r9
 8007354:	9906      	ldr	r1, [sp, #24]
 8007356:	ea59 0101 	orrs.w	r1, r9, r1
 800735a:	d120      	bne.n	800739e <_dtoa_r+0xad6>
 800735c:	2a00      	cmp	r2, #0
 800735e:	ddec      	ble.n	800733a <_dtoa_r+0xa72>
 8007360:	4659      	mov	r1, fp
 8007362:	2201      	movs	r2, #1
 8007364:	4620      	mov	r0, r4
 8007366:	9301      	str	r3, [sp, #4]
 8007368:	f000 faf0 	bl	800794c <__lshift>
 800736c:	4631      	mov	r1, r6
 800736e:	4683      	mov	fp, r0
 8007370:	f000 fb58 	bl	8007a24 <__mcmp>
 8007374:	2800      	cmp	r0, #0
 8007376:	9b01      	ldr	r3, [sp, #4]
 8007378:	dc02      	bgt.n	8007380 <_dtoa_r+0xab8>
 800737a:	d1de      	bne.n	800733a <_dtoa_r+0xa72>
 800737c:	07da      	lsls	r2, r3, #31
 800737e:	d5dc      	bpl.n	800733a <_dtoa_r+0xa72>
 8007380:	2b39      	cmp	r3, #57	; 0x39
 8007382:	d1d8      	bne.n	8007336 <_dtoa_r+0xa6e>
 8007384:	9a02      	ldr	r2, [sp, #8]
 8007386:	2339      	movs	r3, #57	; 0x39
 8007388:	7013      	strb	r3, [r2, #0]
 800738a:	462b      	mov	r3, r5
 800738c:	461d      	mov	r5, r3
 800738e:	3b01      	subs	r3, #1
 8007390:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007394:	2a39      	cmp	r2, #57	; 0x39
 8007396:	d050      	beq.n	800743a <_dtoa_r+0xb72>
 8007398:	3201      	adds	r2, #1
 800739a:	701a      	strb	r2, [r3, #0]
 800739c:	e745      	b.n	800722a <_dtoa_r+0x962>
 800739e:	2a00      	cmp	r2, #0
 80073a0:	dd03      	ble.n	80073aa <_dtoa_r+0xae2>
 80073a2:	2b39      	cmp	r3, #57	; 0x39
 80073a4:	d0ee      	beq.n	8007384 <_dtoa_r+0xabc>
 80073a6:	3301      	adds	r3, #1
 80073a8:	e7c7      	b.n	800733a <_dtoa_r+0xa72>
 80073aa:	9a01      	ldr	r2, [sp, #4]
 80073ac:	9907      	ldr	r1, [sp, #28]
 80073ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80073b2:	428a      	cmp	r2, r1
 80073b4:	d02a      	beq.n	800740c <_dtoa_r+0xb44>
 80073b6:	4659      	mov	r1, fp
 80073b8:	2300      	movs	r3, #0
 80073ba:	220a      	movs	r2, #10
 80073bc:	4620      	mov	r0, r4
 80073be:	f000 f915 	bl	80075ec <__multadd>
 80073c2:	45b8      	cmp	r8, r7
 80073c4:	4683      	mov	fp, r0
 80073c6:	f04f 0300 	mov.w	r3, #0
 80073ca:	f04f 020a 	mov.w	r2, #10
 80073ce:	4641      	mov	r1, r8
 80073d0:	4620      	mov	r0, r4
 80073d2:	d107      	bne.n	80073e4 <_dtoa_r+0xb1c>
 80073d4:	f000 f90a 	bl	80075ec <__multadd>
 80073d8:	4680      	mov	r8, r0
 80073da:	4607      	mov	r7, r0
 80073dc:	9b01      	ldr	r3, [sp, #4]
 80073de:	3301      	adds	r3, #1
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	e775      	b.n	80072d0 <_dtoa_r+0xa08>
 80073e4:	f000 f902 	bl	80075ec <__multadd>
 80073e8:	4639      	mov	r1, r7
 80073ea:	4680      	mov	r8, r0
 80073ec:	2300      	movs	r3, #0
 80073ee:	220a      	movs	r2, #10
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 f8fb 	bl	80075ec <__multadd>
 80073f6:	4607      	mov	r7, r0
 80073f8:	e7f0      	b.n	80073dc <_dtoa_r+0xb14>
 80073fa:	f1b9 0f00 	cmp.w	r9, #0
 80073fe:	9a00      	ldr	r2, [sp, #0]
 8007400:	bfcc      	ite	gt
 8007402:	464d      	movgt	r5, r9
 8007404:	2501      	movle	r5, #1
 8007406:	4415      	add	r5, r2
 8007408:	f04f 0800 	mov.w	r8, #0
 800740c:	4659      	mov	r1, fp
 800740e:	2201      	movs	r2, #1
 8007410:	4620      	mov	r0, r4
 8007412:	9301      	str	r3, [sp, #4]
 8007414:	f000 fa9a 	bl	800794c <__lshift>
 8007418:	4631      	mov	r1, r6
 800741a:	4683      	mov	fp, r0
 800741c:	f000 fb02 	bl	8007a24 <__mcmp>
 8007420:	2800      	cmp	r0, #0
 8007422:	dcb2      	bgt.n	800738a <_dtoa_r+0xac2>
 8007424:	d102      	bne.n	800742c <_dtoa_r+0xb64>
 8007426:	9b01      	ldr	r3, [sp, #4]
 8007428:	07db      	lsls	r3, r3, #31
 800742a:	d4ae      	bmi.n	800738a <_dtoa_r+0xac2>
 800742c:	462b      	mov	r3, r5
 800742e:	461d      	mov	r5, r3
 8007430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007434:	2a30      	cmp	r2, #48	; 0x30
 8007436:	d0fa      	beq.n	800742e <_dtoa_r+0xb66>
 8007438:	e6f7      	b.n	800722a <_dtoa_r+0x962>
 800743a:	9a00      	ldr	r2, [sp, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d1a5      	bne.n	800738c <_dtoa_r+0xac4>
 8007440:	f10a 0a01 	add.w	sl, sl, #1
 8007444:	2331      	movs	r3, #49	; 0x31
 8007446:	e779      	b.n	800733c <_dtoa_r+0xa74>
 8007448:	4b13      	ldr	r3, [pc, #76]	; (8007498 <_dtoa_r+0xbd0>)
 800744a:	f7ff baaf 	b.w	80069ac <_dtoa_r+0xe4>
 800744e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007450:	2b00      	cmp	r3, #0
 8007452:	f47f aa86 	bne.w	8006962 <_dtoa_r+0x9a>
 8007456:	4b11      	ldr	r3, [pc, #68]	; (800749c <_dtoa_r+0xbd4>)
 8007458:	f7ff baa8 	b.w	80069ac <_dtoa_r+0xe4>
 800745c:	f1b9 0f00 	cmp.w	r9, #0
 8007460:	dc03      	bgt.n	800746a <_dtoa_r+0xba2>
 8007462:	9b05      	ldr	r3, [sp, #20]
 8007464:	2b02      	cmp	r3, #2
 8007466:	f73f aec9 	bgt.w	80071fc <_dtoa_r+0x934>
 800746a:	9d00      	ldr	r5, [sp, #0]
 800746c:	4631      	mov	r1, r6
 800746e:	4658      	mov	r0, fp
 8007470:	f7ff f99c 	bl	80067ac <quorem>
 8007474:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007478:	f805 3b01 	strb.w	r3, [r5], #1
 800747c:	9a00      	ldr	r2, [sp, #0]
 800747e:	1aaa      	subs	r2, r5, r2
 8007480:	4591      	cmp	r9, r2
 8007482:	ddba      	ble.n	80073fa <_dtoa_r+0xb32>
 8007484:	4659      	mov	r1, fp
 8007486:	2300      	movs	r3, #0
 8007488:	220a      	movs	r2, #10
 800748a:	4620      	mov	r0, r4
 800748c:	f000 f8ae 	bl	80075ec <__multadd>
 8007490:	4683      	mov	fp, r0
 8007492:	e7eb      	b.n	800746c <_dtoa_r+0xba4>
 8007494:	08008368 	.word	0x08008368
 8007498:	080082c1 	.word	0x080082c1
 800749c:	080082e5 	.word	0x080082e5

080074a0 <_fstat_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4d07      	ldr	r5, [pc, #28]	; (80074c0 <_fstat_r+0x20>)
 80074a4:	2300      	movs	r3, #0
 80074a6:	4604      	mov	r4, r0
 80074a8:	4608      	mov	r0, r1
 80074aa:	4611      	mov	r1, r2
 80074ac:	602b      	str	r3, [r5, #0]
 80074ae:	f7fa f97c 	bl	80017aa <_fstat>
 80074b2:	1c43      	adds	r3, r0, #1
 80074b4:	d102      	bne.n	80074bc <_fstat_r+0x1c>
 80074b6:	682b      	ldr	r3, [r5, #0]
 80074b8:	b103      	cbz	r3, 80074bc <_fstat_r+0x1c>
 80074ba:	6023      	str	r3, [r4, #0]
 80074bc:	bd38      	pop	{r3, r4, r5, pc}
 80074be:	bf00      	nop
 80074c0:	200009cc 	.word	0x200009cc

080074c4 <_isatty_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	4d06      	ldr	r5, [pc, #24]	; (80074e0 <_isatty_r+0x1c>)
 80074c8:	2300      	movs	r3, #0
 80074ca:	4604      	mov	r4, r0
 80074cc:	4608      	mov	r0, r1
 80074ce:	602b      	str	r3, [r5, #0]
 80074d0:	f7fa f97b 	bl	80017ca <_isatty>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_isatty_r+0x1a>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_isatty_r+0x1a>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	200009cc 	.word	0x200009cc

080074e4 <_localeconv_r>:
 80074e4:	4800      	ldr	r0, [pc, #0]	; (80074e8 <_localeconv_r+0x4>)
 80074e6:	4770      	bx	lr
 80074e8:	20000160 	.word	0x20000160

080074ec <_lseek_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d07      	ldr	r5, [pc, #28]	; (800750c <_lseek_r+0x20>)
 80074f0:	4604      	mov	r4, r0
 80074f2:	4608      	mov	r0, r1
 80074f4:	4611      	mov	r1, r2
 80074f6:	2200      	movs	r2, #0
 80074f8:	602a      	str	r2, [r5, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f7fa f970 	bl	80017e0 <_lseek>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_lseek_r+0x1e>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_lseek_r+0x1e>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	200009cc 	.word	0x200009cc

08007510 <__malloc_lock>:
 8007510:	4801      	ldr	r0, [pc, #4]	; (8007518 <__malloc_lock+0x8>)
 8007512:	f7fe b90a 	b.w	800572a <__retarget_lock_acquire_recursive>
 8007516:	bf00      	nop
 8007518:	200009c4 	.word	0x200009c4

0800751c <__malloc_unlock>:
 800751c:	4801      	ldr	r0, [pc, #4]	; (8007524 <__malloc_unlock+0x8>)
 800751e:	f7fe b905 	b.w	800572c <__retarget_lock_release_recursive>
 8007522:	bf00      	nop
 8007524:	200009c4 	.word	0x200009c4

08007528 <_Balloc>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800752c:	4604      	mov	r4, r0
 800752e:	460d      	mov	r5, r1
 8007530:	b976      	cbnz	r6, 8007550 <_Balloc+0x28>
 8007532:	2010      	movs	r0, #16
 8007534:	f7fe f960 	bl	80057f8 <malloc>
 8007538:	4602      	mov	r2, r0
 800753a:	6260      	str	r0, [r4, #36]	; 0x24
 800753c:	b920      	cbnz	r0, 8007548 <_Balloc+0x20>
 800753e:	4b18      	ldr	r3, [pc, #96]	; (80075a0 <_Balloc+0x78>)
 8007540:	4818      	ldr	r0, [pc, #96]	; (80075a4 <_Balloc+0x7c>)
 8007542:	2166      	movs	r1, #102	; 0x66
 8007544:	f000 fb90 	bl	8007c68 <__assert_func>
 8007548:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800754c:	6006      	str	r6, [r0, #0]
 800754e:	60c6      	str	r6, [r0, #12]
 8007550:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007552:	68f3      	ldr	r3, [r6, #12]
 8007554:	b183      	cbz	r3, 8007578 <_Balloc+0x50>
 8007556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800755e:	b9b8      	cbnz	r0, 8007590 <_Balloc+0x68>
 8007560:	2101      	movs	r1, #1
 8007562:	fa01 f605 	lsl.w	r6, r1, r5
 8007566:	1d72      	adds	r2, r6, #5
 8007568:	0092      	lsls	r2, r2, #2
 800756a:	4620      	mov	r0, r4
 800756c:	f000 fb5a 	bl	8007c24 <_calloc_r>
 8007570:	b160      	cbz	r0, 800758c <_Balloc+0x64>
 8007572:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007576:	e00e      	b.n	8007596 <_Balloc+0x6e>
 8007578:	2221      	movs	r2, #33	; 0x21
 800757a:	2104      	movs	r1, #4
 800757c:	4620      	mov	r0, r4
 800757e:	f000 fb51 	bl	8007c24 <_calloc_r>
 8007582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007584:	60f0      	str	r0, [r6, #12]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e4      	bne.n	8007556 <_Balloc+0x2e>
 800758c:	2000      	movs	r0, #0
 800758e:	bd70      	pop	{r4, r5, r6, pc}
 8007590:	6802      	ldr	r2, [r0, #0]
 8007592:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007596:	2300      	movs	r3, #0
 8007598:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800759c:	e7f7      	b.n	800758e <_Balloc+0x66>
 800759e:	bf00      	nop
 80075a0:	080082f2 	.word	0x080082f2
 80075a4:	08008379 	.word	0x08008379

080075a8 <_Bfree>:
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075ac:	4605      	mov	r5, r0
 80075ae:	460c      	mov	r4, r1
 80075b0:	b976      	cbnz	r6, 80075d0 <_Bfree+0x28>
 80075b2:	2010      	movs	r0, #16
 80075b4:	f7fe f920 	bl	80057f8 <malloc>
 80075b8:	4602      	mov	r2, r0
 80075ba:	6268      	str	r0, [r5, #36]	; 0x24
 80075bc:	b920      	cbnz	r0, 80075c8 <_Bfree+0x20>
 80075be:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <_Bfree+0x3c>)
 80075c0:	4809      	ldr	r0, [pc, #36]	; (80075e8 <_Bfree+0x40>)
 80075c2:	218a      	movs	r1, #138	; 0x8a
 80075c4:	f000 fb50 	bl	8007c68 <__assert_func>
 80075c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075cc:	6006      	str	r6, [r0, #0]
 80075ce:	60c6      	str	r6, [r0, #12]
 80075d0:	b13c      	cbz	r4, 80075e2 <_Bfree+0x3a>
 80075d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80075d4:	6862      	ldr	r2, [r4, #4]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80075dc:	6021      	str	r1, [r4, #0]
 80075de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	080082f2 	.word	0x080082f2
 80075e8:	08008379 	.word	0x08008379

080075ec <__multadd>:
 80075ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f0:	690e      	ldr	r6, [r1, #16]
 80075f2:	4607      	mov	r7, r0
 80075f4:	4698      	mov	r8, r3
 80075f6:	460c      	mov	r4, r1
 80075f8:	f101 0014 	add.w	r0, r1, #20
 80075fc:	2300      	movs	r3, #0
 80075fe:	6805      	ldr	r5, [r0, #0]
 8007600:	b2a9      	uxth	r1, r5
 8007602:	fb02 8101 	mla	r1, r2, r1, r8
 8007606:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800760a:	0c2d      	lsrs	r5, r5, #16
 800760c:	fb02 c505 	mla	r5, r2, r5, ip
 8007610:	b289      	uxth	r1, r1
 8007612:	3301      	adds	r3, #1
 8007614:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007618:	429e      	cmp	r6, r3
 800761a:	f840 1b04 	str.w	r1, [r0], #4
 800761e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007622:	dcec      	bgt.n	80075fe <__multadd+0x12>
 8007624:	f1b8 0f00 	cmp.w	r8, #0
 8007628:	d022      	beq.n	8007670 <__multadd+0x84>
 800762a:	68a3      	ldr	r3, [r4, #8]
 800762c:	42b3      	cmp	r3, r6
 800762e:	dc19      	bgt.n	8007664 <__multadd+0x78>
 8007630:	6861      	ldr	r1, [r4, #4]
 8007632:	4638      	mov	r0, r7
 8007634:	3101      	adds	r1, #1
 8007636:	f7ff ff77 	bl	8007528 <_Balloc>
 800763a:	4605      	mov	r5, r0
 800763c:	b928      	cbnz	r0, 800764a <__multadd+0x5e>
 800763e:	4602      	mov	r2, r0
 8007640:	4b0d      	ldr	r3, [pc, #52]	; (8007678 <__multadd+0x8c>)
 8007642:	480e      	ldr	r0, [pc, #56]	; (800767c <__multadd+0x90>)
 8007644:	21b5      	movs	r1, #181	; 0xb5
 8007646:	f000 fb0f 	bl	8007c68 <__assert_func>
 800764a:	6922      	ldr	r2, [r4, #16]
 800764c:	3202      	adds	r2, #2
 800764e:	f104 010c 	add.w	r1, r4, #12
 8007652:	0092      	lsls	r2, r2, #2
 8007654:	300c      	adds	r0, #12
 8007656:	f7fe f8d7 	bl	8005808 <memcpy>
 800765a:	4621      	mov	r1, r4
 800765c:	4638      	mov	r0, r7
 800765e:	f7ff ffa3 	bl	80075a8 <_Bfree>
 8007662:	462c      	mov	r4, r5
 8007664:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007668:	3601      	adds	r6, #1
 800766a:	f8c3 8014 	str.w	r8, [r3, #20]
 800766e:	6126      	str	r6, [r4, #16]
 8007670:	4620      	mov	r0, r4
 8007672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007676:	bf00      	nop
 8007678:	08008368 	.word	0x08008368
 800767c:	08008379 	.word	0x08008379

08007680 <__hi0bits>:
 8007680:	0c03      	lsrs	r3, r0, #16
 8007682:	041b      	lsls	r3, r3, #16
 8007684:	b9d3      	cbnz	r3, 80076bc <__hi0bits+0x3c>
 8007686:	0400      	lsls	r0, r0, #16
 8007688:	2310      	movs	r3, #16
 800768a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800768e:	bf04      	itt	eq
 8007690:	0200      	lsleq	r0, r0, #8
 8007692:	3308      	addeq	r3, #8
 8007694:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007698:	bf04      	itt	eq
 800769a:	0100      	lsleq	r0, r0, #4
 800769c:	3304      	addeq	r3, #4
 800769e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80076a2:	bf04      	itt	eq
 80076a4:	0080      	lsleq	r0, r0, #2
 80076a6:	3302      	addeq	r3, #2
 80076a8:	2800      	cmp	r0, #0
 80076aa:	db05      	blt.n	80076b8 <__hi0bits+0x38>
 80076ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80076b0:	f103 0301 	add.w	r3, r3, #1
 80076b4:	bf08      	it	eq
 80076b6:	2320      	moveq	r3, #32
 80076b8:	4618      	mov	r0, r3
 80076ba:	4770      	bx	lr
 80076bc:	2300      	movs	r3, #0
 80076be:	e7e4      	b.n	800768a <__hi0bits+0xa>

080076c0 <__lo0bits>:
 80076c0:	6803      	ldr	r3, [r0, #0]
 80076c2:	f013 0207 	ands.w	r2, r3, #7
 80076c6:	4601      	mov	r1, r0
 80076c8:	d00b      	beq.n	80076e2 <__lo0bits+0x22>
 80076ca:	07da      	lsls	r2, r3, #31
 80076cc:	d424      	bmi.n	8007718 <__lo0bits+0x58>
 80076ce:	0798      	lsls	r0, r3, #30
 80076d0:	bf49      	itett	mi
 80076d2:	085b      	lsrmi	r3, r3, #1
 80076d4:	089b      	lsrpl	r3, r3, #2
 80076d6:	2001      	movmi	r0, #1
 80076d8:	600b      	strmi	r3, [r1, #0]
 80076da:	bf5c      	itt	pl
 80076dc:	600b      	strpl	r3, [r1, #0]
 80076de:	2002      	movpl	r0, #2
 80076e0:	4770      	bx	lr
 80076e2:	b298      	uxth	r0, r3
 80076e4:	b9b0      	cbnz	r0, 8007714 <__lo0bits+0x54>
 80076e6:	0c1b      	lsrs	r3, r3, #16
 80076e8:	2010      	movs	r0, #16
 80076ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80076ee:	bf04      	itt	eq
 80076f0:	0a1b      	lsreq	r3, r3, #8
 80076f2:	3008      	addeq	r0, #8
 80076f4:	071a      	lsls	r2, r3, #28
 80076f6:	bf04      	itt	eq
 80076f8:	091b      	lsreq	r3, r3, #4
 80076fa:	3004      	addeq	r0, #4
 80076fc:	079a      	lsls	r2, r3, #30
 80076fe:	bf04      	itt	eq
 8007700:	089b      	lsreq	r3, r3, #2
 8007702:	3002      	addeq	r0, #2
 8007704:	07da      	lsls	r2, r3, #31
 8007706:	d403      	bmi.n	8007710 <__lo0bits+0x50>
 8007708:	085b      	lsrs	r3, r3, #1
 800770a:	f100 0001 	add.w	r0, r0, #1
 800770e:	d005      	beq.n	800771c <__lo0bits+0x5c>
 8007710:	600b      	str	r3, [r1, #0]
 8007712:	4770      	bx	lr
 8007714:	4610      	mov	r0, r2
 8007716:	e7e8      	b.n	80076ea <__lo0bits+0x2a>
 8007718:	2000      	movs	r0, #0
 800771a:	4770      	bx	lr
 800771c:	2020      	movs	r0, #32
 800771e:	4770      	bx	lr

08007720 <__i2b>:
 8007720:	b510      	push	{r4, lr}
 8007722:	460c      	mov	r4, r1
 8007724:	2101      	movs	r1, #1
 8007726:	f7ff feff 	bl	8007528 <_Balloc>
 800772a:	4602      	mov	r2, r0
 800772c:	b928      	cbnz	r0, 800773a <__i2b+0x1a>
 800772e:	4b05      	ldr	r3, [pc, #20]	; (8007744 <__i2b+0x24>)
 8007730:	4805      	ldr	r0, [pc, #20]	; (8007748 <__i2b+0x28>)
 8007732:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007736:	f000 fa97 	bl	8007c68 <__assert_func>
 800773a:	2301      	movs	r3, #1
 800773c:	6144      	str	r4, [r0, #20]
 800773e:	6103      	str	r3, [r0, #16]
 8007740:	bd10      	pop	{r4, pc}
 8007742:	bf00      	nop
 8007744:	08008368 	.word	0x08008368
 8007748:	08008379 	.word	0x08008379

0800774c <__multiply>:
 800774c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007750:	4614      	mov	r4, r2
 8007752:	690a      	ldr	r2, [r1, #16]
 8007754:	6923      	ldr	r3, [r4, #16]
 8007756:	429a      	cmp	r2, r3
 8007758:	bfb8      	it	lt
 800775a:	460b      	movlt	r3, r1
 800775c:	460d      	mov	r5, r1
 800775e:	bfbc      	itt	lt
 8007760:	4625      	movlt	r5, r4
 8007762:	461c      	movlt	r4, r3
 8007764:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007768:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800776c:	68ab      	ldr	r3, [r5, #8]
 800776e:	6869      	ldr	r1, [r5, #4]
 8007770:	eb0a 0709 	add.w	r7, sl, r9
 8007774:	42bb      	cmp	r3, r7
 8007776:	b085      	sub	sp, #20
 8007778:	bfb8      	it	lt
 800777a:	3101      	addlt	r1, #1
 800777c:	f7ff fed4 	bl	8007528 <_Balloc>
 8007780:	b930      	cbnz	r0, 8007790 <__multiply+0x44>
 8007782:	4602      	mov	r2, r0
 8007784:	4b42      	ldr	r3, [pc, #264]	; (8007890 <__multiply+0x144>)
 8007786:	4843      	ldr	r0, [pc, #268]	; (8007894 <__multiply+0x148>)
 8007788:	f240 115d 	movw	r1, #349	; 0x15d
 800778c:	f000 fa6c 	bl	8007c68 <__assert_func>
 8007790:	f100 0614 	add.w	r6, r0, #20
 8007794:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007798:	4633      	mov	r3, r6
 800779a:	2200      	movs	r2, #0
 800779c:	4543      	cmp	r3, r8
 800779e:	d31e      	bcc.n	80077de <__multiply+0x92>
 80077a0:	f105 0c14 	add.w	ip, r5, #20
 80077a4:	f104 0314 	add.w	r3, r4, #20
 80077a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80077ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80077b0:	9202      	str	r2, [sp, #8]
 80077b2:	ebac 0205 	sub.w	r2, ip, r5
 80077b6:	3a15      	subs	r2, #21
 80077b8:	f022 0203 	bic.w	r2, r2, #3
 80077bc:	3204      	adds	r2, #4
 80077be:	f105 0115 	add.w	r1, r5, #21
 80077c2:	458c      	cmp	ip, r1
 80077c4:	bf38      	it	cc
 80077c6:	2204      	movcc	r2, #4
 80077c8:	9201      	str	r2, [sp, #4]
 80077ca:	9a02      	ldr	r2, [sp, #8]
 80077cc:	9303      	str	r3, [sp, #12]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d808      	bhi.n	80077e4 <__multiply+0x98>
 80077d2:	2f00      	cmp	r7, #0
 80077d4:	dc55      	bgt.n	8007882 <__multiply+0x136>
 80077d6:	6107      	str	r7, [r0, #16]
 80077d8:	b005      	add	sp, #20
 80077da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077de:	f843 2b04 	str.w	r2, [r3], #4
 80077e2:	e7db      	b.n	800779c <__multiply+0x50>
 80077e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80077e8:	f1ba 0f00 	cmp.w	sl, #0
 80077ec:	d020      	beq.n	8007830 <__multiply+0xe4>
 80077ee:	f105 0e14 	add.w	lr, r5, #20
 80077f2:	46b1      	mov	r9, r6
 80077f4:	2200      	movs	r2, #0
 80077f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80077fa:	f8d9 b000 	ldr.w	fp, [r9]
 80077fe:	b2a1      	uxth	r1, r4
 8007800:	fa1f fb8b 	uxth.w	fp, fp
 8007804:	fb0a b101 	mla	r1, sl, r1, fp
 8007808:	4411      	add	r1, r2
 800780a:	f8d9 2000 	ldr.w	r2, [r9]
 800780e:	0c24      	lsrs	r4, r4, #16
 8007810:	0c12      	lsrs	r2, r2, #16
 8007812:	fb0a 2404 	mla	r4, sl, r4, r2
 8007816:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800781a:	b289      	uxth	r1, r1
 800781c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007820:	45f4      	cmp	ip, lr
 8007822:	f849 1b04 	str.w	r1, [r9], #4
 8007826:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800782a:	d8e4      	bhi.n	80077f6 <__multiply+0xaa>
 800782c:	9901      	ldr	r1, [sp, #4]
 800782e:	5072      	str	r2, [r6, r1]
 8007830:	9a03      	ldr	r2, [sp, #12]
 8007832:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007836:	3304      	adds	r3, #4
 8007838:	f1b9 0f00 	cmp.w	r9, #0
 800783c:	d01f      	beq.n	800787e <__multiply+0x132>
 800783e:	6834      	ldr	r4, [r6, #0]
 8007840:	f105 0114 	add.w	r1, r5, #20
 8007844:	46b6      	mov	lr, r6
 8007846:	f04f 0a00 	mov.w	sl, #0
 800784a:	880a      	ldrh	r2, [r1, #0]
 800784c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007850:	fb09 b202 	mla	r2, r9, r2, fp
 8007854:	4492      	add	sl, r2
 8007856:	b2a4      	uxth	r4, r4
 8007858:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800785c:	f84e 4b04 	str.w	r4, [lr], #4
 8007860:	f851 4b04 	ldr.w	r4, [r1], #4
 8007864:	f8be 2000 	ldrh.w	r2, [lr]
 8007868:	0c24      	lsrs	r4, r4, #16
 800786a:	fb09 2404 	mla	r4, r9, r4, r2
 800786e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007872:	458c      	cmp	ip, r1
 8007874:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007878:	d8e7      	bhi.n	800784a <__multiply+0xfe>
 800787a:	9a01      	ldr	r2, [sp, #4]
 800787c:	50b4      	str	r4, [r6, r2]
 800787e:	3604      	adds	r6, #4
 8007880:	e7a3      	b.n	80077ca <__multiply+0x7e>
 8007882:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1a5      	bne.n	80077d6 <__multiply+0x8a>
 800788a:	3f01      	subs	r7, #1
 800788c:	e7a1      	b.n	80077d2 <__multiply+0x86>
 800788e:	bf00      	nop
 8007890:	08008368 	.word	0x08008368
 8007894:	08008379 	.word	0x08008379

08007898 <__pow5mult>:
 8007898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800789c:	4615      	mov	r5, r2
 800789e:	f012 0203 	ands.w	r2, r2, #3
 80078a2:	4606      	mov	r6, r0
 80078a4:	460f      	mov	r7, r1
 80078a6:	d007      	beq.n	80078b8 <__pow5mult+0x20>
 80078a8:	4c25      	ldr	r4, [pc, #148]	; (8007940 <__pow5mult+0xa8>)
 80078aa:	3a01      	subs	r2, #1
 80078ac:	2300      	movs	r3, #0
 80078ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078b2:	f7ff fe9b 	bl	80075ec <__multadd>
 80078b6:	4607      	mov	r7, r0
 80078b8:	10ad      	asrs	r5, r5, #2
 80078ba:	d03d      	beq.n	8007938 <__pow5mult+0xa0>
 80078bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078be:	b97c      	cbnz	r4, 80078e0 <__pow5mult+0x48>
 80078c0:	2010      	movs	r0, #16
 80078c2:	f7fd ff99 	bl	80057f8 <malloc>
 80078c6:	4602      	mov	r2, r0
 80078c8:	6270      	str	r0, [r6, #36]	; 0x24
 80078ca:	b928      	cbnz	r0, 80078d8 <__pow5mult+0x40>
 80078cc:	4b1d      	ldr	r3, [pc, #116]	; (8007944 <__pow5mult+0xac>)
 80078ce:	481e      	ldr	r0, [pc, #120]	; (8007948 <__pow5mult+0xb0>)
 80078d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80078d4:	f000 f9c8 	bl	8007c68 <__assert_func>
 80078d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078dc:	6004      	str	r4, [r0, #0]
 80078de:	60c4      	str	r4, [r0, #12]
 80078e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80078e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80078e8:	b94c      	cbnz	r4, 80078fe <__pow5mult+0x66>
 80078ea:	f240 2171 	movw	r1, #625	; 0x271
 80078ee:	4630      	mov	r0, r6
 80078f0:	f7ff ff16 	bl	8007720 <__i2b>
 80078f4:	2300      	movs	r3, #0
 80078f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80078fa:	4604      	mov	r4, r0
 80078fc:	6003      	str	r3, [r0, #0]
 80078fe:	f04f 0900 	mov.w	r9, #0
 8007902:	07eb      	lsls	r3, r5, #31
 8007904:	d50a      	bpl.n	800791c <__pow5mult+0x84>
 8007906:	4639      	mov	r1, r7
 8007908:	4622      	mov	r2, r4
 800790a:	4630      	mov	r0, r6
 800790c:	f7ff ff1e 	bl	800774c <__multiply>
 8007910:	4639      	mov	r1, r7
 8007912:	4680      	mov	r8, r0
 8007914:	4630      	mov	r0, r6
 8007916:	f7ff fe47 	bl	80075a8 <_Bfree>
 800791a:	4647      	mov	r7, r8
 800791c:	106d      	asrs	r5, r5, #1
 800791e:	d00b      	beq.n	8007938 <__pow5mult+0xa0>
 8007920:	6820      	ldr	r0, [r4, #0]
 8007922:	b938      	cbnz	r0, 8007934 <__pow5mult+0x9c>
 8007924:	4622      	mov	r2, r4
 8007926:	4621      	mov	r1, r4
 8007928:	4630      	mov	r0, r6
 800792a:	f7ff ff0f 	bl	800774c <__multiply>
 800792e:	6020      	str	r0, [r4, #0]
 8007930:	f8c0 9000 	str.w	r9, [r0]
 8007934:	4604      	mov	r4, r0
 8007936:	e7e4      	b.n	8007902 <__pow5mult+0x6a>
 8007938:	4638      	mov	r0, r7
 800793a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800793e:	bf00      	nop
 8007940:	080084d0 	.word	0x080084d0
 8007944:	080082f2 	.word	0x080082f2
 8007948:	08008379 	.word	0x08008379

0800794c <__lshift>:
 800794c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007950:	460c      	mov	r4, r1
 8007952:	6849      	ldr	r1, [r1, #4]
 8007954:	6923      	ldr	r3, [r4, #16]
 8007956:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800795a:	68a3      	ldr	r3, [r4, #8]
 800795c:	4607      	mov	r7, r0
 800795e:	4691      	mov	r9, r2
 8007960:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007964:	f108 0601 	add.w	r6, r8, #1
 8007968:	42b3      	cmp	r3, r6
 800796a:	db0b      	blt.n	8007984 <__lshift+0x38>
 800796c:	4638      	mov	r0, r7
 800796e:	f7ff fddb 	bl	8007528 <_Balloc>
 8007972:	4605      	mov	r5, r0
 8007974:	b948      	cbnz	r0, 800798a <__lshift+0x3e>
 8007976:	4602      	mov	r2, r0
 8007978:	4b28      	ldr	r3, [pc, #160]	; (8007a1c <__lshift+0xd0>)
 800797a:	4829      	ldr	r0, [pc, #164]	; (8007a20 <__lshift+0xd4>)
 800797c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007980:	f000 f972 	bl	8007c68 <__assert_func>
 8007984:	3101      	adds	r1, #1
 8007986:	005b      	lsls	r3, r3, #1
 8007988:	e7ee      	b.n	8007968 <__lshift+0x1c>
 800798a:	2300      	movs	r3, #0
 800798c:	f100 0114 	add.w	r1, r0, #20
 8007990:	f100 0210 	add.w	r2, r0, #16
 8007994:	4618      	mov	r0, r3
 8007996:	4553      	cmp	r3, sl
 8007998:	db33      	blt.n	8007a02 <__lshift+0xb6>
 800799a:	6920      	ldr	r0, [r4, #16]
 800799c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079a0:	f104 0314 	add.w	r3, r4, #20
 80079a4:	f019 091f 	ands.w	r9, r9, #31
 80079a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079b0:	d02b      	beq.n	8007a0a <__lshift+0xbe>
 80079b2:	f1c9 0e20 	rsb	lr, r9, #32
 80079b6:	468a      	mov	sl, r1
 80079b8:	2200      	movs	r2, #0
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	fa00 f009 	lsl.w	r0, r0, r9
 80079c0:	4302      	orrs	r2, r0
 80079c2:	f84a 2b04 	str.w	r2, [sl], #4
 80079c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ca:	459c      	cmp	ip, r3
 80079cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80079d0:	d8f3      	bhi.n	80079ba <__lshift+0x6e>
 80079d2:	ebac 0304 	sub.w	r3, ip, r4
 80079d6:	3b15      	subs	r3, #21
 80079d8:	f023 0303 	bic.w	r3, r3, #3
 80079dc:	3304      	adds	r3, #4
 80079de:	f104 0015 	add.w	r0, r4, #21
 80079e2:	4584      	cmp	ip, r0
 80079e4:	bf38      	it	cc
 80079e6:	2304      	movcc	r3, #4
 80079e8:	50ca      	str	r2, [r1, r3]
 80079ea:	b10a      	cbz	r2, 80079f0 <__lshift+0xa4>
 80079ec:	f108 0602 	add.w	r6, r8, #2
 80079f0:	3e01      	subs	r6, #1
 80079f2:	4638      	mov	r0, r7
 80079f4:	612e      	str	r6, [r5, #16]
 80079f6:	4621      	mov	r1, r4
 80079f8:	f7ff fdd6 	bl	80075a8 <_Bfree>
 80079fc:	4628      	mov	r0, r5
 80079fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a02:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a06:	3301      	adds	r3, #1
 8007a08:	e7c5      	b.n	8007996 <__lshift+0x4a>
 8007a0a:	3904      	subs	r1, #4
 8007a0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a10:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a14:	459c      	cmp	ip, r3
 8007a16:	d8f9      	bhi.n	8007a0c <__lshift+0xc0>
 8007a18:	e7ea      	b.n	80079f0 <__lshift+0xa4>
 8007a1a:	bf00      	nop
 8007a1c:	08008368 	.word	0x08008368
 8007a20:	08008379 	.word	0x08008379

08007a24 <__mcmp>:
 8007a24:	b530      	push	{r4, r5, lr}
 8007a26:	6902      	ldr	r2, [r0, #16]
 8007a28:	690c      	ldr	r4, [r1, #16]
 8007a2a:	1b12      	subs	r2, r2, r4
 8007a2c:	d10e      	bne.n	8007a4c <__mcmp+0x28>
 8007a2e:	f100 0314 	add.w	r3, r0, #20
 8007a32:	3114      	adds	r1, #20
 8007a34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007a38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007a3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007a40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007a44:	42a5      	cmp	r5, r4
 8007a46:	d003      	beq.n	8007a50 <__mcmp+0x2c>
 8007a48:	d305      	bcc.n	8007a56 <__mcmp+0x32>
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	bd30      	pop	{r4, r5, pc}
 8007a50:	4283      	cmp	r3, r0
 8007a52:	d3f3      	bcc.n	8007a3c <__mcmp+0x18>
 8007a54:	e7fa      	b.n	8007a4c <__mcmp+0x28>
 8007a56:	f04f 32ff 	mov.w	r2, #4294967295
 8007a5a:	e7f7      	b.n	8007a4c <__mcmp+0x28>

08007a5c <__mdiff>:
 8007a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a60:	460c      	mov	r4, r1
 8007a62:	4606      	mov	r6, r0
 8007a64:	4611      	mov	r1, r2
 8007a66:	4620      	mov	r0, r4
 8007a68:	4617      	mov	r7, r2
 8007a6a:	f7ff ffdb 	bl	8007a24 <__mcmp>
 8007a6e:	1e05      	subs	r5, r0, #0
 8007a70:	d110      	bne.n	8007a94 <__mdiff+0x38>
 8007a72:	4629      	mov	r1, r5
 8007a74:	4630      	mov	r0, r6
 8007a76:	f7ff fd57 	bl	8007528 <_Balloc>
 8007a7a:	b930      	cbnz	r0, 8007a8a <__mdiff+0x2e>
 8007a7c:	4b39      	ldr	r3, [pc, #228]	; (8007b64 <__mdiff+0x108>)
 8007a7e:	4602      	mov	r2, r0
 8007a80:	f240 2132 	movw	r1, #562	; 0x232
 8007a84:	4838      	ldr	r0, [pc, #224]	; (8007b68 <__mdiff+0x10c>)
 8007a86:	f000 f8ef 	bl	8007c68 <__assert_func>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a94:	bfa4      	itt	ge
 8007a96:	463b      	movge	r3, r7
 8007a98:	4627      	movge	r7, r4
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	6879      	ldr	r1, [r7, #4]
 8007a9e:	bfa6      	itte	ge
 8007aa0:	461c      	movge	r4, r3
 8007aa2:	2500      	movge	r5, #0
 8007aa4:	2501      	movlt	r5, #1
 8007aa6:	f7ff fd3f 	bl	8007528 <_Balloc>
 8007aaa:	b920      	cbnz	r0, 8007ab6 <__mdiff+0x5a>
 8007aac:	4b2d      	ldr	r3, [pc, #180]	; (8007b64 <__mdiff+0x108>)
 8007aae:	4602      	mov	r2, r0
 8007ab0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007ab4:	e7e6      	b.n	8007a84 <__mdiff+0x28>
 8007ab6:	693e      	ldr	r6, [r7, #16]
 8007ab8:	60c5      	str	r5, [r0, #12]
 8007aba:	6925      	ldr	r5, [r4, #16]
 8007abc:	f107 0114 	add.w	r1, r7, #20
 8007ac0:	f104 0914 	add.w	r9, r4, #20
 8007ac4:	f100 0e14 	add.w	lr, r0, #20
 8007ac8:	f107 0210 	add.w	r2, r7, #16
 8007acc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007ad0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007ad4:	46f2      	mov	sl, lr
 8007ad6:	2700      	movs	r7, #0
 8007ad8:	f859 3b04 	ldr.w	r3, [r9], #4
 8007adc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ae0:	fa1f f883 	uxth.w	r8, r3
 8007ae4:	fa17 f78b 	uxtah	r7, r7, fp
 8007ae8:	0c1b      	lsrs	r3, r3, #16
 8007aea:	eba7 0808 	sub.w	r8, r7, r8
 8007aee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007af2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007af6:	fa1f f888 	uxth.w	r8, r8
 8007afa:	141f      	asrs	r7, r3, #16
 8007afc:	454d      	cmp	r5, r9
 8007afe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007b02:	f84a 3b04 	str.w	r3, [sl], #4
 8007b06:	d8e7      	bhi.n	8007ad8 <__mdiff+0x7c>
 8007b08:	1b2b      	subs	r3, r5, r4
 8007b0a:	3b15      	subs	r3, #21
 8007b0c:	f023 0303 	bic.w	r3, r3, #3
 8007b10:	3304      	adds	r3, #4
 8007b12:	3415      	adds	r4, #21
 8007b14:	42a5      	cmp	r5, r4
 8007b16:	bf38      	it	cc
 8007b18:	2304      	movcc	r3, #4
 8007b1a:	4419      	add	r1, r3
 8007b1c:	4473      	add	r3, lr
 8007b1e:	469e      	mov	lr, r3
 8007b20:	460d      	mov	r5, r1
 8007b22:	4565      	cmp	r5, ip
 8007b24:	d30e      	bcc.n	8007b44 <__mdiff+0xe8>
 8007b26:	f10c 0203 	add.w	r2, ip, #3
 8007b2a:	1a52      	subs	r2, r2, r1
 8007b2c:	f022 0203 	bic.w	r2, r2, #3
 8007b30:	3903      	subs	r1, #3
 8007b32:	458c      	cmp	ip, r1
 8007b34:	bf38      	it	cc
 8007b36:	2200      	movcc	r2, #0
 8007b38:	441a      	add	r2, r3
 8007b3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007b3e:	b17b      	cbz	r3, 8007b60 <__mdiff+0x104>
 8007b40:	6106      	str	r6, [r0, #16]
 8007b42:	e7a5      	b.n	8007a90 <__mdiff+0x34>
 8007b44:	f855 8b04 	ldr.w	r8, [r5], #4
 8007b48:	fa17 f488 	uxtah	r4, r7, r8
 8007b4c:	1422      	asrs	r2, r4, #16
 8007b4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007b52:	b2a4      	uxth	r4, r4
 8007b54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007b58:	f84e 4b04 	str.w	r4, [lr], #4
 8007b5c:	1417      	asrs	r7, r2, #16
 8007b5e:	e7e0      	b.n	8007b22 <__mdiff+0xc6>
 8007b60:	3e01      	subs	r6, #1
 8007b62:	e7ea      	b.n	8007b3a <__mdiff+0xde>
 8007b64:	08008368 	.word	0x08008368
 8007b68:	08008379 	.word	0x08008379

08007b6c <__d2b>:
 8007b6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b70:	4689      	mov	r9, r1
 8007b72:	2101      	movs	r1, #1
 8007b74:	ec57 6b10 	vmov	r6, r7, d0
 8007b78:	4690      	mov	r8, r2
 8007b7a:	f7ff fcd5 	bl	8007528 <_Balloc>
 8007b7e:	4604      	mov	r4, r0
 8007b80:	b930      	cbnz	r0, 8007b90 <__d2b+0x24>
 8007b82:	4602      	mov	r2, r0
 8007b84:	4b25      	ldr	r3, [pc, #148]	; (8007c1c <__d2b+0xb0>)
 8007b86:	4826      	ldr	r0, [pc, #152]	; (8007c20 <__d2b+0xb4>)
 8007b88:	f240 310a 	movw	r1, #778	; 0x30a
 8007b8c:	f000 f86c 	bl	8007c68 <__assert_func>
 8007b90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007b94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b98:	bb35      	cbnz	r5, 8007be8 <__d2b+0x7c>
 8007b9a:	2e00      	cmp	r6, #0
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	d028      	beq.n	8007bf2 <__d2b+0x86>
 8007ba0:	4668      	mov	r0, sp
 8007ba2:	9600      	str	r6, [sp, #0]
 8007ba4:	f7ff fd8c 	bl	80076c0 <__lo0bits>
 8007ba8:	9900      	ldr	r1, [sp, #0]
 8007baa:	b300      	cbz	r0, 8007bee <__d2b+0x82>
 8007bac:	9a01      	ldr	r2, [sp, #4]
 8007bae:	f1c0 0320 	rsb	r3, r0, #32
 8007bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb6:	430b      	orrs	r3, r1
 8007bb8:	40c2      	lsrs	r2, r0
 8007bba:	6163      	str	r3, [r4, #20]
 8007bbc:	9201      	str	r2, [sp, #4]
 8007bbe:	9b01      	ldr	r3, [sp, #4]
 8007bc0:	61a3      	str	r3, [r4, #24]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bf14      	ite	ne
 8007bc6:	2202      	movne	r2, #2
 8007bc8:	2201      	moveq	r2, #1
 8007bca:	6122      	str	r2, [r4, #16]
 8007bcc:	b1d5      	cbz	r5, 8007c04 <__d2b+0x98>
 8007bce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007bd2:	4405      	add	r5, r0
 8007bd4:	f8c9 5000 	str.w	r5, [r9]
 8007bd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007bdc:	f8c8 0000 	str.w	r0, [r8]
 8007be0:	4620      	mov	r0, r4
 8007be2:	b003      	add	sp, #12
 8007be4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007be8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bec:	e7d5      	b.n	8007b9a <__d2b+0x2e>
 8007bee:	6161      	str	r1, [r4, #20]
 8007bf0:	e7e5      	b.n	8007bbe <__d2b+0x52>
 8007bf2:	a801      	add	r0, sp, #4
 8007bf4:	f7ff fd64 	bl	80076c0 <__lo0bits>
 8007bf8:	9b01      	ldr	r3, [sp, #4]
 8007bfa:	6163      	str	r3, [r4, #20]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	6122      	str	r2, [r4, #16]
 8007c00:	3020      	adds	r0, #32
 8007c02:	e7e3      	b.n	8007bcc <__d2b+0x60>
 8007c04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c0c:	f8c9 0000 	str.w	r0, [r9]
 8007c10:	6918      	ldr	r0, [r3, #16]
 8007c12:	f7ff fd35 	bl	8007680 <__hi0bits>
 8007c16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c1a:	e7df      	b.n	8007bdc <__d2b+0x70>
 8007c1c:	08008368 	.word	0x08008368
 8007c20:	08008379 	.word	0x08008379

08007c24 <_calloc_r>:
 8007c24:	b513      	push	{r0, r1, r4, lr}
 8007c26:	434a      	muls	r2, r1
 8007c28:	4611      	mov	r1, r2
 8007c2a:	9201      	str	r2, [sp, #4]
 8007c2c:	f7fd fe52 	bl	80058d4 <_malloc_r>
 8007c30:	4604      	mov	r4, r0
 8007c32:	b118      	cbz	r0, 8007c3c <_calloc_r+0x18>
 8007c34:	9a01      	ldr	r2, [sp, #4]
 8007c36:	2100      	movs	r1, #0
 8007c38:	f7fd fdf4 	bl	8005824 <memset>
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	b002      	add	sp, #8
 8007c40:	bd10      	pop	{r4, pc}
	...

08007c44 <_read_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	4d07      	ldr	r5, [pc, #28]	; (8007c64 <_read_r+0x20>)
 8007c48:	4604      	mov	r4, r0
 8007c4a:	4608      	mov	r0, r1
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	2200      	movs	r2, #0
 8007c50:	602a      	str	r2, [r5, #0]
 8007c52:	461a      	mov	r2, r3
 8007c54:	f7f9 fd64 	bl	8001720 <_read>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_read_r+0x1e>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_read_r+0x1e>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	200009cc 	.word	0x200009cc

08007c68 <__assert_func>:
 8007c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c6a:	4614      	mov	r4, r2
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	4b09      	ldr	r3, [pc, #36]	; (8007c94 <__assert_func+0x2c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4605      	mov	r5, r0
 8007c74:	68d8      	ldr	r0, [r3, #12]
 8007c76:	b14c      	cbz	r4, 8007c8c <__assert_func+0x24>
 8007c78:	4b07      	ldr	r3, [pc, #28]	; (8007c98 <__assert_func+0x30>)
 8007c7a:	9100      	str	r1, [sp, #0]
 8007c7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c80:	4906      	ldr	r1, [pc, #24]	; (8007c9c <__assert_func+0x34>)
 8007c82:	462b      	mov	r3, r5
 8007c84:	f7fd fcfa 	bl	800567c <fiprintf>
 8007c88:	f000 f82b 	bl	8007ce2 <abort>
 8007c8c:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <__assert_func+0x38>)
 8007c8e:	461c      	mov	r4, r3
 8007c90:	e7f3      	b.n	8007c7a <__assert_func+0x12>
 8007c92:	bf00      	nop
 8007c94:	2000000c 	.word	0x2000000c
 8007c98:	080084dc 	.word	0x080084dc
 8007c9c:	080084e9 	.word	0x080084e9
 8007ca0:	08008517 	.word	0x08008517

08007ca4 <__ascii_mbtowc>:
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	b901      	cbnz	r1, 8007caa <__ascii_mbtowc+0x6>
 8007ca8:	a901      	add	r1, sp, #4
 8007caa:	b142      	cbz	r2, 8007cbe <__ascii_mbtowc+0x1a>
 8007cac:	b14b      	cbz	r3, 8007cc2 <__ascii_mbtowc+0x1e>
 8007cae:	7813      	ldrb	r3, [r2, #0]
 8007cb0:	600b      	str	r3, [r1, #0]
 8007cb2:	7812      	ldrb	r2, [r2, #0]
 8007cb4:	1e10      	subs	r0, r2, #0
 8007cb6:	bf18      	it	ne
 8007cb8:	2001      	movne	r0, #1
 8007cba:	b002      	add	sp, #8
 8007cbc:	4770      	bx	lr
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	e7fb      	b.n	8007cba <__ascii_mbtowc+0x16>
 8007cc2:	f06f 0001 	mvn.w	r0, #1
 8007cc6:	e7f8      	b.n	8007cba <__ascii_mbtowc+0x16>

08007cc8 <__ascii_wctomb>:
 8007cc8:	b149      	cbz	r1, 8007cde <__ascii_wctomb+0x16>
 8007cca:	2aff      	cmp	r2, #255	; 0xff
 8007ccc:	bf85      	ittet	hi
 8007cce:	238a      	movhi	r3, #138	; 0x8a
 8007cd0:	6003      	strhi	r3, [r0, #0]
 8007cd2:	700a      	strbls	r2, [r1, #0]
 8007cd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8007cd8:	bf98      	it	ls
 8007cda:	2001      	movls	r0, #1
 8007cdc:	4770      	bx	lr
 8007cde:	4608      	mov	r0, r1
 8007ce0:	4770      	bx	lr

08007ce2 <abort>:
 8007ce2:	b508      	push	{r3, lr}
 8007ce4:	2006      	movs	r0, #6
 8007ce6:	f000 f82b 	bl	8007d40 <raise>
 8007cea:	2001      	movs	r0, #1
 8007cec:	f7f9 fd0e 	bl	800170c <_exit>

08007cf0 <_raise_r>:
 8007cf0:	291f      	cmp	r1, #31
 8007cf2:	b538      	push	{r3, r4, r5, lr}
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	460d      	mov	r5, r1
 8007cf8:	d904      	bls.n	8007d04 <_raise_r+0x14>
 8007cfa:	2316      	movs	r3, #22
 8007cfc:	6003      	str	r3, [r0, #0]
 8007cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d06:	b112      	cbz	r2, 8007d0e <_raise_r+0x1e>
 8007d08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d0c:	b94b      	cbnz	r3, 8007d22 <_raise_r+0x32>
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 f830 	bl	8007d74 <_getpid_r>
 8007d14:	462a      	mov	r2, r5
 8007d16:	4601      	mov	r1, r0
 8007d18:	4620      	mov	r0, r4
 8007d1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d1e:	f000 b817 	b.w	8007d50 <_kill_r>
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d00a      	beq.n	8007d3c <_raise_r+0x4c>
 8007d26:	1c59      	adds	r1, r3, #1
 8007d28:	d103      	bne.n	8007d32 <_raise_r+0x42>
 8007d2a:	2316      	movs	r3, #22
 8007d2c:	6003      	str	r3, [r0, #0]
 8007d2e:	2001      	movs	r0, #1
 8007d30:	e7e7      	b.n	8007d02 <_raise_r+0x12>
 8007d32:	2400      	movs	r4, #0
 8007d34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d38:	4628      	mov	r0, r5
 8007d3a:	4798      	blx	r3
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	e7e0      	b.n	8007d02 <_raise_r+0x12>

08007d40 <raise>:
 8007d40:	4b02      	ldr	r3, [pc, #8]	; (8007d4c <raise+0xc>)
 8007d42:	4601      	mov	r1, r0
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	f7ff bfd3 	b.w	8007cf0 <_raise_r>
 8007d4a:	bf00      	nop
 8007d4c:	2000000c 	.word	0x2000000c

08007d50 <_kill_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d07      	ldr	r5, [pc, #28]	; (8007d70 <_kill_r+0x20>)
 8007d54:	2300      	movs	r3, #0
 8007d56:	4604      	mov	r4, r0
 8007d58:	4608      	mov	r0, r1
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	602b      	str	r3, [r5, #0]
 8007d5e:	f7f9 fcc5 	bl	80016ec <_kill>
 8007d62:	1c43      	adds	r3, r0, #1
 8007d64:	d102      	bne.n	8007d6c <_kill_r+0x1c>
 8007d66:	682b      	ldr	r3, [r5, #0]
 8007d68:	b103      	cbz	r3, 8007d6c <_kill_r+0x1c>
 8007d6a:	6023      	str	r3, [r4, #0]
 8007d6c:	bd38      	pop	{r3, r4, r5, pc}
 8007d6e:	bf00      	nop
 8007d70:	200009cc 	.word	0x200009cc

08007d74 <_getpid_r>:
 8007d74:	f7f9 bcb2 	b.w	80016dc <_getpid>

08007d78 <atan>:
 8007d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7c:	ec55 4b10 	vmov	r4, r5, d0
 8007d80:	4bc3      	ldr	r3, [pc, #780]	; (8008090 <atan+0x318>)
 8007d82:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007d86:	429e      	cmp	r6, r3
 8007d88:	46ab      	mov	fp, r5
 8007d8a:	dd18      	ble.n	8007dbe <atan+0x46>
 8007d8c:	4bc1      	ldr	r3, [pc, #772]	; (8008094 <atan+0x31c>)
 8007d8e:	429e      	cmp	r6, r3
 8007d90:	dc01      	bgt.n	8007d96 <atan+0x1e>
 8007d92:	d109      	bne.n	8007da8 <atan+0x30>
 8007d94:	b144      	cbz	r4, 8007da8 <atan+0x30>
 8007d96:	4622      	mov	r2, r4
 8007d98:	462b      	mov	r3, r5
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	f7f8 fa95 	bl	80002cc <__adddf3>
 8007da2:	4604      	mov	r4, r0
 8007da4:	460d      	mov	r5, r1
 8007da6:	e006      	b.n	8007db6 <atan+0x3e>
 8007da8:	f1bb 0f00 	cmp.w	fp, #0
 8007dac:	f300 8131 	bgt.w	8008012 <atan+0x29a>
 8007db0:	a59b      	add	r5, pc, #620	; (adr r5, 8008020 <atan+0x2a8>)
 8007db2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007db6:	ec45 4b10 	vmov	d0, r4, r5
 8007dba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dbe:	4bb6      	ldr	r3, [pc, #728]	; (8008098 <atan+0x320>)
 8007dc0:	429e      	cmp	r6, r3
 8007dc2:	dc14      	bgt.n	8007dee <atan+0x76>
 8007dc4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007dc8:	429e      	cmp	r6, r3
 8007dca:	dc0d      	bgt.n	8007de8 <atan+0x70>
 8007dcc:	a396      	add	r3, pc, #600	; (adr r3, 8008028 <atan+0x2b0>)
 8007dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd2:	ee10 0a10 	vmov	r0, s0
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	f7f8 fa78 	bl	80002cc <__adddf3>
 8007ddc:	4baf      	ldr	r3, [pc, #700]	; (800809c <atan+0x324>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	f7f8 feba 	bl	8000b58 <__aeabi_dcmpgt>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d1e6      	bne.n	8007db6 <atan+0x3e>
 8007de8:	f04f 3aff 	mov.w	sl, #4294967295
 8007dec:	e02b      	b.n	8007e46 <atan+0xce>
 8007dee:	f000 f963 	bl	80080b8 <fabs>
 8007df2:	4bab      	ldr	r3, [pc, #684]	; (80080a0 <atan+0x328>)
 8007df4:	429e      	cmp	r6, r3
 8007df6:	ec55 4b10 	vmov	r4, r5, d0
 8007dfa:	f300 80bf 	bgt.w	8007f7c <atan+0x204>
 8007dfe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007e02:	429e      	cmp	r6, r3
 8007e04:	f300 80a0 	bgt.w	8007f48 <atan+0x1d0>
 8007e08:	ee10 2a10 	vmov	r2, s0
 8007e0c:	ee10 0a10 	vmov	r0, s0
 8007e10:	462b      	mov	r3, r5
 8007e12:	4629      	mov	r1, r5
 8007e14:	f7f8 fa5a 	bl	80002cc <__adddf3>
 8007e18:	4ba0      	ldr	r3, [pc, #640]	; (800809c <atan+0x324>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f7f8 fa54 	bl	80002c8 <__aeabi_dsub>
 8007e20:	2200      	movs	r2, #0
 8007e22:	4606      	mov	r6, r0
 8007e24:	460f      	mov	r7, r1
 8007e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	f7f8 fa4d 	bl	80002cc <__adddf3>
 8007e32:	4602      	mov	r2, r0
 8007e34:	460b      	mov	r3, r1
 8007e36:	4630      	mov	r0, r6
 8007e38:	4639      	mov	r1, r7
 8007e3a:	f7f8 fd27 	bl	800088c <__aeabi_ddiv>
 8007e3e:	f04f 0a00 	mov.w	sl, #0
 8007e42:	4604      	mov	r4, r0
 8007e44:	460d      	mov	r5, r1
 8007e46:	4622      	mov	r2, r4
 8007e48:	462b      	mov	r3, r5
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	f7f8 fbf3 	bl	8000638 <__aeabi_dmul>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4680      	mov	r8, r0
 8007e58:	4689      	mov	r9, r1
 8007e5a:	f7f8 fbed 	bl	8000638 <__aeabi_dmul>
 8007e5e:	a374      	add	r3, pc, #464	; (adr r3, 8008030 <atan+0x2b8>)
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	4606      	mov	r6, r0
 8007e66:	460f      	mov	r7, r1
 8007e68:	f7f8 fbe6 	bl	8000638 <__aeabi_dmul>
 8007e6c:	a372      	add	r3, pc, #456	; (adr r3, 8008038 <atan+0x2c0>)
 8007e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e72:	f7f8 fa2b 	bl	80002cc <__adddf3>
 8007e76:	4632      	mov	r2, r6
 8007e78:	463b      	mov	r3, r7
 8007e7a:	f7f8 fbdd 	bl	8000638 <__aeabi_dmul>
 8007e7e:	a370      	add	r3, pc, #448	; (adr r3, 8008040 <atan+0x2c8>)
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	f7f8 fa22 	bl	80002cc <__adddf3>
 8007e88:	4632      	mov	r2, r6
 8007e8a:	463b      	mov	r3, r7
 8007e8c:	f7f8 fbd4 	bl	8000638 <__aeabi_dmul>
 8007e90:	a36d      	add	r3, pc, #436	; (adr r3, 8008048 <atan+0x2d0>)
 8007e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e96:	f7f8 fa19 	bl	80002cc <__adddf3>
 8007e9a:	4632      	mov	r2, r6
 8007e9c:	463b      	mov	r3, r7
 8007e9e:	f7f8 fbcb 	bl	8000638 <__aeabi_dmul>
 8007ea2:	a36b      	add	r3, pc, #428	; (adr r3, 8008050 <atan+0x2d8>)
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	f7f8 fa10 	bl	80002cc <__adddf3>
 8007eac:	4632      	mov	r2, r6
 8007eae:	463b      	mov	r3, r7
 8007eb0:	f7f8 fbc2 	bl	8000638 <__aeabi_dmul>
 8007eb4:	a368      	add	r3, pc, #416	; (adr r3, 8008058 <atan+0x2e0>)
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	f7f8 fa07 	bl	80002cc <__adddf3>
 8007ebe:	4642      	mov	r2, r8
 8007ec0:	464b      	mov	r3, r9
 8007ec2:	f7f8 fbb9 	bl	8000638 <__aeabi_dmul>
 8007ec6:	a366      	add	r3, pc, #408	; (adr r3, 8008060 <atan+0x2e8>)
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	4680      	mov	r8, r0
 8007ece:	4689      	mov	r9, r1
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	4639      	mov	r1, r7
 8007ed4:	f7f8 fbb0 	bl	8000638 <__aeabi_dmul>
 8007ed8:	a363      	add	r3, pc, #396	; (adr r3, 8008068 <atan+0x2f0>)
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f7f8 f9f3 	bl	80002c8 <__aeabi_dsub>
 8007ee2:	4632      	mov	r2, r6
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	f7f8 fba7 	bl	8000638 <__aeabi_dmul>
 8007eea:	a361      	add	r3, pc, #388	; (adr r3, 8008070 <atan+0x2f8>)
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f7f8 f9ea 	bl	80002c8 <__aeabi_dsub>
 8007ef4:	4632      	mov	r2, r6
 8007ef6:	463b      	mov	r3, r7
 8007ef8:	f7f8 fb9e 	bl	8000638 <__aeabi_dmul>
 8007efc:	a35e      	add	r3, pc, #376	; (adr r3, 8008078 <atan+0x300>)
 8007efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f02:	f7f8 f9e1 	bl	80002c8 <__aeabi_dsub>
 8007f06:	4632      	mov	r2, r6
 8007f08:	463b      	mov	r3, r7
 8007f0a:	f7f8 fb95 	bl	8000638 <__aeabi_dmul>
 8007f0e:	a35c      	add	r3, pc, #368	; (adr r3, 8008080 <atan+0x308>)
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	f7f8 f9d8 	bl	80002c8 <__aeabi_dsub>
 8007f18:	4632      	mov	r2, r6
 8007f1a:	463b      	mov	r3, r7
 8007f1c:	f7f8 fb8c 	bl	8000638 <__aeabi_dmul>
 8007f20:	4602      	mov	r2, r0
 8007f22:	460b      	mov	r3, r1
 8007f24:	4640      	mov	r0, r8
 8007f26:	4649      	mov	r1, r9
 8007f28:	f7f8 f9d0 	bl	80002cc <__adddf3>
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	462b      	mov	r3, r5
 8007f30:	f7f8 fb82 	bl	8000638 <__aeabi_dmul>
 8007f34:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	d14b      	bne.n	8007fd6 <atan+0x25e>
 8007f3e:	4620      	mov	r0, r4
 8007f40:	4629      	mov	r1, r5
 8007f42:	f7f8 f9c1 	bl	80002c8 <__aeabi_dsub>
 8007f46:	e72c      	b.n	8007da2 <atan+0x2a>
 8007f48:	ee10 0a10 	vmov	r0, s0
 8007f4c:	4b53      	ldr	r3, [pc, #332]	; (800809c <atan+0x324>)
 8007f4e:	2200      	movs	r2, #0
 8007f50:	4629      	mov	r1, r5
 8007f52:	f7f8 f9b9 	bl	80002c8 <__aeabi_dsub>
 8007f56:	4b51      	ldr	r3, [pc, #324]	; (800809c <atan+0x324>)
 8007f58:	4606      	mov	r6, r0
 8007f5a:	460f      	mov	r7, r1
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	4620      	mov	r0, r4
 8007f60:	4629      	mov	r1, r5
 8007f62:	f7f8 f9b3 	bl	80002cc <__adddf3>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	f7f8 fc8d 	bl	800088c <__aeabi_ddiv>
 8007f72:	f04f 0a01 	mov.w	sl, #1
 8007f76:	4604      	mov	r4, r0
 8007f78:	460d      	mov	r5, r1
 8007f7a:	e764      	b.n	8007e46 <atan+0xce>
 8007f7c:	4b49      	ldr	r3, [pc, #292]	; (80080a4 <atan+0x32c>)
 8007f7e:	429e      	cmp	r6, r3
 8007f80:	da1d      	bge.n	8007fbe <atan+0x246>
 8007f82:	ee10 0a10 	vmov	r0, s0
 8007f86:	4b48      	ldr	r3, [pc, #288]	; (80080a8 <atan+0x330>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	f7f8 f99c 	bl	80002c8 <__aeabi_dsub>
 8007f90:	4b45      	ldr	r3, [pc, #276]	; (80080a8 <atan+0x330>)
 8007f92:	4606      	mov	r6, r0
 8007f94:	460f      	mov	r7, r1
 8007f96:	2200      	movs	r2, #0
 8007f98:	4620      	mov	r0, r4
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	f7f8 fb4c 	bl	8000638 <__aeabi_dmul>
 8007fa0:	4b3e      	ldr	r3, [pc, #248]	; (800809c <atan+0x324>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f7f8 f992 	bl	80002cc <__adddf3>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4630      	mov	r0, r6
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 fc6c 	bl	800088c <__aeabi_ddiv>
 8007fb4:	f04f 0a02 	mov.w	sl, #2
 8007fb8:	4604      	mov	r4, r0
 8007fba:	460d      	mov	r5, r1
 8007fbc:	e743      	b.n	8007e46 <atan+0xce>
 8007fbe:	462b      	mov	r3, r5
 8007fc0:	ee10 2a10 	vmov	r2, s0
 8007fc4:	4939      	ldr	r1, [pc, #228]	; (80080ac <atan+0x334>)
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	f7f8 fc60 	bl	800088c <__aeabi_ddiv>
 8007fcc:	f04f 0a03 	mov.w	sl, #3
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	460d      	mov	r5, r1
 8007fd4:	e737      	b.n	8007e46 <atan+0xce>
 8007fd6:	4b36      	ldr	r3, [pc, #216]	; (80080b0 <atan+0x338>)
 8007fd8:	4e36      	ldr	r6, [pc, #216]	; (80080b4 <atan+0x33c>)
 8007fda:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007fde:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007fe2:	e9da 2300 	ldrd	r2, r3, [sl]
 8007fe6:	f7f8 f96f 	bl	80002c8 <__aeabi_dsub>
 8007fea:	4622      	mov	r2, r4
 8007fec:	462b      	mov	r3, r5
 8007fee:	f7f8 f96b 	bl	80002c8 <__aeabi_dsub>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007ffa:	f7f8 f965 	bl	80002c8 <__aeabi_dsub>
 8007ffe:	f1bb 0f00 	cmp.w	fp, #0
 8008002:	4604      	mov	r4, r0
 8008004:	460d      	mov	r5, r1
 8008006:	f6bf aed6 	bge.w	8007db6 <atan+0x3e>
 800800a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800800e:	461d      	mov	r5, r3
 8008010:	e6d1      	b.n	8007db6 <atan+0x3e>
 8008012:	a51d      	add	r5, pc, #116	; (adr r5, 8008088 <atan+0x310>)
 8008014:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008018:	e6cd      	b.n	8007db6 <atan+0x3e>
 800801a:	bf00      	nop
 800801c:	f3af 8000 	nop.w
 8008020:	54442d18 	.word	0x54442d18
 8008024:	bff921fb 	.word	0xbff921fb
 8008028:	8800759c 	.word	0x8800759c
 800802c:	7e37e43c 	.word	0x7e37e43c
 8008030:	e322da11 	.word	0xe322da11
 8008034:	3f90ad3a 	.word	0x3f90ad3a
 8008038:	24760deb 	.word	0x24760deb
 800803c:	3fa97b4b 	.word	0x3fa97b4b
 8008040:	a0d03d51 	.word	0xa0d03d51
 8008044:	3fb10d66 	.word	0x3fb10d66
 8008048:	c54c206e 	.word	0xc54c206e
 800804c:	3fb745cd 	.word	0x3fb745cd
 8008050:	920083ff 	.word	0x920083ff
 8008054:	3fc24924 	.word	0x3fc24924
 8008058:	5555550d 	.word	0x5555550d
 800805c:	3fd55555 	.word	0x3fd55555
 8008060:	2c6a6c2f 	.word	0x2c6a6c2f
 8008064:	bfa2b444 	.word	0xbfa2b444
 8008068:	52defd9a 	.word	0x52defd9a
 800806c:	3fadde2d 	.word	0x3fadde2d
 8008070:	af749a6d 	.word	0xaf749a6d
 8008074:	3fb3b0f2 	.word	0x3fb3b0f2
 8008078:	fe231671 	.word	0xfe231671
 800807c:	3fbc71c6 	.word	0x3fbc71c6
 8008080:	9998ebc4 	.word	0x9998ebc4
 8008084:	3fc99999 	.word	0x3fc99999
 8008088:	54442d18 	.word	0x54442d18
 800808c:	3ff921fb 	.word	0x3ff921fb
 8008090:	440fffff 	.word	0x440fffff
 8008094:	7ff00000 	.word	0x7ff00000
 8008098:	3fdbffff 	.word	0x3fdbffff
 800809c:	3ff00000 	.word	0x3ff00000
 80080a0:	3ff2ffff 	.word	0x3ff2ffff
 80080a4:	40038000 	.word	0x40038000
 80080a8:	3ff80000 	.word	0x3ff80000
 80080ac:	bff00000 	.word	0xbff00000
 80080b0:	08008648 	.word	0x08008648
 80080b4:	08008628 	.word	0x08008628

080080b8 <fabs>:
 80080b8:	ec51 0b10 	vmov	r0, r1, d0
 80080bc:	ee10 2a10 	vmov	r2, s0
 80080c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80080c4:	ec43 2b10 	vmov	d0, r2, r3
 80080c8:	4770      	bx	lr
	...

080080cc <_init>:
 80080cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ce:	bf00      	nop
 80080d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d2:	bc08      	pop	{r3}
 80080d4:	469e      	mov	lr, r3
 80080d6:	4770      	bx	lr

080080d8 <_fini>:
 80080d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080da:	bf00      	nop
 80080dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080de:	bc08      	pop	{r3}
 80080e0:	469e      	mov	lr, r3
 80080e2:	4770      	bx	lr
