
ObjectDetection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a3c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08006c0c  08006c0c  00016c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cf8  08006cf8  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  08006cf8  08006cf8  00016cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d00  08006d00  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d00  08006d00  00016d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d04  08006d04  00016d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  08006d08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db8  20000230  08006f34  00020230  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000fe8  08006f34  00020fe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f50  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bbd  00000000  00000000  0003a1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  0003cd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  0003dda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f65  00000000  00000000  0003ece0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b09  00000000  00000000  00062c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2f5e  00000000  00000000  0007774e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a6ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd4  00000000  00000000  0014a700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000230 	.word	0x20000230
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006bf4 	.word	0x08006bf4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000234 	.word	0x20000234
 800020c:	08006bf4 	.word	0x08006bf4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <__io_putchar>:
static void MX_USART2_UART_Init(void);

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 80005b0:	1d39      	adds	r1, r7, #4
 80005b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b6:	2201      	movs	r2, #1
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <__io_putchar+0x20>)
 80005ba:	f005 f8a4 	bl	8005706 <HAL_UART_Transmit>
	return ch;
 80005be:	687b      	ldr	r3, [r7, #4]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000f2c 	.word	0x20000f2c

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
	HAL_Init();
 80005d2:	f003 f83b 	bl	800364c <HAL_Init>

	SystemClock_Config();
 80005d6:	f000 fa6f 	bl	8000ab8 <SystemClock_Config>

	MX_GPIO_Init();
 80005da:	f000 fb33 	bl	8000c44 <MX_GPIO_Init>
	MX_I2C2_Init();
 80005de:	f000 fad9 	bl	8000b94 <MX_I2C2_Init>
	MX_USART2_UART_Init();
 80005e2:	f000 fb05 	bl	8000bf0 <MX_USART2_UART_Init>
	// TODO: init sensors
	// TODO: init antenna
	// TODO: init video

	// do a full multi sense to initalize distances
	for (int i = 0; i < AMOUNT_IRS; i++)
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e014      	b.n	8000616 <main+0x4a>
	{
	  brett_status = 0;
 80005ec:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <main+0xcc>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
	  brett_status = Brett_IR_StartMulti(dev, distances, AMOUNT_IRS);
 80005f2:	2208      	movs	r2, #8
 80005f4:	4929      	ldr	r1, [pc, #164]	; (800069c <main+0xd0>)
 80005f6:	482a      	ldr	r0, [pc, #168]	; (80006a0 <main+0xd4>)
 80005f8:	f002 ffb8 	bl	800356c <Brett_IR_StartMulti>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a26      	ldr	r2, [pc, #152]	; (8000698 <main+0xcc>)
 8000600:	6013      	str	r3, [r2, #0]
	  if (brett_status != 0)
 8000602:	4b25      	ldr	r3, [pc, #148]	; (8000698 <main+0xcc>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <main+0x44>
		  printf("first multi sense bad\n\r");
 800060a:	4826      	ldr	r0, [pc, #152]	; (80006a4 <main+0xd8>)
 800060c:	f006 f950 	bl	80068b0 <iprintf>
	for (int i = 0; i < AMOUNT_IRS; i++)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	3301      	adds	r3, #1
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	2b07      	cmp	r3, #7
 800061a:	dde7      	ble.n	80005ec <main+0x20>
	}

	// init update timers
	time_t startTime = clock();
 800061c:	f005 fb3c 	bl	8005c98 <clock>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	f04f 0300 	mov.w	r3, #0
 8000628:	e9c7 2300 	strd	r2, r3, [r7]
	timer_IR = startTime;
 800062c:	491e      	ldr	r1, [pc, #120]	; (80006a8 <main+0xdc>)
 800062e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000632:	e9c1 2300 	strd	r2, r3, [r1]
	timer_GPS = startTime;
 8000636:	491d      	ldr	r1, [pc, #116]	; (80006ac <main+0xe0>)
 8000638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800063c:	e9c1 2300 	strd	r2, r3, [r1]

	// start IR multi sense so we can get the data when timer is up
	for (int i = 0; i < AMOUNT_IRS; i++)
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	e01b      	b.n	800067e <main+0xb2>
	{
		brett_status = 0;
 8000646:	4b14      	ldr	r3, [pc, #80]	; (8000698 <main+0xcc>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
		brett_status = Brett_VL53L0X_StartMultiSensing(&Devs[i]);
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <main+0xe4>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8000656:	fb01 f303 	mul.w	r3, r1, r3
 800065a:	4413      	add	r3, r2
 800065c:	4618      	mov	r0, r3
 800065e:	f002 ff2d 	bl	80034bc <Brett_VL53L0X_StartMultiSensing>
 8000662:	4603      	mov	r3, r0
 8000664:	461a      	mov	r2, r3
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <main+0xcc>)
 8000668:	601a      	str	r2, [r3, #0]
		if (brett_status != 0)
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <main+0xcc>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d002      	beq.n	8000678 <main+0xac>
		  printf("start of second multi sense bad\n\r");
 8000672:	4810      	ldr	r0, [pc, #64]	; (80006b4 <main+0xe8>)
 8000674:	f006 f91c 	bl	80068b0 <iprintf>
	for (int i = 0; i < AMOUNT_IRS; i++)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	3301      	adds	r3, #1
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	2b07      	cmp	r3, #7
 8000682:	dde0      	ble.n	8000646 <main+0x7a>
	}

	// start loop 3
	brett_status = Loop3_NoObject();
 8000684:	f000 f818 	bl	80006b8 <Loop3_NoObject>
 8000688:	4603      	mov	r3, r0
 800068a:	4a03      	ldr	r2, [pc, #12]	; (8000698 <main+0xcc>)
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	2300      	movs	r3, #0
}
 8000690:	4618      	mov	r0, r3
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000024c 	.word	0x2000024c
 800069c:	20000f70 	.word	0x20000f70
 80006a0:	20000260 	.word	0x20000260
 80006a4:	08006c0c 	.word	0x08006c0c
 80006a8:	20000f20 	.word	0x20000f20
 80006ac:	20000ec0 	.word	0x20000ec0
 80006b0:	20000000 	.word	0x20000000
 80006b4:	08006c24 	.word	0x08006c24

080006b8 <Loop3_NoObject>:

int Loop3_NoObject()
{
 80006b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006bc:	b0be      	sub	sp, #248	; 0xf8
 80006be:	af00      	add	r7, sp, #0
	// grab current clock time
	time_t currentTime = clock();
 80006c0:	f005 faea 	bl	8005c98 <clock>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	f04f 0300 	mov.w	r3, #0
 80006cc:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

	// check GPS
	if (timer_GPS + DELAY_GPS >= currentTime)
 80006d0:	4b5a      	ldr	r3, [pc, #360]	; (800083c <Loop3_NoObject+0x184>)
 80006d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006d6:	f512 787a 	adds.w	r8, r2, #1000	; 0x3e8
 80006da:	f143 0900 	adc.w	r9, r3, #0
 80006de:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80006e2:	4590      	cmp	r8, r2
 80006e4:	eb79 0303 	sbcs.w	r3, r9, r3
 80006e8:	db04      	blt.n	80006f4 <Loop3_NoObject+0x3c>
	{
		// update GPS
		// TODO: Write GPS stuff here

		// update gps timer
		timer_GPS = currentTime;
 80006ea:	4954      	ldr	r1, [pc, #336]	; (800083c <Loop3_NoObject+0x184>)
 80006ec:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]
	}

	// check IRs
	if (timer_IR + DELAY_IR >= currentTime)
 80006f4:	4b52      	ldr	r3, [pc, #328]	; (8000840 <Loop3_NoObject+0x188>)
 80006f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006fa:	f112 04c8 	adds.w	r4, r2, #200	; 0xc8
 80006fe:	f143 0500 	adc.w	r5, r3, #0
 8000702:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8000706:	4294      	cmp	r4, r2
 8000708:	eb75 0303 	sbcs.w	r3, r5, r3
 800070c:	f2c0 808f 	blt.w	800082e <Loop3_NoObject+0x176>
	{
		// update IRs
		VL53L0X_RangingMeasurementData_t tempRanges[AMOUNT_IRS];
		for (int i = 0; i < AMOUNT_IRS; i++)
 8000710:	2300      	movs	r3, #0
 8000712:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8000716:	e04c      	b.n	80007b2 <Loop3_NoObject+0xfa>
		{
			brett_status = 0;
 8000718:	4b4a      	ldr	r3, [pc, #296]	; (8000844 <Loop3_NoObject+0x18c>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
			brett_status = Brett_VL53L0X_FinishMultiSensing(&Devs[i], &tempRanges[i]);
 800071e:	4b4a      	ldr	r3, [pc, #296]	; (8000848 <Loop3_NoObject+0x190>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000726:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800072a:	fb01 f303 	mul.w	r3, r1, r3
 800072e:	18d0      	adds	r0, r2, r3
 8000730:	4639      	mov	r1, r7
 8000732:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000736:	4613      	mov	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	440b      	add	r3, r1
 8000740:	4619      	mov	r1, r3
 8000742:	f002 fed6 	bl	80034f2 <Brett_VL53L0X_FinishMultiSensing>
 8000746:	4603      	mov	r3, r0
 8000748:	461a      	mov	r2, r3
 800074a:	4b3e      	ldr	r3, [pc, #248]	; (8000844 <Loop3_NoObject+0x18c>)
 800074c:	601a      	str	r2, [r3, #0]
			if (brett_status != 0)
 800074e:	4b3d      	ldr	r3, [pc, #244]	; (8000844 <Loop3_NoObject+0x18c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d002      	beq.n	800075c <Loop3_NoObject+0xa4>
			  printf("start of second multi sense bad\n\r");
 8000756:	483d      	ldr	r0, [pc, #244]	; (800084c <Loop3_NoObject+0x194>)
 8000758:	f006 f8aa 	bl	80068b0 <iprintf>

			if (tempRanges[i].RangeStatus != 0)
 800075c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000760:	4613      	mov	r3, r2
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	1a9b      	subs	r3, r3, r2
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800076c:	4413      	add	r3, r2
 800076e:	3be0      	subs	r3, #224	; 0xe0
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d007      	beq.n	8000786 <Loop3_NoObject+0xce>
				distances[i] = 8100;
 8000776:	4a36      	ldr	r2, [pc, #216]	; (8000850 <Loop3_NoObject+0x198>)
 8000778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800077c:	f641 71a4 	movw	r1, #8100	; 0x1fa4
 8000780:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000784:	e010      	b.n	80007a8 <Loop3_NoObject+0xf0>
			else
				distances[i] = tempRanges[i].RangeMilliMeter;
 8000786:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800078a:	4613      	mov	r3, r2
 800078c:	00db      	lsls	r3, r3, #3
 800078e:	1a9b      	subs	r3, r3, r2
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8000796:	4413      	add	r3, r2
 8000798:	3bf0      	subs	r3, #240	; 0xf0
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	4a2c      	ldr	r2, [pc, #176]	; (8000850 <Loop3_NoObject+0x198>)
 80007a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80007a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < AMOUNT_IRS; i++)
 80007a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80007ac:	3301      	adds	r3, #1
 80007ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80007b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80007b6:	2b07      	cmp	r3, #7
 80007b8:	ddae      	ble.n	8000718 <Loop3_NoObject+0x60>
		}

		// update IR timer
		timer_IR = currentTime;
 80007ba:	4921      	ldr	r1, [pc, #132]	; (8000840 <Loop3_NoObject+0x188>)
 80007bc:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80007c0:	e9c1 2300 	strd	r2, r3, [r1]

		// check if object is in front of us
		bool objectInOuterRing = false;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
		if (distances[SENSOR_FRONT] < RANGE_OUTER)
 80007ca:	4b21      	ldr	r3, [pc, #132]	; (8000850 <Loop3_NoObject+0x198>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80007d2:	dc02      	bgt.n	80007da <Loop3_NoObject+0x122>
			objectInOuterRing = true;
 80007d4:	2301      	movs	r3, #1
 80007d6:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
		if (objectInOuterRing)
 80007da:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d025      	beq.n	800082e <Loop3_NoObject+0x176>
		{
			// init
			OuterRing_init(&initalHitDis);
 80007e2:	481c      	ldr	r0, [pc, #112]	; (8000854 <Loop3_NoObject+0x19c>)
 80007e4:	f002 fe09 	bl	80033fa <OuterRing_init>

			// loop
			int res = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
			int reason = 1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			while (1)
			{
				// control
				res = OuterRing_control(distances, reason, initalDetachHit, initalHitDis);
 80007f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80007f8:	4a17      	ldr	r2, [pc, #92]	; (8000858 <Loop3_NoObject+0x1a0>)
 80007fa:	7812      	ldrb	r2, [r2, #0]
 80007fc:	4915      	ldr	r1, [pc, #84]	; (8000854 <Loop3_NoObject+0x19c>)
 80007fe:	edd1 7a00 	vldr	s15, [r1]
 8000802:	eeb0 0a67 	vmov.f32	s0, s15
 8000806:	4619      	mov	r1, r3
 8000808:	4811      	ldr	r0, [pc, #68]	; (8000850 <Loop3_NoObject+0x198>)
 800080a:	f002 fe01 	bl	8003410 <OuterRing_control>
 800080e:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

				// res == 1 returns to no object loop
				if (res == 1)
 8000812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000816:	2b01      	cmp	r3, #1
 8000818:	d008      	beq.n	800082c <Loop3_NoObject+0x174>
					break;

				// Loop4
				reason = Loop4_OuterLoop(&reason);
 800081a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f81c 	bl	800085c <Loop4_OuterLoop>
 8000824:	4603      	mov	r3, r0
 8000826:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
				res = OuterRing_control(distances, reason, initalDetachHit, initalHitDis);
 800082a:	e7e3      	b.n	80007f4 <Loop3_NoObject+0x13c>
					break;
 800082c:	bf00      	nop
			}
		}
	}
	return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	37f8      	adds	r7, #248	; 0xf8
 8000834:	46bd      	mov	sp, r7
 8000836:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800083a:	bf00      	nop
 800083c:	20000ec0 	.word	0x20000ec0
 8000840:	20000f20 	.word	0x20000f20
 8000844:	2000024c 	.word	0x2000024c
 8000848:	20000000 	.word	0x20000000
 800084c:	08006c24 	.word	0x08006c24
 8000850:	20000f70 	.word	0x20000f70
 8000854:	20000f28 	.word	0x20000f28
 8000858:	20000f90 	.word	0x20000f90

0800085c <Loop4_OuterLoop>:

int Loop4_OuterLoop(int *reason)
{
 800085c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000860:	b0c0      	sub	sp, #256	; 0x100
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
	while (1)
	{
		// grab current clock time
		time_t currentTime = clock();
 8000866:	f005 fa17 	bl	8005c98 <clock>
 800086a:	4603      	mov	r3, r0
 800086c:	461a      	mov	r2, r3
 800086e:	f04f 0300 	mov.w	r3, #0
 8000872:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

		// check GPS
		if (timer_GPS + DELAY_GPS >= currentTime)
 8000876:	4b67      	ldr	r3, [pc, #412]	; (8000a14 <Loop4_OuterLoop+0x1b8>)
 8000878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800087c:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8000880:	f143 0500 	adc.w	r5, r3, #0
 8000884:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8000888:	4294      	cmp	r4, r2
 800088a:	eb75 0303 	sbcs.w	r3, r5, r3
 800088e:	db04      	blt.n	800089a <Loop4_OuterLoop+0x3e>
		{
			// update GPS
			// TODO: Write GPS stuff here

			// update gps timer
			timer_GPS = currentTime;
 8000890:	4960      	ldr	r1, [pc, #384]	; (8000a14 <Loop4_OuterLoop+0x1b8>)
 8000892:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8000896:	e9c1 2300 	strd	r2, r3, [r1]
		}

		// check IRs
		if (timer_IR + DELAY_IR >= currentTime)
 800089a:	4b5f      	ldr	r3, [pc, #380]	; (8000a18 <Loop4_OuterLoop+0x1bc>)
 800089c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008a0:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 80008a4:	f143 0900 	adc.w	r9, r3, #0
 80008a8:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80008ac:	4590      	cmp	r8, r2
 80008ae:	eb79 0303 	sbcs.w	r3, r9, r3
 80008b2:	f2c0 8086 	blt.w	80009c2 <Loop4_OuterLoop+0x166>
		{
			// update IRs
			VL53L0X_RangingMeasurementData_t tempRanges[AMOUNT_IRS];
			for (int i = 0; i < AMOUNT_IRS; i++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80008bc:	e04d      	b.n	800095a <Loop4_OuterLoop+0xfe>
			{
				brett_status = 0;
 80008be:	4b57      	ldr	r3, [pc, #348]	; (8000a1c <Loop4_OuterLoop+0x1c0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
				brett_status = Brett_VL53L0X_FinishMultiSensing(&Devs[i], &tempRanges[i]);
 80008c4:	4b56      	ldr	r3, [pc, #344]	; (8000a20 <Loop4_OuterLoop+0x1c4>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80008cc:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80008d0:	fb01 f303 	mul.w	r3, r1, r3
 80008d4:	18d0      	adds	r0, r2, r3
 80008d6:	f107 0108 	add.w	r1, r7, #8
 80008da:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80008de:	4613      	mov	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	1a9b      	subs	r3, r3, r2
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	440b      	add	r3, r1
 80008e8:	4619      	mov	r1, r3
 80008ea:	f002 fe02 	bl	80034f2 <Brett_VL53L0X_FinishMultiSensing>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <Loop4_OuterLoop+0x1c0>)
 80008f4:	601a      	str	r2, [r3, #0]
				if (brett_status != 0)
 80008f6:	4b49      	ldr	r3, [pc, #292]	; (8000a1c <Loop4_OuterLoop+0x1c0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <Loop4_OuterLoop+0xa8>
				  printf("start of second multi sense bad\n\r");
 80008fe:	4849      	ldr	r0, [pc, #292]	; (8000a24 <Loop4_OuterLoop+0x1c8>)
 8000900:	f005 ffd6 	bl	80068b0 <iprintf>

				if (tempRanges[i].RangeStatus != 0)
 8000904:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000908:	4613      	mov	r3, r2
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	1a9b      	subs	r3, r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000914:	4413      	add	r3, r2
 8000916:	3be0      	subs	r3, #224	; 0xe0
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d007      	beq.n	800092e <Loop4_OuterLoop+0xd2>
					distances[i] = 8100;
 800091e:	4a42      	ldr	r2, [pc, #264]	; (8000a28 <Loop4_OuterLoop+0x1cc>)
 8000920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000924:	f641 71a4 	movw	r1, #8100	; 0x1fa4
 8000928:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800092c:	e010      	b.n	8000950 <Loop4_OuterLoop+0xf4>
				else
					distances[i] = tempRanges[i].RangeMilliMeter;
 800092e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8000932:	4613      	mov	r3, r2
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	1a9b      	subs	r3, r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800093e:	4413      	add	r3, r2
 8000940:	3bf0      	subs	r3, #240	; 0xf0
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	4a38      	ldr	r2, [pc, #224]	; (8000a28 <Loop4_OuterLoop+0x1cc>)
 8000948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800094c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = 0; i < AMOUNT_IRS; i++)
 8000950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000954:	3301      	adds	r3, #1
 8000956:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800095a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800095e:	2b07      	cmp	r3, #7
 8000960:	ddad      	ble.n	80008be <Loop4_OuterLoop+0x62>
			}

			// update IR timer
			timer_IR = currentTime;
 8000962:	492d      	ldr	r1, [pc, #180]	; (8000a18 <Loop4_OuterLoop+0x1bc>)
 8000964:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8000968:	e9c1 2300 	strd	r2, r3, [r1]

			// check if there is an object in inner ring
			bool objectInInnerRing = false;
 800096c:	2300      	movs	r3, #0
 800096e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
			int hitDir;
			for (int i = 0; i < AMOUNT_IRS; i++)
 8000972:	2300      	movs	r3, #0
 8000974:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000978:	e013      	b.n	80009a2 <Loop4_OuterLoop+0x146>
			{
				if (distances[i] < RANGE_INNER)
 800097a:	4a2b      	ldr	r2, [pc, #172]	; (8000a28 <Loop4_OuterLoop+0x1cc>)
 800097c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	2bc7      	cmp	r3, #199	; 0xc7
 8000986:	dc07      	bgt.n	8000998 <Loop4_OuterLoop+0x13c>
				{
					objectInInnerRing = true;
 8000988:	2301      	movs	r3, #1
 800098a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
					hitDir = i;
 800098e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8000992:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
					break;
 8000996:	e008      	b.n	80009aa <Loop4_OuterLoop+0x14e>
			for (int i = 0; i < AMOUNT_IRS; i++)
 8000998:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800099c:	3301      	adds	r3, #1
 800099e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80009a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80009a6:	2b07      	cmp	r3, #7
 80009a8:	dde7      	ble.n	800097a <Loop4_OuterLoop+0x11e>
				}
			}

			// if there is something in inner ring
			// call inner loop
			if (objectInInnerRing)
 80009aa:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d007      	beq.n	80009c2 <Loop4_OuterLoop+0x166>
			{
				// init

				// control
				InnerRing_control(hitDir);
 80009b2:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80009b6:	f002 fd0c 	bl	80033d2 <InnerRing_control>

				//loop
				Loop5_InnerRing(hitDir);
 80009ba:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80009be:	f000 f837 	bl	8000a30 <Loop5_InnerRing>
			}
		}

		// check for initalDetachHit
		if (!initalDetachHit)
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <Loop4_OuterLoop+0x1d0>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	f083 0301 	eor.w	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d007      	beq.n	80009e0 <Loop4_OuterLoop+0x184>
		{
			// check detach sensor
			if (distances[SENSOR_DETACH] < RANGE_OUTER)
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <Loop4_OuterLoop+0x1cc>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80009d8:	dc02      	bgt.n	80009e0 <Loop4_OuterLoop+0x184>
				initalDetachHit = true;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <Loop4_OuterLoop+0x1d0>)
 80009dc:	2201      	movs	r2, #1
 80009de:	701a      	strb	r2, [r3, #0]
		}

		// check for objects infront of us
		if (distances[SENSOR_FRONT < RANGE_OUTER])
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <Loop4_OuterLoop+0x1cc>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <Loop4_OuterLoop+0x190>
			return 1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e00c      	b.n	8000a06 <Loop4_OuterLoop+0x1aa>

		// check if we detached
		if (initalDetachHit)
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <Loop4_OuterLoop+0x1d0>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	f43f af38 	beq.w	8000866 <Loop4_OuterLoop+0xa>
		{
			if (distances[SENSOR_DETACH] > RANGE_OUTER)
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <Loop4_OuterLoop+0x1cc>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f240 2261 	movw	r2, #609	; 0x261
 80009fe:	4293      	cmp	r3, r2
 8000a00:	f77f af31 	ble.w	8000866 <Loop4_OuterLoop+0xa>
						return 2;
 8000a04:	2302      	movs	r3, #2
	}

	// maybe make a saftey exit
	// like 10-20sec then revert to main loop
	return 0;
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000a12:	bf00      	nop
 8000a14:	20000ec0 	.word	0x20000ec0
 8000a18:	20000f20 	.word	0x20000f20
 8000a1c:	2000024c 	.word	0x2000024c
 8000a20:	20000000 	.word	0x20000000
 8000a24:	08006c24 	.word	0x08006c24
 8000a28:	20000f70 	.word	0x20000f70
 8000a2c:	20000f90 	.word	0x20000f90

08000a30 <Loop5_InnerRing>:

int Loop5_InnerRing(int hitDir)
{
 8000a30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	while(1)
	{
		// grab current clock time
		time_t currentTime = clock();
 8000a3a:	f005 f92d 	bl	8005c98 <clock>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	f04f 0300 	mov.w	r3, #0
 8000a46:	e9c7 2302 	strd	r2, r3, [r7, #8]

		// check GPS
		if (timer_GPS + DELAY_GPS >= currentTime)
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <Loop5_InnerRing+0x7c>)
 8000a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a50:	f512 747a 	adds.w	r4, r2, #1000	; 0x3e8
 8000a54:	f143 0500 	adc.w	r5, r3, #0
 8000a58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a5c:	4294      	cmp	r4, r2
 8000a5e:	eb75 0303 	sbcs.w	r3, r5, r3
 8000a62:	db04      	blt.n	8000a6e <Loop5_InnerRing+0x3e>
		{
			// update GPS
			// TODO: Write GPS stuff here

			// update gps timer
			timer_GPS = currentTime;
 8000a64:	4911      	ldr	r1, [pc, #68]	; (8000aac <Loop5_InnerRing+0x7c>)
 8000a66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a6a:	e9c1 2300 	strd	r2, r3, [r1]
		}

		// check IRs
		if (timer_IR + DELAY_IR >= currentTime)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <Loop5_InnerRing+0x80>)
 8000a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a74:	f112 08c8 	adds.w	r8, r2, #200	; 0xc8
 8000a78:	f143 0900 	adc.w	r9, r3, #0
 8000a7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a80:	4590      	cmp	r8, r2
 8000a82:	eb79 0303 	sbcs.w	r3, r9, r3
 8000a86:	db04      	blt.n	8000a92 <Loop5_InnerRing+0x62>
			// VL53L0X_Error error_IR = Brett_VL53L0X_FinishMultiSensing(VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData);
			// error_IR = Brett_VL53L0X_StartMultiSensing(VL53L0X_DEV Dev);
			// TODO: check error_IR

			// update IR timer
			timer_IR = currentTime;
 8000a88:	4909      	ldr	r1, [pc, #36]	; (8000ab0 <Loop5_InnerRing+0x80>)
 8000a8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a8e:	e9c1 2300 	strd	r2, r3, [r1]
		}

		// move until X distance away from inner hit
		// TODO: 50mm is a random number, test this
		if (distances[hitDir] > RANGE_INNER + 50)
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <Loop5_InnerRing+0x84>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9a:	2bfa      	cmp	r3, #250	; 0xfa
 8000a9c:	ddcd      	ble.n	8000a3a <Loop5_InnerRing+0xa>
		{
			return 0;
 8000a9e:	2300      	movs	r3, #0
		}
	}
	return 0;
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000ec0 	.word	0x20000ec0
 8000ab0:	20000f20 	.word	0x20000f20
 8000ab4:	20000f70 	.word	0x20000f70

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b094      	sub	sp, #80	; 0x50
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	2234      	movs	r2, #52	; 0x34
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f005 fb52 	bl	8006170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <SystemClock_Config+0xd4>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a29      	ldr	r2, [pc, #164]	; (8000b8c <SystemClock_Config+0xd4>)
 8000ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <SystemClock_Config+0xd4>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af8:	2300      	movs	r3, #0
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <SystemClock_Config+0xd8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b04:	4a22      	ldr	r2, [pc, #136]	; (8000b90 <SystemClock_Config+0xd8>)
 8000b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <SystemClock_Config+0xd8>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b20:	2310      	movs	r3, #16
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b24:	2302      	movs	r3, #2
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b30:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b36:	2304      	movs	r3, #4
 8000b38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4618      	mov	r0, r3
 8000b48:	f004 faf2 	bl	8005130 <HAL_RCC_OscConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b52:	f000 f8ad 	bl	8000cb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b56:	230f      	movs	r3, #15
 8000b58:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	2102      	movs	r1, #2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f004 f810 	bl	8004b98 <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b7e:	f000 f897 	bl	8000cb0 <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3750      	adds	r7, #80	; 0x50
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40007000 	.word	0x40007000

08000b94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000b9a:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <MX_I2C2_Init+0x54>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000ba0:	4a12      	ldr	r2, [pc, #72]	; (8000bec <MX_I2C2_Init+0x58>)
 8000ba2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bb6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_I2C2_Init+0x50>)
 8000bd2:	f003 f84b 	bl	8003c6c <HAL_I2C_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000bdc:	f000 f868 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000ec8 	.word	0x20000ec8
 8000be8:	40005800 	.word	0x40005800
 8000bec:	000186a0 	.word	0x000186a0

08000bf0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <MX_USART2_UART_Init+0x50>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_USART2_UART_Init+0x4c>)
 8000c28:	f004 fd20 	bl	800566c <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c32:	f000 f83d 	bl	8000cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000f2c 	.word	0x20000f2c
 8000c40:	40004400 	.word	0x40004400

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a16      	ldr	r2, [pc, #88]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_GPIO_Init+0x68>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

}
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <HAL_MspInit+0x4c>)
 8000ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_MspInit+0x4c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_MspInit+0x4c>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cfa:	2007      	movs	r0, #7
 8000cfc:	f002 fdee 	bl	80038dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800

08000d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a29      	ldr	r2, [pc, #164]	; (8000dd0 <HAL_I2C_MspInit+0xc4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d14b      	bne.n	8000dc6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	4b28      	ldr	r3, [pc, #160]	; (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a27      	ldr	r2, [pc, #156]	; (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PC12     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6c:	2312      	movs	r3, #18
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4815      	ldr	r0, [pc, #84]	; (8000dd8 <HAL_I2C_MspInit+0xcc>)
 8000d84:	f002 fdde 	bl	8003944 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8e:	2312      	movs	r3, #18
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <HAL_I2C_MspInit+0xd0>)
 8000da6:	f002 fdcd 	bl	8003944 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000db4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_I2C_MspInit+0xc8>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40005800 	.word	0x40005800
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020400 	.word	0x40020400
 8000ddc:	40020800 	.word	0x40020800

08000de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_UART_MspInit+0x84>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d12b      	bne.n	8000e5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <HAL_UART_MspInit+0x88>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_UART_MspInit+0x88>)
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	6413      	str	r3, [r2, #64]	; 0x40
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_UART_MspInit+0x88>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_UART_MspInit+0x88>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <HAL_UART_MspInit+0x88>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_UART_MspInit+0x88>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e4a:	2307      	movs	r3, #7
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_UART_MspInit+0x8c>)
 8000e56:	f002 fd75 	bl	8003944 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40004400 	.word	0x40004400
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020000 	.word	0x40020000

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f002 fc18 	bl	80036f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e00a      	b.n	8000eec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ed6:	f3af 8000 	nop.w
 8000eda:	4601      	mov	r1, r0
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	b2ca      	uxtb	r2, r1
 8000ee4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	dbf0      	blt.n	8000ed6 <_read+0x12>
	}

return len;
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	e009      	b.n	8000f24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fb45 	bl	80005a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbf1      	blt.n	8000f10 <_write+0x12>
	}
	return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_close>:

int _close(int file)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f5e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_isatty>:

int _isatty(int file)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
	return 1;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_times>:
	errno = ENOENT;
	return -1;
}

int _times(struct tms *buf)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
	return -1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <_sbrk+0x5c>)
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <_sbrk+0x60>)
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <_sbrk+0x64>)
 8000fd6:	4a12      	ldr	r2, [pc, #72]	; (8001020 <_sbrk+0x68>)
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d207      	bcs.n	8000ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe8:	f004 fe6a 	bl	8005cc0 <__errno>
 8000fec:	4603      	mov	r3, r0
 8000fee:	220c      	movs	r2, #12
 8000ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	e009      	b.n	800100c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff8:	4b08      	ldr	r3, [pc, #32]	; (800101c <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <_sbrk+0x64>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4413      	add	r3, r2
 8001006:	4a05      	ldr	r2, [pc, #20]	; (800101c <_sbrk+0x64>)
 8001008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20020000 	.word	0x20020000
 8001018:	00000400 	.word	0x00000400
 800101c:	20000250 	.word	0x20000250
 8001020:	20000fe8 	.word	0x20000fe8

08001024 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <SystemInit+0x20>)
 800102a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <SystemInit+0x20>)
 8001030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800104e:	490e      	ldr	r1, [pc, #56]	; (8001088 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001054:	e002      	b.n	800105c <LoopCopyDataInit>

08001056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105a:	3304      	adds	r3, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800105c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001060:	d3f9      	bcc.n	8001056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001064:	4c0b      	ldr	r4, [pc, #44]	; (8001094 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001068:	e001      	b.n	800106e <LoopFillZerobss>

0800106a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800106c:	3204      	adds	r2, #4

0800106e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001070:	d3fb      	bcc.n	800106a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001072:	f7ff ffd7 	bl	8001024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001076:	f004 ffe1 	bl	800603c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff faa7 	bl	80005cc <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001080:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001088:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 800108c:	08006d08 	.word	0x08006d08
  ldr r2, =_sbss
 8001090:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8001094:	20000fe8 	.word	0x20000fe8

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>

0800109a <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b084      	sub	sp, #16
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80010a8:	6839      	ldr	r1, [r7, #0]
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f000 fee2 	bl	8001e74 <VL53L0X_get_offset_calibration_data_micro_meter>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80010b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f000 f8d6 	bl	8001284 <VL53L0X_GetDeviceMode>
 80010d8:	4603      	mov	r3, r0
 80010da:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80010dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d107      	bne.n	80010f4 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	3308      	adds	r3, #8
 80010e8:	4619      	mov	r1, r3
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f9b2 	bl	8001454 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80010f0:	4603      	mov	r3, r0
 80010f2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80010f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	2200      	movs	r2, #0
 8001100:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d107      	bne.n	800111a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	3310      	adds	r3, #16
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f9e8 	bl	80014e6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8001116:	4603      	mov	r3, r0
 8001118:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d107      	bne.n	8001132 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	3314      	adds	r3, #20
 8001126:	4619      	mov	r1, r3
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ffb6 	bl	800109a <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800112e:	4603      	mov	r3, r0
 8001130:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8001132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d134      	bne.n	80011a4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	e02a      	b.n	8001196 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8001140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d12a      	bne.n	800119e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	b299      	uxth	r1, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3308      	adds	r3, #8
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	4413      	add	r3, r2
 8001156:	3304      	adds	r3, #4
 8001158:	461a      	mov	r2, r3
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 fa1a 	bl	8001594 <VL53L0X_GetLimitCheckValue>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	4313      	orrs	r3, r2
 8001168:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d117      	bne.n	80011a2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	b299      	uxth	r1, r3
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	3318      	adds	r3, #24
 800117a:	683a      	ldr	r2, [r7, #0]
 800117c:	4413      	add	r3, r2
 800117e:	461a      	mov	r2, r3
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f9e3 	bl	800154c <VL53L0X_GetLimitCheckEnable>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	4313      	orrs	r3, r2
 800118e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	3301      	adds	r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	2b05      	cmp	r3, #5
 800119a:	ddd1      	ble.n	8001140 <VL53L0X_GetDeviceParameters+0x80>
 800119c:	e002      	b.n	80011a4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800119e:	bf00      	nop
 80011a0:	e000      	b.n	80011a4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80011a2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80011a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d107      	bne.n	80011bc <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	3374      	adds	r3, #116	; 0x74
 80011b0:	4619      	mov	r1, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 fa7c 	bl	80016b0 <VL53L0X_GetWrapAroundCheckEnable>
 80011b8:	4603      	mov	r3, r0
 80011ba:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80011bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d107      	bne.n	80011d4 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	3304      	adds	r3, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f86d 	bl	80012aa <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80011d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d120      	bne.n	800121e <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	e01a      	b.n	8001218 <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	3310      	adds	r3, #16
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	330e      	adds	r3, #14
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	3316      	adds	r3, #22
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 8001206:	6839      	ldr	r1, [r7, #0]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	3314      	adds	r3, #20
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	3301      	adds	r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	2b06      	cmp	r3, #6
 800121c:	dde1      	ble.n	80011e2 <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	2b15      	cmp	r3, #21
 8001240:	bf8c      	ite	hi
 8001242:	2201      	movhi	r2, #1
 8001244:	2200      	movls	r2, #0
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	2a00      	cmp	r2, #0
 800124a:	d10e      	bne.n	800126a <VL53L0X_SetDeviceMode+0x3e>
 800124c:	2201      	movs	r2, #1
 800124e:	409a      	lsls	r2, r3
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <VL53L0X_SetDeviceMode+0x54>)
 8001252:	4013      	ands	r3, r2
 8001254:	2b00      	cmp	r3, #0
 8001256:	bf14      	ite	ne
 8001258:	2301      	movne	r3, #1
 800125a:	2300      	moveq	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	78fa      	ldrb	r2, [r7, #3]
 8001266:	721a      	strb	r2, [r3, #8]
		break;
 8001268:	e001      	b.n	800126e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800126a:	23f8      	movs	r3, #248	; 0xf8
 800126c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	0030000b 	.word	0x0030000b

08001284 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7a1a      	ldrb	r2, [r3, #8]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80012b8:	6839      	ldr	r1, [r7, #0]
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f001 f830 	bl	8002320 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80012c0:	4603      	mov	r3, r0
 80012c2:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80012c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	460b      	mov	r3, r1
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80012de:	2300      	movs	r3, #0
 80012e0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80012e2:	7afb      	ldrb	r3, [r7, #11]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	4619      	mov	r1, r3
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f000 ffe2 	bl	80022b2 <VL53L0X_get_vcsel_pulse_period>
 80012ee:	4603      	mov	r3, r0
 80012f0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80012f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <sequence_step_enabled>:
}

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	460b      	mov	r3, r1
 800130c:	72fb      	strb	r3, [r7, #11]
 800130e:	4613      	mov	r3, r2
 8001310:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001312:	2300      	movs	r3, #0
 8001314:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	2b04      	cmp	r3, #4
 8001320:	d836      	bhi.n	8001390 <sequence_step_enabled+0x90>
 8001322:	a201      	add	r2, pc, #4	; (adr r2, 8001328 <sequence_step_enabled+0x28>)
 8001324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001328:	0800133d 	.word	0x0800133d
 800132c:	0800134f 	.word	0x0800134f
 8001330:	08001361 	.word	0x08001361
 8001334:	08001373 	.word	0x08001373
 8001338:	08001385 	.word	0x08001385
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800133c:	7abb      	ldrb	r3, [r7, #10]
 800133e:	111b      	asrs	r3, r3, #4
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	b2da      	uxtb	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	701a      	strb	r2, [r3, #0]
		break;
 800134c:	e022      	b.n	8001394 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800134e:	7abb      	ldrb	r3, [r7, #10]
 8001350:	10db      	asrs	r3, r3, #3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	701a      	strb	r2, [r3, #0]
		break;
 800135e:	e019      	b.n	8001394 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8001360:	7abb      	ldrb	r3, [r7, #10]
 8001362:	109b      	asrs	r3, r3, #2
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	b2da      	uxtb	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	701a      	strb	r2, [r3, #0]
		break;
 8001370:	e010      	b.n	8001394 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8001372:	7abb      	ldrb	r3, [r7, #10]
 8001374:	119b      	asrs	r3, r3, #6
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	b2da      	uxtb	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	701a      	strb	r2, [r3, #0]
		break;
 8001382:	e007      	b.n	8001394 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8001384:	7abb      	ldrb	r3, [r7, #10]
 8001386:	09db      	lsrs	r3, r3, #7
 8001388:	b2da      	uxtb	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	701a      	strb	r2, [r3, #0]
		break;
 800138e:	e001      	b.n	8001394 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001390:	23fc      	movs	r3, #252	; 0xfc
 8001392:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001394:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001398:	4618      	mov	r0, r3
 800139a:	371c      	adds	r7, #28
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80013b6:	f107 030e 	add.w	r3, r7, #14
 80013ba:	461a      	mov	r2, r3
 80013bc:	2101      	movs	r1, #1
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f001 ff5a 	bl	8003278 <VL53L0X_RdByte>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80013c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d107      	bne.n	80013e0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80013d0:	7bba      	ldrb	r2, [r7, #14]
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2100      	movs	r1, #0
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ff92 	bl	8001300 <sequence_step_enabled>
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80013e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d108      	bne.n	80013fa <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80013e8:	7bba      	ldrb	r2, [r7, #14]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	3302      	adds	r3, #2
 80013ee:	2101      	movs	r1, #1
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff85 	bl	8001300 <sequence_step_enabled>
 80013f6:	4603      	mov	r3, r0
 80013f8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d108      	bne.n	8001414 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8001402:	7bba      	ldrb	r2, [r7, #14]
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	2102      	movs	r1, #2
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ff78 	bl	8001300 <sequence_step_enabled>
 8001410:	4603      	mov	r3, r0
 8001412:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8001414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d108      	bne.n	800142e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800141c:	7bba      	ldrb	r2, [r7, #14]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	3303      	adds	r3, #3
 8001422:	2103      	movs	r1, #3
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff6b 	bl	8001300 <sequence_step_enabled>
 800142a:	4603      	mov	r3, r0
 800142c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d108      	bne.n	8001448 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8001436:	7bba      	ldrb	r2, [r7, #14]
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	3304      	adds	r3, #4
 800143c:	2104      	movs	r1, #4
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ff5e 	bl	8001300 <sequence_step_enabled>
 8001444:	4603      	mov	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001448:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800145e:	2300      	movs	r3, #0
 8001460:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	461a      	mov	r2, r3
 8001468:	21f8      	movs	r1, #248	; 0xf8
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f001 ff2e 	bl	80032cc <VL53L0X_RdWord>
 8001470:	4603      	mov	r3, r0
 8001472:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8001474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d108      	bne.n	800148e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	461a      	mov	r2, r3
 8001482:	2104      	movs	r1, #4
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f001 ff59 	bl	800333c <VL53L0X_RdDWord>
 800148a:	4603      	mov	r3, r0
 800148c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10c      	bne.n	80014b0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8001496:	89bb      	ldrh	r3, [r7, #12]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	89ba      	ldrh	r2, [r7, #12]
 80014a0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80014b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	7d1b      	ldrb	r3, [r3, #20]
 80014ce:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	7bba      	ldrb	r2, [r7, #14]
 80014d4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80014f4:	f107 030e 	add.w	r3, r7, #14
 80014f8:	461a      	mov	r2, r3
 80014fa:	2120      	movs	r1, #32
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f001 fee5 	bl	80032cc <VL53L0X_RdWord>
 8001502:	4603      	mov	r3, r0
 8001504:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8001506:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d118      	bne.n	8001540 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d109      	bne.n	8001528 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	751a      	strb	r2, [r3, #20]
 8001526:	e00b      	b.n	8001540 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8001528:	89fb      	ldrh	r3, [r7, #14]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001540:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <VL53L0X_GetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	460b      	mov	r3, r1
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800155a:	2300      	movs	r3, #0
 800155c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800155e:	897b      	ldrh	r3, [r7, #10]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d905      	bls.n	8001570 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001564:	23fc      	movs	r3, #252	; 0xfc
 8001566:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	e008      	b.n	8001582 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001570:	897b      	ldrh	r3, [r7, #10]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4413      	add	r3, r2
 8001576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	7dba      	ldrb	r2, [r7, #22]
 8001580:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001586:	4618      	mov	r0, r3
 8001588:	371c      	adds	r7, #28
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <VL53L0X_GetLimitCheckValue>:
	return Status;
}

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b088      	sub	sp, #32
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	460b      	mov	r3, r1
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80015aa:	897b      	ldrh	r3, [r7, #10]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d847      	bhi.n	8001640 <VL53L0X_GetLimitCheckValue+0xac>
 80015b0:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <VL53L0X_GetLimitCheckValue+0x24>)
 80015b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b6:	bf00      	nop
 80015b8:	080015d1 	.word	0x080015d1
 80015bc:	080015dd 	.word	0x080015dd
 80015c0:	08001603 	.word	0x08001603
 80015c4:	0800160f 	.word	0x0800160f
 80015c8:	0800161b 	.word	0x0800161b
 80015cc:	0800161b 	.word	0x0800161b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	77bb      	strb	r3, [r7, #30]
		break;
 80015da:	e033      	b.n	8001644 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80015dc:	f107 0316 	add.w	r3, r7, #22
 80015e0:	461a      	mov	r2, r3
 80015e2:	2144      	movs	r1, #68	; 0x44
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f001 fe71 	bl	80032cc <VL53L0X_RdWord>
 80015ea:	4603      	mov	r3, r0
 80015ec:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80015ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d102      	bne.n	80015fc <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80015f6:	8afb      	ldrh	r3, [r7, #22]
 80015f8:	025b      	lsls	r3, r3, #9
 80015fa:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	77bb      	strb	r3, [r7, #30]
		break;
 8001600:	e020      	b.n	8001644 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001606:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	77bb      	strb	r3, [r7, #30]
		break;
 800160c:	e01a      	b.n	8001644 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001612:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	77bb      	strb	r3, [r7, #30]
		break;
 8001618:	e014      	b.n	8001644 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800161a:	f107 0316 	add.w	r3, r7, #22
 800161e:	461a      	mov	r2, r3
 8001620:	2164      	movs	r1, #100	; 0x64
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f001 fe52 	bl	80032cc <VL53L0X_RdWord>
 8001628:	4603      	mov	r3, r0
 800162a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800162c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8001634:	8afb      	ldrh	r3, [r7, #22]
 8001636:	025b      	lsls	r3, r3, #9
 8001638:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	77bb      	strb	r3, [r7, #30]
		break;
 800163e:	e001      	b.n	8001644 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001640:	23fc      	movs	r3, #252	; 0xfc
 8001642:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001644:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d12a      	bne.n	80016a2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800164c:	7fbb      	ldrb	r3, [r7, #30]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d124      	bne.n	800169c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d110      	bne.n	800167a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8001658:	897b      	ldrh	r3, [r7, #10]
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	330a      	adds	r3, #10
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800166c:	897b      	ldrh	r3, [r7, #10]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4413      	add	r3, r2
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2020 	strb.w	r2, [r3, #32]
 8001678:	e013      	b.n	80016a2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8001680:	897b      	ldrh	r3, [r7, #10]
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	330a      	adds	r3, #10
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800168e:	897b      	ldrh	r3, [r7, #10]
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	2201      	movs	r2, #1
 8001696:	f883 2020 	strb.w	r2, [r3, #32]
 800169a:	e002      	b.n	80016a2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80016a2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3720      	adds	r7, #32
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop

080016b0 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80016be:	f107 030e 	add.w	r3, r7, #14
 80016c2:	461a      	mov	r2, r3
 80016c4:	2101      	movs	r1, #1
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f001 fdd6 	bl	8003278 <VL53L0X_RdByte>
 80016cc:	4603      	mov	r3, r0
 80016ce:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80016d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10e      	bne.n	80016f6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80016d8:	7bba      	ldrb	r2, [r7, #14]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 80016e0:	7bbb      	ldrb	r3, [r7, #14]
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	da03      	bge.n	80016f0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	e002      	b.n	80016f6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d104      	bne.n	8001708 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	781a      	ldrb	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001708:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001720:	2300      	movs	r3, #0
 8001722:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800172a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 800172c:	7dbb      	ldrb	r3, [r7, #22]
 800172e:	2b03      	cmp	r3, #3
 8001730:	f000 8093 	beq.w	800185a <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 8001734:	2b03      	cmp	r3, #3
 8001736:	f300 80d6 	bgt.w	80018e6 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 800173a:	2b01      	cmp	r3, #1
 800173c:	d002      	beq.n	8001744 <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 800173e:	2b02      	cmp	r3, #2
 8001740:	d047      	beq.n	80017d2 <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 8001742:	e0d0      	b.n	80018e6 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	f107 0210 	add.w	r2, r7, #16
 800174c:	2101      	movs	r1, #1
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 faf8 	bl	8001d44 <VL53L0X_GetInterruptThresholds>
 8001754:	4603      	mov	r3, r0
 8001756:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800175e:	f240 80bd 	bls.w	80018dc <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 8001762:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f040 80b8 	bne.w	80018dc <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800176c:	78fb      	ldrb	r3, [r7, #3]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d006      	beq.n	8001780 <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 8001772:	4960      	ldr	r1, [pc, #384]	; (80018f4 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fe85 	bl	8002484 <VL53L0X_load_tuning_settings>
 800177a:	4603      	mov	r3, r0
 800177c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800177e:	e0ad      	b.n	80018dc <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8001780:	2204      	movs	r2, #4
 8001782:	21ff      	movs	r1, #255	; 0xff
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f001 fd53 	bl	8003230 <VL53L0X_WrByte>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	4313      	orrs	r3, r2
 8001792:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8001794:	2200      	movs	r2, #0
 8001796:	2170      	movs	r1, #112	; 0x70
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f001 fd49 	bl	8003230 <VL53L0X_WrByte>
 800179e:	4603      	mov	r3, r0
 80017a0:	461a      	mov	r2, r3
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80017a8:	2200      	movs	r2, #0
 80017aa:	21ff      	movs	r1, #255	; 0xff
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f001 fd3f 	bl	8003230 <VL53L0X_WrByte>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80017bc:	2200      	movs	r2, #0
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f001 fd35 	bl	8003230 <VL53L0X_WrByte>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	75fb      	strb	r3, [r7, #23]
		break;
 80017d0:	e084      	b.n	80018dc <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	f107 0210 	add.w	r2, r7, #16
 80017da:	2101      	movs	r1, #1
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 fab1 	bl	8001d44 <VL53L0X_GetInterruptThresholds>
 80017e2:	4603      	mov	r3, r0
 80017e4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d079      	beq.n	80018e0 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 80017ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d175      	bne.n	80018e0 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 80017fa:	493e      	ldr	r1, [pc, #248]	; (80018f4 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fe41 	bl	8002484 <VL53L0X_load_tuning_settings>
 8001802:	4603      	mov	r3, r0
 8001804:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8001806:	e06b      	b.n	80018e0 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8001808:	2204      	movs	r2, #4
 800180a:	21ff      	movs	r1, #255	; 0xff
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f001 fd0f 	bl	8003230 <VL53L0X_WrByte>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	4313      	orrs	r3, r2
 800181a:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800181c:	2200      	movs	r2, #0
 800181e:	2170      	movs	r1, #112	; 0x70
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f001 fd05 	bl	8003230 <VL53L0X_WrByte>
 8001826:	4603      	mov	r3, r0
 8001828:	461a      	mov	r2, r3
 800182a:	7dfb      	ldrb	r3, [r7, #23]
 800182c:	4313      	orrs	r3, r2
 800182e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001830:	2200      	movs	r2, #0
 8001832:	21ff      	movs	r1, #255	; 0xff
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f001 fcfb 	bl	8003230 <VL53L0X_WrByte>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	7dfb      	ldrb	r3, [r7, #23]
 8001840:	4313      	orrs	r3, r2
 8001842:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001844:	2200      	movs	r2, #0
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f001 fcf1 	bl	8003230 <VL53L0X_WrByte>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	7dfb      	ldrb	r3, [r7, #23]
 8001854:	4313      	orrs	r3, r2
 8001856:	75fb      	strb	r3, [r7, #23]
		break;
 8001858:	e042      	b.n	80018e0 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	f107 0210 	add.w	r2, r7, #16
 8001862:	2101      	movs	r1, #1
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 fa6d 	bl	8001d44 <VL53L0X_GetInterruptThresholds>
 800186a:	4603      	mov	r3, r0
 800186c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 800186e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d136      	bne.n	80018e4 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d006      	beq.n	800188a <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 800187c:	491d      	ldr	r1, [pc, #116]	; (80018f4 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 fe00 	bl	8002484 <VL53L0X_load_tuning_settings>
 8001884:	4603      	mov	r3, r0
 8001886:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 8001888:	e02c      	b.n	80018e4 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800188a:	2204      	movs	r2, #4
 800188c:	21ff      	movs	r1, #255	; 0xff
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f001 fcce 	bl	8003230 <VL53L0X_WrByte>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	7dfb      	ldrb	r3, [r7, #23]
 800189a:	4313      	orrs	r3, r2
 800189c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800189e:	2200      	movs	r2, #0
 80018a0:	2170      	movs	r1, #112	; 0x70
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f001 fcc4 	bl	8003230 <VL53L0X_WrByte>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80018b2:	2200      	movs	r2, #0
 80018b4:	21ff      	movs	r1, #255	; 0xff
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f001 fcba 	bl	8003230 <VL53L0X_WrByte>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	7dfb      	ldrb	r3, [r7, #23]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f001 fcb0 	bl	8003230 <VL53L0X_WrByte>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	7dfb      	ldrb	r3, [r7, #23]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	75fb      	strb	r3, [r7, #23]
		break;
 80018da:	e003      	b.n	80018e4 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 80018dc:	bf00      	nop
 80018de:	e002      	b.n	80018e6 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 80018e0:	bf00      	nop
 80018e2:	e000      	b.n	80018e6 <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 80018e4:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80018e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000008 	.word	0x20000008

080018f8 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001900:	2300      	movs	r3, #0
 8001902:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8001904:	2301      	movs	r3, #1
 8001906:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8001908:	f107 030e 	add.w	r3, r7, #14
 800190c:	4619      	mov	r1, r3
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff fcb8 	bl	8001284 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001914:	2201      	movs	r2, #1
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f001 fc89 	bl	8003230 <VL53L0X_WrByte>
 800191e:	4603      	mov	r3, r0
 8001920:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001922:	2201      	movs	r2, #1
 8001924:	21ff      	movs	r1, #255	; 0xff
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f001 fc82 	bl	8003230 <VL53L0X_WrByte>
 800192c:	4603      	mov	r3, r0
 800192e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001930:	2200      	movs	r2, #0
 8001932:	2100      	movs	r1, #0
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f001 fc7b 	bl	8003230 <VL53L0X_WrByte>
 800193a:	4603      	mov	r3, r0
 800193c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 8001944:	461a      	mov	r2, r3
 8001946:	2191      	movs	r1, #145	; 0x91
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f001 fc71 	bl	8003230 <VL53L0X_WrByte>
 800194e:	4603      	mov	r3, r0
 8001950:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8001952:	2201      	movs	r2, #1
 8001954:	2100      	movs	r1, #0
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f001 fc6a 	bl	8003230 <VL53L0X_WrByte>
 800195c:	4603      	mov	r3, r0
 800195e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001960:	2200      	movs	r2, #0
 8001962:	21ff      	movs	r1, #255	; 0xff
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f001 fc63 	bl	8003230 <VL53L0X_WrByte>
 800196a:	4603      	mov	r3, r0
 800196c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800196e:	2200      	movs	r2, #0
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f001 fc5c 	bl	8003230 <VL53L0X_WrByte>
 8001978:	4603      	mov	r3, r0
 800197a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800197c:	7bbb      	ldrb	r3, [r7, #14]
 800197e:	2b03      	cmp	r3, #3
 8001980:	d054      	beq.n	8001a2c <VL53L0X_StartMeasurement+0x134>
 8001982:	2b03      	cmp	r3, #3
 8001984:	dc6c      	bgt.n	8001a60 <VL53L0X_StartMeasurement+0x168>
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <VL53L0X_StartMeasurement+0x98>
 800198a:	2b01      	cmp	r3, #1
 800198c:	d034      	beq.n	80019f8 <VL53L0X_StartMeasurement+0x100>
 800198e:	e067      	b.n	8001a60 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8001990:	2201      	movs	r2, #1
 8001992:	2100      	movs	r1, #0
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f001 fc4b 	bl	8003230 <VL53L0X_WrByte>
 800199a:	4603      	mov	r3, r0
 800199c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80019a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d15d      	bne.n	8001a66 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d008      	beq.n	80019c6 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 80019b4:	f107 030d 	add.w	r3, r7, #13
 80019b8:	461a      	mov	r2, r3
 80019ba:	2100      	movs	r1, #0
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f001 fc5b 	bl	8003278 <VL53L0X_RdByte>
 80019c2:	4603      	mov	r3, r0
 80019c4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	3301      	adds	r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80019cc:	7b7a      	ldrb	r2, [r7, #13]
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	4013      	ands	r3, r2
 80019d2:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80019d4:	7bfa      	ldrb	r2, [r7, #15]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d107      	bne.n	80019ea <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80019da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d103      	bne.n	80019ea <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019e8:	d3e1      	bcc.n	80019ae <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80019f0:	d339      	bcc.n	8001a66 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80019f2:	23f9      	movs	r3, #249	; 0xf9
 80019f4:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80019f6:	e036      	b.n	8001a66 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80019f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d105      	bne.n	8001a0c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8001a00:	2101      	movs	r1, #1
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fe86 	bl	8001714 <VL53L0X_CheckAndLoadInterruptSettings>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	2100      	movs	r1, #0
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f001 fc0d 	bl	8003230 <VL53L0X_WrByte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8001a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d123      	bne.n	8001a6a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2204      	movs	r2, #4
 8001a26:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8001a2a:	e01e      	b.n	8001a6a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8001a2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8001a34:	2101      	movs	r1, #1
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fe6c 	bl	8001714 <VL53L0X_CheckAndLoadInterruptSettings>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8001a40:	2204      	movs	r2, #4
 8001a42:	2100      	movs	r1, #0
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f001 fbf3 	bl	8003230 <VL53L0X_WrByte>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8001a4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10b      	bne.n	8001a6e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2204      	movs	r2, #4
 8001a5a:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 8001a5e:	e006      	b.n	8001a6e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8001a60:	23f8      	movs	r3, #248	; 0xf8
 8001a62:	75fb      	strb	r3, [r7, #23]
 8001a64:	e004      	b.n	8001a70 <VL53L0X_StartMeasurement+0x178>
		break;
 8001a66:	bf00      	nop
 8001a68:	e002      	b.n	8001a70 <VL53L0X_StartMeasurement+0x178>
		break;
 8001a6a:	bf00      	nop
 8001a6c:	e000      	b.n	8001a70 <VL53L0X_StartMeasurement+0x178>
		break;
 8001a6e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8001a70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001a90:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8001a92:	7bbb      	ldrb	r3, [r7, #14]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d112      	bne.n	8001abe <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f9c6 	bl	8001e30 <VL53L0X_GetInterruptMaskStatus>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d103      	bne.n	8001ab6 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
 8001ab4:	e01c      	b.n	8001af0 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
 8001abc:	e018      	b.n	8001af0 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8001abe:	f107 030d 	add.w	r3, r7, #13
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	2114      	movs	r1, #20
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f001 fbd6 	bl	8003278 <VL53L0X_RdByte>
 8001acc:	4603      	mov	r3, r0
 8001ace:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8001ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10b      	bne.n	8001af0 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8001ad8:	7b7b      	ldrb	r3, [r7, #13]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e002      	b.n	8001af0 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8001afc:	b5b0      	push	{r4, r5, r7, lr}
 8001afe:	b096      	sub	sp, #88	; 0x58
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8001b0c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b10:	230c      	movs	r3, #12
 8001b12:	2114      	movs	r1, #20
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f001 fb5f 	bl	80031d8 <VL53L0X_ReadMulti>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8001b20:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f040 80d1 	bne.w	8001ccc <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 8001b36:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8001b52:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	025b      	lsls	r3, r3, #9
 8001b68:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b6e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 8001b70:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4413      	add	r3, r2
 8001b82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8001b86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001b8a:	025b      	lsls	r3, r3, #9
 8001b8c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8001b92:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001bae:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8001bb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001bb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 8001bbe:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 8001bc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8001bca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bd0:	d046      	beq.n	8001c60 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8001bd2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001bd4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001bd8:	fb02 f303 	mul.w	r3, r2, r3
 8001bdc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001be0:	4a57      	ldr	r2, [pc, #348]	; (8001d40 <VL53L0X_GetRangingMeasurementData+0x244>)
 8001be2:	fb82 1203 	smull	r1, r2, r2, r3
 8001be6:	1192      	asrs	r2, r2, #6
 8001be8:	17db      	asrs	r3, r3, #31
 8001bea:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8001bec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7d1b      	ldrb	r3, [r3, #20]
 8001bfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8001bfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d02c      	beq.n	8001c60 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8001c06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001c08:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	121a      	asrs	r2, r3, #8
					<= 0) {
 8001c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d10d      	bne.n	8001c34 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8001c18:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d004      	beq.n	8001c2a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8001c20:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8001c24:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001c28:	e016      	b.n	8001c58 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8001c2a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8001c2e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001c32:	e011      	b.n	8001c58 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8001c34:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001c38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001c3a:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8001c3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001c40:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8001c48:	121b      	asrs	r3, r3, #8
 8001c4a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8001c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8001c54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8001c58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c5c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8001c60:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00d      	beq.n	8001c84 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8001c68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8001c74:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	019b      	lsls	r3, r3, #6
 8001c7c:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	75da      	strb	r2, [r3, #23]
 8001c82:	e006      	b.n	8001c92 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001c8a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8001c92:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001c96:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001c9a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f001 f841 	bl	8002d30 <VL53L0X_get_pal_range_status>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8001cbc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d103      	bne.n	8001ccc <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8001cc4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001ccc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d12f      	bne.n	8001d34 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f107 040c 	add.w	r4, r7, #12
 8001cda:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8001cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ce6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8001cee:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8001cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8001cfc:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8001d02:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8001d08:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8001d0e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8001d14:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8001d1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8001d24:	f107 050c 	add.w	r5, r7, #12
 8001d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001d34:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3750      	adds	r7, #80	; 0x50
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d40:	10624dd3 	.word	0x10624dd3

08001d44 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	607a      	str	r2, [r7, #4]
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	460b      	mov	r3, r1
 8001d52:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	210e      	movs	r1, #14
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f001 fab3 	bl	80032cc <VL53L0X_RdWord>
 8001d66:	4603      	mov	r3, r0
 8001d68:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8001d6a:	8abb      	ldrh	r3, [r7, #20]
 8001d6c:	045b      	lsls	r3, r3, #17
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <VL53L0X_GetInterruptThresholds+0x68>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8001d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10f      	bne.n	8001da0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	461a      	mov	r2, r3
 8001d86:	210c      	movs	r1, #12
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f001 fa9f 	bl	80032cc <VL53L0X_RdWord>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8001d92:	8abb      	ldrh	r3, [r7, #20]
 8001d94:	045b      	lsls	r3, r3, #17
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <VL53L0X_GetInterruptThresholds+0x68>)
 8001d9a:	4013      	ands	r3, r2
		*pThresholdHigh =
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001da0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	1ffe0000 	.word	0x1ffe0000

08001db0 <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	210b      	movs	r1, #11
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f001 fa32 	bl	8003230 <VL53L0X_WrByte>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	210b      	movs	r1, #11
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f001 fa2b 	bl	8003230 <VL53L0X_WrByte>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8001de4:	f107 030d 	add.w	r3, r7, #13
 8001de8:	461a      	mov	r2, r3
 8001dea:	2113      	movs	r1, #19
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f001 fa43 	bl	8003278 <VL53L0X_RdByte>
 8001df2:	4603      	mov	r3, r0
 8001df4:	461a      	mov	r2, r3
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8001dfc:	7bbb      	ldrb	r3, [r7, #14]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8001e02:	7b7b      	ldrb	r3, [r7, #13]
 8001e04:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d006      	beq.n	8001e1a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8001e0c:	7bbb      	ldrb	r3, [r7, #14]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d803      	bhi.n	8001e1a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0d3      	beq.n	8001dc2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8001e1a:	7bbb      	ldrb	r3, [r7, #14]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8001e20:	23f4      	movs	r3, #244	; 0xf4
 8001e22:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 8001e3e:	f107 030e 	add.w	r3, r7, #14
 8001e42:	461a      	mov	r2, r3
 8001e44:	2113      	movs	r1, #19
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f001 fa16 	bl	8003278 <VL53L0X_RdByte>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 8001e50:	7bbb      	ldrb	r3, [r7, #14]
 8001e52:	f003 0207 	and.w	r2, r3, #7
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	f003 0318 	and.w	r3, r3, #24
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8001e64:	23fa      	movs	r3, #250	; 0xfa
 8001e66:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8001e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8001e82:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e86:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8001e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8c:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	461a      	mov	r2, r3
 8001e94:	2128      	movs	r1, #40	; 0x28
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f001 fa18 	bl	80032cc <VL53L0X_RdWord>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8001ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d11e      	bne.n	8001ee6 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8001ea8:	893b      	ldrh	r3, [r7, #8]
 8001eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8001eb2:	893b      	ldrh	r3, [r7, #8]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	dd0b      	ble.n	8001ed6 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8001ebe:	893a      	ldrh	r2, [r7, #8]
 8001ec0:	897b      	ldrh	r3, [r7, #10]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	b21b      	sxth	r3, r3
 8001ec8:	461a      	mov	r2, r3
					* 250;
 8001eca:	23fa      	movs	r3, #250	; 0xfa
 8001ecc:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	e007      	b.n	8001ee6 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8001ed6:	893b      	ldrh	r3, [r7, #8]
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	23fa      	movs	r3, #250	; 0xfa
 8001ede:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8001ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b086      	sub	sp, #24
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8001f06:	f107 030f 	add.w	r3, r7, #15
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fdb5 	bl	8001a7c <VL53L0X_GetMeasurementDataReady>
 8001f12:	4603      	mov	r3, r0
 8001f14:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8001f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d110      	bne.n	8001f40 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d00f      	beq.n	8001f44 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	3301      	adds	r3, #1
 8001f28:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001f30:	d302      	bcc.n	8001f38 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8001f32:	23f9      	movs	r3, #249	; 0xf9
 8001f34:	75fb      	strb	r3, [r7, #23]
			break;
 8001f36:	e006      	b.n	8001f46 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f001 fa3b 	bl	80033b4 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8001f3e:	e7e2      	b.n	8001f06 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8001f40:	bf00      	nop
 8001f42:	e000      	b.n	8001f46 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8001f44:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8001f46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	3301      	adds	r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8001f84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f88:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8001f8a:	e002      	b.n	8001f92 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d8f8      	bhi.n	8001f8c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8001f9a:	e017      	b.n	8001fcc <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d30b      	bcc.n	8001fc0 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4413      	add	r3, r2
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	085b      	lsrs	r3, r3, #1
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	4413      	add	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	e002      	b.n	8001fc6 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	089b      	lsrs	r3, r3, #2
 8001fca:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1e4      	bne.n	8001f9c <VL53L0X_isqrt+0x24>
	}

	return res;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <VL53L0X_calc_macro_period_ps>:
}


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 8001fec:	f240 6277 	movw	r2, #1655	; 0x677
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8001ff8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001ffc:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	fb02 f303 	mul.w	r3, r2, r3
 800200c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800200e:	68bb      	ldr	r3, [r7, #8]
}
 8002010:	4618      	mov	r0, r3
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <VL53L0X_decode_timeout>:
	return encoded_timeout;

}

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800202e:	88fa      	ldrh	r2, [r7, #6]
 8002030:	0a12      	lsrs	r2, r2, #8
 8002032:	b292      	uxth	r2, r2
 8002034:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8002036:	3301      	adds	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800203a:	68fb      	ldr	r3, [r7, #12]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	4613      	mov	r3, r2
 8002054:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	4619      	mov	r1, r3
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f7ff ffbe 	bl	8001fe0 <VL53L0X_calc_macro_period_ps>
 8002064:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <VL53L0X_calc_timeout_mclks+0x50>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	099b      	lsrs	r3, r3, #6
 8002074:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800207c:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	441a      	add	r2, r3
	timeout_period_mclks =
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
 800208c:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800208e:	69fb      	ldr	r3, [r7, #28]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	10624dd3 	.word	0x10624dd3

0800209c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]
 80020a8:	4613      	mov	r3, r2
 80020aa:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	4619      	mov	r1, r3
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff93 	bl	8001fe0 <VL53L0X_calc_macro_period_ps>
 80020ba:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <VL53L0X_calc_timeout_us+0x50>)
 80020c4:	fba2 2303 	umull	r2, r3, r2, r3
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80020cc:	887b      	ldrh	r3, [r7, #2]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	fb02 f303 	mul.w	r3, r2, r3
 80020d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <VL53L0X_calc_timeout_us+0x50>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	099b      	lsrs	r3, r3, #6
 80020e0:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80020e2:	697b      	ldr	r3, [r7, #20]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	10624dd3 	.word	0x10624dd3

080020f0 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08c      	sub	sp, #48	; 0x30
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	460b      	mov	r3, r1
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80020fe:	2300      	movs	r3, #0
 8002100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <get_sequence_step_timeout+0x38>
 800211c:	7afb      	ldrb	r3, [r7, #11]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d002      	beq.n	8002128 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8002122:	7afb      	ldrb	r3, [r7, #11]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d128      	bne.n	800217a <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002128:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800212c:	461a      	mov	r2, r3
 800212e:	2100      	movs	r1, #0
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f7ff f8cd 	bl	80012d0 <VL53L0X_GetVcselPulsePeriod>
 8002136:	4603      	mov	r3, r0
 8002138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800213c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8002144:	f107 0320 	add.w	r3, r7, #32
 8002148:	461a      	mov	r2, r3
 800214a:	2146      	movs	r1, #70	; 0x46
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f001 f893 	bl	8003278 <VL53L0X_RdByte>
 8002152:	4603      	mov	r3, r0
 8002154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8002158:	f897 3020 	ldrb.w	r3, [r7, #32]
 800215c:	b29b      	uxth	r3, r3
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff5c 	bl	800201c <VL53L0X_decode_timeout>
 8002164:	4603      	mov	r3, r0
 8002166:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8002168:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800216c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800216e:	4619      	mov	r1, r3
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f7ff ff93 	bl	800209c <VL53L0X_calc_timeout_us>
 8002176:	62b8      	str	r0, [r7, #40]	; 0x28
 8002178:	e092      	b.n	80022a0 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800217a:	7afb      	ldrb	r3, [r7, #11]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d135      	bne.n	80021ec <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002180:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8002184:	461a      	mov	r2, r3
 8002186:	2100      	movs	r1, #0
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f7ff f8a1 	bl	80012d0 <VL53L0X_GetVcselPulsePeriod>
 800218e:	4603      	mov	r3, r0
 8002190:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8002194:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002198:	2b00      	cmp	r3, #0
 800219a:	f040 8081 	bne.w	80022a0 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800219e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80021a2:	461a      	mov	r2, r3
 80021a4:	2100      	movs	r1, #0
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7ff f892 	bl	80012d0 <VL53L0X_GetVcselPulsePeriod>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80021b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80021ba:	f107 031e 	add.w	r3, r7, #30
 80021be:	461a      	mov	r2, r3
 80021c0:	2151      	movs	r1, #81	; 0x51
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f001 f882 	bl	80032cc <VL53L0X_RdWord>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80021ce:	8bfb      	ldrh	r3, [r7, #30]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff23 	bl	800201c <VL53L0X_decode_timeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80021da:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80021de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80021e0:	4619      	mov	r1, r3
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7ff ff5a 	bl	800209c <VL53L0X_calc_timeout_us>
 80021e8:	62b8      	str	r0, [r7, #40]	; 0x28
 80021ea:	e059      	b.n	80022a0 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80021ec:	7afb      	ldrb	r3, [r7, #11]
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d156      	bne.n	80022a0 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f7ff f8d3 	bl	80013a4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8002202:	7dfb      	ldrb	r3, [r7, #23]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01d      	beq.n	8002244 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002208:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800220c:	461a      	mov	r2, r3
 800220e:	2100      	movs	r1, #0
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f7ff f85d 	bl	80012d0 <VL53L0X_GetVcselPulsePeriod>
 8002216:	4603      	mov	r3, r0
 8002218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800221c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10f      	bne.n	8002244 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8002224:	f107 031e 	add.w	r3, r7, #30
 8002228:	461a      	mov	r2, r3
 800222a:	2151      	movs	r1, #81	; 0x51
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f001 f84d 	bl	80032cc <VL53L0X_RdWord>
 8002232:	4603      	mov	r3, r0
 8002234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8002238:	8bfb      	ldrh	r3, [r7, #30]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff feee 	bl	800201c <VL53L0X_decode_timeout>
 8002240:	4603      	mov	r3, r0
 8002242:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8002244:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002248:	2b00      	cmp	r3, #0
 800224a:	d109      	bne.n	8002260 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800224c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8002250:	461a      	mov	r2, r3
 8002252:	2101      	movs	r1, #1
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff f83b 	bl	80012d0 <VL53L0X_GetVcselPulsePeriod>
 800225a:	4603      	mov	r3, r0
 800225c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8002260:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10f      	bne.n	8002288 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	461a      	mov	r2, r3
 800226e:	2171      	movs	r1, #113	; 0x71
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f001 f82b 	bl	80032cc <VL53L0X_RdWord>
 8002276:	4603      	mov	r3, r0
 8002278:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800227c:	8bbb      	ldrh	r3, [r7, #28]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fecc 	bl	800201c <VL53L0X_decode_timeout>
 8002284:	4603      	mov	r3, r0
 8002286:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8002288:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800228a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8002290:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002296:	4619      	mov	r1, r3
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f7ff feff 	bl	800209c <VL53L0X_calc_timeout_us>
 800229e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022a4:	601a      	str	r2, [r3, #0]

	return Status;
 80022a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3730      	adds	r7, #48	; 0x30
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	460b      	mov	r3, r1
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80022c4:	7afb      	ldrb	r3, [r7, #11]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <VL53L0X_get_vcsel_pulse_period+0x1e>
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d00a      	beq.n	80022e4 <VL53L0X_get_vcsel_pulse_period+0x32>
 80022ce:	e013      	b.n	80022f8 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80022d0:	f107 0316 	add.w	r3, r7, #22
 80022d4:	461a      	mov	r2, r3
 80022d6:	2150      	movs	r1, #80	; 0x50
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 ffcd 	bl	8003278 <VL53L0X_RdByte>
 80022de:	4603      	mov	r3, r0
 80022e0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80022e2:	e00b      	b.n	80022fc <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80022e4:	f107 0316 	add.w	r3, r7, #22
 80022e8:	461a      	mov	r2, r3
 80022ea:	2170      	movs	r1, #112	; 0x70
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 ffc3 	bl	8003278 <VL53L0X_RdByte>
 80022f2:	4603      	mov	r3, r0
 80022f4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80022f6:	e001      	b.n	80022fc <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80022f8:	23fc      	movs	r3, #252	; 0xfc
 80022fa:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80022fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d107      	bne.n	8002314 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8002304:	7dbb      	ldrb	r3, [r7, #22]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fe23 	bl	8001f52 <VL53L0X_decode_vcsel_period>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	701a      	strb	r2, [r3, #0]

	return Status;
 8002314:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <VL53L0X_get_measurement_timing_budget_micro_seconds>:
}

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b090      	sub	sp, #64	; 0x40
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8002330:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002334:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8002336:	f240 7376 	movw	r3, #1910	; 0x776
 800233a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800233c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002340:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8002342:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8002348:	f240 234e 	movw	r3, #590	; 0x24e
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800234e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8002352:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8002354:	f44f 7325 	mov.w	r3, #660	; 0x294
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800235a:	f240 2326 	movw	r3, #550	; 0x226
 800235e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8002364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002368:	441a      	add	r2, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800236e:	f107 0318 	add.w	r3, r7, #24
 8002372:	4619      	mov	r1, r3
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff f815 	bl	80013a4 <VL53L0X_GetSequenceStepEnables>
 800237a:	4603      	mov	r3, r0
 800237c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8002380:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8002388:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800238c:	e075      	b.n	800247a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800238e:	7e3b      	ldrb	r3, [r7, #24]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d105      	bne.n	80023a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8002394:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800239a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800239c:	2b00      	cmp	r3, #0
 800239e:	d030      	beq.n	8002402 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80023a0:	f107 0310 	add.w	r3, r7, #16
 80023a4:	461a      	mov	r2, r3
 80023a6:	2102      	movs	r1, #2
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff fea1 	bl	80020f0 <get_sequence_step_timeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80023b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d122      	bne.n	8002402 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80023bc:	7e3b      	ldrb	r3, [r7, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80023c6:	6939      	ldr	r1, [r7, #16]
 80023c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ca:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80023cc:	441a      	add	r2, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80023d2:	7ebb      	ldrb	r3, [r7, #26]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d009      	beq.n	80023ec <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80023dc:	6939      	ldr	r1, [r7, #16]
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	440b      	add	r3, r1
 80023e2:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80023e4:	441a      	add	r2, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	e00a      	b.n	8002402 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80023ec:	7e7b      	ldrb	r3, [r7, #25]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80023f6:	6939      	ldr	r1, [r7, #16]
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80023fc:	441a      	add	r2, r3
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002402:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002406:	2b00      	cmp	r3, #0
 8002408:	d114      	bne.n	8002434 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800240a:	7efb      	ldrb	r3, [r7, #27]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d011      	beq.n	8002434 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	461a      	mov	r2, r3
 8002416:	2103      	movs	r1, #3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fe69 	bl	80020f0 <get_sequence_step_timeout>
 800241e:	4603      	mov	r3, r0
 8002420:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8002428:	68f9      	ldr	r1, [r7, #12]
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800242e:	441a      	add	r2, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002434:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002438:	2b00      	cmp	r3, #0
 800243a:	d114      	bne.n	8002466 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800243c:	7f3b      	ldrb	r3, [r7, #28]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d011      	beq.n	8002466 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8002442:	f107 0314 	add.w	r3, r7, #20
 8002446:	461a      	mov	r2, r3
 8002448:	2104      	movs	r1, #4
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fe50 	bl	80020f0 <get_sequence_step_timeout>
 8002450:	4603      	mov	r3, r0
 8002452:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800245a:	6979      	ldr	r1, [r7, #20]
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8002460:	441a      	add	r2, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002466:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002476:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800247a:	4618      	mov	r0, r3
 800247c:	3740      	adds	r7, #64	; 0x40
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800248e:	2300      	movs	r3, #0
 8002490:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8002496:	e0c6      	b.n	8002626 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	4413      	add	r3, r2
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	74fb      	strb	r3, [r7, #19]
		Index++;
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3301      	adds	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	2bff      	cmp	r3, #255	; 0xff
 80024ac:	f040 808d 	bne.w	80025ca <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	4413      	add	r3, r2
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	747b      	strb	r3, [r7, #17]
			Index++;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	3301      	adds	r3, #1
 80024be:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80024c0:	7c7b      	ldrb	r3, [r7, #17]
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	d87e      	bhi.n	80025c4 <VL53L0X_load_tuning_settings+0x140>
 80024c6:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <VL53L0X_load_tuning_settings+0x48>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	080024dd 	.word	0x080024dd
 80024d0:	08002517 	.word	0x08002517
 80024d4:	08002551 	.word	0x08002551
 80024d8:	0800258b 	.word	0x0800258b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	743b      	strb	r3, [r7, #16]
				Index++;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	3301      	adds	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	4413      	add	r3, r2
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80024fc:	7c3b      	ldrb	r3, [r7, #16]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	b29a      	uxth	r2, r3
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	b29b      	uxth	r3, r3
 8002508:	4413      	add	r3, r2
 800250a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	89ba      	ldrh	r2, [r7, #12]
 8002510:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 8002514:	e087      	b.n	8002626 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	4413      	add	r3, r2
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	743b      	strb	r3, [r7, #16]
				Index++;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	3301      	adds	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	4413      	add	r3, r2
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	3301      	adds	r3, #1
 8002534:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8002536:	7c3b      	ldrb	r3, [r7, #16]
 8002538:	b29b      	uxth	r3, r3
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	b29a      	uxth	r2, r3
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	b29b      	uxth	r3, r3
 8002542:	4413      	add	r3, r2
 8002544:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	89ba      	ldrh	r2, [r7, #12]
 800254a:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 800254e:	e06a      	b.n	8002626 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	4413      	add	r3, r2
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	743b      	strb	r3, [r7, #16]
				Index++;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3301      	adds	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	4413      	add	r3, r2
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	73fb      	strb	r3, [r7, #15]
				Index++;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3301      	adds	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8002570:	7c3b      	ldrb	r3, [r7, #16]
 8002572:	b29b      	uxth	r3, r3
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	b29a      	uxth	r2, r3
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	b29b      	uxth	r3, r3
 800257c:	4413      	add	r3, r2
 800257e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	89ba      	ldrh	r2, [r7, #12]
 8002584:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 8002588:	e04d      	b.n	8002626 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	4413      	add	r3, r2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	743b      	strb	r3, [r7, #16]
				Index++;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3301      	adds	r3, #1
 8002598:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	73fb      	strb	r3, [r7, #15]
				Index++;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3301      	adds	r3, #1
 80025a8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80025aa:	7c3b      	ldrb	r3, [r7, #16]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	89ba      	ldrh	r2, [r7, #12]
 80025be:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 80025c2:	e030      	b.n	8002626 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80025c4:	23fc      	movs	r3, #252	; 0xfc
 80025c6:	77fb      	strb	r3, [r7, #31]
 80025c8:	e02d      	b.n	8002626 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80025ca:	7cfb      	ldrb	r3, [r7, #19]
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d828      	bhi.n	8002622 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	4413      	add	r3, r2
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	74bb      	strb	r3, [r7, #18]
			Index++;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	3301      	adds	r3, #1
 80025de:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80025e0:	2300      	movs	r3, #0
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	e00f      	b.n	8002606 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	7819      	ldrb	r1, [r3, #0]
 80025ee:	f107 0208 	add.w	r2, r7, #8
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4413      	add	r3, r2
 80025f6:	460a      	mov	r2, r1
 80025f8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	3301      	adds	r3, #1
 80025fe:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	3301      	adds	r3, #1
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	429a      	cmp	r2, r3
 800260c:	dbeb      	blt.n	80025e6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	f107 0208 	add.w	r2, r7, #8
 8002614:	7cb9      	ldrb	r1, [r7, #18]
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fdae 	bl	8003178 <VL53L0X_WriteMulti>
 800261c:	4603      	mov	r3, r0
 800261e:	77fb      	strb	r3, [r7, #31]
 8002620:	e001      	b.n	8002626 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002622:	23fc      	movs	r3, #252	; 0xfc
 8002624:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	4413      	add	r3, r2
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <VL53L0X_load_tuning_settings+0x1b8>
 8002632:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f43f af2e 	beq.w	8002498 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800263c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002654:	2300      	movs	r3, #0
 8002656:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800265e:	f107 0313 	add.w	r3, r7, #19
 8002662:	4619      	mov	r1, r3
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f7fe ff29 	bl	80014bc <VL53L0X_GetXTalkCompensationEnable>
 800266a:	4603      	mov	r3, r0
 800266c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800266e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d111      	bne.n	800269a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8002676:	7cfb      	ldrb	r3, [r7, #19]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00e      	beq.n	800269a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	8a9b      	ldrh	r3, [r3, #20]
 8002686:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	3380      	adds	r3, #128	; 0x80
 8002694:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800269a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80026be:	f107 0310 	add.w	r3, r7, #16
 80026c2:	461a      	mov	r2, r3
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f7ff ffbe 	bl	8002648 <VL53L0X_get_total_xtalk_rate>
 80026cc:	4603      	mov	r3, r0
 80026ce:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80026d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	441a      	add	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	601a      	str	r2, [r3, #0]

	return Status;
 80026e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 80026f0:	b084      	sub	sp, #16
 80026f2:	b480      	push	{r7}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	f107 0c18 	add.w	ip, r7, #24
 80026fc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002700:	2300      	movs	r3, #0
 8002702:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	60bb      	str	r3, [r7, #8]
	int index = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 8002710:	2300      	movs	r3, #0
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	e00d      	b.n	8002732 <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f107 0218 	add.w	r2, r7, #24
 800271c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002720:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002722:	429a      	cmp	r2, r3
 8002724:	d802      	bhi.n	800272c <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	60bb      	str	r3, [r7, #8]
			break;
 800272a:	e006      	b.n	800273a <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3301      	adds	r3, #1
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002736:	429a      	cmp	r2, r3
 8002738:	d8ed      	bhi.n	8002716 <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 800273a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	429a      	cmp	r2, r3
 8002740:	d105      	bne.n	800274e <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 8002742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002744:	3b01      	subs	r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	e008      	b.n	8002760 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	e002      	b.n	8002760 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	3b01      	subs	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002764:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800276a:	601a      	str	r2, [r3, #0]

	return Status;
 800276c:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	b004      	add	sp, #16
 800277c:	4770      	bx	lr

0800277e <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 800277e:	b5b0      	push	{r4, r5, r7, lr}
 8002780:	b0ba      	sub	sp, #232	; 0xe8
 8002782:	af0e      	add	r7, sp, #56	; 0x38
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800278a:	2300      	movs	r3, #0
 800278c:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	4619      	mov	r1, r3
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f7fe fc8e 	bl	80010c0 <VL53L0X_GetDeviceParameters>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 80027aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d803      	bhi.n	80027ba <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 80027b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027b8:	e081      	b.n	80028be <VL53L0X_calc_dmax+0x140>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 80027ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d304      	bcc.n	80027cc <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 80027c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027ca:	e078      	b.n	80028be <VL53L0X_calc_dmax+0x140>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	930d      	str	r3, [sp, #52]	; 0x34
 80027d2:	f107 0318 	add.w	r3, r7, #24
 80027d6:	930c      	str	r3, [sp, #48]	; 0x30
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	930b      	str	r3, [sp, #44]	; 0x2c
 80027dc:	2307      	movs	r3, #7
 80027de:	930a      	str	r3, [sp, #40]	; 0x28
 80027e0:	466d      	mov	r5, sp
 80027e2:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80027e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80027f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027fc:	f7ff ff78 	bl	80026f0 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	429a      	cmp	r2, r3
 8002806:	d10a      	bne.n	800281e <VL53L0X_calc_dmax+0xa0>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	3314      	adds	r3, #20
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002812:	4413      	add	r3, r2
 8002814:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8002818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800281c:	e04f      	b.n	80028be <VL53L0X_calc_dmax+0x140>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	330e      	adds	r3, #14
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002828:	4413      	add	r3, r2
 800282a:	f853 3c90 	ldr.w	r3, [r3, #-144]
 800282e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	330e      	adds	r3, #14
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800283c:	4413      	add	r3, r2
 800283e:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8002842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	3314      	adds	r3, #20
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002850:	4413      	add	r3, r2
 8002852:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8002856:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3314      	adds	r3, #20
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8002864:	4413      	add	r3, r2
 8002866:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 800286a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if ((amb1 - amb0) != 0) {
 800286e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002872:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002876:	429a      	cmp	r2, r3
 8002878:	d01d      	beq.n	80028b6 <VL53L0X_calc_dmax+0x138>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 800287a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800287e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002882:	1ad2      	subs	r2, r2, r3
 8002884:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8002888:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800288c:	1acb      	subs	r3, r1, r3
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 8002898:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 80028aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80028ae:	4413      	add	r3, r2
 80028b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028b4:	e003      	b.n	80028be <VL53L0X_calc_dmax+0x140>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 80028b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 80028be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028c2:	0c1a      	lsrs	r2, r3, #16
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80028c8:	f997 30ab 	ldrsb.w	r3, [r7, #171]	; 0xab
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	37b0      	adds	r7, #176	; 0xb0
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bdb0      	pop	{r4, r5, r7, pc}

080028d4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b0b0      	sub	sp, #192	; 0xc0
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80028e0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80028e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80028e8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80028ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 80028f0:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80028f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80028f8:	f241 235c 	movw	r3, #4700	; 0x125c
 80028fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8002900:	4b98      	ldr	r3, [pc, #608]	; (8002b64 <VL53L0X_calc_sigma_estimate+0x290>)
 8002902:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8002906:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800290a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800290e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8002912:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800291e:	4b92      	ldr	r3, [pc, #584]	; (8002b68 <VL53L0X_calc_sigma_estimate+0x294>)
 8002920:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8002922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002926:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8002928:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800292c:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 800292e:	f240 6377 	movw	r3, #1655	; 0x677
 8002932:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002934:	2300      	movs	r3, #0
 8002936:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002948:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	66bb      	str	r3, [r7, #104]	; 0x68

	Status = VL53L0X_get_total_signal_rate(
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	461a      	mov	r2, r3
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f7ff fea4 	bl	80026a6 <VL53L0X_get_total_signal_rate>
 800295e:	4603      	mov	r3, r0
 8002960:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8002964:	f107 0318 	add.w	r3, r7, #24
 8002968:	461a      	mov	r2, r3
 800296a:	68b9      	ldr	r1, [r7, #8]
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7ff fe6b 	bl	8002648 <VL53L0X_get_total_xtalk_rate>
 8002972:	4603      	mov	r3, r0
 8002974:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	667b      	str	r3, [r7, #100]	; 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8002984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002986:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800298a:	0c1b      	lsrs	r3, r3, #16
 800298c:	667b      	str	r3, [r7, #100]	; 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002994:	fb02 f303 	mul.w	r3, r2, r3
 8002998:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800299c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80029a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d902      	bls.n	80029ac <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80029a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80029ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d160      	bne.n	8002a76 <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80029c4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80029c8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80029cc:	461a      	mov	r2, r3
 80029ce:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f7ff fb38 	bl	8002048 <VL53L0X_calc_timeout_mclks>
 80029d8:	65f8      	str	r0, [r7, #92]	; 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80029e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80029ea:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80029ee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80029f2:	461a      	mov	r2, r3
 80029f4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7ff fb25 	bl	8002048 <VL53L0X_calc_timeout_mclks>
 80029fe:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8002a00:	2303      	movs	r3, #3
 8002a02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 8002a06:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d102      	bne.n	8002a14 <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8002a14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a18:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8002a1a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002a1e:	fb02 f303 	mul.w	r3, r2, r3
 8002a22:	02db      	lsls	r3, r3, #11
 8002a24:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8002a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a28:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002a2c:	4a4f      	ldr	r2, [pc, #316]	; (8002b6c <VL53L0X_calc_sigma_estimate+0x298>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	099b      	lsrs	r3, r3, #6
 8002a34:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 8002a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a38:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002a3a:	fb02 f303 	mul.w	r3, r2, r3
 8002a3e:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8002a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a42:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002a46:	4a49      	ldr	r2, [pc, #292]	; (8002b6c <VL53L0X_calc_sigma_estimate+0x298>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	653b      	str	r3, [r7, #80]	; 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3380      	adds	r3, #128	; 0x80
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5c:	fb02 f303 	mul.w	r3, r2, r3
 8002a60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8002a64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a68:	3380      	adds	r3, #128	; 0x80
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8002a76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 8002a7e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002a82:	e14a      	b.n	8002d1a <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 8002a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002a90:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002a98:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8002a9c:	e13b      	b.n	8002d16 <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 8002a9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8002aac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ab0:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8002ab2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ab4:	041a      	lsls	r2, r3, #16
 8002ab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8002ac0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ac4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d903      	bls.n	8002ad4 <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8002acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8002ad4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ad8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002adc:	fb02 f303 	mul.w	r3, r2, r3
 8002ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8002ae4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ae8:	4613      	mov	r3, r2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fa41 	bl	8001f78 <VL53L0X_isqrt>
 8002af6:	4603      	mov	r3, r0
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	64bb      	str	r3, [r7, #72]	; 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	891b      	ldrh	r3, [r3, #8]
 8002b00:	461a      	mov	r2, r3
 8002b02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	647b      	str	r3, [r7, #68]	; 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8002b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b0c:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8002b0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b12:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8002b14:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8002b16:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8002b1a:	4a14      	ldr	r2, [pc, #80]	; (8002b6c <VL53L0X_calc_sigma_estimate+0x298>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	643b      	str	r3, [r7, #64]	; 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8002b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002b2c:	4a0f      	ldr	r2, [pc, #60]	; (8002b6c <VL53L0X_calc_sigma_estimate+0x298>)
 8002b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b32:	099b      	lsrs	r3, r3, #6
 8002b34:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 8002b36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b38:	021b      	lsls	r3, r3, #8
 8002b3a:	643b      	str	r3, [r7, #64]	; 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8002b3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bfb8      	it	lt
 8002b48:	425b      	neglt	r3, r3
 8002b4a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	63bb      	str	r3, [r7, #56]	; 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	7e1b      	ldrb	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 8002b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b62:	e032      	b.n	8002bca <VL53L0X_calc_sigma_estimate+0x2f6>
 8002b64:	028f87ae 	.word	0x028f87ae
 8002b68:	0006999a 	.word	0x0006999a
 8002b6c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 8002b70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b80:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8002b84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b88:	fb02 f303 	mul.w	r3, r2, r3
 8002b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8002b90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b96:	4413      	add	r3, r2
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8002b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ba2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 8002baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8002bb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bb8:	fb03 f303 	mul.w	r3, r3, r3
 8002bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8002bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bc4:	0b9b      	lsrs	r3, r3, #14
 8002bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8002bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bd0:	fb02 f303 	mul.w	r3, r2, r3
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002bdc:	0c1b      	lsrs	r3, r3, #16
 8002bde:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8002be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be2:	fb03 f303 	mul.w	r3, r3, r3
 8002be6:	637b      	str	r3, [r7, #52]	; 0x34

		sqr2 = sigmaEstimateP2;
 8002be8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bec:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	fb03 f303 	mul.w	r3, r3, r3
 8002bfe:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8002c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	4413      	add	r3, r2
 8002c06:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8002c08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c0a:	f7ff f9b5 	bl	8001f78 <VL53L0X_isqrt>
 8002c0e:	62b8      	str	r0, [r7, #40]	; 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	041b      	lsls	r3, r3, #16
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	3332      	adds	r3, #50	; 0x32
 8002c1a:	4a42      	ldr	r2, [pc, #264]	; (8002d24 <VL53L0X_calc_sigma_estimate+0x450>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	095a      	lsrs	r2, r3, #5
 8002c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8002c2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c30:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8002c34:	fb02 f303 	mul.w	r3, r2, r3
 8002c38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8002c3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c40:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002c44:	3308      	adds	r3, #8
 8002c46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8002c4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c4e:	4a36      	ldr	r2, [pc, #216]	; (8002d28 <VL53L0X_calc_sigma_estimate+0x454>)
 8002c50:	fba2 2303 	umull	r2, r3, r2, r3
 8002c54:	0b5b      	lsrs	r3, r3, #13
 8002c56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8002c5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d903      	bls.n	8002c6e <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 8002c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 8002c6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8002c7c:	4a2b      	ldr	r2, [pc, #172]	; (8002d2c <VL53L0X_calc_sigma_estimate+0x458>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	099b      	lsrs	r3, r3, #6
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8002c8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c8e:	441a      	add	r2, r3
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff f96e 	bl	8001f78 <VL53L0X_isqrt>
 8002c9c:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	021b      	lsls	r3, r3, #8
 8002ca2:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002caa:	4a20      	ldr	r2, [pc, #128]	; (8002d2c <VL53L0X_calc_sigma_estimate+0x458>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	099b      	lsrs	r3, r3, #6
 8002cb2:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8002cb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cb8:	fb03 f303 	mul.w	r3, r3, r3
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	fb03 f303 	mul.w	r3, r3, r3
 8002cc4:	633b      	str	r3, [r7, #48]	; 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8002cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	4413      	add	r3, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff f953 	bl	8001f78 <VL53L0X_isqrt>
 8002cd2:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8002ce2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d009      	beq.n	8002cfc <VL53L0X_calc_sigma_estimate+0x428>
 8002ce8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <VL53L0X_calc_sigma_estimate+0x428>
 8002cf0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d903      	bls.n	8002d04 <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 8002cfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002d0a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002d16:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	37c0      	adds	r7, #192	; 0xc0
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	51eb851f 	.word	0x51eb851f
 8002d28:	d1b71759 	.word	0xd1b71759
 8002d2c:	10624dd3 	.word	0x10624dd3

08002d30 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b090      	sub	sp, #64	; 0x40
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	72fb      	strb	r3, [r7, #11]
 8002d40:	4613      	mov	r3, r2
 8002d42:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8002d82:	7afb      	ldrb	r3, [r7, #11]
 8002d84:	10db      	asrs	r3, r3, #3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f003 030f 	and.w	r3, r3, #15
 8002d8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8002d90:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d017      	beq.n	8002dc8 <VL53L0X_get_pal_range_status+0x98>
 8002d98:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002d9c:	2b05      	cmp	r3, #5
 8002d9e:	d013      	beq.n	8002dc8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8002da0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002da4:	2b07      	cmp	r3, #7
 8002da6:	d00f      	beq.n	8002dc8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8002da8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d00b      	beq.n	8002dc8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8002db0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002db4:	2b0d      	cmp	r3, #13
 8002db6:	d007      	beq.n	8002dc8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8002db8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002dbc:	2b0e      	cmp	r3, #14
 8002dbe:	d003      	beq.n	8002dc8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8002dc0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002dc4:	2b0f      	cmp	r3, #15
 8002dc6:	d103      	bne.n	8002dd0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002dce:	e002      	b.n	8002dd6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8002dd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8002dde:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8002de2:	461a      	mov	r2, r3
 8002de4:	2100      	movs	r1, #0
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7fe fbb0 	bl	800154c <VL53L0X_GetLimitCheckEnable>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8002df2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d03c      	beq.n	8002e74 <VL53L0X_get_pal_range_status+0x144>
 8002dfa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d138      	bne.n	8002e74 <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8002e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e06:	461a      	mov	r2, r3
 8002e08:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f7ff fd62 	bl	80028d4 <VL53L0X_calc_sigma_estimate>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 8002e16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10a      	bne.n	8002e34 <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 8002e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f107 0210 	add.w	r2, r7, #16
 8002e26:	4619      	mov	r1, r3
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f7ff fca8 	bl	800277e <VL53L0X_calc_dmax>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8002e34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d103      	bne.n	8002e44 <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e42:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8002e44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d113      	bne.n	8002e74 <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8002e4c:	f107 0320 	add.w	r3, r7, #32
 8002e50:	461a      	mov	r2, r3
 8002e52:	2100      	movs	r1, #0
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7fe fb9d 	bl	8001594 <VL53L0X_GetLimitCheckValue>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d006      	beq.n	8002e74 <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d902      	bls.n	8002e74 <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8002e74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8002e7c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8002e80:	461a      	mov	r2, r3
 8002e82:	2102      	movs	r1, #2
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f7fe fb61 	bl	800154c <VL53L0X_GetLimitCheckEnable>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8002e90:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d044      	beq.n	8002f22 <VL53L0X_get_pal_range_status+0x1f2>
 8002e98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d140      	bne.n	8002f22 <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8002ea0:	f107 031c 	add.w	r3, r7, #28
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2102      	movs	r1, #2
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7fe fb73 	bl	8001594 <VL53L0X_GetLimitCheckValue>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8002eb4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d107      	bne.n	8002ecc <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	21ff      	movs	r1, #255	; 0xff
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f9b5 	bl	8003230 <VL53L0X_WrByte>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8002ecc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 8002ed4:	f107 0316 	add.w	r3, r7, #22
 8002ed8:	461a      	mov	r2, r3
 8002eda:	21b6      	movs	r1, #182	; 0xb6
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f9f5 	bl	80032cc <VL53L0X_RdWord>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8002ee8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	21ff      	movs	r1, #255	; 0xff
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f000 f99b 	bl	8003230 <VL53L0X_WrByte>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8002f00:	8afb      	ldrh	r3, [r7, #22]
 8002f02:	025b      	lsls	r3, r3, #9
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f0a:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d006      	beq.n	8002f22 <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8002f14:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8002f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d902      	bls.n	8002f22 <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8002f22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8002f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f2e:	461a      	mov	r2, r3
 8002f30:	2103      	movs	r1, #3
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f7fe fb0a 	bl	800154c <VL53L0X_GetLimitCheckEnable>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8002f3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d023      	beq.n	8002f8e <VL53L0X_get_pal_range_status+0x25e>
 8002f46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11f      	bne.n	8002f8e <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8002f4e:	893b      	ldrh	r3, [r7, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d102      	bne.n	8002f5a <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	637b      	str	r3, [r7, #52]	; 0x34
 8002f58:	e005      	b.n	8002f66 <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	021a      	lsls	r2, r3, #8
 8002f5e:	893b      	ldrh	r3, [r7, #8]
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8002f66:	f107 0318 	add.w	r3, r7, #24
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2103      	movs	r1, #3
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f7fe fb10 	bl	8001594 <VL53L0X_GetLimitCheckValue>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8002f80:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8002f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d202      	bcs.n	8002f8e <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002f8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d14a      	bne.n	800302c <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 8002f96:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d103      	bne.n	8002fa6 <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 8002f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa0:	22ff      	movs	r2, #255	; 0xff
 8002fa2:	701a      	strb	r2, [r3, #0]
 8002fa4:	e042      	b.n	800302c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 8002fa6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d007      	beq.n	8002fbe <VL53L0X_get_pal_range_status+0x28e>
 8002fae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d003      	beq.n	8002fbe <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 8002fb6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d103      	bne.n	8002fc6 <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8002fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc0:	2205      	movs	r2, #5
 8002fc2:	701a      	strb	r2, [r3, #0]
 8002fc4:	e032      	b.n	800302c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 8002fc6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fca:	2b06      	cmp	r3, #6
 8002fcc:	d003      	beq.n	8002fd6 <VL53L0X_get_pal_range_status+0x2a6>
 8002fce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fd2:	2b09      	cmp	r3, #9
 8002fd4:	d103      	bne.n	8002fde <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8002fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd8:	2204      	movs	r2, #4
 8002fda:	701a      	strb	r2, [r3, #0]
 8002fdc:	e026      	b.n	800302c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 8002fde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d007      	beq.n	8002ff6 <VL53L0X_get_pal_range_status+0x2c6>
 8002fe6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002fea:	2b0a      	cmp	r3, #10
 8002fec:	d003      	beq.n	8002ff6 <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 8002fee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d103      	bne.n	8002ffe <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8002ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff8:	2203      	movs	r2, #3
 8002ffa:	701a      	strb	r2, [r3, #0]
 8002ffc:	e016      	b.n	800302c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 8002ffe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003002:	2b04      	cmp	r3, #4
 8003004:	d003      	beq.n	800300e <VL53L0X_get_pal_range_status+0x2de>
 8003006:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800300a:	2b01      	cmp	r3, #1
 800300c:	d103      	bne.n	8003016 <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800300e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003010:	2202      	movs	r2, #2
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	e00a      	b.n	800302c <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 8003016:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800301a:	2b01      	cmp	r3, #1
 800301c:	d103      	bne.n	8003026 <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800301e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]
 8003024:	e002      	b.n	800302c <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800302c:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8003030:	461a      	mov	r2, r3
 8003032:	2101      	movs	r1, #1
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f7fe fa89 	bl	800154c <VL53L0X_GetLimitCheckEnable>
 800303a:	4603      	mov	r3, r0
 800303c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8003040:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003044:	2b00      	cmp	r3, #0
 8003046:	d14f      	bne.n	80030e8 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8003048:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <VL53L0X_get_pal_range_status+0x328>
 8003050:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003054:	2b01      	cmp	r3, #1
 8003056:	d103      	bne.n	8003060 <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 8003058:	2301      	movs	r3, #1
 800305a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800305e:	e002      	b.n	8003066 <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800306c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8003070:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003074:	2b04      	cmp	r3, #4
 8003076:	d003      	beq.n	8003080 <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8003078:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800307c:	2b00      	cmp	r3, #0
 800307e:	d103      	bne.n	8003088 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 8003080:	2301      	movs	r3, #1
 8003082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003086:	e002      	b.n	800308e <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8003094:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8003098:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <VL53L0X_get_pal_range_status+0x378>
 80030a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d103      	bne.n	80030b0 <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80030ae:	e002      	b.n	80030b6 <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80030bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80030c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <VL53L0X_get_pal_range_status+0x3a0>
 80030c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d103      	bne.n	80030d8 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80030d6:	e002      	b.n	80030de <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80030e4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80030e8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3740      	adds	r7, #64	; 0x40
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	330a      	adds	r3, #10
 8003104:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8003112:	b299      	uxth	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	b29a      	uxth	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	f000 fee8 	bl	8003ef4 <HAL_I2C_Master_Transmit>
 8003124:	4603      	mov	r3, r0
 8003126:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8003128:	693b      	ldr	r3, [r7, #16]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8003132:	b580      	push	{r7, lr}
 8003134:	b088      	sub	sp, #32
 8003136:	af02      	add	r7, sp, #8
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	330a      	adds	r3, #10
 8003142:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	b2db      	uxtb	r3, r3
 8003156:	b299      	uxth	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	b29a      	uxth	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	4613      	mov	r3, r2
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	f000 ffc4 	bl	80040f0 <HAL_I2C_Master_Receive>
 8003168:	4603      	mov	r3, r0
 800316a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800316c:	693b      	ldr	r3, [r7, #16]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	460b      	mov	r3, r1
 8003186:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003188:	2300      	movs	r3, #0
 800318a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b3f      	cmp	r3, #63	; 0x3f
 8003190:	d902      	bls.n	8003198 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8003192:	f06f 0303 	mvn.w	r3, #3
 8003196:	e016      	b.n	80031c6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8003198:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <VL53L0X_WriteMulti+0x58>)
 800319a:	7afb      	ldrb	r3, [r7, #11]
 800319c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	480c      	ldr	r0, [pc, #48]	; (80031d4 <VL53L0X_WriteMulti+0x5c>)
 80031a4:	f002 ffd6 	bl	8006154 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	3301      	adds	r3, #1
 80031ac:	461a      	mov	r2, r3
 80031ae:	4908      	ldr	r1, [pc, #32]	; (80031d0 <VL53L0X_WriteMulti+0x58>)
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f7ff ff9f 	bl	80030f4 <_I2CWrite>
 80031b6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80031be:	23ec      	movs	r3, #236	; 0xec
 80031c0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80031c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000f94 	.word	0x20000f94
 80031d4:	20000f95 	.word	0x20000f95

080031d8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	460b      	mov	r3, r1
 80031e6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80031ec:	f107 030b 	add.w	r3, r7, #11
 80031f0:	2201      	movs	r2, #1
 80031f2:	4619      	mov	r1, r3
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7ff ff7d 	bl	80030f4 <_I2CWrite>
 80031fa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003202:	23ec      	movs	r3, #236	; 0xec
 8003204:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003206:	e00c      	b.n	8003222 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f7ff ff90 	bl	8003132 <_I2CRead>
 8003212:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800321a:	23ec      	movs	r3, #236	; 0xec
 800321c:	75fb      	strb	r3, [r7, #23]
 800321e:	e000      	b.n	8003222 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8003220:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8003222:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <VL53L0X_WrByte>:
    return Status;
}



VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	70fb      	strb	r3, [r7, #3]
 800323c:	4613      	mov	r3, r2
 800323e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003240:	2300      	movs	r3, #0
 8003242:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8003244:	4a0b      	ldr	r2, [pc, #44]	; (8003274 <VL53L0X_WrByte+0x44>)
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800324a:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <VL53L0X_WrByte+0x44>)
 800324c:	78bb      	ldrb	r3, [r7, #2]
 800324e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8003250:	2202      	movs	r2, #2
 8003252:	4908      	ldr	r1, [pc, #32]	; (8003274 <VL53L0X_WrByte+0x44>)
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff4d 	bl	80030f4 <_I2CWrite>
 800325a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003262:	23ec      	movs	r3, #236	; 0xec
 8003264:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8003266:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000f94 	.word	0x20000f94

08003278 <VL53L0X_RdByte>:
    Status = VL53L0X_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	460b      	mov	r3, r1
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003286:	2300      	movs	r3, #0
 8003288:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800328a:	f107 030b 	add.w	r3, r7, #11
 800328e:	2201      	movs	r2, #1
 8003290:	4619      	mov	r1, r3
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f7ff ff2e 	bl	80030f4 <_I2CWrite>
 8003298:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80032a0:	23ec      	movs	r3, #236	; 0xec
 80032a2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80032a4:	e00c      	b.n	80032c0 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 80032a6:	2201      	movs	r2, #1
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff ff41 	bl	8003132 <_I2CRead>
 80032b0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d002      	beq.n	80032be <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80032b8:	23ec      	movs	r3, #236	; 0xec
 80032ba:	75fb      	strb	r3, [r7, #23]
 80032bc:	e000      	b.n	80032c0 <VL53L0X_RdByte+0x48>
    }
done:
 80032be:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80032c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <VL53L0X_RdWord>:

    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	460b      	mov	r3, r1
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032da:	2300      	movs	r3, #0
 80032dc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80032de:	f107 030b 	add.w	r3, r7, #11
 80032e2:	2201      	movs	r2, #1
 80032e4:	4619      	mov	r1, r3
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f7ff ff04 	bl	80030f4 <_I2CWrite>
 80032ec:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80032f4:	23ec      	movs	r3, #236	; 0xec
 80032f6:	75fb      	strb	r3, [r7, #23]
        goto done;
 80032f8:	e017      	b.n	800332a <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80032fa:	2202      	movs	r2, #2
 80032fc:	490e      	ldr	r1, [pc, #56]	; (8003338 <VL53L0X_RdWord+0x6c>)
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7ff ff17 	bl	8003132 <_I2CRead>
 8003304:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800330c:	23ec      	movs	r3, #236	; 0xec
 800330e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003310:	e00b      	b.n	800332a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <VL53L0X_RdWord+0x6c>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	b29a      	uxth	r2, r3
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <VL53L0X_RdWord+0x6c>)
 800331e:	785b      	ldrb	r3, [r3, #1]
 8003320:	b29b      	uxth	r3, r3
 8003322:	4413      	add	r3, r2
 8003324:	b29a      	uxth	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800332a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000f94 	.word	0x20000f94

0800333c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	460b      	mov	r3, r1
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800334a:	2300      	movs	r3, #0
 800334c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800334e:	f107 030b 	add.w	r3, r7, #11
 8003352:	2201      	movs	r2, #1
 8003354:	4619      	mov	r1, r3
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7ff fecc 	bl	80030f4 <_I2CWrite>
 800335c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003364:	23ec      	movs	r3, #236	; 0xec
 8003366:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003368:	e01b      	b.n	80033a2 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800336a:	2204      	movs	r2, #4
 800336c:	4910      	ldr	r1, [pc, #64]	; (80033b0 <VL53L0X_RdDWord+0x74>)
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7ff fedf 	bl	8003132 <_I2CRead>
 8003374:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800337c:	23ec      	movs	r3, #236	; 0xec
 800337e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003380:	e00f      	b.n	80033a2 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <VL53L0X_RdDWord+0x74>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	061a      	lsls	r2, r3, #24
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <VL53L0X_RdDWord+0x74>)
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	441a      	add	r2, r3
 8003390:	4b07      	ldr	r3, [pc, #28]	; (80033b0 <VL53L0X_RdDWord+0x74>)
 8003392:	789b      	ldrb	r3, [r3, #2]
 8003394:	021b      	lsls	r3, r3, #8
 8003396:	4413      	add	r3, r2
 8003398:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <VL53L0X_RdDWord+0x74>)
 800339a:	78d2      	ldrb	r2, [r2, #3]
 800339c:	441a      	add	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 80033a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000f94 	.word	0x20000f94

080033b4 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80033bc:	2300      	movs	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80033c0:	2002      	movs	r0, #2
 80033c2:	f000 f9b5 	bl	8003730 <HAL_Delay>
    return status;
 80033c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <InnerRing_control>:

#include "InnerRing.h"


int InnerRing_control(int hitDir)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
	// find direction oposite of hitDir
	int newDir = hitDir + 4;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3304      	adds	r3, #4
 80033de:	60fb      	str	r3, [r7, #12]
	if (newDir > 7)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b07      	cmp	r3, #7
 80033e4:	dd02      	ble.n	80033ec <InnerRing_control+0x1a>
		newDir -= 8;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3b08      	subs	r3, #8
 80033ea:	60fb      	str	r3, [r7, #12]

	// turn towards newDir
	// TODO: turn(newdir)

	// return to go to Loop 5 (inner ring)
	return 0;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <OuterRing_init>:



// TODO: give ptr to GPS data
int OuterRing_init(float *initalHitDis)
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
	// TODO: Capture our current position

	return 0;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <OuterRing_control>:


int OuterRing_control(int distances[], int reason, bool initalDetachHit, float initalHitDis)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	; 0x24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	4613      	mov	r3, r2
 800341c:	ed87 0a00 	vstr	s0, [r7]
 8003420:	71fb      	strb	r3, [r7, #7]
	// reason == 1 means object ahead
	if (reason == 1)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d132      	bne.n	800348e <OuterRing_control+0x7e>
	{
		// turn to first open position, clockwise
		int direction;
		int backup = distances[0];	// highest valued direction
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < AMOUNT_IRS; i++)
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	e01c      	b.n	800346e <OuterRing_control+0x5e>
		{
			// if greater than outer range then its open
			if (distances[i] >= RANGE_OUTER)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8003442:	dd02      	ble.n	800344a <OuterRing_control+0x3a>
			{
				direction = i;
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	617b      	str	r3, [r7, #20]
				break;
 8003448:	e014      	b.n	8003474 <OuterRing_control+0x64>
			}

			// keep tack of farthest reading
			if (distances[i] > backup)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	4413      	add	r3, r2
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	429a      	cmp	r2, r3
 8003458:	da01      	bge.n	800345e <OuterRing_control+0x4e>
				backup = i;
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	61fb      	str	r3, [r7, #28]

			// if we didnt find anything just settle for backup
			// this really shoulnt happen
			// TODO: consider printf debug here
			if (i == AMOUNT_IRS - 1)
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b07      	cmp	r3, #7
 8003462:	d101      	bne.n	8003468 <OuterRing_control+0x58>
				direction = backup;
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < AMOUNT_IRS; i++)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	3301      	adds	r3, #1
 800346c:	61bb      	str	r3, [r7, #24]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b07      	cmp	r3, #7
 8003472:	dddf      	ble.n	8003434 <OuterRing_control+0x24>

		// turn to choosen direction
		//TODO: turn(direction)

		// update initalDetachHit
		if (distances[SENSOR_DETACH] < RANGE_OUTER)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	3314      	adds	r3, #20
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800347e:	dc02      	bgt.n	8003486 <OuterRing_control+0x76>
			initalDetachHit = true;
 8003480:	2301      	movs	r3, #1
 8003482:	71fb      	strb	r3, [r7, #7]
 8003484:	e001      	b.n	800348a <OuterRing_control+0x7a>
		else
			initalDetachHit = false;
 8003486:	2300      	movs	r3, #0
 8003488:	71fb      	strb	r3, [r7, #7]

		// return to Loop 3
		return 0;
 800348a:	2300      	movs	r3, #0
 800348c:	e010      	b.n	80034b0 <OuterRing_control+0xa0>
	}
	else if (reason == 2)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d10c      	bne.n	80034ae <OuterRing_control+0x9e>

		// turn to detach + 1
		// TODO: turn(detach + 1 direction)

		// update initalDetachHit
		if (distances[SENSOR_DETACH] < RANGE_OUTER)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	3314      	adds	r3, #20
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800349e:	dc02      	bgt.n	80034a6 <OuterRing_control+0x96>
			initalDetachHit = true;
 80034a0:	2301      	movs	r3, #1
 80034a2:	71fb      	strb	r3, [r7, #7]
 80034a4:	e001      	b.n	80034aa <OuterRing_control+0x9a>
		else
			initalDetachHit = false;
 80034a6:	2300      	movs	r3, #0
 80034a8:	71fb      	strb	r3, [r7, #7]

		// return to Loop 3
		return 0;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e000      	b.n	80034b0 <OuterRing_control+0xa0>
	}
	else
	{
		// do nothing
	}
	return 0;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3724      	adds	r7, #36	; 0x24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <Brett_VL53L0X_StartMultiSensing>:

// vars

//functions
VL53L0X_Error Brett_VL53L0X_StartMultiSensing(VL53L0X_DEV Dev)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]

	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80034c8:	2100      	movs	r1, #0
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f7fd feae 	bl	800122c <VL53L0X_SetDeviceMode>
 80034d0:	4603      	mov	r3, r0
 80034d2:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80034d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d104      	bne.n	80034e6 <Brett_VL53L0X_StartMultiSensing+0x2a>
		Status = VL53L0X_StartMeasurement(Dev);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7fe fa0b 	bl	80018f8 <VL53L0X_StartMeasurement>
 80034e2:	4603      	mov	r3, r0
 80034e4:	73fb      	strb	r3, [r7, #15]

	return Status;
 80034e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <Brett_VL53L0X_FinishMultiSensing>:

VL53L0X_Error Brett_VL53L0X_FinishMultiSensing(VL53L0X_DEV Dev,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;


	// make sure sensor is done
	if (Status == VL53L0X_ERROR_NONE)
 8003500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d104      	bne.n	8003512 <Brett_VL53L0X_FinishMultiSensing+0x20>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7fe fcf2 	bl	8001ef2 <VL53L0X_measurement_poll_for_completion>
 800350e:	4603      	mov	r3, r0
 8003510:	73fb      	strb	r3, [r7, #15]

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003512:	f107 030e 	add.w	r3, r7, #14
 8003516:	4619      	mov	r1, r3
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7fd feb3 	bl	8001284 <VL53L0X_GetDeviceMode>
 800351e:	4603      	mov	r3, r0
 8003520:	73fb      	strb	r3, [r7, #15]

	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d106      	bne.n	8003538 <Brett_VL53L0X_FinishMultiSensing+0x46>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800352a:	7bbb      	ldrb	r3, [r7, #14]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d103      	bne.n	8003538 <Brett_VL53L0X_FinishMultiSensing+0x46>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2203      	movs	r2, #3
 8003534:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e

	if (Status == VL53L0X_ERROR_NONE)
 8003538:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d105      	bne.n	800354c <Brett_VL53L0X_FinishMultiSensing+0x5a>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8003540:	6839      	ldr	r1, [r7, #0]
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f7fe fada 	bl	8001afc <VL53L0X_GetRangingMeasurementData>
 8003548:	4603      	mov	r3, r0
 800354a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800354c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d105      	bne.n	8003560 <Brett_VL53L0X_FinishMultiSensing+0x6e>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003554:	2100      	movs	r1, #0
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fe fc2a 	bl	8001db0 <VL53L0X_ClearInterruptMask>
 800355c:	4603      	mov	r3, r0
 800355e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8003560:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <Brett_IR_StartMulti>:

int Brett_IR_StartMulti(VL53L0X_Dev_t devs[], int distances[], int howManyDevs)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b090      	sub	sp, #64	; 0x40
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
	int bretts_status = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800357c:	2300      	movs	r3, #0
 800357e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53L0_DEV Dev;

	// first start each dev measuring
	for (int i = 0; i < howManyDevs; i++)
 8003582:	2300      	movs	r3, #0
 8003584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003586:	e020      	b.n	80035ca <Brett_IR_StartMulti+0x5e>
	{
		// set point to a dev
		Dev = &devs[i];
 8003588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4413      	add	r3, r2
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c

		// start sensing
		Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8003598:	2100      	movs	r1, #0
 800359a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800359c:	f7fd fe46 	bl	800122c <VL53L0X_SetDeviceMode>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		Status = Brett_VL53L0X_StartMultiSensing(Dev);
 80035a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035a8:	f7ff ff88 	bl	80034bc <Brett_VL53L0X_StartMultiSensing>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		// return if error happened
		if (Status != VL53L0X_ERROR_NONE)
 80035b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <Brett_IR_StartMulti+0x58>
			return bretts_status = -1;
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
 80035be:	637b      	str	r3, [r7, #52]	; 0x34
 80035c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c2:	e03e      	b.n	8003642 <Brett_IR_StartMulti+0xd6>
	for (int i = 0; i < howManyDevs; i++)
 80035c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035c6:	3301      	adds	r3, #1
 80035c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	dbda      	blt.n	8003588 <Brett_IR_StartMulti+0x1c>
	}

	// finally wait for each dev to finish, then store data received
	for (int i = 0; i < howManyDevs; i++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80035d6:	e02f      	b.n	8003638 <Brett_IR_StartMulti+0xcc>
	{
		// data struct IRs use
		VL53L0X_RangingMeasurementData_t RangingMeasurementData;

		// point to a dev
		Dev = &devs[i];
 80035d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035da:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4413      	add	r3, r2
 80035e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		// get data from sensor
		Status = Brett_VL53L0X_FinishMultiSensing(Dev, &RangingMeasurementData);
 80035e8:	f107 0310 	add.w	r3, r7, #16
 80035ec:	4619      	mov	r1, r3
 80035ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035f0:	f7ff ff7f 	bl	80034f2 <Brett_VL53L0X_FinishMultiSensing>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		// if range status isnt 0 then assume max distance
		if (RangingMeasurementData.RangeStatus != 0)
 80035fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <Brett_IR_StartMulti+0xa6>
			distances[i] = 8100;
 8003602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4413      	add	r3, r2
 800360a:	f641 72a4 	movw	r2, #8100	; 0x1fa4
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e006      	b.n	8003620 <Brett_IR_StartMulti+0xb4>
		else
			distances[i] = RangingMeasurementData.RangeMilliMeter;
 8003612:	8b39      	ldrh	r1, [r7, #24]
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	4413      	add	r3, r2
 800361c:	460a      	mov	r2, r1
 800361e:	601a      	str	r2, [r3, #0]

		// return if error happened
		if (Status != VL53L0X_ERROR_NONE)
 8003620:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003624:	2b00      	cmp	r3, #0
 8003626:	d004      	beq.n	8003632 <Brett_IR_StartMulti+0xc6>
			return bretts_status = -2;
 8003628:	f06f 0301 	mvn.w	r3, #1
 800362c:	637b      	str	r3, [r7, #52]	; 0x34
 800362e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003630:	e007      	b.n	8003642 <Brett_IR_StartMulti+0xd6>
	for (int i = 0; i < howManyDevs; i++)
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	3301      	adds	r3, #1
 8003636:	63bb      	str	r3, [r7, #56]	; 0x38
 8003638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	429a      	cmp	r2, r3
 800363e:	dbcb      	blt.n	80035d8 <Brett_IR_StartMulti+0x6c>
	}

	return bretts_status;
 8003640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003642:	4618      	mov	r0, r3
 8003644:	3740      	adds	r7, #64	; 0x40
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003650:	4b0e      	ldr	r3, [pc, #56]	; (800368c <HAL_Init+0x40>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a0d      	ldr	r2, [pc, #52]	; (800368c <HAL_Init+0x40>)
 8003656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800365a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_Init+0x40>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0a      	ldr	r2, [pc, #40]	; (800368c <HAL_Init+0x40>)
 8003662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003666:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003668:	4b08      	ldr	r3, [pc, #32]	; (800368c <HAL_Init+0x40>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a07      	ldr	r2, [pc, #28]	; (800368c <HAL_Init+0x40>)
 800366e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003672:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003674:	2003      	movs	r0, #3
 8003676:	f000 f931 	bl	80038dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800367a:	2000      	movs	r0, #0
 800367c:	f000 f808 	bl	8003690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003680:	f7fd fb1c 	bl	8000cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023c00 	.word	0x40023c00

08003690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_InitTick+0x54>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <HAL_InitTick+0x58>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	4619      	mov	r1, r3
 80036a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f93b 	bl	800392a <HAL_SYSTICK_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e00e      	b.n	80036dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b0f      	cmp	r3, #15
 80036c2:	d80a      	bhi.n	80036da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036c4:	2200      	movs	r2, #0
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	f04f 30ff 	mov.w	r0, #4294967295
 80036cc:	f000 f911 	bl	80038f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036d0:	4a06      	ldr	r2, [pc, #24]	; (80036ec <HAL_InitTick+0x5c>)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000004 	.word	0x20000004
 80036e8:	200001c4 	.word	0x200001c4
 80036ec:	200001c0 	.word	0x200001c0

080036f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036f4:	4b06      	ldr	r3, [pc, #24]	; (8003710 <HAL_IncTick+0x20>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_IncTick+0x24>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4413      	add	r3, r2
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <HAL_IncTick+0x24>)
 8003702:	6013      	str	r3, [r2, #0]
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	200001c4 	.word	0x200001c4
 8003714:	20000fd4 	.word	0x20000fd4

08003718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return uwTick;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_GetTick+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000fd4 	.word	0x20000fd4

08003730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff ffee 	bl	8003718 <HAL_GetTick>
 800373c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d005      	beq.n	8003756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <HAL_Delay+0x44>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003756:	bf00      	nop
 8003758:	f7ff ffde 	bl	8003718 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	429a      	cmp	r2, r3
 8003766:	d8f7      	bhi.n	8003758 <HAL_Delay+0x28>
  {
  }
}
 8003768:	bf00      	nop
 800376a:	bf00      	nop
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	200001c4 	.word	0x200001c4

08003778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <__NVIC_SetPriorityGrouping+0x44>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003794:	4013      	ands	r3, r2
 8003796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037aa:	4a04      	ldr	r2, [pc, #16]	; (80037bc <__NVIC_SetPriorityGrouping+0x44>)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	60d3      	str	r3, [r2, #12]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037c4:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <__NVIC_GetPriorityGrouping+0x18>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	0a1b      	lsrs	r3, r3, #8
 80037ca:	f003 0307 	and.w	r3, r3, #7
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	6039      	str	r1, [r7, #0]
 80037e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	db0a      	blt.n	8003806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	490c      	ldr	r1, [pc, #48]	; (8003828 <__NVIC_SetPriority+0x4c>)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	0112      	lsls	r2, r2, #4
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	440b      	add	r3, r1
 8003800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003804:	e00a      	b.n	800381c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4908      	ldr	r1, [pc, #32]	; (800382c <__NVIC_SetPriority+0x50>)
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	3b04      	subs	r3, #4
 8003814:	0112      	lsls	r2, r2, #4
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	440b      	add	r3, r1
 800381a:	761a      	strb	r2, [r3, #24]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	e000e100 	.word	0xe000e100
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0307 	and.w	r3, r3, #7
 8003842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f1c3 0307 	rsb	r3, r3, #7
 800384a:	2b04      	cmp	r3, #4
 800384c:	bf28      	it	cs
 800384e:	2304      	movcs	r3, #4
 8003850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3304      	adds	r3, #4
 8003856:	2b06      	cmp	r3, #6
 8003858:	d902      	bls.n	8003860 <NVIC_EncodePriority+0x30>
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3b03      	subs	r3, #3
 800385e:	e000      	b.n	8003862 <NVIC_EncodePriority+0x32>
 8003860:	2300      	movs	r3, #0
 8003862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	f04f 32ff 	mov.w	r2, #4294967295
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43da      	mvns	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	401a      	ands	r2, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003878:	f04f 31ff 	mov.w	r1, #4294967295
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	fa01 f303 	lsl.w	r3, r1, r3
 8003882:	43d9      	mvns	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003888:	4313      	orrs	r3, r2
         );
}
 800388a:	4618      	mov	r0, r3
 800388c:	3724      	adds	r7, #36	; 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038a8:	d301      	bcc.n	80038ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038aa:	2301      	movs	r3, #1
 80038ac:	e00f      	b.n	80038ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ae:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <SysTick_Config+0x40>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038b6:	210f      	movs	r1, #15
 80038b8:	f04f 30ff 	mov.w	r0, #4294967295
 80038bc:	f7ff ff8e 	bl	80037dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <SysTick_Config+0x40>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038c6:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <SysTick_Config+0x40>)
 80038c8:	2207      	movs	r2, #7
 80038ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	e000e010 	.word	0xe000e010

080038dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff47 	bl	8003778 <__NVIC_SetPriorityGrouping>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	4603      	mov	r3, r0
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003900:	2300      	movs	r3, #0
 8003902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003904:	f7ff ff5c 	bl	80037c0 <__NVIC_GetPriorityGrouping>
 8003908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	6978      	ldr	r0, [r7, #20]
 8003910:	f7ff ff8e 	bl	8003830 <NVIC_EncodePriority>
 8003914:	4602      	mov	r2, r0
 8003916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff5d 	bl	80037dc <__NVIC_SetPriority>
}
 8003922:	bf00      	nop
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ffb0 	bl	8003898 <SysTick_Config>
 8003938:	4603      	mov	r3, r0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003944:	b480      	push	{r7}
 8003946:	b089      	sub	sp, #36	; 0x24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003952:	2300      	movs	r3, #0
 8003954:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800395a:	2300      	movs	r3, #0
 800395c:	61fb      	str	r3, [r7, #28]
 800395e:	e165      	b.n	8003c2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003960:	2201      	movs	r2, #1
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	429a      	cmp	r2, r3
 800397a:	f040 8154 	bne.w	8003c26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b01      	cmp	r3, #1
 8003988:	d005      	beq.n	8003996 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003992:	2b02      	cmp	r3, #2
 8003994:	d130      	bne.n	80039f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	2203      	movs	r2, #3
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039cc:	2201      	movs	r2, #1
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	4013      	ands	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 0201 	and.w	r2, r3, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d017      	beq.n	8003a34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	2203      	movs	r2, #3
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d123      	bne.n	8003a88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	08da      	lsrs	r2, r3, #3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3208      	adds	r2, #8
 8003a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	220f      	movs	r2, #15
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4013      	ands	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	691a      	ldr	r2, [r3, #16]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f003 0307 	and.w	r3, r3, #7
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	08da      	lsrs	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	3208      	adds	r2, #8
 8003a82:	69b9      	ldr	r1, [r7, #24]
 8003a84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	2203      	movs	r2, #3
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0203 	and.w	r2, r3, #3
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80ae 	beq.w	8003c26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	4b5d      	ldr	r3, [pc, #372]	; (8003c44 <HAL_GPIO_Init+0x300>)
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	4a5c      	ldr	r2, [pc, #368]	; (8003c44 <HAL_GPIO_Init+0x300>)
 8003ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8003ada:	4b5a      	ldr	r3, [pc, #360]	; (8003c44 <HAL_GPIO_Init+0x300>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ae6:	4a58      	ldr	r2, [pc, #352]	; (8003c48 <HAL_GPIO_Init+0x304>)
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	089b      	lsrs	r3, r3, #2
 8003aec:	3302      	adds	r3, #2
 8003aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	220f      	movs	r2, #15
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43db      	mvns	r3, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4013      	ands	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a4f      	ldr	r2, [pc, #316]	; (8003c4c <HAL_GPIO_Init+0x308>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d025      	beq.n	8003b5e <HAL_GPIO_Init+0x21a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a4e      	ldr	r2, [pc, #312]	; (8003c50 <HAL_GPIO_Init+0x30c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01f      	beq.n	8003b5a <HAL_GPIO_Init+0x216>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a4d      	ldr	r2, [pc, #308]	; (8003c54 <HAL_GPIO_Init+0x310>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d019      	beq.n	8003b56 <HAL_GPIO_Init+0x212>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a4c      	ldr	r2, [pc, #304]	; (8003c58 <HAL_GPIO_Init+0x314>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <HAL_GPIO_Init+0x20e>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a4b      	ldr	r2, [pc, #300]	; (8003c5c <HAL_GPIO_Init+0x318>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00d      	beq.n	8003b4e <HAL_GPIO_Init+0x20a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4a      	ldr	r2, [pc, #296]	; (8003c60 <HAL_GPIO_Init+0x31c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d007      	beq.n	8003b4a <HAL_GPIO_Init+0x206>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a49      	ldr	r2, [pc, #292]	; (8003c64 <HAL_GPIO_Init+0x320>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_GPIO_Init+0x202>
 8003b42:	2306      	movs	r3, #6
 8003b44:	e00c      	b.n	8003b60 <HAL_GPIO_Init+0x21c>
 8003b46:	2307      	movs	r3, #7
 8003b48:	e00a      	b.n	8003b60 <HAL_GPIO_Init+0x21c>
 8003b4a:	2305      	movs	r3, #5
 8003b4c:	e008      	b.n	8003b60 <HAL_GPIO_Init+0x21c>
 8003b4e:	2304      	movs	r3, #4
 8003b50:	e006      	b.n	8003b60 <HAL_GPIO_Init+0x21c>
 8003b52:	2303      	movs	r3, #3
 8003b54:	e004      	b.n	8003b60 <HAL_GPIO_Init+0x21c>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e002      	b.n	8003b60 <HAL_GPIO_Init+0x21c>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_GPIO_Init+0x21c>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	f002 0203 	and.w	r2, r2, #3
 8003b66:	0092      	lsls	r2, r2, #2
 8003b68:	4093      	lsls	r3, r2
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b70:	4935      	ldr	r1, [pc, #212]	; (8003c48 <HAL_GPIO_Init+0x304>)
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	089b      	lsrs	r3, r3, #2
 8003b76:	3302      	adds	r3, #2
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b7e:	4b3a      	ldr	r3, [pc, #232]	; (8003c68 <HAL_GPIO_Init+0x324>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ba2:	4a31      	ldr	r2, [pc, #196]	; (8003c68 <HAL_GPIO_Init+0x324>)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ba8:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <HAL_GPIO_Init+0x324>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bcc:	4a26      	ldr	r2, [pc, #152]	; (8003c68 <HAL_GPIO_Init+0x324>)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bd2:	4b25      	ldr	r3, [pc, #148]	; (8003c68 <HAL_GPIO_Init+0x324>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bf6:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <HAL_GPIO_Init+0x324>)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bfc:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <HAL_GPIO_Init+0x324>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c20:	4a11      	ldr	r2, [pc, #68]	; (8003c68 <HAL_GPIO_Init+0x324>)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	2b0f      	cmp	r3, #15
 8003c30:	f67f ae96 	bls.w	8003960 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	3724      	adds	r7, #36	; 0x24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40013800 	.word	0x40013800
 8003c4c:	40020000 	.word	0x40020000
 8003c50:	40020400 	.word	0x40020400
 8003c54:	40020800 	.word	0x40020800
 8003c58:	40020c00 	.word	0x40020c00
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40021400 	.word	0x40021400
 8003c64:	40021800 	.word	0x40021800
 8003c68:	40013c00 	.word	0x40013c00

08003c6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e12b      	b.n	8003ed6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fd f83a 	bl	8000d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2224      	movs	r2, #36	; 0x24
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0201 	bic.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f001 f854 	bl	8004d7c <HAL_RCC_GetPCLK1Freq>
 8003cd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4a81      	ldr	r2, [pc, #516]	; (8003ee0 <HAL_I2C_Init+0x274>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d807      	bhi.n	8003cf0 <HAL_I2C_Init+0x84>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	4a80      	ldr	r2, [pc, #512]	; (8003ee4 <HAL_I2C_Init+0x278>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	bf94      	ite	ls
 8003ce8:	2301      	movls	r3, #1
 8003cea:	2300      	movhi	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	e006      	b.n	8003cfe <HAL_I2C_Init+0x92>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4a7d      	ldr	r2, [pc, #500]	; (8003ee8 <HAL_I2C_Init+0x27c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	bf94      	ite	ls
 8003cf8:	2301      	movls	r3, #1
 8003cfa:	2300      	movhi	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0e7      	b.n	8003ed6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4a78      	ldr	r2, [pc, #480]	; (8003eec <HAL_I2C_Init+0x280>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	0c9b      	lsrs	r3, r3, #18
 8003d10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	4a6a      	ldr	r2, [pc, #424]	; (8003ee0 <HAL_I2C_Init+0x274>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d802      	bhi.n	8003d40 <HAL_I2C_Init+0xd4>
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	e009      	b.n	8003d54 <HAL_I2C_Init+0xe8>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	4a69      	ldr	r2, [pc, #420]	; (8003ef0 <HAL_I2C_Init+0x284>)
 8003d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d50:	099b      	lsrs	r3, r3, #6
 8003d52:	3301      	adds	r3, #1
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	495c      	ldr	r1, [pc, #368]	; (8003ee0 <HAL_I2C_Init+0x274>)
 8003d70:	428b      	cmp	r3, r1
 8003d72:	d819      	bhi.n	8003da8 <HAL_I2C_Init+0x13c>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	1e59      	subs	r1, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d82:	1c59      	adds	r1, r3, #1
 8003d84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d88:	400b      	ands	r3, r1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_I2C_Init+0x138>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1e59      	subs	r1, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da2:	e051      	b.n	8003e48 <HAL_I2C_Init+0x1dc>
 8003da4:	2304      	movs	r3, #4
 8003da6:	e04f      	b.n	8003e48 <HAL_I2C_Init+0x1dc>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d111      	bne.n	8003dd4 <HAL_I2C_Init+0x168>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1e58      	subs	r0, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	440b      	add	r3, r1
 8003dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e012      	b.n	8003dfa <HAL_I2C_Init+0x18e>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	1e58      	subs	r0, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6859      	ldr	r1, [r3, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	0099      	lsls	r1, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dea:	3301      	adds	r3, #1
 8003dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_I2C_Init+0x196>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e022      	b.n	8003e48 <HAL_I2C_Init+0x1dc>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10e      	bne.n	8003e28 <HAL_I2C_Init+0x1bc>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1e58      	subs	r0, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6859      	ldr	r1, [r3, #4]
 8003e12:	460b      	mov	r3, r1
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	440b      	add	r3, r1
 8003e18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e26:	e00f      	b.n	8003e48 <HAL_I2C_Init+0x1dc>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	1e58      	subs	r0, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6859      	ldr	r1, [r3, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	0099      	lsls	r1, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	6809      	ldr	r1, [r1, #0]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69da      	ldr	r2, [r3, #28]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6911      	ldr	r1, [r2, #16]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68d2      	ldr	r2, [r2, #12]
 8003e82:	4311      	orrs	r1, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	000186a0 	.word	0x000186a0
 8003ee4:	001e847f 	.word	0x001e847f
 8003ee8:	003d08ff 	.word	0x003d08ff
 8003eec:	431bde83 	.word	0x431bde83
 8003ef0:	10624dd3 	.word	0x10624dd3

08003ef4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b088      	sub	sp, #32
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	607a      	str	r2, [r7, #4]
 8003efe:	461a      	mov	r2, r3
 8003f00:	460b      	mov	r3, r1
 8003f02:	817b      	strh	r3, [r7, #10]
 8003f04:	4613      	mov	r3, r2
 8003f06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f08:	f7ff fc06 	bl	8003718 <HAL_GetTick>
 8003f0c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	f040 80e0 	bne.w	80040dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	2319      	movs	r3, #25
 8003f22:	2201      	movs	r2, #1
 8003f24:	4970      	ldr	r1, [pc, #448]	; (80040e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 fc58 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
 8003f34:	e0d3      	b.n	80040de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_I2C_Master_Transmit+0x50>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e0cc      	b.n	80040de <HAL_I2C_Master_Transmit+0x1ea>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d007      	beq.n	8003f6a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2221      	movs	r2, #33	; 0x21
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2210      	movs	r2, #16
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	893a      	ldrh	r2, [r7, #8]
 8003f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4a50      	ldr	r2, [pc, #320]	; (80040ec <HAL_I2C_Master_Transmit+0x1f8>)
 8003faa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fac:	8979      	ldrh	r1, [r7, #10]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	6a3a      	ldr	r2, [r7, #32]
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fac2 	bl	800453c <I2C_MasterRequestWrite>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e08d      	b.n	80040de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003fd8:	e066      	b.n	80040a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	6a39      	ldr	r1, [r7, #32]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 fcd2 	bl	8004988 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d107      	bne.n	8004002 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004000:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e06b      	b.n	80040de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	781a      	ldrb	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b04      	cmp	r3, #4
 8004042:	d11b      	bne.n	800407c <HAL_I2C_Master_Transmit+0x188>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004048:	2b00      	cmp	r3, #0
 800404a:	d017      	beq.n	800407c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	781a      	ldrb	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	6a39      	ldr	r1, [r7, #32]
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 fcc2 	bl	8004a0a <I2C_WaitOnBTFFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	2b04      	cmp	r3, #4
 8004092:	d107      	bne.n	80040a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e01a      	b.n	80040de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d194      	bne.n	8003fda <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	00100002 	.word	0x00100002
 80040ec:	ffff0000 	.word	0xffff0000

080040f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08c      	sub	sp, #48	; 0x30
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	461a      	mov	r2, r3
 80040fc:	460b      	mov	r3, r1
 80040fe:	817b      	strh	r3, [r7, #10]
 8004100:	4613      	mov	r3, r2
 8004102:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004104:	f7ff fb08 	bl	8003718 <HAL_GetTick>
 8004108:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b20      	cmp	r3, #32
 8004114:	f040 820b 	bne.w	800452e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	9300      	str	r3, [sp, #0]
 800411c:	2319      	movs	r3, #25
 800411e:	2201      	movs	r2, #1
 8004120:	497c      	ldr	r1, [pc, #496]	; (8004314 <HAL_I2C_Master_Receive+0x224>)
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 fb5a 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800412e:	2302      	movs	r3, #2
 8004130:	e1fe      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_I2C_Master_Receive+0x50>
 800413c:	2302      	movs	r3, #2
 800413e:	e1f7      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b01      	cmp	r3, #1
 8004154:	d007      	beq.n	8004166 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f042 0201 	orr.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004174:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2222      	movs	r2, #34	; 0x22
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2210      	movs	r2, #16
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	893a      	ldrh	r2, [r7, #8]
 8004196:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4a5c      	ldr	r2, [pc, #368]	; (8004318 <HAL_I2C_Master_Receive+0x228>)
 80041a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80041a8:	8979      	ldrh	r1, [r7, #10]
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 fa46 	bl	8004640 <I2C_MasterRequestRead>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e1b8      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d113      	bne.n	80041ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c6:	2300      	movs	r3, #0
 80041c8:	623b      	str	r3, [r7, #32]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	623b      	str	r3, [r7, #32]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	623b      	str	r3, [r7, #32]
 80041da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e18c      	b.n	8004508 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d11b      	bne.n	800422e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004204:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e16c      	b.n	8004508 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004232:	2b02      	cmp	r3, #2
 8004234:	d11b      	bne.n	800426e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004244:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004254:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	e14c      	b.n	8004508 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800427c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004294:	e138      	b.n	8004508 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429a:	2b03      	cmp	r3, #3
 800429c:	f200 80f1 	bhi.w	8004482 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d123      	bne.n	80042f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 fbed 	bl	8004a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e139      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042ee:	e10b      	b.n	8004508 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d14e      	bne.n	8004396 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	2200      	movs	r2, #0
 8004300:	4906      	ldr	r1, [pc, #24]	; (800431c <HAL_I2C_Master_Receive+0x22c>)
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 fa6a 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d008      	beq.n	8004320 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e10e      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
 8004312:	bf00      	nop
 8004314:	00100002 	.word	0x00100002
 8004318:	ffff0000 	.word	0xffff0000
 800431c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800432e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004394:	e0b8      	b.n	8004508 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	2200      	movs	r2, #0
 800439e:	4966      	ldr	r1, [pc, #408]	; (8004538 <HAL_I2C_Master_Receive+0x448>)
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fa1b 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0bf      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	2200      	movs	r2, #0
 80043fa:	494f      	ldr	r1, [pc, #316]	; (8004538 <HAL_I2C_Master_Receive+0x448>)
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 f9ed 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e091      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004444:	b29b      	uxth	r3, r3
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004480:	e042      	b.n	8004508 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004484:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f000 fb00 	bl	8004a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e04c      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d118      	bne.n	8004508 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	1c5a      	adds	r2, r3, #1
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450c:	2b00      	cmp	r3, #0
 800450e:	f47f aec2 	bne.w	8004296 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800452e:	2302      	movs	r3, #2
  }
}
 8004530:	4618      	mov	r0, r3
 8004532:	3728      	adds	r7, #40	; 0x28
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	00010004 	.word	0x00010004

0800453c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	460b      	mov	r3, r1
 800454a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d006      	beq.n	8004566 <I2C_MasterRequestWrite+0x2a>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d003      	beq.n	8004566 <I2C_MasterRequestWrite+0x2a>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004564:	d108      	bne.n	8004578 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e00b      	b.n	8004590 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	2b12      	cmp	r3, #18
 800457e:	d107      	bne.n	8004590 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800458e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 f91d 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00d      	beq.n	80045c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	d103      	bne.n	80045c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e035      	b.n	8004630 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045cc:	d108      	bne.n	80045e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ce:	897b      	ldrh	r3, [r7, #10]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045dc:	611a      	str	r2, [r3, #16]
 80045de:	e01b      	b.n	8004618 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045e0:	897b      	ldrh	r3, [r7, #10]
 80045e2:	11db      	asrs	r3, r3, #7
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f003 0306 	and.w	r3, r3, #6
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f063 030f 	orn	r3, r3, #15
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	490e      	ldr	r1, [pc, #56]	; (8004638 <I2C_MasterRequestWrite+0xfc>)
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f943 	bl	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e010      	b.n	8004630 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800460e:	897b      	ldrh	r3, [r7, #10]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4907      	ldr	r1, [pc, #28]	; (800463c <I2C_MasterRequestWrite+0x100>)
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 f933 	bl	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	00010008 	.word	0x00010008
 800463c:	00010002 	.word	0x00010002

08004640 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	460b      	mov	r3, r1
 800464e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004664:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d006      	beq.n	800467a <I2C_MasterRequestRead+0x3a>
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d003      	beq.n	800467a <I2C_MasterRequestRead+0x3a>
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004678:	d108      	bne.n	800468c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e00b      	b.n	80046a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	2b11      	cmp	r3, #17
 8004692:	d107      	bne.n	80046a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f893 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00d      	beq.n	80046d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ca:	d103      	bne.n	80046d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e079      	b.n	80047cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046e0:	d108      	bne.n	80046f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046e2:	897b      	ldrh	r3, [r7, #10]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	611a      	str	r2, [r3, #16]
 80046f2:	e05f      	b.n	80047b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046f4:	897b      	ldrh	r3, [r7, #10]
 80046f6:	11db      	asrs	r3, r3, #7
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f003 0306 	and.w	r3, r3, #6
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f063 030f 	orn	r3, r3, #15
 8004704:	b2da      	uxtb	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	4930      	ldr	r1, [pc, #192]	; (80047d4 <I2C_MasterRequestRead+0x194>)
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 f8b9 	bl	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e054      	b.n	80047cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004722:	897b      	ldrh	r3, [r7, #10]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4929      	ldr	r1, [pc, #164]	; (80047d8 <I2C_MasterRequestRead+0x198>)
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f8a9 	bl	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e044      	b.n	80047cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004766:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f831 	bl	80047dc <I2C_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00d      	beq.n	800479c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478e:	d103      	bne.n	8004798 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004796:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e017      	b.n	80047cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800479c:	897b      	ldrh	r3, [r7, #10]
 800479e:	11db      	asrs	r3, r3, #7
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f003 0306 	and.w	r3, r3, #6
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f063 030e 	orn	r3, r3, #14
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4907      	ldr	r1, [pc, #28]	; (80047d8 <I2C_MasterRequestRead+0x198>)
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f865 	bl	800488a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	00010008 	.word	0x00010008
 80047d8:	00010002 	.word	0x00010002

080047dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047ec:	e025      	b.n	800483a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d021      	beq.n	800483a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f6:	f7fe ff8f 	bl	8003718 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	429a      	cmp	r2, r3
 8004804:	d302      	bcc.n	800480c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d116      	bne.n	800483a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f043 0220 	orr.w	r2, r3, #32
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e023      	b.n	8004882 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	0c1b      	lsrs	r3, r3, #16
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d10d      	bne.n	8004860 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	43da      	mvns	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4013      	ands	r3, r2
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	bf0c      	ite	eq
 8004856:	2301      	moveq	r3, #1
 8004858:	2300      	movne	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	e00c      	b.n	800487a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	43da      	mvns	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf0c      	ite	eq
 8004872:	2301      	moveq	r3, #1
 8004874:	2300      	movne	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	429a      	cmp	r2, r3
 800487e:	d0b6      	beq.n	80047ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004898:	e051      	b.n	800493e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a8:	d123      	bne.n	80048f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f043 0204 	orr.w	r2, r3, #4
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e046      	b.n	8004980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f8:	d021      	beq.n	800493e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fa:	f7fe ff0d 	bl	8003718 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d302      	bcc.n	8004910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d116      	bne.n	800493e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492a:	f043 0220 	orr.w	r2, r3, #32
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e020      	b.n	8004980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	0c1b      	lsrs	r3, r3, #16
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d10c      	bne.n	8004962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	43da      	mvns	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4013      	ands	r3, r2
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	bf14      	ite	ne
 800495a:	2301      	movne	r3, #1
 800495c:	2300      	moveq	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	e00b      	b.n	800497a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	43da      	mvns	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	4013      	ands	r3, r2
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d18d      	bne.n	800489a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004994:	e02d      	b.n	80049f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f8ce 	bl	8004b38 <I2C_IsAcknowledgeFailed>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e02d      	b.n	8004a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ac:	d021      	beq.n	80049f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ae:	f7fe feb3 	bl	8003718 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d302      	bcc.n	80049c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d116      	bne.n	80049f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f043 0220 	orr.w	r2, r3, #32
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e007      	b.n	8004a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	2b80      	cmp	r3, #128	; 0x80
 80049fe:	d1ca      	bne.n	8004996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a16:	e02d      	b.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 f88d 	bl	8004b38 <I2C_IsAcknowledgeFailed>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e02d      	b.n	8004a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2e:	d021      	beq.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a30:	f7fe fe72 	bl	8003718 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d302      	bcc.n	8004a46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d116      	bne.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	f043 0220 	orr.w	r2, r3, #32
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e007      	b.n	8004a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d1ca      	bne.n	8004a18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a98:	e042      	b.n	8004b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d119      	bne.n	8004adc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0210 	mvn.w	r2, #16
 8004ab0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e029      	b.n	8004b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004adc:	f7fe fe1c 	bl	8003718 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d302      	bcc.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d116      	bne.n	8004b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0c:	f043 0220 	orr.w	r2, r3, #32
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e007      	b.n	8004b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2a:	2b40      	cmp	r3, #64	; 0x40
 8004b2c:	d1b5      	bne.n	8004a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3710      	adds	r7, #16
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4e:	d11b      	bne.n	8004b88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	f043 0204 	orr.w	r2, r3, #4
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e000      	b.n	8004b8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e0cc      	b.n	8004d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bac:	4b68      	ldr	r3, [pc, #416]	; (8004d50 <HAL_RCC_ClockConfig+0x1b8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 030f 	and.w	r3, r3, #15
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d90c      	bls.n	8004bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bba:	4b65      	ldr	r3, [pc, #404]	; (8004d50 <HAL_RCC_ClockConfig+0x1b8>)
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	b2d2      	uxtb	r2, r2
 8004bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc2:	4b63      	ldr	r3, [pc, #396]	; (8004d50 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e0b8      	b.n	8004d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d020      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bec:	4b59      	ldr	r3, [pc, #356]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	4a58      	ldr	r2, [pc, #352]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d005      	beq.n	8004c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c04:	4b53      	ldr	r3, [pc, #332]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	4a52      	ldr	r2, [pc, #328]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c10:	4b50      	ldr	r3, [pc, #320]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	494d      	ldr	r1, [pc, #308]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d044      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d107      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c36:	4b47      	ldr	r3, [pc, #284]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d119      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e07f      	b.n	8004d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d003      	beq.n	8004c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d107      	bne.n	8004c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c56:	4b3f      	ldr	r3, [pc, #252]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e06f      	b.n	8004d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c66:	4b3b      	ldr	r3, [pc, #236]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e067      	b.n	8004d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c76:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f023 0203 	bic.w	r2, r3, #3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4934      	ldr	r1, [pc, #208]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c88:	f7fe fd46 	bl	8003718 <HAL_GetTick>
 8004c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c90:	f7fe fd42 	bl	8003718 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e04f      	b.n	8004d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca6:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 020c 	and.w	r2, r3, #12
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d1eb      	bne.n	8004c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb8:	4b25      	ldr	r3, [pc, #148]	; (8004d50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d20c      	bcs.n	8004ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc6:	4b22      	ldr	r3, [pc, #136]	; (8004d50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cce:	4b20      	ldr	r3, [pc, #128]	; (8004d50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e032      	b.n	8004d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cec:	4b19      	ldr	r3, [pc, #100]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	4916      	ldr	r1, [pc, #88]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d009      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d0a:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	00db      	lsls	r3, r3, #3
 8004d18:	490e      	ldr	r1, [pc, #56]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d1e:	f000 f855 	bl	8004dcc <HAL_RCC_GetSysClockFreq>
 8004d22:	4602      	mov	r2, r0
 8004d24:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	091b      	lsrs	r3, r3, #4
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	490a      	ldr	r1, [pc, #40]	; (8004d58 <HAL_RCC_ClockConfig+0x1c0>)
 8004d30:	5ccb      	ldrb	r3, [r1, r3]
 8004d32:	fa22 f303 	lsr.w	r3, r2, r3
 8004d36:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <HAL_RCC_ClockConfig+0x1c4>)
 8004d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d3a:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <HAL_RCC_ClockConfig+0x1c8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7fe fca6 	bl	8003690 <HAL_InitTick>

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40023c00 	.word	0x40023c00
 8004d54:	40023800 	.word	0x40023800
 8004d58:	08006c48 	.word	0x08006c48
 8004d5c:	20000004 	.word	0x20000004
 8004d60:	200001c0 	.word	0x200001c0

08004d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d68:	4b03      	ldr	r3, [pc, #12]	; (8004d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000004 	.word	0x20000004

08004d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d80:	f7ff fff0 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	0a9b      	lsrs	r3, r3, #10
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	4903      	ldr	r1, [pc, #12]	; (8004da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d92:	5ccb      	ldrb	r3, [r1, r3]
 8004d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	08006c58 	.word	0x08006c58

08004da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004da8:	f7ff ffdc 	bl	8004d64 <HAL_RCC_GetHCLKFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	0b5b      	lsrs	r3, r3, #13
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	4903      	ldr	r1, [pc, #12]	; (8004dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dba:	5ccb      	ldrb	r3, [r1, r3]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	08006c58 	.word	0x08006c58

08004dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd0:	b088      	sub	sp, #32
 8004dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004de8:	4bce      	ldr	r3, [pc, #824]	; (8005124 <HAL_RCC_GetSysClockFreq+0x358>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 030c 	and.w	r3, r3, #12
 8004df0:	2b0c      	cmp	r3, #12
 8004df2:	f200 818d 	bhi.w	8005110 <HAL_RCC_GetSysClockFreq+0x344>
 8004df6:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <HAL_RCC_GetSysClockFreq+0x30>)
 8004df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08005111 	.word	0x08005111
 8004e04:	08005111 	.word	0x08005111
 8004e08:	08005111 	.word	0x08005111
 8004e0c:	08004e37 	.word	0x08004e37
 8004e10:	08005111 	.word	0x08005111
 8004e14:	08005111 	.word	0x08005111
 8004e18:	08005111 	.word	0x08005111
 8004e1c:	08004e3d 	.word	0x08004e3d
 8004e20:	08005111 	.word	0x08005111
 8004e24:	08005111 	.word	0x08005111
 8004e28:	08005111 	.word	0x08005111
 8004e2c:	08004fb1 	.word	0x08004fb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e30:	4bbd      	ldr	r3, [pc, #756]	; (8005128 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e32:	61bb      	str	r3, [r7, #24]
       break;
 8004e34:	e16f      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e36:	4bbd      	ldr	r3, [pc, #756]	; (800512c <HAL_RCC_GetSysClockFreq+0x360>)
 8004e38:	61bb      	str	r3, [r7, #24]
      break;
 8004e3a:	e16c      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e3c:	4bb9      	ldr	r3, [pc, #740]	; (8005124 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e44:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e46:	4bb7      	ldr	r3, [pc, #732]	; (8005124 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d053      	beq.n	8004efa <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e52:	4bb4      	ldr	r3, [pc, #720]	; (8005124 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	099b      	lsrs	r3, r3, #6
 8004e58:	461a      	mov	r2, r3
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e62:	f04f 0100 	mov.w	r1, #0
 8004e66:	ea02 0400 	and.w	r4, r2, r0
 8004e6a:	603c      	str	r4, [r7, #0]
 8004e6c:	400b      	ands	r3, r1
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e74:	4620      	mov	r0, r4
 8004e76:	4629      	mov	r1, r5
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	014b      	lsls	r3, r1, #5
 8004e82:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e86:	0142      	lsls	r2, r0, #5
 8004e88:	4610      	mov	r0, r2
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4623      	mov	r3, r4
 8004e8e:	1ac0      	subs	r0, r0, r3
 8004e90:	462b      	mov	r3, r5
 8004e92:	eb61 0103 	sbc.w	r1, r1, r3
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	018b      	lsls	r3, r1, #6
 8004ea0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ea4:	0182      	lsls	r2, r0, #6
 8004ea6:	1a12      	subs	r2, r2, r0
 8004ea8:	eb63 0301 	sbc.w	r3, r3, r1
 8004eac:	f04f 0000 	mov.w	r0, #0
 8004eb0:	f04f 0100 	mov.w	r1, #0
 8004eb4:	00d9      	lsls	r1, r3, #3
 8004eb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eba:	00d0      	lsls	r0, r2, #3
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	1852      	adds	r2, r2, r1
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	eb43 0101 	adc.w	r1, r3, r1
 8004eca:	460b      	mov	r3, r1
 8004ecc:	f04f 0000 	mov.w	r0, #0
 8004ed0:	f04f 0100 	mov.w	r1, #0
 8004ed4:	0259      	lsls	r1, r3, #9
 8004ed6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004eda:	0250      	lsls	r0, r2, #9
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	f7fb f9e0 	bl	80002b0 <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	61fb      	str	r3, [r7, #28]
 8004ef8:	e04c      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004efa:	4b8a      	ldr	r3, [pc, #552]	; (8005124 <HAL_RCC_GetSysClockFreq+0x358>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	099b      	lsrs	r3, r3, #6
 8004f00:	461a      	mov	r2, r3
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f0a:	f04f 0100 	mov.w	r1, #0
 8004f0e:	ea02 0a00 	and.w	sl, r2, r0
 8004f12:	ea03 0b01 	and.w	fp, r3, r1
 8004f16:	4650      	mov	r0, sl
 8004f18:	4659      	mov	r1, fp
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	014b      	lsls	r3, r1, #5
 8004f24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f28:	0142      	lsls	r2, r0, #5
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	ebb0 000a 	subs.w	r0, r0, sl
 8004f32:	eb61 010b 	sbc.w	r1, r1, fp
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	018b      	lsls	r3, r1, #6
 8004f40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f44:	0182      	lsls	r2, r0, #6
 8004f46:	1a12      	subs	r2, r2, r0
 8004f48:	eb63 0301 	sbc.w	r3, r3, r1
 8004f4c:	f04f 0000 	mov.w	r0, #0
 8004f50:	f04f 0100 	mov.w	r1, #0
 8004f54:	00d9      	lsls	r1, r3, #3
 8004f56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f5a:	00d0      	lsls	r0, r2, #3
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	eb12 020a 	adds.w	r2, r2, sl
 8004f64:	eb43 030b 	adc.w	r3, r3, fp
 8004f68:	f04f 0000 	mov.w	r0, #0
 8004f6c:	f04f 0100 	mov.w	r1, #0
 8004f70:	0299      	lsls	r1, r3, #10
 8004f72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f76:	0290      	lsls	r0, r2, #10
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4619      	mov	r1, r3
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	f7fb f992 	bl	80002b0 <__aeabi_uldivmod>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4613      	mov	r3, r2
 8004f92:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f94:	4b63      	ldr	r3, [pc, #396]	; (8005124 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	61bb      	str	r3, [r7, #24]
      break;
 8004fae:	e0b2      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fb0:	4b5c      	ldr	r3, [pc, #368]	; (8005124 <HAL_RCC_GetSysClockFreq+0x358>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fb8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fba:	4b5a      	ldr	r3, [pc, #360]	; (8005124 <HAL_RCC_GetSysClockFreq+0x358>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d04d      	beq.n	8005062 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc6:	4b57      	ldr	r3, [pc, #348]	; (8005124 <HAL_RCC_GetSysClockFreq+0x358>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	099b      	lsrs	r3, r3, #6
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f04f 0300 	mov.w	r3, #0
 8004fd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fd6:	f04f 0100 	mov.w	r1, #0
 8004fda:	ea02 0800 	and.w	r8, r2, r0
 8004fde:	ea03 0901 	and.w	r9, r3, r1
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	014b      	lsls	r3, r1, #5
 8004ff0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ff4:	0142      	lsls	r2, r0, #5
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	ebb0 0008 	subs.w	r0, r0, r8
 8004ffe:	eb61 0109 	sbc.w	r1, r1, r9
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	018b      	lsls	r3, r1, #6
 800500c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005010:	0182      	lsls	r2, r0, #6
 8005012:	1a12      	subs	r2, r2, r0
 8005014:	eb63 0301 	sbc.w	r3, r3, r1
 8005018:	f04f 0000 	mov.w	r0, #0
 800501c:	f04f 0100 	mov.w	r1, #0
 8005020:	00d9      	lsls	r1, r3, #3
 8005022:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005026:	00d0      	lsls	r0, r2, #3
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	eb12 0208 	adds.w	r2, r2, r8
 8005030:	eb43 0309 	adc.w	r3, r3, r9
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f04f 0100 	mov.w	r1, #0
 800503c:	0259      	lsls	r1, r3, #9
 800503e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005042:	0250      	lsls	r0, r2, #9
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4610      	mov	r0, r2
 800504a:	4619      	mov	r1, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	461a      	mov	r2, r3
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	f7fb f92c 	bl	80002b0 <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4613      	mov	r3, r2
 800505e:	61fb      	str	r3, [r7, #28]
 8005060:	e04a      	b.n	80050f8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005062:	4b30      	ldr	r3, [pc, #192]	; (8005124 <HAL_RCC_GetSysClockFreq+0x358>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	099b      	lsrs	r3, r3, #6
 8005068:	461a      	mov	r2, r3
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005072:	f04f 0100 	mov.w	r1, #0
 8005076:	ea02 0400 	and.w	r4, r2, r0
 800507a:	ea03 0501 	and.w	r5, r3, r1
 800507e:	4620      	mov	r0, r4
 8005080:	4629      	mov	r1, r5
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	014b      	lsls	r3, r1, #5
 800508c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005090:	0142      	lsls	r2, r0, #5
 8005092:	4610      	mov	r0, r2
 8005094:	4619      	mov	r1, r3
 8005096:	1b00      	subs	r0, r0, r4
 8005098:	eb61 0105 	sbc.w	r1, r1, r5
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	018b      	lsls	r3, r1, #6
 80050a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80050aa:	0182      	lsls	r2, r0, #6
 80050ac:	1a12      	subs	r2, r2, r0
 80050ae:	eb63 0301 	sbc.w	r3, r3, r1
 80050b2:	f04f 0000 	mov.w	r0, #0
 80050b6:	f04f 0100 	mov.w	r1, #0
 80050ba:	00d9      	lsls	r1, r3, #3
 80050bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050c0:	00d0      	lsls	r0, r2, #3
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	1912      	adds	r2, r2, r4
 80050c8:	eb45 0303 	adc.w	r3, r5, r3
 80050cc:	f04f 0000 	mov.w	r0, #0
 80050d0:	f04f 0100 	mov.w	r1, #0
 80050d4:	0299      	lsls	r1, r3, #10
 80050d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80050da:	0290      	lsls	r0, r2, #10
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4610      	mov	r0, r2
 80050e2:	4619      	mov	r1, r3
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	461a      	mov	r2, r3
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	f7fb f8e0 	bl	80002b0 <__aeabi_uldivmod>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4613      	mov	r3, r2
 80050f6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80050f8:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <HAL_RCC_GetSysClockFreq+0x358>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	0f1b      	lsrs	r3, r3, #28
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	61bb      	str	r3, [r7, #24]
      break;
 800510e:	e002      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005112:	61bb      	str	r3, [r7, #24]
      break;
 8005114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005116:	69bb      	ldr	r3, [r7, #24]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3720      	adds	r7, #32
 800511c:	46bd      	mov	sp, r7
 800511e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800
 8005128:	00f42400 	.word	0x00f42400
 800512c:	007a1200 	.word	0x007a1200

08005130 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e28d      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 8083 	beq.w	8005256 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005150:	4b94      	ldr	r3, [pc, #592]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 030c 	and.w	r3, r3, #12
 8005158:	2b04      	cmp	r3, #4
 800515a:	d019      	beq.n	8005190 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800515c:	4b91      	ldr	r3, [pc, #580]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005164:	2b08      	cmp	r3, #8
 8005166:	d106      	bne.n	8005176 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005168:	4b8e      	ldr	r3, [pc, #568]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005174:	d00c      	beq.n	8005190 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005176:	4b8b      	ldr	r3, [pc, #556]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800517e:	2b0c      	cmp	r3, #12
 8005180:	d112      	bne.n	80051a8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005182:	4b88      	ldr	r3, [pc, #544]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800518e:	d10b      	bne.n	80051a8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005190:	4b84      	ldr	r3, [pc, #528]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d05b      	beq.n	8005254 <HAL_RCC_OscConfig+0x124>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d157      	bne.n	8005254 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e25a      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b0:	d106      	bne.n	80051c0 <HAL_RCC_OscConfig+0x90>
 80051b2:	4b7c      	ldr	r3, [pc, #496]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a7b      	ldr	r2, [pc, #492]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 80051b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	e01d      	b.n	80051fc <HAL_RCC_OscConfig+0xcc>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051c8:	d10c      	bne.n	80051e4 <HAL_RCC_OscConfig+0xb4>
 80051ca:	4b76      	ldr	r3, [pc, #472]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a75      	ldr	r2, [pc, #468]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 80051d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	4b73      	ldr	r3, [pc, #460]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a72      	ldr	r2, [pc, #456]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 80051dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e00b      	b.n	80051fc <HAL_RCC_OscConfig+0xcc>
 80051e4:	4b6f      	ldr	r3, [pc, #444]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a6e      	ldr	r2, [pc, #440]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 80051ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	4b6c      	ldr	r3, [pc, #432]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a6b      	ldr	r2, [pc, #428]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 80051f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d013      	beq.n	800522c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005204:	f7fe fa88 	bl	8003718 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800520c:	f7fe fa84 	bl	8003718 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b64      	cmp	r3, #100	; 0x64
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e21f      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521e:	4b61      	ldr	r3, [pc, #388]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0f0      	beq.n	800520c <HAL_RCC_OscConfig+0xdc>
 800522a:	e014      	b.n	8005256 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522c:	f7fe fa74 	bl	8003718 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005232:	e008      	b.n	8005246 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005234:	f7fe fa70 	bl	8003718 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	2b64      	cmp	r3, #100	; 0x64
 8005240:	d901      	bls.n	8005246 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e20b      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005246:	4b57      	ldr	r3, [pc, #348]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1f0      	bne.n	8005234 <HAL_RCC_OscConfig+0x104>
 8005252:	e000      	b.n	8005256 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d06f      	beq.n	8005342 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005262:	4b50      	ldr	r3, [pc, #320]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 030c 	and.w	r3, r3, #12
 800526a:	2b00      	cmp	r3, #0
 800526c:	d017      	beq.n	800529e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800526e:	4b4d      	ldr	r3, [pc, #308]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005276:	2b08      	cmp	r3, #8
 8005278:	d105      	bne.n	8005286 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800527a:	4b4a      	ldr	r3, [pc, #296]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00b      	beq.n	800529e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005286:	4b47      	ldr	r3, [pc, #284]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800528e:	2b0c      	cmp	r3, #12
 8005290:	d11c      	bne.n	80052cc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005292:	4b44      	ldr	r3, [pc, #272]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d116      	bne.n	80052cc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800529e:	4b41      	ldr	r3, [pc, #260]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <HAL_RCC_OscConfig+0x186>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d001      	beq.n	80052b6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e1d3      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b6:	4b3b      	ldr	r3, [pc, #236]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4937      	ldr	r1, [pc, #220]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ca:	e03a      	b.n	8005342 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d020      	beq.n	8005316 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052d4:	4b34      	ldr	r3, [pc, #208]	; (80053a8 <HAL_RCC_OscConfig+0x278>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052da:	f7fe fa1d 	bl	8003718 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052e2:	f7fe fa19 	bl	8003718 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e1b4      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f4:	4b2b      	ldr	r3, [pc, #172]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f0      	beq.n	80052e2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005300:	4b28      	ldr	r3, [pc, #160]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4925      	ldr	r1, [pc, #148]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 8005310:	4313      	orrs	r3, r2
 8005312:	600b      	str	r3, [r1, #0]
 8005314:	e015      	b.n	8005342 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005316:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <HAL_RCC_OscConfig+0x278>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531c:	f7fe f9fc 	bl	8003718 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005324:	f7fe f9f8 	bl	8003718 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e193      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005336:	4b1b      	ldr	r3, [pc, #108]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f0      	bne.n	8005324 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0308 	and.w	r3, r3, #8
 800534a:	2b00      	cmp	r3, #0
 800534c:	d036      	beq.n	80053bc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d016      	beq.n	8005384 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005356:	4b15      	ldr	r3, [pc, #84]	; (80053ac <HAL_RCC_OscConfig+0x27c>)
 8005358:	2201      	movs	r2, #1
 800535a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535c:	f7fe f9dc 	bl	8003718 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005364:	f7fe f9d8 	bl	8003718 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e173      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005376:	4b0b      	ldr	r3, [pc, #44]	; (80053a4 <HAL_RCC_OscConfig+0x274>)
 8005378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f0      	beq.n	8005364 <HAL_RCC_OscConfig+0x234>
 8005382:	e01b      	b.n	80053bc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005384:	4b09      	ldr	r3, [pc, #36]	; (80053ac <HAL_RCC_OscConfig+0x27c>)
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800538a:	f7fe f9c5 	bl	8003718 <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005390:	e00e      	b.n	80053b0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005392:	f7fe f9c1 	bl	8003718 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d907      	bls.n	80053b0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e15c      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
 80053a4:	40023800 	.word	0x40023800
 80053a8:	42470000 	.word	0x42470000
 80053ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053b0:	4b8a      	ldr	r3, [pc, #552]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 80053b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ea      	bne.n	8005392 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8097 	beq.w	80054f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ca:	2300      	movs	r3, #0
 80053cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ce:	4b83      	ldr	r3, [pc, #524]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10f      	bne.n	80053fa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053da:	2300      	movs	r3, #0
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	4b7f      	ldr	r3, [pc, #508]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	4a7e      	ldr	r2, [pc, #504]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 80053e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ea:	4b7c      	ldr	r3, [pc, #496]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f2:	60bb      	str	r3, [r7, #8]
 80053f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053f6:	2301      	movs	r3, #1
 80053f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053fa:	4b79      	ldr	r3, [pc, #484]	; (80055e0 <HAL_RCC_OscConfig+0x4b0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005402:	2b00      	cmp	r3, #0
 8005404:	d118      	bne.n	8005438 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005406:	4b76      	ldr	r3, [pc, #472]	; (80055e0 <HAL_RCC_OscConfig+0x4b0>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a75      	ldr	r2, [pc, #468]	; (80055e0 <HAL_RCC_OscConfig+0x4b0>)
 800540c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005412:	f7fe f981 	bl	8003718 <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800541a:	f7fe f97d 	bl	8003718 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e118      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800542c:	4b6c      	ldr	r3, [pc, #432]	; (80055e0 <HAL_RCC_OscConfig+0x4b0>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0f0      	beq.n	800541a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d106      	bne.n	800544e <HAL_RCC_OscConfig+0x31e>
 8005440:	4b66      	ldr	r3, [pc, #408]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 8005442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005444:	4a65      	ldr	r2, [pc, #404]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 8005446:	f043 0301 	orr.w	r3, r3, #1
 800544a:	6713      	str	r3, [r2, #112]	; 0x70
 800544c:	e01c      	b.n	8005488 <HAL_RCC_OscConfig+0x358>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b05      	cmp	r3, #5
 8005454:	d10c      	bne.n	8005470 <HAL_RCC_OscConfig+0x340>
 8005456:	4b61      	ldr	r3, [pc, #388]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 8005458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545a:	4a60      	ldr	r2, [pc, #384]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 800545c:	f043 0304 	orr.w	r3, r3, #4
 8005460:	6713      	str	r3, [r2, #112]	; 0x70
 8005462:	4b5e      	ldr	r3, [pc, #376]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 8005464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005466:	4a5d      	ldr	r2, [pc, #372]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	6713      	str	r3, [r2, #112]	; 0x70
 800546e:	e00b      	b.n	8005488 <HAL_RCC_OscConfig+0x358>
 8005470:	4b5a      	ldr	r3, [pc, #360]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 8005472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005474:	4a59      	ldr	r2, [pc, #356]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 8005476:	f023 0301 	bic.w	r3, r3, #1
 800547a:	6713      	str	r3, [r2, #112]	; 0x70
 800547c:	4b57      	ldr	r3, [pc, #348]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 800547e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005480:	4a56      	ldr	r2, [pc, #344]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 8005482:	f023 0304 	bic.w	r3, r3, #4
 8005486:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d015      	beq.n	80054bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005490:	f7fe f942 	bl	8003718 <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005496:	e00a      	b.n	80054ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005498:	f7fe f93e 	bl	8003718 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e0d7      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ae:	4b4b      	ldr	r3, [pc, #300]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 80054b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0ee      	beq.n	8005498 <HAL_RCC_OscConfig+0x368>
 80054ba:	e014      	b.n	80054e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054bc:	f7fe f92c 	bl	8003718 <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054c2:	e00a      	b.n	80054da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054c4:	f7fe f928 	bl	8003718 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e0c1      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054da:	4b40      	ldr	r3, [pc, #256]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1ee      	bne.n	80054c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054e6:	7dfb      	ldrb	r3, [r7, #23]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d105      	bne.n	80054f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ec:	4b3b      	ldr	r3, [pc, #236]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	4a3a      	ldr	r2, [pc, #232]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 80054f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 80ad 	beq.w	800565c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005502:	4b36      	ldr	r3, [pc, #216]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	2b08      	cmp	r3, #8
 800550c:	d060      	beq.n	80055d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	2b02      	cmp	r3, #2
 8005514:	d145      	bne.n	80055a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005516:	4b33      	ldr	r3, [pc, #204]	; (80055e4 <HAL_RCC_OscConfig+0x4b4>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551c:	f7fe f8fc 	bl	8003718 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005524:	f7fe f8f8 	bl	8003718 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e093      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005536:	4b29      	ldr	r3, [pc, #164]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69da      	ldr	r2, [r3, #28]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	431a      	orrs	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	019b      	lsls	r3, r3, #6
 8005552:	431a      	orrs	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	085b      	lsrs	r3, r3, #1
 800555a:	3b01      	subs	r3, #1
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	061b      	lsls	r3, r3, #24
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	071b      	lsls	r3, r3, #28
 800556e:	491b      	ldr	r1, [pc, #108]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 8005570:	4313      	orrs	r3, r2
 8005572:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005574:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <HAL_RCC_OscConfig+0x4b4>)
 8005576:	2201      	movs	r2, #1
 8005578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557a:	f7fe f8cd 	bl	8003718 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005580:	e008      	b.n	8005594 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005582:	f7fe f8c9 	bl	8003718 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	2b02      	cmp	r3, #2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e064      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005594:	4b11      	ldr	r3, [pc, #68]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d0f0      	beq.n	8005582 <HAL_RCC_OscConfig+0x452>
 80055a0:	e05c      	b.n	800565c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a2:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <HAL_RCC_OscConfig+0x4b4>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fe f8b6 	bl	8003718 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055b0:	f7fe f8b2 	bl	8003718 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e04d      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c2:	4b06      	ldr	r3, [pc, #24]	; (80055dc <HAL_RCC_OscConfig+0x4ac>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x480>
 80055ce:	e045      	b.n	800565c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d107      	bne.n	80055e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e040      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
 80055dc:	40023800 	.word	0x40023800
 80055e0:	40007000 	.word	0x40007000
 80055e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055e8:	4b1f      	ldr	r3, [pc, #124]	; (8005668 <HAL_RCC_OscConfig+0x538>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d030      	beq.n	8005658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005600:	429a      	cmp	r2, r3
 8005602:	d129      	bne.n	8005658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560e:	429a      	cmp	r2, r3
 8005610:	d122      	bne.n	8005658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005618:	4013      	ands	r3, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800561e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005620:	4293      	cmp	r3, r2
 8005622:	d119      	bne.n	8005658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	3b01      	subs	r3, #1
 8005632:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005634:	429a      	cmp	r2, r3
 8005636:	d10f      	bne.n	8005658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005644:	429a      	cmp	r2, r3
 8005646:	d107      	bne.n	8005658 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005654:	429a      	cmp	r2, r3
 8005656:	d001      	beq.n	800565c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	40023800 	.word	0x40023800

0800566c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e03f      	b.n	80056fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fb fba4 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2224      	movs	r2, #36	; 0x24
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f929 	bl	8005908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695a      	ldr	r2, [r3, #20]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3708      	adds	r7, #8
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b08a      	sub	sp, #40	; 0x28
 800570a:	af02      	add	r7, sp, #8
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	603b      	str	r3, [r7, #0]
 8005712:	4613      	mov	r3, r2
 8005714:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b20      	cmp	r3, #32
 8005724:	d17c      	bne.n	8005820 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <HAL_UART_Transmit+0x2c>
 800572c:	88fb      	ldrh	r3, [r7, #6]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e075      	b.n	8005822 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800573c:	2b01      	cmp	r3, #1
 800573e:	d101      	bne.n	8005744 <HAL_UART_Transmit+0x3e>
 8005740:	2302      	movs	r3, #2
 8005742:	e06e      	b.n	8005822 <HAL_UART_Transmit+0x11c>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2221      	movs	r2, #33	; 0x21
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800575a:	f7fd ffdd 	bl	8003718 <HAL_GetTick>
 800575e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	88fa      	ldrh	r2, [r7, #6]
 8005764:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	88fa      	ldrh	r2, [r7, #6]
 800576a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005774:	d108      	bne.n	8005788 <HAL_UART_Transmit+0x82>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d104      	bne.n	8005788 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	e003      	b.n	8005790 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800578c:	2300      	movs	r3, #0
 800578e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005798:	e02a      	b.n	80057f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2200      	movs	r2, #0
 80057a2:	2180      	movs	r1, #128	; 0x80
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f840 	bl	800582a <UART_WaitOnFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e036      	b.n	8005822 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10b      	bne.n	80057d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	3302      	adds	r3, #2
 80057ce:	61bb      	str	r3, [r7, #24]
 80057d0:	e007      	b.n	80057e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	781a      	ldrb	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	3301      	adds	r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d1cf      	bne.n	800579a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2200      	movs	r2, #0
 8005802:	2140      	movs	r1, #64	; 0x40
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f810 	bl	800582a <UART_WaitOnFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e006      	b.n	8005822 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	e000      	b.n	8005822 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005820:	2302      	movs	r3, #2
  }
}
 8005822:	4618      	mov	r0, r3
 8005824:	3720      	adds	r7, #32
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b090      	sub	sp, #64	; 0x40
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	603b      	str	r3, [r7, #0]
 8005836:	4613      	mov	r3, r2
 8005838:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800583a:	e050      	b.n	80058de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800583c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d04c      	beq.n	80058de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005846:	2b00      	cmp	r3, #0
 8005848:	d007      	beq.n	800585a <UART_WaitOnFlagUntilTimeout+0x30>
 800584a:	f7fd ff65 	bl	8003718 <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005856:	429a      	cmp	r2, r3
 8005858:	d241      	bcs.n	80058de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	330c      	adds	r3, #12
 8005860:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800587a:	637a      	str	r2, [r7, #52]	; 0x34
 800587c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e5      	bne.n	800585a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3314      	adds	r3, #20
 8005894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	613b      	str	r3, [r7, #16]
   return(result);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3314      	adds	r3, #20
 80058ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058ae:	623a      	str	r2, [r7, #32]
 80058b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b2:	69f9      	ldr	r1, [r7, #28]
 80058b4:	6a3a      	ldr	r2, [r7, #32]
 80058b6:	e841 2300 	strex	r3, r2, [r1]
 80058ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1e5      	bne.n	800588e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e00f      	b.n	80058fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4013      	ands	r3, r2
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	bf0c      	ite	eq
 80058ee:	2301      	moveq	r3, #1
 80058f0:	2300      	movne	r3, #0
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d09f      	beq.n	800583c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3740      	adds	r7, #64	; 0x40
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800590c:	b09f      	sub	sp, #124	; 0x7c
 800590e:	af00      	add	r7, sp, #0
 8005910:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800591c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591e:	68d9      	ldr	r1, [r3, #12]
 8005920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	ea40 0301 	orr.w	r3, r0, r1
 8005928:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800592a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	431a      	orrs	r2, r3
 8005934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	431a      	orrs	r2, r3
 800593a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	4313      	orrs	r3, r2
 8005940:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800594c:	f021 010c 	bic.w	r1, r1, #12
 8005950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005956:	430b      	orrs	r3, r1
 8005958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800595a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005966:	6999      	ldr	r1, [r3, #24]
 8005968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	ea40 0301 	orr.w	r3, r0, r1
 8005970:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	4bc5      	ldr	r3, [pc, #788]	; (8005c8c <UART_SetConfig+0x384>)
 8005978:	429a      	cmp	r2, r3
 800597a:	d004      	beq.n	8005986 <UART_SetConfig+0x7e>
 800597c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4bc3      	ldr	r3, [pc, #780]	; (8005c90 <UART_SetConfig+0x388>)
 8005982:	429a      	cmp	r2, r3
 8005984:	d103      	bne.n	800598e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005986:	f7ff fa0d 	bl	8004da4 <HAL_RCC_GetPCLK2Freq>
 800598a:	6778      	str	r0, [r7, #116]	; 0x74
 800598c:	e002      	b.n	8005994 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800598e:	f7ff f9f5 	bl	8004d7c <HAL_RCC_GetPCLK1Freq>
 8005992:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800599c:	f040 80b6 	bne.w	8005b0c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059a2:	461c      	mov	r4, r3
 80059a4:	f04f 0500 	mov.w	r5, #0
 80059a8:	4622      	mov	r2, r4
 80059aa:	462b      	mov	r3, r5
 80059ac:	1891      	adds	r1, r2, r2
 80059ae:	6439      	str	r1, [r7, #64]	; 0x40
 80059b0:	415b      	adcs	r3, r3
 80059b2:	647b      	str	r3, [r7, #68]	; 0x44
 80059b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059b8:	1912      	adds	r2, r2, r4
 80059ba:	eb45 0303 	adc.w	r3, r5, r3
 80059be:	f04f 0000 	mov.w	r0, #0
 80059c2:	f04f 0100 	mov.w	r1, #0
 80059c6:	00d9      	lsls	r1, r3, #3
 80059c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059cc:	00d0      	lsls	r0, r2, #3
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	1911      	adds	r1, r2, r4
 80059d4:	6639      	str	r1, [r7, #96]	; 0x60
 80059d6:	416b      	adcs	r3, r5
 80059d8:	667b      	str	r3, [r7, #100]	; 0x64
 80059da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	461a      	mov	r2, r3
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	1891      	adds	r1, r2, r2
 80059e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80059e8:	415b      	adcs	r3, r3
 80059ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80059f4:	f7fa fc5c 	bl	80002b0 <__aeabi_uldivmod>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	4ba5      	ldr	r3, [pc, #660]	; (8005c94 <UART_SetConfig+0x38c>)
 80059fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	011e      	lsls	r6, r3, #4
 8005a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a08:	461c      	mov	r4, r3
 8005a0a:	f04f 0500 	mov.w	r5, #0
 8005a0e:	4622      	mov	r2, r4
 8005a10:	462b      	mov	r3, r5
 8005a12:	1891      	adds	r1, r2, r2
 8005a14:	6339      	str	r1, [r7, #48]	; 0x30
 8005a16:	415b      	adcs	r3, r3
 8005a18:	637b      	str	r3, [r7, #52]	; 0x34
 8005a1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005a1e:	1912      	adds	r2, r2, r4
 8005a20:	eb45 0303 	adc.w	r3, r5, r3
 8005a24:	f04f 0000 	mov.w	r0, #0
 8005a28:	f04f 0100 	mov.w	r1, #0
 8005a2c:	00d9      	lsls	r1, r3, #3
 8005a2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a32:	00d0      	lsls	r0, r2, #3
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	1911      	adds	r1, r2, r4
 8005a3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005a3c:	416b      	adcs	r3, r5
 8005a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	461a      	mov	r2, r3
 8005a46:	f04f 0300 	mov.w	r3, #0
 8005a4a:	1891      	adds	r1, r2, r2
 8005a4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005a4e:	415b      	adcs	r3, r3
 8005a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005a5a:	f7fa fc29 	bl	80002b0 <__aeabi_uldivmod>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	460b      	mov	r3, r1
 8005a62:	4b8c      	ldr	r3, [pc, #560]	; (8005c94 <UART_SetConfig+0x38c>)
 8005a64:	fba3 1302 	umull	r1, r3, r3, r2
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	2164      	movs	r1, #100	; 0x64
 8005a6c:	fb01 f303 	mul.w	r3, r1, r3
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	3332      	adds	r3, #50	; 0x32
 8005a76:	4a87      	ldr	r2, [pc, #540]	; (8005c94 <UART_SetConfig+0x38c>)
 8005a78:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a84:	441e      	add	r6, r3
 8005a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f04f 0100 	mov.w	r1, #0
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	1894      	adds	r4, r2, r2
 8005a94:	623c      	str	r4, [r7, #32]
 8005a96:	415b      	adcs	r3, r3
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a9e:	1812      	adds	r2, r2, r0
 8005aa0:	eb41 0303 	adc.w	r3, r1, r3
 8005aa4:	f04f 0400 	mov.w	r4, #0
 8005aa8:	f04f 0500 	mov.w	r5, #0
 8005aac:	00dd      	lsls	r5, r3, #3
 8005aae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ab2:	00d4      	lsls	r4, r2, #3
 8005ab4:	4622      	mov	r2, r4
 8005ab6:	462b      	mov	r3, r5
 8005ab8:	1814      	adds	r4, r2, r0
 8005aba:	653c      	str	r4, [r7, #80]	; 0x50
 8005abc:	414b      	adcs	r3, r1
 8005abe:	657b      	str	r3, [r7, #84]	; 0x54
 8005ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f04f 0300 	mov.w	r3, #0
 8005aca:	1891      	adds	r1, r2, r2
 8005acc:	61b9      	str	r1, [r7, #24]
 8005ace:	415b      	adcs	r3, r3
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ad6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ada:	f7fa fbe9 	bl	80002b0 <__aeabi_uldivmod>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4b6c      	ldr	r3, [pc, #432]	; (8005c94 <UART_SetConfig+0x38c>)
 8005ae4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ae8:	095b      	lsrs	r3, r3, #5
 8005aea:	2164      	movs	r1, #100	; 0x64
 8005aec:	fb01 f303 	mul.w	r3, r1, r3
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	3332      	adds	r3, #50	; 0x32
 8005af6:	4a67      	ldr	r2, [pc, #412]	; (8005c94 <UART_SetConfig+0x38c>)
 8005af8:	fba2 2303 	umull	r2, r3, r2, r3
 8005afc:	095b      	lsrs	r3, r3, #5
 8005afe:	f003 0207 	and.w	r2, r3, #7
 8005b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4432      	add	r2, r6
 8005b08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b0a:	e0b9      	b.n	8005c80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b0e:	461c      	mov	r4, r3
 8005b10:	f04f 0500 	mov.w	r5, #0
 8005b14:	4622      	mov	r2, r4
 8005b16:	462b      	mov	r3, r5
 8005b18:	1891      	adds	r1, r2, r2
 8005b1a:	6139      	str	r1, [r7, #16]
 8005b1c:	415b      	adcs	r3, r3
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005b24:	1912      	adds	r2, r2, r4
 8005b26:	eb45 0303 	adc.w	r3, r5, r3
 8005b2a:	f04f 0000 	mov.w	r0, #0
 8005b2e:	f04f 0100 	mov.w	r1, #0
 8005b32:	00d9      	lsls	r1, r3, #3
 8005b34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b38:	00d0      	lsls	r0, r2, #3
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	eb12 0804 	adds.w	r8, r2, r4
 8005b42:	eb43 0905 	adc.w	r9, r3, r5
 8005b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f04f 0100 	mov.w	r1, #0
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	008b      	lsls	r3, r1, #2
 8005b5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b5e:	0082      	lsls	r2, r0, #2
 8005b60:	4640      	mov	r0, r8
 8005b62:	4649      	mov	r1, r9
 8005b64:	f7fa fba4 	bl	80002b0 <__aeabi_uldivmod>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4b49      	ldr	r3, [pc, #292]	; (8005c94 <UART_SetConfig+0x38c>)
 8005b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	011e      	lsls	r6, r3, #4
 8005b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f04f 0100 	mov.w	r1, #0
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	1894      	adds	r4, r2, r2
 8005b84:	60bc      	str	r4, [r7, #8]
 8005b86:	415b      	adcs	r3, r3
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b8e:	1812      	adds	r2, r2, r0
 8005b90:	eb41 0303 	adc.w	r3, r1, r3
 8005b94:	f04f 0400 	mov.w	r4, #0
 8005b98:	f04f 0500 	mov.w	r5, #0
 8005b9c:	00dd      	lsls	r5, r3, #3
 8005b9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ba2:	00d4      	lsls	r4, r2, #3
 8005ba4:	4622      	mov	r2, r4
 8005ba6:	462b      	mov	r3, r5
 8005ba8:	1814      	adds	r4, r2, r0
 8005baa:	64bc      	str	r4, [r7, #72]	; 0x48
 8005bac:	414b      	adcs	r3, r1
 8005bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f04f 0100 	mov.w	r1, #0
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	f04f 0300 	mov.w	r3, #0
 8005bc2:	008b      	lsls	r3, r1, #2
 8005bc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bc8:	0082      	lsls	r2, r0, #2
 8005bca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005bce:	f7fa fb6f 	bl	80002b0 <__aeabi_uldivmod>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	4b2f      	ldr	r3, [pc, #188]	; (8005c94 <UART_SetConfig+0x38c>)
 8005bd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bdc:	095b      	lsrs	r3, r3, #5
 8005bde:	2164      	movs	r1, #100	; 0x64
 8005be0:	fb01 f303 	mul.w	r3, r1, r3
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	011b      	lsls	r3, r3, #4
 8005be8:	3332      	adds	r3, #50	; 0x32
 8005bea:	4a2a      	ldr	r2, [pc, #168]	; (8005c94 <UART_SetConfig+0x38c>)
 8005bec:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bf6:	441e      	add	r6, r3
 8005bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f04f 0100 	mov.w	r1, #0
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	1894      	adds	r4, r2, r2
 8005c06:	603c      	str	r4, [r7, #0]
 8005c08:	415b      	adcs	r3, r3
 8005c0a:	607b      	str	r3, [r7, #4]
 8005c0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c10:	1812      	adds	r2, r2, r0
 8005c12:	eb41 0303 	adc.w	r3, r1, r3
 8005c16:	f04f 0400 	mov.w	r4, #0
 8005c1a:	f04f 0500 	mov.w	r5, #0
 8005c1e:	00dd      	lsls	r5, r3, #3
 8005c20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c24:	00d4      	lsls	r4, r2, #3
 8005c26:	4622      	mov	r2, r4
 8005c28:	462b      	mov	r3, r5
 8005c2a:	eb12 0a00 	adds.w	sl, r2, r0
 8005c2e:	eb43 0b01 	adc.w	fp, r3, r1
 8005c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f04f 0100 	mov.w	r1, #0
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	f04f 0300 	mov.w	r3, #0
 8005c44:	008b      	lsls	r3, r1, #2
 8005c46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c4a:	0082      	lsls	r2, r0, #2
 8005c4c:	4650      	mov	r0, sl
 8005c4e:	4659      	mov	r1, fp
 8005c50:	f7fa fb2e 	bl	80002b0 <__aeabi_uldivmod>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4b0e      	ldr	r3, [pc, #56]	; (8005c94 <UART_SetConfig+0x38c>)
 8005c5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	2164      	movs	r1, #100	; 0x64
 8005c62:	fb01 f303 	mul.w	r3, r1, r3
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	011b      	lsls	r3, r3, #4
 8005c6a:	3332      	adds	r3, #50	; 0x32
 8005c6c:	4a09      	ldr	r2, [pc, #36]	; (8005c94 <UART_SetConfig+0x38c>)
 8005c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	f003 020f 	and.w	r2, r3, #15
 8005c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4432      	add	r2, r6
 8005c7e:	609a      	str	r2, [r3, #8]
}
 8005c80:	bf00      	nop
 8005c82:	377c      	adds	r7, #124	; 0x7c
 8005c84:	46bd      	mov	sp, r7
 8005c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40011000 	.word	0x40011000
 8005c90:	40011400 	.word	0x40011400
 8005c94:	51eb851f 	.word	0x51eb851f

08005c98 <clock>:
 8005c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c9a:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <clock+0x24>)
 8005c9c:	4669      	mov	r1, sp
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	f000 fe71 	bl	8006986 <_times_r>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d006      	beq.n	8005cb6 <clock+0x1e>
 8005ca8:	e9dd 0300 	ldrd	r0, r3, [sp]
 8005cac:	4418      	add	r0, r3
 8005cae:	9b02      	ldr	r3, [sp, #8]
 8005cb0:	4418      	add	r0, r3
 8005cb2:	9b03      	ldr	r3, [sp, #12]
 8005cb4:	4418      	add	r0, r3
 8005cb6:	b005      	add	sp, #20
 8005cb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cbc:	200001c8 	.word	0x200001c8

08005cc0 <__errno>:
 8005cc0:	4b01      	ldr	r3, [pc, #4]	; (8005cc8 <__errno+0x8>)
 8005cc2:	6818      	ldr	r0, [r3, #0]
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	200001c8 	.word	0x200001c8

08005ccc <__sflush_r>:
 8005ccc:	898a      	ldrh	r2, [r1, #12]
 8005cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	0710      	lsls	r0, r2, #28
 8005cd6:	460c      	mov	r4, r1
 8005cd8:	d458      	bmi.n	8005d8c <__sflush_r+0xc0>
 8005cda:	684b      	ldr	r3, [r1, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	dc05      	bgt.n	8005cec <__sflush_r+0x20>
 8005ce0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	dc02      	bgt.n	8005cec <__sflush_r+0x20>
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cee:	2e00      	cmp	r6, #0
 8005cf0:	d0f9      	beq.n	8005ce6 <__sflush_r+0x1a>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005cf8:	682f      	ldr	r7, [r5, #0]
 8005cfa:	602b      	str	r3, [r5, #0]
 8005cfc:	d032      	beq.n	8005d64 <__sflush_r+0x98>
 8005cfe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	075a      	lsls	r2, r3, #29
 8005d04:	d505      	bpl.n	8005d12 <__sflush_r+0x46>
 8005d06:	6863      	ldr	r3, [r4, #4]
 8005d08:	1ac0      	subs	r0, r0, r3
 8005d0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d0c:	b10b      	cbz	r3, 8005d12 <__sflush_r+0x46>
 8005d0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d10:	1ac0      	subs	r0, r0, r3
 8005d12:	2300      	movs	r3, #0
 8005d14:	4602      	mov	r2, r0
 8005d16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d18:	6a21      	ldr	r1, [r4, #32]
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	47b0      	blx	r6
 8005d1e:	1c43      	adds	r3, r0, #1
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	d106      	bne.n	8005d32 <__sflush_r+0x66>
 8005d24:	6829      	ldr	r1, [r5, #0]
 8005d26:	291d      	cmp	r1, #29
 8005d28:	d82c      	bhi.n	8005d84 <__sflush_r+0xb8>
 8005d2a:	4a2a      	ldr	r2, [pc, #168]	; (8005dd4 <__sflush_r+0x108>)
 8005d2c:	40ca      	lsrs	r2, r1
 8005d2e:	07d6      	lsls	r6, r2, #31
 8005d30:	d528      	bpl.n	8005d84 <__sflush_r+0xb8>
 8005d32:	2200      	movs	r2, #0
 8005d34:	6062      	str	r2, [r4, #4]
 8005d36:	04d9      	lsls	r1, r3, #19
 8005d38:	6922      	ldr	r2, [r4, #16]
 8005d3a:	6022      	str	r2, [r4, #0]
 8005d3c:	d504      	bpl.n	8005d48 <__sflush_r+0x7c>
 8005d3e:	1c42      	adds	r2, r0, #1
 8005d40:	d101      	bne.n	8005d46 <__sflush_r+0x7a>
 8005d42:	682b      	ldr	r3, [r5, #0]
 8005d44:	b903      	cbnz	r3, 8005d48 <__sflush_r+0x7c>
 8005d46:	6560      	str	r0, [r4, #84]	; 0x54
 8005d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d4a:	602f      	str	r7, [r5, #0]
 8005d4c:	2900      	cmp	r1, #0
 8005d4e:	d0ca      	beq.n	8005ce6 <__sflush_r+0x1a>
 8005d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d54:	4299      	cmp	r1, r3
 8005d56:	d002      	beq.n	8005d5e <__sflush_r+0x92>
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f000 fa11 	bl	8006180 <_free_r>
 8005d5e:	2000      	movs	r0, #0
 8005d60:	6360      	str	r0, [r4, #52]	; 0x34
 8005d62:	e7c1      	b.n	8005ce8 <__sflush_r+0x1c>
 8005d64:	6a21      	ldr	r1, [r4, #32]
 8005d66:	2301      	movs	r3, #1
 8005d68:	4628      	mov	r0, r5
 8005d6a:	47b0      	blx	r6
 8005d6c:	1c41      	adds	r1, r0, #1
 8005d6e:	d1c7      	bne.n	8005d00 <__sflush_r+0x34>
 8005d70:	682b      	ldr	r3, [r5, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0c4      	beq.n	8005d00 <__sflush_r+0x34>
 8005d76:	2b1d      	cmp	r3, #29
 8005d78:	d001      	beq.n	8005d7e <__sflush_r+0xb2>
 8005d7a:	2b16      	cmp	r3, #22
 8005d7c:	d101      	bne.n	8005d82 <__sflush_r+0xb6>
 8005d7e:	602f      	str	r7, [r5, #0]
 8005d80:	e7b1      	b.n	8005ce6 <__sflush_r+0x1a>
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d88:	81a3      	strh	r3, [r4, #12]
 8005d8a:	e7ad      	b.n	8005ce8 <__sflush_r+0x1c>
 8005d8c:	690f      	ldr	r7, [r1, #16]
 8005d8e:	2f00      	cmp	r7, #0
 8005d90:	d0a9      	beq.n	8005ce6 <__sflush_r+0x1a>
 8005d92:	0793      	lsls	r3, r2, #30
 8005d94:	680e      	ldr	r6, [r1, #0]
 8005d96:	bf08      	it	eq
 8005d98:	694b      	ldreq	r3, [r1, #20]
 8005d9a:	600f      	str	r7, [r1, #0]
 8005d9c:	bf18      	it	ne
 8005d9e:	2300      	movne	r3, #0
 8005da0:	eba6 0807 	sub.w	r8, r6, r7
 8005da4:	608b      	str	r3, [r1, #8]
 8005da6:	f1b8 0f00 	cmp.w	r8, #0
 8005daa:	dd9c      	ble.n	8005ce6 <__sflush_r+0x1a>
 8005dac:	6a21      	ldr	r1, [r4, #32]
 8005dae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005db0:	4643      	mov	r3, r8
 8005db2:	463a      	mov	r2, r7
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b0      	blx	r6
 8005db8:	2800      	cmp	r0, #0
 8005dba:	dc06      	bgt.n	8005dca <__sflush_r+0xfe>
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc8:	e78e      	b.n	8005ce8 <__sflush_r+0x1c>
 8005dca:	4407      	add	r7, r0
 8005dcc:	eba8 0800 	sub.w	r8, r8, r0
 8005dd0:	e7e9      	b.n	8005da6 <__sflush_r+0xda>
 8005dd2:	bf00      	nop
 8005dd4:	20400001 	.word	0x20400001

08005dd8 <_fflush_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	690b      	ldr	r3, [r1, #16]
 8005ddc:	4605      	mov	r5, r0
 8005dde:	460c      	mov	r4, r1
 8005de0:	b913      	cbnz	r3, 8005de8 <_fflush_r+0x10>
 8005de2:	2500      	movs	r5, #0
 8005de4:	4628      	mov	r0, r5
 8005de6:	bd38      	pop	{r3, r4, r5, pc}
 8005de8:	b118      	cbz	r0, 8005df2 <_fflush_r+0x1a>
 8005dea:	6983      	ldr	r3, [r0, #24]
 8005dec:	b90b      	cbnz	r3, 8005df2 <_fflush_r+0x1a>
 8005dee:	f000 f887 	bl	8005f00 <__sinit>
 8005df2:	4b14      	ldr	r3, [pc, #80]	; (8005e44 <_fflush_r+0x6c>)
 8005df4:	429c      	cmp	r4, r3
 8005df6:	d11b      	bne.n	8005e30 <_fflush_r+0x58>
 8005df8:	686c      	ldr	r4, [r5, #4]
 8005dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0ef      	beq.n	8005de2 <_fflush_r+0xa>
 8005e02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e04:	07d0      	lsls	r0, r2, #31
 8005e06:	d404      	bmi.n	8005e12 <_fflush_r+0x3a>
 8005e08:	0599      	lsls	r1, r3, #22
 8005e0a:	d402      	bmi.n	8005e12 <_fflush_r+0x3a>
 8005e0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e0e:	f000 f93a 	bl	8006086 <__retarget_lock_acquire_recursive>
 8005e12:	4628      	mov	r0, r5
 8005e14:	4621      	mov	r1, r4
 8005e16:	f7ff ff59 	bl	8005ccc <__sflush_r>
 8005e1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e1c:	07da      	lsls	r2, r3, #31
 8005e1e:	4605      	mov	r5, r0
 8005e20:	d4e0      	bmi.n	8005de4 <_fflush_r+0xc>
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	059b      	lsls	r3, r3, #22
 8005e26:	d4dd      	bmi.n	8005de4 <_fflush_r+0xc>
 8005e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e2a:	f000 f92d 	bl	8006088 <__retarget_lock_release_recursive>
 8005e2e:	e7d9      	b.n	8005de4 <_fflush_r+0xc>
 8005e30:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <_fflush_r+0x70>)
 8005e32:	429c      	cmp	r4, r3
 8005e34:	d101      	bne.n	8005e3a <_fflush_r+0x62>
 8005e36:	68ac      	ldr	r4, [r5, #8]
 8005e38:	e7df      	b.n	8005dfa <_fflush_r+0x22>
 8005e3a:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <_fflush_r+0x74>)
 8005e3c:	429c      	cmp	r4, r3
 8005e3e:	bf08      	it	eq
 8005e40:	68ec      	ldreq	r4, [r5, #12]
 8005e42:	e7da      	b.n	8005dfa <_fflush_r+0x22>
 8005e44:	08006c80 	.word	0x08006c80
 8005e48:	08006ca0 	.word	0x08006ca0
 8005e4c:	08006c60 	.word	0x08006c60

08005e50 <std>:
 8005e50:	2300      	movs	r3, #0
 8005e52:	b510      	push	{r4, lr}
 8005e54:	4604      	mov	r4, r0
 8005e56:	e9c0 3300 	strd	r3, r3, [r0]
 8005e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e5e:	6083      	str	r3, [r0, #8]
 8005e60:	8181      	strh	r1, [r0, #12]
 8005e62:	6643      	str	r3, [r0, #100]	; 0x64
 8005e64:	81c2      	strh	r2, [r0, #14]
 8005e66:	6183      	str	r3, [r0, #24]
 8005e68:	4619      	mov	r1, r3
 8005e6a:	2208      	movs	r2, #8
 8005e6c:	305c      	adds	r0, #92	; 0x5c
 8005e6e:	f000 f97f 	bl	8006170 <memset>
 8005e72:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <std+0x38>)
 8005e74:	6263      	str	r3, [r4, #36]	; 0x24
 8005e76:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <std+0x3c>)
 8005e78:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e7a:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <std+0x40>)
 8005e7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e7e:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <std+0x44>)
 8005e80:	6224      	str	r4, [r4, #32]
 8005e82:	6323      	str	r3, [r4, #48]	; 0x30
 8005e84:	bd10      	pop	{r4, pc}
 8005e86:	bf00      	nop
 8005e88:	08006901 	.word	0x08006901
 8005e8c:	08006923 	.word	0x08006923
 8005e90:	0800695b 	.word	0x0800695b
 8005e94:	0800697f 	.word	0x0800697f

08005e98 <_cleanup_r>:
 8005e98:	4901      	ldr	r1, [pc, #4]	; (8005ea0 <_cleanup_r+0x8>)
 8005e9a:	f000 b8af 	b.w	8005ffc <_fwalk_reent>
 8005e9e:	bf00      	nop
 8005ea0:	08005dd9 	.word	0x08005dd9

08005ea4 <__sfmoreglue>:
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	1e4a      	subs	r2, r1, #1
 8005ea8:	2568      	movs	r5, #104	; 0x68
 8005eaa:	4355      	muls	r5, r2
 8005eac:	460e      	mov	r6, r1
 8005eae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005eb2:	f000 f9b5 	bl	8006220 <_malloc_r>
 8005eb6:	4604      	mov	r4, r0
 8005eb8:	b140      	cbz	r0, 8005ecc <__sfmoreglue+0x28>
 8005eba:	2100      	movs	r1, #0
 8005ebc:	e9c0 1600 	strd	r1, r6, [r0]
 8005ec0:	300c      	adds	r0, #12
 8005ec2:	60a0      	str	r0, [r4, #8]
 8005ec4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ec8:	f000 f952 	bl	8006170 <memset>
 8005ecc:	4620      	mov	r0, r4
 8005ece:	bd70      	pop	{r4, r5, r6, pc}

08005ed0 <__sfp_lock_acquire>:
 8005ed0:	4801      	ldr	r0, [pc, #4]	; (8005ed8 <__sfp_lock_acquire+0x8>)
 8005ed2:	f000 b8d8 	b.w	8006086 <__retarget_lock_acquire_recursive>
 8005ed6:	bf00      	nop
 8005ed8:	20000fe0 	.word	0x20000fe0

08005edc <__sfp_lock_release>:
 8005edc:	4801      	ldr	r0, [pc, #4]	; (8005ee4 <__sfp_lock_release+0x8>)
 8005ede:	f000 b8d3 	b.w	8006088 <__retarget_lock_release_recursive>
 8005ee2:	bf00      	nop
 8005ee4:	20000fe0 	.word	0x20000fe0

08005ee8 <__sinit_lock_acquire>:
 8005ee8:	4801      	ldr	r0, [pc, #4]	; (8005ef0 <__sinit_lock_acquire+0x8>)
 8005eea:	f000 b8cc 	b.w	8006086 <__retarget_lock_acquire_recursive>
 8005eee:	bf00      	nop
 8005ef0:	20000fdb 	.word	0x20000fdb

08005ef4 <__sinit_lock_release>:
 8005ef4:	4801      	ldr	r0, [pc, #4]	; (8005efc <__sinit_lock_release+0x8>)
 8005ef6:	f000 b8c7 	b.w	8006088 <__retarget_lock_release_recursive>
 8005efa:	bf00      	nop
 8005efc:	20000fdb 	.word	0x20000fdb

08005f00 <__sinit>:
 8005f00:	b510      	push	{r4, lr}
 8005f02:	4604      	mov	r4, r0
 8005f04:	f7ff fff0 	bl	8005ee8 <__sinit_lock_acquire>
 8005f08:	69a3      	ldr	r3, [r4, #24]
 8005f0a:	b11b      	cbz	r3, 8005f14 <__sinit+0x14>
 8005f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f10:	f7ff bff0 	b.w	8005ef4 <__sinit_lock_release>
 8005f14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f18:	6523      	str	r3, [r4, #80]	; 0x50
 8005f1a:	4b13      	ldr	r3, [pc, #76]	; (8005f68 <__sinit+0x68>)
 8005f1c:	4a13      	ldr	r2, [pc, #76]	; (8005f6c <__sinit+0x6c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f22:	42a3      	cmp	r3, r4
 8005f24:	bf04      	itt	eq
 8005f26:	2301      	moveq	r3, #1
 8005f28:	61a3      	streq	r3, [r4, #24]
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f000 f820 	bl	8005f70 <__sfp>
 8005f30:	6060      	str	r0, [r4, #4]
 8005f32:	4620      	mov	r0, r4
 8005f34:	f000 f81c 	bl	8005f70 <__sfp>
 8005f38:	60a0      	str	r0, [r4, #8]
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f000 f818 	bl	8005f70 <__sfp>
 8005f40:	2200      	movs	r2, #0
 8005f42:	60e0      	str	r0, [r4, #12]
 8005f44:	2104      	movs	r1, #4
 8005f46:	6860      	ldr	r0, [r4, #4]
 8005f48:	f7ff ff82 	bl	8005e50 <std>
 8005f4c:	68a0      	ldr	r0, [r4, #8]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	2109      	movs	r1, #9
 8005f52:	f7ff ff7d 	bl	8005e50 <std>
 8005f56:	68e0      	ldr	r0, [r4, #12]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	2112      	movs	r1, #18
 8005f5c:	f7ff ff78 	bl	8005e50 <std>
 8005f60:	2301      	movs	r3, #1
 8005f62:	61a3      	str	r3, [r4, #24]
 8005f64:	e7d2      	b.n	8005f0c <__sinit+0xc>
 8005f66:	bf00      	nop
 8005f68:	08006cc0 	.word	0x08006cc0
 8005f6c:	08005e99 	.word	0x08005e99

08005f70 <__sfp>:
 8005f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f72:	4607      	mov	r7, r0
 8005f74:	f7ff ffac 	bl	8005ed0 <__sfp_lock_acquire>
 8005f78:	4b1e      	ldr	r3, [pc, #120]	; (8005ff4 <__sfp+0x84>)
 8005f7a:	681e      	ldr	r6, [r3, #0]
 8005f7c:	69b3      	ldr	r3, [r6, #24]
 8005f7e:	b913      	cbnz	r3, 8005f86 <__sfp+0x16>
 8005f80:	4630      	mov	r0, r6
 8005f82:	f7ff ffbd 	bl	8005f00 <__sinit>
 8005f86:	3648      	adds	r6, #72	; 0x48
 8005f88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	d503      	bpl.n	8005f98 <__sfp+0x28>
 8005f90:	6833      	ldr	r3, [r6, #0]
 8005f92:	b30b      	cbz	r3, 8005fd8 <__sfp+0x68>
 8005f94:	6836      	ldr	r6, [r6, #0]
 8005f96:	e7f7      	b.n	8005f88 <__sfp+0x18>
 8005f98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f9c:	b9d5      	cbnz	r5, 8005fd4 <__sfp+0x64>
 8005f9e:	4b16      	ldr	r3, [pc, #88]	; (8005ff8 <__sfp+0x88>)
 8005fa0:	60e3      	str	r3, [r4, #12]
 8005fa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fa6:	6665      	str	r5, [r4, #100]	; 0x64
 8005fa8:	f000 f86c 	bl	8006084 <__retarget_lock_init_recursive>
 8005fac:	f7ff ff96 	bl	8005edc <__sfp_lock_release>
 8005fb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005fb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005fb8:	6025      	str	r5, [r4, #0]
 8005fba:	61a5      	str	r5, [r4, #24]
 8005fbc:	2208      	movs	r2, #8
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fc4:	f000 f8d4 	bl	8006170 <memset>
 8005fc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fcc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fd4:	3468      	adds	r4, #104	; 0x68
 8005fd6:	e7d9      	b.n	8005f8c <__sfp+0x1c>
 8005fd8:	2104      	movs	r1, #4
 8005fda:	4638      	mov	r0, r7
 8005fdc:	f7ff ff62 	bl	8005ea4 <__sfmoreglue>
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	6030      	str	r0, [r6, #0]
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d1d5      	bne.n	8005f94 <__sfp+0x24>
 8005fe8:	f7ff ff78 	bl	8005edc <__sfp_lock_release>
 8005fec:	230c      	movs	r3, #12
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	e7ee      	b.n	8005fd0 <__sfp+0x60>
 8005ff2:	bf00      	nop
 8005ff4:	08006cc0 	.word	0x08006cc0
 8005ff8:	ffff0001 	.word	0xffff0001

08005ffc <_fwalk_reent>:
 8005ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006000:	4606      	mov	r6, r0
 8006002:	4688      	mov	r8, r1
 8006004:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006008:	2700      	movs	r7, #0
 800600a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800600e:	f1b9 0901 	subs.w	r9, r9, #1
 8006012:	d505      	bpl.n	8006020 <_fwalk_reent+0x24>
 8006014:	6824      	ldr	r4, [r4, #0]
 8006016:	2c00      	cmp	r4, #0
 8006018:	d1f7      	bne.n	800600a <_fwalk_reent+0xe>
 800601a:	4638      	mov	r0, r7
 800601c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006020:	89ab      	ldrh	r3, [r5, #12]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d907      	bls.n	8006036 <_fwalk_reent+0x3a>
 8006026:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800602a:	3301      	adds	r3, #1
 800602c:	d003      	beq.n	8006036 <_fwalk_reent+0x3a>
 800602e:	4629      	mov	r1, r5
 8006030:	4630      	mov	r0, r6
 8006032:	47c0      	blx	r8
 8006034:	4307      	orrs	r7, r0
 8006036:	3568      	adds	r5, #104	; 0x68
 8006038:	e7e9      	b.n	800600e <_fwalk_reent+0x12>
	...

0800603c <__libc_init_array>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	4d0d      	ldr	r5, [pc, #52]	; (8006074 <__libc_init_array+0x38>)
 8006040:	4c0d      	ldr	r4, [pc, #52]	; (8006078 <__libc_init_array+0x3c>)
 8006042:	1b64      	subs	r4, r4, r5
 8006044:	10a4      	asrs	r4, r4, #2
 8006046:	2600      	movs	r6, #0
 8006048:	42a6      	cmp	r6, r4
 800604a:	d109      	bne.n	8006060 <__libc_init_array+0x24>
 800604c:	4d0b      	ldr	r5, [pc, #44]	; (800607c <__libc_init_array+0x40>)
 800604e:	4c0c      	ldr	r4, [pc, #48]	; (8006080 <__libc_init_array+0x44>)
 8006050:	f000 fdd0 	bl	8006bf4 <_init>
 8006054:	1b64      	subs	r4, r4, r5
 8006056:	10a4      	asrs	r4, r4, #2
 8006058:	2600      	movs	r6, #0
 800605a:	42a6      	cmp	r6, r4
 800605c:	d105      	bne.n	800606a <__libc_init_array+0x2e>
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	f855 3b04 	ldr.w	r3, [r5], #4
 8006064:	4798      	blx	r3
 8006066:	3601      	adds	r6, #1
 8006068:	e7ee      	b.n	8006048 <__libc_init_array+0xc>
 800606a:	f855 3b04 	ldr.w	r3, [r5], #4
 800606e:	4798      	blx	r3
 8006070:	3601      	adds	r6, #1
 8006072:	e7f2      	b.n	800605a <__libc_init_array+0x1e>
 8006074:	08006d00 	.word	0x08006d00
 8006078:	08006d00 	.word	0x08006d00
 800607c:	08006d00 	.word	0x08006d00
 8006080:	08006d04 	.word	0x08006d04

08006084 <__retarget_lock_init_recursive>:
 8006084:	4770      	bx	lr

08006086 <__retarget_lock_acquire_recursive>:
 8006086:	4770      	bx	lr

08006088 <__retarget_lock_release_recursive>:
 8006088:	4770      	bx	lr

0800608a <__swhatbuf_r>:
 800608a:	b570      	push	{r4, r5, r6, lr}
 800608c:	460e      	mov	r6, r1
 800608e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006092:	2900      	cmp	r1, #0
 8006094:	b096      	sub	sp, #88	; 0x58
 8006096:	4614      	mov	r4, r2
 8006098:	461d      	mov	r5, r3
 800609a:	da07      	bge.n	80060ac <__swhatbuf_r+0x22>
 800609c:	2300      	movs	r3, #0
 800609e:	602b      	str	r3, [r5, #0]
 80060a0:	89b3      	ldrh	r3, [r6, #12]
 80060a2:	061a      	lsls	r2, r3, #24
 80060a4:	d410      	bmi.n	80060c8 <__swhatbuf_r+0x3e>
 80060a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060aa:	e00e      	b.n	80060ca <__swhatbuf_r+0x40>
 80060ac:	466a      	mov	r2, sp
 80060ae:	f000 fd4f 	bl	8006b50 <_fstat_r>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	dbf2      	blt.n	800609c <__swhatbuf_r+0x12>
 80060b6:	9a01      	ldr	r2, [sp, #4]
 80060b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80060bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80060c0:	425a      	negs	r2, r3
 80060c2:	415a      	adcs	r2, r3
 80060c4:	602a      	str	r2, [r5, #0]
 80060c6:	e7ee      	b.n	80060a6 <__swhatbuf_r+0x1c>
 80060c8:	2340      	movs	r3, #64	; 0x40
 80060ca:	2000      	movs	r0, #0
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	b016      	add	sp, #88	; 0x58
 80060d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080060d4 <__smakebuf_r>:
 80060d4:	898b      	ldrh	r3, [r1, #12]
 80060d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060d8:	079d      	lsls	r5, r3, #30
 80060da:	4606      	mov	r6, r0
 80060dc:	460c      	mov	r4, r1
 80060de:	d507      	bpl.n	80060f0 <__smakebuf_r+0x1c>
 80060e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	6123      	str	r3, [r4, #16]
 80060e8:	2301      	movs	r3, #1
 80060ea:	6163      	str	r3, [r4, #20]
 80060ec:	b002      	add	sp, #8
 80060ee:	bd70      	pop	{r4, r5, r6, pc}
 80060f0:	ab01      	add	r3, sp, #4
 80060f2:	466a      	mov	r2, sp
 80060f4:	f7ff ffc9 	bl	800608a <__swhatbuf_r>
 80060f8:	9900      	ldr	r1, [sp, #0]
 80060fa:	4605      	mov	r5, r0
 80060fc:	4630      	mov	r0, r6
 80060fe:	f000 f88f 	bl	8006220 <_malloc_r>
 8006102:	b948      	cbnz	r0, 8006118 <__smakebuf_r+0x44>
 8006104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006108:	059a      	lsls	r2, r3, #22
 800610a:	d4ef      	bmi.n	80060ec <__smakebuf_r+0x18>
 800610c:	f023 0303 	bic.w	r3, r3, #3
 8006110:	f043 0302 	orr.w	r3, r3, #2
 8006114:	81a3      	strh	r3, [r4, #12]
 8006116:	e7e3      	b.n	80060e0 <__smakebuf_r+0xc>
 8006118:	4b0d      	ldr	r3, [pc, #52]	; (8006150 <__smakebuf_r+0x7c>)
 800611a:	62b3      	str	r3, [r6, #40]	; 0x28
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	6020      	str	r0, [r4, #0]
 8006120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006124:	81a3      	strh	r3, [r4, #12]
 8006126:	9b00      	ldr	r3, [sp, #0]
 8006128:	6163      	str	r3, [r4, #20]
 800612a:	9b01      	ldr	r3, [sp, #4]
 800612c:	6120      	str	r0, [r4, #16]
 800612e:	b15b      	cbz	r3, 8006148 <__smakebuf_r+0x74>
 8006130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006134:	4630      	mov	r0, r6
 8006136:	f000 fd1d 	bl	8006b74 <_isatty_r>
 800613a:	b128      	cbz	r0, 8006148 <__smakebuf_r+0x74>
 800613c:	89a3      	ldrh	r3, [r4, #12]
 800613e:	f023 0303 	bic.w	r3, r3, #3
 8006142:	f043 0301 	orr.w	r3, r3, #1
 8006146:	81a3      	strh	r3, [r4, #12]
 8006148:	89a0      	ldrh	r0, [r4, #12]
 800614a:	4305      	orrs	r5, r0
 800614c:	81a5      	strh	r5, [r4, #12]
 800614e:	e7cd      	b.n	80060ec <__smakebuf_r+0x18>
 8006150:	08005e99 	.word	0x08005e99

08006154 <memcpy>:
 8006154:	440a      	add	r2, r1
 8006156:	4291      	cmp	r1, r2
 8006158:	f100 33ff 	add.w	r3, r0, #4294967295
 800615c:	d100      	bne.n	8006160 <memcpy+0xc>
 800615e:	4770      	bx	lr
 8006160:	b510      	push	{r4, lr}
 8006162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800616a:	4291      	cmp	r1, r2
 800616c:	d1f9      	bne.n	8006162 <memcpy+0xe>
 800616e:	bd10      	pop	{r4, pc}

08006170 <memset>:
 8006170:	4402      	add	r2, r0
 8006172:	4603      	mov	r3, r0
 8006174:	4293      	cmp	r3, r2
 8006176:	d100      	bne.n	800617a <memset+0xa>
 8006178:	4770      	bx	lr
 800617a:	f803 1b01 	strb.w	r1, [r3], #1
 800617e:	e7f9      	b.n	8006174 <memset+0x4>

08006180 <_free_r>:
 8006180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006182:	2900      	cmp	r1, #0
 8006184:	d048      	beq.n	8006218 <_free_r+0x98>
 8006186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800618a:	9001      	str	r0, [sp, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f1a1 0404 	sub.w	r4, r1, #4
 8006192:	bfb8      	it	lt
 8006194:	18e4      	addlt	r4, r4, r3
 8006196:	f000 fd0f 	bl	8006bb8 <__malloc_lock>
 800619a:	4a20      	ldr	r2, [pc, #128]	; (800621c <_free_r+0x9c>)
 800619c:	9801      	ldr	r0, [sp, #4]
 800619e:	6813      	ldr	r3, [r2, #0]
 80061a0:	4615      	mov	r5, r2
 80061a2:	b933      	cbnz	r3, 80061b2 <_free_r+0x32>
 80061a4:	6063      	str	r3, [r4, #4]
 80061a6:	6014      	str	r4, [r2, #0]
 80061a8:	b003      	add	sp, #12
 80061aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061ae:	f000 bd09 	b.w	8006bc4 <__malloc_unlock>
 80061b2:	42a3      	cmp	r3, r4
 80061b4:	d90b      	bls.n	80061ce <_free_r+0x4e>
 80061b6:	6821      	ldr	r1, [r4, #0]
 80061b8:	1862      	adds	r2, r4, r1
 80061ba:	4293      	cmp	r3, r2
 80061bc:	bf04      	itt	eq
 80061be:	681a      	ldreq	r2, [r3, #0]
 80061c0:	685b      	ldreq	r3, [r3, #4]
 80061c2:	6063      	str	r3, [r4, #4]
 80061c4:	bf04      	itt	eq
 80061c6:	1852      	addeq	r2, r2, r1
 80061c8:	6022      	streq	r2, [r4, #0]
 80061ca:	602c      	str	r4, [r5, #0]
 80061cc:	e7ec      	b.n	80061a8 <_free_r+0x28>
 80061ce:	461a      	mov	r2, r3
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	b10b      	cbz	r3, 80061d8 <_free_r+0x58>
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	d9fa      	bls.n	80061ce <_free_r+0x4e>
 80061d8:	6811      	ldr	r1, [r2, #0]
 80061da:	1855      	adds	r5, r2, r1
 80061dc:	42a5      	cmp	r5, r4
 80061de:	d10b      	bne.n	80061f8 <_free_r+0x78>
 80061e0:	6824      	ldr	r4, [r4, #0]
 80061e2:	4421      	add	r1, r4
 80061e4:	1854      	adds	r4, r2, r1
 80061e6:	42a3      	cmp	r3, r4
 80061e8:	6011      	str	r1, [r2, #0]
 80061ea:	d1dd      	bne.n	80061a8 <_free_r+0x28>
 80061ec:	681c      	ldr	r4, [r3, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	6053      	str	r3, [r2, #4]
 80061f2:	4421      	add	r1, r4
 80061f4:	6011      	str	r1, [r2, #0]
 80061f6:	e7d7      	b.n	80061a8 <_free_r+0x28>
 80061f8:	d902      	bls.n	8006200 <_free_r+0x80>
 80061fa:	230c      	movs	r3, #12
 80061fc:	6003      	str	r3, [r0, #0]
 80061fe:	e7d3      	b.n	80061a8 <_free_r+0x28>
 8006200:	6825      	ldr	r5, [r4, #0]
 8006202:	1961      	adds	r1, r4, r5
 8006204:	428b      	cmp	r3, r1
 8006206:	bf04      	itt	eq
 8006208:	6819      	ldreq	r1, [r3, #0]
 800620a:	685b      	ldreq	r3, [r3, #4]
 800620c:	6063      	str	r3, [r4, #4]
 800620e:	bf04      	itt	eq
 8006210:	1949      	addeq	r1, r1, r5
 8006212:	6021      	streq	r1, [r4, #0]
 8006214:	6054      	str	r4, [r2, #4]
 8006216:	e7c7      	b.n	80061a8 <_free_r+0x28>
 8006218:	b003      	add	sp, #12
 800621a:	bd30      	pop	{r4, r5, pc}
 800621c:	20000254 	.word	0x20000254

08006220 <_malloc_r>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	1ccd      	adds	r5, r1, #3
 8006224:	f025 0503 	bic.w	r5, r5, #3
 8006228:	3508      	adds	r5, #8
 800622a:	2d0c      	cmp	r5, #12
 800622c:	bf38      	it	cc
 800622e:	250c      	movcc	r5, #12
 8006230:	2d00      	cmp	r5, #0
 8006232:	4606      	mov	r6, r0
 8006234:	db01      	blt.n	800623a <_malloc_r+0x1a>
 8006236:	42a9      	cmp	r1, r5
 8006238:	d903      	bls.n	8006242 <_malloc_r+0x22>
 800623a:	230c      	movs	r3, #12
 800623c:	6033      	str	r3, [r6, #0]
 800623e:	2000      	movs	r0, #0
 8006240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006242:	f000 fcb9 	bl	8006bb8 <__malloc_lock>
 8006246:	4921      	ldr	r1, [pc, #132]	; (80062cc <_malloc_r+0xac>)
 8006248:	680a      	ldr	r2, [r1, #0]
 800624a:	4614      	mov	r4, r2
 800624c:	b99c      	cbnz	r4, 8006276 <_malloc_r+0x56>
 800624e:	4f20      	ldr	r7, [pc, #128]	; (80062d0 <_malloc_r+0xb0>)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	b923      	cbnz	r3, 800625e <_malloc_r+0x3e>
 8006254:	4621      	mov	r1, r4
 8006256:	4630      	mov	r0, r6
 8006258:	f000 fb42 	bl	80068e0 <_sbrk_r>
 800625c:	6038      	str	r0, [r7, #0]
 800625e:	4629      	mov	r1, r5
 8006260:	4630      	mov	r0, r6
 8006262:	f000 fb3d 	bl	80068e0 <_sbrk_r>
 8006266:	1c43      	adds	r3, r0, #1
 8006268:	d123      	bne.n	80062b2 <_malloc_r+0x92>
 800626a:	230c      	movs	r3, #12
 800626c:	6033      	str	r3, [r6, #0]
 800626e:	4630      	mov	r0, r6
 8006270:	f000 fca8 	bl	8006bc4 <__malloc_unlock>
 8006274:	e7e3      	b.n	800623e <_malloc_r+0x1e>
 8006276:	6823      	ldr	r3, [r4, #0]
 8006278:	1b5b      	subs	r3, r3, r5
 800627a:	d417      	bmi.n	80062ac <_malloc_r+0x8c>
 800627c:	2b0b      	cmp	r3, #11
 800627e:	d903      	bls.n	8006288 <_malloc_r+0x68>
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	441c      	add	r4, r3
 8006284:	6025      	str	r5, [r4, #0]
 8006286:	e004      	b.n	8006292 <_malloc_r+0x72>
 8006288:	6863      	ldr	r3, [r4, #4]
 800628a:	42a2      	cmp	r2, r4
 800628c:	bf0c      	ite	eq
 800628e:	600b      	streq	r3, [r1, #0]
 8006290:	6053      	strne	r3, [r2, #4]
 8006292:	4630      	mov	r0, r6
 8006294:	f000 fc96 	bl	8006bc4 <__malloc_unlock>
 8006298:	f104 000b 	add.w	r0, r4, #11
 800629c:	1d23      	adds	r3, r4, #4
 800629e:	f020 0007 	bic.w	r0, r0, #7
 80062a2:	1ac2      	subs	r2, r0, r3
 80062a4:	d0cc      	beq.n	8006240 <_malloc_r+0x20>
 80062a6:	1a1b      	subs	r3, r3, r0
 80062a8:	50a3      	str	r3, [r4, r2]
 80062aa:	e7c9      	b.n	8006240 <_malloc_r+0x20>
 80062ac:	4622      	mov	r2, r4
 80062ae:	6864      	ldr	r4, [r4, #4]
 80062b0:	e7cc      	b.n	800624c <_malloc_r+0x2c>
 80062b2:	1cc4      	adds	r4, r0, #3
 80062b4:	f024 0403 	bic.w	r4, r4, #3
 80062b8:	42a0      	cmp	r0, r4
 80062ba:	d0e3      	beq.n	8006284 <_malloc_r+0x64>
 80062bc:	1a21      	subs	r1, r4, r0
 80062be:	4630      	mov	r0, r6
 80062c0:	f000 fb0e 	bl	80068e0 <_sbrk_r>
 80062c4:	3001      	adds	r0, #1
 80062c6:	d1dd      	bne.n	8006284 <_malloc_r+0x64>
 80062c8:	e7cf      	b.n	800626a <_malloc_r+0x4a>
 80062ca:	bf00      	nop
 80062cc:	20000254 	.word	0x20000254
 80062d0:	20000258 	.word	0x20000258

080062d4 <__sfputc_r>:
 80062d4:	6893      	ldr	r3, [r2, #8]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	2b00      	cmp	r3, #0
 80062da:	b410      	push	{r4}
 80062dc:	6093      	str	r3, [r2, #8]
 80062de:	da08      	bge.n	80062f2 <__sfputc_r+0x1e>
 80062e0:	6994      	ldr	r4, [r2, #24]
 80062e2:	42a3      	cmp	r3, r4
 80062e4:	db01      	blt.n	80062ea <__sfputc_r+0x16>
 80062e6:	290a      	cmp	r1, #10
 80062e8:	d103      	bne.n	80062f2 <__sfputc_r+0x1e>
 80062ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ee:	f000 bb4d 	b.w	800698c <__swbuf_r>
 80062f2:	6813      	ldr	r3, [r2, #0]
 80062f4:	1c58      	adds	r0, r3, #1
 80062f6:	6010      	str	r0, [r2, #0]
 80062f8:	7019      	strb	r1, [r3, #0]
 80062fa:	4608      	mov	r0, r1
 80062fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006300:	4770      	bx	lr

08006302 <__sfputs_r>:
 8006302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006304:	4606      	mov	r6, r0
 8006306:	460f      	mov	r7, r1
 8006308:	4614      	mov	r4, r2
 800630a:	18d5      	adds	r5, r2, r3
 800630c:	42ac      	cmp	r4, r5
 800630e:	d101      	bne.n	8006314 <__sfputs_r+0x12>
 8006310:	2000      	movs	r0, #0
 8006312:	e007      	b.n	8006324 <__sfputs_r+0x22>
 8006314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006318:	463a      	mov	r2, r7
 800631a:	4630      	mov	r0, r6
 800631c:	f7ff ffda 	bl	80062d4 <__sfputc_r>
 8006320:	1c43      	adds	r3, r0, #1
 8006322:	d1f3      	bne.n	800630c <__sfputs_r+0xa>
 8006324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006328 <_vfiprintf_r>:
 8006328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632c:	460d      	mov	r5, r1
 800632e:	b09d      	sub	sp, #116	; 0x74
 8006330:	4614      	mov	r4, r2
 8006332:	4698      	mov	r8, r3
 8006334:	4606      	mov	r6, r0
 8006336:	b118      	cbz	r0, 8006340 <_vfiprintf_r+0x18>
 8006338:	6983      	ldr	r3, [r0, #24]
 800633a:	b90b      	cbnz	r3, 8006340 <_vfiprintf_r+0x18>
 800633c:	f7ff fde0 	bl	8005f00 <__sinit>
 8006340:	4b89      	ldr	r3, [pc, #548]	; (8006568 <_vfiprintf_r+0x240>)
 8006342:	429d      	cmp	r5, r3
 8006344:	d11b      	bne.n	800637e <_vfiprintf_r+0x56>
 8006346:	6875      	ldr	r5, [r6, #4]
 8006348:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800634a:	07d9      	lsls	r1, r3, #31
 800634c:	d405      	bmi.n	800635a <_vfiprintf_r+0x32>
 800634e:	89ab      	ldrh	r3, [r5, #12]
 8006350:	059a      	lsls	r2, r3, #22
 8006352:	d402      	bmi.n	800635a <_vfiprintf_r+0x32>
 8006354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006356:	f7ff fe96 	bl	8006086 <__retarget_lock_acquire_recursive>
 800635a:	89ab      	ldrh	r3, [r5, #12]
 800635c:	071b      	lsls	r3, r3, #28
 800635e:	d501      	bpl.n	8006364 <_vfiprintf_r+0x3c>
 8006360:	692b      	ldr	r3, [r5, #16]
 8006362:	b9eb      	cbnz	r3, 80063a0 <_vfiprintf_r+0x78>
 8006364:	4629      	mov	r1, r5
 8006366:	4630      	mov	r0, r6
 8006368:	f000 fb74 	bl	8006a54 <__swsetup_r>
 800636c:	b1c0      	cbz	r0, 80063a0 <_vfiprintf_r+0x78>
 800636e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006370:	07dc      	lsls	r4, r3, #31
 8006372:	d50e      	bpl.n	8006392 <_vfiprintf_r+0x6a>
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	b01d      	add	sp, #116	; 0x74
 800637a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637e:	4b7b      	ldr	r3, [pc, #492]	; (800656c <_vfiprintf_r+0x244>)
 8006380:	429d      	cmp	r5, r3
 8006382:	d101      	bne.n	8006388 <_vfiprintf_r+0x60>
 8006384:	68b5      	ldr	r5, [r6, #8]
 8006386:	e7df      	b.n	8006348 <_vfiprintf_r+0x20>
 8006388:	4b79      	ldr	r3, [pc, #484]	; (8006570 <_vfiprintf_r+0x248>)
 800638a:	429d      	cmp	r5, r3
 800638c:	bf08      	it	eq
 800638e:	68f5      	ldreq	r5, [r6, #12]
 8006390:	e7da      	b.n	8006348 <_vfiprintf_r+0x20>
 8006392:	89ab      	ldrh	r3, [r5, #12]
 8006394:	0598      	lsls	r0, r3, #22
 8006396:	d4ed      	bmi.n	8006374 <_vfiprintf_r+0x4c>
 8006398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800639a:	f7ff fe75 	bl	8006088 <__retarget_lock_release_recursive>
 800639e:	e7e9      	b.n	8006374 <_vfiprintf_r+0x4c>
 80063a0:	2300      	movs	r3, #0
 80063a2:	9309      	str	r3, [sp, #36]	; 0x24
 80063a4:	2320      	movs	r3, #32
 80063a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80063ae:	2330      	movs	r3, #48	; 0x30
 80063b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006574 <_vfiprintf_r+0x24c>
 80063b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063b8:	f04f 0901 	mov.w	r9, #1
 80063bc:	4623      	mov	r3, r4
 80063be:	469a      	mov	sl, r3
 80063c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063c4:	b10a      	cbz	r2, 80063ca <_vfiprintf_r+0xa2>
 80063c6:	2a25      	cmp	r2, #37	; 0x25
 80063c8:	d1f9      	bne.n	80063be <_vfiprintf_r+0x96>
 80063ca:	ebba 0b04 	subs.w	fp, sl, r4
 80063ce:	d00b      	beq.n	80063e8 <_vfiprintf_r+0xc0>
 80063d0:	465b      	mov	r3, fp
 80063d2:	4622      	mov	r2, r4
 80063d4:	4629      	mov	r1, r5
 80063d6:	4630      	mov	r0, r6
 80063d8:	f7ff ff93 	bl	8006302 <__sfputs_r>
 80063dc:	3001      	adds	r0, #1
 80063de:	f000 80aa 	beq.w	8006536 <_vfiprintf_r+0x20e>
 80063e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063e4:	445a      	add	r2, fp
 80063e6:	9209      	str	r2, [sp, #36]	; 0x24
 80063e8:	f89a 3000 	ldrb.w	r3, [sl]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 80a2 	beq.w	8006536 <_vfiprintf_r+0x20e>
 80063f2:	2300      	movs	r3, #0
 80063f4:	f04f 32ff 	mov.w	r2, #4294967295
 80063f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063fc:	f10a 0a01 	add.w	sl, sl, #1
 8006400:	9304      	str	r3, [sp, #16]
 8006402:	9307      	str	r3, [sp, #28]
 8006404:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006408:	931a      	str	r3, [sp, #104]	; 0x68
 800640a:	4654      	mov	r4, sl
 800640c:	2205      	movs	r2, #5
 800640e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006412:	4858      	ldr	r0, [pc, #352]	; (8006574 <_vfiprintf_r+0x24c>)
 8006414:	f7f9 fefc 	bl	8000210 <memchr>
 8006418:	9a04      	ldr	r2, [sp, #16]
 800641a:	b9d8      	cbnz	r0, 8006454 <_vfiprintf_r+0x12c>
 800641c:	06d1      	lsls	r1, r2, #27
 800641e:	bf44      	itt	mi
 8006420:	2320      	movmi	r3, #32
 8006422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006426:	0713      	lsls	r3, r2, #28
 8006428:	bf44      	itt	mi
 800642a:	232b      	movmi	r3, #43	; 0x2b
 800642c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006430:	f89a 3000 	ldrb.w	r3, [sl]
 8006434:	2b2a      	cmp	r3, #42	; 0x2a
 8006436:	d015      	beq.n	8006464 <_vfiprintf_r+0x13c>
 8006438:	9a07      	ldr	r2, [sp, #28]
 800643a:	4654      	mov	r4, sl
 800643c:	2000      	movs	r0, #0
 800643e:	f04f 0c0a 	mov.w	ip, #10
 8006442:	4621      	mov	r1, r4
 8006444:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006448:	3b30      	subs	r3, #48	; 0x30
 800644a:	2b09      	cmp	r3, #9
 800644c:	d94e      	bls.n	80064ec <_vfiprintf_r+0x1c4>
 800644e:	b1b0      	cbz	r0, 800647e <_vfiprintf_r+0x156>
 8006450:	9207      	str	r2, [sp, #28]
 8006452:	e014      	b.n	800647e <_vfiprintf_r+0x156>
 8006454:	eba0 0308 	sub.w	r3, r0, r8
 8006458:	fa09 f303 	lsl.w	r3, r9, r3
 800645c:	4313      	orrs	r3, r2
 800645e:	9304      	str	r3, [sp, #16]
 8006460:	46a2      	mov	sl, r4
 8006462:	e7d2      	b.n	800640a <_vfiprintf_r+0xe2>
 8006464:	9b03      	ldr	r3, [sp, #12]
 8006466:	1d19      	adds	r1, r3, #4
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	9103      	str	r1, [sp, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	bfbb      	ittet	lt
 8006470:	425b      	neglt	r3, r3
 8006472:	f042 0202 	orrlt.w	r2, r2, #2
 8006476:	9307      	strge	r3, [sp, #28]
 8006478:	9307      	strlt	r3, [sp, #28]
 800647a:	bfb8      	it	lt
 800647c:	9204      	strlt	r2, [sp, #16]
 800647e:	7823      	ldrb	r3, [r4, #0]
 8006480:	2b2e      	cmp	r3, #46	; 0x2e
 8006482:	d10c      	bne.n	800649e <_vfiprintf_r+0x176>
 8006484:	7863      	ldrb	r3, [r4, #1]
 8006486:	2b2a      	cmp	r3, #42	; 0x2a
 8006488:	d135      	bne.n	80064f6 <_vfiprintf_r+0x1ce>
 800648a:	9b03      	ldr	r3, [sp, #12]
 800648c:	1d1a      	adds	r2, r3, #4
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	9203      	str	r2, [sp, #12]
 8006492:	2b00      	cmp	r3, #0
 8006494:	bfb8      	it	lt
 8006496:	f04f 33ff 	movlt.w	r3, #4294967295
 800649a:	3402      	adds	r4, #2
 800649c:	9305      	str	r3, [sp, #20]
 800649e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006584 <_vfiprintf_r+0x25c>
 80064a2:	7821      	ldrb	r1, [r4, #0]
 80064a4:	2203      	movs	r2, #3
 80064a6:	4650      	mov	r0, sl
 80064a8:	f7f9 feb2 	bl	8000210 <memchr>
 80064ac:	b140      	cbz	r0, 80064c0 <_vfiprintf_r+0x198>
 80064ae:	2340      	movs	r3, #64	; 0x40
 80064b0:	eba0 000a 	sub.w	r0, r0, sl
 80064b4:	fa03 f000 	lsl.w	r0, r3, r0
 80064b8:	9b04      	ldr	r3, [sp, #16]
 80064ba:	4303      	orrs	r3, r0
 80064bc:	3401      	adds	r4, #1
 80064be:	9304      	str	r3, [sp, #16]
 80064c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c4:	482c      	ldr	r0, [pc, #176]	; (8006578 <_vfiprintf_r+0x250>)
 80064c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064ca:	2206      	movs	r2, #6
 80064cc:	f7f9 fea0 	bl	8000210 <memchr>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d03f      	beq.n	8006554 <_vfiprintf_r+0x22c>
 80064d4:	4b29      	ldr	r3, [pc, #164]	; (800657c <_vfiprintf_r+0x254>)
 80064d6:	bb1b      	cbnz	r3, 8006520 <_vfiprintf_r+0x1f8>
 80064d8:	9b03      	ldr	r3, [sp, #12]
 80064da:	3307      	adds	r3, #7
 80064dc:	f023 0307 	bic.w	r3, r3, #7
 80064e0:	3308      	adds	r3, #8
 80064e2:	9303      	str	r3, [sp, #12]
 80064e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e6:	443b      	add	r3, r7
 80064e8:	9309      	str	r3, [sp, #36]	; 0x24
 80064ea:	e767      	b.n	80063bc <_vfiprintf_r+0x94>
 80064ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80064f0:	460c      	mov	r4, r1
 80064f2:	2001      	movs	r0, #1
 80064f4:	e7a5      	b.n	8006442 <_vfiprintf_r+0x11a>
 80064f6:	2300      	movs	r3, #0
 80064f8:	3401      	adds	r4, #1
 80064fa:	9305      	str	r3, [sp, #20]
 80064fc:	4619      	mov	r1, r3
 80064fe:	f04f 0c0a 	mov.w	ip, #10
 8006502:	4620      	mov	r0, r4
 8006504:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006508:	3a30      	subs	r2, #48	; 0x30
 800650a:	2a09      	cmp	r2, #9
 800650c:	d903      	bls.n	8006516 <_vfiprintf_r+0x1ee>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0c5      	beq.n	800649e <_vfiprintf_r+0x176>
 8006512:	9105      	str	r1, [sp, #20]
 8006514:	e7c3      	b.n	800649e <_vfiprintf_r+0x176>
 8006516:	fb0c 2101 	mla	r1, ip, r1, r2
 800651a:	4604      	mov	r4, r0
 800651c:	2301      	movs	r3, #1
 800651e:	e7f0      	b.n	8006502 <_vfiprintf_r+0x1da>
 8006520:	ab03      	add	r3, sp, #12
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	462a      	mov	r2, r5
 8006526:	4b16      	ldr	r3, [pc, #88]	; (8006580 <_vfiprintf_r+0x258>)
 8006528:	a904      	add	r1, sp, #16
 800652a:	4630      	mov	r0, r6
 800652c:	f3af 8000 	nop.w
 8006530:	4607      	mov	r7, r0
 8006532:	1c78      	adds	r0, r7, #1
 8006534:	d1d6      	bne.n	80064e4 <_vfiprintf_r+0x1bc>
 8006536:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006538:	07d9      	lsls	r1, r3, #31
 800653a:	d405      	bmi.n	8006548 <_vfiprintf_r+0x220>
 800653c:	89ab      	ldrh	r3, [r5, #12]
 800653e:	059a      	lsls	r2, r3, #22
 8006540:	d402      	bmi.n	8006548 <_vfiprintf_r+0x220>
 8006542:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006544:	f7ff fda0 	bl	8006088 <__retarget_lock_release_recursive>
 8006548:	89ab      	ldrh	r3, [r5, #12]
 800654a:	065b      	lsls	r3, r3, #25
 800654c:	f53f af12 	bmi.w	8006374 <_vfiprintf_r+0x4c>
 8006550:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006552:	e711      	b.n	8006378 <_vfiprintf_r+0x50>
 8006554:	ab03      	add	r3, sp, #12
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	462a      	mov	r2, r5
 800655a:	4b09      	ldr	r3, [pc, #36]	; (8006580 <_vfiprintf_r+0x258>)
 800655c:	a904      	add	r1, sp, #16
 800655e:	4630      	mov	r0, r6
 8006560:	f000 f880 	bl	8006664 <_printf_i>
 8006564:	e7e4      	b.n	8006530 <_vfiprintf_r+0x208>
 8006566:	bf00      	nop
 8006568:	08006c80 	.word	0x08006c80
 800656c:	08006ca0 	.word	0x08006ca0
 8006570:	08006c60 	.word	0x08006c60
 8006574:	08006cc4 	.word	0x08006cc4
 8006578:	08006cce 	.word	0x08006cce
 800657c:	00000000 	.word	0x00000000
 8006580:	08006303 	.word	0x08006303
 8006584:	08006cca 	.word	0x08006cca

08006588 <_printf_common>:
 8006588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800658c:	4616      	mov	r6, r2
 800658e:	4699      	mov	r9, r3
 8006590:	688a      	ldr	r2, [r1, #8]
 8006592:	690b      	ldr	r3, [r1, #16]
 8006594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006598:	4293      	cmp	r3, r2
 800659a:	bfb8      	it	lt
 800659c:	4613      	movlt	r3, r2
 800659e:	6033      	str	r3, [r6, #0]
 80065a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065a4:	4607      	mov	r7, r0
 80065a6:	460c      	mov	r4, r1
 80065a8:	b10a      	cbz	r2, 80065ae <_printf_common+0x26>
 80065aa:	3301      	adds	r3, #1
 80065ac:	6033      	str	r3, [r6, #0]
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	0699      	lsls	r1, r3, #26
 80065b2:	bf42      	ittt	mi
 80065b4:	6833      	ldrmi	r3, [r6, #0]
 80065b6:	3302      	addmi	r3, #2
 80065b8:	6033      	strmi	r3, [r6, #0]
 80065ba:	6825      	ldr	r5, [r4, #0]
 80065bc:	f015 0506 	ands.w	r5, r5, #6
 80065c0:	d106      	bne.n	80065d0 <_printf_common+0x48>
 80065c2:	f104 0a19 	add.w	sl, r4, #25
 80065c6:	68e3      	ldr	r3, [r4, #12]
 80065c8:	6832      	ldr	r2, [r6, #0]
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	42ab      	cmp	r3, r5
 80065ce:	dc26      	bgt.n	800661e <_printf_common+0x96>
 80065d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065d4:	1e13      	subs	r3, r2, #0
 80065d6:	6822      	ldr	r2, [r4, #0]
 80065d8:	bf18      	it	ne
 80065da:	2301      	movne	r3, #1
 80065dc:	0692      	lsls	r2, r2, #26
 80065de:	d42b      	bmi.n	8006638 <_printf_common+0xb0>
 80065e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065e4:	4649      	mov	r1, r9
 80065e6:	4638      	mov	r0, r7
 80065e8:	47c0      	blx	r8
 80065ea:	3001      	adds	r0, #1
 80065ec:	d01e      	beq.n	800662c <_printf_common+0xa4>
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	68e5      	ldr	r5, [r4, #12]
 80065f2:	6832      	ldr	r2, [r6, #0]
 80065f4:	f003 0306 	and.w	r3, r3, #6
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	bf08      	it	eq
 80065fc:	1aad      	subeq	r5, r5, r2
 80065fe:	68a3      	ldr	r3, [r4, #8]
 8006600:	6922      	ldr	r2, [r4, #16]
 8006602:	bf0c      	ite	eq
 8006604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006608:	2500      	movne	r5, #0
 800660a:	4293      	cmp	r3, r2
 800660c:	bfc4      	itt	gt
 800660e:	1a9b      	subgt	r3, r3, r2
 8006610:	18ed      	addgt	r5, r5, r3
 8006612:	2600      	movs	r6, #0
 8006614:	341a      	adds	r4, #26
 8006616:	42b5      	cmp	r5, r6
 8006618:	d11a      	bne.n	8006650 <_printf_common+0xc8>
 800661a:	2000      	movs	r0, #0
 800661c:	e008      	b.n	8006630 <_printf_common+0xa8>
 800661e:	2301      	movs	r3, #1
 8006620:	4652      	mov	r2, sl
 8006622:	4649      	mov	r1, r9
 8006624:	4638      	mov	r0, r7
 8006626:	47c0      	blx	r8
 8006628:	3001      	adds	r0, #1
 800662a:	d103      	bne.n	8006634 <_printf_common+0xac>
 800662c:	f04f 30ff 	mov.w	r0, #4294967295
 8006630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006634:	3501      	adds	r5, #1
 8006636:	e7c6      	b.n	80065c6 <_printf_common+0x3e>
 8006638:	18e1      	adds	r1, r4, r3
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	2030      	movs	r0, #48	; 0x30
 800663e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006642:	4422      	add	r2, r4
 8006644:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006648:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800664c:	3302      	adds	r3, #2
 800664e:	e7c7      	b.n	80065e0 <_printf_common+0x58>
 8006650:	2301      	movs	r3, #1
 8006652:	4622      	mov	r2, r4
 8006654:	4649      	mov	r1, r9
 8006656:	4638      	mov	r0, r7
 8006658:	47c0      	blx	r8
 800665a:	3001      	adds	r0, #1
 800665c:	d0e6      	beq.n	800662c <_printf_common+0xa4>
 800665e:	3601      	adds	r6, #1
 8006660:	e7d9      	b.n	8006616 <_printf_common+0x8e>
	...

08006664 <_printf_i>:
 8006664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006668:	460c      	mov	r4, r1
 800666a:	4691      	mov	r9, r2
 800666c:	7e27      	ldrb	r7, [r4, #24]
 800666e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006670:	2f78      	cmp	r7, #120	; 0x78
 8006672:	4680      	mov	r8, r0
 8006674:	469a      	mov	sl, r3
 8006676:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800667a:	d807      	bhi.n	800668c <_printf_i+0x28>
 800667c:	2f62      	cmp	r7, #98	; 0x62
 800667e:	d80a      	bhi.n	8006696 <_printf_i+0x32>
 8006680:	2f00      	cmp	r7, #0
 8006682:	f000 80d8 	beq.w	8006836 <_printf_i+0x1d2>
 8006686:	2f58      	cmp	r7, #88	; 0x58
 8006688:	f000 80a3 	beq.w	80067d2 <_printf_i+0x16e>
 800668c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006690:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006694:	e03a      	b.n	800670c <_printf_i+0xa8>
 8006696:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800669a:	2b15      	cmp	r3, #21
 800669c:	d8f6      	bhi.n	800668c <_printf_i+0x28>
 800669e:	a001      	add	r0, pc, #4	; (adr r0, 80066a4 <_printf_i+0x40>)
 80066a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80066a4:	080066fd 	.word	0x080066fd
 80066a8:	08006711 	.word	0x08006711
 80066ac:	0800668d 	.word	0x0800668d
 80066b0:	0800668d 	.word	0x0800668d
 80066b4:	0800668d 	.word	0x0800668d
 80066b8:	0800668d 	.word	0x0800668d
 80066bc:	08006711 	.word	0x08006711
 80066c0:	0800668d 	.word	0x0800668d
 80066c4:	0800668d 	.word	0x0800668d
 80066c8:	0800668d 	.word	0x0800668d
 80066cc:	0800668d 	.word	0x0800668d
 80066d0:	0800681d 	.word	0x0800681d
 80066d4:	08006741 	.word	0x08006741
 80066d8:	080067ff 	.word	0x080067ff
 80066dc:	0800668d 	.word	0x0800668d
 80066e0:	0800668d 	.word	0x0800668d
 80066e4:	0800683f 	.word	0x0800683f
 80066e8:	0800668d 	.word	0x0800668d
 80066ec:	08006741 	.word	0x08006741
 80066f0:	0800668d 	.word	0x0800668d
 80066f4:	0800668d 	.word	0x0800668d
 80066f8:	08006807 	.word	0x08006807
 80066fc:	680b      	ldr	r3, [r1, #0]
 80066fe:	1d1a      	adds	r2, r3, #4
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	600a      	str	r2, [r1, #0]
 8006704:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800670c:	2301      	movs	r3, #1
 800670e:	e0a3      	b.n	8006858 <_printf_i+0x1f4>
 8006710:	6825      	ldr	r5, [r4, #0]
 8006712:	6808      	ldr	r0, [r1, #0]
 8006714:	062e      	lsls	r6, r5, #24
 8006716:	f100 0304 	add.w	r3, r0, #4
 800671a:	d50a      	bpl.n	8006732 <_printf_i+0xce>
 800671c:	6805      	ldr	r5, [r0, #0]
 800671e:	600b      	str	r3, [r1, #0]
 8006720:	2d00      	cmp	r5, #0
 8006722:	da03      	bge.n	800672c <_printf_i+0xc8>
 8006724:	232d      	movs	r3, #45	; 0x2d
 8006726:	426d      	negs	r5, r5
 8006728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800672c:	485e      	ldr	r0, [pc, #376]	; (80068a8 <_printf_i+0x244>)
 800672e:	230a      	movs	r3, #10
 8006730:	e019      	b.n	8006766 <_printf_i+0x102>
 8006732:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006736:	6805      	ldr	r5, [r0, #0]
 8006738:	600b      	str	r3, [r1, #0]
 800673a:	bf18      	it	ne
 800673c:	b22d      	sxthne	r5, r5
 800673e:	e7ef      	b.n	8006720 <_printf_i+0xbc>
 8006740:	680b      	ldr	r3, [r1, #0]
 8006742:	6825      	ldr	r5, [r4, #0]
 8006744:	1d18      	adds	r0, r3, #4
 8006746:	6008      	str	r0, [r1, #0]
 8006748:	0628      	lsls	r0, r5, #24
 800674a:	d501      	bpl.n	8006750 <_printf_i+0xec>
 800674c:	681d      	ldr	r5, [r3, #0]
 800674e:	e002      	b.n	8006756 <_printf_i+0xf2>
 8006750:	0669      	lsls	r1, r5, #25
 8006752:	d5fb      	bpl.n	800674c <_printf_i+0xe8>
 8006754:	881d      	ldrh	r5, [r3, #0]
 8006756:	4854      	ldr	r0, [pc, #336]	; (80068a8 <_printf_i+0x244>)
 8006758:	2f6f      	cmp	r7, #111	; 0x6f
 800675a:	bf0c      	ite	eq
 800675c:	2308      	moveq	r3, #8
 800675e:	230a      	movne	r3, #10
 8006760:	2100      	movs	r1, #0
 8006762:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006766:	6866      	ldr	r6, [r4, #4]
 8006768:	60a6      	str	r6, [r4, #8]
 800676a:	2e00      	cmp	r6, #0
 800676c:	bfa2      	ittt	ge
 800676e:	6821      	ldrge	r1, [r4, #0]
 8006770:	f021 0104 	bicge.w	r1, r1, #4
 8006774:	6021      	strge	r1, [r4, #0]
 8006776:	b90d      	cbnz	r5, 800677c <_printf_i+0x118>
 8006778:	2e00      	cmp	r6, #0
 800677a:	d04d      	beq.n	8006818 <_printf_i+0x1b4>
 800677c:	4616      	mov	r6, r2
 800677e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006782:	fb03 5711 	mls	r7, r3, r1, r5
 8006786:	5dc7      	ldrb	r7, [r0, r7]
 8006788:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800678c:	462f      	mov	r7, r5
 800678e:	42bb      	cmp	r3, r7
 8006790:	460d      	mov	r5, r1
 8006792:	d9f4      	bls.n	800677e <_printf_i+0x11a>
 8006794:	2b08      	cmp	r3, #8
 8006796:	d10b      	bne.n	80067b0 <_printf_i+0x14c>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	07df      	lsls	r7, r3, #31
 800679c:	d508      	bpl.n	80067b0 <_printf_i+0x14c>
 800679e:	6923      	ldr	r3, [r4, #16]
 80067a0:	6861      	ldr	r1, [r4, #4]
 80067a2:	4299      	cmp	r1, r3
 80067a4:	bfde      	ittt	le
 80067a6:	2330      	movle	r3, #48	; 0x30
 80067a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067b0:	1b92      	subs	r2, r2, r6
 80067b2:	6122      	str	r2, [r4, #16]
 80067b4:	f8cd a000 	str.w	sl, [sp]
 80067b8:	464b      	mov	r3, r9
 80067ba:	aa03      	add	r2, sp, #12
 80067bc:	4621      	mov	r1, r4
 80067be:	4640      	mov	r0, r8
 80067c0:	f7ff fee2 	bl	8006588 <_printf_common>
 80067c4:	3001      	adds	r0, #1
 80067c6:	d14c      	bne.n	8006862 <_printf_i+0x1fe>
 80067c8:	f04f 30ff 	mov.w	r0, #4294967295
 80067cc:	b004      	add	sp, #16
 80067ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d2:	4835      	ldr	r0, [pc, #212]	; (80068a8 <_printf_i+0x244>)
 80067d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	680e      	ldr	r6, [r1, #0]
 80067dc:	061f      	lsls	r7, r3, #24
 80067de:	f856 5b04 	ldr.w	r5, [r6], #4
 80067e2:	600e      	str	r6, [r1, #0]
 80067e4:	d514      	bpl.n	8006810 <_printf_i+0x1ac>
 80067e6:	07d9      	lsls	r1, r3, #31
 80067e8:	bf44      	itt	mi
 80067ea:	f043 0320 	orrmi.w	r3, r3, #32
 80067ee:	6023      	strmi	r3, [r4, #0]
 80067f0:	b91d      	cbnz	r5, 80067fa <_printf_i+0x196>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	f023 0320 	bic.w	r3, r3, #32
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	2310      	movs	r3, #16
 80067fc:	e7b0      	b.n	8006760 <_printf_i+0xfc>
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	f043 0320 	orr.w	r3, r3, #32
 8006804:	6023      	str	r3, [r4, #0]
 8006806:	2378      	movs	r3, #120	; 0x78
 8006808:	4828      	ldr	r0, [pc, #160]	; (80068ac <_printf_i+0x248>)
 800680a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800680e:	e7e3      	b.n	80067d8 <_printf_i+0x174>
 8006810:	065e      	lsls	r6, r3, #25
 8006812:	bf48      	it	mi
 8006814:	b2ad      	uxthmi	r5, r5
 8006816:	e7e6      	b.n	80067e6 <_printf_i+0x182>
 8006818:	4616      	mov	r6, r2
 800681a:	e7bb      	b.n	8006794 <_printf_i+0x130>
 800681c:	680b      	ldr	r3, [r1, #0]
 800681e:	6826      	ldr	r6, [r4, #0]
 8006820:	6960      	ldr	r0, [r4, #20]
 8006822:	1d1d      	adds	r5, r3, #4
 8006824:	600d      	str	r5, [r1, #0]
 8006826:	0635      	lsls	r5, r6, #24
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	d501      	bpl.n	8006830 <_printf_i+0x1cc>
 800682c:	6018      	str	r0, [r3, #0]
 800682e:	e002      	b.n	8006836 <_printf_i+0x1d2>
 8006830:	0671      	lsls	r1, r6, #25
 8006832:	d5fb      	bpl.n	800682c <_printf_i+0x1c8>
 8006834:	8018      	strh	r0, [r3, #0]
 8006836:	2300      	movs	r3, #0
 8006838:	6123      	str	r3, [r4, #16]
 800683a:	4616      	mov	r6, r2
 800683c:	e7ba      	b.n	80067b4 <_printf_i+0x150>
 800683e:	680b      	ldr	r3, [r1, #0]
 8006840:	1d1a      	adds	r2, r3, #4
 8006842:	600a      	str	r2, [r1, #0]
 8006844:	681e      	ldr	r6, [r3, #0]
 8006846:	6862      	ldr	r2, [r4, #4]
 8006848:	2100      	movs	r1, #0
 800684a:	4630      	mov	r0, r6
 800684c:	f7f9 fce0 	bl	8000210 <memchr>
 8006850:	b108      	cbz	r0, 8006856 <_printf_i+0x1f2>
 8006852:	1b80      	subs	r0, r0, r6
 8006854:	6060      	str	r0, [r4, #4]
 8006856:	6863      	ldr	r3, [r4, #4]
 8006858:	6123      	str	r3, [r4, #16]
 800685a:	2300      	movs	r3, #0
 800685c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006860:	e7a8      	b.n	80067b4 <_printf_i+0x150>
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	4632      	mov	r2, r6
 8006866:	4649      	mov	r1, r9
 8006868:	4640      	mov	r0, r8
 800686a:	47d0      	blx	sl
 800686c:	3001      	adds	r0, #1
 800686e:	d0ab      	beq.n	80067c8 <_printf_i+0x164>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	079b      	lsls	r3, r3, #30
 8006874:	d413      	bmi.n	800689e <_printf_i+0x23a>
 8006876:	68e0      	ldr	r0, [r4, #12]
 8006878:	9b03      	ldr	r3, [sp, #12]
 800687a:	4298      	cmp	r0, r3
 800687c:	bfb8      	it	lt
 800687e:	4618      	movlt	r0, r3
 8006880:	e7a4      	b.n	80067cc <_printf_i+0x168>
 8006882:	2301      	movs	r3, #1
 8006884:	4632      	mov	r2, r6
 8006886:	4649      	mov	r1, r9
 8006888:	4640      	mov	r0, r8
 800688a:	47d0      	blx	sl
 800688c:	3001      	adds	r0, #1
 800688e:	d09b      	beq.n	80067c8 <_printf_i+0x164>
 8006890:	3501      	adds	r5, #1
 8006892:	68e3      	ldr	r3, [r4, #12]
 8006894:	9903      	ldr	r1, [sp, #12]
 8006896:	1a5b      	subs	r3, r3, r1
 8006898:	42ab      	cmp	r3, r5
 800689a:	dcf2      	bgt.n	8006882 <_printf_i+0x21e>
 800689c:	e7eb      	b.n	8006876 <_printf_i+0x212>
 800689e:	2500      	movs	r5, #0
 80068a0:	f104 0619 	add.w	r6, r4, #25
 80068a4:	e7f5      	b.n	8006892 <_printf_i+0x22e>
 80068a6:	bf00      	nop
 80068a8:	08006cd5 	.word	0x08006cd5
 80068ac:	08006ce6 	.word	0x08006ce6

080068b0 <iprintf>:
 80068b0:	b40f      	push	{r0, r1, r2, r3}
 80068b2:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <iprintf+0x2c>)
 80068b4:	b513      	push	{r0, r1, r4, lr}
 80068b6:	681c      	ldr	r4, [r3, #0]
 80068b8:	b124      	cbz	r4, 80068c4 <iprintf+0x14>
 80068ba:	69a3      	ldr	r3, [r4, #24]
 80068bc:	b913      	cbnz	r3, 80068c4 <iprintf+0x14>
 80068be:	4620      	mov	r0, r4
 80068c0:	f7ff fb1e 	bl	8005f00 <__sinit>
 80068c4:	ab05      	add	r3, sp, #20
 80068c6:	9a04      	ldr	r2, [sp, #16]
 80068c8:	68a1      	ldr	r1, [r4, #8]
 80068ca:	9301      	str	r3, [sp, #4]
 80068cc:	4620      	mov	r0, r4
 80068ce:	f7ff fd2b 	bl	8006328 <_vfiprintf_r>
 80068d2:	b002      	add	sp, #8
 80068d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d8:	b004      	add	sp, #16
 80068da:	4770      	bx	lr
 80068dc:	200001c8 	.word	0x200001c8

080068e0 <_sbrk_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	4d06      	ldr	r5, [pc, #24]	; (80068fc <_sbrk_r+0x1c>)
 80068e4:	2300      	movs	r3, #0
 80068e6:	4604      	mov	r4, r0
 80068e8:	4608      	mov	r0, r1
 80068ea:	602b      	str	r3, [r5, #0]
 80068ec:	f7fa fb64 	bl	8000fb8 <_sbrk>
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	d102      	bne.n	80068fa <_sbrk_r+0x1a>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	b103      	cbz	r3, 80068fa <_sbrk_r+0x1a>
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	bd38      	pop	{r3, r4, r5, pc}
 80068fc:	20000fe4 	.word	0x20000fe4

08006900 <__sread>:
 8006900:	b510      	push	{r4, lr}
 8006902:	460c      	mov	r4, r1
 8006904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006908:	f000 f962 	bl	8006bd0 <_read_r>
 800690c:	2800      	cmp	r0, #0
 800690e:	bfab      	itete	ge
 8006910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006912:	89a3      	ldrhlt	r3, [r4, #12]
 8006914:	181b      	addge	r3, r3, r0
 8006916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800691a:	bfac      	ite	ge
 800691c:	6563      	strge	r3, [r4, #84]	; 0x54
 800691e:	81a3      	strhlt	r3, [r4, #12]
 8006920:	bd10      	pop	{r4, pc}

08006922 <__swrite>:
 8006922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006926:	461f      	mov	r7, r3
 8006928:	898b      	ldrh	r3, [r1, #12]
 800692a:	05db      	lsls	r3, r3, #23
 800692c:	4605      	mov	r5, r0
 800692e:	460c      	mov	r4, r1
 8006930:	4616      	mov	r6, r2
 8006932:	d505      	bpl.n	8006940 <__swrite+0x1e>
 8006934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006938:	2302      	movs	r3, #2
 800693a:	2200      	movs	r2, #0
 800693c:	f000 f92a 	bl	8006b94 <_lseek_r>
 8006940:	89a3      	ldrh	r3, [r4, #12]
 8006942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800694a:	81a3      	strh	r3, [r4, #12]
 800694c:	4632      	mov	r2, r6
 800694e:	463b      	mov	r3, r7
 8006950:	4628      	mov	r0, r5
 8006952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006956:	f000 b86b 	b.w	8006a30 <_write_r>

0800695a <__sseek>:
 800695a:	b510      	push	{r4, lr}
 800695c:	460c      	mov	r4, r1
 800695e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006962:	f000 f917 	bl	8006b94 <_lseek_r>
 8006966:	1c43      	adds	r3, r0, #1
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	bf15      	itete	ne
 800696c:	6560      	strne	r0, [r4, #84]	; 0x54
 800696e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006976:	81a3      	strheq	r3, [r4, #12]
 8006978:	bf18      	it	ne
 800697a:	81a3      	strhne	r3, [r4, #12]
 800697c:	bd10      	pop	{r4, pc}

0800697e <__sclose>:
 800697e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006982:	f000 b8d5 	b.w	8006b30 <_close_r>

08006986 <_times_r>:
 8006986:	4608      	mov	r0, r1
 8006988:	f7fa bb09 	b.w	8000f9e <_times>

0800698c <__swbuf_r>:
 800698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698e:	460e      	mov	r6, r1
 8006990:	4614      	mov	r4, r2
 8006992:	4605      	mov	r5, r0
 8006994:	b118      	cbz	r0, 800699e <__swbuf_r+0x12>
 8006996:	6983      	ldr	r3, [r0, #24]
 8006998:	b90b      	cbnz	r3, 800699e <__swbuf_r+0x12>
 800699a:	f7ff fab1 	bl	8005f00 <__sinit>
 800699e:	4b21      	ldr	r3, [pc, #132]	; (8006a24 <__swbuf_r+0x98>)
 80069a0:	429c      	cmp	r4, r3
 80069a2:	d12b      	bne.n	80069fc <__swbuf_r+0x70>
 80069a4:	686c      	ldr	r4, [r5, #4]
 80069a6:	69a3      	ldr	r3, [r4, #24]
 80069a8:	60a3      	str	r3, [r4, #8]
 80069aa:	89a3      	ldrh	r3, [r4, #12]
 80069ac:	071a      	lsls	r2, r3, #28
 80069ae:	d52f      	bpl.n	8006a10 <__swbuf_r+0x84>
 80069b0:	6923      	ldr	r3, [r4, #16]
 80069b2:	b36b      	cbz	r3, 8006a10 <__swbuf_r+0x84>
 80069b4:	6923      	ldr	r3, [r4, #16]
 80069b6:	6820      	ldr	r0, [r4, #0]
 80069b8:	1ac0      	subs	r0, r0, r3
 80069ba:	6963      	ldr	r3, [r4, #20]
 80069bc:	b2f6      	uxtb	r6, r6
 80069be:	4283      	cmp	r3, r0
 80069c0:	4637      	mov	r7, r6
 80069c2:	dc04      	bgt.n	80069ce <__swbuf_r+0x42>
 80069c4:	4621      	mov	r1, r4
 80069c6:	4628      	mov	r0, r5
 80069c8:	f7ff fa06 	bl	8005dd8 <_fflush_r>
 80069cc:	bb30      	cbnz	r0, 8006a1c <__swbuf_r+0x90>
 80069ce:	68a3      	ldr	r3, [r4, #8]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	60a3      	str	r3, [r4, #8]
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	6022      	str	r2, [r4, #0]
 80069da:	701e      	strb	r6, [r3, #0]
 80069dc:	6963      	ldr	r3, [r4, #20]
 80069de:	3001      	adds	r0, #1
 80069e0:	4283      	cmp	r3, r0
 80069e2:	d004      	beq.n	80069ee <__swbuf_r+0x62>
 80069e4:	89a3      	ldrh	r3, [r4, #12]
 80069e6:	07db      	lsls	r3, r3, #31
 80069e8:	d506      	bpl.n	80069f8 <__swbuf_r+0x6c>
 80069ea:	2e0a      	cmp	r6, #10
 80069ec:	d104      	bne.n	80069f8 <__swbuf_r+0x6c>
 80069ee:	4621      	mov	r1, r4
 80069f0:	4628      	mov	r0, r5
 80069f2:	f7ff f9f1 	bl	8005dd8 <_fflush_r>
 80069f6:	b988      	cbnz	r0, 8006a1c <__swbuf_r+0x90>
 80069f8:	4638      	mov	r0, r7
 80069fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069fc:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <__swbuf_r+0x9c>)
 80069fe:	429c      	cmp	r4, r3
 8006a00:	d101      	bne.n	8006a06 <__swbuf_r+0x7a>
 8006a02:	68ac      	ldr	r4, [r5, #8]
 8006a04:	e7cf      	b.n	80069a6 <__swbuf_r+0x1a>
 8006a06:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <__swbuf_r+0xa0>)
 8006a08:	429c      	cmp	r4, r3
 8006a0a:	bf08      	it	eq
 8006a0c:	68ec      	ldreq	r4, [r5, #12]
 8006a0e:	e7ca      	b.n	80069a6 <__swbuf_r+0x1a>
 8006a10:	4621      	mov	r1, r4
 8006a12:	4628      	mov	r0, r5
 8006a14:	f000 f81e 	bl	8006a54 <__swsetup_r>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d0cb      	beq.n	80069b4 <__swbuf_r+0x28>
 8006a1c:	f04f 37ff 	mov.w	r7, #4294967295
 8006a20:	e7ea      	b.n	80069f8 <__swbuf_r+0x6c>
 8006a22:	bf00      	nop
 8006a24:	08006c80 	.word	0x08006c80
 8006a28:	08006ca0 	.word	0x08006ca0
 8006a2c:	08006c60 	.word	0x08006c60

08006a30 <_write_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4d07      	ldr	r5, [pc, #28]	; (8006a50 <_write_r+0x20>)
 8006a34:	4604      	mov	r4, r0
 8006a36:	4608      	mov	r0, r1
 8006a38:	4611      	mov	r1, r2
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	602a      	str	r2, [r5, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f7fa fa5d 	bl	8000efe <_write>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_write_r+0x1e>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_write_r+0x1e>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	20000fe4 	.word	0x20000fe4

08006a54 <__swsetup_r>:
 8006a54:	4b32      	ldr	r3, [pc, #200]	; (8006b20 <__swsetup_r+0xcc>)
 8006a56:	b570      	push	{r4, r5, r6, lr}
 8006a58:	681d      	ldr	r5, [r3, #0]
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	460c      	mov	r4, r1
 8006a5e:	b125      	cbz	r5, 8006a6a <__swsetup_r+0x16>
 8006a60:	69ab      	ldr	r3, [r5, #24]
 8006a62:	b913      	cbnz	r3, 8006a6a <__swsetup_r+0x16>
 8006a64:	4628      	mov	r0, r5
 8006a66:	f7ff fa4b 	bl	8005f00 <__sinit>
 8006a6a:	4b2e      	ldr	r3, [pc, #184]	; (8006b24 <__swsetup_r+0xd0>)
 8006a6c:	429c      	cmp	r4, r3
 8006a6e:	d10f      	bne.n	8006a90 <__swsetup_r+0x3c>
 8006a70:	686c      	ldr	r4, [r5, #4]
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a78:	0719      	lsls	r1, r3, #28
 8006a7a:	d42c      	bmi.n	8006ad6 <__swsetup_r+0x82>
 8006a7c:	06dd      	lsls	r5, r3, #27
 8006a7e:	d411      	bmi.n	8006aa4 <__swsetup_r+0x50>
 8006a80:	2309      	movs	r3, #9
 8006a82:	6033      	str	r3, [r6, #0]
 8006a84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a88:	81a3      	strh	r3, [r4, #12]
 8006a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8e:	e03e      	b.n	8006b0e <__swsetup_r+0xba>
 8006a90:	4b25      	ldr	r3, [pc, #148]	; (8006b28 <__swsetup_r+0xd4>)
 8006a92:	429c      	cmp	r4, r3
 8006a94:	d101      	bne.n	8006a9a <__swsetup_r+0x46>
 8006a96:	68ac      	ldr	r4, [r5, #8]
 8006a98:	e7eb      	b.n	8006a72 <__swsetup_r+0x1e>
 8006a9a:	4b24      	ldr	r3, [pc, #144]	; (8006b2c <__swsetup_r+0xd8>)
 8006a9c:	429c      	cmp	r4, r3
 8006a9e:	bf08      	it	eq
 8006aa0:	68ec      	ldreq	r4, [r5, #12]
 8006aa2:	e7e6      	b.n	8006a72 <__swsetup_r+0x1e>
 8006aa4:	0758      	lsls	r0, r3, #29
 8006aa6:	d512      	bpl.n	8006ace <__swsetup_r+0x7a>
 8006aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aaa:	b141      	cbz	r1, 8006abe <__swsetup_r+0x6a>
 8006aac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ab0:	4299      	cmp	r1, r3
 8006ab2:	d002      	beq.n	8006aba <__swsetup_r+0x66>
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f7ff fb63 	bl	8006180 <_free_r>
 8006aba:	2300      	movs	r3, #0
 8006abc:	6363      	str	r3, [r4, #52]	; 0x34
 8006abe:	89a3      	ldrh	r3, [r4, #12]
 8006ac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ac4:	81a3      	strh	r3, [r4, #12]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	6063      	str	r3, [r4, #4]
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	89a3      	ldrh	r3, [r4, #12]
 8006ad0:	f043 0308 	orr.w	r3, r3, #8
 8006ad4:	81a3      	strh	r3, [r4, #12]
 8006ad6:	6923      	ldr	r3, [r4, #16]
 8006ad8:	b94b      	cbnz	r3, 8006aee <__swsetup_r+0x9a>
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae4:	d003      	beq.n	8006aee <__swsetup_r+0x9a>
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4630      	mov	r0, r6
 8006aea:	f7ff faf3 	bl	80060d4 <__smakebuf_r>
 8006aee:	89a0      	ldrh	r0, [r4, #12]
 8006af0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006af4:	f010 0301 	ands.w	r3, r0, #1
 8006af8:	d00a      	beq.n	8006b10 <__swsetup_r+0xbc>
 8006afa:	2300      	movs	r3, #0
 8006afc:	60a3      	str	r3, [r4, #8]
 8006afe:	6963      	ldr	r3, [r4, #20]
 8006b00:	425b      	negs	r3, r3
 8006b02:	61a3      	str	r3, [r4, #24]
 8006b04:	6923      	ldr	r3, [r4, #16]
 8006b06:	b943      	cbnz	r3, 8006b1a <__swsetup_r+0xc6>
 8006b08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b0c:	d1ba      	bne.n	8006a84 <__swsetup_r+0x30>
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	0781      	lsls	r1, r0, #30
 8006b12:	bf58      	it	pl
 8006b14:	6963      	ldrpl	r3, [r4, #20]
 8006b16:	60a3      	str	r3, [r4, #8]
 8006b18:	e7f4      	b.n	8006b04 <__swsetup_r+0xb0>
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	e7f7      	b.n	8006b0e <__swsetup_r+0xba>
 8006b1e:	bf00      	nop
 8006b20:	200001c8 	.word	0x200001c8
 8006b24:	08006c80 	.word	0x08006c80
 8006b28:	08006ca0 	.word	0x08006ca0
 8006b2c:	08006c60 	.word	0x08006c60

08006b30 <_close_r>:
 8006b30:	b538      	push	{r3, r4, r5, lr}
 8006b32:	4d06      	ldr	r5, [pc, #24]	; (8006b4c <_close_r+0x1c>)
 8006b34:	2300      	movs	r3, #0
 8006b36:	4604      	mov	r4, r0
 8006b38:	4608      	mov	r0, r1
 8006b3a:	602b      	str	r3, [r5, #0]
 8006b3c:	f7fa f9fb 	bl	8000f36 <_close>
 8006b40:	1c43      	adds	r3, r0, #1
 8006b42:	d102      	bne.n	8006b4a <_close_r+0x1a>
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	b103      	cbz	r3, 8006b4a <_close_r+0x1a>
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	bd38      	pop	{r3, r4, r5, pc}
 8006b4c:	20000fe4 	.word	0x20000fe4

08006b50 <_fstat_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	4d07      	ldr	r5, [pc, #28]	; (8006b70 <_fstat_r+0x20>)
 8006b54:	2300      	movs	r3, #0
 8006b56:	4604      	mov	r4, r0
 8006b58:	4608      	mov	r0, r1
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	602b      	str	r3, [r5, #0]
 8006b5e:	f7fa f9f6 	bl	8000f4e <_fstat>
 8006b62:	1c43      	adds	r3, r0, #1
 8006b64:	d102      	bne.n	8006b6c <_fstat_r+0x1c>
 8006b66:	682b      	ldr	r3, [r5, #0]
 8006b68:	b103      	cbz	r3, 8006b6c <_fstat_r+0x1c>
 8006b6a:	6023      	str	r3, [r4, #0]
 8006b6c:	bd38      	pop	{r3, r4, r5, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000fe4 	.word	0x20000fe4

08006b74 <_isatty_r>:
 8006b74:	b538      	push	{r3, r4, r5, lr}
 8006b76:	4d06      	ldr	r5, [pc, #24]	; (8006b90 <_isatty_r+0x1c>)
 8006b78:	2300      	movs	r3, #0
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	602b      	str	r3, [r5, #0]
 8006b80:	f7fa f9f5 	bl	8000f6e <_isatty>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d102      	bne.n	8006b8e <_isatty_r+0x1a>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	b103      	cbz	r3, 8006b8e <_isatty_r+0x1a>
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	20000fe4 	.word	0x20000fe4

08006b94 <_lseek_r>:
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	4d07      	ldr	r5, [pc, #28]	; (8006bb4 <_lseek_r+0x20>)
 8006b98:	4604      	mov	r4, r0
 8006b9a:	4608      	mov	r0, r1
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	602a      	str	r2, [r5, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f7fa f9ee 	bl	8000f84 <_lseek>
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	d102      	bne.n	8006bb2 <_lseek_r+0x1e>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	b103      	cbz	r3, 8006bb2 <_lseek_r+0x1e>
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	bd38      	pop	{r3, r4, r5, pc}
 8006bb4:	20000fe4 	.word	0x20000fe4

08006bb8 <__malloc_lock>:
 8006bb8:	4801      	ldr	r0, [pc, #4]	; (8006bc0 <__malloc_lock+0x8>)
 8006bba:	f7ff ba64 	b.w	8006086 <__retarget_lock_acquire_recursive>
 8006bbe:	bf00      	nop
 8006bc0:	20000fdc 	.word	0x20000fdc

08006bc4 <__malloc_unlock>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	; (8006bcc <__malloc_unlock+0x8>)
 8006bc6:	f7ff ba5f 	b.w	8006088 <__retarget_lock_release_recursive>
 8006bca:	bf00      	nop
 8006bcc:	20000fdc 	.word	0x20000fdc

08006bd0 <_read_r>:
 8006bd0:	b538      	push	{r3, r4, r5, lr}
 8006bd2:	4d07      	ldr	r5, [pc, #28]	; (8006bf0 <_read_r+0x20>)
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	4608      	mov	r0, r1
 8006bd8:	4611      	mov	r1, r2
 8006bda:	2200      	movs	r2, #0
 8006bdc:	602a      	str	r2, [r5, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	f7fa f970 	bl	8000ec4 <_read>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d102      	bne.n	8006bee <_read_r+0x1e>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	b103      	cbz	r3, 8006bee <_read_r+0x1e>
 8006bec:	6023      	str	r3, [r4, #0]
 8006bee:	bd38      	pop	{r3, r4, r5, pc}
 8006bf0:	20000fe4 	.word	0x20000fe4

08006bf4 <_init>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	bf00      	nop
 8006bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfa:	bc08      	pop	{r3}
 8006bfc:	469e      	mov	lr, r3
 8006bfe:	4770      	bx	lr

08006c00 <_fini>:
 8006c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c02:	bf00      	nop
 8006c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c06:	bc08      	pop	{r3}
 8006c08:	469e      	mov	lr, r3
 8006c0a:	4770      	bx	lr
