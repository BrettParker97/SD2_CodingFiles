
Rover_Req1_IRTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbd8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800cd98  0800cd98  0001cd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d028  0800d028  00020330  2**0
                  CONTENTS
  4 .ARM          00000008  0800d028  0800d028  0001d028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d030  0800d030  00020330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d030  0800d030  0001d030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d034  0800d034  0001d034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  0800d038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f0  20000330  0800d368  00020330  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001620  0800d368  00021620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fadc  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004765  00000000  00000000  0004fe3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e30  00000000  00000000  000545a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf0  00000000  00000000  000563d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037485  00000000  00000000  000580c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025050  00000000  00000000  0008f54d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013f25a  00000000  00000000  000b459d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001f37f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000895c  00000000  00000000  001f384c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000330 	.word	0x20000330
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800cd80 	.word	0x0800cd80

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000334 	.word	0x20000334
 80001fc:	0800cd80 	.word	0x0800cd80

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <__io_putchar>:

/* USER CODE BEGIN PFP */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)&ch, 1, 0xFFFF);
 80005a0:	1d39      	adds	r1, r7, #4
 80005a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a6:	2201      	movs	r2, #1
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <__io_putchar+0x20>)
 80005aa:	f00a fb81 	bl	800acb0 <HAL_UART_Transmit>
	return ch;
 80005ae:	687b      	ldr	r3, [r7, #4]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200014c8 	.word	0x200014c8

080005bc <main>:

int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	HAL_Init();
 80005c2:	f006 fb8b 	bl	8006cdc <HAL_Init>

	SystemClock_Config();
 80005c6:	f000 f94f 	bl	8000868 <SystemClock_Config>

	MX_GPIO_Init();
 80005ca:	f000 fb71 	bl	8000cb0 <MX_GPIO_Init>
	MX_I2C1_Init();
 80005ce:	f000 f9af 	bl	8000930 <MX_I2C1_Init>
	MX_I2C4_Init();
 80005d2:	f000 f9ed 	bl	80009b0 <MX_I2C4_Init>
	MX_TIM16_Init();
 80005d6:	f000 fa7d 	bl	8000ad4 <MX_TIM16_Init>
	MX_UART4_Init();
 80005da:	f000 faf3 	bl	8000bc4 <MX_UART4_Init>
	MX_RTC_Init();
 80005de:	f000 fa27 	bl	8000a30 <MX_RTC_Init>
	MX_USB_OTG_FS_PCD_Init();
 80005e2:	f000 fb3b 	bl	8000c5c <MX_USB_OTG_FS_PCD_Init>

	SetMotors(MOVE_STOP);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f006 fae4 	bl	8006bb4 <SetMotors>
	Brett_GetTime(&hrtc, &timeStruct);
 80005ec:	4933      	ldr	r1, [pc, #204]	; (80006bc <main+0x100>)
 80005ee:	4834      	ldr	r0, [pc, #208]	; (80006c0 <main+0x104>)
 80005f0:	f006 fa60 	bl	8006ab4 <Brett_GetTime>

	// init IR sensors
	brett_status = 0;
 80005f4:	4b33      	ldr	r3, [pc, #204]	; (80006c4 <main+0x108>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
	brett_status = Brett_IR_InitIrSensors(dev, &hi2c1);
 80005fa:	4933      	ldr	r1, [pc, #204]	; (80006c8 <main+0x10c>)
 80005fc:	4833      	ldr	r0, [pc, #204]	; (80006cc <main+0x110>)
 80005fe:	f006 f909 	bl	8006814 <Brett_IR_InitIrSensors>
 8000602:	4603      	mov	r3, r0
 8000604:	4a2f      	ldr	r2, [pc, #188]	; (80006c4 <main+0x108>)
 8000606:	6013      	str	r3, [r2, #0]
	if (brett_status != 0)
 8000608:	4b2e      	ldr	r3, [pc, #184]	; (80006c4 <main+0x108>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d002      	beq.n	8000616 <main+0x5a>
		printf("IR init failed\n\r");
 8000610:	482f      	ldr	r0, [pc, #188]	; (80006d0 <main+0x114>)
 8000612:	f00c fa0d 	bl	800ca30 <iprintf>

	// do a full multi sense to initalize distances
	for (int i = 0; i < AMOUNT_IRS; i++)
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	e014      	b.n	8000646 <main+0x8a>
	{
	  brett_status = 0;
 800061c:	4b29      	ldr	r3, [pc, #164]	; (80006c4 <main+0x108>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
	  brett_status = Brett_IR_StartMulti(dev, distances, AMOUNT_IRS);
 8000622:	2208      	movs	r2, #8
 8000624:	492b      	ldr	r1, [pc, #172]	; (80006d4 <main+0x118>)
 8000626:	4829      	ldr	r0, [pc, #164]	; (80006cc <main+0x110>)
 8000628:	f006 f885 	bl	8006736 <Brett_IR_StartMulti>
 800062c:	4603      	mov	r3, r0
 800062e:	4a25      	ldr	r2, [pc, #148]	; (80006c4 <main+0x108>)
 8000630:	6013      	str	r3, [r2, #0]
	  if (brett_status != 0)
 8000632:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <main+0x108>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d002      	beq.n	8000640 <main+0x84>
		  printf("first multi sense bad\n\r");
 800063a:	4827      	ldr	r0, [pc, #156]	; (80006d8 <main+0x11c>)
 800063c:	f00c f9f8 	bl	800ca30 <iprintf>
	for (int i = 0; i < AMOUNT_IRS; i++)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	3301      	adds	r3, #1
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b07      	cmp	r3, #7
 800064a:	dde7      	ble.n	800061c <main+0x60>
	}

	// TODO: init antenna

	// start IR multi sense so we can get the data when timer is up
	for (int i = 0; i < AMOUNT_IRS; i++)
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	e01b      	b.n	800068a <main+0xce>
	{
		brett_status = 0;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <main+0x108>)
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
		brett_status = Brett_VL53L0X_StartMultiSensing(&Devs[i]);
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <main+0x120>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8000662:	fb01 f303 	mul.w	r3, r1, r3
 8000666:	4413      	add	r3, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f006 f80c 	bl	8006686 <Brett_VL53L0X_StartMultiSensing>
 800066e:	4603      	mov	r3, r0
 8000670:	461a      	mov	r2, r3
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <main+0x108>)
 8000674:	601a      	str	r2, [r3, #0]
		if (brett_status != 0)
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <main+0x108>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <main+0xc8>
		  printf("start of second multi sense bad\n\r");
 800067e:	4818      	ldr	r0, [pc, #96]	; (80006e0 <main+0x124>)
 8000680:	f00c f9d6 	bl	800ca30 <iprintf>
	for (int i = 0; i < AMOUNT_IRS; i++)
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2b07      	cmp	r3, #7
 800068e:	dde0      	ble.n	8000652 <main+0x96>
	}

	// init update timers
	Brett_GetTime(&hrtc, &timeStruct);
 8000690:	490a      	ldr	r1, [pc, #40]	; (80006bc <main+0x100>)
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <main+0x104>)
 8000694:	f006 fa0e 	bl	8006ab4 <Brett_GetTime>
	timer_IR = timeStruct.time_in_ms + DELAY_IR;
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <main+0x100>)
 800069a:	6a1b      	ldr	r3, [r3, #32]
 800069c:	33c8      	adds	r3, #200	; 0xc8
 800069e:	4a11      	ldr	r2, [pc, #68]	; (80006e4 <main+0x128>)
 80006a0:	6013      	str	r3, [r2, #0]


	// start loop 3
	SetMotors(MOVE_START);
 80006a2:	20a5      	movs	r0, #165	; 0xa5
 80006a4:	f006 fa86 	bl	8006bb4 <SetMotors>
	brett_status = Loop3_NoObject();
 80006a8:	f000 f81e 	bl	80006e8 <Loop3_NoObject>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <main+0x108>)
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	2300      	movs	r3, #0
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20001010 	.word	0x20001010
 80006c0:	200014a4 	.word	0x200014a4
 80006c4:	2000034c 	.word	0x2000034c
 80006c8:	20001034 	.word	0x20001034
 80006cc:	20000360 	.word	0x20000360
 80006d0:	0800cd98 	.word	0x0800cd98
 80006d4:	2000155c 	.word	0x2000155c
 80006d8:	0800cdac 	.word	0x0800cdac
 80006dc:	20000000 	.word	0x20000000
 80006e0:	0800cdc4 	.word	0x0800cdc4
 80006e4:	2000149c 	.word	0x2000149c

080006e8 <Loop3_NoObject>:

int Loop3_NoObject()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b0bc      	sub	sp, #240	; 0xf0
 80006ec:	af00      	add	r7, sp, #0
	while (1)
	{
		// grab current clock time
		Brett_GetTime(&hrtc, &timeStruct);
 80006ee:	4956      	ldr	r1, [pc, #344]	; (8000848 <Loop3_NoObject+0x160>)
 80006f0:	4856      	ldr	r0, [pc, #344]	; (800084c <Loop3_NoObject+0x164>)
 80006f2:	f006 f9df 	bl	8006ab4 <Brett_GetTime>
		uint currentTime = timeStruct.time_in_ms;
 80006f6:	4b54      	ldr	r3, [pc, #336]	; (8000848 <Loop3_NoObject+0x160>)
 80006f8:	6a1b      	ldr	r3, [r3, #32]
 80006fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

		// check IRs
		if (timer_IR < currentTime)
 80006fe:	4b54      	ldr	r3, [pc, #336]	; (8000850 <Loop3_NoObject+0x168>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8000706:	429a      	cmp	r2, r3
 8000708:	d9f1      	bls.n	80006ee <Loop3_NoObject+0x6>
		{
			// update IRs
			VL53L0X_RangingMeasurementData_t tempRanges[AMOUNT_IRS];
			for (int i = 0; i < AMOUNT_IRS; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000710:	e051      	b.n	80007b6 <Loop3_NoObject+0xce>
			{
				brett_status = 0;
 8000712:	4b50      	ldr	r3, [pc, #320]	; (8000854 <Loop3_NoObject+0x16c>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
				brett_status = Brett_VL53L0X_FinishMultiSensing(&Devs[i], &tempRanges[i]);
 8000718:	4b4f      	ldr	r3, [pc, #316]	; (8000858 <Loop3_NoObject+0x170>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000720:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8000724:	fb01 f303 	mul.w	r3, r1, r3
 8000728:	18d0      	adds	r0, r2, r3
 800072a:	4639      	mov	r1, r7
 800072c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000730:	4613      	mov	r3, r2
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	1a9b      	subs	r3, r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	440b      	add	r3, r1
 800073a:	4619      	mov	r1, r3
 800073c:	f005 ffbe 	bl	80066bc <Brett_VL53L0X_FinishMultiSensing>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4b43      	ldr	r3, [pc, #268]	; (8000854 <Loop3_NoObject+0x16c>)
 8000746:	601a      	str	r2, [r3, #0]
				if (brett_status != 0)
 8000748:	4b42      	ldr	r3, [pc, #264]	; (8000854 <Loop3_NoObject+0x16c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d007      	beq.n	8000760 <Loop3_NoObject+0x78>
				{
					SetMotors(MOVE_STOP);
 8000750:	2000      	movs	r0, #0
 8000752:	f006 fa2f 	bl	8006bb4 <SetMotors>
					printf("start of second multi sense bad %d\n\r", i);
 8000756:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800075a:	4840      	ldr	r0, [pc, #256]	; (800085c <Loop3_NoObject+0x174>)
 800075c:	f00c f968 	bl	800ca30 <iprintf>
				}

				if (tempRanges[i].RangeStatus != 0)
 8000760:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8000764:	4613      	mov	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	1a9b      	subs	r3, r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8000770:	4413      	add	r3, r2
 8000772:	3bd8      	subs	r3, #216	; 0xd8
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d007      	beq.n	800078a <Loop3_NoObject+0xa2>
					distances[i] = 8100;
 800077a:	4a39      	ldr	r2, [pc, #228]	; (8000860 <Loop3_NoObject+0x178>)
 800077c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000780:	f641 71a4 	movw	r1, #8100	; 0x1fa4
 8000784:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000788:	e010      	b.n	80007ac <Loop3_NoObject+0xc4>
				else
					distances[i] = tempRanges[i].RangeMilliMeter;
 800078a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800078e:	4613      	mov	r3, r2
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	1a9b      	subs	r3, r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800079a:	4413      	add	r3, r2
 800079c:	3be8      	subs	r3, #232	; 0xe8
 800079e:	881b      	ldrh	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	4a2f      	ldr	r2, [pc, #188]	; (8000860 <Loop3_NoObject+0x178>)
 80007a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80007a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = 0; i < AMOUNT_IRS; i++)
 80007ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80007b0:	3301      	adds	r3, #1
 80007b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80007b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80007ba:	2b07      	cmp	r3, #7
 80007bc:	dda9      	ble.n	8000712 <Loop3_NoObject+0x2a>
			}

			for (int i = 0; i < AMOUNT_IRS; i++)
 80007be:	2300      	movs	r3, #0
 80007c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80007c4:	e01e      	b.n	8000804 <Loop3_NoObject+0x11c>
			{
				brett_status = 0;
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <Loop3_NoObject+0x16c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
				brett_status = Brett_VL53L0X_StartMultiSensing(&Devs[i]);
 80007cc:	4b22      	ldr	r3, [pc, #136]	; (8000858 <Loop3_NoObject+0x170>)
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80007d4:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80007d8:	fb01 f303 	mul.w	r3, r1, r3
 80007dc:	4413      	add	r3, r2
 80007de:	4618      	mov	r0, r3
 80007e0:	f005 ff51 	bl	8006686 <Brett_VL53L0X_StartMultiSensing>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <Loop3_NoObject+0x16c>)
 80007ea:	601a      	str	r2, [r3, #0]
				if (brett_status != 0)
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <Loop3_NoObject+0x16c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d002      	beq.n	80007fa <Loop3_NoObject+0x112>
				  printf("start of second multi sense bad\n\r");
 80007f4:	481b      	ldr	r0, [pc, #108]	; (8000864 <Loop3_NoObject+0x17c>)
 80007f6:	f00c f91b 	bl	800ca30 <iprintf>
			for (int i = 0; i < AMOUNT_IRS; i++)
 80007fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80007fe:	3301      	adds	r3, #1
 8000800:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000804:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000808:	2b07      	cmp	r3, #7
 800080a:	dddc      	ble.n	80007c6 <Loop3_NoObject+0xde>
			}

			// update IR timer
			timer_IR = currentTime + DELAY_IR;
 800080c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000810:	33c8      	adds	r3, #200	; 0xc8
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <Loop3_NoObject+0x168>)
 8000814:	6013      	str	r3, [r2, #0]

			// check if object is in front of us
			bool objectInOuterRing = false;
 8000816:	2300      	movs	r3, #0
 8000818:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			if (distances[SENSOR_FRONT] < RANGE_OUTER)
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <Loop3_NoObject+0x178>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8000824:	dc02      	bgt.n	800082c <Loop3_NoObject+0x144>
				objectInOuterRing = true;
 8000826:	2301      	movs	r3, #1
 8000828:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
			if (objectInOuterRing)
 800082c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8000830:	2b00      	cmp	r3, #0
 8000832:	f43f af5c 	beq.w	80006ee <Loop3_NoObject+0x6>
			{
				SetMotors(MOVE_STOP);
 8000836:	2000      	movs	r0, #0
 8000838:	f006 f9bc 	bl	8006bb4 <SetMotors>
				return 0;
 800083c:	2300      	movs	r3, #0
			}
		}
	}
	return 0;
}
 800083e:	4618      	mov	r0, r3
 8000840:	37f0      	adds	r7, #240	; 0xf0
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20001010 	.word	0x20001010
 800084c:	200014a4 	.word	0x200014a4
 8000850:	2000149c 	.word	0x2000149c
 8000854:	2000034c 	.word	0x2000034c
 8000858:	20000000 	.word	0x20000000
 800085c:	0800cde8 	.word	0x0800cde8
 8000860:	2000155c 	.word	0x2000155c
 8000864:	0800cdc4 	.word	0x0800cdc4

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b096      	sub	sp, #88	; 0x58
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2244      	movs	r2, #68	; 0x44
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f00b fd3a 	bl	800c2f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800088a:	2000      	movs	r0, #0
 800088c:	f007 fc50 	bl	8008130 <HAL_PWREx_ControlVoltageScaling>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000896:	f000 fb11 	bl	8000ebc <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800089a:	f007 fc19 	bl	80080d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <SystemClock_Config+0xc4>)
 80008a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008a4:	4a21      	ldr	r2, [pc, #132]	; (800092c <SystemClock_Config+0xc4>)
 80008a6:	f023 0318 	bic.w	r3, r3, #24
 80008aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80008ae:	231c      	movs	r3, #28
 80008b0:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008b6:	2301      	movs	r3, #1
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008ba:	2301      	movs	r3, #1
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008c2:	2360      	movs	r3, #96	; 0x60
 80008c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008ca:	2301      	movs	r3, #1
 80008cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80008d2:	233c      	movs	r3, #60	; 0x3c
 80008d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008da:	2302      	movs	r3, #2
 80008dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008de:	2302      	movs	r3, #2
 80008e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	4618      	mov	r0, r3
 80008e8:	f007 fce6 	bl	80082b8 <HAL_RCC_OscConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008f2:	f000 fae3 	bl	8000ebc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f6:	230f      	movs	r3, #15
 80008f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	2303      	movs	r3, #3
 80008fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800090a:	463b      	mov	r3, r7
 800090c:	2105      	movs	r1, #5
 800090e:	4618      	mov	r0, r3
 8000910:	f008 f8f8 	bl	8008b04 <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800091a:	f000 facf 	bl	8000ebc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800091e:	f008 ff33 	bl	8009788 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000922:	bf00      	nop
 8000924:	3758      	adds	r7, #88	; 0x58
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000936:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <MX_I2C1_Init+0x78>)
 8000938:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_I2C1_Init+0x74>)
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <MX_I2C1_Init+0x7c>)
 800093e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000948:	2201      	movs	r2, #1
 800094a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800096a:	480e      	ldr	r0, [pc, #56]	; (80009a4 <MX_I2C1_Init+0x74>)
 800096c:	f006 fcde 	bl	800732c <HAL_I2C_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000976:	f000 faa1 	bl	8000ebc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <MX_I2C1_Init+0x74>)
 800097e:	f007 f9c7 	bl	8007d10 <HAL_I2CEx_ConfigAnalogFilter>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000988:	f000 fa98 	bl	8000ebc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	4805      	ldr	r0, [pc, #20]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000990:	f007 fa09 	bl	8007da6 <HAL_I2CEx_ConfigDigitalFilter>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800099a:	f000 fa8f 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20001034 	.word	0x20001034
 80009a8:	40005400 	.word	0x40005400
 80009ac:	307075b1 	.word	0x307075b1

080009b0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <MX_I2C4_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009bc:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <MX_I2C4_Init+0x7c>)
 80009be:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80009ea:	480e      	ldr	r0, [pc, #56]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009ec:	f006 fc9e 	bl	800732c <HAL_I2C_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80009f6:	f000 fa61 	bl	8000ebc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <MX_I2C4_Init+0x74>)
 80009fe:	f007 f987 	bl	8007d10 <HAL_I2CEx_ConfigAnalogFilter>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f000 fa58 	bl	8000ebc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_I2C4_Init+0x74>)
 8000a10:	f007 f9c9 	bl	8007da6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a1a:	f000 fa4f 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000fc0 	.word	0x20000fc0
 8000a28:	40008400 	.word	0x40008400
 8000a2c:	307075b1 	.word	0x307075b1

08000a30 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
	RTC_TimeTypeDef time = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = {0};
 8000a44:	2300      	movs	r3, #0
 8000a46:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a48:	4b20      	ldr	r3, [pc, #128]	; (8000acc <MX_RTC_Init+0x9c>)
 8000a4a:	4a21      	ldr	r2, [pc, #132]	; (8000ad0 <MX_RTC_Init+0xa0>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_RTC_Init+0x9c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_RTC_Init+0x9c>)
 8000a56:	227f      	movs	r2, #127	; 0x7f
 8000a58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_RTC_Init+0x9c>)
 8000a5c:	22ff      	movs	r2, #255	; 0xff
 8000a5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_RTC_Init+0x9c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_RTC_Init+0x9c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_RTC_Init+0x9c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_RTC_Init+0x9c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a78:	4814      	ldr	r0, [pc, #80]	; (8000acc <MX_RTC_Init+0x9c>)
 8000a7a:	f009 f87d 	bl	8009b78 <HAL_RTC_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000a84:	f000 fa1a 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
	time.Hours = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	713b      	strb	r3, [r7, #4]
	time.Minutes = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	717b      	strb	r3, [r7, #5]
	time.Seconds = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	71bb      	strb	r3, [r7, #6]
	time.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
	time.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BCD) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480a      	ldr	r0, [pc, #40]	; (8000acc <MX_RTC_Init+0x9c>)
 8000aa4:	f009 f8e3 	bl	8009c6e <HAL_RTC_SetTime>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_RTC_Init+0x82>
	{
		Error_Handler();
 8000aae:	f000 fa05 	bl	8000ebc <Error_Handler>
	}
	date.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	703b      	strb	r3, [r7, #0]
	date.Month = RTC_MONTH_APRIL;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	707b      	strb	r3, [r7, #1]
	date.Date = 6;
 8000aba:	2306      	movs	r3, #6
 8000abc:	70bb      	strb	r3, [r7, #2]
	date.Year = 22;
 8000abe:	2316      	movs	r3, #22
 8000ac0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END RTC_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200014a4 	.word	0x200014a4
 8000ad0:	40002800 	.word	0x40002800

08000ad4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b092      	sub	sp, #72	; 0x48
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aee:	463b      	mov	r3, r7
 8000af0:	222c      	movs	r2, #44	; 0x2c
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f00b fbfb 	bl	800c2f0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000afa:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <MX_TIM16_Init+0xe8>)
 8000afc:	4a30      	ldr	r2, [pc, #192]	; (8000bc0 <MX_TIM16_Init+0xec>)
 8000afe:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000b00:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <MX_TIM16_Init+0xe8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b06:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <MX_TIM16_Init+0xe8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000b0c:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <MX_TIM16_Init+0xe8>)
 8000b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b12:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b14:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <MX_TIM16_Init+0xe8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b1a:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <MX_TIM16_Init+0xe8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <MX_TIM16_Init+0xe8>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b26:	4825      	ldr	r0, [pc, #148]	; (8000bbc <MX_TIM16_Init+0xe8>)
 8000b28:	f009 fab8 	bl	800a09c <HAL_TIM_Base_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000b32:	f000 f9c3 	bl	8000ebc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000b36:	4821      	ldr	r0, [pc, #132]	; (8000bbc <MX_TIM16_Init+0xe8>)
 8000b38:	f009 fb07 	bl	800a14a <HAL_TIM_PWM_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000b42:	f000 f9bb 	bl	8000ebc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b46:	2360      	movs	r3, #96	; 0x60
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b52:	2300      	movs	r3, #0
 8000b54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b66:	2200      	movs	r2, #0
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4814      	ldr	r0, [pc, #80]	; (8000bbc <MX_TIM16_Init+0xe8>)
 8000b6c:	f009 fb4e 	bl	800a20c <HAL_TIM_PWM_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000b76:	f000 f9a1 	bl	8000ebc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4807      	ldr	r0, [pc, #28]	; (8000bbc <MX_TIM16_Init+0xe8>)
 8000b9e:	f009 ffb9 	bl	800ab14 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8000ba8:	f000 f988 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <MX_TIM16_Init+0xe8>)
 8000bae:	f000 faa5 	bl	80010fc <HAL_TIM_MspPostInit>

}
 8000bb2:	bf00      	nop
 8000bb4:	3748      	adds	r7, #72	; 0x48
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2000157c 	.word	0x2000157c
 8000bc0:	40014400 	.word	0x40014400

08000bc4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <MX_UART4_Init+0x90>)
 8000bca:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <MX_UART4_Init+0x94>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <MX_UART4_Init+0x90>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <MX_UART4_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <MX_UART4_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_UART4_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_UART4_Init+0x90>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_UART4_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_UART4_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfa:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MX_UART4_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_UART4_Init+0x90>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c06:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <MX_UART4_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c0c:	4811      	ldr	r0, [pc, #68]	; (8000c54 <MX_UART4_Init+0x90>)
 8000c0e:	f009 ffff 	bl	800ac10 <HAL_UART_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c18:	f000 f950 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_UART4_Init+0x90>)
 8000c20:	f00a fd94 	bl	800b74c <HAL_UARTEx_SetTxFifoThreshold>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c2a:	f000 f947 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <MX_UART4_Init+0x90>)
 8000c32:	f00a fdc9 	bl	800b7c8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c3c:	f000 f93e 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_UART4_Init+0x90>)
 8000c42:	f00a fd4a 	bl	800b6da <HAL_UARTEx_DisableFifoMode>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c4c:	f000 f936 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200014c8 	.word	0x200014c8
 8000c58:	40004c00 	.word	0x40004c00

08000c5c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000c62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000c6a:	2206      	movs	r2, #6
 8000c6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000c70:	2202      	movs	r2, #2
 8000c72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c8c:	4b07      	ldr	r3, [pc, #28]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000c9a:	f007 f8d0 	bl	8007e3e <HAL_PCD_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000ca4:	f000 f90a 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20001094 	.word	0x20001094

08000cb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	; 0x30
 8000cb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cc6:	4b76      	ldr	r3, [pc, #472]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a75      	ldr	r2, [pc, #468]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b73      	ldr	r3, [pc, #460]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	61bb      	str	r3, [r7, #24]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	4b70      	ldr	r3, [pc, #448]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a6f      	ldr	r2, [pc, #444]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b6d      	ldr	r3, [pc, #436]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cf6:	4b6a      	ldr	r3, [pc, #424]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a69      	ldr	r2, [pc, #420]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000cfc:	f043 0320 	orr.w	r3, r3, #32
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b67      	ldr	r3, [pc, #412]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0320 	and.w	r3, r3, #32
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b64      	ldr	r3, [pc, #400]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	4a63      	ldr	r2, [pc, #396]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1a:	4b61      	ldr	r3, [pc, #388]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b5e      	ldr	r3, [pc, #376]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2a:	4a5d      	ldr	r2, [pc, #372]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d32:	4b5b      	ldr	r3, [pc, #364]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3e:	4b58      	ldr	r3, [pc, #352]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	4a57      	ldr	r2, [pc, #348]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000d44:	f043 0308 	orr.w	r3, r3, #8
 8000d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4a:	4b55      	ldr	r3, [pc, #340]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4e:	f003 0308 	and.w	r3, r3, #8
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d56:	4b52      	ldr	r3, [pc, #328]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a51      	ldr	r2, [pc, #324]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b4f      	ldr	r3, [pc, #316]	; (8000ea0 <MX_GPIO_Init+0x1f0>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 8000d6e:	f007 fa93 	bl	8008298 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_11
 8000d72:	2200      	movs	r2, #0
 8000d74:	f646 2118 	movw	r1, #27160	; 0x6a18
 8000d78:	484a      	ldr	r0, [pc, #296]	; (8000ea4 <MX_GPIO_Init+0x1f4>)
 8000d7a:	f006 fabf 	bl	80072fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	21c0      	movs	r1, #192	; 0xc0
 8000d82:	4849      	ldr	r0, [pc, #292]	; (8000ea8 <MX_GPIO_Init+0x1f8>)
 8000d84:	f006 faba 	bl	80072fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000d88:	2200      	movs	r2, #0
 8000d8a:	21bc      	movs	r1, #188	; 0xbc
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d90:	f006 fab4 	bl	80072fc <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	21d0      	movs	r1, #208	; 0xd0
 8000d98:	4844      	ldr	r0, [pc, #272]	; (8000eac <MX_GPIO_Init+0x1fc>)
 8000d9a:	f006 faaf 	bl	80072fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2103      	movs	r1, #3
 8000da2:	4843      	ldr	r0, [pc, #268]	; (8000eb0 <MX_GPIO_Init+0x200>)
 8000da4:	f006 faaa 	bl	80072fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000dae:	4841      	ldr	r0, [pc, #260]	; (8000eb4 <MX_GPIO_Init+0x204>)
 8000db0:	f006 faa4 	bl	80072fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 PE9 PE11
                           PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_11
 8000db4:	f646 2318 	movw	r3, #27160	; 0x6a18
 8000db8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4835      	ldr	r0, [pc, #212]	; (8000ea4 <MX_GPIO_Init+0x1f4>)
 8000dce:	f006 f903 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd2:	23c0      	movs	r3, #192	; 0xc0
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000de2:	f107 031c 	add.w	r3, r7, #28
 8000de6:	4619      	mov	r1, r3
 8000de8:	482f      	ldr	r0, [pc, #188]	; (8000ea8 <MX_GPIO_Init+0x1f8>)
 8000dea:	f006 f8f5 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000dee:	23bc      	movs	r3, #188	; 0xbc
 8000df0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e08:	f006 f8e6 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000e0c:	23d0      	movs	r3, #208	; 0xd0
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	4619      	mov	r1, r3
 8000e22:	4822      	ldr	r0, [pc, #136]	; (8000eac <MX_GPIO_Init+0x1fc>)
 8000e24:	f006 f8d8 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	481c      	ldr	r0, [pc, #112]	; (8000eb0 <MX_GPIO_Init+0x200>)
 8000e40:	f006 f8ca 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 031c 	add.w	r3, r7, #28
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4815      	ldr	r0, [pc, #84]	; (8000eb0 <MX_GPIO_Init+0x200>)
 8000e5c:	f006 f8bc 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e60:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e72:	f107 031c 	add.w	r3, r7, #28
 8000e76:	4619      	mov	r1, r3
 8000e78:	480e      	ldr	r0, [pc, #56]	; (8000eb4 <MX_GPIO_Init+0x204>)
 8000e7a:	f006 f8ad 	bl	8006fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e7e:	2340      	movs	r3, #64	; 0x40
 8000e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4619      	mov	r1, r3
 8000e92:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <MX_GPIO_Init+0x208>)
 8000e94:	f006 f8a0 	bl	8006fd8 <HAL_GPIO_Init>

}
 8000e98:	bf00      	nop
 8000e9a:	3730      	adds	r7, #48	; 0x30
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48001000 	.word	0x48001000
 8000ea8:	48001400 	.word	0x48001400
 8000eac:	48000800 	.word	0x48000800
 8000eb0:	48000400 	.word	0x48000400
 8000eb4:	48000c00 	.word	0x48000c00
 8000eb8:	48001800 	.word	0x48001800

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <Error_Handler+0x8>
	...

08000ec8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <HAL_MspInit+0x44>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <HAL_MspInit+0x44>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <HAL_MspInit+0x44>)
 8000edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_MspInit+0x44>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <HAL_MspInit+0x44>)
 8000eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_MspInit+0x44>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000

08000f10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0b2      	sub	sp, #200	; 0xc8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f28:	f107 0318 	add.w	r3, r7, #24
 8000f2c:	229c      	movs	r2, #156	; 0x9c
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00b f9dd 	bl	800c2f0 <memset>
  if(hi2c->Instance==I2C1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a42      	ldr	r2, [pc, #264]	; (8001044 <HAL_I2C_MspInit+0x134>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d13b      	bne.n	8000fb8 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f40:	2340      	movs	r3, #64	; 0x40
 8000f42:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f008 f88b 	bl	8009068 <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f58:	f7ff ffb0 	bl	8000ebc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5c:	4b3a      	ldr	r3, [pc, #232]	; (8001048 <HAL_I2C_MspInit+0x138>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	4a39      	ldr	r2, [pc, #228]	; (8001048 <HAL_I2C_MspInit+0x138>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f68:	4b37      	ldr	r3, [pc, #220]	; (8001048 <HAL_I2C_MspInit+0x138>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f74:	23c0      	movs	r3, #192	; 0xc0
 8000f76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7a:	2312      	movs	r3, #18
 8000f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f96:	4619      	mov	r1, r3
 8000f98:	482c      	ldr	r0, [pc, #176]	; (800104c <HAL_I2C_MspInit+0x13c>)
 8000f9a:	f006 f81d 	bl	8006fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <HAL_I2C_MspInit+0x138>)
 8000fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa2:	4a29      	ldr	r2, [pc, #164]	; (8001048 <HAL_I2C_MspInit+0x138>)
 8000fa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8000faa:	4b27      	ldr	r3, [pc, #156]	; (8001048 <HAL_I2C_MspInit+0x138>)
 8000fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000fb6:	e041      	b.n	800103c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C4)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a24      	ldr	r2, [pc, #144]	; (8001050 <HAL_I2C_MspInit+0x140>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d13c      	bne.n	800103c <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000fc2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f008 f849 	bl	8009068 <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8000fdc:	f7ff ff6e 	bl	8000ebc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe0:	4b19      	ldr	r3, [pc, #100]	; (8001048 <HAL_I2C_MspInit+0x138>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	4a18      	ldr	r2, [pc, #96]	; (8001048 <HAL_I2C_MspInit+0x138>)
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_I2C_MspInit+0x138>)
 8000fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000ff8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001000:	2312      	movs	r3, #18
 8001002:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001012:	2304      	movs	r3, #4
 8001014:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001018:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800101c:	4619      	mov	r1, r3
 800101e:	480d      	ldr	r0, [pc, #52]	; (8001054 <HAL_I2C_MspInit+0x144>)
 8001020:	f005 ffda 	bl	8006fd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_I2C_MspInit+0x138>)
 8001026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001028:	4a07      	ldr	r2, [pc, #28]	; (8001048 <HAL_I2C_MspInit+0x138>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001030:	4b05      	ldr	r3, [pc, #20]	; (8001048 <HAL_I2C_MspInit+0x138>)
 8001032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
}
 800103c:	bf00      	nop
 800103e:	37c8      	adds	r7, #200	; 0xc8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40005400 	.word	0x40005400
 8001048:	40021000 	.word	0x40021000
 800104c:	48000400 	.word	0x48000400
 8001050:	40008400 	.word	0x40008400
 8001054:	48001400 	.word	0x48001400

08001058 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0aa      	sub	sp, #168	; 0xa8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	229c      	movs	r2, #156	; 0x9c
 8001066:	2100      	movs	r1, #0
 8001068:	4618      	mov	r0, r3
 800106a:	f00b f941 	bl	800c2f0 <memset>
  if(hrtc->Instance==RTC)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a10      	ldr	r2, [pc, #64]	; (80010b4 <HAL_RTC_MspInit+0x5c>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d118      	bne.n	80010aa <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800107e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001082:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	4618      	mov	r0, r3
 800108c:	f007 ffec 	bl	8009068 <HAL_RCCEx_PeriphCLKConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001096:	f7ff ff11 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <HAL_RTC_MspInit+0x60>)
 800109c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a0:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <HAL_RTC_MspInit+0x60>)
 80010a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010aa:	bf00      	nop
 80010ac:	37a8      	adds	r7, #168	; 0xa8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40002800 	.word	0x40002800
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_TIM_Base_MspInit+0x38>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d10b      	bne.n	80010e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_TIM_Base_MspInit+0x3c>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d2:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <HAL_TIM_Base_MspInit+0x3c>)
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	6613      	str	r3, [r2, #96]	; 0x60
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_TIM_Base_MspInit+0x3c>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80010e6:	bf00      	nop
 80010e8:	3714      	adds	r7, #20
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40014400 	.word	0x40014400
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a11      	ldr	r2, [pc, #68]	; (8001160 <HAL_TIM_MspPostInit+0x64>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d11c      	bne.n	8001158 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_TIM_MspPostInit+0x68>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a10      	ldr	r2, [pc, #64]	; (8001164 <HAL_TIM_MspPostInit+0x68>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_TIM_MspPostInit+0x68>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001136:	2340      	movs	r3, #64	; 0x40
 8001138:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8001146:	230e      	movs	r3, #14
 8001148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	4619      	mov	r1, r3
 8001150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001154:	f005 ff40 	bl	8006fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40014400 	.word	0x40014400
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b0b0      	sub	sp, #192	; 0xc0
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	229c      	movs	r2, #156	; 0x9c
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f00b f8b1 	bl	800c2f0 <memset>
  if(huart->Instance==UART4)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a21      	ldr	r2, [pc, #132]	; (8001218 <HAL_UART_MspInit+0xb0>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d13b      	bne.n	8001210 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001198:	2308      	movs	r3, #8
 800119a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800119c:	2300      	movs	r3, #0
 800119e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	4618      	mov	r0, r3
 80011a6:	f007 ff5f 	bl	8009068 <HAL_RCCEx_PeriphCLKConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011b0:	f7ff fe84 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_UART_MspInit+0xb4>)
 80011b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b8:	4a18      	ldr	r2, [pc, #96]	; (800121c <HAL_UART_MspInit+0xb4>)
 80011ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011be:	6593      	str	r3, [r2, #88]	; 0x58
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <HAL_UART_MspInit+0xb4>)
 80011c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <HAL_UART_MspInit+0xb4>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <HAL_UART_MspInit+0xb4>)
 80011d2:	f043 0301 	orr.w	r3, r3, #1
 80011d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_UART_MspInit+0xb4>)
 80011da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011e4:	2303      	movs	r3, #3
 80011e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011fc:	2308      	movs	r3, #8
 80011fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f005 fee4 	bl	8006fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001210:	bf00      	nop
 8001212:	37c0      	adds	r7, #192	; 0xc0
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40004c00 	.word	0x40004c00
 800121c:	40021000 	.word	0x40021000

08001220 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0b2      	sub	sp, #200	; 0xc8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001238:	f107 0318 	add.w	r3, r7, #24
 800123c:	229c      	movs	r2, #156	; 0x9c
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f00b f855 	bl	800c2f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800124e:	d16b      	bne.n	8001328 <HAL_PCD_MspInit+0x108>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001254:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001256:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800125a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800125e:	2301      	movs	r3, #1
 8001260:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001262:	2301      	movs	r3, #1
 8001264:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001266:	2318      	movs	r3, #24
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800126a:	2302      	movs	r3, #2
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800126e:	2302      	movs	r3, #2
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001272:	2302      	movs	r3, #2
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001276:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127c:	f107 0318 	add.w	r3, r7, #24
 8001280:	4618      	mov	r0, r3
 8001282:	f007 fef1 	bl	8009068 <HAL_RCCEx_PeriphCLKConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800128c:	f7ff fe16 	bl	8000ebc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <HAL_PCD_MspInit+0x110>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	4a26      	ldr	r2, [pc, #152]	; (8001330 <HAL_PCD_MspInit+0x110>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <HAL_PCD_MspInit+0x110>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012bc:	2303      	movs	r3, #3
 80012be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012c2:	230a      	movs	r3, #10
 80012c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d2:	f005 fe81 	bl	8006fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <HAL_PCD_MspInit+0x110>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a15      	ldr	r2, [pc, #84]	; (8001330 <HAL_PCD_MspInit+0x110>)
 80012dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <HAL_PCD_MspInit+0x110>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <HAL_PCD_MspInit+0x110>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d114      	bne.n	8001324 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_PCD_MspInit+0x110>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_PCD_MspInit+0x110>)
 8001300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001304:	6593      	str	r3, [r2, #88]	; 0x58
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_PCD_MspInit+0x110>)
 8001308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001312:	f006 ffb1 	bl	8008278 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_PCD_MspInit+0x110>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <HAL_PCD_MspInit+0x110>)
 800131c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001320:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001322:	e001      	b.n	8001328 <HAL_PCD_MspInit+0x108>
      HAL_PWREx_EnableVddUSB();
 8001324:	f006 ffa8 	bl	8008278 <HAL_PWREx_EnableVddUSB>
}
 8001328:	bf00      	nop
 800132a:	37c8      	adds	r7, #200	; 0xc8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40021000 	.word	0x40021000

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <NMI_Handler+0x4>

0800133a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <MemManage_Handler+0x4>

08001346 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <BusFault_Handler+0x4>

0800134c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <UsageFault_Handler+0x4>

08001352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001380:	f005 fd00 	bl	8006d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}

08001388 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	e00a      	b.n	80013b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800139a:	f3af 8000 	nop.w
 800139e:	4601      	mov	r1, r0
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	60ba      	str	r2, [r7, #8]
 80013a6:	b2ca      	uxtb	r2, r1
 80013a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	dbf0      	blt.n	800139a <_read+0x12>
	}

return len;
 80013b8:	687b      	ldr	r3, [r7, #4]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	e009      	b.n	80013e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	60ba      	str	r2, [r7, #8]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f8db 	bl	8000598 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbf1      	blt.n	80013d4 <_write+0x12>
	}
	return len;
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_close>:

int _close(int file)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	return -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001422:	605a      	str	r2, [r3, #4]
	return 0;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_isatty>:

int _isatty(int file)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
	return 1;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
	return 0;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800146c:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <_sbrk+0x5c>)
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <_sbrk+0x60>)
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <_sbrk+0x64>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001480:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <_sbrk+0x64>)
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <_sbrk+0x68>)
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	429a      	cmp	r2, r3
 8001492:	d207      	bcs.n	80014a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001494:	f00a fcd4 	bl	800be40 <__errno>
 8001498:	4603      	mov	r3, r0
 800149a:	220c      	movs	r2, #12
 800149c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
 80014a2:	e009      	b.n	80014b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	4a05      	ldr	r2, [pc, #20]	; (80014c8 <_sbrk+0x64>)
 80014b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014b6:	68fb      	ldr	r3, [r7, #12]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200a0000 	.word	0x200a0000
 80014c4:	00000400 	.word	0x00000400
 80014c8:	20000350 	.word	0x20000350
 80014cc:	20001620 	.word	0x20001620

080014d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <SystemInit+0x20>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <SystemInit+0x20>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800152c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f8:	f7ff ffea 	bl	80014d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <LoopForever+0x6>)
  ldr r1, =_edata
 80014fe:	490d      	ldr	r1, [pc, #52]	; (8001534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <LoopForever+0xe>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001514:	4c0a      	ldr	r4, [pc, #40]	; (8001540 <LoopForever+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001522:	f00a fe4b 	bl	800c1bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001526:	f7ff f849 	bl	80005bc <main>

0800152a <LoopForever>:

LoopForever:
    b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800152c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8001538:	0800d038 	.word	0x0800d038
  ldr r2, =_sbss
 800153c:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8001540:	20001620 	.word	0x20001620

08001544 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_IRQHandler>

08001546 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8001554:	6839      	ldr	r1, [r7, #0]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f001 fd9f 	bl	800309a <VL53L0X_get_offset_calibration_data_micro_meter>
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8001560:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001578:	2300      	movs	r3, #0
 800157a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	085b      	lsrs	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	218a      	movs	r1, #138	; 0x8a
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f004 ff4e 	bl	8006428 <VL53L0X_WrByte>
 800158c:	4603      	mov	r3, r0
 800158e:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8001590:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b0a4      	sub	sp, #144	; 0x90
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80015aa:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d107      	bne.n	80015c2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2188      	movs	r1, #136	; 0x88
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f004 ff36 	bl	8006428 <VL53L0X_WrByte>
 80015bc:	4603      	mov	r3, r0
 80015be:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015d0:	f8a3 217e 	strh.w	r2, [r3, #382]	; 0x17e

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660
	 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4aae      	ldr	r2, [pc, #696]	; (8001890 <VL53L0X_DataInit+0x2f4>)
 80015d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	4619      	mov	r1, r3
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 faef 	bl	8001bcc <VL53L0X_GetDeviceParameters>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (Status == VL53L0X_ERROR_NONE) {
 80015f4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d130      	bne.n	800165e <VL53L0X_DataInit+0xc2>
		/* initialize PAL values */
		CurrentParameters.DeviceMode =
 80015fc:	2300      	movs	r3, #0
 80015fe:	743b      	strb	r3, [r7, #16]
					VL53L0X_DEVICEMODE_SINGLE_RANGING;
		CurrentParameters.HistogramMode =
 8001600:	2300      	movs	r3, #0
 8001602:	747b      	strb	r3, [r7, #17]
					VL53L0X_HISTOGRAMMODE_DISABLED;

		/* Dmax lookup table */
	/* 0.0 */
	CurrentParameters.dmax_lut.ambRate_mcps[0] = (FixPoint1616_t)0x00000000;
 8001604:	2300      	movs	r3, #0
 8001606:	64fb      	str	r3, [r7, #76]	; 0x4c
	/* 1200 */
	CurrentParameters.dmax_lut.dmax_mm[0]      = (FixPoint1616_t)0x04B00000;
 8001608:	f04f 6396 	mov.w	r3, #78643200	; 0x4b00000
 800160c:	66bb      	str	r3, [r7, #104]	; 0x68
	/* 0.7 */
	CurrentParameters.dmax_lut.ambRate_mcps[1] = (FixPoint1616_t)0x0000B333;
 800160e:	f24b 3333 	movw	r3, #45875	; 0xb333
 8001612:	653b      	str	r3, [r7, #80]	; 0x50
	/* 1100 */
	CurrentParameters.dmax_lut.dmax_mm[1]      = (FixPoint1616_t)0x044C0000;
 8001614:	4b9f      	ldr	r3, [pc, #636]	; (8001894 <VL53L0X_DataInit+0x2f8>)
 8001616:	66fb      	str	r3, [r7, #108]	; 0x6c
	/* 2 */
	CurrentParameters.dmax_lut.ambRate_mcps[2] = (FixPoint1616_t)0x00020000;
 8001618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800161c:	657b      	str	r3, [r7, #84]	; 0x54
	/* 900 */
	CurrentParameters.dmax_lut.dmax_mm[2]      = (FixPoint1616_t)0x03840000;
 800161e:	f04f 7361 	mov.w	r3, #58982400	; 0x3840000
 8001622:	673b      	str	r3, [r7, #112]	; 0x70
	/* 3.8 */
	CurrentParameters.dmax_lut.ambRate_mcps[3] = (FixPoint1616_t)0x0003CCCC;
 8001624:	4b9c      	ldr	r3, [pc, #624]	; (8001898 <VL53L0X_DataInit+0x2fc>)
 8001626:	65bb      	str	r3, [r7, #88]	; 0x58
	/* 750 */
	CurrentParameters.dmax_lut.dmax_mm[3]      = (FixPoint1616_t)0x02EE0000;
 8001628:	4b9c      	ldr	r3, [pc, #624]	; (800189c <VL53L0X_DataInit+0x300>)
 800162a:	677b      	str	r3, [r7, #116]	; 0x74
	/* 7.3 */
	CurrentParameters.dmax_lut.ambRate_mcps[4] = (FixPoint1616_t)0x00074CCC;
 800162c:	4b9c      	ldr	r3, [pc, #624]	; (80018a0 <VL53L0X_DataInit+0x304>)
 800162e:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* 550 */
	CurrentParameters.dmax_lut.dmax_mm[4]      = (FixPoint1616_t)0x02260000;
 8001630:	4b9c      	ldr	r3, [pc, #624]	; (80018a4 <VL53L0X_DataInit+0x308>)
 8001632:	67bb      	str	r3, [r7, #120]	; 0x78
	/* 10 */
	CurrentParameters.dmax_lut.ambRate_mcps[5] = (FixPoint1616_t)0x000A0000;
 8001634:	f44f 2320 	mov.w	r3, #655360	; 0xa0000
 8001638:	663b      	str	r3, [r7, #96]	; 0x60
	/* 500 */
	CurrentParameters.dmax_lut.dmax_mm[5]      = (FixPoint1616_t)0x01F40000;
 800163a:	f04f 73fa 	mov.w	r3, #32768000	; 0x1f40000
 800163e:	67fb      	str	r3, [r7, #124]	; 0x7c
	/* 15 */
	CurrentParameters.dmax_lut.ambRate_mcps[6] = (FixPoint1616_t)0x000F0000;
 8001640:	f44f 2370 	mov.w	r3, #983040	; 0xf0000
 8001644:	667b      	str	r3, [r7, #100]	; 0x64
	/* 400 */
	CurrentParameters.dmax_lut.dmax_mm[6]      = (FixPoint1616_t)0x01900000;
 8001646:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
 800164a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3308      	adds	r3, #8
 8001652:	f107 0110 	add.w	r1, r7, #16
 8001656:	2278      	movs	r2, #120	; 0x78
 8001658:	4618      	mov	r0, r3
 800165a:	f00a fe3b 	bl	800c2d4 <memcpy>
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2264      	movs	r2, #100	; 0x64
 8001662:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f44f 7261 	mov.w	r2, #900	; 0x384
 800166c:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001676:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001680:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 217c 	strb.w	r2, [r3, #380]	; 0x17c

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800168c:	2201      	movs	r2, #1
 800168e:	2180      	movs	r1, #128	; 0x80
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f004 fec9 	bl	8006428 <VL53L0X_WrByte>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800169e:	4313      	orrs	r3, r2
 80016a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80016a4:	2201      	movs	r2, #1
 80016a6:	21ff      	movs	r1, #255	; 0xff
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f004 febd 	bl	8006428 <VL53L0X_WrByte>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80016b6:	4313      	orrs	r3, r2
 80016b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f004 feb1 	bl	8006428 <VL53L0X_WrByte>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80016ce:	4313      	orrs	r3, r2
 80016d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80016d4:	f107 030f 	add.w	r3, r7, #15
 80016d8:	461a      	mov	r2, r3
 80016da:	2191      	movs	r1, #145	; 0x91
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f004 ff25 	bl	800652c <VL53L0X_RdByte>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80016ea:	4313      	orrs	r3, r2
 80016ec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80016f8:	2201      	movs	r2, #1
 80016fa:	2100      	movs	r1, #0
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f004 fe93 	bl	8006428 <VL53L0X_WrByte>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800170a:	4313      	orrs	r3, r2
 800170c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001710:	2200      	movs	r2, #0
 8001712:	21ff      	movs	r1, #255	; 0xff
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f004 fe87 	bl	8006428 <VL53L0X_WrByte>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001722:	4313      	orrs	r3, r2
 8001724:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8001728:	2200      	movs	r2, #0
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f004 fe7b 	bl	8006428 <VL53L0X_WrByte>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800173a:	4313      	orrs	r3, r2
 800173c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001746:	e017      	b.n	8001778 <VL53L0X_DataInit+0x1dc>
		if (Status == VL53L0X_ERROR_NONE)
 8001748:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800174c:	2b00      	cmp	r3, #0
 800174e:	d118      	bne.n	8001782 <VL53L0X_DataInit+0x1e6>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8001750:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001754:	b29b      	uxth	r3, r3
 8001756:	2201      	movs	r2, #1
 8001758:	4619      	mov	r1, r3
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fd68 	bl	8002230 <VL53L0X_SetLimitCheckEnable>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001768:	4313      	orrs	r3, r2
 800176a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800176e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001772:	3301      	adds	r3, #1
 8001774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001778:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800177c:	2b05      	cmp	r3, #5
 800177e:	dde3      	ble.n	8001748 <VL53L0X_DataInit+0x1ac>
 8001780:	e000      	b.n	8001784 <VL53L0X_DataInit+0x1e8>
		else
			break;
 8001782:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8001784:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8001788:	2b00      	cmp	r3, #0
 800178a:	d107      	bne.n	800179c <VL53L0X_DataInit+0x200>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800178c:	2200      	movs	r2, #0
 800178e:	2102      	movs	r1, #2
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 fd4d 	bl	8002230 <VL53L0X_SetLimitCheckEnable>
 8001796:	4603      	mov	r3, r0
 8001798:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800179c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d107      	bne.n	80017b4 <VL53L0X_DataInit+0x218>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80017a4:	2200      	movs	r2, #0
 80017a6:	2103      	movs	r1, #3
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fd41 	bl	8002230 <VL53L0X_SetLimitCheckEnable>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80017b4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d107      	bne.n	80017cc <VL53L0X_DataInit+0x230>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80017bc:	2200      	movs	r2, #0
 80017be:	2104      	movs	r1, #4
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fd35 	bl	8002230 <VL53L0X_SetLimitCheckEnable>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80017cc:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d107      	bne.n	80017e4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80017d4:	2200      	movs	r2, #0
 80017d6:	2105      	movs	r1, #5
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fd29 	bl	8002230 <VL53L0X_SetLimitCheckEnable>
 80017de:	4603      	mov	r3, r0
 80017e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80017e4:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d108      	bne.n	80017fe <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80017ec:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80017f0:	2100      	movs	r1, #0
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fdcc 	bl	8002390 <VL53L0X_SetLimitCheckValue>
 80017f8:	4603      	mov	r3, r0
 80017fa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80017fe:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8001802:	2b00      	cmp	r3, #0
 8001804:	d108      	bne.n	8001818 <VL53L0X_DataInit+0x27c>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180a:	2101      	movs	r1, #1
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 fdbf 	bl	8002390 <VL53L0X_SetLimitCheckValue>
 8001812:	4603      	mov	r3, r0
 8001814:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001818:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800181c:	2b00      	cmp	r3, #0
 800181e:	d108      	bne.n	8001832 <VL53L0X_DataInit+0x296>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001820:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8001824:	2102      	movs	r1, #2
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fdb2 	bl	8002390 <VL53L0X_SetLimitCheckValue>
 800182c:	4603      	mov	r3, r0
 800182e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001832:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8001836:	2b00      	cmp	r3, #0
 8001838:	d107      	bne.n	800184a <VL53L0X_DataInit+0x2ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800183a:	2200      	movs	r2, #0
 800183c:	2103      	movs	r1, #3
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 fda6 	bl	8002390 <VL53L0X_SetLimitCheckValue>
 8001844:	4603      	mov	r3, r0
 8001846:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800184a:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10f      	bne.n	8001872 <VL53L0X_DataInit+0x2d6>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	22ff      	movs	r2, #255	; 0xff
 8001856:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800185a:	22ff      	movs	r2, #255	; 0xff
 800185c:	2101      	movs	r1, #1
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f004 fde2 	bl	8006428 <VL53L0X_WrByte>
 8001864:	4603      	mov	r3, r0
 8001866:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit
		 */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
	}

	if (Status == VL53L0X_ERROR_NONE)
 8001872:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8001876:	2b00      	cmp	r3, #0
 8001878:	d103      	bne.n	8001882 <VL53L0X_DataInit+0x2e6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141


	LOG_FUNCTION_END(Status);
	return Status;
 8001882:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
}
 8001886:	4618      	mov	r0, r3
 8001888:	3790      	adds	r7, #144	; 0x90
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	000970a4 	.word	0x000970a4
 8001894:	044c0000 	.word	0x044c0000
 8001898:	0003cccc 	.word	0x0003cccc
 800189c:	02ee0000 	.word	0x02ee0000
 80018a0:	00074ccc 	.word	0x00074ccc
 80018a4:	02260000 	.word	0x02260000

080018a8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b0ac      	sub	sp, #176	; 0xb0
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	2278      	movs	r2, #120	; 0x78
 80018bc:	2100      	movs	r1, #0
 80018be:	4618      	mov	r0, r3
 80018c0:	f00a fd16 	bl	800c2f0 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint32_t count = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	uint8_t isApertureSpads = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80018e6:	2101      	movs	r1, #1
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f002 fb2c 	bl	8003f46 <VL53L0X_get_info_from_device>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f893 313f 	ldrb.w	r3, [r3, #319]	; 0x13f
 80018fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8001904:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8001908:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800190c:	2b01      	cmp	r3, #1
 800190e:	d80f      	bhi.n	8001930 <VL53L0X_StaticInit+0x88>
 8001910:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001914:	2b01      	cmp	r3, #1
 8001916:	d103      	bne.n	8001920 <VL53L0X_StaticInit+0x78>
		((ApertureSpads == 1) && (count > 32)) ||
 8001918:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800191c:	2b20      	cmp	r3, #32
 800191e:	d807      	bhi.n	8001930 <VL53L0X_StaticInit+0x88>
 8001920:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10f      	bne.n	8001948 <VL53L0X_StaticInit+0xa0>
		((ApertureSpads == 0) && (count > 12)))
 8001928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800192c:	2b0c      	cmp	r3, #12
 800192e:	d90b      	bls.n	8001948 <VL53L0X_StaticInit+0xa0>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8001930:	f107 0218 	add.w	r2, r7, #24
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f001 fda8 	bl	8003490 <VL53L0X_perform_ref_spad_management>
 8001940:	4603      	mov	r3, r0
 8001942:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8001946:	e00a      	b.n	800195e <VL53L0X_StaticInit+0xb6>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8001948:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800194c:	461a      	mov	r2, r3
 800194e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f001 ffa8 	bl	80038a8 <VL53L0X_set_reference_spads>
 8001958:	4603      	mov	r3, r0
 800195a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800195e:	4b93      	ldr	r3, [pc, #588]	; (8001bac <VL53L0X_StaticInit+0x304>)
 8001960:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8001964:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001968:	2b00      	cmp	r3, #0
 800196a:	d111      	bne.n	8001990 <VL53L0X_StaticInit+0xe8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
 8001972:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8001976:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800197a:	2b00      	cmp	r3, #0
 800197c:	d105      	bne.n	800198a <VL53L0X_StaticInit+0xe2>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8001984:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001988:	e002      	b.n	8001990 <VL53L0X_StaticInit+0xe8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800198a:	4b88      	ldr	r3, [pc, #544]	; (8001bac <VL53L0X_StaticInit+0x304>)
 800198c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	}

	if (Status == VL53L0X_ERROR_NONE)
 8001990:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001994:	2b00      	cmp	r3, #0
 8001996:	d107      	bne.n	80019a8 <VL53L0X_StaticInit+0x100>
		Status = VL53L0X_load_tuning_settings(Dev,
 8001998:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f003 fe6d 	bl	800567c <VL53L0X_load_tuning_settings>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
						      pTuningSettingBuffer);


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80019a8:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10a      	bne.n	80019c6 <VL53L0X_StaticInit+0x11e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80019b0:	2300      	movs	r3, #0
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2304      	movs	r3, #4
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f001 f99c 	bl	8002cf8 <VL53L0X_SetGpioConfig>
 80019c0:	4603      	mov	r3, r0
 80019c2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80019c6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d121      	bne.n	8001a12 <VL53L0X_StaticInit+0x16a>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80019ce:	2201      	movs	r2, #1
 80019d0:	21ff      	movs	r1, #255	; 0xff
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f004 fd28 	bl	8006428 <VL53L0X_WrByte>
 80019d8:	4603      	mov	r3, r0
 80019da:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80019de:	f107 031a 	add.w	r3, r7, #26
 80019e2:	461a      	mov	r2, r3
 80019e4:	2184      	movs	r1, #132	; 0x84
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f004 fdca 	bl	8006580 <VL53L0X_RdWord>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80019f4:	4313      	orrs	r3, r2
 80019f6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80019fa:	2200      	movs	r2, #0
 80019fc:	21ff      	movs	r1, #255	; 0xff
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f004 fd12 	bl	8006428 <VL53L0X_WrByte>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001a12:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <VL53L0X_StaticInit+0x17e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8001a1a:	8b7b      	ldrh	r3, [r7, #26]
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	461a      	mov	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}

	/* After static init, some device parameters may be changed,
	 * so update them
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8001a26:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d108      	bne.n	8001a40 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f000 f8c9 	bl	8001bcc <VL53L0X_GetDeviceParameters>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7


	if (Status == VL53L0X_ERROR_NONE) {
 8001a40:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d110      	bne.n	8001a6a <VL53L0X_StaticInit+0x1c2>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8001a48:	f107 0319 	add.w	r3, r7, #25
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f9b1 	bl	8001db6 <VL53L0X_GetFractionEnable>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (Status == VL53L0X_ERROR_NONE)
 8001a5a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d103      	bne.n	8001a6a <VL53L0X_StaticInit+0x1c2>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8001a62:	7e7a      	ldrb	r2, [r7, #25]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d

	}

	if (Status == VL53L0X_ERROR_NONE)
 8001a6a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d107      	bne.n	8001a82 <VL53L0X_StaticInit+0x1da>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3308      	adds	r3, #8
 8001a76:	f107 011c 	add.w	r1, r7, #28
 8001a7a:	2278      	movs	r2, #120	; 0x78
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f00a fc29 	bl	800c2d4 <memcpy>


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8001a82:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d111      	bne.n	8001aae <VL53L0X_StaticInit+0x206>
		Status = VL53L0X_RdByte(Dev,
 8001a8a:	f107 0319 	add.w	r3, r7, #25
 8001a8e:	461a      	mov	r2, r3
 8001a90:	2101      	movs	r1, #1
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f004 fd4a 	bl	800652c <VL53L0X_RdByte>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8001a9e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <VL53L0X_StaticInit+0x206>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8001aa6:	7e7a      	ldrb	r2, [r7, #25]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8001aae:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d107      	bne.n	8001ac6 <VL53L0X_StaticInit+0x21e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f9f0 	bl	8001ea0 <VL53L0X_SetSequenceStepEnable>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8001ac6:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <VL53L0X_StaticInit+0x236>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2102      	movs	r1, #2
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f9e4 	bl	8001ea0 <VL53L0X_SetSequenceStepEnable>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8001ade:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d103      	bne.n	8001aee <VL53L0X_StaticInit+0x246>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8001aee:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <VL53L0X_StaticInit+0x262>
		Status = VL53L0X_GetVcselPulsePeriod(
 8001af6:	f107 0313 	add.w	r3, r7, #19
 8001afa:	461a      	mov	r2, r3
 8001afc:	2100      	movs	r1, #0
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f9b6 	bl	8001e70 <VL53L0X_GetVcselPulsePeriod>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001b0a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d103      	bne.n	8001b1a <VL53L0X_StaticInit+0x272>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001b12:	7cfa      	ldrb	r2, [r7, #19]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			PreRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8001b1a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d109      	bne.n	8001b36 <VL53L0X_StaticInit+0x28e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8001b22:	f107 0313 	add.w	r3, r7, #19
 8001b26:	461a      	mov	r2, r3
 8001b28:	2101      	movs	r1, #1
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f9a0 	bl	8001e70 <VL53L0X_GetVcselPulsePeriod>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001b36:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d103      	bne.n	8001b46 <VL53L0X_StaticInit+0x29e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001b3e:	7cfa      	ldrb	r2, [r7, #19]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
			FinalRangeVcselPulsePeriod,
			vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8001b46:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <VL53L0X_StaticInit+0x2ba>
		Status = get_sequence_step_timeout(
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	461a      	mov	r2, r3
 8001b54:	2103      	movs	r1, #3
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f002 ff78 	bl	8004a4c <get_sequence_step_timeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001b62:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d103      	bne.n	8001b72 <VL53L0X_StaticInit+0x2ca>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8001b72:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <VL53L0X_StaticInit+0x2e6>
		Status = get_sequence_step_timeout(
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2104      	movs	r1, #4
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f002 ff62 	bl	8004a4c <get_sequence_step_timeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001b8e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d103      	bne.n	8001b9e <VL53L0X_StaticInit+0x2f6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001b9e:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	37a8      	adds	r7, #168	; 0xa8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000008 	.word	0x20000008

08001bb0 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8001bb8:	239d      	movs	r3, #157	; 0x9d
 8001bba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8001bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f8d6 	bl	8001d90 <VL53L0X_GetDeviceMode>
 8001be4:	4603      	mov	r3, r0
 8001be6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8001be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d107      	bne.n	8001c00 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	3308      	adds	r3, #8
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 fa9e 	bl	8002138 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8001c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8001c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d107      	bne.n	8001c26 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	3310      	adds	r3, #16
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 fad4 	bl	80021ca <VL53L0X_GetXTalkCompensationRateMegaCps>
 8001c22:	4603      	mov	r3, r0
 8001c24:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8001c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d107      	bne.n	8001c3e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	3314      	adds	r3, #20
 8001c32:	4619      	mov	r1, r3
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff fc86 	bl	8001546 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d134      	bne.n	8001cb0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001c46:	2300      	movs	r3, #0
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	e02a      	b.n	8001ca2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8001c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d12a      	bne.n	8001caa <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	b299      	uxth	r1, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	3308      	adds	r3, #8
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	4413      	add	r3, r2
 8001c62:	3304      	adds	r3, #4
 8001c64:	461a      	mov	r2, r3
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fbf4 	bl	8002454 <VL53L0X_GetLimitCheckValue>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8001c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d117      	bne.n	8001cae <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	b299      	uxth	r1, r3
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	3318      	adds	r3, #24
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fb5b 	bl	8002348 <VL53L0X_GetLimitCheckEnable>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b05      	cmp	r3, #5
 8001ca6:	ddd1      	ble.n	8001c4c <VL53L0X_GetDeviceParameters+0x80>
 8001ca8:	e002      	b.n	8001cb0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8001caa:	bf00      	nop
 8001cac:	e000      	b.n	8001cb0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8001cae:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d107      	bne.n	8001cc8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	3374      	adds	r3, #116	; 0x74
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fc56 	bl	8002570 <VL53L0X_GetWrapAroundCheckEnable>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8001cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d107      	bne.n	8001ce0 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f89f 	bl	8001e1a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8001ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d120      	bne.n	8001d2a <VL53L0X_GetDeviceParameters+0x15e>
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	e01a      	b.n	8001d24 <VL53L0X_GetDeviceParameters+0x158>
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
			   Dev->Data.CurrentParameters.dmax_lut.ambRate_mcps[i];
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	3310      	adds	r3, #16
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	685a      	ldr	r2, [r3, #4]
			pDeviceParameters->dmax_lut.ambRate_mcps[i] =
 8001cfa:	6839      	ldr	r1, [r7, #0]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	330e      	adds	r3, #14
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	605a      	str	r2, [r3, #4]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
			   Dev->Data.CurrentParameters.dmax_lut.dmax_mm[i];
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	3316      	adds	r3, #22
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	689a      	ldr	r2, [r3, #8]
			pDeviceParameters->dmax_lut.dmax_mm[i] =
 8001d12:	6839      	ldr	r1, [r7, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	3314      	adds	r3, #20
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	609a      	str	r2, [r3, #8]
		for (i = 0; i < VL53L0X_DMAX_LUT_SIZE; i++) {
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	3301      	adds	r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	dde1      	ble.n	8001cee <VL53L0X_GetDeviceParameters+0x122>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
				    VL53L0X_DeviceModes DeviceMode)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	2b15      	cmp	r3, #21
 8001d4c:	bf8c      	ite	hi
 8001d4e:	2201      	movhi	r2, #1
 8001d50:	2200      	movls	r2, #0
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	2a00      	cmp	r2, #0
 8001d56:	d10e      	bne.n	8001d76 <VL53L0X_SetDeviceMode+0x3e>
 8001d58:	2201      	movs	r2, #1
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <VL53L0X_SetDeviceMode+0x54>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf14      	ite	ne
 8001d64:	2301      	movne	r3, #1
 8001d66:	2300      	moveq	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	721a      	strb	r2, [r3, #8]
		break;
 8001d74:	e001      	b.n	8001d7a <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8001d76:	23f8      	movs	r3, #248	; 0xf8
 8001d78:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	0030000b 	.word	0x0030000b

08001d90 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7a1a      	ldrb	r2, [r3, #8]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	2109      	movs	r1, #9
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f004 fbaf 	bl	800652c <VL53L0X_RdByte>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d106      	bne.n	8001de8 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8001de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8001e02:	6839      	ldr	r1, [r7, #0]
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f003 fab4 	bl	8005372 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f003 fb74 	bl	8005518 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8001e30:	4603      	mov	r3, r0
 8001e32:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8001e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70fb      	strb	r3, [r7, #3]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8001e54:	78ba      	ldrb	r2, [r7, #2]
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f002 ffc9 	bl	8004df2 <VL53L0X_set_vcsel_pulse_period>
 8001e60:	4603      	mov	r3, r0
 8001e62:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8001e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8001e82:	7afb      	ldrb	r3, [r7, #11]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4619      	mov	r1, r3
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f003 fa3b 	bl	8005304 <VL53L0X_get_vcsel_pulse_period>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8001e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	70fb      	strb	r3, [r7, #3]
 8001eac:	4613      	mov	r3, r2
 8001eae:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001ebc:	f107 030f 	add.w	r3, r7, #15
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f004 fb31 	bl	800652c <VL53L0X_RdByte>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8001ed2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d15a      	bne.n	8001f90 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8001eda:	78bb      	ldrb	r3, [r7, #2]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d12b      	bne.n	8001f38 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d825      	bhi.n	8001f32 <VL53L0X_SetSequenceStepEnable+0x92>
 8001ee6:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <VL53L0X_SetSequenceStepEnable+0x4c>)
 8001ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eec:	08001f01 	.word	0x08001f01
 8001ef0:	08001f0b 	.word	0x08001f0b
 8001ef4:	08001f15 	.word	0x08001f15
 8001ef8:	08001f1f 	.word	0x08001f1f
 8001efc:	08001f29 	.word	0x08001f29
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8001f00:	7dbb      	ldrb	r3, [r7, #22]
 8001f02:	f043 0310 	orr.w	r3, r3, #16
 8001f06:	75bb      	strb	r3, [r7, #22]
				break;
 8001f08:	e043      	b.n	8001f92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8001f0a:	7dbb      	ldrb	r3, [r7, #22]
 8001f0c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001f10:	75bb      	strb	r3, [r7, #22]
				break;
 8001f12:	e03e      	b.n	8001f92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8001f14:	7dbb      	ldrb	r3, [r7, #22]
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	75bb      	strb	r3, [r7, #22]
				break;
 8001f1c:	e039      	b.n	8001f92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8001f1e:	7dbb      	ldrb	r3, [r7, #22]
 8001f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f24:	75bb      	strb	r3, [r7, #22]
				break;
 8001f26:	e034      	b.n	8001f92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8001f28:	7dbb      	ldrb	r3, [r7, #22]
 8001f2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f2e:	75bb      	strb	r3, [r7, #22]
				break;
 8001f30:	e02f      	b.n	8001f92 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001f32:	23fc      	movs	r3, #252	; 0xfc
 8001f34:	75fb      	strb	r3, [r7, #23]
 8001f36:	e02c      	b.n	8001f92 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d825      	bhi.n	8001f8a <VL53L0X_SetSequenceStepEnable+0xea>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f59 	.word	0x08001f59
 8001f48:	08001f63 	.word	0x08001f63
 8001f4c:	08001f6d 	.word	0x08001f6d
 8001f50:	08001f77 	.word	0x08001f77
 8001f54:	08001f81 	.word	0x08001f81
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8001f58:	7dbb      	ldrb	r3, [r7, #22]
 8001f5a:	f023 0310 	bic.w	r3, r3, #16
 8001f5e:	75bb      	strb	r3, [r7, #22]
				break;
 8001f60:	e017      	b.n	8001f92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8001f62:	7dbb      	ldrb	r3, [r7, #22]
 8001f64:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001f68:	75bb      	strb	r3, [r7, #22]
				break;
 8001f6a:	e012      	b.n	8001f92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8001f6c:	7dbb      	ldrb	r3, [r7, #22]
 8001f6e:	f023 0304 	bic.w	r3, r3, #4
 8001f72:	75bb      	strb	r3, [r7, #22]
				break;
 8001f74:	e00d      	b.n	8001f92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8001f76:	7dbb      	ldrb	r3, [r7, #22]
 8001f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f7c:	75bb      	strb	r3, [r7, #22]
				break;
 8001f7e:	e008      	b.n	8001f92 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8001f80:	7dbb      	ldrb	r3, [r7, #22]
 8001f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f86:	75bb      	strb	r3, [r7, #22]
				break;
 8001f88:	e003      	b.n	8001f92 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8001f8a:	23fc      	movs	r3, #252	; 0xfc
 8001f8c:	75fb      	strb	r3, [r7, #23]
 8001f8e:	e000      	b.n	8001f92 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8001f90:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	7dba      	ldrb	r2, [r7, #22]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d01e      	beq.n	8001fd8 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8001f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d107      	bne.n	8001fb2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8001fa2:	7dbb      	ldrb	r3, [r7, #22]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f004 fa3d 	bl	8006428 <VL53L0X_WrByte>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8001fb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d103      	bne.n	8001fc2 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7dba      	ldrb	r2, [r7, #22]
 8001fbe:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8001fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001fd0:	6939      	ldr	r1, [r7, #16]
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff ff0e 	bl	8001df4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8001fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	72fb      	strb	r3, [r7, #11]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8002000:	7afb      	ldrb	r3, [r7, #11]
 8002002:	2b04      	cmp	r3, #4
 8002004:	d836      	bhi.n	8002074 <sequence_step_enabled+0x90>
 8002006:	a201      	add	r2, pc, #4	; (adr r2, 800200c <sequence_step_enabled+0x28>)
 8002008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200c:	08002021 	.word	0x08002021
 8002010:	08002033 	.word	0x08002033
 8002014:	08002045 	.word	0x08002045
 8002018:	08002057 	.word	0x08002057
 800201c:	08002069 	.word	0x08002069
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8002020:	7abb      	ldrb	r3, [r7, #10]
 8002022:	111b      	asrs	r3, r3, #4
 8002024:	b2db      	uxtb	r3, r3
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	b2da      	uxtb	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	701a      	strb	r2, [r3, #0]
		break;
 8002030:	e022      	b.n	8002078 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8002032:	7abb      	ldrb	r3, [r7, #10]
 8002034:	10db      	asrs	r3, r3, #3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	701a      	strb	r2, [r3, #0]
		break;
 8002042:	e019      	b.n	8002078 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8002044:	7abb      	ldrb	r3, [r7, #10]
 8002046:	109b      	asrs	r3, r3, #2
 8002048:	b2db      	uxtb	r3, r3
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	b2da      	uxtb	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	701a      	strb	r2, [r3, #0]
		break;
 8002054:	e010      	b.n	8002078 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8002056:	7abb      	ldrb	r3, [r7, #10]
 8002058:	119b      	asrs	r3, r3, #6
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	b2da      	uxtb	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	701a      	strb	r2, [r3, #0]
		break;
 8002066:	e007      	b.n	8002078 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8002068:	7abb      	ldrb	r3, [r7, #10]
 800206a:	09db      	lsrs	r3, r3, #7
 800206c:	b2da      	uxtb	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	701a      	strb	r2, [r3, #0]
		break;
 8002072:	e001      	b.n	8002078 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002074:	23fc      	movs	r3, #252	; 0xfc
 8002076:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002078:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800207c:	4618      	mov	r0, r3
 800207e:	371c      	adds	r7, #28
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002092:	2300      	movs	r3, #0
 8002094:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800209a:	f107 030e 	add.w	r3, r7, #14
 800209e:	461a      	mov	r2, r3
 80020a0:	2101      	movs	r1, #1
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f004 fa42 	bl	800652c <VL53L0X_RdByte>
 80020a8:	4603      	mov	r3, r0
 80020aa:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80020ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80020b4:	7bba      	ldrb	r2, [r7, #14]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2100      	movs	r1, #0
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ff92 	bl	8001fe4 <sequence_step_enabled>
 80020c0:	4603      	mov	r3, r0
 80020c2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80020c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d108      	bne.n	80020de <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80020cc:	7bba      	ldrb	r2, [r7, #14]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	3302      	adds	r3, #2
 80020d2:	2101      	movs	r1, #1
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff85 	bl	8001fe4 <sequence_step_enabled>
 80020da:	4603      	mov	r3, r0
 80020dc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80020de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d108      	bne.n	80020f8 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80020e6:	7bba      	ldrb	r2, [r7, #14]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	3301      	adds	r3, #1
 80020ec:	2102      	movs	r1, #2
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ff78 	bl	8001fe4 <sequence_step_enabled>
 80020f4:	4603      	mov	r3, r0
 80020f6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80020f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d108      	bne.n	8002112 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8002100:	7bba      	ldrb	r2, [r7, #14]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	3303      	adds	r3, #3
 8002106:	2103      	movs	r1, #3
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ff6b 	bl	8001fe4 <sequence_step_enabled>
 800210e:	4603      	mov	r3, r0
 8002110:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800211a:	7bba      	ldrb	r2, [r7, #14]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	3304      	adds	r3, #4
 8002120:	2104      	movs	r1, #4
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff ff5e 	bl	8001fe4 <sequence_step_enabled>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800212c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	461a      	mov	r2, r3
 800214c:	21f8      	movs	r1, #248	; 0xf8
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f004 fa16 	bl	8006580 <VL53L0X_RdWord>
 8002154:	4603      	mov	r3, r0
 8002156:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8002158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d108      	bne.n	8002172 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8002160:	f107 0308 	add.w	r3, r7, #8
 8002164:	461a      	mov	r2, r3
 8002166:	2104      	movs	r1, #4
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f004 fa41 	bl	80065f0 <VL53L0X_RdDWord>
 800216e:	4603      	mov	r3, r0
 8002170:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800217a:	89bb      	ldrh	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	89ba      	ldrh	r2, [r7, #12]
 8002184:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	611a      	str	r2, [r3, #16]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002194:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7d1b      	ldrb	r3, [r3, #20]
 80021b2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	7bba      	ldrb	r2, [r7, #14]
 80021b8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80021ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80021d8:	f107 030e 	add.w	r3, r7, #14
 80021dc:	461a      	mov	r2, r3
 80021de:	2120      	movs	r1, #32
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f004 f9cd 	bl	8006580 <VL53L0X_RdWord>
 80021e6:	4603      	mov	r3, r0
 80021e8:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80021ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d118      	bne.n	8002224 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80021f2:	89fb      	ldrh	r3, [r7, #14]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d109      	bne.n	800220c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	751a      	strb	r2, [r3, #20]
 800220a:	e00b      	b.n	8002224 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800220c:	89fb      	ldrh	r3, [r7, #14]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	619a      	str	r2, [r3, #24]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	751a      	strb	r2, [r3, #20]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002224:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <VL53L0X_SetLimitCheckEnable>:
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	807b      	strh	r3, [r7, #2]
 800223c:	4613      	mov	r3, r2
 800223e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002240:	2300      	movs	r3, #0
 8002242:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8002250:	887b      	ldrh	r3, [r7, #2]
 8002252:	2b05      	cmp	r3, #5
 8002254:	d902      	bls.n	800225c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002256:	23fc      	movs	r3, #252	; 0xfc
 8002258:	75fb      	strb	r3, [r7, #23]
 800225a:	e05b      	b.n	8002314 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800225c:	787b      	ldrb	r3, [r7, #1]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800226a:	2301      	movs	r3, #1
 800226c:	73bb      	strb	r3, [r7, #14]
 800226e:	e00a      	b.n	8002286 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002270:	887b      	ldrh	r3, [r7, #2]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	330a      	adds	r3, #10
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800227e:	2300      	movs	r3, #0
 8002280:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8002282:	2301      	movs	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	2b05      	cmp	r3, #5
 800228a:	d841      	bhi.n	8002310 <VL53L0X_SetLimitCheckEnable+0xe0>
 800228c:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <VL53L0X_SetLimitCheckEnable+0x64>)
 800228e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002292:	bf00      	nop
 8002294:	080022ad 	.word	0x080022ad
 8002298:	080022b7 	.word	0x080022b7
 800229c:	080022cd 	.word	0x080022cd
 80022a0:	080022d7 	.word	0x080022d7
 80022a4:	080022e1 	.word	0x080022e1
 80022a8:	080022f9 	.word	0x080022f9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	f883 2020 	strb.w	r2, [r3, #32]
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80022b4:	e02e      	b.n	8002314 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	2144      	movs	r1, #68	; 0x44
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f004 f8d5 	bl	8006470 <VL53L0X_WrWord>
 80022c6:	4603      	mov	r3, r0
 80022c8:	75fb      	strb	r3, [r7, #23]

			break;
 80022ca:	e023      	b.n	8002314 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80022d4:	e01e      	b.n	8002314 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	7bfa      	ldrb	r2, [r7, #15]
 80022da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80022de:	e019      	b.n	8002314 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80022e0:	7bbb      	ldrb	r3, [r7, #14]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80022e6:	7b7b      	ldrb	r3, [r7, #13]
 80022e8:	22fe      	movs	r2, #254	; 0xfe
 80022ea:	2160      	movs	r1, #96	; 0x60
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f004 f8e9 	bl	80064c4 <VL53L0X_UpdateByte>
 80022f2:	4603      	mov	r3, r0
 80022f4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80022f6:	e00d      	b.n	8002314 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80022f8:	7bbb      	ldrb	r3, [r7, #14]
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80022fe:	7b7b      	ldrb	r3, [r7, #13]
 8002300:	22ef      	movs	r2, #239	; 0xef
 8002302:	2160      	movs	r1, #96	; 0x60
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f004 f8dd 	bl	80064c4 <VL53L0X_UpdateByte>
 800230a:	4603      	mov	r3, r0
 800230c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800230e:	e001      	b.n	8002314 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002310:	23fc      	movs	r3, #252	; 0xfc
 8002312:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002314:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10f      	bne.n	800233c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800231c:	787b      	ldrb	r3, [r7, #1]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4413      	add	r3, r2
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2020 	strb.w	r2, [r3, #32]
 800232e:	e005      	b.n	800233c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8002330:	887b      	ldrh	r3, [r7, #2]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2020 	strb.w	r2, [r3, #32]
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800233c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
	uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	460b      	mov	r3, r1
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800235a:	897b      	ldrh	r3, [r7, #10]
 800235c:	2b05      	cmp	r3, #5
 800235e:	d905      	bls.n	800236c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002360:	23fc      	movs	r3, #252	; 0xfc
 8002362:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e008      	b.n	800237e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800236c:	897b      	ldrh	r3, [r7, #10]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4413      	add	r3, r2
 8002372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002376:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7dba      	ldrb	r2, [r7, #22]
 800237c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800237e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002382:	4618      	mov	r0, r3
 8002384:	371c      	adds	r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	460b      	mov	r3, r1
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800239e:	2300      	movs	r3, #0
 80023a0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80023a2:	897b      	ldrh	r3, [r7, #10]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ac:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80023ae:	7dbb      	ldrb	r3, [r7, #22]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80023b4:	897b      	ldrh	r3, [r7, #10]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	330a      	adds	r3, #10
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	e040      	b.n	8002446 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80023c4:	897b      	ldrh	r3, [r7, #10]
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d830      	bhi.n	800242c <VL53L0X_SetLimitCheckValue+0x9c>
 80023ca:	a201      	add	r2, pc, #4	; (adr r2, 80023d0 <VL53L0X_SetLimitCheckValue+0x40>)
 80023cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d0:	080023e9 	.word	0x080023e9
 80023d4:	080023f1 	.word	0x080023f1
 80023d8:	08002407 	.word	0x08002407
 80023dc:	0800240f 	.word	0x0800240f
 80023e0:	08002417 	.word	0x08002417
 80023e4:	08002417 	.word	0x08002417

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	62da      	str	r2, [r3, #44]	; 0x2c
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80023ee:	e01f      	b.n	8002430 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	2144      	movs	r1, #68	; 0x44
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f004 f838 	bl	8006470 <VL53L0X_WrWord>
 8002400:	4603      	mov	r3, r0
 8002402:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8002404:	e014      	b.n	8002430 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800240c:	e010      	b.n	8002430 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8002414:	e00c      	b.n	8002430 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800241a:	b29b      	uxth	r3, r3
 800241c:	461a      	mov	r2, r3
 800241e:	2164      	movs	r1, #100	; 0x64
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f004 f825 	bl	8006470 <VL53L0X_WrWord>
 8002426:	4603      	mov	r3, r0
 8002428:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800242a:	e001      	b.n	8002430 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800242c:	23fc      	movs	r3, #252	; 0xfc
 800242e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8002430:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d106      	bne.n	8002446 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002438:	897b      	ldrh	r3, [r7, #10]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	330a      	adds	r3, #10
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002446:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop

08002454 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	460b      	mov	r3, r1
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002462:	2300      	movs	r3, #0
 8002464:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800246a:	897b      	ldrh	r3, [r7, #10]
 800246c:	2b05      	cmp	r3, #5
 800246e:	d847      	bhi.n	8002500 <VL53L0X_GetLimitCheckValue+0xac>
 8002470:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <VL53L0X_GetLimitCheckValue+0x24>)
 8002472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002476:	bf00      	nop
 8002478:	08002491 	.word	0x08002491
 800247c:	0800249d 	.word	0x0800249d
 8002480:	080024c3 	.word	0x080024c3
 8002484:	080024cf 	.word	0x080024cf
 8002488:	080024db 	.word	0x080024db
 800248c:	080024db 	.word	0x080024db

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002494:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	77bb      	strb	r3, [r7, #30]
		break;
 800249a:	e033      	b.n	8002504 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800249c:	f107 0316 	add.w	r3, r7, #22
 80024a0:	461a      	mov	r2, r3
 80024a2:	2144      	movs	r1, #68	; 0x44
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f004 f86b 	bl	8006580 <VL53L0X_RdWord>
 80024aa:	4603      	mov	r3, r0
 80024ac:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80024ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80024b6:	8afb      	ldrh	r3, [r7, #22]
 80024b8:	025b      	lsls	r3, r3, #9
 80024ba:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80024bc:	2301      	movs	r3, #1
 80024be:	77bb      	strb	r3, [r7, #30]
		break;
 80024c0:	e020      	b.n	8002504 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	77bb      	strb	r3, [r7, #30]
		break;
 80024cc:	e01a      	b.n	8002504 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
			TempFix1616);
		EnableZeroValue = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	77bb      	strb	r3, [r7, #30]
		break;
 80024d8:	e014      	b.n	8002504 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80024da:	f107 0316 	add.w	r3, r7, #22
 80024de:	461a      	mov	r2, r3
 80024e0:	2164      	movs	r1, #100	; 0x64
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f004 f84c 	bl	8006580 <VL53L0X_RdWord>
 80024e8:	4603      	mov	r3, r0
 80024ea:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80024ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80024f4:	8afb      	ldrh	r3, [r7, #22]
 80024f6:	025b      	lsls	r3, r3, #9
 80024f8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	77bb      	strb	r3, [r7, #30]
		break;
 80024fe:	e001      	b.n	8002504 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002500:	23fc      	movs	r3, #252	; 0xfc
 8002502:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002504:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d12a      	bne.n	8002562 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800250c:	7fbb      	ldrb	r3, [r7, #30]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d124      	bne.n	800255c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d110      	bne.n	800253a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8002518:	897b      	ldrh	r3, [r7, #10]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	330a      	adds	r3, #10
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800252c:	897b      	ldrh	r3, [r7, #10]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	4413      	add	r3, r2
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2020 	strb.w	r2, [r3, #32]
 8002538:	e013      	b.n	8002562 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8002540:	897b      	ldrh	r3, [r7, #10]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	330a      	adds	r3, #10
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800254e:	897b      	ldrh	r3, [r7, #10]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2020 	strb.w	r2, [r3, #32]
 800255a:	e002      	b.n	8002562 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002562:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8002566:	4618      	mov	r0, r3
 8002568:	3720      	adds	r7, #32
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop

08002570 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800257e:	f107 030e 	add.w	r3, r7, #14
 8002582:	461a      	mov	r2, r3
 8002584:	2101      	movs	r1, #1
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f003 ffd0 	bl	800652c <VL53L0X_RdByte>
 800258c:	4603      	mov	r3, r0
 800258e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8002590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10e      	bne.n	80025b6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8002598:	7bba      	ldrb	r2, [r7, #14]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
		if (data & (0x01 << 7))
 80025a0:	7bbb      	ldrb	r3, [r7, #14]
 80025a2:	b25b      	sxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	da03      	bge.n	80025b0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	2201      	movs	r2, #1
 80025ac:	701a      	strb	r2, [r3, #0]
 80025ae:	e002      	b.n	80025b6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80025b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80025c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80025e0:	f107 030e 	add.w	r3, r7, #14
 80025e4:	4619      	mov	r1, r3
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff fbd2 	bl	8001d90 <VL53L0X_GetDeviceMode>
 80025ec:	4603      	mov	r3, r0
 80025ee:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram
	 */
	if (Status == VL53L0X_ERROR_NONE
 80025f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80025f8:	7bbb      	ldrb	r3, [r7, #14]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d104      	bne.n	8002608 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f924 	bl	800284c <VL53L0X_StartMeasurement>
 8002604:	4603      	mov	r3, r0
 8002606:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8002608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d104      	bne.n	800261a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f001 fbcb 	bl	8003dac <VL53L0X_measurement_poll_for_completion>
 8002616:	4603      	mov	r3, r0
 8002618:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800261a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8002622:	7bbb      	ldrb	r3, [r7, #14]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d103      	bne.n	8002630 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2203      	movs	r2, #3
 800262c:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e


	LOG_FUNCTION_END(Status);
	return Status;
 8002630:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <VL53L0X_PerformRefCalibration>:
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002648:	2300      	movs	r3, #0
 800264a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800264c:	2301      	movs	r3, #1
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f001 fb6d 	bl	8003d32 <VL53L0X_perform_ref_calibration>
 8002658:	4603      	mov	r3, r0
 800265a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800265c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002674:	2300      	movs	r3, #0
 8002676:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800267e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	switch (InterruptConfig) {
 8002680:	7dbb      	ldrb	r3, [r7, #22]
 8002682:	2b03      	cmp	r3, #3
 8002684:	f000 8093 	beq.w	80027ae <VL53L0X_CheckAndLoadInterruptSettings+0x146>
 8002688:	2b03      	cmp	r3, #3
 800268a:	f300 80d6 	bgt.w	800283a <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
 800268e:	2b01      	cmp	r3, #1
 8002690:	d002      	beq.n	8002698 <VL53L0X_CheckAndLoadInterruptSettings+0x30>
 8002692:	2b02      	cmp	r3, #2
 8002694:	d047      	beq.n	8002726 <VL53L0X_CheckAndLoadInterruptSettings+0xbe>
 8002696:	e0d0      	b.n	800283a <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	f107 0210 	add.w	r2, r7, #16
 80026a0:	2101      	movs	r1, #1
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fc4c 	bl	8002f40 <VL53L0X_GetInterruptThresholds>
 80026a8:	4603      	mov	r3, r0
 80026aa:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdLow > 255*65536) &&
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80026b2:	f240 80bd 	bls.w	8002830 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
 80026b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 80b8 	bne.w	8002830 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <VL53L0X_CheckAndLoadInterruptSettings+0x6c>
				Status = VL53L0X_load_tuning_settings(Dev,
 80026c6:	4960      	ldr	r1, [pc, #384]	; (8002848 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f002 ffd7 	bl	800567c <VL53L0X_load_tuning_settings>
 80026ce:	4603      	mov	r3, r0
 80026d0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 80026d2:	e0ad      	b.n	8002830 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80026d4:	2204      	movs	r2, #4
 80026d6:	21ff      	movs	r1, #255	; 0xff
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f003 fea5 	bl	8006428 <VL53L0X_WrByte>
 80026de:	4603      	mov	r3, r0
 80026e0:	461a      	mov	r2, r3
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2170      	movs	r1, #112	; 0x70
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f003 fe9b 	bl	8006428 <VL53L0X_WrByte>
 80026f2:	4603      	mov	r3, r0
 80026f4:	461a      	mov	r2, r3
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80026fc:	2200      	movs	r2, #0
 80026fe:	21ff      	movs	r1, #255	; 0xff
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f003 fe91 	bl	8006428 <VL53L0X_WrByte>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	7dfb      	ldrb	r3, [r7, #23]
 800270c:	4313      	orrs	r3, r2
 800270e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002710:	2200      	movs	r2, #0
 8002712:	2180      	movs	r1, #128	; 0x80
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f003 fe87 	bl	8006428 <VL53L0X_WrByte>
 800271a:	4603      	mov	r3, r0
 800271c:	461a      	mov	r2, r3
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	4313      	orrs	r3, r2
 8002722:	75fb      	strb	r3, [r7, #23]
		break;
 8002724:	e084      	b.n	8002830 <VL53L0X_CheckAndLoadInterruptSettings+0x1c8>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 8002726:	f107 030c 	add.w	r3, r7, #12
 800272a:	f107 0210 	add.w	r2, r7, #16
 800272e:	2101      	movs	r1, #1
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fc05 	bl	8002f40 <VL53L0X_GetInterruptThresholds>
 8002736:	4603      	mov	r3, r0
 8002738:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if ((ThresholdHigh > 0) &&
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d079      	beq.n	8002834 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
 8002740:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d175      	bne.n	8002834 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d006      	beq.n	800275c <VL53L0X_CheckAndLoadInterruptSettings+0xf4>
				Status = VL53L0X_load_tuning_settings(Dev,
 800274e:	493e      	ldr	r1, [pc, #248]	; (8002848 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f002 ff93 	bl	800567c <VL53L0X_load_tuning_settings>
 8002756:	4603      	mov	r3, r0
 8002758:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 800275a:	e06b      	b.n	8002834 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800275c:	2204      	movs	r2, #4
 800275e:	21ff      	movs	r1, #255	; 0xff
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f003 fe61 	bl	8006428 <VL53L0X_WrByte>
 8002766:	4603      	mov	r3, r0
 8002768:	461a      	mov	r2, r3
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	4313      	orrs	r3, r2
 800276e:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8002770:	2200      	movs	r2, #0
 8002772:	2170      	movs	r1, #112	; 0x70
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f003 fe57 	bl	8006428 <VL53L0X_WrByte>
 800277a:	4603      	mov	r3, r0
 800277c:	461a      	mov	r2, r3
 800277e:	7dfb      	ldrb	r3, [r7, #23]
 8002780:	4313      	orrs	r3, r2
 8002782:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002784:	2200      	movs	r2, #0
 8002786:	21ff      	movs	r1, #255	; 0xff
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f003 fe4d 	bl	8006428 <VL53L0X_WrByte>
 800278e:	4603      	mov	r3, r0
 8002790:	461a      	mov	r2, r3
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	4313      	orrs	r3, r2
 8002796:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002798:	2200      	movs	r2, #0
 800279a:	2180      	movs	r1, #128	; 0x80
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f003 fe43 	bl	8006428 <VL53L0X_WrByte>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	75fb      	strb	r3, [r7, #23]
		break;
 80027ac:	e042      	b.n	8002834 <VL53L0X_CheckAndLoadInterruptSettings+0x1cc>
	case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
		Status = VL53L0X_GetInterruptThresholds(Dev,
 80027ae:	f107 030c 	add.w	r3, r7, #12
 80027b2:	f107 0210 	add.w	r2, r7, #16
 80027b6:	2101      	movs	r1, #1
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fbc1 	bl	8002f40 <VL53L0X_GetInterruptThresholds>
 80027be:	4603      	mov	r3, r0
 80027c0:	75fb      	strb	r3, [r7, #23]
					VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
					&ThresholdLow, &ThresholdHigh);

		if (Status == VL53L0X_ERROR_NONE) {
 80027c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d136      	bne.n	8002838 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
			if (StartNotStopFlag != 0) {
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d006      	beq.n	80027de <VL53L0X_CheckAndLoadInterruptSettings+0x176>
				Status = VL53L0X_load_tuning_settings(Dev,
 80027d0:	491d      	ldr	r1, [pc, #116]	; (8002848 <VL53L0X_CheckAndLoadInterruptSettings+0x1e0>)
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f002 ff52 	bl	800567c <VL53L0X_load_tuning_settings>
 80027d8:	4603      	mov	r3, r0
 80027da:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
			}
		}
		break;
 80027dc:	e02c      	b.n	8002838 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80027de:	2204      	movs	r2, #4
 80027e0:	21ff      	movs	r1, #255	; 0xff
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f003 fe20 	bl	8006428 <VL53L0X_WrByte>
 80027e8:	4603      	mov	r3, r0
 80027ea:	461a      	mov	r2, r3
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2170      	movs	r1, #112	; 0x70
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f003 fe16 	bl	8006428 <VL53L0X_WrByte>
 80027fc:	4603      	mov	r3, r0
 80027fe:	461a      	mov	r2, r3
 8002800:	7dfb      	ldrb	r3, [r7, #23]
 8002802:	4313      	orrs	r3, r2
 8002804:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002806:	2200      	movs	r2, #0
 8002808:	21ff      	movs	r1, #255	; 0xff
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f003 fe0c 	bl	8006428 <VL53L0X_WrByte>
 8002810:	4603      	mov	r3, r0
 8002812:	461a      	mov	r2, r3
 8002814:	7dfb      	ldrb	r3, [r7, #23]
 8002816:	4313      	orrs	r3, r2
 8002818:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800281a:	2200      	movs	r2, #0
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f003 fe02 	bl	8006428 <VL53L0X_WrByte>
 8002824:	4603      	mov	r3, r0
 8002826:	461a      	mov	r2, r3
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	4313      	orrs	r3, r2
 800282c:	75fb      	strb	r3, [r7, #23]
		break;
 800282e:	e003      	b.n	8002838 <VL53L0X_CheckAndLoadInterruptSettings+0x1d0>
		break;
 8002830:	bf00      	nop
 8002832:	e002      	b.n	800283a <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8002834:	bf00      	nop
 8002836:	e000      	b.n	800283a <VL53L0X_CheckAndLoadInterruptSettings+0x1d2>
		break;
 8002838:	bf00      	nop
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800283a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200000fc 	.word	0x200000fc

0800284c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002854:	2300      	movs	r3, #0
 8002856:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8002858:	2301      	movs	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800285c:	f107 030e 	add.w	r3, r7, #14
 8002860:	4619      	mov	r1, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff fa94 	bl	8001d90 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002868:	2201      	movs	r2, #1
 800286a:	2180      	movs	r1, #128	; 0x80
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f003 fddb 	bl	8006428 <VL53L0X_WrByte>
 8002872:	4603      	mov	r3, r0
 8002874:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002876:	2201      	movs	r2, #1
 8002878:	21ff      	movs	r1, #255	; 0xff
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f003 fdd4 	bl	8006428 <VL53L0X_WrByte>
 8002880:	4603      	mov	r3, r0
 8002882:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002884:	2200      	movs	r2, #0
 8002886:	2100      	movs	r1, #0
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f003 fdcd 	bl	8006428 <VL53L0X_WrByte>
 800288e:	4603      	mov	r3, r0
 8002890:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 8002898:	461a      	mov	r2, r3
 800289a:	2191      	movs	r1, #145	; 0x91
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f003 fdc3 	bl	8006428 <VL53L0X_WrByte>
 80028a2:	4603      	mov	r3, r0
 80028a4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80028a6:	2201      	movs	r2, #1
 80028a8:	2100      	movs	r1, #0
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f003 fdbc 	bl	8006428 <VL53L0X_WrByte>
 80028b0:	4603      	mov	r3, r0
 80028b2:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80028b4:	2200      	movs	r2, #0
 80028b6:	21ff      	movs	r1, #255	; 0xff
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f003 fdb5 	bl	8006428 <VL53L0X_WrByte>
 80028be:	4603      	mov	r3, r0
 80028c0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2180      	movs	r1, #128	; 0x80
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f003 fdae 	bl	8006428 <VL53L0X_WrByte>
 80028cc:	4603      	mov	r3, r0
 80028ce:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80028d0:	7bbb      	ldrb	r3, [r7, #14]
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	d054      	beq.n	8002980 <VL53L0X_StartMeasurement+0x134>
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	dc6c      	bgt.n	80029b4 <VL53L0X_StartMeasurement+0x168>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <VL53L0X_StartMeasurement+0x98>
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d034      	beq.n	800294c <VL53L0X_StartMeasurement+0x100>
 80028e2:	e067      	b.n	80029b4 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80028e4:	2201      	movs	r2, #1
 80028e6:	2100      	movs	r1, #0
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f003 fd9d 	bl	8006428 <VL53L0X_WrByte>
 80028ee:	4603      	mov	r3, r0
 80028f0:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80028f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d15d      	bne.n	80029ba <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8002908:	f107 030d 	add.w	r3, r7, #13
 800290c:	461a      	mov	r2, r3
 800290e:	2100      	movs	r1, #0
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f003 fe0b 	bl	800652c <VL53L0X_RdByte>
 8002916:	4603      	mov	r3, r0
 8002918:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	3301      	adds	r3, #1
 800291e:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8002920:	7b7a      	ldrb	r2, [r7, #13]
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	4013      	ands	r3, r2
 8002926:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002928:	7bfa      	ldrb	r2, [r7, #15]
 800292a:	429a      	cmp	r2, r3
 800292c:	d107      	bne.n	800293e <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800292e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d103      	bne.n	800293e <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800293c:	d3e1      	bcc.n	8002902 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002944:	d339      	bcc.n	80029ba <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8002946:	23f9      	movs	r3, #249	; 0xf9
 8002948:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800294a:	e036      	b.n	80029ba <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800294c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002954:	2101      	movs	r1, #1
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff fe86 	bl	8002668 <VL53L0X_CheckAndLoadInterruptSettings>
 800295c:	4603      	mov	r3, r0
 800295e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002960:	2202      	movs	r2, #2
 8002962:	2100      	movs	r1, #0
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f003 fd5f 	bl	8006428 <VL53L0X_WrByte>
 800296a:	4603      	mov	r3, r0
 800296c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800296e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d123      	bne.n	80029be <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2204      	movs	r2, #4
 800297a:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 800297e:	e01e      	b.n	80029be <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8002980:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d105      	bne.n	8002994 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8002988:	2101      	movs	r1, #1
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff fe6c 	bl	8002668 <VL53L0X_CheckAndLoadInterruptSettings>
 8002990:	4603      	mov	r3, r0
 8002992:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8002994:	2204      	movs	r2, #4
 8002996:	2100      	movs	r1, #0
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f003 fd45 	bl	8006428 <VL53L0X_WrByte>
 800299e:	4603      	mov	r3, r0
 80029a0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80029a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10b      	bne.n	80029c2 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2204      	movs	r2, #4
 80029ae:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		}
		break;
 80029b2:	e006      	b.n	80029c2 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80029b4:	23f8      	movs	r3, #248	; 0xf8
 80029b6:	75fb      	strb	r3, [r7, #23]
 80029b8:	e004      	b.n	80029c4 <VL53L0X_StartMeasurement+0x178>
		break;
 80029ba:	bf00      	nop
 80029bc:	e002      	b.n	80029c4 <VL53L0X_StartMeasurement+0x178>
		break;
 80029be:	bf00      	nop
 80029c0:	e000      	b.n	80029c4 <VL53L0X_StartMeasurement+0x178>
		break;
 80029c2:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80029c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80029da:	2300      	movs	r3, #0
 80029dc:	73fb      	strb	r3, [r7, #15]
	uint8_t InterruptConfig;
	uint32_t InterruptMask;

	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80029e4:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80029e6:	7bbb      	ldrb	r3, [r7, #14]
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d112      	bne.n	8002a12 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80029ec:	f107 0308 	add.w	r3, r7, #8
 80029f0:	4619      	mov	r1, r3
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fb1a 	bl	800302c <VL53L0X_GetInterruptMaskStatus>
 80029f8:	4603      	mov	r3, r0
 80029fa:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d103      	bne.n	8002a0a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2201      	movs	r2, #1
 8002a06:	701a      	strb	r2, [r3, #0]
 8002a08:	e01c      	b.n	8002a44 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
 8002a10:	e018      	b.n	8002a44 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8002a12:	f107 030d 	add.w	r3, r7, #13
 8002a16:	461a      	mov	r2, r3
 8002a18:	2114      	movs	r1, #20
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f003 fd86 	bl	800652c <VL53L0X_RdByte>
 8002a20:	4603      	mov	r3, r0
 8002a22:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8002a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10b      	bne.n	8002a44 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8002a2c:	7b7b      	ldrb	r3, [r7, #13]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e002      	b.n	8002a44 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002a50:	b5b0      	push	{r4, r5, r7, lr}
 8002a52:	b096      	sub	sp, #88	; 0x58
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8002a60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a64:	230c      	movs	r3, #12
 8002a66:	2114      	movs	r1, #20
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f003 fcb1 	bl	80063d0 <VL53L0X_ReadMulti>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8002a74:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f040 80d1 	bne.w	8002c20 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2200      	movs	r2, #0
 8002a82:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11],
 8002a8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					       localBuffer[10]);
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	605a      	str	r2, [r3, #4]


		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8002aa6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	025b      	lsls	r3, r3, #9
 8002abc:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ac2:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9],
 8002ac4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
						 localBuffer[8]);
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8002ada:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002ade:	025b      	lsls	r3, r3, #9
 8002ae0:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8002ae6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002b02:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8002b04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002b08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8b3 317e 	ldrh.w	r3, [r3, #382]	; 0x17e
 8002b12:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
 8002b1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8002b1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b24:	d046      	beq.n	8002bb4 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8002b26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002b28:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002b2c:	fb02 f303 	mul.w	r3, r2, r3
 8002b30:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002b34:	4a57      	ldr	r2, [pc, #348]	; (8002c94 <VL53L0X_GetRangingMeasurementData+0x244>)
 8002b36:	fb82 1203 	smull	r1, r2, r2, r3
 8002b3a:	1192      	asrs	r2, r2, #6
 8002b3c:	17db      	asrs	r3, r3, #31
 8002b3e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8002b40:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	7d1b      	ldrb	r3, [r3, #20]
 8002b4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8002b52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d02c      	beq.n	8002bb4 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8002b5a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002b5c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	121a      	asrs	r2, r3, #8
					<= 0) {
 8002b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10d      	bne.n	8002b88 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8002b6c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8002b74:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8002b78:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002b7c:	e016      	b.n	8002bac <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8002b7e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8002b82:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002b86:	e011      	b.n	8002bac <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8002b88:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002b8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b8e:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8002b92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002b94:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8002b9c:	121b      	asrs	r3, r3, #8
 8002b9e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8002ba0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba2:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8002ba4:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8002ba8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8002bac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002bb0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8002bb4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8002bbc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8002bc8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	019b      	lsls	r3, r3, #6
 8002bd0:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	75da      	strb	r2, [r3, #23]
 8002bd6:	e006      	b.n	8002be6 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002bde:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2200      	movs	r2, #0
 8002be4:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8002be6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8002bea:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8002bee:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f003 f993 	bl	8005f28 <VL53L0X_get_pal_range_status>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8002c10:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d103      	bne.n	8002c20 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8002c18:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002c20:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d12f      	bne.n	8002c88 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f107 040c 	add.w	r4, r7, #12
 8002c2e:	f103 0580 	add.w	r5, r3, #128	; 0x80
 8002c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8002c42:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8002c48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8002c50:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8002c56:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8002c5c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8002c62:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8002c68:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8002c6e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8002c78:	f107 050c 	add.w	r5, r7, #12
 8002c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002c88:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3750      	adds	r7, #80	; 0x50
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bdb0      	pop	{r4, r5, r7, pc}
 8002c94:	10624dd3 	.word	0x10624dd3

08002c98 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode!
	 */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff f845 	bl	8001d38 <VL53L0X_SetDeviceMode>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8002cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d104      	bne.n	8002cc4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fc8a 	bl	80025d4 <VL53L0X_PerformSingleMeasurement>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8002cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8002ccc:	6839      	ldr	r1, [r7, #0]
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f7ff febe 	bl	8002a50 <VL53L0X_GetRangingMeasurementData>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8002cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f962 	bl	8002fac <VL53L0X_ClearInterruptMask>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8002cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	461a      	mov	r2, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	70fb      	strb	r3, [r7, #3]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	70bb      	strb	r3, [r7, #2]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8002d1c:	23f6      	movs	r3, #246	; 0xf6
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	e107      	b.n	8002f32 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8002d22:	78bb      	ldrb	r3, [r7, #2]
 8002d24:	2b14      	cmp	r3, #20
 8002d26:	d110      	bne.n	8002d4a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8002d28:	7e3b      	ldrb	r3, [r7, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8002d2e:	2310      	movs	r3, #16
 8002d30:	73bb      	strb	r3, [r7, #14]
 8002d32:	e001      	b.n	8002d38 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8002d38:	7bbb      	ldrb	r3, [r7, #14]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2184      	movs	r1, #132	; 0x84
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f003 fb72 	bl	8006428 <VL53L0X_WrByte>
 8002d44:	4603      	mov	r3, r0
 8002d46:	73fb      	strb	r3, [r7, #15]
 8002d48:	e0f3      	b.n	8002f32 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8002d4a:	78bb      	ldrb	r3, [r7, #2]
 8002d4c:	2b15      	cmp	r3, #21
 8002d4e:	f040 8097 	bne.w	8002e80 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002d52:	2201      	movs	r2, #1
 8002d54:	21ff      	movs	r1, #255	; 0xff
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f003 fb66 	bl	8006428 <VL53L0X_WrByte>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	461a      	mov	r2, r3
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f003 fb5c 	bl	8006428 <VL53L0X_WrByte>
 8002d70:	4603      	mov	r3, r0
 8002d72:	461a      	mov	r2, r3
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	21ff      	movs	r1, #255	; 0xff
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f003 fb52 	bl	8006428 <VL53L0X_WrByte>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002d8e:	2201      	movs	r2, #1
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f003 fb48 	bl	8006428 <VL53L0X_WrByte>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8002da2:	2202      	movs	r2, #2
 8002da4:	2185      	movs	r1, #133	; 0x85
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f003 fb3e 	bl	8006428 <VL53L0X_WrByte>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461a      	mov	r2, r3
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8002db6:	2204      	movs	r2, #4
 8002db8:	21ff      	movs	r1, #255	; 0xff
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f003 fb34 	bl	8006428 <VL53L0X_WrByte>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8002dca:	2200      	movs	r2, #0
 8002dcc:	21cd      	movs	r1, #205	; 0xcd
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f003 fb2a 	bl	8006428 <VL53L0X_WrByte>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8002dde:	2211      	movs	r2, #17
 8002de0:	21cc      	movs	r1, #204	; 0xcc
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f003 fb20 	bl	8006428 <VL53L0X_WrByte>
 8002de8:	4603      	mov	r3, r0
 8002dea:	461a      	mov	r2, r3
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8002df2:	2207      	movs	r2, #7
 8002df4:	21ff      	movs	r1, #255	; 0xff
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f003 fb16 	bl	8006428 <VL53L0X_WrByte>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8002e06:	2200      	movs	r2, #0
 8002e08:	21be      	movs	r1, #190	; 0xbe
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f003 fb0c 	bl	8006428 <VL53L0X_WrByte>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8002e1a:	2206      	movs	r2, #6
 8002e1c:	21ff      	movs	r1, #255	; 0xff
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f003 fb02 	bl	8006428 <VL53L0X_WrByte>
 8002e24:	4603      	mov	r3, r0
 8002e26:	461a      	mov	r2, r3
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8002e2e:	2209      	movs	r2, #9
 8002e30:	21cc      	movs	r1, #204	; 0xcc
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f003 faf8 	bl	8006428 <VL53L0X_WrByte>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	7bfb      	ldrb	r3, [r7, #15]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002e42:	2200      	movs	r2, #0
 8002e44:	21ff      	movs	r1, #255	; 0xff
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f003 faee 	bl	8006428 <VL53L0X_WrByte>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	461a      	mov	r2, r3
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002e56:	2201      	movs	r2, #1
 8002e58:	21ff      	movs	r1, #255	; 0xff
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f003 fae4 	bl	8006428 <VL53L0X_WrByte>
 8002e60:	4603      	mov	r3, r0
 8002e62:	461a      	mov	r2, r3
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f003 fada 	bl	8006428 <VL53L0X_WrByte>
 8002e74:	4603      	mov	r3, r0
 8002e76:	461a      	mov	r2, r3
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	73fb      	strb	r3, [r7, #15]
 8002e7e:	e058      	b.n	8002f32 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8002e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d121      	bne.n	8002ecc <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d81b      	bhi.n	8002ec6 <VL53L0X_SetGpioConfig+0x1ce>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <VL53L0X_SetGpioConfig+0x19c>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ea9 	.word	0x08002ea9
 8002e98:	08002eaf 	.word	0x08002eaf
 8002e9c:	08002eb5 	.word	0x08002eb5
 8002ea0:	08002ebb 	.word	0x08002ebb
 8002ea4:	08002ec1 	.word	0x08002ec1
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	73bb      	strb	r3, [r7, #14]
				break;
 8002eac:	e00f      	b.n	8002ece <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73bb      	strb	r3, [r7, #14]
				break;
 8002eb2:	e00c      	b.n	8002ece <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	73bb      	strb	r3, [r7, #14]
				break;
 8002eb8:	e009      	b.n	8002ece <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	73bb      	strb	r3, [r7, #14]
				break;
 8002ebe:	e006      	b.n	8002ece <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	73bb      	strb	r3, [r7, #14]
				break;
 8002ec4:	e003      	b.n	8002ece <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8002ec6:	23f5      	movs	r3, #245	; 0xf5
 8002ec8:	73fb      	strb	r3, [r7, #15]
 8002eca:	e000      	b.n	8002ece <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8002ecc:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8002ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d107      	bne.n	8002ee6 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8002ed6:	7bbb      	ldrb	r3, [r7, #14]
 8002ed8:	461a      	mov	r2, r3
 8002eda:	210a      	movs	r1, #10
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f003 faa3 	bl	8006428 <VL53L0X_WrByte>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8002ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10f      	bne.n	8002f0e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8002eee:	7e3b      	ldrb	r3, [r7, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d102      	bne.n	8002efa <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73bb      	strb	r3, [r7, #14]
 8002ef8:	e001      	b.n	8002efe <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8002efa:	2310      	movs	r3, #16
 8002efc:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8002efe:	7bbb      	ldrb	r3, [r7, #14]
 8002f00:	22ef      	movs	r2, #239	; 0xef
 8002f02:	2184      	movs	r1, #132	; 0x84
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f003 fadd 	bl	80064c4 <VL53L0X_UpdateByte>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8002f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d103      	bne.n	8002f1e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	787a      	ldrb	r2, [r7, #1]
 8002f1a:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8002f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8002f26:	2100      	movs	r1, #0
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f83f 	bl	8002fac <VL53L0X_ClearInterruptMask>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop

08002f40 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW,
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	461a      	mov	r2, r3
 8002f5a:	210e      	movs	r1, #14
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f003 fb0f 	bl	8006580 <VL53L0X_RdWord>
 8002f62:	4603      	mov	r3, r0
 8002f64:	75fb      	strb	r3, [r7, #23]
				&Threshold16);
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8002f66:	8abb      	ldrh	r3, [r7, #20]
 8002f68:	045b      	lsls	r3, r3, #17
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <VL53L0X_GetInterruptThresholds+0x68>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8002f74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10f      	bne.n	8002f9c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	461a      	mov	r2, r3
 8002f82:	210c      	movs	r1, #12
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f003 fafb 	bl	8006580 <VL53L0X_RdWord>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8002f8e:	8abb      	ldrh	r3, [r7, #20]
 8002f90:	045b      	lsls	r3, r3, #17
 8002f92:	461a      	mov	r2, r3
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <VL53L0X_GetInterruptThresholds+0x68>)
 8002f96:	4013      	ands	r3, r2
		*pThresholdHigh =
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8002f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	1ffe0000 	.word	0x1ffe0000

08002fac <VL53L0X_ClearInterruptMask>:
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
					 uint32_t InterruptMask)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	210b      	movs	r1, #11
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f003 fa30 	bl	8006428 <VL53L0X_WrByte>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8002fcc:	2200      	movs	r2, #0
 8002fce:	210b      	movs	r1, #11
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f003 fa29 	bl	8006428 <VL53L0X_WrByte>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	461a      	mov	r2, r3
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8002fe0:	f107 030d 	add.w	r3, r7, #13
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	2113      	movs	r1, #19
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f003 fa9f 	bl	800652c <VL53L0X_RdByte>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8002ff8:	7bbb      	ldrb	r3, [r7, #14]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8002ffe:	7b7b      	ldrb	r3, [r7, #13]
 8003000:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8003004:	2b00      	cmp	r3, #0
 8003006:	d006      	beq.n	8003016 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8003008:	7bbb      	ldrb	r3, [r7, #14]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d803      	bhi.n	8003016 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0d3      	beq.n	8002fbe <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8003016:	7bbb      	ldrb	r3, [r7, #14]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800301c:	23f4      	movs	r3, #244	; 0xf4
 800301e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8003020:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003036:	2300      	movs	r3, #0
 8003038:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS,
 800303a:	f107 030e 	add.w	r3, r7, #14
 800303e:	461a      	mov	r2, r3
 8003040:	2113      	movs	r1, #19
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f003 fa72 	bl	800652c <VL53L0X_RdByte>
 8003048:	4603      	mov	r3, r0
 800304a:	73fb      	strb	r3, [r7, #15]
				&Byte);
	*pInterruptMaskStatus = Byte & 0x07;
 800304c:	7bbb      	ldrb	r3, [r7, #14]
 800304e:	f003 0207 	and.w	r2, r3, #7
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8003056:	7bbb      	ldrb	r3, [r7, #14]
 8003058:	f003 0318 	and.w	r3, r3, #24
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8003060:	23fa      	movs	r3, #250	; 0xfa
 8003062:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8003064:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800307c:	2300      	movs	r3, #0
 800307e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fa03 	bl	8003490 <VL53L0X_perform_ref_spad_management>
 800308a:	4603      	mov	r3, r0
 800308c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800308e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80030a8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80030ac:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80030ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b2:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80030b4:	f107 0308 	add.w	r3, r7, #8
 80030b8:	461a      	mov	r2, r3
 80030ba:	2128      	movs	r1, #40	; 0x28
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f003 fa5f 	bl	8006580 <VL53L0X_RdWord>
 80030c2:	4603      	mov	r3, r0
 80030c4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80030c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d11e      	bne.n	800310c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80030ce:	893b      	ldrh	r3, [r7, #8]
 80030d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80030d8:	893b      	ldrh	r3, [r7, #8]
 80030da:	461a      	mov	r2, r3
 80030dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	dd0b      	ble.n	80030fc <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80030e4:	893a      	ldrh	r2, [r7, #8]
 80030e6:	897b      	ldrh	r3, [r7, #10]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	b21b      	sxth	r3, r3
 80030ee:	461a      	mov	r2, r3
					* 250;
 80030f0:	23fa      	movs	r3, #250	; 0xfa
 80030f2:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	e007      	b.n	800310c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80030fc:	893b      	ldrh	r3, [r7, #8]
 80030fe:	b21b      	sxth	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	23fa      	movs	r3, #250	; 0xfa
 8003104:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800310c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8003118:	b480      	push	{r7}
 800311a:	b08b      	sub	sp, #44	; 0x2c
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8003126:	2308      	movs	r3, #8
 8003128:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800312a:	2300      	movs	r3, #0
 800312c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	f04f 32ff 	mov.w	r2, #4294967295
 8003134:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	fbb2 f3f3 	udiv	r3, r2, r3
 800313e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	fbb3 f2f2 	udiv	r2, r3, r2
 8003148:	69b9      	ldr	r1, [r7, #24]
 800314a:	fb01 f202 	mul.w	r2, r1, r2
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
 8003156:	e030      	b.n	80031ba <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	4413      	add	r3, r2
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8003166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	429a      	cmp	r2, r3
 800316c:	d11e      	bne.n	80031ac <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating
			 */
			dataByte >>= fineOffset;
 800316e:	7ffa      	ldrb	r2, [r7, #31]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	fa42 f303 	asr.w	r3, r2, r3
 8003176:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800317c:	e016      	b.n	80031ac <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800317e:	7ffb      	ldrb	r3, [r7, #31]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <get_next_good_spad+0x88>
				success = 1;
 8003188:	2301      	movs	r3, #1
 800318a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	fb02 f203 	mul.w	r2, r2, r3
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	4413      	add	r3, r2
 8003198:	461a      	mov	r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	601a      	str	r2, [r3, #0]
				break;
 800319e:	e009      	b.n	80031b4 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80031a0:	7ffb      	ldrb	r3, [r7, #31]
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	3301      	adds	r3, #1
 80031aa:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80031ac:	6a3a      	ldr	r2, [r7, #32]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d3e4      	bcc.n	800317e <get_next_good_spad+0x66>
				coarseIndex++) {
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	3301      	adds	r3, #1
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80031ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d202      	bcs.n	80031c8 <get_next_good_spad+0xb0>
 80031c2:	7fbb      	ldrb	r3, [r7, #30]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0c7      	beq.n	8003158 <get_next_good_spad+0x40>
		}
	}
}
 80031c8:	bf00      	nop
 80031ca:	372c      	adds	r7, #44	; 0x2c
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]

	quadrant = spadIndex >> 6;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	099b      	lsrs	r3, r3, #6
 80031e4:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80031e6:	4a07      	ldr	r2, [pc, #28]	; (8003204 <is_aperture+0x30>)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <is_aperture+0x22>
		isAperture = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	200002b4 	.word	0x200002b4

08003208 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003214:	2300      	movs	r3, #0
 8003216:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8003218:	2308      	movs	r3, #8
 800321a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	fbb2 f3f3 	udiv	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	fbb3 f2f2 	udiv	r2, r3, r2
 800322e:	69b9      	ldr	r1, [r7, #24]
 8003230:	fb01 f202 	mul.w	r2, r1, r2
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	429a      	cmp	r2, r3
 800323e:	d302      	bcc.n	8003246 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003240:	23ce      	movs	r3, #206	; 0xce
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e010      	b.n	8003268 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	4413      	add	r3, r2
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	b25a      	sxtb	r2, r3
 8003250:	2101      	movs	r1, #1
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	fa01 f303 	lsl.w	r3, r1, r3
 8003258:	b25b      	sxtb	r3, r3
 800325a:	4313      	orrs	r3, r2
 800325c:	b259      	sxtb	r1, r3
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	4413      	add	r3, r2
 8003264:	b2ca      	uxtb	r2, r1
 8003266:	701a      	strb	r2, [r3, #0]

	return status;
 8003268:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3724      	adds	r7, #36	; 0x24
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8003282:	2306      	movs	r3, #6
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	21b0      	movs	r1, #176	; 0xb0
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f003 f871 	bl	8006370 <VL53L0X_WriteMulti>
 800328e:	4603      	mov	r3, r0
 8003290:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8003292:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80032a8:	2306      	movs	r3, #6
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	21b0      	movs	r1, #176	; 0xb0
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f003 f88e 	bl	80063d0 <VL53L0X_ReadMulti>
 80032b4:	4603      	mov	r3, r0
 80032b6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80032b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08c      	sub	sp, #48	; 0x30
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	460b      	mov	r3, r1
 80032d2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80032da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032dc:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80032de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80032e2:	2300      	movs	r3, #0
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e6:	e02b      	b.n	8003340 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80032e8:	f107 031c 	add.w	r3, r7, #28
 80032ec:	6a3a      	ldr	r2, [r7, #32]
 80032ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff11 	bl	8003118 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fc:	d103      	bne.n	8003306 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80032fe:	23ce      	movs	r3, #206	; 0xce
 8003300:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8003304:	e020      	b.n	8003348 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	461a      	mov	r2, r3
 800330a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330c:	4413      	add	r3, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff ff60 	bl	80031d4 <is_aperture>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	4293      	cmp	r3, r2
 800331c:	d003      	beq.n	8003326 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800331e:	23ce      	movs	r3, #206	; 0xce
 8003320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8003324:	e010      	b.n	8003348 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800332a:	6a3a      	ldr	r2, [r7, #32]
 800332c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800332e:	6838      	ldr	r0, [r7, #0]
 8003330:	f7ff ff6a 	bl	8003208 <enable_spad_bit>
		currentSpad++;
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	3301      	adds	r3, #1
 8003338:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	3301      	adds	r3, #1
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003344:	429a      	cmp	r2, r3
 8003346:	d3cf      	bcc.n	80032e8 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8003348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800334a:	6a3a      	ldr	r2, [r7, #32]
 800334c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800334e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8003356:	6839      	ldr	r1, [r7, #0]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f7ff ff8d 	bl	8003278 <set_ref_spad_map>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8003364:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003368:	2b00      	cmp	r3, #0
 800336a:	d121      	bne.n	80033b0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	4619      	mov	r1, r3
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff ff93 	bl	800329e <get_ref_spad_map>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8003382:	e011      	b.n	80033a8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	4413      	add	r3, r2
 800338a:	781a      	ldrb	r2, [r3, #0]
 800338c:	f107 0114 	add.w	r1, r7, #20
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	440b      	add	r3, r1
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	429a      	cmp	r2, r3
 8003398:	d003      	beq.n	80033a2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800339a:	23ce      	movs	r3, #206	; 0xce
 800339c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80033a0:	e006      	b.n	80033b0 <enable_ref_spads+0xec>
			}
			i++;
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	3301      	adds	r3, #1
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80033a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d3e9      	bcc.n	8003384 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80033b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3730      	adds	r7, #48	; 0x30
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80033c6:	2300      	movs	r3, #0
 80033c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80033d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80033dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d107      	bne.n	80033f4 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80033e4:	22c0      	movs	r2, #192	; 0xc0
 80033e6:	2101      	movs	r1, #1
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f003 f81d 	bl	8006428 <VL53L0X_WrByte>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80033f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d108      	bne.n	800340e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80033fc:	f107 0308 	add.w	r3, r7, #8
 8003400:	4619      	mov	r1, r3
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f7ff fc48 	bl	8002c98 <VL53L0X_PerformSingleRangingMeasurement>
 8003408:	4603      	mov	r3, r0
 800340a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800340e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003412:	2b00      	cmp	r3, #0
 8003414:	d107      	bne.n	8003426 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003416:	2201      	movs	r2, #1
 8003418:	21ff      	movs	r1, #255	; 0xff
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f003 f804 	bl	8006428 <VL53L0X_WrByte>
 8003420:	4603      	mov	r3, r0
 8003422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8003426:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800342a:	2b00      	cmp	r3, #0
 800342c:	d107      	bne.n	800343e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	21b6      	movs	r1, #182	; 0xb6
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f003 f8a4 	bl	8006580 <VL53L0X_RdWord>
 8003438:	4603      	mov	r3, r0
 800343a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800343e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003446:	2200      	movs	r2, #0
 8003448:	21ff      	movs	r1, #255	; 0xff
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f002 ffec 	bl	8006428 <VL53L0X_WrByte>
 8003450:	4603      	mov	r3, r0
 8003452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8003456:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800345a:	2b00      	cmp	r3, #0
 800345c:	d112      	bne.n	8003484 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800345e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003462:	461a      	mov	r2, r3
 8003464:	2101      	movs	r1, #1
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f002 ffde 	bl	8006428 <VL53L0X_WrByte>
 800346c:	4603      	mov	r3, r0
 800346e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8003472:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003480:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	}

	return status;
 8003484:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003488:	4618      	mov	r0, r3
 800348a:	3728      	adds	r7, #40	; 0x28
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b09d      	sub	sp, #116	; 0x74
 8003494:	af06      	add	r7, sp, #24
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800349c:	2300      	movs	r3, #0
 800349e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80034a2:	23b4      	movs	r3, #180	; 0xb4
 80034a4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80034a8:	2303      	movs	r3, #3
 80034aa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80034ac:	232c      	movs	r3, #44	; 0x2c
 80034ae:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80034bc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80034c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80034ca:	2306      	movs	r3, #6
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80034e0:	2300      	movs	r3, #0
 80034e2:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f8b3 3168 	ldrh.w	r3, [r3, #360]	; 0x168
 80034f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80034f6:	2300      	movs	r3, #0
 80034f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80034fa:	e009      	b.n	8003510 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003500:	4413      	add	r3, r2
 8003502:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003506:	2200      	movs	r2, #0
 8003508:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800350a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800350c:	3301      	adds	r3, #1
 800350e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	429a      	cmp	r2, r3
 8003516:	d3f1      	bcc.n	80034fc <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003518:	2201      	movs	r2, #1
 800351a:	21ff      	movs	r1, #255	; 0xff
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f002 ff83 	bl	8006428 <VL53L0X_WrByte>
 8003522:	4603      	mov	r3, r0
 8003524:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003528:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800352c:	2b00      	cmp	r3, #0
 800352e:	d107      	bne.n	8003540 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8003530:	2200      	movs	r2, #0
 8003532:	214f      	movs	r1, #79	; 0x4f
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f002 ff77 	bl	8006428 <VL53L0X_WrByte>
 800353a:	4603      	mov	r3, r0
 800353c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8003540:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003544:	2b00      	cmp	r3, #0
 8003546:	d107      	bne.n	8003558 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8003548:	222c      	movs	r2, #44	; 0x2c
 800354a:	214e      	movs	r1, #78	; 0x4e
 800354c:	68f8      	ldr	r0, [r7, #12]
 800354e:	f002 ff6b 	bl	8006428 <VL53L0X_WrByte>
 8003552:	4603      	mov	r3, r0
 8003554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8003558:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800355c:	2b00      	cmp	r3, #0
 800355e:	d107      	bne.n	8003570 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003560:	2200      	movs	r2, #0
 8003562:	21ff      	movs	r1, #255	; 0xff
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f002 ff5f 	bl	8006428 <VL53L0X_WrByte>
 800356a:	4603      	mov	r3, r0
 800356c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8003570:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8003578:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800357c:	461a      	mov	r2, r3
 800357e:	21b6      	movs	r1, #182	; 0xb6
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f002 ff51 	bl	8006428 <VL53L0X_WrByte>
 8003586:	4603      	mov	r3, r0
 8003588:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800358c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003590:	2b00      	cmp	r3, #0
 8003592:	d107      	bne.n	80035a4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8003594:	2200      	movs	r2, #0
 8003596:	2180      	movs	r1, #128	; 0x80
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f002 ff45 	bl	8006428 <VL53L0X_WrByte>
 800359e:	4603      	mov	r3, r0
 80035a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80035a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80035ac:	f107 0210 	add.w	r2, r7, #16
 80035b0:	f107 0111 	add.w	r1, r7, #17
 80035b4:	2300      	movs	r3, #0
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fbbb 	bl	8003d32 <VL53L0X_perform_ref_calibration>
 80035bc:	4603      	mov	r3, r0
 80035be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80035c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d121      	bne.n	800360e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80035ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d0:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80035d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f503 74a8 	add.w	r4, r3, #336	; 0x150
		Status = enable_ref_spads(Dev,
 80035e6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80035ea:	f107 0218 	add.w	r2, r7, #24
 80035ee:	9204      	str	r2, [sp, #16]
 80035f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035f2:	9203      	str	r2, [sp, #12]
 80035f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035f6:	9202      	str	r2, [sp, #8]
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	4623      	mov	r3, r4
 8003600:	4602      	mov	r2, r0
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f7ff fe5e 	bl	80032c4 <enable_ref_spads>
 8003608:	4603      	mov	r3, r0
 800360a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800360e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003612:	2b00      	cmp	r3, #0
 8003614:	d174      	bne.n	8003700 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800361a:	f107 0312 	add.w	r3, r7, #18
 800361e:	4619      	mov	r1, r3
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f7ff fecb 	bl	80033bc <perform_ref_signal_measurement>
 8003626:	4603      	mov	r3, r0
 8003628:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800362c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003630:	2b00      	cmp	r3, #0
 8003632:	d161      	bne.n	80036f8 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8003634:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8003636:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003638:	429a      	cmp	r2, r3
 800363a:	d25d      	bcs.n	80036f8 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs
			 */

			for (index = 0; index < spadArraySize; index++)
 800363c:	2300      	movs	r3, #0
 800363e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003640:	e009      	b.n	8003656 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003646:	4413      	add	r3, r2
 8003648:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8003650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003652:	3301      	adds	r3, #1
 8003654:	64bb      	str	r3, [r7, #72]	; 0x48
 8003656:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	429a      	cmp	r2, r3
 800365c:	d3f1      	bcc.n	8003642 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800365e:	e002      	b.n	8003666 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8003660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003662:	3301      	adds	r3, #1
 8003664:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8003666:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800366a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800366c:	4413      	add	r3, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fdb0 	bl	80031d4 <is_aperture>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800367a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	429a      	cmp	r2, r3
 8003680:	d3ee      	bcc.n	8003660 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8003682:	2301      	movs	r3, #1
 8003684:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8003686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003688:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f503 70ab 	add.w	r0, r3, #342	; 0x156
					Dev->Data.SpadData.RefSpadEnables,
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f503 74a8 	add.w	r4, r3, #336	; 0x150
			Status = enable_ref_spads(Dev,
 8003696:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800369a:	f107 0218 	add.w	r2, r7, #24
 800369e:	9204      	str	r2, [sp, #16]
 80036a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036a2:	9203      	str	r2, [sp, #12]
 80036a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80036a6:	9202      	str	r2, [sp, #8]
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	4623      	mov	r3, r4
 80036b0:	4602      	mov	r2, r0
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f7ff fe06 	bl	80032c4 <enable_ref_spads>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80036be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d11b      	bne.n	80036fe <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80036ca:	f107 0312 	add.w	r3, r7, #18
 80036ce:	4619      	mov	r1, r3
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff fe73 	bl	80033bc <perform_ref_signal_measurement>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80036dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10c      	bne.n	80036fe <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80036e4:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80036e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d208      	bcs.n	80036fe <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80036ec:	2301      	movs	r3, #1
 80036ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80036f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036f4:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80036f6:	e002      	b.n	80036fe <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036fc:	e000      	b.n	8003700 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80036fe:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8003700:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003704:	2b00      	cmp	r3, #0
 8003706:	f040 80af 	bne.w	8003868 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800370a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800370c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800370e:	429a      	cmp	r2, r3
 8003710:	f240 80aa 	bls.w	8003868 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8003714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003716:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800371a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f503 71a8 	add.w	r1, r3, #336	; 0x150
 8003724:	f107 031c 	add.w	r3, r7, #28
 8003728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800372a:	4618      	mov	r0, r3
 800372c:	f008 fdd2 	bl	800c2d4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8003730:	8a7b      	ldrh	r3, [r7, #18]
 8003732:	461a      	mov	r2, r3
 8003734:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	bfb8      	it	lt
 800373c:	425b      	neglt	r3, r3
 800373e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8003746:	e086      	b.n	8003856 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f503 70ab 	add.w	r0, r3, #342	; 0x156
			get_next_good_spad(
 800374e:	f107 0314 	add.w	r3, r7, #20
 8003752:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003756:	f7ff fcdf 	bl	8003118 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003760:	d103      	bne.n	800376a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8003762:	23ce      	movs	r3, #206	; 0xce
 8003764:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8003768:	e07e      	b.n	8003868 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800376a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4413      	add	r3, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff fd2e 	bl	80031d4 <is_aperture>
 8003778:	4603      	mov	r3, r0
 800377a:	461a      	mov	r2, r3
 800377c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800377e:	4293      	cmp	r3, r2
 8003780:	d003      	beq.n	800378a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8003782:	2301      	movs	r3, #1
 8003784:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8003788:	e06e      	b.n	8003868 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800378a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378c:	3301      	adds	r3, #1
 800378e:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f503 73a8 	add.w	r3, r3, #336	; 0x150
			Status = enable_spad_bit(
 800379a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800379c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fd32 	bl	8003208 <enable_spad_bit>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80037aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10c      	bne.n	80037cc <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80037b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037b4:	3301      	adds	r3, #1
 80037b6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement.
				 */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
				Status = set_ref_spad_map(Dev,
 80037be:	4619      	mov	r1, r3
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f7ff fd59 	bl	8003278 <set_ref_spad_map>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80037cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d146      	bne.n	8003862 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80037d4:	f107 0312 	add.w	r3, r7, #18
 80037d8:	4619      	mov	r1, r3
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f7ff fdee 	bl	80033bc <perform_ref_signal_measurement>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80037e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d13b      	bne.n	8003866 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80037ee:	8a7b      	ldrh	r3, [r7, #18]
 80037f0:	461a      	mov	r2, r3
 80037f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bfb8      	it	lt
 80037fa:	425b      	neglt	r3, r3
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80037fe:	8a7b      	ldrh	r3, [r7, #18]
 8003800:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003802:	429a      	cmp	r2, r3
 8003804:	d21c      	bcs.n	8003840 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8003806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800380a:	429a      	cmp	r2, r3
 800380c:	d914      	bls.n	8003838 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this.
					 */
					Status = set_ref_spad_map(Dev,
 800380e:	f107 031c 	add.w	r3, r7, #28
 8003812:	4619      	mov	r1, r3
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7ff fd2f 	bl	8003278 <set_ref_spad_map>
 800381a:	4603      	mov	r3, r0
 800381c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f503 73a8 	add.w	r3, r3, #336	; 0x150
					memcpy(
 8003826:	f107 011c 	add.w	r1, r7, #28
 800382a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800382c:	4618      	mov	r0, r3
 800382e:	f008 fd51 	bl	800c2d4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8003832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003834:	3b01      	subs	r3, #1
 8003836:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8003838:	2301      	movs	r3, #1
 800383a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800383e:	e00a      	b.n	8003856 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f503 71a8 	add.w	r1, r3, #336	; 0x150
				memcpy(lastSpadArray,
 800384a:	f107 031c 	add.w	r3, r7, #28
 800384e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003850:	4618      	mov	r0, r3
 8003852:	f008 fd3f 	bl	800c2d4 <memcpy>
		while (!complete) {
 8003856:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800385a:	2b00      	cmp	r3, #0
 800385c:	f43f af74 	beq.w	8003748 <VL53L0X_perform_ref_spad_management+0x2b8>
 8003860:	e002      	b.n	8003868 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8003866:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003868:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800386c:	2b00      	cmp	r3, #0
 800386e:	d115      	bne.n	800389c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003874:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800387c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800389c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	375c      	adds	r7, #92	; 0x5c
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd90      	pop	{r4, r7, pc}

080038a8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80038a8:	b590      	push	{r4, r7, lr}
 80038aa:	b093      	sub	sp, #76	; 0x4c
 80038ac:	af06      	add	r7, sp, #24
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	4613      	mov	r3, r2
 80038b4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80038c0:	23b4      	movs	r3, #180	; 0xb4
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80038c6:	2306      	movs	r3, #6
 80038c8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80038ca:	232c      	movs	r3, #44	; 0x2c
 80038cc:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80038ce:	2201      	movs	r2, #1
 80038d0:	21ff      	movs	r1, #255	; 0xff
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f002 fda8 	bl	8006428 <VL53L0X_WrByte>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80038de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d107      	bne.n	80038f6 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80038e6:	2200      	movs	r2, #0
 80038e8:	214f      	movs	r1, #79	; 0x4f
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f002 fd9c 	bl	8006428 <VL53L0X_WrByte>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80038f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80038fe:	222c      	movs	r2, #44	; 0x2c
 8003900:	214e      	movs	r1, #78	; 0x4e
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f002 fd90 	bl	8006428 <VL53L0X_WrByte>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800390e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003912:	2b00      	cmp	r3, #0
 8003914:	d107      	bne.n	8003926 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003916:	2200      	movs	r2, #0
 8003918:	21ff      	movs	r1, #255	; 0xff
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f002 fd84 	bl	8006428 <VL53L0X_WrByte>
 8003920:	4603      	mov	r3, r0
 8003922:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8003926:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800392e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003932:	461a      	mov	r2, r3
 8003934:	21b6      	movs	r1, #182	; 0xb6
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f002 fd76 	bl	8006428 <VL53L0X_WrByte>
 800393c:	4603      	mov	r3, r0
 800393e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8003942:	2300      	movs	r3, #0
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
 8003946:	e009      	b.n	800395c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	4413      	add	r3, r2
 800394e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	3301      	adds	r3, #1
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	429a      	cmp	r2, r3
 8003962:	d3f1      	bcc.n	8003948 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d011      	beq.n	800398e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800396a:	e002      	b.n	8003972 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800396c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396e:	3301      	adds	r3, #1
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8003972:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003978:	4413      	add	r3, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f7ff fc2a 	bl	80031d4 <is_aperture>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d103      	bne.n	800398e <VL53L0X_set_reference_spads+0xe6>
 8003986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	429a      	cmp	r2, r3
 800398c:	d3ee      	bcc.n	800396c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f503 70ab 	add.w	r0, r3, #342	; 0x156
				Dev->Data.SpadData.RefSpadEnables,
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f503 74a8 	add.w	r4, r3, #336	; 0x150
	Status = enable_ref_spads(Dev,
 800399a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800399e:	79f9      	ldrb	r1, [r7, #7]
 80039a0:	f107 0214 	add.w	r2, r7, #20
 80039a4:	9204      	str	r2, [sp, #16]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	9203      	str	r2, [sp, #12]
 80039aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039ac:	9202      	str	r2, [sp, #8]
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	4623      	mov	r3, r4
 80039b6:	4602      	mov	r2, r0
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f7ff fc83 	bl	80032c4 <enable_ref_spads>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80039c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10c      	bne.n	80039e6 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	79fa      	ldrb	r2, [r7, #7]
 80039e2:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80039e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3734      	adds	r7, #52	; 0x34
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd90      	pop	{r4, r7, pc}

080039f2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	460b      	mov	r3, r1
 80039fc:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	2100      	movs	r1, #0
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f002 fd06 	bl	8006428 <VL53L0X_WrByte>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8003a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d104      	bne.n	8003a32 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f9bf 	bl	8003dac <VL53L0X_measurement_poll_for_completion>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d105      	bne.n	8003a46 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff fab5 	bl	8002fac <VL53L0X_ClearInterruptMask>
 8003a42:	4603      	mov	r3, r0
 8003a44:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2100      	movs	r1, #0
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f002 fce8 	bl	8006428 <VL53L0X_WrByte>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	73fb      	strb	r3, [r7, #15]

	return Status;
 8003a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <VL53L0X_ref_calibration_io>:
VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev,
	uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	4608      	mov	r0, r1
 8003a72:	4611      	mov	r1, r2
 8003a74:	461a      	mov	r2, r3
 8003a76:	4603      	mov	r3, r0
 8003a78:	70fb      	strb	r3, [r7, #3]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	70bb      	strb	r3, [r7, #2]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	21ff      	movs	r1, #255	; 0xff
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f002 fcca 	bl	8006428 <VL53L0X_WrByte>
 8003a94:	4603      	mov	r3, r0
 8003a96:	461a      	mov	r2, r3
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f002 fcc0 	bl	8006428 <VL53L0X_WrByte>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	21ff      	movs	r1, #255	; 0xff
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f002 fcb6 	bl	8006428 <VL53L0X_WrByte>
 8003abc:	4603      	mov	r3, r0
 8003abe:	461a      	mov	r2, r3
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01e      	beq.n	8003b0a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8003acc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	21cb      	movs	r1, #203	; 0xcb
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f002 fd27 	bl	800652c <VL53L0X_RdByte>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8003ae8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d02a      	beq.n	8003b46 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8003af0:	f107 030e 	add.w	r3, r7, #14
 8003af4:	461a      	mov	r2, r3
 8003af6:	21ee      	movs	r1, #238	; 0xee
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f002 fd17 	bl	800652c <VL53L0X_RdByte>
 8003afe:	4603      	mov	r3, r0
 8003b00:	461a      	mov	r2, r3
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	73fb      	strb	r3, [r7, #15]
 8003b08:	e01d      	b.n	8003b46 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8003b0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8003b12:	78bb      	ldrb	r3, [r7, #2]
 8003b14:	461a      	mov	r2, r3
 8003b16:	21cb      	movs	r1, #203	; 0xcb
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f002 fc85 	bl	8006428 <VL53L0X_WrByte>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	461a      	mov	r2, r3
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8003b28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00a      	beq.n	8003b46 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8003b30:	787b      	ldrb	r3, [r7, #1]
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	21ee      	movs	r1, #238	; 0xee
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f002 fcc4 	bl	80064c4 <VL53L0X_UpdateByte>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	461a      	mov	r2, r3
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003b46:	2201      	movs	r2, #1
 8003b48:	21ff      	movs	r1, #255	; 0xff
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f002 fc6c 	bl	8006428 <VL53L0X_WrByte>
 8003b50:	4603      	mov	r3, r0
 8003b52:	461a      	mov	r2, r3
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f002 fc62 	bl	8006428 <VL53L0X_WrByte>
 8003b64:	4603      	mov	r3, r0
 8003b66:	461a      	mov	r2, r3
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	21ff      	movs	r1, #255	; 0xff
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f002 fc58 	bl	8006428 <VL53L0X_WrByte>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8003b82:	7bbb      	ldrb	r3, [r7, #14]
 8003b84:	f023 0310 	bic.w	r3, r3, #16
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	701a      	strb	r2, [r3, #0]

	return Status;
 8003b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b08a      	sub	sp, #40	; 0x28
 8003b9e:	af04      	add	r7, sp, #16
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	460b      	mov	r3, r1
 8003baa:	71fb      	strb	r3, [r7, #7]
 8003bac:	4613      	mov	r3, r2
 8003bae:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8003bc4:	79bb      	ldrb	r3, [r7, #6]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8003bd0:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f002 fc26 	bl	8006428 <VL53L0X_WrByte>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8003be0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8003be8:	2140      	movs	r1, #64	; 0x40
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f7ff ff01 	bl	80039f2 <VL53L0X_perform_single_ref_calibration>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8003bf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d115      	bne.n	8003c28 <VL53L0X_perform_vhv_calibration+0x8e>
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d112      	bne.n	8003c28 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8003c02:	7d39      	ldrb	r1, [r7, #20]
 8003c04:	7d7a      	ldrb	r2, [r7, #21]
 8003c06:	2300      	movs	r3, #0
 8003c08:	9303      	str	r3, [sp, #12]
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	9302      	str	r3, [sp, #8]
 8003c0e:	f107 0313 	add.w	r3, r7, #19
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f7ff ff23 	bl	8003a68 <VL53L0X_ref_calibration_io>
 8003c22:	4603      	mov	r3, r0
 8003c24:	75fb      	strb	r3, [r7, #23]
 8003c26:	e002      	b.n	8003c2e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8003c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d112      	bne.n	8003c5c <VL53L0X_perform_vhv_calibration+0xc2>
 8003c36:	79bb      	ldrb	r3, [r7, #6]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00f      	beq.n	8003c5c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003c3c:	7dbb      	ldrb	r3, [r7, #22]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	2101      	movs	r1, #1
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f002 fbf0 	bl	8006428 <VL53L0X_WrByte>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d103      	bne.n	8003c5c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	7dba      	ldrb	r2, [r7, #22]
 8003c58:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8003c5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08a      	sub	sp, #40	; 0x28
 8003c6c:	af04      	add	r7, sp, #16
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	4611      	mov	r1, r2
 8003c74:	461a      	mov	r2, r3
 8003c76:	460b      	mov	r3, r1
 8003c78:	71fb      	strb	r3, [r7, #7]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8003c8e:	79bb      	ldrb	r3, [r7, #6]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8003c9a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f002 fbc1 	bl	8006428 <VL53L0X_WrByte>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8003caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f7ff fe9c 	bl	80039f2 <VL53L0X_perform_single_ref_calibration>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8003cbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d115      	bne.n	8003cf2 <VL53L0X_perform_phase_calibration+0x8a>
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d112      	bne.n	8003cf2 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8003ccc:	7d39      	ldrb	r1, [r7, #20]
 8003cce:	7d7a      	ldrb	r2, [r7, #21]
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	9303      	str	r3, [sp, #12]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9302      	str	r3, [sp, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	9301      	str	r3, [sp, #4]
 8003cdc:	f107 0313 	add.w	r3, r7, #19
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7ff febe 	bl	8003a68 <VL53L0X_ref_calibration_io>
 8003cec:	4603      	mov	r3, r0
 8003cee:	75fb      	strb	r3, [r7, #23]
 8003cf0:	e002      	b.n	8003cf8 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8003cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d112      	bne.n	8003d26 <VL53L0X_perform_phase_calibration+0xbe>
 8003d00:	79bb      	ldrb	r3, [r7, #6]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00f      	beq.n	8003d26 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003d06:	7dbb      	ldrb	r3, [r7, #22]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f002 fb8b 	bl	8006428 <VL53L0X_WrByte>
 8003d12:	4603      	mov	r3, r0
 8003d14:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003d16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d103      	bne.n	8003d26 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	7dba      	ldrb	r2, [r7, #22]
 8003d22:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8003d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b086      	sub	sp, #24
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8003d4e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once.
	 */
	Status = VL53L0X_perform_vhv_calibration(
 8003d50:	78fa      	ldrb	r2, [r7, #3]
 8003d52:	2300      	movs	r3, #0
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f7ff ff1f 	bl	8003b9a <VL53L0X_perform_vhv_calibration>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d107      	bne.n	8003d78 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f7ff ff7a 	bl	8003c68 <VL53L0X_perform_phase_calibration>
 8003d74:	4603      	mov	r3, r0
 8003d76:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8003d78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10f      	bne.n	8003da0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003d80:	7dbb      	ldrb	r3, [r7, #22]
 8003d82:	461a      	mov	r2, r3
 8003d84:	2101      	movs	r1, #1
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f002 fb4e 	bl	8006428 <VL53L0X_WrByte>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8003d90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d103      	bne.n	8003da0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	7dba      	ldrb	r2, [r7, #22]
 8003d9c:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c

	}

	return Status;
 8003da0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8003dc0:	f107 030f 	add.w	r3, r7, #15
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fe fe02 	bl	80029d0 <VL53L0X_GetMeasurementDataReady>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8003dd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d110      	bne.n	8003dfa <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d00f      	beq.n	8003dfe <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	3301      	adds	r3, #1
 8003de2:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003dea:	d302      	bcc.n	8003df2 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8003dec:	23f9      	movs	r3, #249	; 0xf9
 8003dee:	75fb      	strb	r3, [r7, #23]
			break;
 8003df0:	e006      	b.n	8003e00 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f002 fc38 	bl	8006668 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8003df8:	e7e2      	b.n	8003dc0 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8003dfa:	bf00      	nop
 8003dfc:	e000      	b.n	8003e00 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8003dfe:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8003e00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3718      	adds	r7, #24
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8003e32:	b480      	push	{r7}
 8003e34:	b085      	sub	sp, #20
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	4603      	mov	r3, r0
 8003e3a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8003e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e68:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits
	 */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8003e6a:	e002      	b.n	8003e72 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	089b      	lsrs	r3, r3, #2
 8003e70:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d8f8      	bhi.n	8003e6c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8003e7a:	e017      	b.n	8003eac <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4413      	add	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d30b      	bcc.n	8003ea0 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	e002      	b.n	8003ea6 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e4      	bne.n	8003e7c <VL53L0X_isqrt+0x24>
	}

	return res;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2183      	movs	r1, #131	; 0x83
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f002 faa9 	bl	8006428 <VL53L0X_WrByte>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	461a      	mov	r2, r3
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock
	 */
	if (Status == VL53L0X_ERROR_NONE) {
 8003ee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d11e      	bne.n	8003f26 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8003eec:	f107 030f 	add.w	r3, r7, #15
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2183      	movs	r1, #131	; 0x83
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f002 fb19 	bl	800652c <VL53L0X_RdByte>
 8003efa:	4603      	mov	r3, r0
 8003efc:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <VL53L0X_device_read_strobe+0x5a>
 8003f04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <VL53L0X_device_read_strobe+0x5a>
				break;

			LoopNb = LoopNb + 1;
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003f18:	d3e8      	bcc.n	8003eec <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003f20:	d301      	bcc.n	8003f26 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8003f22:	23f9      	movs	r3, #249	; 0xf9
 8003f24:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8003f26:	2201      	movs	r2, #1
 8003f28:	2183      	movs	r1, #131	; 0x83
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f002 fa7c 	bl	8006428 <VL53L0X_WrByte>
 8003f30:	4603      	mov	r3, r0
 8003f32:	461a      	mov	r2, r3
 8003f34:	7dfb      	ldrb	r3, [r7, #23]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8003f3a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b098      	sub	sp, #96	; 0x60
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8003f76:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003f7a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8003f84:	2300      	movs	r3, #0
 8003f86:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8003f8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done
	 */
	if (ReadDataFromDeviceDone != 7) {
 8003f92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f96:	2b07      	cmp	r3, #7
 8003f98:	f000 8408 	beq.w	80047ac <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	2180      	movs	r1, #128	; 0x80
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f002 fa41 	bl	8006428 <VL53L0X_WrByte>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	21ff      	movs	r1, #255	; 0xff
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f002 fa35 	bl	8006428 <VL53L0X_WrByte>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2100      	movs	r1, #0
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f002 fa29 	bl	8006428 <VL53L0X_WrByte>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8003fe4:	2206      	movs	r2, #6
 8003fe6:	21ff      	movs	r1, #255	; 0xff
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f002 fa1d 	bl	8006428 <VL53L0X_WrByte>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8003ffc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004000:	461a      	mov	r2, r3
 8004002:	2183      	movs	r1, #131	; 0x83
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f002 fa91 	bl	800652c <VL53L0X_RdByte>
 800400a:	4603      	mov	r3, r0
 800400c:	461a      	mov	r2, r3
 800400e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004012:	4313      	orrs	r3, r2
 8004014:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8004018:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800401c:	f043 0304 	orr.w	r3, r3, #4
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	2183      	movs	r1, #131	; 0x83
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f002 f9fe 	bl	8006428 <VL53L0X_WrByte>
 800402c:	4603      	mov	r3, r0
 800402e:	461a      	mov	r2, r3
 8004030:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004034:	4313      	orrs	r3, r2
 8004036:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800403a:	2207      	movs	r2, #7
 800403c:	21ff      	movs	r1, #255	; 0xff
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f002 f9f2 	bl	8006428 <VL53L0X_WrByte>
 8004044:	4603      	mov	r3, r0
 8004046:	461a      	mov	r2, r3
 8004048:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800404c:	4313      	orrs	r3, r2
 800404e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8004052:	2201      	movs	r2, #1
 8004054:	2181      	movs	r1, #129	; 0x81
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f002 f9e6 	bl	8006428 <VL53L0X_WrByte>
 800405c:	4603      	mov	r3, r0
 800405e:	461a      	mov	r2, r3
 8004060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004064:	4313      	orrs	r3, r2
 8004066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f002 fafc 	bl	8006668 <VL53L0X_PollingDelay>
 8004070:	4603      	mov	r3, r0
 8004072:	461a      	mov	r2, r3
 8004074:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004078:	4313      	orrs	r3, r2
 800407a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800407e:	2201      	movs	r2, #1
 8004080:	2180      	movs	r1, #128	; 0x80
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f002 f9d0 	bl	8006428 <VL53L0X_WrByte>
 8004088:	4603      	mov	r3, r0
 800408a:	461a      	mov	r2, r3
 800408c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004090:	4313      	orrs	r3, r2
 8004092:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8098 	beq.w	80041d2 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80040a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80040a6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f040 8091 	bne.w	80041d2 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80040b0:	226b      	movs	r2, #107	; 0x6b
 80040b2:	2194      	movs	r1, #148	; 0x94
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f002 f9b7 	bl	8006428 <VL53L0X_WrByte>
 80040ba:	4603      	mov	r3, r0
 80040bc:	461a      	mov	r2, r3
 80040be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff fef9 	bl	8003ec0 <VL53L0X_device_read_strobe>
 80040ce:	4603      	mov	r3, r0
 80040d0:	461a      	mov	r2, r3
 80040d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80040dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040e0:	461a      	mov	r2, r3
 80040e2:	2190      	movs	r1, #144	; 0x90
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f002 fa83 	bl	80065f0 <VL53L0X_RdDWord>
 80040ea:	4603      	mov	r3, r0
 80040ec:	461a      	mov	r2, r3
 80040ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80040f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fa:	0a1b      	lsrs	r3, r3, #8
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004102:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	0bdb      	lsrs	r3, r3, #15
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8004114:	2224      	movs	r2, #36	; 0x24
 8004116:	2194      	movs	r1, #148	; 0x94
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f002 f985 	bl	8006428 <VL53L0X_WrByte>
 800411e:	4603      	mov	r3, r0
 8004120:	461a      	mov	r2, r3
 8004122:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004126:	4313      	orrs	r3, r2
 8004128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7ff fec7 	bl	8003ec0 <VL53L0X_device_read_strobe>
 8004132:	4603      	mov	r3, r0
 8004134:	461a      	mov	r2, r3
 8004136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800413a:	4313      	orrs	r3, r2
 800413c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004140:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004144:	461a      	mov	r2, r3
 8004146:	2190      	movs	r1, #144	; 0x90
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f002 fa51 	bl	80065f0 <VL53L0X_RdDWord>
 800414e:	4603      	mov	r3, r0
 8004150:	461a      	mov	r2, r3
 8004152:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004156:	4313      	orrs	r3, r2
 8004158:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	0e1b      	lsrs	r3, r3, #24
 8004160:	b2db      	uxtb	r3, r3
 8004162:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	0c1b      	lsrs	r3, r3, #16
 8004168:	b2db      	uxtb	r3, r3
 800416a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	0a1b      	lsrs	r3, r3, #8
 8004170:	b2db      	uxtb	r3, r3
 8004172:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	b2db      	uxtb	r3, r3
 8004178:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800417a:	2225      	movs	r2, #37	; 0x25
 800417c:	2194      	movs	r1, #148	; 0x94
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f002 f952 	bl	8006428 <VL53L0X_WrByte>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800418c:	4313      	orrs	r3, r2
 800418e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff fe94 	bl	8003ec0 <VL53L0X_device_read_strobe>
 8004198:	4603      	mov	r3, r0
 800419a:	461a      	mov	r2, r3
 800419c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80041a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80041aa:	461a      	mov	r2, r3
 80041ac:	2190      	movs	r1, #144	; 0x90
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f002 fa1e 	bl	80065f0 <VL53L0X_RdDWord>
 80041b4:	4603      	mov	r3, r0
 80041b6:	461a      	mov	r2, r3
 80041b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80041bc:	4313      	orrs	r3, r2
 80041be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	0e1b      	lsrs	r3, r3, #24
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	0c1b      	lsrs	r3, r3, #16
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8189 	beq.w	80044f0 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80041de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80041e2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f040 8182 	bne.w	80044f0 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80041ec:	2202      	movs	r2, #2
 80041ee:	2194      	movs	r1, #148	; 0x94
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f002 f919 	bl	8006428 <VL53L0X_WrByte>
 80041f6:	4603      	mov	r3, r0
 80041f8:	461a      	mov	r2, r3
 80041fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80041fe:	4313      	orrs	r3, r2
 8004200:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff fe5b 	bl	8003ec0 <VL53L0X_device_read_strobe>
 800420a:	4603      	mov	r3, r0
 800420c:	461a      	mov	r2, r3
 800420e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004212:	4313      	orrs	r3, r2
 8004214:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8004218:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800421c:	461a      	mov	r2, r3
 800421e:	2190      	movs	r1, #144	; 0x90
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f002 f983 	bl	800652c <VL53L0X_RdByte>
 8004226:	4603      	mov	r3, r0
 8004228:	461a      	mov	r2, r3
 800422a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800422e:	4313      	orrs	r3, r2
 8004230:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8004234:	227b      	movs	r2, #123	; 0x7b
 8004236:	2194      	movs	r1, #148	; 0x94
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f002 f8f5 	bl	8006428 <VL53L0X_WrByte>
 800423e:	4603      	mov	r3, r0
 8004240:	461a      	mov	r2, r3
 8004242:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004246:	4313      	orrs	r3, r2
 8004248:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff fe37 	bl	8003ec0 <VL53L0X_device_read_strobe>
 8004252:	4603      	mov	r3, r0
 8004254:	461a      	mov	r2, r3
 8004256:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800425a:	4313      	orrs	r3, r2
 800425c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8004260:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8004264:	461a      	mov	r2, r3
 8004266:	2190      	movs	r1, #144	; 0x90
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f002 f95f 	bl	800652c <VL53L0X_RdByte>
 800426e:	4603      	mov	r3, r0
 8004270:	461a      	mov	r2, r3
 8004272:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004276:	4313      	orrs	r3, r2
 8004278:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800427c:	2277      	movs	r2, #119	; 0x77
 800427e:	2194      	movs	r1, #148	; 0x94
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f002 f8d1 	bl	8006428 <VL53L0X_WrByte>
 8004286:	4603      	mov	r3, r0
 8004288:	461a      	mov	r2, r3
 800428a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800428e:	4313      	orrs	r3, r2
 8004290:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff fe13 	bl	8003ec0 <VL53L0X_device_read_strobe>
 800429a:	4603      	mov	r3, r0
 800429c:	461a      	mov	r2, r3
 800429e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80042a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042ac:	461a      	mov	r2, r3
 80042ae:	2190      	movs	r1, #144	; 0x90
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f002 f99d 	bl	80065f0 <VL53L0X_RdDWord>
 80042b6:	4603      	mov	r3, r0
 80042b8:	461a      	mov	r2, r3
 80042ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80042be:	4313      	orrs	r3, r2
 80042c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	0e5b      	lsrs	r3, r3, #25
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	0c9b      	lsrs	r3, r3, #18
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	0adb      	lsrs	r3, r3, #11
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800430e:	2278      	movs	r2, #120	; 0x78
 8004310:	2194      	movs	r1, #148	; 0x94
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f002 f888 	bl	8006428 <VL53L0X_WrByte>
 8004318:	4603      	mov	r3, r0
 800431a:	461a      	mov	r2, r3
 800431c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004320:	4313      	orrs	r3, r2
 8004322:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7ff fdca 	bl	8003ec0 <VL53L0X_device_read_strobe>
 800432c:	4603      	mov	r3, r0
 800432e:	461a      	mov	r2, r3
 8004330:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004334:	4313      	orrs	r3, r2
 8004336:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800433a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800433e:	461a      	mov	r2, r3
 8004340:	2190      	movs	r1, #144	; 0x90
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f002 f954 	bl	80065f0 <VL53L0X_RdDWord>
 8004348:	4603      	mov	r3, r0
 800434a:	461a      	mov	r2, r3
 800434c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004350:	4313      	orrs	r3, r2
 8004352:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	0f5b      	lsrs	r3, r3, #29
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004360:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8004362:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004366:	4413      	add	r3, r2
 8004368:	b2db      	uxtb	r3, r3
 800436a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	0d9b      	lsrs	r3, r3, #22
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004376:	b2db      	uxtb	r3, r3
 8004378:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	0bdb      	lsrs	r3, r3, #15
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004384:	b2db      	uxtb	r3, r3
 8004386:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	0a1b      	lsrs	r3, r3, #8
 800438c:	b2db      	uxtb	r3, r3
 800438e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004392:	b2db      	uxtb	r3, r3
 8004394:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	085b      	lsrs	r3, r3, #1
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	019b      	lsls	r3, r3, #6
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80043b6:	2279      	movs	r2, #121	; 0x79
 80043b8:	2194      	movs	r1, #148	; 0x94
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f002 f834 	bl	8006428 <VL53L0X_WrByte>
 80043c0:	4603      	mov	r3, r0
 80043c2:	461a      	mov	r2, r3
 80043c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7ff fd76 	bl	8003ec0 <VL53L0X_device_read_strobe>
 80043d4:	4603      	mov	r3, r0
 80043d6:	461a      	mov	r2, r3
 80043d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043dc:	4313      	orrs	r3, r2
 80043de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80043e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043e6:	461a      	mov	r2, r3
 80043e8:	2190      	movs	r1, #144	; 0x90
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f002 f900 	bl	80065f0 <VL53L0X_RdDWord>
 80043f0:	4603      	mov	r3, r0
 80043f2:	461a      	mov	r2, r3
 80043f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80043fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004400:	0e9b      	lsrs	r3, r3, #26
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004408:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800440a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800440e:	4413      	add	r3, r2
 8004410:	b2db      	uxtb	r3, r3
 8004412:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	0cdb      	lsrs	r3, r3, #19
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800441e:	b2db      	uxtb	r3, r3
 8004420:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8004422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004424:	0b1b      	lsrs	r3, r3, #12
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800442c:	b2db      	uxtb	r3, r3
 800442e:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800443a:	b2db      	uxtb	r3, r3
 800443c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	b2db      	uxtb	r3, r3
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8004450:	227a      	movs	r2, #122	; 0x7a
 8004452:	2194      	movs	r1, #148	; 0x94
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f001 ffe7 	bl	8006428 <VL53L0X_WrByte>
 800445a:	4603      	mov	r3, r0
 800445c:	461a      	mov	r2, r3
 800445e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004462:	4313      	orrs	r3, r2
 8004464:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff fd29 	bl	8003ec0 <VL53L0X_device_read_strobe>
 800446e:	4603      	mov	r3, r0
 8004470:	461a      	mov	r2, r3
 8004472:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004476:	4313      	orrs	r3, r2
 8004478:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800447c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004480:	461a      	mov	r2, r3
 8004482:	2190      	movs	r1, #144	; 0x90
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f002 f8b3 	bl	80065f0 <VL53L0X_RdDWord>
 800448a:	4603      	mov	r3, r0
 800448c:	461a      	mov	r2, r3
 800448e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004492:	4313      	orrs	r3, r2
 8004494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	0f9b      	lsrs	r3, r3, #30
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044a2:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80044a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80044a8:	4413      	add	r3, r2
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b0:	0ddb      	lsrs	r3, r3, #23
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	0c1b      	lsrs	r3, r3, #16
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	0a5b      	lsrs	r3, r3, #9
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	089b      	lsrs	r3, r3, #2
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80044ea:	2300      	movs	r3, #0
 80044ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80f1 	beq.w	80046de <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80044fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004500:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004504:	2b00      	cmp	r3, #0
 8004506:	f040 80ea 	bne.w	80046de <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800450a:	227b      	movs	r2, #123	; 0x7b
 800450c:	2194      	movs	r1, #148	; 0x94
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f001 ff8a 	bl	8006428 <VL53L0X_WrByte>
 8004514:	4603      	mov	r3, r0
 8004516:	461a      	mov	r2, r3
 8004518:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800451c:	4313      	orrs	r3, r2
 800451e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff fccc 	bl	8003ec0 <VL53L0X_device_read_strobe>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004530:	4313      	orrs	r3, r2
 8004532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8004536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800453a:	461a      	mov	r2, r3
 800453c:	2190      	movs	r1, #144	; 0x90
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f002 f856 	bl	80065f0 <VL53L0X_RdDWord>
 8004544:	4603      	mov	r3, r0
 8004546:	461a      	mov	r2, r3
 8004548:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800454c:	4313      	orrs	r3, r2
 800454e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8004552:	227c      	movs	r2, #124	; 0x7c
 8004554:	2194      	movs	r1, #148	; 0x94
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f001 ff66 	bl	8006428 <VL53L0X_WrByte>
 800455c:	4603      	mov	r3, r0
 800455e:	461a      	mov	r2, r3
 8004560:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004564:	4313      	orrs	r3, r2
 8004566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fca8 	bl	8003ec0 <VL53L0X_device_read_strobe>
 8004570:	4603      	mov	r3, r0
 8004572:	461a      	mov	r2, r3
 8004574:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004578:	4313      	orrs	r3, r2
 800457a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800457e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004582:	461a      	mov	r2, r3
 8004584:	2190      	movs	r1, #144	; 0x90
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f002 f832 	bl	80065f0 <VL53L0X_RdDWord>
 800458c:	4603      	mov	r3, r0
 800458e:	461a      	mov	r2, r3
 8004590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004594:	4313      	orrs	r3, r2
 8004596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800459a:	2273      	movs	r2, #115	; 0x73
 800459c:	2194      	movs	r1, #148	; 0x94
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f001 ff42 	bl	8006428 <VL53L0X_WrByte>
 80045a4:	4603      	mov	r3, r0
 80045a6:	461a      	mov	r2, r3
 80045a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff fc84 	bl	8003ec0 <VL53L0X_device_read_strobe>
 80045b8:	4603      	mov	r3, r0
 80045ba:	461a      	mov	r2, r3
 80045bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80045c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045ca:	461a      	mov	r2, r3
 80045cc:	2190      	movs	r1, #144	; 0x90
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f002 f80e 	bl	80065f0 <VL53L0X_RdDWord>
 80045d4:	4603      	mov	r3, r0
 80045d6:	461a      	mov	r2, r3
 80045d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045dc:	4313      	orrs	r3, r2
 80045de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80045ea:	2274      	movs	r2, #116	; 0x74
 80045ec:	2194      	movs	r1, #148	; 0x94
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f001 ff1a 	bl	8006428 <VL53L0X_WrByte>
 80045f4:	4603      	mov	r3, r0
 80045f6:	461a      	mov	r2, r3
 80045f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff fc5c 	bl	8003ec0 <VL53L0X_device_read_strobe>
 8004608:	4603      	mov	r3, r0
 800460a:	461a      	mov	r2, r3
 800460c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004610:	4313      	orrs	r3, r2
 8004612:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004616:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800461a:	461a      	mov	r2, r3
 800461c:	2190      	movs	r1, #144	; 0x90
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f001 ffe6 	bl	80065f0 <VL53L0X_RdDWord>
 8004624:	4603      	mov	r3, r0
 8004626:	461a      	mov	r2, r3
 8004628:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800462c:	4313      	orrs	r3, r2
 800462e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8004636:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004638:	4313      	orrs	r3, r2
 800463a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800463c:	2275      	movs	r2, #117	; 0x75
 800463e:	2194      	movs	r1, #148	; 0x94
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f001 fef1 	bl	8006428 <VL53L0X_WrByte>
 8004646:	4603      	mov	r3, r0
 8004648:	461a      	mov	r2, r3
 800464a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800464e:	4313      	orrs	r3, r2
 8004650:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7ff fc33 	bl	8003ec0 <VL53L0X_device_read_strobe>
 800465a:	4603      	mov	r3, r0
 800465c:	461a      	mov	r2, r3
 800465e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004662:	4313      	orrs	r3, r2
 8004664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8004668:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800466c:	461a      	mov	r2, r3
 800466e:	2190      	movs	r1, #144	; 0x90
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f001 ffbd 	bl	80065f0 <VL53L0X_RdDWord>
 8004676:	4603      	mov	r3, r0
 8004678:	461a      	mov	r2, r3
 800467a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800467e:	4313      	orrs	r3, r2
 8004680:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8004688:	b29b      	uxth	r3, r3
 800468a:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800468c:	2276      	movs	r2, #118	; 0x76
 800468e:	2194      	movs	r1, #148	; 0x94
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f001 fec9 	bl	8006428 <VL53L0X_WrByte>
 8004696:	4603      	mov	r3, r0
 8004698:	461a      	mov	r2, r3
 800469a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800469e:	4313      	orrs	r3, r2
 80046a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff fc0b 	bl	8003ec0 <VL53L0X_device_read_strobe>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461a      	mov	r2, r3
 80046ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80046b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80046bc:	461a      	mov	r2, r3
 80046be:	2190      	movs	r1, #144	; 0x90
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f001 ff95 	bl	80065f0 <VL53L0X_RdDWord>
 80046c6:	4603      	mov	r3, r0
 80046c8:	461a      	mov	r2, r3
 80046ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80046d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d6:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80046d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046da:	4313      	orrs	r3, r2
 80046dc:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80046de:	2200      	movs	r2, #0
 80046e0:	2181      	movs	r1, #129	; 0x81
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f001 fea0 	bl	8006428 <VL53L0X_WrByte>
 80046e8:	4603      	mov	r3, r0
 80046ea:	461a      	mov	r2, r3
 80046ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80046f6:	2206      	movs	r2, #6
 80046f8:	21ff      	movs	r1, #255	; 0xff
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f001 fe94 	bl	8006428 <VL53L0X_WrByte>
 8004700:	4603      	mov	r3, r0
 8004702:	461a      	mov	r2, r3
 8004704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004708:	4313      	orrs	r3, r2
 800470a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800470e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8004712:	461a      	mov	r2, r3
 8004714:	2183      	movs	r1, #131	; 0x83
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f001 ff08 	bl	800652c <VL53L0X_RdByte>
 800471c:	4603      	mov	r3, r0
 800471e:	461a      	mov	r2, r3
 8004720:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004724:	4313      	orrs	r3, r2
 8004726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800472a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800472e:	f023 0304 	bic.w	r3, r3, #4
 8004732:	b2db      	uxtb	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	2183      	movs	r1, #131	; 0x83
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f001 fe75 	bl	8006428 <VL53L0X_WrByte>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004746:	4313      	orrs	r3, r2
 8004748:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800474c:	2201      	movs	r2, #1
 800474e:	21ff      	movs	r1, #255	; 0xff
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f001 fe69 	bl	8006428 <VL53L0X_WrByte>
 8004756:	4603      	mov	r3, r0
 8004758:	461a      	mov	r2, r3
 800475a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800475e:	4313      	orrs	r3, r2
 8004760:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004764:	2201      	movs	r2, #1
 8004766:	2100      	movs	r1, #0
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f001 fe5d 	bl	8006428 <VL53L0X_WrByte>
 800476e:	4603      	mov	r3, r0
 8004770:	461a      	mov	r2, r3
 8004772:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004776:	4313      	orrs	r3, r2
 8004778:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800477c:	2200      	movs	r2, #0
 800477e:	21ff      	movs	r1, #255	; 0xff
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 fe51 	bl	8006428 <VL53L0X_WrByte>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800478e:	4313      	orrs	r3, r2
 8004790:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004794:	2200      	movs	r2, #0
 8004796:	2180      	movs	r1, #128	; 0x80
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 fe45 	bl	8006428 <VL53L0X_WrByte>
 800479e:	4603      	mov	r3, r0
 80047a0:	461a      	mov	r2, r3
 80047a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80047ac:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f040 8090 	bne.w	80048d6 <VL53L0X_get_info_from_device+0x990>
 80047b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047ba:	2b07      	cmp	r3, #7
 80047bc:	f000 808b 	beq.w	80048d6 <VL53L0X_get_info_from_device+0x990>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d024      	beq.n	8004814 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80047ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047ce:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d11e      	bne.n	8004814 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80047dc:	f883 213f 	strb.w	r2, [r3, #319]	; 0x13f
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80047e6:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80047ea:	2300      	movs	r3, #0
 80047ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047ee:	e00e      	b.n	800480e <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80047f0:	f107 0208 	add.w	r2, r7, #8
 80047f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047f6:	4413      	add	r3, r2
 80047f8:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fe:	4413      	add	r3, r2
 8004800:	f503 73ab 	add.w	r3, r3, #342	; 0x156
 8004804:	460a      	mov	r2, r1
 8004806:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8004808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800480a:	3301      	adds	r3, #1
 800480c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800480e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004810:	2b05      	cmp	r3, #5
 8004812:	dded      	ble.n	80047f0 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d019      	beq.n	8004852 <VL53L0X_get_info_from_device+0x90c>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800481e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004822:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8004826:	2b00      	cmp	r3, #0
 8004828:	d113      	bne.n	8004852 <VL53L0X_get_info_from_device+0x90c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800482a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004834:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f203 131f 	addw	r3, r3, #287	; 0x11f
 8004844:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8004846:	f107 0310 	add.w	r3, r7, #16
 800484a:	4619      	mov	r1, r3
 800484c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800484e:	f008 f95a 	bl	800cb06 <strcpy>

		}

		if (((option & 4) == 4) &&
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d030      	beq.n	80048be <VL53L0X_get_info_from_device+0x978>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800485c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004860:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8004864:	2b00      	cmp	r3, #0
 8004866:	d12a      	bne.n	80048be <VL53L0X_get_info_from_device+0x978>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8004878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800487a:	025b      	lsls	r3, r3, #9
 800487c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004882:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800488c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800488e:	2b00      	cmp	r3, #0
 8004890:	d011      	beq.n	80048b6 <VL53L0X_get_info_from_device+0x970>
				OffsetFixed1104_mm =
 8004892:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	64bb      	str	r3, [r7, #72]	; 0x48
					DistMeasFixed1104_400_mm -
					DistMeasTgtFixed1104_mm;
				OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800489a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800489c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048a0:	fb02 f303 	mul.w	r3, r2, r3
 80048a4:	091b      	lsrs	r3, r3, #4
				OffsetMicroMeters = (OffsetFixed1104_mm
 80048a6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				OffsetMicroMeters *= -1;
 80048aa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80048ae:	425b      	negs	r3, r3
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80048b6:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	605a      	str	r2, [r3, #4]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80048be:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80048cc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80048d6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3760      	adds	r7, #96	; 0x60
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
				      uint8_t vcsel_period_pclks)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b087      	sub	sp, #28
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	460b      	mov	r3, r1
 80048ec:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	 *  therefore set fixed value
	 */
	PLL_period_ps = 1655;
 80048ee:	f240 6277 	movw	r2, #1655	; 0x677
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 80048fa:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80048fe:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8004900:	78fb      	ldrb	r3, [r7, #3]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	fb02 f303 	mul.w	r3, r2, r3
 800490e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8004910:	68bb      	ldr	r3, [r7, #8]
}
 8004912:	4618      	mov	r0, r3
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800491e:	b480      	push	{r7}
 8004920:	b087      	sub	sp, #28
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800492a:	2300      	movs	r3, #0
 800492c:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d017      	beq.n	8004968 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3b01      	subs	r3, #1
 800493c:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800493e:	e005      	b.n	800494c <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8004946:	89fb      	ldrh	r3, [r7, #14]
 8004948:	3301      	adds	r3, #1
 800494a:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1f4      	bne.n	8004940 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8004956:	89fb      	ldrh	r3, [r7, #14]
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	b29b      	uxth	r3, r3
 8004960:	b2db      	uxtb	r3, r3
 8004962:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8004964:	4413      	add	r3, r2
 8004966:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8004968:	8afb      	ldrh	r3, [r7, #22]

}
 800496a:	4618      	mov	r0, r3
 800496c:	371c      	adds	r7, #28
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8004976:	b480      	push	{r7}
 8004978:	b085      	sub	sp, #20
 800497a:	af00      	add	r7, sp, #0
 800497c:	4603      	mov	r3, r0
 800497e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004984:	88fb      	ldrh	r3, [r7, #6]
 8004986:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8004988:	88fa      	ldrh	r2, [r7, #6]
 800498a:	0a12      	lsrs	r2, r2, #8
 800498c:	b292      	uxth	r2, r2
 800498e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004990:	3301      	adds	r3, #1
 8004992:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8004994:	68fb      	ldr	r3, [r7, #12]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
	...

080049a4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	4613      	mov	r3, r2
 80049b0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	4619      	mov	r1, r3
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f7ff ff91 	bl	80048e2 <VL53L0X_calc_macro_period_ps>
 80049c0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80049c8:	4a0a      	ldr	r2, [pc, #40]	; (80049f4 <VL53L0X_calc_timeout_mclks+0x50>)
 80049ca:	fba2 2303 	umull	r2, r3, r2, r3
 80049ce:	099b      	lsrs	r3, r3, #6
 80049d0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049d8:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	085b      	lsrs	r3, r3, #1
 80049e0:	441a      	add	r2, r3
	timeout_period_mclks =
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e8:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 80049ea:	69fb      	ldr	r3, [r7, #28]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3720      	adds	r7, #32
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	10624dd3 	.word	0x10624dd3

080049f8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	807b      	strh	r3, [r7, #2]
 8004a04:	4613      	mov	r3, r2
 8004a06:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8004a0c:	787b      	ldrb	r3, [r7, #1]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff ff66 	bl	80048e2 <VL53L0X_calc_macro_period_ps>
 8004a16:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004a1e:	4a0a      	ldr	r2, [pc, #40]	; (8004a48 <VL53L0X_calc_timeout_us+0x50>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	099b      	lsrs	r3, r3, #6
 8004a26:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8004a28:	887b      	ldrh	r3, [r7, #2]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	fb02 f303 	mul.w	r3, r2, r3
 8004a30:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8004a34:	4a04      	ldr	r2, [pc, #16]	; (8004a48 <VL53L0X_calc_timeout_us+0x50>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	099b      	lsrs	r3, r3, #6
 8004a3c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8004a3e:	697b      	ldr	r3, [r7, #20]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	10624dd3 	.word	0x10624dd3

08004a4c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08c      	sub	sp, #48	; 0x30
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	460b      	mov	r3, r1
 8004a56:	607a      	str	r2, [r7, #4]
 8004a58:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8004a72:	7afb      	ldrb	r3, [r7, #11]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <get_sequence_step_timeout+0x38>
 8004a78:	7afb      	ldrb	r3, [r7, #11]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d002      	beq.n	8004a84 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8004a7e:	7afb      	ldrb	r3, [r7, #11]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d128      	bne.n	8004ad6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004a84:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004a88:	461a      	mov	r2, r3
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f7fd f9ef 	bl	8001e70 <VL53L0X_GetVcselPulsePeriod>
 8004a92:	4603      	mov	r3, r0
 8004a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8004a98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d109      	bne.n	8004ab4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8004aa0:	f107 0320 	add.w	r3, r7, #32
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2146      	movs	r1, #70	; 0x46
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f001 fd3f 	bl	800652c <VL53L0X_RdByte>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8004ab4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff ff5b 	bl	8004976 <VL53L0X_decode_timeout>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004ac4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004ac8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004aca:	4619      	mov	r1, r3
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7ff ff93 	bl	80049f8 <VL53L0X_calc_timeout_us>
 8004ad2:	62b8      	str	r0, [r7, #40]	; 0x28
 8004ad4:	e092      	b.n	8004bfc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8004ad6:	7afb      	ldrb	r3, [r7, #11]
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d135      	bne.n	8004b48 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004adc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7fd f9c3 	bl	8001e70 <VL53L0X_GetVcselPulsePeriod>
 8004aea:	4603      	mov	r3, r0
 8004aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8004af0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f040 8081 	bne.w	8004bfc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004afa:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004afe:	461a      	mov	r2, r3
 8004b00:	2100      	movs	r1, #0
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7fd f9b4 	bl	8001e70 <VL53L0X_GetVcselPulsePeriod>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8004b0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8004b16:	f107 031e 	add.w	r3, r7, #30
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	2151      	movs	r1, #81	; 0x51
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f001 fd2e 	bl	8006580 <VL53L0X_RdWord>
 8004b24:	4603      	mov	r3, r0
 8004b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004b2a:	8bfb      	ldrh	r3, [r7, #30]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff ff22 	bl	8004976 <VL53L0X_decode_timeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004b36:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004b3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f7ff ff5a 	bl	80049f8 <VL53L0X_calc_timeout_us>
 8004b44:	62b8      	str	r0, [r7, #40]	; 0x28
 8004b46:	e059      	b.n	8004bfc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8004b48:	7afb      	ldrb	r3, [r7, #11]
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d156      	bne.n	8004bfc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8004b4e:	f107 0314 	add.w	r3, r7, #20
 8004b52:	4619      	mov	r1, r3
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7fd fa97 	bl	8002088 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8004b5e:	7dfb      	ldrb	r3, [r7, #23]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01d      	beq.n	8004ba0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004b64:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f7fd f97f 	bl	8001e70 <VL53L0X_GetVcselPulsePeriod>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS)
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004b78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10f      	bne.n	8004ba0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8004b80:	f107 031e 	add.w	r3, r7, #30
 8004b84:	461a      	mov	r2, r3
 8004b86:	2151      	movs	r1, #81	; 0x51
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f001 fcf9 	bl	8006580 <VL53L0X_RdWord>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004b94:	8bfb      	ldrh	r3, [r7, #30]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff feed 	bl	8004976 <VL53L0X_decode_timeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004ba0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004ba8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8004bac:	461a      	mov	r2, r3
 8004bae:	2101      	movs	r1, #1
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f7fd f95d 	bl	8001e70 <VL53L0X_GetVcselPulsePeriod>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8004bbc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10f      	bne.n	8004be4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8004bc4:	f107 031c 	add.w	r3, r7, #28
 8004bc8:	461a      	mov	r2, r3
 8004bca:	2171      	movs	r1, #113	; 0x71
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f001 fcd7 	bl	8006580 <VL53L0X_RdWord>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			    VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
			    &FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8004bd8:	8bbb      	ldrh	r3, [r7, #28]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff fecb 	bl	8004976 <VL53L0X_decode_timeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8004be4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004be6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8004bec:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004bf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f7ff feff 	bl	80049f8 <VL53L0X_calc_timeout_us>
 8004bfa:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c00:	601a      	str	r2, [r3, #0]

	return Status;
 8004c02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3730      	adds	r7, #48	; 0x30
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b08a      	sub	sp, #40	; 0x28
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	460b      	mov	r3, r1
 8004c18:	607a      	str	r2, [r7, #4]
 8004c1a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8004c22:	7afb      	ldrb	r3, [r7, #11]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <set_sequence_step_timeout+0x26>
 8004c28:	7afb      	ldrb	r3, [r7, #11]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d002      	beq.n	8004c34 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8004c2e:	7afb      	ldrb	r3, [r7, #11]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d138      	bne.n	8004ca6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004c34:	f107 031b 	add.w	r3, r7, #27
 8004c38:	461a      	mov	r2, r3
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7fd f917 	bl	8001e70 <VL53L0X_GetVcselPulsePeriod>
 8004c42:	4603      	mov	r3, r0
 8004c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8004c48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d11a      	bne.n	8004c86 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8004c50:	7efb      	ldrb	r3, [r7, #27]
 8004c52:	461a      	mov	r2, r3
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff fea4 	bl	80049a4 <VL53L0X_calc_timeout_mclks>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8004c60:	8bbb      	ldrh	r3, [r7, #28]
 8004c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c66:	d903      	bls.n	8004c70 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8004c68:	23ff      	movs	r3, #255	; 0xff
 8004c6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c6e:	e004      	b.n	8004c7a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8004c70:	8bbb      	ldrh	r3, [r7, #28]
 8004c72:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8004c74:	3b01      	subs	r3, #1
 8004c76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004c7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004c86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f040 80ab 	bne.w	8004de6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8004c90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c94:	461a      	mov	r2, r3
 8004c96:	2146      	movs	r1, #70	; 0x46
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f001 fbc5 	bl	8006428 <VL53L0X_WrByte>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8004ca4:	e09f      	b.n	8004de6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8004ca6:	7afb      	ldrb	r3, [r7, #11]
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d135      	bne.n	8004d18 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8004cac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d11b      	bne.n	8004cec <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004cb4:	f107 031b 	add.w	r3, r7, #27
 8004cb8:	461a      	mov	r2, r3
 8004cba:	2100      	movs	r1, #0
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7fd f8d7 	bl	8001e70 <VL53L0X_GetVcselPulsePeriod>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8004cc8:	7efb      	ldrb	r3, [r7, #27]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	f7ff fe68 	bl	80049a4 <VL53L0X_calc_timeout_mclks>
 8004cd4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8004cd6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8004cd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff fe1f 	bl	800491e <VL53L0X_encode_timeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004ce4:	8b3a      	ldrh	r2, [r7, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8004cec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d108      	bne.n	8004d06 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8004cf4:	8b3b      	ldrh	r3, [r7, #24]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2151      	movs	r1, #81	; 0x51
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f001 fbb8 	bl	8006470 <VL53L0X_WrWord>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8004d06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d16b      	bne.n	8004de6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8004d16:	e066      	b.n	8004de6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8004d18:	7afb      	ldrb	r3, [r7, #11]
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d160      	bne.n	8004de0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8004d1e:	f107 0310 	add.w	r3, r7, #16
 8004d22:	4619      	mov	r1, r3
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7fd f9af 	bl	8002088 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8004d2e:	7cfb      	ldrb	r3, [r7, #19]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01d      	beq.n	8004d70 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004d34:	f107 031b 	add.w	r3, r7, #27
 8004d38:	461a      	mov	r2, r3
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	f7fd f897 	bl	8001e70 <VL53L0X_GetVcselPulsePeriod>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS)
				 */
				if (Status == VL53L0X_ERROR_NONE) {
 8004d48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10f      	bne.n	8004d70 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8004d50:	f107 0318 	add.w	r3, r7, #24
 8004d54:	461a      	mov	r2, r3
 8004d56:	2151      	movs	r1, #81	; 0x51
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f001 fc11 	bl	8006580 <VL53L0X_RdWord>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8004d64:	8b3b      	ldrh	r3, [r7, #24]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fe05 	bl	8004976 <VL53L0X_decode_timeout>
 8004d6c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8004d6e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004d70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8004d78:	f107 031b 	add.w	r3, r7, #27
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	2101      	movs	r1, #1
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f7fd f875 	bl	8001e70 <VL53L0X_GetVcselPulsePeriod>
 8004d86:	4603      	mov	r3, r0
 8004d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					    VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					    &CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8004d8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d128      	bne.n	8004de6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8004d94:	7efb      	ldrb	r3, [r7, #27]
 8004d96:	461a      	mov	r2, r3
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff fe02 	bl	80049a4 <VL53L0X_calc_timeout_mclks>
 8004da0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8004da2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	4413      	add	r3, r2
 8004da8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8004daa:	6a38      	ldr	r0, [r7, #32]
 8004dac:	f7ff fdb7 	bl	800491e <VL53L0X_encode_timeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8004db4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d108      	bne.n	8004dce <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8004dbc:	8bfb      	ldrh	r3, [r7, #30]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	2171      	movs	r1, #113	; 0x71
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f001 fb54 	bl	8006470 <VL53L0X_WrWord>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8004dce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d107      	bne.n	8004de6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 8004dde:	e002      	b.n	8004de6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004de0:	23fc      	movs	r3, #252	; 0xfc
 8004de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8004de6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3728      	adds	r7, #40	; 0x28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b08a      	sub	sp, #40	; 0x28
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	70fb      	strb	r3, [r7, #3]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e02:	2300      	movs	r3, #0
 8004e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8004e08:	230c      	movs	r3, #12
 8004e0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8004e0e:	2312      	movs	r3, #18
 8004e10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8004e14:	2308      	movs	r3, #8
 8004e16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8004e1a:	230e      	movs	r3, #14
 8004e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8004e24:	78bb      	ldrb	r3, [r7, #2]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004e30:	23fc      	movs	r3, #252	; 0xfc
 8004e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e36:	e020      	b.n	8004e7a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10d      	bne.n	8004e5a <VL53L0X_set_vcsel_pulse_period+0x68>
 8004e3e:	78ba      	ldrb	r2, [r7, #2]
 8004e40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d304      	bcc.n	8004e52 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8004e48:	78ba      	ldrb	r2, [r7, #2]
 8004e4a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d903      	bls.n	8004e5a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004e52:	23fc      	movs	r3, #252	; 0xfc
 8004e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e58:	e00f      	b.n	8004e7a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d10c      	bne.n	8004e7a <VL53L0X_set_vcsel_pulse_period+0x88>
 8004e60:	78ba      	ldrb	r2, [r7, #2]
 8004e62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d304      	bcc.n	8004e74 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8004e6a:	78ba      	ldrb	r2, [r7, #2]
 8004e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d902      	bls.n	8004e7a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004e74:	23fc      	movs	r3, #252	; 0xfc
 8004e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8004e7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8004e82:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e86:	e239      	b.n	80052fc <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d150      	bne.n	8004f30 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8004e8e:	78bb      	ldrb	r3, [r7, #2]
 8004e90:	2b0c      	cmp	r3, #12
 8004e92:	d110      	bne.n	8004eb6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8004e94:	2218      	movs	r2, #24
 8004e96:	2157      	movs	r1, #87	; 0x57
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f001 fac5 	bl	8006428 <VL53L0X_WrByte>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	2156      	movs	r1, #86	; 0x56
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f001 fabd 	bl	8006428 <VL53L0X_WrByte>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004eb4:	e17f      	b.n	80051b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8004eb6:	78bb      	ldrb	r3, [r7, #2]
 8004eb8:	2b0e      	cmp	r3, #14
 8004eba:	d110      	bne.n	8004ede <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8004ebc:	2230      	movs	r2, #48	; 0x30
 8004ebe:	2157      	movs	r1, #87	; 0x57
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f001 fab1 	bl	8006428 <VL53L0X_WrByte>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8004ecc:	2208      	movs	r2, #8
 8004ece:	2156      	movs	r1, #86	; 0x56
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f001 faa9 	bl	8006428 <VL53L0X_WrByte>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004edc:	e16b      	b.n	80051b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8004ede:	78bb      	ldrb	r3, [r7, #2]
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d110      	bne.n	8004f06 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8004ee4:	2240      	movs	r2, #64	; 0x40
 8004ee6:	2157      	movs	r1, #87	; 0x57
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f001 fa9d 	bl	8006428 <VL53L0X_WrByte>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8004ef4:	2208      	movs	r2, #8
 8004ef6:	2156      	movs	r1, #86	; 0x56
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f001 fa95 	bl	8006428 <VL53L0X_WrByte>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f04:	e157      	b.n	80051b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8004f06:	78bb      	ldrb	r3, [r7, #2]
 8004f08:	2b12      	cmp	r3, #18
 8004f0a:	f040 8154 	bne.w	80051b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8004f0e:	2250      	movs	r2, #80	; 0x50
 8004f10:	2157      	movs	r1, #87	; 0x57
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f001 fa88 	bl	8006428 <VL53L0X_WrByte>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8004f1e:	2208      	movs	r2, #8
 8004f20:	2156      	movs	r1, #86	; 0x56
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f001 fa80 	bl	8006428 <VL53L0X_WrByte>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f2e:	e142      	b.n	80051b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	f040 813f 	bne.w	80051b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8004f38:	78bb      	ldrb	r3, [r7, #2]
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d14c      	bne.n	8004fd8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8004f3e:	2210      	movs	r2, #16
 8004f40:	2148      	movs	r1, #72	; 0x48
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f001 fa70 	bl	8006428 <VL53L0X_WrByte>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8004f4e:	2208      	movs	r2, #8
 8004f50:	2147      	movs	r1, #71	; 0x47
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f001 fa68 	bl	8006428 <VL53L0X_WrByte>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004f5e:	2202      	movs	r2, #2
 8004f60:	2132      	movs	r1, #50	; 0x32
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f001 fa60 	bl	8006428 <VL53L0X_WrByte>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8004f76:	220c      	movs	r2, #12
 8004f78:	2130      	movs	r1, #48	; 0x30
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f001 fa54 	bl	8006428 <VL53L0X_WrByte>
 8004f80:	4603      	mov	r3, r0
 8004f82:	461a      	mov	r2, r3
 8004f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004f8e:	2201      	movs	r2, #1
 8004f90:	21ff      	movs	r1, #255	; 0xff
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f001 fa48 	bl	8006428 <VL53L0X_WrByte>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8004fa6:	2230      	movs	r2, #48	; 0x30
 8004fa8:	2130      	movs	r1, #48	; 0x30
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f001 fa3c 	bl	8006428 <VL53L0X_WrByte>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	21ff      	movs	r1, #255	; 0xff
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f001 fa30 	bl	8006428 <VL53L0X_WrByte>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004fd6:	e0ee      	b.n	80051b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8004fd8:	78bb      	ldrb	r3, [r7, #2]
 8004fda:	2b0a      	cmp	r3, #10
 8004fdc:	d14c      	bne.n	8005078 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8004fde:	2228      	movs	r2, #40	; 0x28
 8004fe0:	2148      	movs	r1, #72	; 0x48
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f001 fa20 	bl	8006428 <VL53L0X_WrByte>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8004fee:	2208      	movs	r2, #8
 8004ff0:	2147      	movs	r1, #71	; 0x47
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f001 fa18 	bl	8006428 <VL53L0X_WrByte>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8004ffe:	2203      	movs	r2, #3
 8005000:	2132      	movs	r1, #50	; 0x32
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f001 fa10 	bl	8006428 <VL53L0X_WrByte>
 8005008:	4603      	mov	r3, r0
 800500a:	461a      	mov	r2, r3
 800500c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005010:	4313      	orrs	r3, r2
 8005012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8005016:	2209      	movs	r2, #9
 8005018:	2130      	movs	r1, #48	; 0x30
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f001 fa04 	bl	8006428 <VL53L0X_WrByte>
 8005020:	4603      	mov	r3, r0
 8005022:	461a      	mov	r2, r3
 8005024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005028:	4313      	orrs	r3, r2
 800502a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800502e:	2201      	movs	r2, #1
 8005030:	21ff      	movs	r1, #255	; 0xff
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f001 f9f8 	bl	8006428 <VL53L0X_WrByte>
 8005038:	4603      	mov	r3, r0
 800503a:	461a      	mov	r2, r3
 800503c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005040:	4313      	orrs	r3, r2
 8005042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8005046:	2220      	movs	r2, #32
 8005048:	2130      	movs	r1, #48	; 0x30
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f001 f9ec 	bl	8006428 <VL53L0X_WrByte>
 8005050:	4603      	mov	r3, r0
 8005052:	461a      	mov	r2, r3
 8005054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005058:	4313      	orrs	r3, r2
 800505a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800505e:	2200      	movs	r2, #0
 8005060:	21ff      	movs	r1, #255	; 0xff
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f001 f9e0 	bl	8006428 <VL53L0X_WrByte>
 8005068:	4603      	mov	r3, r0
 800506a:	461a      	mov	r2, r3
 800506c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005070:	4313      	orrs	r3, r2
 8005072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005076:	e09e      	b.n	80051b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8005078:	78bb      	ldrb	r3, [r7, #2]
 800507a:	2b0c      	cmp	r3, #12
 800507c:	d14c      	bne.n	8005118 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800507e:	2238      	movs	r2, #56	; 0x38
 8005080:	2148      	movs	r1, #72	; 0x48
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f001 f9d0 	bl	8006428 <VL53L0X_WrByte>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800508e:	2208      	movs	r2, #8
 8005090:	2147      	movs	r1, #71	; 0x47
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f001 f9c8 	bl	8006428 <VL53L0X_WrByte>
 8005098:	4603      	mov	r3, r0
 800509a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800509e:	2203      	movs	r2, #3
 80050a0:	2132      	movs	r1, #50	; 0x32
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 f9c0 	bl	8006428 <VL53L0X_WrByte>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80050b6:	2208      	movs	r2, #8
 80050b8:	2130      	movs	r1, #48	; 0x30
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f001 f9b4 	bl	8006428 <VL53L0X_WrByte>
 80050c0:	4603      	mov	r3, r0
 80050c2:	461a      	mov	r2, r3
 80050c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80050ce:	2201      	movs	r2, #1
 80050d0:	21ff      	movs	r1, #255	; 0xff
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f001 f9a8 	bl	8006428 <VL53L0X_WrByte>
 80050d8:	4603      	mov	r3, r0
 80050da:	461a      	mov	r2, r3
 80050dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80050e6:	2220      	movs	r2, #32
 80050e8:	2130      	movs	r1, #48	; 0x30
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f001 f99c 	bl	8006428 <VL53L0X_WrByte>
 80050f0:	4603      	mov	r3, r0
 80050f2:	461a      	mov	r2, r3
 80050f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80050fe:	2200      	movs	r2, #0
 8005100:	21ff      	movs	r1, #255	; 0xff
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f001 f990 	bl	8006428 <VL53L0X_WrByte>
 8005108:	4603      	mov	r3, r0
 800510a:	461a      	mov	r2, r3
 800510c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005110:	4313      	orrs	r3, r2
 8005112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005116:	e04e      	b.n	80051b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8005118:	78bb      	ldrb	r3, [r7, #2]
 800511a:	2b0e      	cmp	r3, #14
 800511c:	d14b      	bne.n	80051b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800511e:	2248      	movs	r2, #72	; 0x48
 8005120:	2148      	movs	r1, #72	; 0x48
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f001 f980 	bl	8006428 <VL53L0X_WrByte>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800512e:	2208      	movs	r2, #8
 8005130:	2147      	movs	r1, #71	; 0x47
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f001 f978 	bl	8006428 <VL53L0X_WrByte>
 8005138:	4603      	mov	r3, r0
 800513a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800513e:	2203      	movs	r2, #3
 8005140:	2132      	movs	r1, #50	; 0x32
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f001 f970 	bl	8006428 <VL53L0X_WrByte>
 8005148:	4603      	mov	r3, r0
 800514a:	461a      	mov	r2, r3
 800514c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005150:	4313      	orrs	r3, r2
 8005152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8005156:	2207      	movs	r2, #7
 8005158:	2130      	movs	r1, #48	; 0x30
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f001 f964 	bl	8006428 <VL53L0X_WrByte>
 8005160:	4603      	mov	r3, r0
 8005162:	461a      	mov	r2, r3
 8005164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005168:	4313      	orrs	r3, r2
 800516a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800516e:	2201      	movs	r2, #1
 8005170:	21ff      	movs	r1, #255	; 0xff
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f001 f958 	bl	8006428 <VL53L0X_WrByte>
 8005178:	4603      	mov	r3, r0
 800517a:	461a      	mov	r2, r3
 800517c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005180:	4313      	orrs	r3, r2
 8005182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8005186:	2220      	movs	r2, #32
 8005188:	2130      	movs	r1, #48	; 0x30
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f001 f94c 	bl	8006428 <VL53L0X_WrByte>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005198:	4313      	orrs	r3, r2
 800519a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800519e:	2200      	movs	r2, #0
 80051a0:	21ff      	movs	r1, #255	; 0xff
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 f940 	bl	8006428 <VL53L0X_WrByte>
 80051a8:	4603      	mov	r3, r0
 80051aa:	461a      	mov	r2, r3
 80051ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80051b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d17f      	bne.n	80052be <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80051be:	78bb      	ldrb	r3, [r7, #2]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe fe36 	bl	8003e32 <VL53L0X_encode_vcsel_period>
 80051c6:	4603      	mov	r3, r0
 80051c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d045      	beq.n	8005262 <VL53L0X_set_vcsel_pulse_period+0x470>
 80051d6:	e06e      	b.n	80052b6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80051d8:	f107 0314 	add.w	r3, r7, #20
 80051dc:	461a      	mov	r2, r3
 80051de:	2103      	movs	r1, #3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff fc33 	bl	8004a4c <get_sequence_step_timeout>
 80051e6:	4603      	mov	r3, r0
 80051e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80051ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d109      	bne.n	8005208 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80051f4:	f107 0310 	add.w	r3, r7, #16
 80051f8:	461a      	mov	r2, r3
 80051fa:	2102      	movs	r1, #2
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fc25 	bl	8004a4c <get_sequence_step_timeout>
 8005202:	4603      	mov	r3, r0
 8005204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8005208:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800520c:	2b00      	cmp	r3, #0
 800520e:	d109      	bne.n	8005224 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8005210:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005214:	461a      	mov	r2, r3
 8005216:	2150      	movs	r1, #80	; 0x50
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f001 f905 	bl	8006428 <VL53L0X_WrByte>
 800521e:	4603      	mov	r3, r0
 8005220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8005224:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005228:	2b00      	cmp	r3, #0
 800522a:	d108      	bne.n	800523e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	461a      	mov	r2, r3
 8005230:	2103      	movs	r1, #3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7ff fceb 	bl	8004c0e <set_sequence_step_timeout>
 8005238:	4603      	mov	r3, r0
 800523a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800523e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005242:	2b00      	cmp	r3, #0
 8005244:	d108      	bne.n	8005258 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	461a      	mov	r2, r3
 800524a:	2102      	movs	r1, #2
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fcde 	bl	8004c0e <set_sequence_step_timeout>
 8005252:	4603      	mov	r3, r0
 8005254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	78ba      	ldrb	r2, [r7, #2]
 800525c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8005260:	e02e      	b.n	80052c0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8005262:	f107 0318 	add.w	r3, r7, #24
 8005266:	461a      	mov	r2, r3
 8005268:	2104      	movs	r1, #4
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff fbee 	bl	8004a4c <get_sequence_step_timeout>
 8005270:	4603      	mov	r3, r0
 8005272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8005276:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800527a:	2b00      	cmp	r3, #0
 800527c:	d109      	bne.n	8005292 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800527e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005282:	461a      	mov	r2, r3
 8005284:	2170      	movs	r1, #112	; 0x70
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f001 f8ce 	bl	8006428 <VL53L0X_WrByte>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8005292:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005296:	2b00      	cmp	r3, #0
 8005298:	d108      	bne.n	80052ac <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	461a      	mov	r2, r3
 800529e:	2104      	movs	r1, #4
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff fcb4 	bl	8004c0e <set_sequence_step_timeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	78ba      	ldrb	r2, [r7, #2]
 80052b0:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80052b4:	e004      	b.n	80052c0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80052b6:	23fc      	movs	r3, #252	; 0xfc
 80052b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80052bc:	e000      	b.n	80052c0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80052be:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80052c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80052ce:	69f9      	ldr	r1, [r7, #28]
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7fc fd8f 	bl	8001df4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80052dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80052e4:	f107 010f 	add.w	r1, r7, #15
 80052e8:	2301      	movs	r3, #1
 80052ea:	2200      	movs	r2, #0
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7fe fcbb 	bl	8003c68 <VL53L0X_perform_phase_calibration>
 80052f2:	4603      	mov	r3, r0
 80052f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80052f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3728      	adds	r7, #40	; 0x28
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	460b      	mov	r3, r1
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005312:	2300      	movs	r3, #0
 8005314:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8005316:	7afb      	ldrb	r3, [r7, #11]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800531c:	2b01      	cmp	r3, #1
 800531e:	d00a      	beq.n	8005336 <VL53L0X_get_vcsel_pulse_period+0x32>
 8005320:	e013      	b.n	800534a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005322:	f107 0316 	add.w	r3, r7, #22
 8005326:	461a      	mov	r2, r3
 8005328:	2150      	movs	r1, #80	; 0x50
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f001 f8fe 	bl	800652c <VL53L0X_RdByte>
 8005330:	4603      	mov	r3, r0
 8005332:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005334:	e00b      	b.n	800534e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8005336:	f107 0316 	add.w	r3, r7, #22
 800533a:	461a      	mov	r2, r3
 800533c:	2170      	movs	r1, #112	; 0x70
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f001 f8f4 	bl	800652c <VL53L0X_RdByte>
 8005344:	4603      	mov	r3, r0
 8005346:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8005348:	e001      	b.n	800534e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800534a:	23fc      	movs	r3, #252	; 0xfc
 800534c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800534e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d107      	bne.n	8005366 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8005356:	7dbb      	ldrb	r3, [r7, #22]
 8005358:	4618      	mov	r0, r3
 800535a:	f7fe fd57 	bl	8003e0c <VL53L0X_decode_vcsel_period>
 800535e:	4603      	mov	r3, r0
 8005360:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	701a      	strb	r2, [r3, #0]

	return Status;
 8005366:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <VL53L0X_set_measurement_timing_budget_micro_seconds>:


VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b090      	sub	sp, #64	; 0x40
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800537c:	2300      	movs	r3, #0
 800537e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005382:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005386:	60fb      	str	r3, [r7, #12]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8005388:	f240 7376 	movw	r3, #1910	; 0x776
 800538c:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t EndOverheadMicroSeconds		= 960;
 800538e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005392:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8005394:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005398:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TccOverheadMicroSeconds		= 590;
 800539a:	f240 234e 	movw	r3, #590	; 0x24e
 800539e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t DssOverheadMicroSeconds		= 690;
 80053a0:	f240 23b2 	movw	r3, #690	; 0x2b2
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80053a6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80053aa:	623b      	str	r3, [r7, #32]
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80053ac:	f240 2326 	movw	r3, #550	; 0x226
 80053b0:	61fb      	str	r3, [r7, #28]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	60bb      	str	r3, [r7, #8]
	uint32_t SubTimeout = 0;
 80053b6:	2300      	movs	r3, #0
 80053b8:	61bb      	str	r3, [r7, #24]

	LOG_FUNCTION_START("");

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80053ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	63bb      	str	r3, [r7, #56]	; 0x38

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80053c6:	f107 0310 	add.w	r3, r7, #16
 80053ca:	4619      	mov	r1, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7fc fe5b 	bl	8002088 <VL53L0X_GetSequenceStepEnables>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE &&
 80053d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d15b      	bne.n	8005498 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
		(SchedulerSequenceSteps.TccOn  ||
 80053e0:	7c3b      	ldrb	r3, [r7, #16]
	if (Status == VL53L0X_ERROR_NONE &&
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d105      	bne.n	80053f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80053e6:	7c7b      	ldrb	r3, [r7, #17]
		(SchedulerSequenceSteps.TccOn  ||
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d102      	bne.n	80053f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn)) {
 80053ec:	7cbb      	ldrb	r3, [r7, #18]
		SchedulerSequenceSteps.MsrcOn ||
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d052      	beq.n	8005498 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80053f2:	f107 030c 	add.w	r3, r7, #12
 80053f6:	461a      	mov	r2, r3
 80053f8:	2102      	movs	r1, #2
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7ff fb26 	bl	8004a4c <get_sequence_step_timeout>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled.
		 */

		if (Status != VL53L0X_ERROR_NONE)
 8005406:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa2>
			return Status;
 800540e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005412:	e07d      	b.n	8005510 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8005414:	7c3b      	ldrb	r3, [r7, #16]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00f      	beq.n	800543a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800541a:	68fb      	ldr	r3, [r7, #12]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800541c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800541e:	4413      	add	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]

			if (SubTimeout <
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	429a      	cmp	r2, r3
 8005428:	d204      	bcs.n	8005434 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800542a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	63bb      	str	r3, [r7, #56]	; 0x38
 8005432:	e002      	b.n	800543a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc8>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005434:	23fc      	movs	r3, #252	; 0xfc
 8005436:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800543a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xd6>
			LOG_FUNCTION_END(Status);
			return Status;
 8005442:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005446:	e063      	b.n	8005510 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8005448:	7cbb      	ldrb	r3, [r7, #18]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d011      	beq.n	8005472 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x100>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	4413      	add	r3, r2
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	61bb      	str	r3, [r7, #24]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545c:	429a      	cmp	r2, r3
 800545e:	d204      	bcs.n	800546a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf8>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	63bb      	str	r3, [r7, #56]	; 0x38
 8005468:	e016      	b.n	8005498 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800546a:	23fc      	movs	r3, #252	; 0xfc
 800546c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005470:	e012      	b.n	8005498 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8005472:	7c7b      	ldrb	r3, [r7, #17]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00f      	beq.n	8005498 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800547c:	4413      	add	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005484:	429a      	cmp	r2, r3
 8005486:	d204      	bcs.n	8005492 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x120>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8005488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005490:	e002      	b.n	8005498 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x126>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005492:	23fc      	movs	r3, #252	; 0xfc
 8005494:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8005498:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x134>
		LOG_FUNCTION_END(Status);
		return Status;
 80054a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80054a4:	e034      	b.n	8005510 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80054a6:	7cfb      	ldrb	r3, [r7, #19]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d019      	beq.n	80054e0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80054ac:	f107 0308 	add.w	r3, r7, #8
 80054b0:	461a      	mov	r2, r3
 80054b2:	2103      	movs	r1, #3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7ff fac9 	bl	8004a4c <get_sequence_step_timeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	6a3a      	ldr	r2, [r7, #32]
 80054c4:	4413      	add	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d204      	bcs.n	80054da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x168>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80054d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80054d8:	e002      	b.n	80054e0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x16e>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80054da:	23fc      	movs	r3, #252	; 0xfc
 80054dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80054e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d111      	bne.n	800550c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>
		SchedulerSequenceSteps.FinalRangeOn) {
 80054e8:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00e      	beq.n	800550c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19a>

		FinalRangeTimingBudgetMicroSeconds -=
 80054ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	63bb      	str	r3, [r7, #56]	; 0x38
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an
		 * error will be set. Otherwise the remaining time will be
		 * applied to the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80054f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f8:	2104      	movs	r1, #4
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff fb87 	bl	8004c0e <set_sequence_step_timeout>
 8005500:	4603      	mov	r3, r0
 8005502:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800550c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005510:	4618      	mov	r0, r3
 8005512:	3740      	adds	r7, #64	; 0x40
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
		VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b090      	sub	sp, #64	; 0x40
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005522:	2300      	movs	r3, #0
 8005524:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8005528:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800552c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800552e:	f240 7376 	movw	r3, #1910	; 0x776
 8005532:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8005534:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8005538:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800553a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800553e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8005540:	f240 234e 	movw	r3, #590	; 0x24e
 8005544:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8005546:	f240 23b2 	movw	r3, #690	; 0x2b2
 800554a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800554c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8005552:	f240 2326 	movw	r3, #550	; 0x226
 8005556:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800555c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800555e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005560:	441a      	add	r2, r3
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8005566:	f107 0318 	add.w	r3, r7, #24
 800556a:	4619      	mov	r1, r3
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fc fd8b 	bl	8002088 <VL53L0X_GetSequenceStepEnables>
 8005572:	4603      	mov	r3, r0
 8005574:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8005578:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8005580:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005584:	e075      	b.n	8005672 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8005586:	7e3b      	ldrb	r3, [r7, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d105      	bne.n	8005598 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800558c:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800558e:	2b00      	cmp	r3, #0
 8005590:	d102      	bne.n	8005598 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8005592:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8005594:	2b00      	cmp	r3, #0
 8005596:	d030      	beq.n	80055fa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8005598:	f107 0310 	add.w	r3, r7, #16
 800559c:	461a      	mov	r2, r3
 800559e:	2102      	movs	r1, #2
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff fa53 	bl	8004a4c <get_sequence_step_timeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80055ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d122      	bne.n	80055fa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80055b4:	7e3b      	ldrb	r3, [r7, #24]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80055be:	6939      	ldr	r1, [r7, #16]
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80055c4:	441a      	add	r2, r3
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80055ca:	7ebb      	ldrb	r3, [r7, #26]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80055d4:	6939      	ldr	r1, [r7, #16]
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	440b      	add	r3, r1
 80055da:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80055dc:	441a      	add	r2, r3
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	e00a      	b.n	80055fa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80055e4:	7e7b      	ldrb	r3, [r7, #25]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d007      	beq.n	80055fa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80055ee:	6939      	ldr	r1, [r7, #16]
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80055f4:	441a      	add	r2, r3
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80055fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d114      	bne.n	800562c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8005602:	7efb      	ldrb	r3, [r7, #27]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d011      	beq.n	800562c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8005608:	f107 030c 	add.w	r3, r7, #12
 800560c:	461a      	mov	r2, r3
 800560e:	2103      	movs	r1, #3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff fa1b 	bl	8004a4c <get_sequence_step_timeout>
 8005616:	4603      	mov	r3, r0
 8005618:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8005620:	68f9      	ldr	r1, [r7, #12]
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005626:	441a      	add	r2, r3
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800562c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005630:	2b00      	cmp	r3, #0
 8005632:	d114      	bne.n	800565e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8005634:	7f3b      	ldrb	r3, [r7, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d011      	beq.n	800565e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800563a:	f107 0314 	add.w	r3, r7, #20
 800563e:	461a      	mov	r2, r3
 8005640:	2104      	movs	r1, #4
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff fa02 	bl	8004a4c <get_sequence_step_timeout>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8005652:	6979      	ldr	r1, [r7, #20]
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8005658:	441a      	add	r2, r3
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800565e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005662:	2b00      	cmp	r3, #0
 8005664:	d103      	bne.n	800566e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60da      	str	r2, [r3, #12]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800566e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005672:	4618      	mov	r0, r3
 8005674:	3740      	adds	r7, #64	; 0x40
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
	...

0800567c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005686:	2300      	movs	r3, #0
 8005688:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800568e:	e0c6      	b.n	800581e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	4413      	add	r3, r2
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	74fb      	strb	r3, [r7, #19]
		Index++;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	3301      	adds	r3, #1
 800569e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80056a0:	7cfb      	ldrb	r3, [r7, #19]
 80056a2:	2bff      	cmp	r3, #255	; 0xff
 80056a4:	f040 808d 	bne.w	80057c2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	4413      	add	r3, r2
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	747b      	strb	r3, [r7, #17]
			Index++;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	3301      	adds	r3, #1
 80056b6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80056b8:	7c7b      	ldrb	r3, [r7, #17]
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d87e      	bhi.n	80057bc <VL53L0X_load_tuning_settings+0x140>
 80056be:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <VL53L0X_load_tuning_settings+0x48>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	080056d5 	.word	0x080056d5
 80056c8:	0800570f 	.word	0x0800570f
 80056cc:	08005749 	.word	0x08005749
 80056d0:	08005783 	.word	0x08005783
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	4413      	add	r3, r2
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	743b      	strb	r3, [r7, #16]
				Index++;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	3301      	adds	r3, #1
 80056e2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	4413      	add	r3, r2
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	73fb      	strb	r3, [r7, #15]
				Index++;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	3301      	adds	r3, #1
 80056f2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80056f4:	7c3b      	ldrb	r3, [r7, #16]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	b29b      	uxth	r3, r3
 8005700:	4413      	add	r3, r2
 8005702:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	89ba      	ldrh	r2, [r7, #12]
 8005708:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
				break;
 800570c:	e087      	b.n	800581e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	4413      	add	r3, r2
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	743b      	strb	r3, [r7, #16]
				Index++;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	3301      	adds	r3, #1
 800571c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	4413      	add	r3, r2
 8005724:	781b      	ldrb	r3, [r3, #0]
 8005726:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	3301      	adds	r3, #1
 800572c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800572e:	7c3b      	ldrb	r3, [r7, #16]
 8005730:	b29b      	uxth	r3, r3
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	b29a      	uxth	r2, r3
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	b29b      	uxth	r3, r3
 800573a:	4413      	add	r3, r2
 800573c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	89ba      	ldrh	r2, [r7, #12]
 8005742:	f8a3 2162 	strh.w	r2, [r3, #354]	; 0x162
					Temp16);
				break;
 8005746:	e06a      	b.n	800581e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	4413      	add	r3, r2
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	743b      	strb	r3, [r7, #16]
				Index++;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	3301      	adds	r3, #1
 8005756:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	4413      	add	r3, r2
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	73fb      	strb	r3, [r7, #15]
				Index++;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	3301      	adds	r3, #1
 8005766:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8005768:	7c3b      	ldrb	r3, [r7, #16]
 800576a:	b29b      	uxth	r3, r3
 800576c:	021b      	lsls	r3, r3, #8
 800576e:	b29a      	uxth	r2, r3
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	b29b      	uxth	r3, r3
 8005774:	4413      	add	r3, r2
 8005776:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	89ba      	ldrh	r2, [r7, #12]
 800577c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164
				break;
 8005780:	e04d      	b.n	800581e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	4413      	add	r3, r2
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	743b      	strb	r3, [r7, #16]
				Index++;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	3301      	adds	r3, #1
 8005790:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	4413      	add	r3, r2
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	3301      	adds	r3, #1
 80057a0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80057a2:	7c3b      	ldrb	r3, [r7, #16]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	4413      	add	r3, r2
 80057b0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	89ba      	ldrh	r2, [r7, #12]
 80057b6:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
				break;
 80057ba:	e030      	b.n	800581e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80057bc:	23fc      	movs	r3, #252	; 0xfc
 80057be:	77fb      	strb	r3, [r7, #31]
 80057c0:	e02d      	b.n	800581e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80057c2:	7cfb      	ldrb	r3, [r7, #19]
 80057c4:	2b04      	cmp	r3, #4
 80057c6:	d828      	bhi.n	800581a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	683a      	ldr	r2, [r7, #0]
 80057cc:	4413      	add	r3, r2
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	74bb      	strb	r3, [r7, #18]
			Index++;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	3301      	adds	r3, #1
 80057d6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80057d8:	2300      	movs	r3, #0
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	e00f      	b.n	80057fe <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	4413      	add	r3, r2
 80057e4:	7819      	ldrb	r1, [r3, #0]
 80057e6:	f107 0208 	add.w	r2, r7, #8
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	4413      	add	r3, r2
 80057ee:	460a      	mov	r2, r1
 80057f0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	3301      	adds	r3, #1
 80057f6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	3301      	adds	r3, #1
 80057fc:	61bb      	str	r3, [r7, #24]
 80057fe:	7cfb      	ldrb	r3, [r7, #19]
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	429a      	cmp	r2, r3
 8005804:	dbeb      	blt.n	80057de <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8005806:	7cfb      	ldrb	r3, [r7, #19]
 8005808:	f107 0208 	add.w	r2, r7, #8
 800580c:	7cb9      	ldrb	r1, [r7, #18]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fdae 	bl	8006370 <VL53L0X_WriteMulti>
 8005814:	4603      	mov	r3, r0
 8005816:	77fb      	strb	r3, [r7, #31]
 8005818:	e001      	b.n	800581e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800581a:	23fc      	movs	r3, #252	; 0xfc
 800581c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	4413      	add	r3, r2
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d004      	beq.n	8005834 <VL53L0X_load_tuning_settings+0x1b8>
 800582a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f43f af2e 	beq.w	8005690 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005834:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3720      	adds	r7, #32
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800584c:	2300      	movs	r3, #0
 800584e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8005856:	f107 0313 	add.w	r3, r7, #19
 800585a:	4619      	mov	r1, r3
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f7fc fc9f 	bl	80021a0 <VL53L0X_GetXTalkCompensationEnable>
 8005862:	4603      	mov	r3, r0
 8005864:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8005866:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d111      	bne.n	8005892 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00e      	beq.n	8005892 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	8a9b      	ldrh	r3, [r3, #20]
 800587e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	fb02 f303 	mul.w	r3, r2, r3
 8005886:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	3380      	adds	r3, #128	; 0x80
 800588c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8005892:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3720      	adds	r7, #32
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b086      	sub	sp, #24
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80058b6:	f107 0310 	add.w	r3, r7, #16
 80058ba:	461a      	mov	r2, r3
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f7ff ffbe 	bl	8005840 <VL53L0X_get_total_xtalk_rate>
 80058c4:	4603      	mov	r3, r0
 80058c6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80058c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d105      	bne.n	80058dc <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	441a      	add	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	601a      	str	r2, [r3, #0]

	return Status;
 80058dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <get_dmax_lut_points>:

VL53L0X_Error get_dmax_lut_points(VL53L0X_DMaxLUT_t data, uint32_t lut_size,
	FixPoint1616_t input, int32_t *index0,	int32_t *index1){
 80058e8:	b084      	sub	sp, #16
 80058ea:	b480      	push	{r7}
 80058ec:	b085      	sub	sp, #20
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	f107 0c18 	add.w	ip, r7, #24
 80058f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	70fb      	strb	r3, [r7, #3]
	FixPoint1616_t index0_tmp = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]
	FixPoint1616_t index1_tmp = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	60bb      	str	r3, [r7, #8]
	int index = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	607b      	str	r3, [r7, #4]

	for (index = 0; index < lut_size; index++) {
 8005908:	2300      	movs	r3, #0
 800590a:	607b      	str	r3, [r7, #4]
 800590c:	e00d      	b.n	800592a <get_dmax_lut_points+0x42>
		if (input <= data.ambRate_mcps[index]) {
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f107 0218 	add.w	r2, r7, #24
 8005914:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005918:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800591a:	429a      	cmp	r2, r3
 800591c:	d802      	bhi.n	8005924 <get_dmax_lut_points+0x3c>
			index1_tmp = index;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60bb      	str	r3, [r7, #8]
			break;
 8005922:	e006      	b.n	8005932 <get_dmax_lut_points+0x4a>
	for (index = 0; index < lut_size; index++) {
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3301      	adds	r3, #1
 8005928:	607b      	str	r3, [r7, #4]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800592e:	429a      	cmp	r2, r3
 8005930:	d8ed      	bhi.n	800590e <get_dmax_lut_points+0x26>
		}
	}

	if (index == lut_size) {
 8005932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	429a      	cmp	r2, r3
 8005938:	d105      	bne.n	8005946 <get_dmax_lut_points+0x5e>
		/* input is higher than last x point */
		index0_tmp = index1_tmp = lut_size - 1;
 800593a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800593c:	3b01      	subs	r3, #1
 800593e:	60bb      	str	r3, [r7, #8]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	e008      	b.n	8005958 <get_dmax_lut_points+0x70>
	} else if (index1_tmp == 0) {
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <get_dmax_lut_points+0x6a>
		/* input is lower than first x point */
		index0_tmp = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e002      	b.n	8005958 <get_dmax_lut_points+0x70>
	} else{
		/* input is in between 2 points */
		index0_tmp = index1_tmp - 1;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	3b01      	subs	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
	}

	*index0 = index0_tmp;
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800595c:	601a      	str	r2, [r3, #0]
	*index1 = index1_tmp;
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005962:	601a      	str	r2, [r3, #0]

	return Status;
 8005964:	f997 3003 	ldrsb.w	r3, [r7, #3]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	b004      	add	sp, #16
 8005974:	4770      	bx	lr

08005976 <VL53L0X_calc_dmax>:

VL53L0X_Error VL53L0X_calc_dmax(
	VL53L0X_DEV Dev, FixPoint1616_t ambRateMeas, uint32_t *pdmax_mm){
 8005976:	b5b0      	push	{r4, r5, r7, lr}
 8005978:	b0ba      	sub	sp, #232	; 0xe8
 800597a:	af0e      	add	r7, sp, #56	; 0x38
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005982:	2300      	movs	r3, #0
 8005984:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab
	VL53L0X_DeviceParameters_t CurrentParameters;
	int32_t index0 = 0;
 8005988:	2300      	movs	r3, #0
 800598a:	61bb      	str	r3, [r7, #24]
	int32_t index1 = 0;
 800598c:	2300      	movs	r3, #0
 800598e:	617b      	str	r3, [r7, #20]
	FixPoint1616_t dmax_mm;
	FixPoint1616_t linearSlope;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005990:	f107 031c 	add.w	r3, r7, #28
 8005994:	4619      	mov	r1, r3
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7fc f918 	bl	8001bcc <VL53L0X_GetDeviceParameters>
 800599c:	4603      	mov	r3, r0
 800599e:	f887 30ab 	strb.w	r3, [r7, #171]	; 0xab

	if (ambRateMeas <= CurrentParameters.dmax_lut.ambRate_mcps[0]) {
 80059a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d803      	bhi.n	80059b2 <VL53L0X_calc_dmax+0x3c>
		dmax_mm = CurrentParameters.dmax_lut.dmax_mm[0];
 80059aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059b0:	e081      	b.n	8005ab6 <VL53L0X_calc_dmax+0x140>
	} else if (ambRateMeas >=
		   CurrentParameters.dmax_lut.
		   ambRate_mcps[VL53L0X_DMAX_LUT_SIZE - 1]) {
 80059b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
	} else if (ambRateMeas >=
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d304      	bcc.n	80059c4 <VL53L0X_calc_dmax+0x4e>
		dmax_mm =
 80059ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059c2:	e078      	b.n	8005ab6 <VL53L0X_calc_dmax+0x140>
		    CurrentParameters.dmax_lut.dmax_mm[VL53L0X_DMAX_LUT_SIZE -
						       1];
	} else{
		get_dmax_lut_points(CurrentParameters.dmax_lut,
 80059c4:	f107 0314 	add.w	r3, r7, #20
 80059c8:	930d      	str	r3, [sp, #52]	; 0x34
 80059ca:	f107 0318 	add.w	r3, r7, #24
 80059ce:	930c      	str	r3, [sp, #48]	; 0x30
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80059d4:	2307      	movs	r3, #7
 80059d6:	930a      	str	r3, [sp, #40]	; 0x28
 80059d8:	466d      	mov	r5, sp
 80059da:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80059de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80059ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80059f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059f4:	f7ff ff78 	bl	80058e8 <get_dmax_lut_points>
			VL53L0X_DMAX_LUT_SIZE, ambRateMeas, &index0, &index1);

		if (index0 == index1) {
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d10a      	bne.n	8005a16 <VL53L0X_calc_dmax+0xa0>
			dmax_mm = CurrentParameters.dmax_lut.dmax_mm[index0];
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	3314      	adds	r3, #20
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8005a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a14:	e04f      	b.n	8005ab6 <VL53L0X_calc_dmax+0x140>
		} else {
			amb0 = CurrentParameters.dmax_lut.ambRate_mcps[index0];
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	330e      	adds	r3, #14
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8005a20:	4413      	add	r3, r2
 8005a22:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8005a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			amb1 = CurrentParameters.dmax_lut.ambRate_mcps[index1];
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	330e      	adds	r3, #14
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8005a34:	4413      	add	r3, r2
 8005a36:	f853 3c90 	ldr.w	r3, [r3, #-144]
 8005a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			dmax0 = CurrentParameters.dmax_lut.dmax_mm[index0];
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	3314      	adds	r3, #20
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8005a48:	4413      	add	r3, r2
 8005a4a:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8005a4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			dmax1 = CurrentParameters.dmax_lut.dmax_mm[index1];
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	3314      	adds	r3, #20
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f853 3c8c 	ldr.w	r3, [r3, #-140]
 8005a62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			if ((amb1 - amb0) != 0) {
 8005a66:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005a6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d01d      	beq.n	8005aae <VL53L0X_calc_dmax+0x138>
				/* Fix16:16/Fix16:8 => Fix16:8 */
				linearSlope = (dmax0-dmax1)/((amb1-amb0) >> 8);
 8005a72:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005a76:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8005a80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a84:	1acb      	subs	r3, r1, r3
 8005a86:	0a1b      	lsrs	r3, r3, #8
 8005a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

				/* Fix16:8 * Fix16:8 => Fix16:16 */
				dmax_mm =
				    (((amb1 -
 8005a90:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	1ad3      	subs	r3, r2, r3
				       ambRateMeas) >> 8) * linearSlope) +
 8005a98:	0a1b      	lsrs	r3, r3, #8
 8005a9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a9e:	fb02 f303 	mul.w	r3, r2, r3
				dmax_mm =
 8005aa2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005aac:	e003      	b.n	8005ab6 <VL53L0X_calc_dmax+0x140>
				    dmax1;
			} else{
				dmax_mm = dmax0;
 8005aae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ab2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			}
		}
	}
	*pdmax_mm = (uint32_t)(dmax_mm >> 16);
 8005ab6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005aba:	0c1a      	lsrs	r2, r3, #16
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8005ac0:	f997 30ab 	ldrsb.w	r3, [r7, #171]	; 0xab
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	37b0      	adds	r7, #176	; 0xb0
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bdb0      	pop	{r4, r5, r7, pc}

08005acc <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b0b0      	sub	sp, #192	; 0xc0
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8005ad8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8005adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8005ae0:	f44f 7316 	mov.w	r3, #600	; 0x258
 8005ae4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs =
 8005ae8:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8005aec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
						0x00190000; /* 25ms */
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8005af0:	f241 235c 	movw	r3, #4700	; 0x125c
 8005af4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8005af8:	4b98      	ldr	r3, [pc, #608]	; (8005d5c <VL53L0X_calc_sigma_estimate+0x290>)
 8005afa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8005afe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005b02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8005b06:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8005b0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8005b16:	4b92      	ldr	r3, [pc, #584]	; (8005d60 <VL53L0X_calc_sigma_estimate+0x294>)
 8005b18:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8005b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b1e:	67bb      	str	r3, [r7, #120]	; 0x78
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8005b20:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8005b24:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t cPllPeriod_ps			= 1655;
 8005b26:	f240 6377 	movw	r3, #1655	; 0x677
 8005b2a:	673b      	str	r3, [r7, #112]	; 0x70
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	61bb      	str	r3, [r7, #24]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b40:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8005b44:	0c1b      	lsrs	r3, r3, #16
 8005b46:	66bb      	str	r3, [r7, #104]	; 0x68

	Status = VL53L0X_get_total_signal_rate(
 8005b48:	f107 0314 	add.w	r3, r7, #20
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	68f8      	ldr	r0, [r7, #12]
 8005b52:	f7ff fea4 	bl	800589e <VL53L0X_get_total_signal_rate>
 8005b56:	4603      	mov	r3, r0
 8005b58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8005b5c:	f107 0318 	add.w	r3, r7, #24
 8005b60:	461a      	mov	r2, r3
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f7ff fe6b 	bl	8005840 <VL53L0X_get_total_xtalk_rate>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b76:	fb02 f303 	mul.w	r3, r2, r3
 8005b7a:	667b      	str	r3, [r7, #100]	; 0x64
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8005b7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b82:	0c1b      	lsrs	r3, r3, #16
 8005b84:	667b      	str	r3, [r7, #100]	; 0x64

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005b8c:	fb02 f303 	mul.w	r3, r2, r3
 8005b90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8005b94:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d902      	bls.n	8005ba4 <VL53L0X_calc_sigma_estimate+0xd8>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8005b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8005ba4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d160      	bne.n	8005c6e <VL53L0X_calc_sigma_estimate+0x1a2>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005bb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8005bbc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8005bc0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7fe feea 	bl	80049a4 <VL53L0X_calc_timeout_mclks>
 8005bd0:	65f8      	str	r0, [r7, #92]	; 0x5c
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005be2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8005be6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005bea:	461a      	mov	r2, r3
 8005bec:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7fe fed7 	bl	80049a4 <VL53L0X_calc_timeout_mclks>
 8005bf6:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 8005bfe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005c02:	2b08      	cmp	r3, #8
 8005c04:	d102      	bne.n	8005c0c <VL53L0X_calc_sigma_estimate+0x140>
			vcselWidth = 2;
 8005c06:	2302      	movs	r3, #2
 8005c08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8005c0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c10:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8005c12:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005c16:	fb02 f303 	mul.w	r3, r2, r3
 8005c1a:	02db      	lsls	r3, r3, #11
 8005c1c:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8005c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c20:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005c24:	4a4f      	ldr	r2, [pc, #316]	; (8005d64 <VL53L0X_calc_sigma_estimate+0x298>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	099b      	lsrs	r3, r3, #6
 8005c2c:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us *= cPllPeriod_ps;
 8005c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005c32:	fb02 f303 	mul.w	r3, r2, r3
 8005c36:	653b      	str	r3, [r7, #80]	; 0x50
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8005c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c3a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005c3e:	4a49      	ldr	r2, [pc, #292]	; (8005d64 <VL53L0X_calc_sigma_estimate+0x298>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	099b      	lsrs	r3, r3, #6
 8005c46:	653b      	str	r3, [r7, #80]	; 0x50

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	3380      	adds	r3, #128	; 0x80
 8005c4c:	0a1b      	lsrs	r3, r3, #8
 8005c4e:	617b      	str	r3, [r7, #20]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c54:	fb02 f303 	mul.w	r3, r2, r3
 8005c58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8005c5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c60:	3380      	adds	r3, #128	; 0x80
 8005c62:	0a1b      	lsrs	r3, r3, #8
 8005c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	021b      	lsls	r3, r3, #8
 8005c6c:	617b      	str	r3, [r7, #20]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8005c6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <VL53L0X_calc_sigma_estimate+0x1b0>
		LOG_FUNCTION_END(Status);
		return Status;
 8005c76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c7a:	e14a      	b.n	8005f12 <VL53L0X_calc_sigma_estimate+0x446>
	}

	if (peakSignalRate_kcps == 0) {
 8005c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d109      	bne.n	8005c96 <VL53L0X_calc_sigma_estimate+0x1ca>
		*pSigmaEstimate = cSigmaEstMax;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005c88:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005c90:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005c94:	e13b      	b.n	8005f0e <VL53L0X_calc_sigma_estimate+0x442>
	} else {
		if (vcselTotalEventsRtn < 1)
 8005c96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d102      	bne.n	8005ca4 <VL53L0X_calc_sigma_estimate+0x1d8>
			vcselTotalEventsRtn = 1;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8005ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ca8:	64fb      	str	r3, [r7, #76]	; 0x4c

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8005caa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cac:	041a      	lsls	r2, r3, #16
 8005cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8005cb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d903      	bls.n	8005ccc <VL53L0X_calc_sigma_estimate+0x200>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8005cc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8005ccc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005cd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005cd4:	fb02 f303 	mul.w	r3, r2, r3
 8005cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8005cdc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe f8b5 	bl	8003e58 <VL53L0X_isqrt>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	64bb      	str	r3, [r7, #72]	; 0x48

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	891b      	ldrh	r3, [r3, #8]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cfc:	fb02 f303 	mul.w	r3, r2, r3
 8005d00:	647b      	str	r3, [r7, #68]	; 0x44
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005d02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d04:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8005d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d0a:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005d0c:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8005d0e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8005d12:	4a14      	ldr	r2, [pc, #80]	; (8005d64 <VL53L0X_calc_sigma_estimate+0x298>)
 8005d14:	fba2 2303 	umull	r2, r3, r2, r3
 8005d18:	099b      	lsrs	r3, r3, #6
 8005d1a:	643b      	str	r3, [r7, #64]	; 0x40

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8005d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d1e:	041b      	lsls	r3, r3, #16
 8005d20:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005d24:	4a0f      	ldr	r2, [pc, #60]	; (8005d64 <VL53L0X_calc_sigma_estimate+0x298>)
 8005d26:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2a:	099b      	lsrs	r3, r3, #6
 8005d2c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Shift by 8 bits to increase resolution prior to the
		 * division
		 */
		diff1_mcps <<= 8;
 8005d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d30:	021b      	lsls	r3, r3, #8
 8005d32:	643b      	str	r3, [r7, #64]	; 0x40

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8005d34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	bfb8      	it	lt
 8005d40:	425b      	neglt	r3, r3
 8005d42:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	63bb      	str	r3, [r7, #56]	; 0x38

		if (pRangingMeasurementData->RangeStatus != 0) {
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	7e1b      	ldrb	r3, [r3, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <VL53L0X_calc_sigma_estimate+0x29c>
			pwMult = 1 << 16;
 8005d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d5a:	e032      	b.n	8005dc2 <VL53L0X_calc_sigma_estimate+0x2f6>
 8005d5c:	028f87ae 	.word	0x028f87ae
 8005d60:	0006999a 	.word	0x0006999a
 8005d64:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			/* smaller than 1.0f */
			pwMult = deltaT_ps/cVcselPulseWidth_ps;
 8005d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however
			 * both values are small enough such that32 bits will
			 * not be exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8005d7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
 8005d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8005d88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d8e:	4413      	add	r3, r2
 8005d90:	0c1b      	lsrs	r3, r3, #16
 8005d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8005d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d9a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8005d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			 * At this point the value will be 1.xx, therefore if we
			 * square the value this will exceed 32 bits. To address
			 * this perform a single shift to the right before the
			 * multiplication.
			 */
			pwMult >>= 1;
 8005da2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8005dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005db0:	fb03 f303 	mul.w	r3, r3, r3
 8005db4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8005db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dbc:	0b9b      	lsrs	r3, r3, #14
 8005dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8005dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dc8:	fb02 f303 	mul.w	r3, r2, r3
 8005dcc:	637b      	str	r3, [r7, #52]	; 0x34

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005dd4:	0c1b      	lsrs	r3, r3, #16
 8005dd6:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8005dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dda:	fb03 f303 	mul.w	r3, r3, r3
 8005dde:	637b      	str	r3, [r7, #52]	; 0x34

		sqr2 = sigmaEstimateP2;
 8005de0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005de4:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005dec:	0c1b      	lsrs	r3, r3, #16
 8005dee:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	fb03 f303 	mul.w	r3, r3, r3
 8005df6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8005df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	4413      	add	r3, r2
 8005dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8005e00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e02:	f7fe f829 	bl	8003e58 <VL53L0X_isqrt>
 8005e06:	62b8      	str	r0, [r7, #40]	; 0x28

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	041b      	lsls	r3, r3, #16
 8005e0c:	62bb      	str	r3, [r7, #40]	; 0x28
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	3332      	adds	r3, #50	; 0x32
 8005e12:	4a42      	ldr	r2, [pc, #264]	; (8005f1c <VL53L0X_calc_sigma_estimate+0x450>)
 8005e14:	fba2 2303 	umull	r2, r3, r2, r3
 8005e18:	095a      	lsrs	r2, r3, #5
 8005e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8005e24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e28:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8005e2c:	fb02 f303 	mul.w	r3, r2, r3
 8005e30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8005e34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e38:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8005e3c:	3308      	adds	r3, #8
 8005e3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8005e42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e46:	4a36      	ldr	r2, [pc, #216]	; (8005f20 <VL53L0X_calc_sigma_estimate+0x454>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	0b5b      	lsrs	r3, r3, #13
 8005e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8005e52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d903      	bls.n	8005e66 <VL53L0X_calc_sigma_estimate+0x39a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result.
			 */
			sigmaEstRtn = cSigmaEstRtnMax;
 8005e5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
		    (finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs +
 8005e66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8005e74:	4a2b      	ldr	r2, [pc, #172]	; (8005f24 <VL53L0X_calc_sigma_estimate+0x458>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	099b      	lsrs	r3, r3, #6
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
		 * (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8005e82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e86:	441a      	add	r2, r3
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fd ffe2 	bl	8003e58 <VL53L0X_isqrt>
 8005e94:	6238      	str	r0, [r7, #32]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	021b      	lsls	r3, r3, #8
 8005e9a:	623b      	str	r3, [r7, #32]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005ea2:	4a20      	ldr	r2, [pc, #128]	; (8005f24 <VL53L0X_calc_sigma_estimate+0x458>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	099b      	lsrs	r3, r3, #6
 8005eaa:	623b      	str	r3, [r7, #32]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8005eac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005eb0:	fb03 f303 	mul.w	r3, r3, r3
 8005eb4:	637b      	str	r3, [r7, #52]	; 0x34
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	fb03 f303 	mul.w	r3, r3, r3
 8005ebc:	633b      	str	r3, [r7, #48]	; 0x30

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8005ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	4413      	add	r3, r2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fd ffc7 	bl	8003e58 <VL53L0X_isqrt>
 8005eca:	61f8      	str	r0, [r7, #28]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
 8005ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8005eda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d009      	beq.n	8005ef4 <VL53L0X_calc_sigma_estimate+0x428>
 8005ee0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d005      	beq.n	8005ef4 <VL53L0X_calc_sigma_estimate+0x428>
 8005ee8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d903      	bls.n	8005efc <VL53L0X_calc_sigma_estimate+0x430>
				(sigmaEstimate > cSigmaEstMax)) {
			sigmaEstimate = cSigmaEstMax;
 8005ef4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8005f02:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005f0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	37c0      	adds	r7, #192	; 0xc0
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	51eb851f 	.word	0x51eb851f
 8005f20:	d1b71759 	.word	0xd1b71759
 8005f24:	10624dd3 	.word	0x10624dd3

08005f28 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b090      	sub	sp, #64	; 0x40
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	607a      	str	r2, [r7, #4]
 8005f32:	461a      	mov	r2, r3
 8005f34:	460b      	mov	r3, r1
 8005f36:	72fb      	strb	r3, [r7, #11]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8005f42:	2300      	movs	r3, #0
 8005f44:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8005f72:	2300      	movs	r3, #0
 8005f74:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8005f7a:	7afb      	ldrb	r3, [r7, #11]
 8005f7c:	10db      	asrs	r3, r3, #3
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8005f88:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d017      	beq.n	8005fc0 <VL53L0X_get_pal_range_status+0x98>
 8005f90:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005f94:	2b05      	cmp	r3, #5
 8005f96:	d013      	beq.n	8005fc0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8005f98:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005f9c:	2b07      	cmp	r3, #7
 8005f9e:	d00f      	beq.n	8005fc0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8005fa0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005fa4:	2b0c      	cmp	r3, #12
 8005fa6:	d00b      	beq.n	8005fc0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8005fa8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005fac:	2b0d      	cmp	r3, #13
 8005fae:	d007      	beq.n	8005fc0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8005fb0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005fb4:	2b0e      	cmp	r3, #14
 8005fb6:	d003      	beq.n	8005fc0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8005fb8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005fbc:	2b0f      	cmp	r3, #15
 8005fbe:	d103      	bne.n	8005fc8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005fc6:	e002      	b.n	8005fce <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8005fce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d109      	bne.n	8005fea <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8005fd6:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8005fda:	461a      	mov	r2, r3
 8005fdc:	2100      	movs	r1, #0
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f7fc f9b2 	bl	8002348 <VL53L0X_GetLimitCheckEnable>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8005fea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d03c      	beq.n	800606c <VL53L0X_get_pal_range_status+0x144>
 8005ff2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d138      	bne.n	800606c <VL53L0X_get_pal_range_status+0x144>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8005ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ffe:	461a      	mov	r2, r3
 8006000:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f7ff fd62 	bl	8005acc <VL53L0X_calc_sigma_estimate>
 8006008:	4603      	mov	r3, r0
 800600a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate);
		if (Status == VL53L0X_ERROR_NONE)
 800600e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <VL53L0X_get_pal_range_status+0x104>
			Status = VL53L0X_calc_dmax(
 8006016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f107 0210 	add.w	r2, r7, #16
 800601e:	4619      	mov	r1, r3
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff fca8 	bl	8005976 <VL53L0X_calc_dmax>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				Dev,
				pRangingMeasurementData->AmbientRateRtnMegaCps,
				&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800602c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006030:	2b00      	cmp	r3, #0
 8006032:	d103      	bne.n	800603c <VL53L0X_get_pal_range_status+0x114>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	b29a      	uxth	r2, r3
 8006038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800603a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800603c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006040:	2b00      	cmp	r3, #0
 8006042:	d113      	bne.n	800606c <VL53L0X_get_pal_range_status+0x144>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8006044:	f107 0320 	add.w	r3, r7, #32
 8006048:	461a      	mov	r2, r3
 800604a:	2100      	movs	r1, #0
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7fc fa01 	bl	8002454 <VL53L0X_GetLimitCheckValue>
 8006052:	4603      	mov	r3, r0
 8006054:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8006058:	6a3b      	ldr	r3, [r7, #32]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d006      	beq.n	800606c <VL53L0X_get_pal_range_status+0x144>
				(SigmaEstimate > SigmaLimitValue))
 800605e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006060:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8006062:	429a      	cmp	r2, r3
 8006064:	d902      	bls.n	800606c <VL53L0X_get_pal_range_status+0x144>
					/* Limit Fail */
				SigmaLimitflag = 1;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800606c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006070:	2b00      	cmp	r3, #0
 8006072:	d109      	bne.n	8006088 <VL53L0X_get_pal_range_status+0x160>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006074:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8006078:	461a      	mov	r2, r3
 800607a:	2102      	movs	r1, #2
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f7fc f963 	bl	8002348 <VL53L0X_GetLimitCheckEnable>
 8006082:	4603      	mov	r3, r0
 8006084:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8006088:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800608c:	2b00      	cmp	r3, #0
 800608e:	d044      	beq.n	800611a <VL53L0X_get_pal_range_status+0x1f2>
 8006090:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006094:	2b00      	cmp	r3, #0
 8006096:	d140      	bne.n	800611a <VL53L0X_get_pal_range_status+0x1f2>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8006098:	f107 031c 	add.w	r3, r7, #28
 800609c:	461a      	mov	r2, r3
 800609e:	2102      	movs	r1, #2
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7fc f9d7 	bl	8002454 <VL53L0X_GetLimitCheckValue>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 80060ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d107      	bne.n	80060c4 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80060b4:	2201      	movs	r2, #1
 80060b6:	21ff      	movs	r1, #255	; 0xff
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 f9b5 	bl	8006428 <VL53L0X_WrByte>
 80060be:	4603      	mov	r3, r0
 80060c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 80060c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d109      	bne.n	80060e0 <VL53L0X_get_pal_range_status+0x1b8>
			Status = VL53L0X_RdWord(Dev,
 80060cc:	f107 0316 	add.w	r3, r7, #22
 80060d0:	461a      	mov	r2, r3
 80060d2:	21b6      	movs	r1, #182	; 0xb6
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f000 fa53 	bl	8006580 <VL53L0X_RdWord>
 80060da:	4603      	mov	r3, r0
 80060dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 80060e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d107      	bne.n	80060f8 <VL53L0X_get_pal_range_status+0x1d0>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80060e8:	2200      	movs	r2, #0
 80060ea:	21ff      	movs	r1, #255	; 0xff
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f99b 	bl	8006428 <VL53L0X_WrByte>
 80060f2:	4603      	mov	r3, r0
 80060f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 80060f8:	8afb      	ldrh	r3, [r7, #22]
 80060fa:	025b      	lsls	r3, r3, #9
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006102:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174

		if ((SignalRefClipValue > 0) &&
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d006      	beq.n	800611a <VL53L0X_get_pal_range_status+0x1f2>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800610c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800610e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006110:	429a      	cmp	r2, r3
 8006112:	d902      	bls.n	800611a <VL53L0X_get_pal_range_status+0x1f2>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8006114:	2301      	movs	r3, #1
 8006116:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800611a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800611e:	2b00      	cmp	r3, #0
 8006120:	d109      	bne.n	8006136 <VL53L0X_get_pal_range_status+0x20e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006126:	461a      	mov	r2, r3
 8006128:	2103      	movs	r1, #3
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7fc f90c 	bl	8002348 <VL53L0X_GetLimitCheckEnable>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8006136:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800613a:	2b00      	cmp	r3, #0
 800613c:	d023      	beq.n	8006186 <VL53L0X_get_pal_range_status+0x25e>
 800613e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006142:	2b00      	cmp	r3, #0
 8006144:	d11f      	bne.n	8006186 <VL53L0X_get_pal_range_status+0x25e>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8006146:	893b      	ldrh	r3, [r7, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <VL53L0X_get_pal_range_status+0x22a>
			SignalRatePerSpad = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	637b      	str	r3, [r7, #52]	; 0x34
 8006150:	e005      	b.n	800615e <VL53L0X_get_pal_range_status+0x236>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	021a      	lsls	r2, r3, #8
 8006156:	893b      	ldrh	r3, [r7, #8]
 8006158:	fbb2 f3f3 	udiv	r3, r2, r3
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800615e:	f107 0318 	add.w	r3, r7, #24
 8006162:	461a      	mov	r2, r3
 8006164:	2103      	movs	r1, #3
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7fc f974 	bl	8002454 <VL53L0X_GetLimitCheckValue>
 800616c:	4603      	mov	r3, r0
 800616e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d006      	beq.n	8006186 <VL53L0X_get_pal_range_status+0x25e>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8006178:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800617a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800617c:	429a      	cmp	r2, r3
 800617e:	d202      	bcs.n	8006186 <VL53L0X_get_pal_range_status+0x25e>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8006180:	2301      	movs	r3, #1
 8006182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006186:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800618a:	2b00      	cmp	r3, #0
 800618c:	d14a      	bne.n	8006224 <VL53L0X_get_pal_range_status+0x2fc>
		if (NoneFlag == 1) {
 800618e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006192:	2b01      	cmp	r3, #1
 8006194:	d103      	bne.n	800619e <VL53L0X_get_pal_range_status+0x276>
			*pPalRangeStatus = 255;	 /* NONE */
 8006196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006198:	22ff      	movs	r2, #255	; 0xff
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	e042      	b.n	8006224 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 1 ||
 800619e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d007      	beq.n	80061b6 <VL53L0X_get_pal_range_status+0x28e>
 80061a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d003      	beq.n	80061b6 <VL53L0X_get_pal_range_status+0x28e>
					DeviceRangeStatusInternal == 2 ||
 80061ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d103      	bne.n	80061be <VL53L0X_get_pal_range_status+0x296>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 80061b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b8:	2205      	movs	r2, #5
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	e032      	b.n	8006224 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 6 ||
 80061be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80061c2:	2b06      	cmp	r3, #6
 80061c4:	d003      	beq.n	80061ce <VL53L0X_get_pal_range_status+0x2a6>
 80061c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80061ca:	2b09      	cmp	r3, #9
 80061cc:	d103      	bne.n	80061d6 <VL53L0X_get_pal_range_status+0x2ae>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80061ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d0:	2204      	movs	r2, #4
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	e026      	b.n	8006224 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 8 ||
 80061d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d007      	beq.n	80061ee <VL53L0X_get_pal_range_status+0x2c6>
 80061de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80061e2:	2b0a      	cmp	r3, #10
 80061e4:	d003      	beq.n	80061ee <VL53L0X_get_pal_range_status+0x2c6>
					DeviceRangeStatusInternal == 10 ||
 80061e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d103      	bne.n	80061f6 <VL53L0X_get_pal_range_status+0x2ce>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 80061ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f0:	2203      	movs	r2, #3
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	e016      	b.n	8006224 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (DeviceRangeStatusInternal == 4 ||
 80061f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d003      	beq.n	8006206 <VL53L0X_get_pal_range_status+0x2de>
 80061fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006202:	2b01      	cmp	r3, #1
 8006204:	d103      	bne.n	800620e <VL53L0X_get_pal_range_status+0x2e6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8006206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006208:	2202      	movs	r2, #2
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	e00a      	b.n	8006224 <VL53L0X_get_pal_range_status+0x2fc>
		} else if (SigmaLimitflag == 1) {
 800620e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8006212:	2b01      	cmp	r3, #1
 8006214:	d103      	bne.n	800621e <VL53L0X_get_pal_range_status+0x2f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8006216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006218:	2201      	movs	r2, #1
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	e002      	b.n	8006224 <VL53L0X_get_pal_range_status+0x2fc>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800621e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006220:	2200      	movs	r2, #0
 8006222:	701a      	strb	r2, [r3, #0]
		}
	}

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8006224:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8006228:	461a      	mov	r2, r3
 800622a:	2101      	movs	r1, #1
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7fc f88b 	bl	8002348 <VL53L0X_GetLimitCheckEnable>
 8006232:	4603      	mov	r3, r0
 8006234:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8006238:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800623c:	2b00      	cmp	r3, #0
 800623e:	d14f      	bne.n	80062e0 <VL53L0X_get_pal_range_status+0x3b8>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8006240:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <VL53L0X_get_pal_range_status+0x328>
 8006248:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800624c:	2b01      	cmp	r3, #1
 800624e:	d103      	bne.n	8006258 <VL53L0X_get_pal_range_status+0x330>
			Temp8 = 1;
 8006250:	2301      	movs	r3, #1
 8006252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006256:	e002      	b.n	800625e <VL53L0X_get_pal_range_status+0x336>
		else
			Temp8 = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006264:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8006268:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800626c:	2b04      	cmp	r3, #4
 800626e:	d003      	beq.n	8006278 <VL53L0X_get_pal_range_status+0x350>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8006270:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8006274:	2b00      	cmp	r3, #0
 8006276:	d103      	bne.n	8006280 <VL53L0X_get_pal_range_status+0x358>
			Temp8 = 1;
 8006278:	2301      	movs	r3, #1
 800627a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800627e:	e002      	b.n	8006286 <VL53L0X_get_pal_range_status+0x35e>
		else
			Temp8 = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800628c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8006290:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <VL53L0X_get_pal_range_status+0x378>
 8006298:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800629c:	2b01      	cmp	r3, #1
 800629e:	d103      	bne.n	80062a8 <VL53L0X_get_pal_range_status+0x380>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062a6:	e002      	b.n	80062ae <VL53L0X_get_pal_range_status+0x386>
		else
			Temp8 = 0;
 80062a8:	2300      	movs	r3, #0
 80062aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80062b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80062b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <VL53L0X_get_pal_range_status+0x3a0>
 80062c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d103      	bne.n	80062d0 <VL53L0X_get_pal_range_status+0x3a8>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80062c8:	2301      	movs	r3, #1
 80062ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ce:	e002      	b.n	80062d6 <VL53L0X_get_pal_range_status+0x3ae>
		else
			Temp8 = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80062dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3740      	adds	r7, #64	; 0x40
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* 2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3305      	adds	r3, #5
 80062fc:	005b      	lsls	r3, r3, #1
 80062fe:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800630c:	b299      	uxth	r1, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	b29a      	uxth	r2, r3
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	4613      	mov	r3, r2
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	f001 f897 	bl	800744c <HAL_I2C_Master_Transmit>
 800631e:	4603      	mov	r3, r0
 8006320:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006322:	693b      	ldr	r3, [r7, #16]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af02      	add	r7, sp, #8
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	330a      	adds	r3, #10
 800633c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8d3 0184 	ldr.w	r0, [r3, #388]	; 0x184
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 800634a:	f043 0301 	orr.w	r3, r3, #1
 800634e:	b2db      	uxtb	r3, r3
 8006350:	b299      	uxth	r1, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	b29a      	uxth	r2, r3
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	4613      	mov	r3, r2
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	f001 f969 	bl	8007634 <HAL_I2C_Master_Receive>
 8006362:	4603      	mov	r3, r0
 8006364:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8006366:	693b      	ldr	r3, [r7, #16]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	607a      	str	r2, [r7, #4]
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	460b      	mov	r3, r1
 800637e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006380:	2300      	movs	r3, #0
 8006382:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	2b3f      	cmp	r3, #63	; 0x3f
 8006388:	d902      	bls.n	8006390 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800638a:	f06f 0303 	mvn.w	r3, #3
 800638e:	e016      	b.n	80063be <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8006390:	4a0d      	ldr	r2, [pc, #52]	; (80063c8 <VL53L0X_WriteMulti+0x58>)
 8006392:	7afb      	ldrb	r3, [r7, #11]
 8006394:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	480c      	ldr	r0, [pc, #48]	; (80063cc <VL53L0X_WriteMulti+0x5c>)
 800639c:	f005 ff9a 	bl	800c2d4 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	3301      	adds	r3, #1
 80063a4:	461a      	mov	r2, r3
 80063a6:	4908      	ldr	r1, [pc, #32]	; (80063c8 <VL53L0X_WriteMulti+0x58>)
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f7ff ff9f 	bl	80062ec <_I2CWrite>
 80063ae:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80063b6:	23ec      	movs	r3, #236	; 0xec
 80063b8:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80063ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	200015cc 	.word	0x200015cc
 80063cc:	200015cd 	.word	0x200015cd

080063d0 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	607a      	str	r2, [r7, #4]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	460b      	mov	r3, r1
 80063de:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063e0:	2300      	movs	r3, #0
 80063e2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80063e4:	f107 030b 	add.w	r3, r7, #11
 80063e8:	2201      	movs	r2, #1
 80063ea:	4619      	mov	r1, r3
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7ff ff7d 	bl	80062ec <_I2CWrite>
 80063f2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80063fa:	23ec      	movs	r3, #236	; 0xec
 80063fc:	75fb      	strb	r3, [r7, #23]
        goto done;
 80063fe:	e00c      	b.n	800641a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f7ff ff91 	bl	800632c <_I2CRead>
 800640a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006412:	23ec      	movs	r3, #236	; 0xec
 8006414:	75fb      	strb	r3, [r7, #23]
 8006416:	e000      	b.n	800641a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8006418:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800641a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <VL53L0X_WrByte>:
    return Status;
}



VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	70fb      	strb	r3, [r7, #3]
 8006434:	4613      	mov	r3, r2
 8006436:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006438:	2300      	movs	r3, #0
 800643a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800643c:	4a0b      	ldr	r2, [pc, #44]	; (800646c <VL53L0X_WrByte+0x44>)
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8006442:	4a0a      	ldr	r2, [pc, #40]	; (800646c <VL53L0X_WrByte+0x44>)
 8006444:	78bb      	ldrb	r3, [r7, #2]
 8006446:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8006448:	2202      	movs	r2, #2
 800644a:	4908      	ldr	r1, [pc, #32]	; (800646c <VL53L0X_WrByte+0x44>)
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff ff4d 	bl	80062ec <_I2CWrite>
 8006452:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800645a:	23ec      	movs	r3, #236	; 0xec
 800645c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800645e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	200015cc 	.word	0x200015cc

08006470 <VL53L0X_WrWord>:

    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
 800647c:	4613      	mov	r3, r2
 800647e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8006484:	4a0e      	ldr	r2, [pc, #56]	; (80064c0 <VL53L0X_WrWord+0x50>)
 8006486:	78fb      	ldrb	r3, [r7, #3]
 8006488:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800648a:	883b      	ldrh	r3, [r7, #0]
 800648c:	0a1b      	lsrs	r3, r3, #8
 800648e:	b29b      	uxth	r3, r3
 8006490:	b2da      	uxtb	r2, r3
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <VL53L0X_WrWord+0x50>)
 8006494:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8006496:	883b      	ldrh	r3, [r7, #0]
 8006498:	b2da      	uxtb	r2, r3
 800649a:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <VL53L0X_WrWord+0x50>)
 800649c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800649e:	2203      	movs	r2, #3
 80064a0:	4907      	ldr	r1, [pc, #28]	; (80064c0 <VL53L0X_WrWord+0x50>)
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff ff22 	bl	80062ec <_I2CWrite>
 80064a8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80064b0:	23ec      	movs	r3, #236	; 0xec
 80064b2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80064b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	200015cc 	.word	0x200015cc

080064c4 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	4608      	mov	r0, r1
 80064ce:	4611      	mov	r1, r2
 80064d0:	461a      	mov	r2, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	70fb      	strb	r3, [r7, #3]
 80064d6:	460b      	mov	r3, r1
 80064d8:	70bb      	strb	r3, [r7, #2]
 80064da:	4613      	mov	r3, r2
 80064dc:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064de:	2300      	movs	r3, #0
 80064e0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80064e2:	f107 020e 	add.w	r2, r7, #14
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f81e 	bl	800652c <VL53L0X_RdByte>
 80064f0:	4603      	mov	r3, r0
 80064f2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80064f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d110      	bne.n	800651e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80064fc:	7bba      	ldrb	r2, [r7, #14]
 80064fe:	78bb      	ldrb	r3, [r7, #2]
 8006500:	4013      	ands	r3, r2
 8006502:	b2da      	uxtb	r2, r3
 8006504:	787b      	ldrb	r3, [r7, #1]
 8006506:	4313      	orrs	r3, r2
 8006508:	b2db      	uxtb	r3, r3
 800650a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800650c:	7bba      	ldrb	r2, [r7, #14]
 800650e:	78fb      	ldrb	r3, [r7, #3]
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff ff88 	bl	8006428 <VL53L0X_WrByte>
 8006518:	4603      	mov	r3, r0
 800651a:	73fb      	strb	r3, [r7, #15]
 800651c:	e000      	b.n	8006520 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800651e:	bf00      	nop
done:
    return Status;
 8006520:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	460b      	mov	r3, r1
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800653a:	2300      	movs	r3, #0
 800653c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800653e:	f107 030b 	add.w	r3, r7, #11
 8006542:	2201      	movs	r2, #1
 8006544:	4619      	mov	r1, r3
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f7ff fed0 	bl	80062ec <_I2CWrite>
 800654c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006554:	23ec      	movs	r3, #236	; 0xec
 8006556:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006558:	e00c      	b.n	8006574 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800655a:	2201      	movs	r2, #1
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f7ff fee4 	bl	800632c <_I2CRead>
 8006564:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800656c:	23ec      	movs	r3, #236	; 0xec
 800656e:	75fb      	strb	r3, [r7, #23]
 8006570:	e000      	b.n	8006574 <VL53L0X_RdByte+0x48>
    }
done:
 8006572:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8006574:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <VL53L0X_RdWord>:

    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	460b      	mov	r3, r1
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800658e:	2300      	movs	r3, #0
 8006590:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8006592:	f107 030b 	add.w	r3, r7, #11
 8006596:	2201      	movs	r2, #1
 8006598:	4619      	mov	r1, r3
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff fea6 	bl	80062ec <_I2CWrite>
 80065a0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80065a8:	23ec      	movs	r3, #236	; 0xec
 80065aa:	75fb      	strb	r3, [r7, #23]
        goto done;
 80065ac:	e017      	b.n	80065de <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80065ae:	2202      	movs	r2, #2
 80065b0:	490e      	ldr	r1, [pc, #56]	; (80065ec <VL53L0X_RdWord+0x6c>)
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7ff feba 	bl	800632c <_I2CRead>
 80065b8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80065c0:	23ec      	movs	r3, #236	; 0xec
 80065c2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80065c4:	e00b      	b.n	80065de <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80065c6:	4b09      	ldr	r3, [pc, #36]	; (80065ec <VL53L0X_RdWord+0x6c>)
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	021b      	lsls	r3, r3, #8
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	4b06      	ldr	r3, [pc, #24]	; (80065ec <VL53L0X_RdWord+0x6c>)
 80065d2:	785b      	ldrb	r3, [r3, #1]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	4413      	add	r3, r2
 80065d8:	b29a      	uxth	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80065de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	200015cc 	.word	0x200015cc

080065f0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	460b      	mov	r3, r1
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065fe:	2300      	movs	r3, #0
 8006600:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8006602:	f107 030b 	add.w	r3, r7, #11
 8006606:	2201      	movs	r2, #1
 8006608:	4619      	mov	r1, r3
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f7ff fe6e 	bl	80062ec <_I2CWrite>
 8006610:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006618:	23ec      	movs	r3, #236	; 0xec
 800661a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800661c:	e01b      	b.n	8006656 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800661e:	2204      	movs	r2, #4
 8006620:	4910      	ldr	r1, [pc, #64]	; (8006664 <VL53L0X_RdDWord+0x74>)
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f7ff fe82 	bl	800632c <_I2CRead>
 8006628:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8006630:	23ec      	movs	r3, #236	; 0xec
 8006632:	75fb      	strb	r3, [r7, #23]
        goto done;
 8006634:	e00f      	b.n	8006656 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8006636:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <VL53L0X_RdDWord+0x74>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	061a      	lsls	r2, r3, #24
 800663c:	4b09      	ldr	r3, [pc, #36]	; (8006664 <VL53L0X_RdDWord+0x74>)
 800663e:	785b      	ldrb	r3, [r3, #1]
 8006640:	041b      	lsls	r3, r3, #16
 8006642:	441a      	add	r2, r3
 8006644:	4b07      	ldr	r3, [pc, #28]	; (8006664 <VL53L0X_RdDWord+0x74>)
 8006646:	789b      	ldrb	r3, [r3, #2]
 8006648:	021b      	lsls	r3, r3, #8
 800664a:	4413      	add	r3, r2
 800664c:	4a05      	ldr	r2, [pc, #20]	; (8006664 <VL53L0X_RdDWord+0x74>)
 800664e:	78d2      	ldrb	r2, [r2, #3]
 8006650:	441a      	add	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8006656:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	200015cc 	.word	0x200015cc

08006668 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006670:	2300      	movs	r3, #0
 8006672:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8006674:	2002      	movs	r0, #2
 8006676:	f000 fba5 	bl	8006dc4 <HAL_Delay>
    return status;
 800667a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <Brett_VL53L0X_StartMultiSensing>:

// vars

//functions
VL53L0X_Error Brett_VL53L0X_StartMultiSensing(VL53L0X_DEV Dev)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]

	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8006692:	2100      	movs	r1, #0
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f7fb fb4f 	bl	8001d38 <VL53L0X_SetDeviceMode>
 800669a:	4603      	mov	r3, r0
 800669c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800669e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d104      	bne.n	80066b0 <Brett_VL53L0X_StartMultiSensing+0x2a>
		Status = VL53L0X_StartMeasurement(Dev);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fc f8d0 	bl	800284c <VL53L0X_StartMeasurement>
 80066ac:	4603      	mov	r3, r0
 80066ae:	73fb      	strb	r3, [r7, #15]

	return Status;
 80066b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <Brett_VL53L0X_FinishMultiSensing>:

VL53L0X_Error Brett_VL53L0X_FinishMultiSensing(VL53L0X_DEV Dev,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;


	// make sure sensor is done
	if (Status == VL53L0X_ERROR_NONE)
 80066ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d104      	bne.n	80066dc <Brett_VL53L0X_FinishMultiSensing+0x20>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f7fd fb6a 	bl	8003dac <VL53L0X_measurement_poll_for_completion>
 80066d8:	4603      	mov	r3, r0
 80066da:	73fb      	strb	r3, [r7, #15]

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80066dc:	f107 030e 	add.w	r3, r7, #14
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fb fb54 	bl	8001d90 <VL53L0X_GetDeviceMode>
 80066e8:	4603      	mov	r3, r0
 80066ea:	73fb      	strb	r3, [r7, #15]

	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80066ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d106      	bne.n	8006702 <Brett_VL53L0X_FinishMultiSensing+0x46>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80066f4:	7bbb      	ldrb	r3, [r7, #14]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d103      	bne.n	8006702 <Brett_VL53L0X_FinishMultiSensing+0x46>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2203      	movs	r2, #3
 80066fe:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e

	if (Status == VL53L0X_ERROR_NONE)
 8006702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d105      	bne.n	8006716 <Brett_VL53L0X_FinishMultiSensing+0x5a>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7fc f99f 	bl	8002a50 <VL53L0X_GetRangingMeasurementData>
 8006712:	4603      	mov	r3, r0
 8006714:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d105      	bne.n	800672a <Brett_VL53L0X_FinishMultiSensing+0x6e>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800671e:	2100      	movs	r1, #0
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7fc fc43 	bl	8002fac <VL53L0X_ClearInterruptMask>
 8006726:	4603      	mov	r3, r0
 8006728:	73fb      	strb	r3, [r7, #15]

	return Status;
 800672a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <Brett_IR_StartMulti>:

int Brett_IR_StartMulti(VL53L0X_Dev_t devs[], int distances[], int howManyDevs)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b090      	sub	sp, #64	; 0x40
 800673a:	af00      	add	r7, sp, #0
 800673c:	60f8      	str	r0, [r7, #12]
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
	int bretts_status = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	637b      	str	r3, [r7, #52]	; 0x34
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006746:	2300      	movs	r3, #0
 8006748:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	VL53L0_DEV Dev;

	// first start each dev measuring
	for (int i = 0; i < howManyDevs; i++)
 800674c:	2300      	movs	r3, #0
 800674e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006750:	e020      	b.n	8006794 <Brett_IR_StartMulti+0x5e>
	{
		// set point to a dev
		Dev = &devs[i];
 8006752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006754:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8006758:	fb02 f303 	mul.w	r3, r2, r3
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	62fb      	str	r3, [r7, #44]	; 0x2c

		// start sensing
		Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8006762:	2100      	movs	r1, #0
 8006764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006766:	f7fb fae7 	bl	8001d38 <VL53L0X_SetDeviceMode>
 800676a:	4603      	mov	r3, r0
 800676c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		Status = Brett_VL53L0X_StartMultiSensing(Dev);
 8006770:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006772:	f7ff ff88 	bl	8006686 <Brett_VL53L0X_StartMultiSensing>
 8006776:	4603      	mov	r3, r0
 8006778:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		// return if error happened
		if (Status != VL53L0X_ERROR_NONE)
 800677c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006780:	2b00      	cmp	r3, #0
 8006782:	d004      	beq.n	800678e <Brett_IR_StartMulti+0x58>
			return bretts_status = -1;
 8006784:	f04f 33ff 	mov.w	r3, #4294967295
 8006788:	637b      	str	r3, [r7, #52]	; 0x34
 800678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678c:	e03e      	b.n	800680c <Brett_IR_StartMulti+0xd6>
	for (int i = 0; i < howManyDevs; i++)
 800678e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006790:	3301      	adds	r3, #1
 8006792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006794:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	429a      	cmp	r2, r3
 800679a:	dbda      	blt.n	8006752 <Brett_IR_StartMulti+0x1c>
	}

	// finally wait for each dev to finish, then store data received
	for (int i = 0; i < howManyDevs; i++)
 800679c:	2300      	movs	r3, #0
 800679e:	63bb      	str	r3, [r7, #56]	; 0x38
 80067a0:	e02f      	b.n	8006802 <Brett_IR_StartMulti+0xcc>
	{
		// data struct IRs use
		VL53L0X_RangingMeasurementData_t RangingMeasurementData;

		// point to a dev
		Dev = &devs[i];
 80067a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a4:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80067a8:	fb02 f303 	mul.w	r3, r2, r3
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	4413      	add	r3, r2
 80067b0:	62fb      	str	r3, [r7, #44]	; 0x2c

		// get data from sensor
		Status = Brett_VL53L0X_FinishMultiSensing(Dev, &RangingMeasurementData);
 80067b2:	f107 0310 	add.w	r3, r7, #16
 80067b6:	4619      	mov	r1, r3
 80067b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067ba:	f7ff ff7f 	bl	80066bc <Brett_VL53L0X_FinishMultiSensing>
 80067be:	4603      	mov	r3, r0
 80067c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		// if range status isnt 0 then assume max distance
		if (RangingMeasurementData.RangeStatus != 0)
 80067c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <Brett_IR_StartMulti+0xa6>
			distances[i] = 8100;
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	4413      	add	r3, r2
 80067d4:	f641 72a4 	movw	r2, #8100	; 0x1fa4
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	e006      	b.n	80067ea <Brett_IR_StartMulti+0xb4>
		else
			distances[i] = RangingMeasurementData.RangeMilliMeter;
 80067dc:	8b39      	ldrh	r1, [r7, #24]
 80067de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	4413      	add	r3, r2
 80067e6:	460a      	mov	r2, r1
 80067e8:	601a      	str	r2, [r3, #0]

		// return if error happened
		if (Status != VL53L0X_ERROR_NONE)
 80067ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d004      	beq.n	80067fc <Brett_IR_StartMulti+0xc6>
			return bretts_status = -2;
 80067f2:	f06f 0301 	mvn.w	r3, #1
 80067f6:	637b      	str	r3, [r7, #52]	; 0x34
 80067f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fa:	e007      	b.n	800680c <Brett_IR_StartMulti+0xd6>
	for (int i = 0; i < howManyDevs; i++)
 80067fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fe:	3301      	adds	r3, #1
 8006800:	63bb      	str	r3, [r7, #56]	; 0x38
 8006802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	429a      	cmp	r2, r3
 8006808:	dbcb      	blt.n	80067a2 <Brett_IR_StartMulti+0x6c>
	}

	return bretts_status;
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800680c:	4618      	mov	r0, r3
 800680e:	3740      	adds	r7, #64	; 0x40
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <Brett_IR_InitIrSensors>:

// !!FUCNTION NOT COMPLETE YET!!
// uses random GPIO
int Brett_IR_InitIrSensors(VL53L0X_Dev_t devs[], I2C_HandleTypeDef *i2c)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800681e:	2300      	movs	r3, #0
 8006820:	76fb      	strb	r3, [r7, #27]
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;
	uint8_t newi2c = 0x52;
 8006822:	2352      	movs	r3, #82	; 0x52
 8006824:	76bb      	strb	r3, [r7, #26]
	int bretts_status = 0;
 8006826:	2300      	movs	r3, #0
 8006828:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < AMOUNT_IRS; i++)
 800682a:	2300      	movs	r3, #0
 800682c:	61fb      	str	r3, [r7, #28]
 800682e:	e11d      	b.n	8006a6c <Brett_IR_InitIrSensors+0x258>
	{
		// point to dev
		VL53L0_DEV	Dev;
		Dev = &devs[i];
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8006836:	fb02 f303 	mul.w	r3, r2, r3
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	4413      	add	r3, r2
 800683e:	613b      	str	r3, [r7, #16]

		// turn on XSHUT
		if (i == 0)
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10b      	bne.n	800685e <Brett_IR_InitIrSensors+0x4a>
		{
			HAL_GPIO_WritePin(GPIO_IR0_PORT, GPIO_IR0_PIN, GPIO_PIN_SET);
 8006846:	2201      	movs	r2, #1
 8006848:	2108      	movs	r1, #8
 800684a:	488d      	ldr	r0, [pc, #564]	; (8006a80 <Brett_IR_InitIrSensors+0x26c>)
 800684c:	f000 fd56 	bl	80072fc <HAL_GPIO_WritePin>
			if (bretts_status != 0)
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d071      	beq.n	800693a <Brett_IR_InitIrSensors+0x126>
				printf("GPIO turn on 0 didnt work\n\r");
 8006856:	488b      	ldr	r0, [pc, #556]	; (8006a84 <Brett_IR_InitIrSensors+0x270>)
 8006858:	f006 f8ea 	bl	800ca30 <iprintf>
 800685c:	e06d      	b.n	800693a <Brett_IR_InitIrSensors+0x126>
		}
		else if (i == 1)
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d10b      	bne.n	800687c <Brett_IR_InitIrSensors+0x68>
		{
			HAL_GPIO_WritePin(GPIO_IR1_PORT, GPIO_IR1_PIN, GPIO_PIN_SET);
 8006864:	2201      	movs	r2, #1
 8006866:	2110      	movs	r1, #16
 8006868:	4885      	ldr	r0, [pc, #532]	; (8006a80 <Brett_IR_InitIrSensors+0x26c>)
 800686a:	f000 fd47 	bl	80072fc <HAL_GPIO_WritePin>
			if (bretts_status != 0)
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d062      	beq.n	800693a <Brett_IR_InitIrSensors+0x126>
				printf("GPIO turn on 1 didnt work\n\r");
 8006874:	4884      	ldr	r0, [pc, #528]	; (8006a88 <Brett_IR_InitIrSensors+0x274>)
 8006876:	f006 f8db 	bl	800ca30 <iprintf>
 800687a:	e05e      	b.n	800693a <Brett_IR_InitIrSensors+0x126>
		}
		else if (i == 2)
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	2b02      	cmp	r3, #2
 8006880:	d10b      	bne.n	800689a <Brett_IR_InitIrSensors+0x86>
		{
			HAL_GPIO_WritePin(GPIO_IR2_PORT, GPIO_IR2_PIN, GPIO_PIN_SET);
 8006882:	2201      	movs	r2, #1
 8006884:	2140      	movs	r1, #64	; 0x40
 8006886:	4881      	ldr	r0, [pc, #516]	; (8006a8c <Brett_IR_InitIrSensors+0x278>)
 8006888:	f000 fd38 	bl	80072fc <HAL_GPIO_WritePin>
			if (bretts_status != 0)
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d053      	beq.n	800693a <Brett_IR_InitIrSensors+0x126>
				printf("GPIO turn on 2 didnt work\n\r");
 8006892:	487f      	ldr	r0, [pc, #508]	; (8006a90 <Brett_IR_InitIrSensors+0x27c>)
 8006894:	f006 f8cc 	bl	800ca30 <iprintf>
 8006898:	e04f      	b.n	800693a <Brett_IR_InitIrSensors+0x126>
		}
		else if (i == 3)
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	2b03      	cmp	r3, #3
 800689e:	d10b      	bne.n	80068b8 <Brett_IR_InitIrSensors+0xa4>
		{
			HAL_GPIO_WritePin(GPIO_IR3_PORT, GPIO_IR3_PIN, GPIO_PIN_SET);
 80068a0:	2201      	movs	r2, #1
 80068a2:	2180      	movs	r1, #128	; 0x80
 80068a4:	4879      	ldr	r0, [pc, #484]	; (8006a8c <Brett_IR_InitIrSensors+0x278>)
 80068a6:	f000 fd29 	bl	80072fc <HAL_GPIO_WritePin>
			if (bretts_status != 0)
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d044      	beq.n	800693a <Brett_IR_InitIrSensors+0x126>
				printf("GPIO turn on 3 didnt work\n\r");
 80068b0:	4878      	ldr	r0, [pc, #480]	; (8006a94 <Brett_IR_InitIrSensors+0x280>)
 80068b2:	f006 f8bd 	bl	800ca30 <iprintf>
 80068b6:	e040      	b.n	800693a <Brett_IR_InitIrSensors+0x126>
		}
		else if (i == 4)
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d10c      	bne.n	80068d8 <Brett_IR_InitIrSensors+0xc4>
		{
			HAL_GPIO_WritePin(GPIO_IR4_PORT, GPIO_IR4_PIN, GPIO_PIN_SET);
 80068be:	2201      	movs	r2, #1
 80068c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068c4:	4874      	ldr	r0, [pc, #464]	; (8006a98 <Brett_IR_InitIrSensors+0x284>)
 80068c6:	f000 fd19 	bl	80072fc <HAL_GPIO_WritePin>
			if (bretts_status != 0)
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d034      	beq.n	800693a <Brett_IR_InitIrSensors+0x126>
				printf("GPIO turn on 4 didnt work\n\r");
 80068d0:	4872      	ldr	r0, [pc, #456]	; (8006a9c <Brett_IR_InitIrSensors+0x288>)
 80068d2:	f006 f8ad 	bl	800ca30 <iprintf>
 80068d6:	e030      	b.n	800693a <Brett_IR_InitIrSensors+0x126>
		}
		else if (i == 5)
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	2b05      	cmp	r3, #5
 80068dc:	d10c      	bne.n	80068f8 <Brett_IR_InitIrSensors+0xe4>
		{
			HAL_GPIO_WritePin(GPIO_IR5_PORT, GPIO_IR5_PIN, GPIO_PIN_SET);
 80068de:	2201      	movs	r2, #1
 80068e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80068e4:	486c      	ldr	r0, [pc, #432]	; (8006a98 <Brett_IR_InitIrSensors+0x284>)
 80068e6:	f000 fd09 	bl	80072fc <HAL_GPIO_WritePin>
			if (bretts_status != 0)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d024      	beq.n	800693a <Brett_IR_InitIrSensors+0x126>
				printf("GPIO turn on 5 didnt work\n\r");
 80068f0:	486b      	ldr	r0, [pc, #428]	; (8006aa0 <Brett_IR_InitIrSensors+0x28c>)
 80068f2:	f006 f89d 	bl	800ca30 <iprintf>
 80068f6:	e020      	b.n	800693a <Brett_IR_InitIrSensors+0x126>
		}
		else if (i == 6)
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	2b06      	cmp	r3, #6
 80068fc:	d10b      	bne.n	8006916 <Brett_IR_InitIrSensors+0x102>
		{
			HAL_GPIO_WritePin(GPIO_IR6_PORT, GPIO_IR6_PIN, GPIO_PIN_SET);
 80068fe:	2201      	movs	r2, #1
 8006900:	2140      	movs	r1, #64	; 0x40
 8006902:	4868      	ldr	r0, [pc, #416]	; (8006aa4 <Brett_IR_InitIrSensors+0x290>)
 8006904:	f000 fcfa 	bl	80072fc <HAL_GPIO_WritePin>
			if (bretts_status != 0)
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d015      	beq.n	800693a <Brett_IR_InitIrSensors+0x126>
				printf("GPIO turn on 6 didnt work\n\r");
 800690e:	4866      	ldr	r0, [pc, #408]	; (8006aa8 <Brett_IR_InitIrSensors+0x294>)
 8006910:	f006 f88e 	bl	800ca30 <iprintf>
 8006914:	e011      	b.n	800693a <Brett_IR_InitIrSensors+0x126>
		}
		else if (i == 7)
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2b07      	cmp	r3, #7
 800691a:	d10b      	bne.n	8006934 <Brett_IR_InitIrSensors+0x120>
		{
			HAL_GPIO_WritePin(GPIO_IR7_PORT, GPIO_IR7_PIN, GPIO_PIN_SET);
 800691c:	2201      	movs	r2, #1
 800691e:	2180      	movs	r1, #128	; 0x80
 8006920:	4860      	ldr	r0, [pc, #384]	; (8006aa4 <Brett_IR_InitIrSensors+0x290>)
 8006922:	f000 fceb 	bl	80072fc <HAL_GPIO_WritePin>
			if (bretts_status != 0)
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d006      	beq.n	800693a <Brett_IR_InitIrSensors+0x126>
				printf("GPIO turn on 7 didnt work\n\r");
 800692c:	485f      	ldr	r0, [pc, #380]	; (8006aac <Brett_IR_InitIrSensors+0x298>)
 800692e:	f006 f87f 	bl	800ca30 <iprintf>
 8006932:	e002      	b.n	800693a <Brett_IR_InitIrSensors+0x126>
		}
		else
		{
			printf("this shouldnt happen in GPIO_expander area\n\r");
 8006934:	485e      	ldr	r0, [pc, #376]	; (8006ab0 <Brett_IR_InitIrSensors+0x29c>)
 8006936:	f006 f87b 	bl	800ca30 <iprintf>
		}
		HAL_Delay(10);
 800693a:	200a      	movs	r0, #10
 800693c:	f000 fa42 	bl	8006dc4 <HAL_Delay>

		// general dev inits
		Dev->comms_type =  1;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
		Dev->I2cDevAddr = 0x52;
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	2252      	movs	r2, #82	; 0x52
 800694c:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
		Dev->I2cHandle = i2c;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		Dev->comms_speed_khz = 100;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	2264      	movs	r2, #100	; 0x64
 800695c:	f8a3 218a 	strh.w	r2, [r3, #394]	; 0x18a

		// i2c address setting
		newi2c = Dev->I2cDevAddr + (i + 1) * 2;
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	3301      	adds	r3, #1
 800696a:	b2db      	uxtb	r3, r3
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	b2db      	uxtb	r3, r3
 8006970:	4413      	add	r3, r2
 8006972:	76bb      	strb	r3, [r7, #26]
		status = VL53L0X_SetDeviceAddress(Dev, newi2c);
 8006974:	7ebb      	ldrb	r3, [r7, #26]
 8006976:	4619      	mov	r1, r3
 8006978:	6938      	ldr	r0, [r7, #16]
 800697a:	f7fa fdf7 	bl	800156c <VL53L0X_SetDeviceAddress>
 800697e:	4603      	mov	r3, r0
 8006980:	76fb      	strb	r3, [r7, #27]
		if (status != VL53L0X_ERROR_NONE)
 8006982:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <Brett_IR_InitIrSensors+0x180>
			return bretts_status = -3;
 800698a:	f06f 0302 	mvn.w	r3, #2
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	e070      	b.n	8006a76 <Brett_IR_InitIrSensors+0x262>
		Dev->I2cDevAddr = newi2c;
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	7eba      	ldrb	r2, [r7, #26]
 8006998:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180

		// base init for all IR devs
		status = VL53L0X_WaitDeviceBooted( Dev );
 800699c:	6938      	ldr	r0, [r7, #16]
 800699e:	f7fb f907 	bl	8001bb0 <VL53L0X_WaitDeviceBooted>
 80069a2:	4603      	mov	r3, r0
 80069a4:	76fb      	strb	r3, [r7, #27]
		status = VL53L0X_DataInit( Dev );
 80069a6:	6938      	ldr	r0, [r7, #16]
 80069a8:	f7fa fdf8 	bl	800159c <VL53L0X_DataInit>
 80069ac:	4603      	mov	r3, r0
 80069ae:	76fb      	strb	r3, [r7, #27]
		status = VL53L0X_StaticInit( Dev );
 80069b0:	6938      	ldr	r0, [r7, #16]
 80069b2:	f7fa ff79 	bl	80018a8 <VL53L0X_StaticInit>
 80069b6:	4603      	mov	r3, r0
 80069b8:	76fb      	strb	r3, [r7, #27]
		status = VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80069ba:	f107 0209 	add.w	r2, r7, #9
 80069be:	f107 030a 	add.w	r3, r7, #10
 80069c2:	4619      	mov	r1, r3
 80069c4:	6938      	ldr	r0, [r7, #16]
 80069c6:	f7fb fe39 	bl	800263c <VL53L0X_PerformRefCalibration>
 80069ca:	4603      	mov	r3, r0
 80069cc:	76fb      	strb	r3, [r7, #27]
		status = VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 80069ce:	f107 020b 	add.w	r2, r7, #11
 80069d2:	f107 030c 	add.w	r3, r7, #12
 80069d6:	4619      	mov	r1, r3
 80069d8:	6938      	ldr	r0, [r7, #16]
 80069da:	f7fc fb49 	bl	8003070 <VL53L0X_PerformRefSpadManagement>
 80069de:	4603      	mov	r3, r0
 80069e0:	76fb      	strb	r3, [r7, #27]
		status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80069e2:	2100      	movs	r1, #0
 80069e4:	6938      	ldr	r0, [r7, #16]
 80069e6:	f7fb f9a7 	bl	8001d38 <VL53L0X_SetDeviceMode>
 80069ea:	4603      	mov	r3, r0
 80069ec:	76fb      	strb	r3, [r7, #27]

		// we can break this out later
		// init for long ranging mode
		status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80069ee:	2201      	movs	r2, #1
 80069f0:	2100      	movs	r1, #0
 80069f2:	6938      	ldr	r0, [r7, #16]
 80069f4:	f7fb fc1c 	bl	8002230 <VL53L0X_SetLimitCheckEnable>
 80069f8:	4603      	mov	r3, r0
 80069fa:	76fb      	strb	r3, [r7, #27]
		status = VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80069fc:	2201      	movs	r2, #1
 80069fe:	2101      	movs	r1, #1
 8006a00:	6938      	ldr	r0, [r7, #16]
 8006a02:	f7fb fc15 	bl	8002230 <VL53L0X_SetLimitCheckEnable>
 8006a06:	4603      	mov	r3, r0
 8006a08:	76fb      	strb	r3, [r7, #27]
		status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8006a0a:	f641 1299 	movw	r2, #6553	; 0x1999
 8006a0e:	2101      	movs	r1, #1
 8006a10:	6938      	ldr	r0, [r7, #16]
 8006a12:	f7fb fcbd 	bl	8002390 <VL53L0X_SetLimitCheckValue>
 8006a16:	4603      	mov	r3, r0
 8006a18:	76fb      	strb	r3, [r7, #27]
		status = VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8006a1a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006a1e:	2100      	movs	r1, #0
 8006a20:	6938      	ldr	r0, [r7, #16]
 8006a22:	f7fb fcb5 	bl	8002390 <VL53L0X_SetLimitCheckValue>
 8006a26:	4603      	mov	r3, r0
 8006a28:	76fb      	strb	r3, [r7, #27]
		status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8006a2a:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8006a2e:	6938      	ldr	r0, [r7, #16]
 8006a30:	f7fb f9e0 	bl	8001df4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8006a34:	4603      	mov	r3, r0
 8006a36:	76fb      	strb	r3, [r7, #27]
		status = VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8006a38:	2212      	movs	r2, #18
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	6938      	ldr	r0, [r7, #16]
 8006a3e:	f7fb f9ff 	bl	8001e40 <VL53L0X_SetVcselPulsePeriod>
 8006a42:	4603      	mov	r3, r0
 8006a44:	76fb      	strb	r3, [r7, #27]
		status = VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8006a46:	220e      	movs	r2, #14
 8006a48:	2101      	movs	r1, #1
 8006a4a:	6938      	ldr	r0, [r7, #16]
 8006a4c:	f7fb f9f8 	bl	8001e40 <VL53L0X_SetVcselPulsePeriod>
 8006a50:	4603      	mov	r3, r0
 8006a52:	76fb      	strb	r3, [r7, #27]

		// one last status check
		if (status != VL53L0X_ERROR_NONE)
 8006a54:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d004      	beq.n	8006a66 <Brett_IR_InitIrSensors+0x252>
			return bretts_status = -4;
 8006a5c:	f06f 0303 	mvn.w	r3, #3
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	e007      	b.n	8006a76 <Brett_IR_InitIrSensors+0x262>
	for (int i = 0; i < AMOUNT_IRS; i++)
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	61fb      	str	r3, [r7, #28]
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2b07      	cmp	r3, #7
 8006a70:	f77f aede 	ble.w	8006830 <Brett_IR_InitIrSensors+0x1c>
	}
	return bretts_status;
 8006a74:	697b      	ldr	r3, [r7, #20]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3720      	adds	r7, #32
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	48001000 	.word	0x48001000
 8006a84:	0800ce10 	.word	0x0800ce10
 8006a88:	0800ce2c 	.word	0x0800ce2c
 8006a8c:	48001400 	.word	0x48001400
 8006a90:	0800ce48 	.word	0x0800ce48
 8006a94:	0800ce64 	.word	0x0800ce64
 8006a98:	48000c00 	.word	0x48000c00
 8006a9c:	0800ce80 	.word	0x0800ce80
 8006aa0:	0800ce9c 	.word	0x0800ce9c
 8006aa4:	48000800 	.word	0x48000800
 8006aa8:	0800ceb8 	.word	0x0800ceb8
 8006aac:	0800ced4 	.word	0x0800ced4
 8006ab0:	0800cef0 	.word	0x0800cef0

08006ab4 <Brett_GetTime>:
#include <inttypes.h>
#include "stm32L4xx_hal.h"
#include "clock_rtc.h"

void Brett_GetTime(RTC_HandleTypeDef *hrtc, Brett_Timer *timeStruct)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
	// get time
	HAL_RTC_GetTime(hrtc, &timeStruct->sTime, RTC_FORMAT_BIN);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f003 f96f 	bl	8009da8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &timeStruct->sDate, RTC_FORMAT_BIN);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	3314      	adds	r3, #20
 8006ace:	2200      	movs	r2, #0
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f003 f9c4 	bl	8009e60 <HAL_RTC_GetDate>

	// check that the registers are updated correctly
	if (timeStruct->sTime.SubSeconds < timeStruct->lastSub && timeStruct->lastSec == timeStruct->sTime.Seconds)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d230      	bcs.n	8006b46 <Brett_GetTime+0x92>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	7f1a      	ldrb	r2, [r3, #28]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	789b      	ldrb	r3, [r3, #2]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d12a      	bne.n	8006b46 <Brett_GetTime+0x92>
		timeStruct->time_in_ms = ((timeStruct->sTime.Minutes * 60) + timeStruct->sTime.Seconds + 1 + ((float)timeStruct->sTime.SubSeconds / (float)timeStruct->sTime.SecondFraction)) * 1000;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	785b      	ldrb	r3, [r3, #1]
 8006af4:	461a      	mov	r2, r3
 8006af6:	4613      	mov	r3, r2
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	1a9b      	subs	r3, r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	461a      	mov	r2, r3
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	789b      	ldrb	r3, [r3, #2]
 8006b04:	4413      	add	r3, r2
 8006b06:	3301      	adds	r3, #1
 8006b08:	ee07 3a90 	vmov	s15, r3
 8006b0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	ee07 3a90 	vmov	s15, r3
 8006b18:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	ee07 3a90 	vmov	s15, r3
 8006b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b28:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b30:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006bb0 <Brett_GetTime+0xfc>
 8006b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b3c:	ee17 2a90 	vmov	r2, s15
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	621a      	str	r2, [r3, #32]
 8006b44:	e028      	b.n	8006b98 <Brett_GetTime+0xe4>
	else
		timeStruct->time_in_ms = ((timeStruct->sTime.Minutes * 60) + timeStruct->sTime.Seconds + ((float)timeStruct->sTime.SubSeconds / (float)timeStruct->sTime.SecondFraction)) * 1000;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	011b      	lsls	r3, r3, #4
 8006b50:	1a9b      	subs	r3, r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	461a      	mov	r2, r3
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	789b      	ldrb	r3, [r3, #2]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	ee07 3a90 	vmov	s15, r3
 8006b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	ee07 3a90 	vmov	s15, r3
 8006b6c:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	ee07 3a90 	vmov	s15, r3
 8006b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b7c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8006b80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b84:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8006bb0 <Brett_GetTime+0xfc>
 8006b88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b90:	ee17 2a90 	vmov	r2, s15
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	621a      	str	r2, [r3, #32]

	// save data for next getTime call
	timeStruct->lastSub = timeStruct->sTime.SubSeconds;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	619a      	str	r2, [r3, #24]
	timeStruct->lastSec = timeStruct->sTime.Seconds;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	789a      	ldrb	r2, [r3, #2]
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	771a      	strb	r2, [r3, #28]
}
 8006ba8:	bf00      	nop
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	447a0000 	.word	0x447a0000

08006bb4 <SetMotors>:
	HAL_Delay(50);
	SetMotors(MOTOR_STOP);
}

void SetMotors(int i)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b03      	cmp	r3, #3
 8006bc0:	d816      	bhi.n	8006bf0 <SetMotors+0x3c>
 8006bc2:	a201      	add	r2, pc, #4	; (adr r2, 8006bc8 <SetMotors+0x14>)
 8006bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc8:	08006bd9 	.word	0x08006bd9
 8006bcc:	08006bdf 	.word	0x08006bdf
 8006bd0:	08006be5 	.word	0x08006be5
 8006bd4:	08006beb 	.word	0x08006beb
	int mask;
	switch(i)
	{
	case MOTOR_START:
		mask = MOVE_START;
 8006bd8:	23a5      	movs	r3, #165	; 0xa5
 8006bda:	61fb      	str	r3, [r7, #28]
		break;
 8006bdc:	e008      	b.n	8006bf0 <SetMotors+0x3c>
	case MOTOR_STOP:
		mask = MOVE_STOP;
 8006bde:	2300      	movs	r3, #0
 8006be0:	61fb      	str	r3, [r7, #28]
		break;
 8006be2:	e005      	b.n	8006bf0 <SetMotors+0x3c>
	case MOTOR_LEFT:
		mask = MOVE_LEFT;
 8006be4:	23aa      	movs	r3, #170	; 0xaa
 8006be6:	61fb      	str	r3, [r7, #28]
		break;
 8006be8:	e002      	b.n	8006bf0 <SetMotors+0x3c>
	case MOTOR_RIGHT:
		mask = MOVE_RIGHT;
 8006bea:	2355      	movs	r3, #85	; 0x55
 8006bec:	61fb      	str	r3, [r7, #28]
		break;
 8006bee:	bf00      	nop
	}

	for (int i = 0; i < 8; i++)
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	e065      	b.n	8006cc2 <SetMotors+0x10e>
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	2b07      	cmp	r3, #7
 8006bfa:	d843      	bhi.n	8006c84 <SetMotors+0xd0>
 8006bfc:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <SetMotors+0x50>)
 8006bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c02:	bf00      	nop
 8006c04:	08006c25 	.word	0x08006c25
 8006c08:	08006c31 	.word	0x08006c31
 8006c0c:	08006c3d 	.word	0x08006c3d
 8006c10:	08006c49 	.word	0x08006c49
 8006c14:	08006c55 	.word	0x08006c55
 8006c18:	08006c61 	.word	0x08006c61
 8006c1c:	08006c6d 	.word	0x08006c6d
 8006c20:	08006c79 	.word	0x08006c79
		GPIO_TypeDef *port;
		int pin;
		switch(i)
		{
		case 0:
			port = GPIO_MOTOR0A_PORT;
 8006c24:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c28:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR0A_PIN;
 8006c2a:	2304      	movs	r3, #4
 8006c2c:	613b      	str	r3, [r7, #16]
			break;
 8006c2e:	e029      	b.n	8006c84 <SetMotors+0xd0>
		case 1:
			port = GPIO_MOTOR0B_PORT;
 8006c30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c34:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR0B_PIN;
 8006c36:	2308      	movs	r3, #8
 8006c38:	613b      	str	r3, [r7, #16]
			break;
 8006c3a:	e023      	b.n	8006c84 <SetMotors+0xd0>
		case 2:
			port = GPIO_MOTOR1A_PORT;
 8006c3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c40:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR1A_PIN;
 8006c42:	2310      	movs	r3, #16
 8006c44:	613b      	str	r3, [r7, #16]
			break;
 8006c46:	e01d      	b.n	8006c84 <SetMotors+0xd0>
		case 3:
			port = GPIO_MOTOR1B_PORT;
 8006c48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c4c:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR1B_PIN;
 8006c4e:	2320      	movs	r3, #32
 8006c50:	613b      	str	r3, [r7, #16]
			break;
 8006c52:	e017      	b.n	8006c84 <SetMotors+0xd0>
		case 4:
			port = GPIO_MOTOR2A_PORT;
 8006c54:	4b20      	ldr	r3, [pc, #128]	; (8006cd8 <SetMotors+0x124>)
 8006c56:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR2A_PIN;
 8006c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c5c:	613b      	str	r3, [r7, #16]
			break;
 8006c5e:	e011      	b.n	8006c84 <SetMotors+0xd0>
		case 5:
			port = GPIO_MOTOR2B_PORT;
 8006c60:	4b1d      	ldr	r3, [pc, #116]	; (8006cd8 <SetMotors+0x124>)
 8006c62:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR2B_PIN;
 8006c64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c68:	613b      	str	r3, [r7, #16]
			break;
 8006c6a:	e00b      	b.n	8006c84 <SetMotors+0xd0>
		case 6:
			port = GPIO_MOTOR3A_PORT;
 8006c6c:	4b1a      	ldr	r3, [pc, #104]	; (8006cd8 <SetMotors+0x124>)
 8006c6e:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR3A_PIN;
 8006c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c74:	613b      	str	r3, [r7, #16]
			break;
 8006c76:	e005      	b.n	8006c84 <SetMotors+0xd0>
		case 7:
			port = GPIO_MOTOR3B_PORT;
 8006c78:	4b17      	ldr	r3, [pc, #92]	; (8006cd8 <SetMotors+0x124>)
 8006c7a:	617b      	str	r3, [r7, #20]
			pin = GPIO_MOTOR3B_PIN;
 8006c7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c80:	613b      	str	r3, [r7, #16]
			break;
 8006c82:	bf00      	nop
		}

		int temp = mask && 1;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	bf14      	ite	ne
 8006c8a:	2301      	movne	r3, #1
 8006c8c:	2300      	moveq	r3, #0
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	60fb      	str	r3, [r7, #12]
		if (temp > 0)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	dd07      	ble.n	8006ca8 <SetMotors+0xf4>
			HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6978      	ldr	r0, [r7, #20]
 8006ca2:	f000 fb2b 	bl	80072fc <HAL_GPIO_WritePin>
 8006ca6:	e006      	b.n	8006cb6 <SetMotors+0x102>
		else
			HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	2200      	movs	r2, #0
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6978      	ldr	r0, [r7, #20]
 8006cb2:	f000 fb23 	bl	80072fc <HAL_GPIO_WritePin>
		mask = mask >> 1;
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	105b      	asrs	r3, r3, #1
 8006cba:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 8; i++)
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	61bb      	str	r3, [r7, #24]
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	2b07      	cmp	r3, #7
 8006cc6:	dd96      	ble.n	8006bf6 <SetMotors+0x42>
	}

	HAL_Delay(20);
 8006cc8:	2014      	movs	r0, #20
 8006cca:	f000 f87b 	bl	8006dc4 <HAL_Delay>
}
 8006cce:	bf00      	nop
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	48001000 	.word	0x48001000

08006cdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ce6:	2003      	movs	r0, #3
 8006ce8:	f000 f942 	bl	8006f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006cec:	200f      	movs	r0, #15
 8006cee:	f000 f80d 	bl	8006d0c <HAL_InitTick>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	71fb      	strb	r3, [r7, #7]
 8006cfc:	e001      	b.n	8006d02 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006cfe:	f7fa f8e3 	bl	8000ec8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006d02:	79fb      	ldrb	r3, [r7, #7]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006d18:	4b17      	ldr	r3, [pc, #92]	; (8006d78 <HAL_InitTick+0x6c>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d023      	beq.n	8006d68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006d20:	4b16      	ldr	r3, [pc, #88]	; (8006d7c <HAL_InitTick+0x70>)
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	4b14      	ldr	r3, [pc, #80]	; (8006d78 <HAL_InitTick+0x6c>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 f941 	bl	8006fbe <HAL_SYSTICK_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10f      	bne.n	8006d62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b0f      	cmp	r3, #15
 8006d46:	d809      	bhi.n	8006d5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d48:	2200      	movs	r2, #0
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	f000 f919 	bl	8006f86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006d54:	4a0a      	ldr	r2, [pc, #40]	; (8006d80 <HAL_InitTick+0x74>)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	e007      	b.n	8006d6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	73fb      	strb	r3, [r7, #15]
 8006d60:	e004      	b.n	8006d6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	73fb      	strb	r3, [r7, #15]
 8006d66:	e001      	b.n	8006d6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	200002c8 	.word	0x200002c8
 8006d7c:	20000004 	.word	0x20000004
 8006d80:	200002c4 	.word	0x200002c4

08006d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006d88:	4b06      	ldr	r3, [pc, #24]	; (8006da4 <HAL_IncTick+0x20>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <HAL_IncTick+0x24>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4413      	add	r3, r2
 8006d94:	4a04      	ldr	r2, [pc, #16]	; (8006da8 <HAL_IncTick+0x24>)
 8006d96:	6013      	str	r3, [r2, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	200002c8 	.word	0x200002c8
 8006da8:	2000160c 	.word	0x2000160c

08006dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
  return uwTick;
 8006db0:	4b03      	ldr	r3, [pc, #12]	; (8006dc0 <HAL_GetTick+0x14>)
 8006db2:	681b      	ldr	r3, [r3, #0]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	2000160c 	.word	0x2000160c

08006dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006dcc:	f7ff ffee 	bl	8006dac <HAL_GetTick>
 8006dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ddc:	d005      	beq.n	8006dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006dde:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <HAL_Delay+0x44>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006dea:	bf00      	nop
 8006dec:	f7ff ffde 	bl	8006dac <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d8f7      	bhi.n	8006dec <HAL_Delay+0x28>
  {
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	200002c8 	.word	0x200002c8

08006e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <__NVIC_SetPriorityGrouping+0x44>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e28:	4013      	ands	r3, r2
 8006e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e3e:	4a04      	ldr	r2, [pc, #16]	; (8006e50 <__NVIC_SetPriorityGrouping+0x44>)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	60d3      	str	r3, [r2, #12]
}
 8006e44:	bf00      	nop
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	e000ed00 	.word	0xe000ed00

08006e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e58:	4b04      	ldr	r3, [pc, #16]	; (8006e6c <__NVIC_GetPriorityGrouping+0x18>)
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	0a1b      	lsrs	r3, r3, #8
 8006e5e:	f003 0307 	and.w	r3, r3, #7
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	e000ed00 	.word	0xe000ed00

08006e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	4603      	mov	r3, r0
 8006e78:	6039      	str	r1, [r7, #0]
 8006e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	db0a      	blt.n	8006e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	490c      	ldr	r1, [pc, #48]	; (8006ebc <__NVIC_SetPriority+0x4c>)
 8006e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e8e:	0112      	lsls	r2, r2, #4
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	440b      	add	r3, r1
 8006e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e98:	e00a      	b.n	8006eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	4908      	ldr	r1, [pc, #32]	; (8006ec0 <__NVIC_SetPriority+0x50>)
 8006ea0:	79fb      	ldrb	r3, [r7, #7]
 8006ea2:	f003 030f 	and.w	r3, r3, #15
 8006ea6:	3b04      	subs	r3, #4
 8006ea8:	0112      	lsls	r2, r2, #4
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	440b      	add	r3, r1
 8006eae:	761a      	strb	r2, [r3, #24]
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	e000e100 	.word	0xe000e100
 8006ec0:	e000ed00 	.word	0xe000ed00

08006ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b089      	sub	sp, #36	; 0x24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f003 0307 	and.w	r3, r3, #7
 8006ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	f1c3 0307 	rsb	r3, r3, #7
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	bf28      	it	cs
 8006ee2:	2304      	movcs	r3, #4
 8006ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	2b06      	cmp	r3, #6
 8006eec:	d902      	bls.n	8006ef4 <NVIC_EncodePriority+0x30>
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	3b03      	subs	r3, #3
 8006ef2:	e000      	b.n	8006ef6 <NVIC_EncodePriority+0x32>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	fa02 f303 	lsl.w	r3, r2, r3
 8006f02:	43da      	mvns	r2, r3
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	401a      	ands	r2, r3
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	fa01 f303 	lsl.w	r3, r1, r3
 8006f16:	43d9      	mvns	r1, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f1c:	4313      	orrs	r3, r2
         );
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3724      	adds	r7, #36	; 0x24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
	...

08006f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f3c:	d301      	bcc.n	8006f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e00f      	b.n	8006f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f42:	4a0a      	ldr	r2, [pc, #40]	; (8006f6c <SysTick_Config+0x40>)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f4a:	210f      	movs	r1, #15
 8006f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f50:	f7ff ff8e 	bl	8006e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f54:	4b05      	ldr	r3, [pc, #20]	; (8006f6c <SysTick_Config+0x40>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f5a:	4b04      	ldr	r3, [pc, #16]	; (8006f6c <SysTick_Config+0x40>)
 8006f5c:	2207      	movs	r2, #7
 8006f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	e000e010 	.word	0xe000e010

08006f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff ff47 	bl	8006e0c <__NVIC_SetPriorityGrouping>
}
 8006f7e:	bf00      	nop
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b086      	sub	sp, #24
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	607a      	str	r2, [r7, #4]
 8006f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006f98:	f7ff ff5c 	bl	8006e54 <__NVIC_GetPriorityGrouping>
 8006f9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	6978      	ldr	r0, [r7, #20]
 8006fa4:	f7ff ff8e 	bl	8006ec4 <NVIC_EncodePriority>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff ff5d 	bl	8006e70 <__NVIC_SetPriority>
}
 8006fb6:	bf00      	nop
 8006fb8:	3718      	adds	r7, #24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f7ff ffb0 	bl	8006f2c <SysTick_Config>
 8006fcc:	4603      	mov	r3, r0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006fe6:	e166      	b.n	80072b6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	2101      	movs	r1, #1
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 8158 	beq.w	80072b0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	2b01      	cmp	r3, #1
 800700a:	d005      	beq.n	8007018 <HAL_GPIO_Init+0x40>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	f003 0303 	and.w	r3, r3, #3
 8007014:	2b02      	cmp	r3, #2
 8007016:	d130      	bne.n	800707a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	2203      	movs	r2, #3
 8007024:	fa02 f303 	lsl.w	r3, r2, r3
 8007028:	43db      	mvns	r3, r3
 800702a:	693a      	ldr	r2, [r7, #16]
 800702c:	4013      	ands	r3, r2
 800702e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	fa02 f303 	lsl.w	r3, r2, r3
 800703c:	693a      	ldr	r2, [r7, #16]
 800703e:	4313      	orrs	r3, r2
 8007040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800704e:	2201      	movs	r2, #1
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	43db      	mvns	r3, r3
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	4013      	ands	r3, r2
 800705c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	091b      	lsrs	r3, r3, #4
 8007064:	f003 0201 	and.w	r2, r3, #1
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	fa02 f303 	lsl.w	r3, r2, r3
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f003 0303 	and.w	r3, r3, #3
 8007082:	2b03      	cmp	r3, #3
 8007084:	d017      	beq.n	80070b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	2203      	movs	r2, #3
 8007092:	fa02 f303 	lsl.w	r3, r2, r3
 8007096:	43db      	mvns	r3, r3
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4013      	ands	r3, r2
 800709c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	fa02 f303 	lsl.w	r3, r2, r3
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f003 0303 	and.w	r3, r3, #3
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d123      	bne.n	800710a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	08da      	lsrs	r2, r3, #3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	3208      	adds	r2, #8
 80070ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	220f      	movs	r2, #15
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	43db      	mvns	r3, r3
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	4013      	ands	r3, r2
 80070e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	fa02 f303 	lsl.w	r3, r2, r3
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	08da      	lsrs	r2, r3, #3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3208      	adds	r2, #8
 8007104:	6939      	ldr	r1, [r7, #16]
 8007106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	2203      	movs	r2, #3
 8007116:	fa02 f303 	lsl.w	r3, r2, r3
 800711a:	43db      	mvns	r3, r3
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	4013      	ands	r3, r2
 8007120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	f003 0203 	and.w	r2, r3, #3
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	fa02 f303 	lsl.w	r3, r2, r3
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 80b2 	beq.w	80072b0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800714c:	4b61      	ldr	r3, [pc, #388]	; (80072d4 <HAL_GPIO_Init+0x2fc>)
 800714e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007150:	4a60      	ldr	r2, [pc, #384]	; (80072d4 <HAL_GPIO_Init+0x2fc>)
 8007152:	f043 0301 	orr.w	r3, r3, #1
 8007156:	6613      	str	r3, [r2, #96]	; 0x60
 8007158:	4b5e      	ldr	r3, [pc, #376]	; (80072d4 <HAL_GPIO_Init+0x2fc>)
 800715a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	60bb      	str	r3, [r7, #8]
 8007162:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007164:	4a5c      	ldr	r2, [pc, #368]	; (80072d8 <HAL_GPIO_Init+0x300>)
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	089b      	lsrs	r3, r3, #2
 800716a:	3302      	adds	r3, #2
 800716c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007170:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f003 0303 	and.w	r3, r3, #3
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	220f      	movs	r2, #15
 800717c:	fa02 f303 	lsl.w	r3, r2, r3
 8007180:	43db      	mvns	r3, r3
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	4013      	ands	r3, r2
 8007186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800718e:	d02b      	beq.n	80071e8 <HAL_GPIO_Init+0x210>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a52      	ldr	r2, [pc, #328]	; (80072dc <HAL_GPIO_Init+0x304>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d025      	beq.n	80071e4 <HAL_GPIO_Init+0x20c>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a51      	ldr	r2, [pc, #324]	; (80072e0 <HAL_GPIO_Init+0x308>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d01f      	beq.n	80071e0 <HAL_GPIO_Init+0x208>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a50      	ldr	r2, [pc, #320]	; (80072e4 <HAL_GPIO_Init+0x30c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d019      	beq.n	80071dc <HAL_GPIO_Init+0x204>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a4f      	ldr	r2, [pc, #316]	; (80072e8 <HAL_GPIO_Init+0x310>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d013      	beq.n	80071d8 <HAL_GPIO_Init+0x200>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a4e      	ldr	r2, [pc, #312]	; (80072ec <HAL_GPIO_Init+0x314>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00d      	beq.n	80071d4 <HAL_GPIO_Init+0x1fc>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a4d      	ldr	r2, [pc, #308]	; (80072f0 <HAL_GPIO_Init+0x318>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d007      	beq.n	80071d0 <HAL_GPIO_Init+0x1f8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a4c      	ldr	r2, [pc, #304]	; (80072f4 <HAL_GPIO_Init+0x31c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d101      	bne.n	80071cc <HAL_GPIO_Init+0x1f4>
 80071c8:	2307      	movs	r3, #7
 80071ca:	e00e      	b.n	80071ea <HAL_GPIO_Init+0x212>
 80071cc:	2308      	movs	r3, #8
 80071ce:	e00c      	b.n	80071ea <HAL_GPIO_Init+0x212>
 80071d0:	2306      	movs	r3, #6
 80071d2:	e00a      	b.n	80071ea <HAL_GPIO_Init+0x212>
 80071d4:	2305      	movs	r3, #5
 80071d6:	e008      	b.n	80071ea <HAL_GPIO_Init+0x212>
 80071d8:	2304      	movs	r3, #4
 80071da:	e006      	b.n	80071ea <HAL_GPIO_Init+0x212>
 80071dc:	2303      	movs	r3, #3
 80071de:	e004      	b.n	80071ea <HAL_GPIO_Init+0x212>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e002      	b.n	80071ea <HAL_GPIO_Init+0x212>
 80071e4:	2301      	movs	r3, #1
 80071e6:	e000      	b.n	80071ea <HAL_GPIO_Init+0x212>
 80071e8:	2300      	movs	r3, #0
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	f002 0203 	and.w	r2, r2, #3
 80071f0:	0092      	lsls	r2, r2, #2
 80071f2:	4093      	lsls	r3, r2
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80071fa:	4937      	ldr	r1, [pc, #220]	; (80072d8 <HAL_GPIO_Init+0x300>)
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	089b      	lsrs	r3, r3, #2
 8007200:	3302      	adds	r3, #2
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007208:	4b3b      	ldr	r3, [pc, #236]	; (80072f8 <HAL_GPIO_Init+0x320>)
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	43db      	mvns	r3, r3
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4013      	ands	r3, r2
 8007216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800722c:	4a32      	ldr	r2, [pc, #200]	; (80072f8 <HAL_GPIO_Init+0x320>)
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007232:	4b31      	ldr	r3, [pc, #196]	; (80072f8 <HAL_GPIO_Init+0x320>)
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	43db      	mvns	r3, r3
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4013      	ands	r3, r2
 8007240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007256:	4a28      	ldr	r2, [pc, #160]	; (80072f8 <HAL_GPIO_Init+0x320>)
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800725c:	4b26      	ldr	r3, [pc, #152]	; (80072f8 <HAL_GPIO_Init+0x320>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	43db      	mvns	r3, r3
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4013      	ands	r3, r2
 800726a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4313      	orrs	r3, r2
 800727e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007280:	4a1d      	ldr	r2, [pc, #116]	; (80072f8 <HAL_GPIO_Init+0x320>)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007286:	4b1c      	ldr	r3, [pc, #112]	; (80072f8 <HAL_GPIO_Init+0x320>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	43db      	mvns	r3, r3
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4013      	ands	r3, r2
 8007294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80072aa:	4a13      	ldr	r2, [pc, #76]	; (80072f8 <HAL_GPIO_Init+0x320>)
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	3301      	adds	r3, #1
 80072b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	fa22 f303 	lsr.w	r3, r2, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f47f ae91 	bne.w	8006fe8 <HAL_GPIO_Init+0x10>
  }
}
 80072c6:	bf00      	nop
 80072c8:	bf00      	nop
 80072ca:	371c      	adds	r7, #28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr
 80072d4:	40021000 	.word	0x40021000
 80072d8:	40010000 	.word	0x40010000
 80072dc:	48000400 	.word	0x48000400
 80072e0:	48000800 	.word	0x48000800
 80072e4:	48000c00 	.word	0x48000c00
 80072e8:	48001000 	.word	0x48001000
 80072ec:	48001400 	.word	0x48001400
 80072f0:	48001800 	.word	0x48001800
 80072f4:	48001c00 	.word	0x48001c00
 80072f8:	40010400 	.word	0x40010400

080072fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	807b      	strh	r3, [r7, #2]
 8007308:	4613      	mov	r3, r2
 800730a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800730c:	787b      	ldrb	r3, [r7, #1]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007312:	887a      	ldrh	r2, [r7, #2]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007318:	e002      	b.n	8007320 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800731a:	887a      	ldrh	r2, [r7, #2]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e081      	b.n	8007442 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d106      	bne.n	8007358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7f9 fddc 	bl	8000f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2224      	movs	r2, #36	; 0x24
 800735c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0201 	bic.w	r2, r2, #1
 800736e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800737c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800738c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d107      	bne.n	80073a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073a2:	609a      	str	r2, [r3, #8]
 80073a4:	e006      	b.n	80073b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80073b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d104      	bne.n	80073c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	6812      	ldr	r2, [r2, #0]
 80073d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80073d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	691a      	ldr	r2, [r3, #16]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	69d9      	ldr	r1, [r3, #28]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a1a      	ldr	r2, [r3, #32]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f042 0201 	orr.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2220      	movs	r2, #32
 800742e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
	...

0800744c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b088      	sub	sp, #32
 8007450:	af02      	add	r7, sp, #8
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	607a      	str	r2, [r7, #4]
 8007456:	461a      	mov	r2, r3
 8007458:	460b      	mov	r3, r1
 800745a:	817b      	strh	r3, [r7, #10]
 800745c:	4613      	mov	r3, r2
 800745e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b20      	cmp	r3, #32
 800746a:	f040 80da 	bne.w	8007622 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007474:	2b01      	cmp	r3, #1
 8007476:	d101      	bne.n	800747c <HAL_I2C_Master_Transmit+0x30>
 8007478:	2302      	movs	r3, #2
 800747a:	e0d3      	b.n	8007624 <HAL_I2C_Master_Transmit+0x1d8>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007484:	f7ff fc92 	bl	8006dac <HAL_GetTick>
 8007488:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	2319      	movs	r3, #25
 8007490:	2201      	movs	r2, #1
 8007492:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 f9e6 	bl	8007868 <I2C_WaitOnFlagUntilTimeout>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e0be      	b.n	8007624 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2221      	movs	r2, #33	; 0x21
 80074aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2210      	movs	r2, #16
 80074b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	893a      	ldrh	r2, [r7, #8]
 80074c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	2bff      	cmp	r3, #255	; 0xff
 80074d6:	d90e      	bls.n	80074f6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	22ff      	movs	r2, #255	; 0xff
 80074dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	8979      	ldrh	r1, [r7, #10]
 80074e6:	4b51      	ldr	r3, [pc, #324]	; (800762c <HAL_I2C_Master_Transmit+0x1e0>)
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 fbdc 	bl	8007cac <I2C_TransferConfig>
 80074f4:	e06c      	b.n	80075d0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007504:	b2da      	uxtb	r2, r3
 8007506:	8979      	ldrh	r1, [r7, #10]
 8007508:	4b48      	ldr	r3, [pc, #288]	; (800762c <HAL_I2C_Master_Transmit+0x1e0>)
 800750a:	9300      	str	r3, [sp, #0]
 800750c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 fbcb 	bl	8007cac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007516:	e05b      	b.n	80075d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	6a39      	ldr	r1, [r7, #32]
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f000 f9e3 	bl	80078e8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e07b      	b.n	8007624 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	781a      	ldrb	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	1c5a      	adds	r2, r3, #1
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d034      	beq.n	80075d0 <HAL_I2C_Master_Transmit+0x184>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756a:	2b00      	cmp	r3, #0
 800756c:	d130      	bne.n	80075d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	2200      	movs	r2, #0
 8007576:	2180      	movs	r1, #128	; 0x80
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f975 	bl	8007868 <I2C_WaitOnFlagUntilTimeout>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e04d      	b.n	8007624 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758c:	b29b      	uxth	r3, r3
 800758e:	2bff      	cmp	r3, #255	; 0xff
 8007590:	d90e      	bls.n	80075b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	22ff      	movs	r2, #255	; 0xff
 8007596:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800759c:	b2da      	uxtb	r2, r3
 800759e:	8979      	ldrh	r1, [r7, #10]
 80075a0:	2300      	movs	r3, #0
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fb7f 	bl	8007cac <I2C_TransferConfig>
 80075ae:	e00f      	b.n	80075d0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	8979      	ldrh	r1, [r7, #10]
 80075c2:	2300      	movs	r3, #0
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 fb6e 	bl	8007cac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d19e      	bne.n	8007518 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	6a39      	ldr	r1, [r7, #32]
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 f9c2 	bl	8007968 <I2C_WaitOnSTOPFlagUntilTimeout>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e01a      	b.n	8007624 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2220      	movs	r2, #32
 80075f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6859      	ldr	r1, [r3, #4]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <HAL_I2C_Master_Transmit+0x1e4>)
 8007602:	400b      	ands	r3, r1
 8007604:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2220      	movs	r2, #32
 800760a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800761e:	2300      	movs	r3, #0
 8007620:	e000      	b.n	8007624 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8007622:	2302      	movs	r3, #2
  }
}
 8007624:	4618      	mov	r0, r3
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	80002000 	.word	0x80002000
 8007630:	fe00e800 	.word	0xfe00e800

08007634 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af02      	add	r7, sp, #8
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	607a      	str	r2, [r7, #4]
 800763e:	461a      	mov	r2, r3
 8007640:	460b      	mov	r3, r1
 8007642:	817b      	strh	r3, [r7, #10]
 8007644:	4613      	mov	r3, r2
 8007646:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b20      	cmp	r3, #32
 8007652:	f040 80db 	bne.w	800780c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800765c:	2b01      	cmp	r3, #1
 800765e:	d101      	bne.n	8007664 <HAL_I2C_Master_Receive+0x30>
 8007660:	2302      	movs	r3, #2
 8007662:	e0d4      	b.n	800780e <HAL_I2C_Master_Receive+0x1da>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2201      	movs	r2, #1
 8007668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800766c:	f7ff fb9e 	bl	8006dac <HAL_GetTick>
 8007670:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	2319      	movs	r3, #25
 8007678:	2201      	movs	r2, #1
 800767a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 f8f2 	bl	8007868 <I2C_WaitOnFlagUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e0bf      	b.n	800780e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2222      	movs	r2, #34	; 0x22
 8007692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2210      	movs	r2, #16
 800769a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	893a      	ldrh	r2, [r7, #8]
 80076ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	2bff      	cmp	r3, #255	; 0xff
 80076be:	d90e      	bls.n	80076de <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	22ff      	movs	r2, #255	; 0xff
 80076c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	8979      	ldrh	r1, [r7, #10]
 80076ce:	4b52      	ldr	r3, [pc, #328]	; (8007818 <HAL_I2C_Master_Receive+0x1e4>)
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fae8 	bl	8007cac <I2C_TransferConfig>
 80076dc:	e06d      	b.n	80077ba <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	8979      	ldrh	r1, [r7, #10]
 80076f0:	4b49      	ldr	r3, [pc, #292]	; (8007818 <HAL_I2C_Master_Receive+0x1e4>)
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 fad7 	bl	8007cac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80076fe:	e05c      	b.n	80077ba <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	6a39      	ldr	r1, [r7, #32]
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 f96b 	bl	80079e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e07c      	b.n	800780e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29a      	uxth	r2, r3
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800774a:	b29b      	uxth	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d034      	beq.n	80077ba <HAL_I2C_Master_Receive+0x186>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007754:	2b00      	cmp	r3, #0
 8007756:	d130      	bne.n	80077ba <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	2200      	movs	r2, #0
 8007760:	2180      	movs	r1, #128	; 0x80
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f000 f880 	bl	8007868 <I2C_WaitOnFlagUntilTimeout>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e04d      	b.n	800780e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007776:	b29b      	uxth	r3, r3
 8007778:	2bff      	cmp	r3, #255	; 0xff
 800777a:	d90e      	bls.n	800779a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	22ff      	movs	r2, #255	; 0xff
 8007780:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007786:	b2da      	uxtb	r2, r3
 8007788:	8979      	ldrh	r1, [r7, #10]
 800778a:	2300      	movs	r3, #0
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 fa8a 	bl	8007cac <I2C_TransferConfig>
 8007798:	e00f      	b.n	80077ba <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	8979      	ldrh	r1, [r7, #10]
 80077ac:	2300      	movs	r3, #0
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f000 fa79 	bl	8007cac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d19d      	bne.n	8007700 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	6a39      	ldr	r1, [r7, #32]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f8cd 	bl	8007968 <I2C_WaitOnSTOPFlagUntilTimeout>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e01a      	b.n	800780e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2220      	movs	r2, #32
 80077de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6859      	ldr	r1, [r3, #4]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	4b0c      	ldr	r3, [pc, #48]	; (800781c <HAL_I2C_Master_Receive+0x1e8>)
 80077ec:	400b      	ands	r3, r1
 80077ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	e000      	b.n	800780e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800780c:	2302      	movs	r3, #2
  }
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	80002400 	.word	0x80002400
 800781c:	fe00e800 	.word	0xfe00e800

08007820 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	f003 0302 	and.w	r3, r3, #2
 8007832:	2b02      	cmp	r3, #2
 8007834:	d103      	bne.n	800783e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2200      	movs	r2, #0
 800783c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b01      	cmp	r3, #1
 800784a:	d007      	beq.n	800785c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	699a      	ldr	r2, [r3, #24]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0201 	orr.w	r2, r2, #1
 800785a:	619a      	str	r2, [r3, #24]
  }
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	4613      	mov	r3, r2
 8007876:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007878:	e022      	b.n	80078c0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007880:	d01e      	beq.n	80078c0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007882:	f7ff fa93 	bl	8006dac <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	429a      	cmp	r2, r3
 8007890:	d302      	bcc.n	8007898 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d113      	bne.n	80078c0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789c:	f043 0220 	orr.w	r2, r3, #32
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2220      	movs	r2, #32
 80078a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e00f      	b.n	80078e0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	4013      	ands	r3, r2
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	bf0c      	ite	eq
 80078d0:	2301      	moveq	r3, #1
 80078d2:	2300      	movne	r3, #0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d0cd      	beq.n	800787a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078f4:	e02c      	b.n	8007950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 f8ea 	bl	8007ad4 <I2C_IsErrorOccurred>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e02a      	b.n	8007960 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007910:	d01e      	beq.n	8007950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007912:	f7ff fa4b 	bl	8006dac <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	429a      	cmp	r2, r3
 8007920:	d302      	bcc.n	8007928 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d113      	bne.n	8007950 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792c:	f043 0220 	orr.w	r2, r3, #32
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2220      	movs	r2, #32
 8007938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e007      	b.n	8007960 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	f003 0302 	and.w	r3, r3, #2
 800795a:	2b02      	cmp	r3, #2
 800795c:	d1cb      	bne.n	80078f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007974:	e028      	b.n	80079c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	68b9      	ldr	r1, [r7, #8]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f8aa 	bl	8007ad4 <I2C_IsErrorOccurred>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e026      	b.n	80079d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800798a:	f7ff fa0f 	bl	8006dac <HAL_GetTick>
 800798e:	4602      	mov	r2, r0
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	429a      	cmp	r2, r3
 8007998:	d302      	bcc.n	80079a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d113      	bne.n	80079c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a4:	f043 0220 	orr.w	r2, r3, #32
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e007      	b.n	80079d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	f003 0320 	and.w	r3, r3, #32
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	d1cf      	bne.n	8007976 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80079ec:	e064      	b.n	8007ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	68b9      	ldr	r1, [r7, #8]
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 f86e 	bl	8007ad4 <I2C_IsErrorOccurred>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e062      	b.n	8007ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	f003 0320 	and.w	r3, r3, #32
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d138      	bne.n	8007a82 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	f003 0304 	and.w	r3, r3, #4
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	d105      	bne.n	8007a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	e04e      	b.n	8007ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	f003 0310 	and.w	r3, r3, #16
 8007a34:	2b10      	cmp	r3, #16
 8007a36:	d107      	bne.n	8007a48 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2210      	movs	r2, #16
 8007a3e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2204      	movs	r2, #4
 8007a44:	645a      	str	r2, [r3, #68]	; 0x44
 8007a46:	e002      	b.n	8007a4e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2220      	movs	r2, #32
 8007a54:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6859      	ldr	r1, [r3, #4]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	4b1b      	ldr	r3, [pc, #108]	; (8007ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8007a62:	400b      	ands	r3, r1
 8007a64:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e022      	b.n	8007ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a82:	f7ff f993 	bl	8006dac <HAL_GetTick>
 8007a86:	4602      	mov	r2, r0
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d302      	bcc.n	8007a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10f      	bne.n	8007ab8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9c:	f043 0220 	orr.w	r2, r3, #32
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e007      	b.n	8007ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	f003 0304 	and.w	r3, r3, #4
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d193      	bne.n	80079ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	fe00e800 	.word	0xfe00e800

08007ad4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08a      	sub	sp, #40	; 0x28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	f003 0310 	and.w	r3, r3, #16
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d075      	beq.n	8007bec <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2210      	movs	r2, #16
 8007b06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007b08:	e056      	b.n	8007bb8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b10:	d052      	beq.n	8007bb8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b12:	f7ff f94b 	bl	8006dac <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d302      	bcc.n	8007b28 <I2C_IsErrorOccurred+0x54>
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d147      	bne.n	8007bb8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b4a:	d12e      	bne.n	8007baa <I2C_IsErrorOccurred+0xd6>
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b52:	d02a      	beq.n	8007baa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007b54:	7cfb      	ldrb	r3, [r7, #19]
 8007b56:	2b20      	cmp	r3, #32
 8007b58:	d027      	beq.n	8007baa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b68:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007b6a:	f7ff f91f 	bl	8006dac <HAL_GetTick>
 8007b6e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007b70:	e01b      	b.n	8007baa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007b72:	f7ff f91b 	bl	8006dac <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	2b19      	cmp	r3, #25
 8007b7e:	d914      	bls.n	8007baa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b84:	f043 0220 	orr.w	r2, r3, #32
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	f003 0320 	and.w	r3, r3, #32
 8007bb4:	2b20      	cmp	r3, #32
 8007bb6:	d1dc      	bne.n	8007b72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b20      	cmp	r3, #32
 8007bc4:	d003      	beq.n	8007bce <I2C_IsErrorOccurred+0xfa>
 8007bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d09d      	beq.n	8007b0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d103      	bne.n	8007bde <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	f043 0304 	orr.w	r3, r3, #4
 8007be4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00b      	beq.n	8007c16 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007bfe:	6a3b      	ldr	r3, [r7, #32]
 8007c00:	f043 0301 	orr.w	r3, r3, #1
 8007c04:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	f043 0308 	orr.w	r3, r3, #8
 8007c26:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00b      	beq.n	8007c5a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	f043 0302 	orr.w	r3, r3, #2
 8007c48:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d01c      	beq.n	8007c9c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f7ff fddc 	bl	8007820 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6859      	ldr	r1, [r3, #4]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	4b0d      	ldr	r3, [pc, #52]	; (8007ca8 <I2C_IsErrorOccurred+0x1d4>)
 8007c74:	400b      	ands	r3, r1
 8007c76:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2220      	movs	r2, #32
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3728      	adds	r7, #40	; 0x28
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	fe00e800 	.word	0xfe00e800

08007cac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	607b      	str	r3, [r7, #4]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	817b      	strh	r3, [r7, #10]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cbe:	897b      	ldrh	r3, [r7, #10]
 8007cc0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007cc4:	7a7b      	ldrb	r3, [r7, #9]
 8007cc6:	041b      	lsls	r3, r3, #16
 8007cc8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007ccc:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cda:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	0d5b      	lsrs	r3, r3, #21
 8007ce6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007cea:	4b08      	ldr	r3, [pc, #32]	; (8007d0c <I2C_TransferConfig+0x60>)
 8007cec:	430b      	orrs	r3, r1
 8007cee:	43db      	mvns	r3, r3
 8007cf0:	ea02 0103 	and.w	r1, r2, r3
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	430a      	orrs	r2, r1
 8007cfc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007cfe:	bf00      	nop
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	03ff63ff 	.word	0x03ff63ff

08007d10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	d138      	bne.n	8007d98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d101      	bne.n	8007d34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007d30:	2302      	movs	r3, #2
 8007d32:	e032      	b.n	8007d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2224      	movs	r2, #36	; 0x24
 8007d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f022 0201 	bic.w	r2, r2, #1
 8007d52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6819      	ldr	r1, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0201 	orr.w	r2, r2, #1
 8007d82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	e000      	b.n	8007d9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d98:	2302      	movs	r3, #2
  }
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	370c      	adds	r7, #12
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b085      	sub	sp, #20
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b20      	cmp	r3, #32
 8007dba:	d139      	bne.n	8007e30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d101      	bne.n	8007dca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	e033      	b.n	8007e32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2224      	movs	r2, #36	; 0x24
 8007dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0201 	bic.w	r2, r2, #1
 8007de8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007df8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	021b      	lsls	r3, r3, #8
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f042 0201 	orr.w	r2, r2, #1
 8007e1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	e000      	b.n	8007e32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007e30:	2302      	movs	r3, #2
  }
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr

08007e3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e40:	b08f      	sub	sp, #60	; 0x3c
 8007e42:	af0a      	add	r7, sp, #40	; 0x28
 8007e44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e116      	b.n	800807e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d106      	bne.n	8007e70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7f9 f9d8 	bl	8001220 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2203      	movs	r2, #3
 8007e74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d102      	bne.n	8007e8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f003 fd52 	bl	800b938 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	603b      	str	r3, [r7, #0]
 8007e9a:	687e      	ldr	r6, [r7, #4]
 8007e9c:	466d      	mov	r5, sp
 8007e9e:	f106 0410 	add.w	r4, r6, #16
 8007ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007eaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007eae:	e885 0003 	stmia.w	r5, {r0, r1}
 8007eb2:	1d33      	adds	r3, r6, #4
 8007eb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007eb6:	6838      	ldr	r0, [r7, #0]
 8007eb8:	f003 fd12 	bl	800b8e0 <USB_CoreInit>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d005      	beq.n	8007ece <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e0d7      	b.n	800807e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f003 fd40 	bl	800b95a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007eda:	2300      	movs	r3, #0
 8007edc:	73fb      	strb	r3, [r7, #15]
 8007ede:	e04a      	b.n	8007f76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007ee0:	7bfa      	ldrb	r2, [r7, #15]
 8007ee2:	6879      	ldr	r1, [r7, #4]
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	00db      	lsls	r3, r3, #3
 8007ee8:	1a9b      	subs	r3, r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	440b      	add	r3, r1
 8007eee:	333d      	adds	r3, #61	; 0x3d
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007ef4:	7bfa      	ldrb	r2, [r7, #15]
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	1a9b      	subs	r3, r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	440b      	add	r3, r1
 8007f02:	333c      	adds	r3, #60	; 0x3c
 8007f04:	7bfa      	ldrb	r2, [r7, #15]
 8007f06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007f08:	7bfa      	ldrb	r2, [r7, #15]
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	b298      	uxth	r0, r3
 8007f0e:	6879      	ldr	r1, [r7, #4]
 8007f10:	4613      	mov	r3, r2
 8007f12:	00db      	lsls	r3, r3, #3
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	440b      	add	r3, r1
 8007f1a:	3342      	adds	r3, #66	; 0x42
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007f20:	7bfa      	ldrb	r2, [r7, #15]
 8007f22:	6879      	ldr	r1, [r7, #4]
 8007f24:	4613      	mov	r3, r2
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	1a9b      	subs	r3, r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	440b      	add	r3, r1
 8007f2e:	333f      	adds	r3, #63	; 0x3f
 8007f30:	2200      	movs	r2, #0
 8007f32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007f34:	7bfa      	ldrb	r2, [r7, #15]
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	00db      	lsls	r3, r3, #3
 8007f3c:	1a9b      	subs	r3, r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	440b      	add	r3, r1
 8007f42:	3344      	adds	r3, #68	; 0x44
 8007f44:	2200      	movs	r2, #0
 8007f46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007f48:	7bfa      	ldrb	r2, [r7, #15]
 8007f4a:	6879      	ldr	r1, [r7, #4]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	00db      	lsls	r3, r3, #3
 8007f50:	1a9b      	subs	r3, r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	440b      	add	r3, r1
 8007f56:	3348      	adds	r3, #72	; 0x48
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007f5c:	7bfa      	ldrb	r2, [r7, #15]
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	4613      	mov	r3, r2
 8007f62:	00db      	lsls	r3, r3, #3
 8007f64:	1a9b      	subs	r3, r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	3350      	adds	r3, #80	; 0x50
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	3301      	adds	r3, #1
 8007f74:	73fb      	strb	r3, [r7, #15]
 8007f76:	7bfa      	ldrb	r2, [r7, #15]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d3af      	bcc.n	8007ee0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f80:	2300      	movs	r3, #0
 8007f82:	73fb      	strb	r3, [r7, #15]
 8007f84:	e044      	b.n	8008010 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007f86:	7bfa      	ldrb	r2, [r7, #15]
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	00db      	lsls	r3, r3, #3
 8007f8e:	1a9b      	subs	r3, r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	440b      	add	r3, r1
 8007f94:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007f98:	2200      	movs	r2, #0
 8007f9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007f9c:	7bfa      	ldrb	r2, [r7, #15]
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	1a9b      	subs	r3, r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	440b      	add	r3, r1
 8007faa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007fae:	7bfa      	ldrb	r2, [r7, #15]
 8007fb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007fb2:	7bfa      	ldrb	r2, [r7, #15]
 8007fb4:	6879      	ldr	r1, [r7, #4]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	00db      	lsls	r3, r3, #3
 8007fba:	1a9b      	subs	r3, r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007fc8:	7bfa      	ldrb	r2, [r7, #15]
 8007fca:	6879      	ldr	r1, [r7, #4]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	1a9b      	subs	r3, r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	440b      	add	r3, r1
 8007fd6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007fde:	7bfa      	ldrb	r2, [r7, #15]
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	00db      	lsls	r3, r3, #3
 8007fe6:	1a9b      	subs	r3, r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	440b      	add	r3, r1
 8007fec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007ff4:	7bfa      	ldrb	r2, [r7, #15]
 8007ff6:	6879      	ldr	r1, [r7, #4]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	00db      	lsls	r3, r3, #3
 8007ffc:	1a9b      	subs	r3, r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	440b      	add	r3, r1
 8008002:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800800a:	7bfb      	ldrb	r3, [r7, #15]
 800800c:	3301      	adds	r3, #1
 800800e:	73fb      	strb	r3, [r7, #15]
 8008010:	7bfa      	ldrb	r2, [r7, #15]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	429a      	cmp	r2, r3
 8008018:	d3b5      	bcc.n	8007f86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	603b      	str	r3, [r7, #0]
 8008020:	687e      	ldr	r6, [r7, #4]
 8008022:	466d      	mov	r5, sp
 8008024:	f106 0410 	add.w	r4, r6, #16
 8008028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800802a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800802c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800802e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008030:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008034:	e885 0003 	stmia.w	r5, {r0, r1}
 8008038:	1d33      	adds	r3, r6, #4
 800803a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800803c:	6838      	ldr	r0, [r7, #0]
 800803e:	f003 fcd9 	bl	800b9f4 <USB_DevInit>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d005      	beq.n	8008054 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e014      	b.n	800807e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	2b01      	cmp	r3, #1
 800806a:	d102      	bne.n	8008072 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f80a 	bl	8008086 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4618      	mov	r0, r3
 8008078:	f003 fe81 	bl	800bd7e <USB_DevDisconnect>

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008086 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008086:	b480      	push	{r7}
 8008088:	b085      	sub	sp, #20
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080b8:	f043 0303 	orr.w	r3, r3, #3
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
	...

080080d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080d4:	4b05      	ldr	r3, [pc, #20]	; (80080ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a04      	ldr	r2, [pc, #16]	; (80080ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80080da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080de:	6013      	str	r3, [r2, #0]
}
 80080e0:	bf00      	nop
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	40007000 	.word	0x40007000

080080f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80080f0:	b480      	push	{r7}
 80080f2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80080f4:	4b0d      	ldr	r3, [pc, #52]	; (800812c <HAL_PWREx_GetVoltageRange+0x3c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80080fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008100:	d102      	bne.n	8008108 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8008102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008106:	e00b      	b.n	8008120 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8008108:	4b08      	ldr	r3, [pc, #32]	; (800812c <HAL_PWREx_GetVoltageRange+0x3c>)
 800810a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800810e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008116:	d102      	bne.n	800811e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8008118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800811c:	e000      	b.n	8008120 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800811e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8008120:	4618      	mov	r0, r3
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	40007000 	.word	0x40007000

08008130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d141      	bne.n	80081c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800813e:	4b4b      	ldr	r3, [pc, #300]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800814a:	d131      	bne.n	80081b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800814c:	4b47      	ldr	r3, [pc, #284]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800814e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008152:	4a46      	ldr	r2, [pc, #280]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008158:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800815c:	4b43      	ldr	r3, [pc, #268]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008164:	4a41      	ldr	r2, [pc, #260]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800816a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800816c:	4b40      	ldr	r3, [pc, #256]	; (8008270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2232      	movs	r2, #50	; 0x32
 8008172:	fb02 f303 	mul.w	r3, r2, r3
 8008176:	4a3f      	ldr	r2, [pc, #252]	; (8008274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008178:	fba2 2303 	umull	r2, r3, r2, r3
 800817c:	0c9b      	lsrs	r3, r3, #18
 800817e:	3301      	adds	r3, #1
 8008180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008182:	e002      	b.n	800818a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	3b01      	subs	r3, #1
 8008188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800818a:	4b38      	ldr	r3, [pc, #224]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008196:	d102      	bne.n	800819e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1f2      	bne.n	8008184 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800819e:	4b33      	ldr	r3, [pc, #204]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081aa:	d158      	bne.n	800825e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e057      	b.n	8008260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081b0:	4b2e      	ldr	r3, [pc, #184]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081b6:	4a2d      	ldr	r2, [pc, #180]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80081c0:	e04d      	b.n	800825e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081c8:	d141      	bne.n	800824e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80081ca:	4b28      	ldr	r3, [pc, #160]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80081d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d6:	d131      	bne.n	800823c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081d8:	4b24      	ldr	r3, [pc, #144]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081de:	4a23      	ldr	r2, [pc, #140]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80081e8:	4b20      	ldr	r3, [pc, #128]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80081f0:	4a1e      	ldr	r2, [pc, #120]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80081f8:	4b1d      	ldr	r3, [pc, #116]	; (8008270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2232      	movs	r2, #50	; 0x32
 80081fe:	fb02 f303 	mul.w	r3, r2, r3
 8008202:	4a1c      	ldr	r2, [pc, #112]	; (8008274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008204:	fba2 2303 	umull	r2, r3, r2, r3
 8008208:	0c9b      	lsrs	r3, r3, #18
 800820a:	3301      	adds	r3, #1
 800820c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800820e:	e002      	b.n	8008216 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3b01      	subs	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008216:	4b15      	ldr	r3, [pc, #84]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800821e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008222:	d102      	bne.n	800822a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1f2      	bne.n	8008210 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800822a:	4b10      	ldr	r3, [pc, #64]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008236:	d112      	bne.n	800825e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e011      	b.n	8008260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800823c:	4b0b      	ldr	r3, [pc, #44]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800823e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008242:	4a0a      	ldr	r2, [pc, #40]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800824c:	e007      	b.n	800825e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800824e:	4b07      	ldr	r3, [pc, #28]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008256:	4a05      	ldr	r2, [pc, #20]	; (800826c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800825c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	40007000 	.word	0x40007000
 8008270:	20000004 	.word	0x20000004
 8008274:	431bde83 	.word	0x431bde83

08008278 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008278:	b480      	push	{r7}
 800827a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800827c:	4b05      	ldr	r3, [pc, #20]	; (8008294 <HAL_PWREx_EnableVddUSB+0x1c>)
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	4a04      	ldr	r2, [pc, #16]	; (8008294 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008286:	6053      	str	r3, [r2, #4]
}
 8008288:	bf00      	nop
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	40007000 	.word	0x40007000

08008298 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008298:	b480      	push	{r7}
 800829a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800829c:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	4a04      	ldr	r2, [pc, #16]	; (80082b4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80082a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082a6:	6053      	str	r3, [r2, #4]
}
 80082a8:	bf00      	nop
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	40007000 	.word	0x40007000

080082b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b088      	sub	sp, #32
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d102      	bne.n	80082cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	f000 bc16 	b.w	8008af8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082cc:	4ba0      	ldr	r3, [pc, #640]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f003 030c 	and.w	r3, r3, #12
 80082d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082d6:	4b9e      	ldr	r3, [pc, #632]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0310 	and.w	r3, r3, #16
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f000 80e4 	beq.w	80084b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d007      	beq.n	8008304 <HAL_RCC_OscConfig+0x4c>
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	2b0c      	cmp	r3, #12
 80082f8:	f040 808b 	bne.w	8008412 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	f040 8087 	bne.w	8008412 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008304:	4b92      	ldr	r3, [pc, #584]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 0302 	and.w	r3, r3, #2
 800830c:	2b00      	cmp	r3, #0
 800830e:	d005      	beq.n	800831c <HAL_RCC_OscConfig+0x64>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d101      	bne.n	800831c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	e3ed      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a1a      	ldr	r2, [r3, #32]
 8008320:	4b8b      	ldr	r3, [pc, #556]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 0308 	and.w	r3, r3, #8
 8008328:	2b00      	cmp	r3, #0
 800832a:	d004      	beq.n	8008336 <HAL_RCC_OscConfig+0x7e>
 800832c:	4b88      	ldr	r3, [pc, #544]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008334:	e005      	b.n	8008342 <HAL_RCC_OscConfig+0x8a>
 8008336:	4b86      	ldr	r3, [pc, #536]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800833c:	091b      	lsrs	r3, r3, #4
 800833e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008342:	4293      	cmp	r3, r2
 8008344:	d223      	bcs.n	800838e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	4618      	mov	r0, r3
 800834c:	f000 fdca 	bl	8008ee4 <RCC_SetFlashLatencyFromMSIRange>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e3ce      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800835a:	4b7d      	ldr	r3, [pc, #500]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a7c      	ldr	r2, [pc, #496]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008360:	f043 0308 	orr.w	r3, r3, #8
 8008364:	6013      	str	r3, [r2, #0]
 8008366:	4b7a      	ldr	r3, [pc, #488]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	4977      	ldr	r1, [pc, #476]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008374:	4313      	orrs	r3, r2
 8008376:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008378:	4b75      	ldr	r3, [pc, #468]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	69db      	ldr	r3, [r3, #28]
 8008384:	021b      	lsls	r3, r3, #8
 8008386:	4972      	ldr	r1, [pc, #456]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008388:	4313      	orrs	r3, r2
 800838a:	604b      	str	r3, [r1, #4]
 800838c:	e025      	b.n	80083da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800838e:	4b70      	ldr	r3, [pc, #448]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a6f      	ldr	r2, [pc, #444]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008394:	f043 0308 	orr.w	r3, r3, #8
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	4b6d      	ldr	r3, [pc, #436]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	496a      	ldr	r1, [pc, #424]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80083ac:	4b68      	ldr	r3, [pc, #416]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	021b      	lsls	r3, r3, #8
 80083ba:	4965      	ldr	r1, [pc, #404]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d109      	bne.n	80083da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 fd8a 	bl	8008ee4 <RCC_SetFlashLatencyFromMSIRange>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d001      	beq.n	80083da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e38e      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80083da:	f000 fcbf 	bl	8008d5c <HAL_RCC_GetSysClockFreq>
 80083de:	4602      	mov	r2, r0
 80083e0:	4b5b      	ldr	r3, [pc, #364]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	091b      	lsrs	r3, r3, #4
 80083e6:	f003 030f 	and.w	r3, r3, #15
 80083ea:	495a      	ldr	r1, [pc, #360]	; (8008554 <HAL_RCC_OscConfig+0x29c>)
 80083ec:	5ccb      	ldrb	r3, [r1, r3]
 80083ee:	f003 031f 	and.w	r3, r3, #31
 80083f2:	fa22 f303 	lsr.w	r3, r2, r3
 80083f6:	4a58      	ldr	r2, [pc, #352]	; (8008558 <HAL_RCC_OscConfig+0x2a0>)
 80083f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80083fa:	4b58      	ldr	r3, [pc, #352]	; (800855c <HAL_RCC_OscConfig+0x2a4>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4618      	mov	r0, r3
 8008400:	f7fe fc84 	bl	8006d0c <HAL_InitTick>
 8008404:	4603      	mov	r3, r0
 8008406:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d052      	beq.n	80084b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800840e:	7bfb      	ldrb	r3, [r7, #15]
 8008410:	e372      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d032      	beq.n	8008480 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800841a:	4b4d      	ldr	r3, [pc, #308]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a4c      	ldr	r2, [pc, #304]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008420:	f043 0301 	orr.w	r3, r3, #1
 8008424:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008426:	f7fe fcc1 	bl	8006dac <HAL_GetTick>
 800842a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800842c:	e008      	b.n	8008440 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800842e:	f7fe fcbd 	bl	8006dac <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	2b02      	cmp	r3, #2
 800843a:	d901      	bls.n	8008440 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e35b      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008440:	4b43      	ldr	r3, [pc, #268]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0302 	and.w	r3, r3, #2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d0f0      	beq.n	800842e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800844c:	4b40      	ldr	r3, [pc, #256]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a3f      	ldr	r2, [pc, #252]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008452:	f043 0308 	orr.w	r3, r3, #8
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	4b3d      	ldr	r3, [pc, #244]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a1b      	ldr	r3, [r3, #32]
 8008464:	493a      	ldr	r1, [pc, #232]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008466:	4313      	orrs	r3, r2
 8008468:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800846a:	4b39      	ldr	r3, [pc, #228]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	021b      	lsls	r3, r3, #8
 8008478:	4935      	ldr	r1, [pc, #212]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 800847a:	4313      	orrs	r3, r2
 800847c:	604b      	str	r3, [r1, #4]
 800847e:	e01a      	b.n	80084b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008480:	4b33      	ldr	r3, [pc, #204]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a32      	ldr	r2, [pc, #200]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008486:	f023 0301 	bic.w	r3, r3, #1
 800848a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800848c:	f7fe fc8e 	bl	8006dac <HAL_GetTick>
 8008490:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008492:	e008      	b.n	80084a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008494:	f7fe fc8a 	bl	8006dac <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d901      	bls.n	80084a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e328      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80084a6:	4b2a      	ldr	r3, [pc, #168]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0302 	and.w	r3, r3, #2
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1f0      	bne.n	8008494 <HAL_RCC_OscConfig+0x1dc>
 80084b2:	e000      	b.n	80084b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80084b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d073      	beq.n	80085aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	2b08      	cmp	r3, #8
 80084c6:	d005      	beq.n	80084d4 <HAL_RCC_OscConfig+0x21c>
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	2b0c      	cmp	r3, #12
 80084cc:	d10e      	bne.n	80084ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d10b      	bne.n	80084ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084d4:	4b1e      	ldr	r3, [pc, #120]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d063      	beq.n	80085a8 <HAL_RCC_OscConfig+0x2f0>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d15f      	bne.n	80085a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e305      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084f4:	d106      	bne.n	8008504 <HAL_RCC_OscConfig+0x24c>
 80084f6:	4b16      	ldr	r3, [pc, #88]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a15      	ldr	r2, [pc, #84]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 80084fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	e01d      	b.n	8008540 <HAL_RCC_OscConfig+0x288>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800850c:	d10c      	bne.n	8008528 <HAL_RCC_OscConfig+0x270>
 800850e:	4b10      	ldr	r3, [pc, #64]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a0f      	ldr	r2, [pc, #60]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008518:	6013      	str	r3, [r2, #0]
 800851a:	4b0d      	ldr	r3, [pc, #52]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a0c      	ldr	r2, [pc, #48]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008524:	6013      	str	r3, [r2, #0]
 8008526:	e00b      	b.n	8008540 <HAL_RCC_OscConfig+0x288>
 8008528:	4b09      	ldr	r3, [pc, #36]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a08      	ldr	r2, [pc, #32]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 800852e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008532:	6013      	str	r3, [r2, #0]
 8008534:	4b06      	ldr	r3, [pc, #24]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a05      	ldr	r2, [pc, #20]	; (8008550 <HAL_RCC_OscConfig+0x298>)
 800853a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800853e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d01b      	beq.n	8008580 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008548:	f7fe fc30 	bl	8006dac <HAL_GetTick>
 800854c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800854e:	e010      	b.n	8008572 <HAL_RCC_OscConfig+0x2ba>
 8008550:	40021000 	.word	0x40021000
 8008554:	0800cf20 	.word	0x0800cf20
 8008558:	20000004 	.word	0x20000004
 800855c:	200002c4 	.word	0x200002c4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008560:	f7fe fc24 	bl	8006dac <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b64      	cmp	r3, #100	; 0x64
 800856c:	d901      	bls.n	8008572 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e2c2      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008572:	4baf      	ldr	r3, [pc, #700]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800857a:	2b00      	cmp	r3, #0
 800857c:	d0f0      	beq.n	8008560 <HAL_RCC_OscConfig+0x2a8>
 800857e:	e014      	b.n	80085aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008580:	f7fe fc14 	bl	8006dac <HAL_GetTick>
 8008584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008586:	e008      	b.n	800859a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008588:	f7fe fc10 	bl	8006dac <HAL_GetTick>
 800858c:	4602      	mov	r2, r0
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	2b64      	cmp	r3, #100	; 0x64
 8008594:	d901      	bls.n	800859a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008596:	2303      	movs	r3, #3
 8008598:	e2ae      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800859a:	4ba5      	ldr	r3, [pc, #660]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1f0      	bne.n	8008588 <HAL_RCC_OscConfig+0x2d0>
 80085a6:	e000      	b.n	80085aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d060      	beq.n	8008678 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	2b04      	cmp	r3, #4
 80085ba:	d005      	beq.n	80085c8 <HAL_RCC_OscConfig+0x310>
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	2b0c      	cmp	r3, #12
 80085c0:	d119      	bne.n	80085f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d116      	bne.n	80085f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085c8:	4b99      	ldr	r3, [pc, #612]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d005      	beq.n	80085e0 <HAL_RCC_OscConfig+0x328>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d101      	bne.n	80085e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e28b      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085e0:	4b93      	ldr	r3, [pc, #588]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	061b      	lsls	r3, r3, #24
 80085ee:	4990      	ldr	r1, [pc, #576]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085f4:	e040      	b.n	8008678 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d023      	beq.n	8008646 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085fe:	4b8c      	ldr	r3, [pc, #560]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a8b      	ldr	r2, [pc, #556]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 8008604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800860a:	f7fe fbcf 	bl	8006dac <HAL_GetTick>
 800860e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008610:	e008      	b.n	8008624 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008612:	f7fe fbcb 	bl	8006dac <HAL_GetTick>
 8008616:	4602      	mov	r2, r0
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	1ad3      	subs	r3, r2, r3
 800861c:	2b02      	cmp	r3, #2
 800861e:	d901      	bls.n	8008624 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e269      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008624:	4b82      	ldr	r3, [pc, #520]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800862c:	2b00      	cmp	r3, #0
 800862e:	d0f0      	beq.n	8008612 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008630:	4b7f      	ldr	r3, [pc, #508]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	061b      	lsls	r3, r3, #24
 800863e:	497c      	ldr	r1, [pc, #496]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 8008640:	4313      	orrs	r3, r2
 8008642:	604b      	str	r3, [r1, #4]
 8008644:	e018      	b.n	8008678 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008646:	4b7a      	ldr	r3, [pc, #488]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a79      	ldr	r2, [pc, #484]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 800864c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008652:	f7fe fbab 	bl	8006dac <HAL_GetTick>
 8008656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008658:	e008      	b.n	800866c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800865a:	f7fe fba7 	bl	8006dac <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	2b02      	cmp	r3, #2
 8008666:	d901      	bls.n	800866c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e245      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800866c:	4b70      	ldr	r3, [pc, #448]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1f0      	bne.n	800865a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0308 	and.w	r3, r3, #8
 8008680:	2b00      	cmp	r3, #0
 8008682:	d03c      	beq.n	80086fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d01c      	beq.n	80086c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800868c:	4b68      	ldr	r3, [pc, #416]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 800868e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008692:	4a67      	ldr	r2, [pc, #412]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 8008694:	f043 0301 	orr.w	r3, r3, #1
 8008698:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800869c:	f7fe fb86 	bl	8006dac <HAL_GetTick>
 80086a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80086a2:	e008      	b.n	80086b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086a4:	f7fe fb82 	bl	8006dac <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d901      	bls.n	80086b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e220      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80086b6:	4b5e      	ldr	r3, [pc, #376]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 80086b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086bc:	f003 0302 	and.w	r3, r3, #2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d0ef      	beq.n	80086a4 <HAL_RCC_OscConfig+0x3ec>
 80086c4:	e01b      	b.n	80086fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80086c6:	4b5a      	ldr	r3, [pc, #360]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 80086c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086cc:	4a58      	ldr	r2, [pc, #352]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 80086ce:	f023 0301 	bic.w	r3, r3, #1
 80086d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086d6:	f7fe fb69 	bl	8006dac <HAL_GetTick>
 80086da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80086dc:	e008      	b.n	80086f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086de:	f7fe fb65 	bl	8006dac <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d901      	bls.n	80086f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80086ec:	2303      	movs	r3, #3
 80086ee:	e203      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80086f0:	4b4f      	ldr	r3, [pc, #316]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 80086f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1ef      	bne.n	80086de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0304 	and.w	r3, r3, #4
 8008706:	2b00      	cmp	r3, #0
 8008708:	f000 80a6 	beq.w	8008858 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800870c:	2300      	movs	r3, #0
 800870e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008710:	4b47      	ldr	r3, [pc, #284]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 8008712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10d      	bne.n	8008738 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800871c:	4b44      	ldr	r3, [pc, #272]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 800871e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008720:	4a43      	ldr	r2, [pc, #268]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 8008722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008726:	6593      	str	r3, [r2, #88]	; 0x58
 8008728:	4b41      	ldr	r3, [pc, #260]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 800872a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800872c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008730:	60bb      	str	r3, [r7, #8]
 8008732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008734:	2301      	movs	r3, #1
 8008736:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008738:	4b3e      	ldr	r3, [pc, #248]	; (8008834 <HAL_RCC_OscConfig+0x57c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008740:	2b00      	cmp	r3, #0
 8008742:	d118      	bne.n	8008776 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008744:	4b3b      	ldr	r3, [pc, #236]	; (8008834 <HAL_RCC_OscConfig+0x57c>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a3a      	ldr	r2, [pc, #232]	; (8008834 <HAL_RCC_OscConfig+0x57c>)
 800874a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800874e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008750:	f7fe fb2c 	bl	8006dac <HAL_GetTick>
 8008754:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008758:	f7fe fb28 	bl	8006dac <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e1c6      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800876a:	4b32      	ldr	r3, [pc, #200]	; (8008834 <HAL_RCC_OscConfig+0x57c>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0f0      	beq.n	8008758 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d108      	bne.n	8008790 <HAL_RCC_OscConfig+0x4d8>
 800877e:	4b2c      	ldr	r3, [pc, #176]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 8008780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008784:	4a2a      	ldr	r2, [pc, #168]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800878e:	e024      	b.n	80087da <HAL_RCC_OscConfig+0x522>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	2b05      	cmp	r3, #5
 8008796:	d110      	bne.n	80087ba <HAL_RCC_OscConfig+0x502>
 8008798:	4b25      	ldr	r3, [pc, #148]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 800879a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800879e:	4a24      	ldr	r2, [pc, #144]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 80087a0:	f043 0304 	orr.w	r3, r3, #4
 80087a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80087a8:	4b21      	ldr	r3, [pc, #132]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 80087aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ae:	4a20      	ldr	r2, [pc, #128]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 80087b0:	f043 0301 	orr.w	r3, r3, #1
 80087b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80087b8:	e00f      	b.n	80087da <HAL_RCC_OscConfig+0x522>
 80087ba:	4b1d      	ldr	r3, [pc, #116]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 80087bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c0:	4a1b      	ldr	r2, [pc, #108]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 80087c2:	f023 0301 	bic.w	r3, r3, #1
 80087c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80087ca:	4b19      	ldr	r3, [pc, #100]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 80087cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d0:	4a17      	ldr	r2, [pc, #92]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 80087d2:	f023 0304 	bic.w	r3, r3, #4
 80087d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d016      	beq.n	8008810 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087e2:	f7fe fae3 	bl	8006dac <HAL_GetTick>
 80087e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087e8:	e00a      	b.n	8008800 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087ea:	f7fe fadf 	bl	8006dac <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d901      	bls.n	8008800 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e17b      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008800:	4b0b      	ldr	r3, [pc, #44]	; (8008830 <HAL_RCC_OscConfig+0x578>)
 8008802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0ed      	beq.n	80087ea <HAL_RCC_OscConfig+0x532>
 800880e:	e01a      	b.n	8008846 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008810:	f7fe facc 	bl	8006dac <HAL_GetTick>
 8008814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008816:	e00f      	b.n	8008838 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008818:	f7fe fac8 	bl	8006dac <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	f241 3288 	movw	r2, #5000	; 0x1388
 8008826:	4293      	cmp	r3, r2
 8008828:	d906      	bls.n	8008838 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e164      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
 800882e:	bf00      	nop
 8008830:	40021000 	.word	0x40021000
 8008834:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008838:	4ba8      	ldr	r3, [pc, #672]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 800883a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e8      	bne.n	8008818 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008846:	7ffb      	ldrb	r3, [r7, #31]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d105      	bne.n	8008858 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800884c:	4ba3      	ldr	r3, [pc, #652]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 800884e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008850:	4aa2      	ldr	r2, [pc, #648]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008856:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0320 	and.w	r3, r3, #32
 8008860:	2b00      	cmp	r3, #0
 8008862:	d03c      	beq.n	80088de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	2b00      	cmp	r3, #0
 800886a:	d01c      	beq.n	80088a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800886c:	4b9b      	ldr	r3, [pc, #620]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 800886e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008872:	4a9a      	ldr	r2, [pc, #616]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008874:	f043 0301 	orr.w	r3, r3, #1
 8008878:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800887c:	f7fe fa96 	bl	8006dac <HAL_GetTick>
 8008880:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008882:	e008      	b.n	8008896 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008884:	f7fe fa92 	bl	8006dac <HAL_GetTick>
 8008888:	4602      	mov	r2, r0
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	1ad3      	subs	r3, r2, r3
 800888e:	2b02      	cmp	r3, #2
 8008890:	d901      	bls.n	8008896 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008892:	2303      	movs	r3, #3
 8008894:	e130      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008896:	4b91      	ldr	r3, [pc, #580]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800889c:	f003 0302 	and.w	r3, r3, #2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0ef      	beq.n	8008884 <HAL_RCC_OscConfig+0x5cc>
 80088a4:	e01b      	b.n	80088de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088a6:	4b8d      	ldr	r3, [pc, #564]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 80088a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088ac:	4a8b      	ldr	r2, [pc, #556]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 80088ae:	f023 0301 	bic.w	r3, r3, #1
 80088b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088b6:	f7fe fa79 	bl	8006dac <HAL_GetTick>
 80088ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80088bc:	e008      	b.n	80088d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088be:	f7fe fa75 	bl	8006dac <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d901      	bls.n	80088d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e113      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80088d0:	4b82      	ldr	r3, [pc, #520]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 80088d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1ef      	bne.n	80088be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 8107 	beq.w	8008af6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	f040 80cb 	bne.w	8008a88 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80088f2:	4b7a      	ldr	r3, [pc, #488]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f003 0203 	and.w	r2, r3, #3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008902:	429a      	cmp	r2, r3
 8008904:	d12c      	bne.n	8008960 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008910:	3b01      	subs	r3, #1
 8008912:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008914:	429a      	cmp	r2, r3
 8008916:	d123      	bne.n	8008960 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008922:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008924:	429a      	cmp	r2, r3
 8008926:	d11b      	bne.n	8008960 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008934:	429a      	cmp	r2, r3
 8008936:	d113      	bne.n	8008960 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008942:	085b      	lsrs	r3, r3, #1
 8008944:	3b01      	subs	r3, #1
 8008946:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008948:	429a      	cmp	r2, r3
 800894a:	d109      	bne.n	8008960 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	085b      	lsrs	r3, r3, #1
 8008958:	3b01      	subs	r3, #1
 800895a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800895c:	429a      	cmp	r2, r3
 800895e:	d06d      	beq.n	8008a3c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	2b0c      	cmp	r3, #12
 8008964:	d068      	beq.n	8008a38 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008966:	4b5d      	ldr	r3, [pc, #372]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d105      	bne.n	800897e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008972:	4b5a      	ldr	r3, [pc, #360]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e0ba      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008982:	4b56      	ldr	r3, [pc, #344]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a55      	ldr	r2, [pc, #340]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008988:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800898c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800898e:	f7fe fa0d 	bl	8006dac <HAL_GetTick>
 8008992:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008994:	e008      	b.n	80089a8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008996:	f7fe fa09 	bl	8006dac <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d901      	bls.n	80089a8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e0a7      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089a8:	4b4c      	ldr	r3, [pc, #304]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d1f0      	bne.n	8008996 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089b4:	4b49      	ldr	r3, [pc, #292]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	4b49      	ldr	r3, [pc, #292]	; (8008ae0 <HAL_RCC_OscConfig+0x828>)
 80089ba:	4013      	ands	r3, r2
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80089c4:	3a01      	subs	r2, #1
 80089c6:	0112      	lsls	r2, r2, #4
 80089c8:	4311      	orrs	r1, r2
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80089ce:	0212      	lsls	r2, r2, #8
 80089d0:	4311      	orrs	r1, r2
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80089d6:	0852      	lsrs	r2, r2, #1
 80089d8:	3a01      	subs	r2, #1
 80089da:	0552      	lsls	r2, r2, #21
 80089dc:	4311      	orrs	r1, r2
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80089e2:	0852      	lsrs	r2, r2, #1
 80089e4:	3a01      	subs	r2, #1
 80089e6:	0652      	lsls	r2, r2, #25
 80089e8:	4311      	orrs	r1, r2
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089ee:	06d2      	lsls	r2, r2, #27
 80089f0:	430a      	orrs	r2, r1
 80089f2:	493a      	ldr	r1, [pc, #232]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80089f8:	4b38      	ldr	r3, [pc, #224]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a37      	ldr	r2, [pc, #220]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 80089fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a04:	4b35      	ldr	r3, [pc, #212]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	4a34      	ldr	r2, [pc, #208]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008a10:	f7fe f9cc 	bl	8006dac <HAL_GetTick>
 8008a14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a16:	e008      	b.n	8008a2a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a18:	f7fe f9c8 	bl	8006dac <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d901      	bls.n	8008a2a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e066      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a2a:	4b2c      	ldr	r3, [pc, #176]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0f0      	beq.n	8008a18 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a36:	e05e      	b.n	8008af6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e05d      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a3c:	4b27      	ldr	r3, [pc, #156]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d156      	bne.n	8008af6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008a48:	4b24      	ldr	r3, [pc, #144]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a23      	ldr	r2, [pc, #140]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a54:	4b21      	ldr	r3, [pc, #132]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	4a20      	ldr	r2, [pc, #128]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a60:	f7fe f9a4 	bl	8006dac <HAL_GetTick>
 8008a64:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a68:	f7fe f9a0 	bl	8006dac <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b02      	cmp	r3, #2
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e03e      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a7a:	4b18      	ldr	r3, [pc, #96]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0f0      	beq.n	8008a68 <HAL_RCC_OscConfig+0x7b0>
 8008a86:	e036      	b.n	8008af6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	2b0c      	cmp	r3, #12
 8008a8c:	d031      	beq.n	8008af2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a8e:	4b13      	ldr	r3, [pc, #76]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a12      	ldr	r2, [pc, #72]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008a94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a98:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8008a9a:	4b10      	ldr	r3, [pc, #64]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d105      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008aa6:	4b0d      	ldr	r3, [pc, #52]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	4a0c      	ldr	r2, [pc, #48]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008aac:	f023 0303 	bic.w	r3, r3, #3
 8008ab0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008ab2:	4b0a      	ldr	r3, [pc, #40]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	4a09      	ldr	r2, [pc, #36]	; (8008adc <HAL_RCC_OscConfig+0x824>)
 8008ab8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ac0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac2:	f7fe f973 	bl	8006dac <HAL_GetTick>
 8008ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ac8:	e00c      	b.n	8008ae4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aca:	f7fe f96f 	bl	8006dac <HAL_GetTick>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d905      	bls.n	8008ae4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e00d      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
 8008adc:	40021000 	.word	0x40021000
 8008ae0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ae4:	4b06      	ldr	r3, [pc, #24]	; (8008b00 <HAL_RCC_OscConfig+0x848>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1ec      	bne.n	8008aca <HAL_RCC_OscConfig+0x812>
 8008af0:	e001      	b.n	8008af6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e000      	b.n	8008af8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3720      	adds	r7, #32
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	40021000 	.word	0x40021000

08008b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e10f      	b.n	8008d3c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b1c:	4b89      	ldr	r3, [pc, #548]	; (8008d44 <HAL_RCC_ClockConfig+0x240>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 030f 	and.w	r3, r3, #15
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d910      	bls.n	8008b4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b2a:	4b86      	ldr	r3, [pc, #536]	; (8008d44 <HAL_RCC_ClockConfig+0x240>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f023 020f 	bic.w	r2, r3, #15
 8008b32:	4984      	ldr	r1, [pc, #528]	; (8008d44 <HAL_RCC_ClockConfig+0x240>)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b3a:	4b82      	ldr	r3, [pc, #520]	; (8008d44 <HAL_RCC_ClockConfig+0x240>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 030f 	and.w	r3, r3, #15
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d001      	beq.n	8008b4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e0f7      	b.n	8008d3c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 8089 	beq.w	8008c6c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d133      	bne.n	8008bca <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b62:	4b79      	ldr	r3, [pc, #484]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e0e4      	b.n	8008d3c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008b72:	f000 fa11 	bl	8008f98 <RCC_GetSysClockFreqFromPLLSource>
 8008b76:	4603      	mov	r3, r0
 8008b78:	4a74      	ldr	r2, [pc, #464]	; (8008d4c <HAL_RCC_ClockConfig+0x248>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d955      	bls.n	8008c2a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8008b7e:	4b72      	ldr	r3, [pc, #456]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10a      	bne.n	8008ba0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008b8a:	4b6f      	ldr	r3, [pc, #444]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b92:	4a6d      	ldr	r2, [pc, #436]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008b9a:	2380      	movs	r3, #128	; 0x80
 8008b9c:	617b      	str	r3, [r7, #20]
 8008b9e:	e044      	b.n	8008c2a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0302 	and.w	r3, r3, #2
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d03e      	beq.n	8008c2a <HAL_RCC_ClockConfig+0x126>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d13a      	bne.n	8008c2a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008bb4:	4b64      	ldr	r3, [pc, #400]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bbc:	4a62      	ldr	r2, [pc, #392]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bc2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008bc4:	2380      	movs	r3, #128	; 0x80
 8008bc6:	617b      	str	r3, [r7, #20]
 8008bc8:	e02f      	b.n	8008c2a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d107      	bne.n	8008be2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008bd2:	4b5d      	ldr	r3, [pc, #372]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d115      	bne.n	8008c0a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e0ac      	b.n	8008d3c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d107      	bne.n	8008bfa <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008bea:	4b57      	ldr	r3, [pc, #348]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0302 	and.w	r3, r3, #2
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d109      	bne.n	8008c0a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e0a0      	b.n	8008d3c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008bfa:	4b53      	ldr	r3, [pc, #332]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e098      	b.n	8008d3c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008c0a:	f000 f8a7 	bl	8008d5c <HAL_RCC_GetSysClockFreq>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	4a4e      	ldr	r2, [pc, #312]	; (8008d4c <HAL_RCC_ClockConfig+0x248>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d909      	bls.n	8008c2a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c16:	4b4c      	ldr	r3, [pc, #304]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c1e:	4a4a      	ldr	r2, [pc, #296]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008c26:	2380      	movs	r3, #128	; 0x80
 8008c28:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c2a:	4b47      	ldr	r3, [pc, #284]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f023 0203 	bic.w	r2, r3, #3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	4944      	ldr	r1, [pc, #272]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c3c:	f7fe f8b6 	bl	8006dac <HAL_GetTick>
 8008c40:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c42:	e00a      	b.n	8008c5a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c44:	f7fe f8b2 	bl	8006dac <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e070      	b.n	8008d3c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c5a:	4b3b      	ldr	r3, [pc, #236]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f003 020c 	and.w	r2, r3, #12
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d1eb      	bne.n	8008c44 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0302 	and.w	r3, r3, #2
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d009      	beq.n	8008c8c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c78:	4b33      	ldr	r3, [pc, #204]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	4930      	ldr	r1, [pc, #192]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	608b      	str	r3, [r1, #8]
 8008c8a:	e008      	b.n	8008c9e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2b80      	cmp	r3, #128	; 0x80
 8008c90:	d105      	bne.n	8008c9e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008c92:	4b2d      	ldr	r3, [pc, #180]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	4a2c      	ldr	r2, [pc, #176]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008c98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c9c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c9e:	4b29      	ldr	r3, [pc, #164]	; (8008d44 <HAL_RCC_ClockConfig+0x240>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 030f 	and.w	r3, r3, #15
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d210      	bcs.n	8008cce <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cac:	4b25      	ldr	r3, [pc, #148]	; (8008d44 <HAL_RCC_ClockConfig+0x240>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f023 020f 	bic.w	r2, r3, #15
 8008cb4:	4923      	ldr	r1, [pc, #140]	; (8008d44 <HAL_RCC_ClockConfig+0x240>)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cbc:	4b21      	ldr	r3, [pc, #132]	; (8008d44 <HAL_RCC_ClockConfig+0x240>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 030f 	and.w	r3, r3, #15
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d001      	beq.n	8008cce <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e036      	b.n	8008d3c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0304 	and.w	r3, r3, #4
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d008      	beq.n	8008cec <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cda:	4b1b      	ldr	r3, [pc, #108]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	4918      	ldr	r1, [pc, #96]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 0308 	and.w	r3, r3, #8
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d009      	beq.n	8008d0c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008cf8:	4b13      	ldr	r3, [pc, #76]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	4910      	ldr	r1, [pc, #64]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008d0c:	f000 f826 	bl	8008d5c <HAL_RCC_GetSysClockFreq>
 8008d10:	4602      	mov	r2, r0
 8008d12:	4b0d      	ldr	r3, [pc, #52]	; (8008d48 <HAL_RCC_ClockConfig+0x244>)
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	091b      	lsrs	r3, r3, #4
 8008d18:	f003 030f 	and.w	r3, r3, #15
 8008d1c:	490c      	ldr	r1, [pc, #48]	; (8008d50 <HAL_RCC_ClockConfig+0x24c>)
 8008d1e:	5ccb      	ldrb	r3, [r1, r3]
 8008d20:	f003 031f 	and.w	r3, r3, #31
 8008d24:	fa22 f303 	lsr.w	r3, r2, r3
 8008d28:	4a0a      	ldr	r2, [pc, #40]	; (8008d54 <HAL_RCC_ClockConfig+0x250>)
 8008d2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <HAL_RCC_ClockConfig+0x254>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fd ffeb 	bl	8006d0c <HAL_InitTick>
 8008d36:	4603      	mov	r3, r0
 8008d38:	73fb      	strb	r3, [r7, #15]

  return status;
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	40022000 	.word	0x40022000
 8008d48:	40021000 	.word	0x40021000
 8008d4c:	04c4b400 	.word	0x04c4b400
 8008d50:	0800cf20 	.word	0x0800cf20
 8008d54:	20000004 	.word	0x20000004
 8008d58:	200002c4 	.word	0x200002c4

08008d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b089      	sub	sp, #36	; 0x24
 8008d60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	61fb      	str	r3, [r7, #28]
 8008d66:	2300      	movs	r3, #0
 8008d68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d6a:	4b3e      	ldr	r3, [pc, #248]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f003 030c 	and.w	r3, r3, #12
 8008d72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d74:	4b3b      	ldr	r3, [pc, #236]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f003 0303 	and.w	r3, r3, #3
 8008d7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <HAL_RCC_GetSysClockFreq+0x34>
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	2b0c      	cmp	r3, #12
 8008d88:	d121      	bne.n	8008dce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d11e      	bne.n	8008dce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008d90:	4b34      	ldr	r3, [pc, #208]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0308 	and.w	r3, r3, #8
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d107      	bne.n	8008dac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008d9c:	4b31      	ldr	r3, [pc, #196]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008da2:	0a1b      	lsrs	r3, r3, #8
 8008da4:	f003 030f 	and.w	r3, r3, #15
 8008da8:	61fb      	str	r3, [r7, #28]
 8008daa:	e005      	b.n	8008db8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008dac:	4b2d      	ldr	r3, [pc, #180]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	091b      	lsrs	r3, r3, #4
 8008db2:	f003 030f 	and.w	r3, r3, #15
 8008db6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008db8:	4a2b      	ldr	r2, [pc, #172]	; (8008e68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dc0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10d      	bne.n	8008de4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008dcc:	e00a      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	2b04      	cmp	r3, #4
 8008dd2:	d102      	bne.n	8008dda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008dd4:	4b25      	ldr	r3, [pc, #148]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8008dd6:	61bb      	str	r3, [r7, #24]
 8008dd8:	e004      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	d101      	bne.n	8008de4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008de0:	4b23      	ldr	r3, [pc, #140]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x114>)
 8008de2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	2b0c      	cmp	r3, #12
 8008de8:	d134      	bne.n	8008e54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008dea:	4b1e      	ldr	r3, [pc, #120]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d003      	beq.n	8008e02 <HAL_RCC_GetSysClockFreq+0xa6>
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b03      	cmp	r3, #3
 8008dfe:	d003      	beq.n	8008e08 <HAL_RCC_GetSysClockFreq+0xac>
 8008e00:	e005      	b.n	8008e0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008e02:	4b1a      	ldr	r3, [pc, #104]	; (8008e6c <HAL_RCC_GetSysClockFreq+0x110>)
 8008e04:	617b      	str	r3, [r7, #20]
      break;
 8008e06:	e005      	b.n	8008e14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008e08:	4b19      	ldr	r3, [pc, #100]	; (8008e70 <HAL_RCC_GetSysClockFreq+0x114>)
 8008e0a:	617b      	str	r3, [r7, #20]
      break;
 8008e0c:	e002      	b.n	8008e14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	617b      	str	r3, [r7, #20]
      break;
 8008e12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e14:	4b13      	ldr	r3, [pc, #76]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	091b      	lsrs	r3, r3, #4
 8008e1a:	f003 030f 	and.w	r3, r3, #15
 8008e1e:	3301      	adds	r3, #1
 8008e20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008e22:	4b10      	ldr	r3, [pc, #64]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	0a1b      	lsrs	r3, r3, #8
 8008e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	fb02 f203 	mul.w	r2, r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008e3a:	4b0a      	ldr	r3, [pc, #40]	; (8008e64 <HAL_RCC_GetSysClockFreq+0x108>)
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	0e5b      	lsrs	r3, r3, #25
 8008e40:	f003 0303 	and.w	r3, r3, #3
 8008e44:	3301      	adds	r3, #1
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008e4a:	697a      	ldr	r2, [r7, #20]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008e54:	69bb      	ldr	r3, [r7, #24]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3724      	adds	r7, #36	; 0x24
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	40021000 	.word	0x40021000
 8008e68:	0800cf38 	.word	0x0800cf38
 8008e6c:	00f42400 	.word	0x00f42400
 8008e70:	007a1200 	.word	0x007a1200

08008e74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e78:	4b03      	ldr	r3, [pc, #12]	; (8008e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	20000004 	.word	0x20000004

08008e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008e90:	f7ff fff0 	bl	8008e74 <HAL_RCC_GetHCLKFreq>
 8008e94:	4602      	mov	r2, r0
 8008e96:	4b06      	ldr	r3, [pc, #24]	; (8008eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e98:	689b      	ldr	r3, [r3, #8]
 8008e9a:	0a1b      	lsrs	r3, r3, #8
 8008e9c:	f003 0307 	and.w	r3, r3, #7
 8008ea0:	4904      	ldr	r1, [pc, #16]	; (8008eb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ea2:	5ccb      	ldrb	r3, [r1, r3]
 8008ea4:	f003 031f 	and.w	r3, r3, #31
 8008ea8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	40021000 	.word	0x40021000
 8008eb4:	0800cf30 	.word	0x0800cf30

08008eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008ebc:	f7ff ffda 	bl	8008e74 <HAL_RCC_GetHCLKFreq>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	4b06      	ldr	r3, [pc, #24]	; (8008edc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	0adb      	lsrs	r3, r3, #11
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	4904      	ldr	r1, [pc, #16]	; (8008ee0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008ece:	5ccb      	ldrb	r3, [r1, r3]
 8008ed0:	f003 031f 	and.w	r3, r3, #31
 8008ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	40021000 	.word	0x40021000
 8008ee0:	0800cf30 	.word	0x0800cf30

08008ee4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008eec:	2300      	movs	r3, #0
 8008eee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008ef0:	4b27      	ldr	r3, [pc, #156]	; (8008f90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008efc:	f7ff f8f8 	bl	80080f0 <HAL_PWREx_GetVoltageRange>
 8008f00:	6178      	str	r0, [r7, #20]
 8008f02:	e014      	b.n	8008f2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f04:	4b22      	ldr	r3, [pc, #136]	; (8008f90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f08:	4a21      	ldr	r2, [pc, #132]	; (8008f90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8008f10:	4b1f      	ldr	r3, [pc, #124]	; (8008f90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f18:	60fb      	str	r3, [r7, #12]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008f1c:	f7ff f8e8 	bl	80080f0 <HAL_PWREx_GetVoltageRange>
 8008f20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008f22:	4b1b      	ldr	r3, [pc, #108]	; (8008f90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f26:	4a1a      	ldr	r2, [pc, #104]	; (8008f90 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f34:	d10b      	bne.n	8008f4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b80      	cmp	r3, #128	; 0x80
 8008f3a:	d913      	bls.n	8008f64 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2ba0      	cmp	r3, #160	; 0xa0
 8008f40:	d902      	bls.n	8008f48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008f42:	2302      	movs	r3, #2
 8008f44:	613b      	str	r3, [r7, #16]
 8008f46:	e00d      	b.n	8008f64 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008f48:	2301      	movs	r3, #1
 8008f4a:	613b      	str	r3, [r7, #16]
 8008f4c:	e00a      	b.n	8008f64 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b7f      	cmp	r3, #127	; 0x7f
 8008f52:	d902      	bls.n	8008f5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8008f54:	2302      	movs	r3, #2
 8008f56:	613b      	str	r3, [r7, #16]
 8008f58:	e004      	b.n	8008f64 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b70      	cmp	r3, #112	; 0x70
 8008f5e:	d101      	bne.n	8008f64 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008f60:	2301      	movs	r3, #1
 8008f62:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008f64:	4b0b      	ldr	r3, [pc, #44]	; (8008f94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f023 020f 	bic.w	r2, r3, #15
 8008f6c:	4909      	ldr	r1, [pc, #36]	; (8008f94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008f74:	4b07      	ldr	r3, [pc, #28]	; (8008f94 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	693a      	ldr	r2, [r7, #16]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d001      	beq.n	8008f86 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008f82:	2301      	movs	r3, #1
 8008f84:	e000      	b.n	8008f88 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3718      	adds	r7, #24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	40021000 	.word	0x40021000
 8008f94:	40022000 	.word	0x40022000

08008f98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8008fa2:	4b2d      	ldr	r3, [pc, #180]	; (8009058 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	f003 0303 	and.w	r3, r3, #3
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d118      	bne.n	8008fe0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008fae:	4b2a      	ldr	r3, [pc, #168]	; (8009058 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0308 	and.w	r3, r3, #8
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d107      	bne.n	8008fca <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008fba:	4b27      	ldr	r3, [pc, #156]	; (8009058 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fc0:	0a1b      	lsrs	r3, r3, #8
 8008fc2:	f003 030f 	and.w	r3, r3, #15
 8008fc6:	617b      	str	r3, [r7, #20]
 8008fc8:	e005      	b.n	8008fd6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008fca:	4b23      	ldr	r3, [pc, #140]	; (8009058 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	091b      	lsrs	r3, r3, #4
 8008fd0:	f003 030f 	and.w	r3, r3, #15
 8008fd4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008fd6:	4a21      	ldr	r2, [pc, #132]	; (800905c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fde:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008fe0:	4b1d      	ldr	r3, [pc, #116]	; (8009058 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	f003 0303 	and.w	r3, r3, #3
 8008fe8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d003      	beq.n	8008ff8 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	d003      	beq.n	8008ffe <RCC_GetSysClockFreqFromPLLSource+0x66>
 8008ff6:	e005      	b.n	8009004 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8008ff8:	4b19      	ldr	r3, [pc, #100]	; (8009060 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8008ffa:	613b      	str	r3, [r7, #16]
    break;
 8008ffc:	e005      	b.n	800900a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8008ffe:	4b19      	ldr	r3, [pc, #100]	; (8009064 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8009000:	613b      	str	r3, [r7, #16]
    break;
 8009002:	e002      	b.n	800900a <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	613b      	str	r3, [r7, #16]
    break;
 8009008:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800900a:	4b13      	ldr	r3, [pc, #76]	; (8009058 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	091b      	lsrs	r3, r3, #4
 8009010:	f003 030f 	and.w	r3, r3, #15
 8009014:	3301      	adds	r3, #1
 8009016:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009018:	4b0f      	ldr	r3, [pc, #60]	; (8009058 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	0a1b      	lsrs	r3, r3, #8
 800901e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	fb02 f203 	mul.w	r2, r2, r3
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	fbb2 f3f3 	udiv	r3, r2, r3
 800902e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009030:	4b09      	ldr	r3, [pc, #36]	; (8009058 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	0e5b      	lsrs	r3, r3, #25
 8009036:	f003 0303 	and.w	r3, r3, #3
 800903a:	3301      	adds	r3, #1
 800903c:	005b      	lsls	r3, r3, #1
 800903e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	fbb2 f3f3 	udiv	r3, r2, r3
 8009048:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800904a:	683b      	ldr	r3, [r7, #0]
}
 800904c:	4618      	mov	r0, r3
 800904e:	371c      	adds	r7, #28
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	40021000 	.word	0x40021000
 800905c:	0800cf38 	.word	0x0800cf38
 8009060:	00f42400 	.word	0x00f42400
 8009064:	007a1200 	.word	0x007a1200

08009068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b086      	sub	sp, #24
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009070:	2300      	movs	r3, #0
 8009072:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009074:	2300      	movs	r3, #0
 8009076:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009080:	2b00      	cmp	r3, #0
 8009082:	d040      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009088:	2b80      	cmp	r3, #128	; 0x80
 800908a:	d02a      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800908c:	2b80      	cmp	r3, #128	; 0x80
 800908e:	d825      	bhi.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009090:	2b60      	cmp	r3, #96	; 0x60
 8009092:	d026      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009094:	2b60      	cmp	r3, #96	; 0x60
 8009096:	d821      	bhi.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8009098:	2b40      	cmp	r3, #64	; 0x40
 800909a:	d006      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x42>
 800909c:	2b40      	cmp	r3, #64	; 0x40
 800909e:	d81d      	bhi.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d009      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80090a4:	2b20      	cmp	r3, #32
 80090a6:	d010      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x62>
 80090a8:	e018      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80090aa:	4b89      	ldr	r3, [pc, #548]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	4a88      	ldr	r2, [pc, #544]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090b4:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80090b6:	e015      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	3304      	adds	r3, #4
 80090bc:	2100      	movs	r1, #0
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fb72 	bl	80097a8 <RCCEx_PLLSAI1_Config>
 80090c4:	4603      	mov	r3, r0
 80090c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80090c8:	e00c      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	3320      	adds	r3, #32
 80090ce:	2100      	movs	r1, #0
 80090d0:	4618      	mov	r0, r3
 80090d2:	f000 fc5d 	bl	8009990 <RCCEx_PLLSAI2_Config>
 80090d6:	4603      	mov	r3, r0
 80090d8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80090da:	e003      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	74fb      	strb	r3, [r7, #19]
      break;
 80090e0:	e000      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80090e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090e4:	7cfb      	ldrb	r3, [r7, #19]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10b      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090ea:	4b79      	ldr	r3, [pc, #484]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090f0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090f8:	4975      	ldr	r1, [pc, #468]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8009100:	e001      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009102:	7cfb      	ldrb	r3, [r7, #19]
 8009104:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d047      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800911a:	d030      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800911c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009120:	d82a      	bhi.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8009122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009126:	d02a      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800912c:	d824      	bhi.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800912e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009132:	d008      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8009134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009138:	d81e      	bhi.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800913e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009142:	d010      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009144:	e018      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009146:	4b62      	ldr	r3, [pc, #392]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	4a61      	ldr	r2, [pc, #388]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800914c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009150:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009152:	e015      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	3304      	adds	r3, #4
 8009158:	2100      	movs	r1, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fb24 	bl	80097a8 <RCCEx_PLLSAI1_Config>
 8009160:	4603      	mov	r3, r0
 8009162:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009164:	e00c      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	3320      	adds	r3, #32
 800916a:	2100      	movs	r1, #0
 800916c:	4618      	mov	r0, r3
 800916e:	f000 fc0f 	bl	8009990 <RCCEx_PLLSAI2_Config>
 8009172:	4603      	mov	r3, r0
 8009174:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009176:	e003      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	74fb      	strb	r3, [r7, #19]
      break;
 800917c:	e000      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800917e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009180:	7cfb      	ldrb	r3, [r7, #19]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10b      	bne.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009186:	4b52      	ldr	r3, [pc, #328]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009188:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800918c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009194:	494e      	ldr	r1, [pc, #312]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009196:	4313      	orrs	r3, r2
 8009198:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800919c:	e001      	b.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800919e:	7cfb      	ldrb	r3, [r7, #19]
 80091a0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 809f 	beq.w	80092ee <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091b0:	2300      	movs	r3, #0
 80091b2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80091b4:	4b46      	ldr	r3, [pc, #280]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d101      	bne.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80091c0:	2301      	movs	r3, #1
 80091c2:	e000      	b.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80091c4:	2300      	movs	r3, #0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00d      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091ca:	4b41      	ldr	r3, [pc, #260]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ce:	4a40      	ldr	r2, [pc, #256]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091d4:	6593      	str	r3, [r2, #88]	; 0x58
 80091d6:	4b3e      	ldr	r3, [pc, #248]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80091d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091de:	60bb      	str	r3, [r7, #8]
 80091e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80091e2:	2301      	movs	r3, #1
 80091e4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091e6:	4b3b      	ldr	r3, [pc, #236]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a3a      	ldr	r2, [pc, #232]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80091ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091f2:	f7fd fddb 	bl	8006dac <HAL_GetTick>
 80091f6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80091f8:	e009      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091fa:	f7fd fdd7 	bl	8006dac <HAL_GetTick>
 80091fe:	4602      	mov	r2, r0
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	2b02      	cmp	r3, #2
 8009206:	d902      	bls.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	74fb      	strb	r3, [r7, #19]
        break;
 800920c:	e005      	b.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800920e:	4b31      	ldr	r3, [pc, #196]	; (80092d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009216:	2b00      	cmp	r3, #0
 8009218:	d0ef      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800921a:	7cfb      	ldrb	r3, [r7, #19]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d15b      	bne.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009220:	4b2b      	ldr	r3, [pc, #172]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800922a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d01f      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	429a      	cmp	r2, r3
 800923c:	d019      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800923e:	4b24      	ldr	r3, [pc, #144]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009248:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800924a:	4b21      	ldr	r3, [pc, #132]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800924c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009250:	4a1f      	ldr	r2, [pc, #124]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800925a:	4b1d      	ldr	r3, [pc, #116]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800925c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009260:	4a1b      	ldr	r2, [pc, #108]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8009262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009266:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800926a:	4a19      	ldr	r2, [pc, #100]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b00      	cmp	r3, #0
 800927a:	d016      	beq.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800927c:	f7fd fd96 	bl	8006dac <HAL_GetTick>
 8009280:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009282:	e00b      	b.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009284:	f7fd fd92 	bl	8006dac <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009292:	4293      	cmp	r3, r2
 8009294:	d902      	bls.n	800929c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	74fb      	strb	r3, [r7, #19]
            break;
 800929a:	e006      	b.n	80092aa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800929c:	4b0c      	ldr	r3, [pc, #48]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800929e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092a2:	f003 0302 	and.w	r3, r3, #2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d0ec      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80092aa:	7cfb      	ldrb	r3, [r7, #19]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10c      	bne.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092b0:	4b07      	ldr	r3, [pc, #28]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092c0:	4903      	ldr	r1, [pc, #12]	; (80092d0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80092c2:	4313      	orrs	r3, r2
 80092c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80092c8:	e008      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80092ca:	7cfb      	ldrb	r3, [r7, #19]
 80092cc:	74bb      	strb	r3, [r7, #18]
 80092ce:	e005      	b.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80092d0:	40021000 	.word	0x40021000
 80092d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d8:	7cfb      	ldrb	r3, [r7, #19]
 80092da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80092dc:	7c7b      	ldrb	r3, [r7, #17]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d105      	bne.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092e2:	4ba0      	ldr	r3, [pc, #640]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e6:	4a9f      	ldr	r2, [pc, #636]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00a      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80092fa:	4b9a      	ldr	r3, [pc, #616]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80092fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009300:	f023 0203 	bic.w	r2, r3, #3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009308:	4996      	ldr	r1, [pc, #600]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800930a:	4313      	orrs	r3, r2
 800930c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00a      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800931c:	4b91      	ldr	r3, [pc, #580]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800931e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009322:	f023 020c 	bic.w	r2, r3, #12
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	498e      	ldr	r1, [pc, #568]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800932c:	4313      	orrs	r3, r2
 800932e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 0304 	and.w	r3, r3, #4
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00a      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800933e:	4b89      	ldr	r3, [pc, #548]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009344:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800934c:	4985      	ldr	r1, [pc, #532]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800934e:	4313      	orrs	r3, r2
 8009350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0308 	and.w	r3, r3, #8
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00a      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009360:	4b80      	ldr	r3, [pc, #512]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009366:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800936e:	497d      	ldr	r1, [pc, #500]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009370:	4313      	orrs	r3, r2
 8009372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 0310 	and.w	r3, r3, #16
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00a      	beq.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009382:	4b78      	ldr	r3, [pc, #480]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009390:	4974      	ldr	r1, [pc, #464]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009392:	4313      	orrs	r3, r2
 8009394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0320 	and.w	r3, r3, #32
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00a      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80093a4:	4b6f      	ldr	r3, [pc, #444]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b2:	496c      	ldr	r1, [pc, #432]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093b4:	4313      	orrs	r3, r2
 80093b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00a      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093c6:	4b67      	ldr	r3, [pc, #412]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093d4:	4963      	ldr	r1, [pc, #396]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00a      	beq.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80093e8:	4b5e      	ldr	r3, [pc, #376]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093f6:	495b      	ldr	r1, [pc, #364]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80093f8:	4313      	orrs	r3, r2
 80093fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800940a:	4b56      	ldr	r3, [pc, #344]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800940c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009410:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009418:	4952      	ldr	r1, [pc, #328]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800941a:	4313      	orrs	r3, r2
 800941c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00a      	beq.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800942c:	4b4d      	ldr	r3, [pc, #308]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800942e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009432:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800943a:	494a      	ldr	r1, [pc, #296]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800943c:	4313      	orrs	r3, r2
 800943e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00a      	beq.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800944e:	4b45      	ldr	r3, [pc, #276]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800945c:	4941      	ldr	r1, [pc, #260]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800945e:	4313      	orrs	r3, r2
 8009460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00a      	beq.n	8009486 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009470:	4b3c      	ldr	r3, [pc, #240]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009472:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009476:	f023 0203 	bic.w	r2, r3, #3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800947e:	4939      	ldr	r1, [pc, #228]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009480:	4313      	orrs	r3, r2
 8009482:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d028      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009492:	4b34      	ldr	r3, [pc, #208]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009498:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094a0:	4930      	ldr	r1, [pc, #192]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094b0:	d106      	bne.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094b2:	4b2c      	ldr	r3, [pc, #176]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	4a2b      	ldr	r2, [pc, #172]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80094bc:	60d3      	str	r3, [r2, #12]
 80094be:	e011      	b.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80094c8:	d10c      	bne.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	3304      	adds	r3, #4
 80094ce:	2101      	movs	r1, #1
 80094d0:	4618      	mov	r0, r3
 80094d2:	f000 f969 	bl	80097a8 <RCCEx_PLLSAI1_Config>
 80094d6:	4603      	mov	r3, r0
 80094d8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80094da:	7cfb      	ldrb	r3, [r7, #19]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d001      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80094e0:	7cfb      	ldrb	r3, [r7, #19]
 80094e2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d04d      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094f8:	d108      	bne.n	800950c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80094fa:	4b1a      	ldr	r3, [pc, #104]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80094fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009500:	4a18      	ldr	r2, [pc, #96]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009506:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800950a:	e012      	b.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800950c:	4b15      	ldr	r3, [pc, #84]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800950e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009512:	4a14      	ldr	r2, [pc, #80]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009514:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009518:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800951c:	4b11      	ldr	r3, [pc, #68]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800951e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009522:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800952a:	490e      	ldr	r1, [pc, #56]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800952c:	4313      	orrs	r3, r2
 800952e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009536:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800953a:	d106      	bne.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800953c:	4b09      	ldr	r3, [pc, #36]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	4a08      	ldr	r2, [pc, #32]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009546:	60d3      	str	r3, [r2, #12]
 8009548:	e020      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800954e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009552:	d109      	bne.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009554:	4b03      	ldr	r3, [pc, #12]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	4a02      	ldr	r2, [pc, #8]	; (8009564 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800955a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800955e:	60d3      	str	r3, [r2, #12]
 8009560:	e014      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009562:	bf00      	nop
 8009564:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800956c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009570:	d10c      	bne.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	3304      	adds	r3, #4
 8009576:	2101      	movs	r1, #1
 8009578:	4618      	mov	r0, r3
 800957a:	f000 f915 	bl	80097a8 <RCCEx_PLLSAI1_Config>
 800957e:	4603      	mov	r3, r0
 8009580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009582:	7cfb      	ldrb	r3, [r7, #19]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d001      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8009588:	7cfb      	ldrb	r3, [r7, #19]
 800958a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d028      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009598:	4b7a      	ldr	r3, [pc, #488]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800959a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800959e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a6:	4977      	ldr	r1, [pc, #476]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80095a8:	4313      	orrs	r3, r2
 80095aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095b6:	d106      	bne.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095b8:	4b72      	ldr	r3, [pc, #456]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	4a71      	ldr	r2, [pc, #452]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80095be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095c2:	60d3      	str	r3, [r2, #12]
 80095c4:	e011      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095ce:	d10c      	bne.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	3304      	adds	r3, #4
 80095d4:	2101      	movs	r1, #1
 80095d6:	4618      	mov	r0, r3
 80095d8:	f000 f8e6 	bl	80097a8 <RCCEx_PLLSAI1_Config>
 80095dc:	4603      	mov	r3, r0
 80095de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80095e0:	7cfb      	ldrb	r3, [r7, #19]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80095e6:	7cfb      	ldrb	r3, [r7, #19]
 80095e8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d01e      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095f6:	4b63      	ldr	r3, [pc, #396]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80095f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009606:	495f      	ldr	r1, [pc, #380]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009608:	4313      	orrs	r3, r2
 800960a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009618:	d10c      	bne.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	3304      	adds	r3, #4
 800961e:	2102      	movs	r1, #2
 8009620:	4618      	mov	r0, r3
 8009622:	f000 f8c1 	bl	80097a8 <RCCEx_PLLSAI1_Config>
 8009626:	4603      	mov	r3, r0
 8009628:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800962a:	7cfb      	ldrb	r3, [r7, #19]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8009630:	7cfb      	ldrb	r3, [r7, #19]
 8009632:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00b      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009640:	4b50      	ldr	r3, [pc, #320]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009646:	f023 0204 	bic.w	r2, r3, #4
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009650:	494c      	ldr	r1, [pc, #304]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009652:	4313      	orrs	r3, r2
 8009654:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00b      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009664:	4b47      	ldr	r3, [pc, #284]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800966a:	f023 0218 	bic.w	r2, r3, #24
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009674:	4943      	ldr	r1, [pc, #268]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009676:	4313      	orrs	r3, r2
 8009678:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d035      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009688:	4b3e      	ldr	r3, [pc, #248]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a3d      	ldr	r2, [pc, #244]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800968e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009694:	f7fd fb8a 	bl	8006dac <HAL_GetTick>
 8009698:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800969a:	e009      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800969c:	f7fd fb86 	bl	8006dac <HAL_GetTick>
 80096a0:	4602      	mov	r2, r0
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d902      	bls.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	74fb      	strb	r3, [r7, #19]
        break;
 80096ae:	e005      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80096b0:	4b34      	ldr	r3, [pc, #208]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1ef      	bne.n	800969c <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 80096bc:	7cfb      	ldrb	r3, [r7, #19]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d113      	bne.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80096c2:	4b30      	ldr	r3, [pc, #192]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80096c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096d2:	492c      	ldr	r1, [pc, #176]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	3320      	adds	r3, #32
 80096de:	2102      	movs	r1, #2
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 f955 	bl	8009990 <RCCEx_PLLSAI2_Config>
 80096e6:	4603      	mov	r3, r0
 80096e8:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80096ea:	7cfb      	ldrb	r3, [r7, #19]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80096f0:	7cfb      	ldrb	r3, [r7, #19]
 80096f2:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d01e      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009700:	4b20      	ldr	r3, [pc, #128]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009710:	491c      	ldr	r1, [pc, #112]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009712:	4313      	orrs	r3, r2
 8009714:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800971e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009722:	d10c      	bne.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	3320      	adds	r3, #32
 8009728:	2101      	movs	r1, #1
 800972a:	4618      	mov	r0, r3
 800972c:	f000 f930 	bl	8009990 <RCCEx_PLLSAI2_Config>
 8009730:	4603      	mov	r3, r0
 8009732:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009734:	7cfb      	ldrb	r3, [r7, #19]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d001      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800973a:	7cfb      	ldrb	r3, [r7, #19]
 800973c:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009746:	2b00      	cmp	r3, #0
 8009748:	d017      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800974a:	4b0e      	ldr	r3, [pc, #56]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800974c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009750:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800975a:	490a      	ldr	r1, [pc, #40]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800975c:	4313      	orrs	r3, r2
 800975e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800976c:	d105      	bne.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800976e:	4b05      	ldr	r3, [pc, #20]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	4a04      	ldr	r2, [pc, #16]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8009774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009778:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800977a:	7cbb      	ldrb	r3, [r7, #18]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3718      	adds	r7, #24
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	40021000 	.word	0x40021000

08009788 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800978c:	4b05      	ldr	r3, [pc, #20]	; (80097a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a04      	ldr	r2, [pc, #16]	; (80097a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009792:	f043 0304 	orr.w	r3, r3, #4
 8009796:	6013      	str	r3, [r2, #0]
}
 8009798:	bf00      	nop
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	40021000 	.word	0x40021000

080097a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80097b6:	4b72      	ldr	r3, [pc, #456]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00e      	beq.n	80097e0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80097c2:	4b6f      	ldr	r3, [pc, #444]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f003 0203 	and.w	r2, r3, #3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d103      	bne.n	80097da <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
       ||
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d142      	bne.n	8009860 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80097da:	2301      	movs	r3, #1
 80097dc:	73fb      	strb	r3, [r7, #15]
 80097de:	e03f      	b.n	8009860 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b03      	cmp	r3, #3
 80097e6:	d018      	beq.n	800981a <RCCEx_PLLSAI1_Config+0x72>
 80097e8:	2b03      	cmp	r3, #3
 80097ea:	d825      	bhi.n	8009838 <RCCEx_PLLSAI1_Config+0x90>
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d002      	beq.n	80097f6 <RCCEx_PLLSAI1_Config+0x4e>
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d009      	beq.n	8009808 <RCCEx_PLLSAI1_Config+0x60>
 80097f4:	e020      	b.n	8009838 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80097f6:	4b62      	ldr	r3, [pc, #392]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0302 	and.w	r3, r3, #2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d11d      	bne.n	800983e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009806:	e01a      	b.n	800983e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009808:	4b5d      	ldr	r3, [pc, #372]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009810:	2b00      	cmp	r3, #0
 8009812:	d116      	bne.n	8009842 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009818:	e013      	b.n	8009842 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800981a:	4b59      	ldr	r3, [pc, #356]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10f      	bne.n	8009846 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009826:	4b56      	ldr	r3, [pc, #344]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d109      	bne.n	8009846 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8009832:	2301      	movs	r3, #1
 8009834:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009836:	e006      	b.n	8009846 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	73fb      	strb	r3, [r7, #15]
      break;
 800983c:	e004      	b.n	8009848 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800983e:	bf00      	nop
 8009840:	e002      	b.n	8009848 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009842:	bf00      	nop
 8009844:	e000      	b.n	8009848 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009846:	bf00      	nop
    }

    if(status == HAL_OK)
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d108      	bne.n	8009860 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800984e:	4b4c      	ldr	r3, [pc, #304]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	f023 0203 	bic.w	r2, r3, #3
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4949      	ldr	r1, [pc, #292]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 800985c:	4313      	orrs	r3, r2
 800985e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	2b00      	cmp	r3, #0
 8009864:	f040 8086 	bne.w	8009974 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009868:	4b45      	ldr	r3, [pc, #276]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a44      	ldr	r2, [pc, #272]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 800986e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009872:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009874:	f7fd fa9a 	bl	8006dac <HAL_GetTick>
 8009878:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800987a:	e009      	b.n	8009890 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800987c:	f7fd fa96 	bl	8006dac <HAL_GetTick>
 8009880:	4602      	mov	r2, r0
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	2b02      	cmp	r3, #2
 8009888:	d902      	bls.n	8009890 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	73fb      	strb	r3, [r7, #15]
        break;
 800988e:	e005      	b.n	800989c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009890:	4b3b      	ldr	r3, [pc, #236]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d1ef      	bne.n	800987c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800989c:	7bfb      	ldrb	r3, [r7, #15]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d168      	bne.n	8009974 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d113      	bne.n	80098d0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098a8:	4b35      	ldr	r3, [pc, #212]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 80098aa:	691a      	ldr	r2, [r3, #16]
 80098ac:	4b35      	ldr	r3, [pc, #212]	; (8009984 <RCCEx_PLLSAI1_Config+0x1dc>)
 80098ae:	4013      	ands	r3, r2
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6892      	ldr	r2, [r2, #8]
 80098b4:	0211      	lsls	r1, r2, #8
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	68d2      	ldr	r2, [r2, #12]
 80098ba:	06d2      	lsls	r2, r2, #27
 80098bc:	4311      	orrs	r1, r2
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	6852      	ldr	r2, [r2, #4]
 80098c2:	3a01      	subs	r2, #1
 80098c4:	0112      	lsls	r2, r2, #4
 80098c6:	430a      	orrs	r2, r1
 80098c8:	492d      	ldr	r1, [pc, #180]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 80098ca:	4313      	orrs	r3, r2
 80098cc:	610b      	str	r3, [r1, #16]
 80098ce:	e02d      	b.n	800992c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d115      	bne.n	8009902 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80098d6:	4b2a      	ldr	r3, [pc, #168]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 80098d8:	691a      	ldr	r2, [r3, #16]
 80098da:	4b2b      	ldr	r3, [pc, #172]	; (8009988 <RCCEx_PLLSAI1_Config+0x1e0>)
 80098dc:	4013      	ands	r3, r2
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	6892      	ldr	r2, [r2, #8]
 80098e2:	0211      	lsls	r1, r2, #8
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	6912      	ldr	r2, [r2, #16]
 80098e8:	0852      	lsrs	r2, r2, #1
 80098ea:	3a01      	subs	r2, #1
 80098ec:	0552      	lsls	r2, r2, #21
 80098ee:	4311      	orrs	r1, r2
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6852      	ldr	r2, [r2, #4]
 80098f4:	3a01      	subs	r2, #1
 80098f6:	0112      	lsls	r2, r2, #4
 80098f8:	430a      	orrs	r2, r1
 80098fa:	4921      	ldr	r1, [pc, #132]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	610b      	str	r3, [r1, #16]
 8009900:	e014      	b.n	800992c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009902:	4b1f      	ldr	r3, [pc, #124]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009904:	691a      	ldr	r2, [r3, #16]
 8009906:	4b21      	ldr	r3, [pc, #132]	; (800998c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009908:	4013      	ands	r3, r2
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	6892      	ldr	r2, [r2, #8]
 800990e:	0211      	lsls	r1, r2, #8
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	6952      	ldr	r2, [r2, #20]
 8009914:	0852      	lsrs	r2, r2, #1
 8009916:	3a01      	subs	r2, #1
 8009918:	0652      	lsls	r2, r2, #25
 800991a:	4311      	orrs	r1, r2
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	6852      	ldr	r2, [r2, #4]
 8009920:	3a01      	subs	r2, #1
 8009922:	0112      	lsls	r2, r2, #4
 8009924:	430a      	orrs	r2, r1
 8009926:	4916      	ldr	r1, [pc, #88]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009928:	4313      	orrs	r3, r2
 800992a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800992c:	4b14      	ldr	r3, [pc, #80]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a13      	ldr	r2, [pc, #76]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009932:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009936:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009938:	f7fd fa38 	bl	8006dac <HAL_GetTick>
 800993c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800993e:	e009      	b.n	8009954 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009940:	f7fd fa34 	bl	8006dac <HAL_GetTick>
 8009944:	4602      	mov	r2, r0
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	2b02      	cmp	r3, #2
 800994c:	d902      	bls.n	8009954 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	73fb      	strb	r3, [r7, #15]
          break;
 8009952:	e005      	b.n	8009960 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009954:	4b0a      	ldr	r3, [pc, #40]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d0ef      	beq.n	8009940 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d106      	bne.n	8009974 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009966:	4b06      	ldr	r3, [pc, #24]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009968:	691a      	ldr	r2, [r3, #16]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	4904      	ldr	r1, [pc, #16]	; (8009980 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009970:	4313      	orrs	r3, r2
 8009972:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009974:	7bfb      	ldrb	r3, [r7, #15]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	40021000 	.word	0x40021000
 8009984:	07ff800f 	.word	0x07ff800f
 8009988:	ff9f800f 	.word	0xff9f800f
 800998c:	f9ff800f 	.word	0xf9ff800f

08009990 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800999e:	4b72      	ldr	r3, [pc, #456]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	f003 0303 	and.w	r3, r3, #3
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00e      	beq.n	80099c8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80099aa:	4b6f      	ldr	r3, [pc, #444]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	f003 0203 	and.w	r2, r3, #3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d103      	bne.n	80099c2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
       ||
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d142      	bne.n	8009a48 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	73fb      	strb	r3, [r7, #15]
 80099c6:	e03f      	b.n	8009a48 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d018      	beq.n	8009a02 <RCCEx_PLLSAI2_Config+0x72>
 80099d0:	2b03      	cmp	r3, #3
 80099d2:	d825      	bhi.n	8009a20 <RCCEx_PLLSAI2_Config+0x90>
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d002      	beq.n	80099de <RCCEx_PLLSAI2_Config+0x4e>
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d009      	beq.n	80099f0 <RCCEx_PLLSAI2_Config+0x60>
 80099dc:	e020      	b.n	8009a20 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80099de:	4b62      	ldr	r3, [pc, #392]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 0302 	and.w	r3, r3, #2
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d11d      	bne.n	8009a26 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80099ee:	e01a      	b.n	8009a26 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80099f0:	4b5d      	ldr	r3, [pc, #372]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d116      	bne.n	8009a2a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009a00:	e013      	b.n	8009a2a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009a02:	4b59      	ldr	r3, [pc, #356]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10f      	bne.n	8009a2e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009a0e:	4b56      	ldr	r3, [pc, #344]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d109      	bne.n	8009a2e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009a1e:	e006      	b.n	8009a2e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	73fb      	strb	r3, [r7, #15]
      break;
 8009a24:	e004      	b.n	8009a30 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009a26:	bf00      	nop
 8009a28:	e002      	b.n	8009a30 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009a2a:	bf00      	nop
 8009a2c:	e000      	b.n	8009a30 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8009a2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d108      	bne.n	8009a48 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8009a36:	4b4c      	ldr	r3, [pc, #304]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	f023 0203 	bic.w	r2, r3, #3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4949      	ldr	r1, [pc, #292]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009a48:	7bfb      	ldrb	r3, [r7, #15]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f040 8086 	bne.w	8009b5c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009a50:	4b45      	ldr	r3, [pc, #276]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a44      	ldr	r2, [pc, #272]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a5c:	f7fd f9a6 	bl	8006dac <HAL_GetTick>
 8009a60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a62:	e009      	b.n	8009a78 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009a64:	f7fd f9a2 	bl	8006dac <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d902      	bls.n	8009a78 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	73fb      	strb	r3, [r7, #15]
        break;
 8009a76:	e005      	b.n	8009a84 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009a78:	4b3b      	ldr	r3, [pc, #236]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d1ef      	bne.n	8009a64 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d168      	bne.n	8009b5c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d113      	bne.n	8009ab8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009a90:	4b35      	ldr	r3, [pc, #212]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009a92:	695a      	ldr	r2, [r3, #20]
 8009a94:	4b35      	ldr	r3, [pc, #212]	; (8009b6c <RCCEx_PLLSAI2_Config+0x1dc>)
 8009a96:	4013      	ands	r3, r2
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	6892      	ldr	r2, [r2, #8]
 8009a9c:	0211      	lsls	r1, r2, #8
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	68d2      	ldr	r2, [r2, #12]
 8009aa2:	06d2      	lsls	r2, r2, #27
 8009aa4:	4311      	orrs	r1, r2
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	6852      	ldr	r2, [r2, #4]
 8009aaa:	3a01      	subs	r2, #1
 8009aac:	0112      	lsls	r2, r2, #4
 8009aae:	430a      	orrs	r2, r1
 8009ab0:	492d      	ldr	r1, [pc, #180]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	614b      	str	r3, [r1, #20]
 8009ab6:	e02d      	b.n	8009b14 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d115      	bne.n	8009aea <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009abe:	4b2a      	ldr	r3, [pc, #168]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ac0:	695a      	ldr	r2, [r3, #20]
 8009ac2:	4b2b      	ldr	r3, [pc, #172]	; (8009b70 <RCCEx_PLLSAI2_Config+0x1e0>)
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	6892      	ldr	r2, [r2, #8]
 8009aca:	0211      	lsls	r1, r2, #8
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	6912      	ldr	r2, [r2, #16]
 8009ad0:	0852      	lsrs	r2, r2, #1
 8009ad2:	3a01      	subs	r2, #1
 8009ad4:	0552      	lsls	r2, r2, #21
 8009ad6:	4311      	orrs	r1, r2
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	6852      	ldr	r2, [r2, #4]
 8009adc:	3a01      	subs	r2, #1
 8009ade:	0112      	lsls	r2, r2, #4
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	4921      	ldr	r1, [pc, #132]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	614b      	str	r3, [r1, #20]
 8009ae8:	e014      	b.n	8009b14 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009aea:	4b1f      	ldr	r3, [pc, #124]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009aec:	695a      	ldr	r2, [r3, #20]
 8009aee:	4b21      	ldr	r3, [pc, #132]	; (8009b74 <RCCEx_PLLSAI2_Config+0x1e4>)
 8009af0:	4013      	ands	r3, r2
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	6892      	ldr	r2, [r2, #8]
 8009af6:	0211      	lsls	r1, r2, #8
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	6952      	ldr	r2, [r2, #20]
 8009afc:	0852      	lsrs	r2, r2, #1
 8009afe:	3a01      	subs	r2, #1
 8009b00:	0652      	lsls	r2, r2, #25
 8009b02:	4311      	orrs	r1, r2
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	6852      	ldr	r2, [r2, #4]
 8009b08:	3a01      	subs	r2, #1
 8009b0a:	0112      	lsls	r2, r2, #4
 8009b0c:	430a      	orrs	r2, r1
 8009b0e:	4916      	ldr	r1, [pc, #88]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009b14:	4b14      	ldr	r3, [pc, #80]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a13      	ldr	r2, [pc, #76]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b20:	f7fd f944 	bl	8006dac <HAL_GetTick>
 8009b24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009b26:	e009      	b.n	8009b3c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009b28:	f7fd f940 	bl	8006dac <HAL_GetTick>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d902      	bls.n	8009b3c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8009b36:	2303      	movs	r3, #3
 8009b38:	73fb      	strb	r3, [r7, #15]
          break;
 8009b3a:	e005      	b.n	8009b48 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009b3c:	4b0a      	ldr	r3, [pc, #40]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d0ef      	beq.n	8009b28 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d106      	bne.n	8009b5c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009b4e:	4b06      	ldr	r3, [pc, #24]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009b50:	695a      	ldr	r2, [r3, #20]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	4904      	ldr	r1, [pc, #16]	; (8009b68 <RCCEx_PLLSAI2_Config+0x1d8>)
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop
 8009b68:	40021000 	.word	0x40021000
 8009b6c:	07ff800f 	.word	0x07ff800f
 8009b70:	ff9f800f 	.word	0xff9f800f
 8009b74:	f9ff800f 	.word	0xf9ff800f

08009b78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d06c      	beq.n	8009c64 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d106      	bne.n	8009ba4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7f7 fa5a 	bl	8001058 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2202      	movs	r2, #2
 8009ba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	22ca      	movs	r2, #202	; 0xca
 8009bb2:	625a      	str	r2, [r3, #36]	; 0x24
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2253      	movs	r2, #83	; 0x53
 8009bba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f9c2 	bl	8009f46 <RTC_EnterInitMode>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009bc6:	7bfb      	ldrb	r3, [r7, #15]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d14b      	bne.n	8009c64 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	6812      	ldr	r2, [r2, #0]
 8009bd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bde:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6899      	ldr	r1, [r3, #8]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	685a      	ldr	r2, [r3, #4]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	431a      	orrs	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	431a      	orrs	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	68d2      	ldr	r2, [r2, #12]
 8009c06:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6919      	ldr	r1, [r3, #16]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	041a      	lsls	r2, r3, #16
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	430a      	orrs	r2, r1
 8009c1a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 f9c5 	bl	8009fac <RTC_ExitInitMode>
 8009c22:	4603      	mov	r3, r0
 8009c24:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009c26:	7bfb      	ldrb	r3, [r7, #15]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d11b      	bne.n	8009c64 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f022 0203 	bic.w	r2, r2, #3
 8009c3a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	69da      	ldr	r2, [r3, #28]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	430a      	orrs	r2, r1
 8009c52:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	22ff      	movs	r2, #255	; 0xff
 8009c5a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009c6e:	b590      	push	{r4, r7, lr}
 8009c70:	b087      	sub	sp, #28
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	60f8      	str	r0, [r7, #12]
 8009c76:	60b9      	str	r1, [r7, #8]
 8009c78:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d101      	bne.n	8009c88 <HAL_RTC_SetTime+0x1a>
 8009c84:	2302      	movs	r3, #2
 8009c86:	e08b      	b.n	8009da0 <HAL_RTC_SetTime+0x132>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2202      	movs	r2, #2
 8009c94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	22ca      	movs	r2, #202	; 0xca
 8009c9e:	625a      	str	r2, [r3, #36]	; 0x24
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2253      	movs	r2, #83	; 0x53
 8009ca6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 f94c 	bl	8009f46 <RTC_EnterInitMode>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009cb2:	7cfb      	ldrb	r3, [r7, #19]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d163      	bne.n	8009d80 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d126      	bne.n	8009d0c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d102      	bne.n	8009cd2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 f9a6 	bl	800a028 <RTC_ByteToBcd2>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	785b      	ldrb	r3, [r3, #1]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f000 f99f 	bl	800a028 <RTC_ByteToBcd2>
 8009cea:	4603      	mov	r3, r0
 8009cec:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009cee:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	789b      	ldrb	r3, [r3, #2]
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f000 f997 	bl	800a028 <RTC_ByteToBcd2>
 8009cfa:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009cfc:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	78db      	ldrb	r3, [r3, #3]
 8009d04:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009d06:	4313      	orrs	r3, r2
 8009d08:	617b      	str	r3, [r7, #20]
 8009d0a:	e018      	b.n	8009d3e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d102      	bne.n	8009d20 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	785b      	ldrb	r3, [r3, #1]
 8009d2a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009d2c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009d32:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	78db      	ldrb	r3, [r3, #3]
 8009d38:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009d48:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009d4c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	689a      	ldr	r2, [r3, #8]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009d5c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	6899      	ldr	r1, [r3, #8]
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	68da      	ldr	r2, [r3, #12]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	431a      	orrs	r2, r3
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	430a      	orrs	r2, r1
 8009d74:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f000 f918 	bl	8009fac <RTC_ExitInitMode>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	22ff      	movs	r2, #255	; 0xff
 8009d86:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009d88:	7cfb      	ldrb	r3, [r7, #19]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d103      	bne.n	8009d96 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009d9e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	371c      	adds	r7, #28
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd90      	pop	{r4, r7, pc}

08009da8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b086      	sub	sp, #24
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009dd6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009dda:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	0c1b      	lsrs	r3, r3, #16
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009de6:	b2da      	uxtb	r2, r3
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	0a1b      	lsrs	r3, r3, #8
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	0d9b      	lsrs	r3, r3, #22
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	f003 0301 	and.w	r3, r3, #1
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d11a      	bne.n	8009e56 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 f91f 	bl	800a068 <RTC_Bcd2ToByte>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	785b      	ldrb	r3, [r3, #1]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 f916 	bl	800a068 <RTC_Bcd2ToByte>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	461a      	mov	r2, r3
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	789b      	ldrb	r3, [r3, #2]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f000 f90d 	bl	800a068 <RTC_Bcd2ToByte>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	461a      	mov	r2, r3
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3718      	adds	r7, #24
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009e76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009e7a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	0c1b      	lsrs	r3, r3, #16
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	0a1b      	lsrs	r3, r3, #8
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	f003 031f 	and.w	r3, r3, #31
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	0b5b      	lsrs	r3, r3, #13
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	f003 0307 	and.w	r3, r3, #7
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d11a      	bne.n	8009ef0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	78db      	ldrb	r3, [r3, #3]
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f000 f8d2 	bl	800a068 <RTC_Bcd2ToByte>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	785b      	ldrb	r3, [r3, #1]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f000 f8c9 	bl	800a068 <RTC_Bcd2ToByte>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	461a      	mov	r2, r3
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	789b      	ldrb	r3, [r3, #2]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 f8c0 	bl	800a068 <RTC_Bcd2ToByte>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	461a      	mov	r2, r3
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3718      	adds	r7, #24
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68da      	ldr	r2, [r3, #12]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009f10:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009f12:	f7fc ff4b 	bl	8006dac <HAL_GetTick>
 8009f16:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f18:	e009      	b.n	8009f2e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f1a:	f7fc ff47 	bl	8006dac <HAL_GetTick>
 8009f1e:	4602      	mov	r2, r0
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f28:	d901      	bls.n	8009f2e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e007      	b.n	8009f3e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	f003 0320 	and.w	r3, r3, #32
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d0ee      	beq.n	8009f1a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b084      	sub	sp, #16
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d120      	bne.n	8009fa2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f04f 32ff 	mov.w	r2, #4294967295
 8009f68:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009f6a:	f7fc ff1f 	bl	8006dac <HAL_GetTick>
 8009f6e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009f70:	e00d      	b.n	8009f8e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009f72:	f7fc ff1b 	bl	8006dac <HAL_GetTick>
 8009f76:	4602      	mov	r2, r0
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	1ad3      	subs	r3, r2, r3
 8009f7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f80:	d905      	bls.n	8009f8e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2203      	movs	r2, #3
 8009f8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d102      	bne.n	8009fa2 <RTC_EnterInitMode+0x5c>
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	2b03      	cmp	r3, #3
 8009fa0:	d1e7      	bne.n	8009f72 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8009fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8009fb8:	4b1a      	ldr	r3, [pc, #104]	; (800a024 <RTC_ExitInitMode+0x78>)
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	4a19      	ldr	r2, [pc, #100]	; (800a024 <RTC_ExitInitMode+0x78>)
 8009fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fc2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009fc4:	4b17      	ldr	r3, [pc, #92]	; (800a024 <RTC_ExitInitMode+0x78>)
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	f003 0320 	and.w	r3, r3, #32
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10c      	bne.n	8009fea <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7ff ff92 	bl	8009efa <HAL_RTC_WaitForSynchro>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d01e      	beq.n	800a01a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2203      	movs	r2, #3
 8009fe0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	73fb      	strb	r3, [r7, #15]
 8009fe8:	e017      	b.n	800a01a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009fea:	4b0e      	ldr	r3, [pc, #56]	; (800a024 <RTC_ExitInitMode+0x78>)
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	4a0d      	ldr	r2, [pc, #52]	; (800a024 <RTC_ExitInitMode+0x78>)
 8009ff0:	f023 0320 	bic.w	r3, r3, #32
 8009ff4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7ff ff7f 	bl	8009efa <HAL_RTC_WaitForSynchro>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d005      	beq.n	800a00e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2203      	movs	r2, #3
 800a006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a00e:	4b05      	ldr	r3, [pc, #20]	; (800a024 <RTC_ExitInitMode+0x78>)
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	4a04      	ldr	r2, [pc, #16]	; (800a024 <RTC_ExitInitMode+0x78>)
 800a014:	f043 0320 	orr.w	r3, r3, #32
 800a018:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	40002800 	.word	0x40002800

0800a028 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	4603      	mov	r3, r0
 800a030:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a032:	2300      	movs	r3, #0
 800a034:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800a03a:	e005      	b.n	800a048 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3301      	adds	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800a042:	7afb      	ldrb	r3, [r7, #11]
 800a044:	3b0a      	subs	r3, #10
 800a046:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 800a048:	7afb      	ldrb	r3, [r7, #11]
 800a04a:	2b09      	cmp	r3, #9
 800a04c:	d8f6      	bhi.n	800a03c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	011b      	lsls	r3, r3, #4
 800a054:	b2da      	uxtb	r2, r3
 800a056:	7afb      	ldrb	r3, [r7, #11]
 800a058:	4313      	orrs	r3, r2
 800a05a:	b2db      	uxtb	r3, r3
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	4603      	mov	r3, r0
 800a070:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800a072:	79fb      	ldrb	r3, [r7, #7]
 800a074:	091b      	lsrs	r3, r3, #4
 800a076:	b2db      	uxtb	r3, r3
 800a078:	461a      	mov	r2, r3
 800a07a:	0092      	lsls	r2, r2, #2
 800a07c:	4413      	add	r3, r2
 800a07e:	005b      	lsls	r3, r3, #1
 800a080:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800a082:	79fb      	ldrb	r3, [r7, #7]
 800a084:	f003 030f 	and.w	r3, r3, #15
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
 800a08c:	4413      	add	r3, r2
 800a08e:	b2db      	uxtb	r3, r3
}
 800a090:	4618      	mov	r0, r3
 800a092:	3714      	adds	r7, #20
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d101      	bne.n	800a0ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e049      	b.n	800a142 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d106      	bne.n	800a0c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7f6 fffa 	bl	80010bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	4619      	mov	r1, r3
 800a0da:	4610      	mov	r0, r2
 800a0dc:	f000 f9aa 	bl	800a434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a140:	2300      	movs	r3, #0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b082      	sub	sp, #8
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e049      	b.n	800a1f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	d106      	bne.n	800a176 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f841 	bl	800a1f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2202      	movs	r2, #2
 800a17a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3304      	adds	r3, #4
 800a186:	4619      	mov	r1, r3
 800a188:	4610      	mov	r0, r2
 800a18a:	f000 f953 	bl	800a434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2201      	movs	r2, #1
 800a192:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3708      	adds	r7, #8
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b086      	sub	sp, #24
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a218:	2300      	movs	r3, #0
 800a21a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a222:	2b01      	cmp	r3, #1
 800a224:	d101      	bne.n	800a22a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a226:	2302      	movs	r3, #2
 800a228:	e0ff      	b.n	800a42a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2201      	movs	r2, #1
 800a22e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b14      	cmp	r3, #20
 800a236:	f200 80f0 	bhi.w	800a41a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a23a:	a201      	add	r2, pc, #4	; (adr r2, 800a240 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a240:	0800a295 	.word	0x0800a295
 800a244:	0800a41b 	.word	0x0800a41b
 800a248:	0800a41b 	.word	0x0800a41b
 800a24c:	0800a41b 	.word	0x0800a41b
 800a250:	0800a2d5 	.word	0x0800a2d5
 800a254:	0800a41b 	.word	0x0800a41b
 800a258:	0800a41b 	.word	0x0800a41b
 800a25c:	0800a41b 	.word	0x0800a41b
 800a260:	0800a317 	.word	0x0800a317
 800a264:	0800a41b 	.word	0x0800a41b
 800a268:	0800a41b 	.word	0x0800a41b
 800a26c:	0800a41b 	.word	0x0800a41b
 800a270:	0800a357 	.word	0x0800a357
 800a274:	0800a41b 	.word	0x0800a41b
 800a278:	0800a41b 	.word	0x0800a41b
 800a27c:	0800a41b 	.word	0x0800a41b
 800a280:	0800a399 	.word	0x0800a399
 800a284:	0800a41b 	.word	0x0800a41b
 800a288:	0800a41b 	.word	0x0800a41b
 800a28c:	0800a41b 	.word	0x0800a41b
 800a290:	0800a3d9 	.word	0x0800a3d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68b9      	ldr	r1, [r7, #8]
 800a29a:	4618      	mov	r0, r3
 800a29c:	f000 f964 	bl	800a568 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	699a      	ldr	r2, [r3, #24]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f042 0208 	orr.w	r2, r2, #8
 800a2ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	699a      	ldr	r2, [r3, #24]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f022 0204 	bic.w	r2, r2, #4
 800a2be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	6999      	ldr	r1, [r3, #24]
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	691a      	ldr	r2, [r3, #16]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	430a      	orrs	r2, r1
 800a2d0:	619a      	str	r2, [r3, #24]
      break;
 800a2d2:	e0a5      	b.n	800a420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68b9      	ldr	r1, [r7, #8]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 f9d4 	bl	800a688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	699a      	ldr	r2, [r3, #24]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	699a      	ldr	r2, [r3, #24]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	6999      	ldr	r1, [r3, #24]
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	021a      	lsls	r2, r3, #8
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	430a      	orrs	r2, r1
 800a312:	619a      	str	r2, [r3, #24]
      break;
 800a314:	e084      	b.n	800a420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	68b9      	ldr	r1, [r7, #8]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f000 fa3d 	bl	800a79c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	69da      	ldr	r2, [r3, #28]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f042 0208 	orr.w	r2, r2, #8
 800a330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	69da      	ldr	r2, [r3, #28]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f022 0204 	bic.w	r2, r2, #4
 800a340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	69d9      	ldr	r1, [r3, #28]
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	691a      	ldr	r2, [r3, #16]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	430a      	orrs	r2, r1
 800a352:	61da      	str	r2, [r3, #28]
      break;
 800a354:	e064      	b.n	800a420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68b9      	ldr	r1, [r7, #8]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 faa5 	bl	800a8ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	69da      	ldr	r2, [r3, #28]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	69da      	ldr	r2, [r3, #28]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	69d9      	ldr	r1, [r3, #28]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	691b      	ldr	r3, [r3, #16]
 800a38c:	021a      	lsls	r2, r3, #8
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	430a      	orrs	r2, r1
 800a394:	61da      	str	r2, [r3, #28]
      break;
 800a396:	e043      	b.n	800a420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68b9      	ldr	r1, [r7, #8]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f000 faee 	bl	800a980 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f042 0208 	orr.w	r2, r2, #8
 800a3b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f022 0204 	bic.w	r2, r2, #4
 800a3c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	691a      	ldr	r2, [r3, #16]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	430a      	orrs	r2, r1
 800a3d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a3d6:	e023      	b.n	800a420 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68b9      	ldr	r1, [r7, #8]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 fb32 	bl	800aa48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a402:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	021a      	lsls	r2, r3, #8
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	430a      	orrs	r2, r1
 800a416:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a418:	e002      	b.n	800a420 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	75fb      	strb	r3, [r7, #23]
      break;
 800a41e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a428:	7dfb      	ldrb	r3, [r7, #23]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3718      	adds	r7, #24
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop

0800a434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a434:	b480      	push	{r7}
 800a436:	b085      	sub	sp, #20
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a40      	ldr	r2, [pc, #256]	; (800a548 <TIM_Base_SetConfig+0x114>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d013      	beq.n	800a474 <TIM_Base_SetConfig+0x40>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a452:	d00f      	beq.n	800a474 <TIM_Base_SetConfig+0x40>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a3d      	ldr	r2, [pc, #244]	; (800a54c <TIM_Base_SetConfig+0x118>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d00b      	beq.n	800a474 <TIM_Base_SetConfig+0x40>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a3c      	ldr	r2, [pc, #240]	; (800a550 <TIM_Base_SetConfig+0x11c>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d007      	beq.n	800a474 <TIM_Base_SetConfig+0x40>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a3b      	ldr	r2, [pc, #236]	; (800a554 <TIM_Base_SetConfig+0x120>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d003      	beq.n	800a474 <TIM_Base_SetConfig+0x40>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a3a      	ldr	r2, [pc, #232]	; (800a558 <TIM_Base_SetConfig+0x124>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d108      	bne.n	800a486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a47a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	4313      	orrs	r3, r2
 800a484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a2f      	ldr	r2, [pc, #188]	; (800a548 <TIM_Base_SetConfig+0x114>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d01f      	beq.n	800a4ce <TIM_Base_SetConfig+0x9a>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a494:	d01b      	beq.n	800a4ce <TIM_Base_SetConfig+0x9a>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a2c      	ldr	r2, [pc, #176]	; (800a54c <TIM_Base_SetConfig+0x118>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d017      	beq.n	800a4ce <TIM_Base_SetConfig+0x9a>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a2b      	ldr	r2, [pc, #172]	; (800a550 <TIM_Base_SetConfig+0x11c>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d013      	beq.n	800a4ce <TIM_Base_SetConfig+0x9a>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a2a      	ldr	r2, [pc, #168]	; (800a554 <TIM_Base_SetConfig+0x120>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d00f      	beq.n	800a4ce <TIM_Base_SetConfig+0x9a>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a29      	ldr	r2, [pc, #164]	; (800a558 <TIM_Base_SetConfig+0x124>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d00b      	beq.n	800a4ce <TIM_Base_SetConfig+0x9a>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a28      	ldr	r2, [pc, #160]	; (800a55c <TIM_Base_SetConfig+0x128>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d007      	beq.n	800a4ce <TIM_Base_SetConfig+0x9a>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a27      	ldr	r2, [pc, #156]	; (800a560 <TIM_Base_SetConfig+0x12c>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d003      	beq.n	800a4ce <TIM_Base_SetConfig+0x9a>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	4a26      	ldr	r2, [pc, #152]	; (800a564 <TIM_Base_SetConfig+0x130>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d108      	bne.n	800a4e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	689a      	ldr	r2, [r3, #8]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a10      	ldr	r2, [pc, #64]	; (800a548 <TIM_Base_SetConfig+0x114>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d00f      	beq.n	800a52c <TIM_Base_SetConfig+0xf8>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a12      	ldr	r2, [pc, #72]	; (800a558 <TIM_Base_SetConfig+0x124>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d00b      	beq.n	800a52c <TIM_Base_SetConfig+0xf8>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a11      	ldr	r2, [pc, #68]	; (800a55c <TIM_Base_SetConfig+0x128>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d007      	beq.n	800a52c <TIM_Base_SetConfig+0xf8>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a10      	ldr	r2, [pc, #64]	; (800a560 <TIM_Base_SetConfig+0x12c>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d003      	beq.n	800a52c <TIM_Base_SetConfig+0xf8>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a0f      	ldr	r2, [pc, #60]	; (800a564 <TIM_Base_SetConfig+0x130>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d103      	bne.n	800a534 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	691a      	ldr	r2, [r3, #16]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	615a      	str	r2, [r3, #20]
}
 800a53a:	bf00      	nop
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	40012c00 	.word	0x40012c00
 800a54c:	40000400 	.word	0x40000400
 800a550:	40000800 	.word	0x40000800
 800a554:	40000c00 	.word	0x40000c00
 800a558:	40013400 	.word	0x40013400
 800a55c:	40014000 	.word	0x40014000
 800a560:	40014400 	.word	0x40014400
 800a564:	40014800 	.word	0x40014800

0800a568 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a568:	b480      	push	{r7}
 800a56a:	b087      	sub	sp, #28
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	f023 0201 	bic.w	r2, r3, #1
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a1b      	ldr	r3, [r3, #32]
 800a582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a59a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f023 0303 	bic.w	r3, r3, #3
 800a5a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	f023 0302 	bic.w	r3, r3, #2
 800a5b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a2c      	ldr	r2, [pc, #176]	; (800a674 <TIM_OC1_SetConfig+0x10c>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d00f      	beq.n	800a5e8 <TIM_OC1_SetConfig+0x80>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a2b      	ldr	r2, [pc, #172]	; (800a678 <TIM_OC1_SetConfig+0x110>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d00b      	beq.n	800a5e8 <TIM_OC1_SetConfig+0x80>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4a2a      	ldr	r2, [pc, #168]	; (800a67c <TIM_OC1_SetConfig+0x114>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d007      	beq.n	800a5e8 <TIM_OC1_SetConfig+0x80>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4a29      	ldr	r2, [pc, #164]	; (800a680 <TIM_OC1_SetConfig+0x118>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d003      	beq.n	800a5e8 <TIM_OC1_SetConfig+0x80>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	4a28      	ldr	r2, [pc, #160]	; (800a684 <TIM_OC1_SetConfig+0x11c>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d10c      	bne.n	800a602 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	f023 0308 	bic.w	r3, r3, #8
 800a5ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	697a      	ldr	r2, [r7, #20]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	f023 0304 	bic.w	r3, r3, #4
 800a600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a1b      	ldr	r2, [pc, #108]	; (800a674 <TIM_OC1_SetConfig+0x10c>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d00f      	beq.n	800a62a <TIM_OC1_SetConfig+0xc2>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a1a      	ldr	r2, [pc, #104]	; (800a678 <TIM_OC1_SetConfig+0x110>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d00b      	beq.n	800a62a <TIM_OC1_SetConfig+0xc2>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4a19      	ldr	r2, [pc, #100]	; (800a67c <TIM_OC1_SetConfig+0x114>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d007      	beq.n	800a62a <TIM_OC1_SetConfig+0xc2>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a18      	ldr	r2, [pc, #96]	; (800a680 <TIM_OC1_SetConfig+0x118>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d003      	beq.n	800a62a <TIM_OC1_SetConfig+0xc2>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a17      	ldr	r2, [pc, #92]	; (800a684 <TIM_OC1_SetConfig+0x11c>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d111      	bne.n	800a64e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	693a      	ldr	r2, [r7, #16]
 800a640:	4313      	orrs	r3, r2
 800a642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	699b      	ldr	r3, [r3, #24]
 800a648:	693a      	ldr	r2, [r7, #16]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	697a      	ldr	r2, [r7, #20]
 800a666:	621a      	str	r2, [r3, #32]
}
 800a668:	bf00      	nop
 800a66a:	371c      	adds	r7, #28
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	40012c00 	.word	0x40012c00
 800a678:	40013400 	.word	0x40013400
 800a67c:	40014000 	.word	0x40014000
 800a680:	40014400 	.word	0x40014400
 800a684:	40014800 	.word	0x40014800

0800a688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a688:	b480      	push	{r7}
 800a68a:	b087      	sub	sp, #28
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a1b      	ldr	r3, [r3, #32]
 800a696:	f023 0210 	bic.w	r2, r3, #16
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
 800a6a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	021b      	lsls	r3, r3, #8
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	f023 0320 	bic.w	r3, r3, #32
 800a6d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	011b      	lsls	r3, r3, #4
 800a6de:	697a      	ldr	r2, [r7, #20]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a28      	ldr	r2, [pc, #160]	; (800a788 <TIM_OC2_SetConfig+0x100>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d003      	beq.n	800a6f4 <TIM_OC2_SetConfig+0x6c>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a27      	ldr	r2, [pc, #156]	; (800a78c <TIM_OC2_SetConfig+0x104>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d10d      	bne.n	800a710 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	011b      	lsls	r3, r3, #4
 800a702:	697a      	ldr	r2, [r7, #20]
 800a704:	4313      	orrs	r3, r2
 800a706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a70e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a1d      	ldr	r2, [pc, #116]	; (800a788 <TIM_OC2_SetConfig+0x100>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d00f      	beq.n	800a738 <TIM_OC2_SetConfig+0xb0>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a1c      	ldr	r2, [pc, #112]	; (800a78c <TIM_OC2_SetConfig+0x104>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d00b      	beq.n	800a738 <TIM_OC2_SetConfig+0xb0>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a1b      	ldr	r2, [pc, #108]	; (800a790 <TIM_OC2_SetConfig+0x108>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d007      	beq.n	800a738 <TIM_OC2_SetConfig+0xb0>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a1a      	ldr	r2, [pc, #104]	; (800a794 <TIM_OC2_SetConfig+0x10c>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d003      	beq.n	800a738 <TIM_OC2_SetConfig+0xb0>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a19      	ldr	r2, [pc, #100]	; (800a798 <TIM_OC2_SetConfig+0x110>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d113      	bne.n	800a760 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a73e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a746:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	695b      	ldr	r3, [r3, #20]
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	4313      	orrs	r3, r2
 800a752:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	693a      	ldr	r2, [r7, #16]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	693a      	ldr	r2, [r7, #16]
 800a764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	621a      	str	r2, [r3, #32]
}
 800a77a:	bf00      	nop
 800a77c:	371c      	adds	r7, #28
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	40012c00 	.word	0x40012c00
 800a78c:	40013400 	.word	0x40013400
 800a790:	40014000 	.word	0x40014000
 800a794:	40014400 	.word	0x40014400
 800a798:	40014800 	.word	0x40014800

0800a79c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b087      	sub	sp, #28
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a1b      	ldr	r3, [r3, #32]
 800a7b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f023 0303 	bic.w	r3, r3, #3
 800a7d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a7e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	021b      	lsls	r3, r3, #8
 800a7f0:	697a      	ldr	r2, [r7, #20]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a27      	ldr	r2, [pc, #156]	; (800a898 <TIM_OC3_SetConfig+0xfc>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d003      	beq.n	800a806 <TIM_OC3_SetConfig+0x6a>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a26      	ldr	r2, [pc, #152]	; (800a89c <TIM_OC3_SetConfig+0x100>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d10d      	bne.n	800a822 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a80c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	021b      	lsls	r3, r3, #8
 800a814:	697a      	ldr	r2, [r7, #20]
 800a816:	4313      	orrs	r3, r2
 800a818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a1c      	ldr	r2, [pc, #112]	; (800a898 <TIM_OC3_SetConfig+0xfc>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d00f      	beq.n	800a84a <TIM_OC3_SetConfig+0xae>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a1b      	ldr	r2, [pc, #108]	; (800a89c <TIM_OC3_SetConfig+0x100>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d00b      	beq.n	800a84a <TIM_OC3_SetConfig+0xae>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a1a      	ldr	r2, [pc, #104]	; (800a8a0 <TIM_OC3_SetConfig+0x104>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d007      	beq.n	800a84a <TIM_OC3_SetConfig+0xae>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a19      	ldr	r2, [pc, #100]	; (800a8a4 <TIM_OC3_SetConfig+0x108>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d003      	beq.n	800a84a <TIM_OC3_SetConfig+0xae>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a18      	ldr	r2, [pc, #96]	; (800a8a8 <TIM_OC3_SetConfig+0x10c>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d113      	bne.n	800a872 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	695b      	ldr	r3, [r3, #20]
 800a85e:	011b      	lsls	r3, r3, #4
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	4313      	orrs	r3, r2
 800a864:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	011b      	lsls	r3, r3, #4
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	4313      	orrs	r3, r2
 800a870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	693a      	ldr	r2, [r7, #16]
 800a876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	685a      	ldr	r2, [r3, #4]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	697a      	ldr	r2, [r7, #20]
 800a88a:	621a      	str	r2, [r3, #32]
}
 800a88c:	bf00      	nop
 800a88e:	371c      	adds	r7, #28
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	40012c00 	.word	0x40012c00
 800a89c:	40013400 	.word	0x40013400
 800a8a0:	40014000 	.word	0x40014000
 800a8a4:	40014400 	.word	0x40014400
 800a8a8:	40014800 	.word	0x40014800

0800a8ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b087      	sub	sp, #28
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a1b      	ldr	r3, [r3, #32]
 800a8c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a8da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	021b      	lsls	r3, r3, #8
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	031b      	lsls	r3, r3, #12
 800a902:	693a      	ldr	r2, [r7, #16]
 800a904:	4313      	orrs	r3, r2
 800a906:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a18      	ldr	r2, [pc, #96]	; (800a96c <TIM_OC4_SetConfig+0xc0>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d00f      	beq.n	800a930 <TIM_OC4_SetConfig+0x84>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a17      	ldr	r2, [pc, #92]	; (800a970 <TIM_OC4_SetConfig+0xc4>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d00b      	beq.n	800a930 <TIM_OC4_SetConfig+0x84>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a16      	ldr	r2, [pc, #88]	; (800a974 <TIM_OC4_SetConfig+0xc8>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d007      	beq.n	800a930 <TIM_OC4_SetConfig+0x84>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a15      	ldr	r2, [pc, #84]	; (800a978 <TIM_OC4_SetConfig+0xcc>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d003      	beq.n	800a930 <TIM_OC4_SetConfig+0x84>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a14      	ldr	r2, [pc, #80]	; (800a97c <TIM_OC4_SetConfig+0xd0>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d109      	bne.n	800a944 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	019b      	lsls	r3, r3, #6
 800a93e:	697a      	ldr	r2, [r7, #20]
 800a940:	4313      	orrs	r3, r2
 800a942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	685a      	ldr	r2, [r3, #4]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	621a      	str	r2, [r3, #32]
}
 800a95e:	bf00      	nop
 800a960:	371c      	adds	r7, #28
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	40012c00 	.word	0x40012c00
 800a970:	40013400 	.word	0x40013400
 800a974:	40014000 	.word	0x40014000
 800a978:	40014400 	.word	0x40014400
 800a97c:	40014800 	.word	0x40014800

0800a980 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a980:	b480      	push	{r7}
 800a982:	b087      	sub	sp, #28
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a1b      	ldr	r3, [r3, #32]
 800a98e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6a1b      	ldr	r3, [r3, #32]
 800a99a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68fa      	ldr	r2, [r7, #12]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a9c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	041b      	lsls	r3, r3, #16
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	4a17      	ldr	r2, [pc, #92]	; (800aa34 <TIM_OC5_SetConfig+0xb4>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d00f      	beq.n	800a9fa <TIM_OC5_SetConfig+0x7a>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4a16      	ldr	r2, [pc, #88]	; (800aa38 <TIM_OC5_SetConfig+0xb8>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d00b      	beq.n	800a9fa <TIM_OC5_SetConfig+0x7a>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4a15      	ldr	r2, [pc, #84]	; (800aa3c <TIM_OC5_SetConfig+0xbc>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d007      	beq.n	800a9fa <TIM_OC5_SetConfig+0x7a>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4a14      	ldr	r2, [pc, #80]	; (800aa40 <TIM_OC5_SetConfig+0xc0>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d003      	beq.n	800a9fa <TIM_OC5_SetConfig+0x7a>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	4a13      	ldr	r2, [pc, #76]	; (800aa44 <TIM_OC5_SetConfig+0xc4>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d109      	bne.n	800aa0e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	695b      	ldr	r3, [r3, #20]
 800aa06:	021b      	lsls	r3, r3, #8
 800aa08:	697a      	ldr	r2, [r7, #20]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	697a      	ldr	r2, [r7, #20]
 800aa12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	685a      	ldr	r2, [r3, #4]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	621a      	str	r2, [r3, #32]
}
 800aa28:	bf00      	nop
 800aa2a:	371c      	adds	r7, #28
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	40012c00 	.word	0x40012c00
 800aa38:	40013400 	.word	0x40013400
 800aa3c:	40014000 	.word	0x40014000
 800aa40:	40014400 	.word	0x40014400
 800aa44:	40014800 	.word	0x40014800

0800aa48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b087      	sub	sp, #28
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	021b      	lsls	r3, r3, #8
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	051b      	lsls	r3, r3, #20
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a18      	ldr	r2, [pc, #96]	; (800ab00 <TIM_OC6_SetConfig+0xb8>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d00f      	beq.n	800aac4 <TIM_OC6_SetConfig+0x7c>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a17      	ldr	r2, [pc, #92]	; (800ab04 <TIM_OC6_SetConfig+0xbc>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d00b      	beq.n	800aac4 <TIM_OC6_SetConfig+0x7c>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	4a16      	ldr	r2, [pc, #88]	; (800ab08 <TIM_OC6_SetConfig+0xc0>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d007      	beq.n	800aac4 <TIM_OC6_SetConfig+0x7c>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a15      	ldr	r2, [pc, #84]	; (800ab0c <TIM_OC6_SetConfig+0xc4>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d003      	beq.n	800aac4 <TIM_OC6_SetConfig+0x7c>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a14      	ldr	r2, [pc, #80]	; (800ab10 <TIM_OC6_SetConfig+0xc8>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d109      	bne.n	800aad8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aaca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	695b      	ldr	r3, [r3, #20]
 800aad0:	029b      	lsls	r3, r3, #10
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	4313      	orrs	r3, r2
 800aad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	693a      	ldr	r2, [r7, #16]
 800aaf0:	621a      	str	r2, [r3, #32]
}
 800aaf2:	bf00      	nop
 800aaf4:	371c      	adds	r7, #28
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	40012c00 	.word	0x40012c00
 800ab04:	40013400 	.word	0x40013400
 800ab08:	40014000 	.word	0x40014000
 800ab0c:	40014400 	.word	0x40014400
 800ab10:	40014800 	.word	0x40014800

0800ab14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d101      	bne.n	800ab30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	e065      	b.n	800abfc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	4313      	orrs	r3, r2
 800ab44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	041b      	lsls	r3, r3, #16
 800aba6:	4313      	orrs	r3, r2
 800aba8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a16      	ldr	r2, [pc, #88]	; (800ac08 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d004      	beq.n	800abbe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a14      	ldr	r2, [pc, #80]	; (800ac0c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d115      	bne.n	800abea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc8:	051b      	lsls	r3, r3, #20
 800abca:	4313      	orrs	r3, r2
 800abcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	69db      	ldr	r3, [r3, #28]
 800abd8:	4313      	orrs	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	40012c00 	.word	0x40012c00
 800ac0c:	40013400 	.word	0x40013400

0800ac10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d101      	bne.n	800ac22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e042      	b.n	800aca8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d106      	bne.n	800ac3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7f6 fa97 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2224      	movs	r2, #36	; 0x24
 800ac3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f022 0201 	bic.w	r2, r2, #1
 800ac50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 f8c4 	bl	800ade0 <UART_SetConfig>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d101      	bne.n	800ac62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e022      	b.n	800aca8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d002      	beq.n	800ac70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fb80 	bl	800b370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	689a      	ldr	r2, [r3, #8]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	681a      	ldr	r2, [r3, #0]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f042 0201 	orr.w	r2, r2, #1
 800ac9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fc07 	bl	800b4b4 <UART_CheckIdleState>
 800aca6:	4603      	mov	r3, r0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b08a      	sub	sp, #40	; 0x28
 800acb4:	af02      	add	r7, sp, #8
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	60b9      	str	r1, [r7, #8]
 800acba:	603b      	str	r3, [r7, #0]
 800acbc:	4613      	mov	r3, r2
 800acbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acc6:	2b20      	cmp	r3, #32
 800acc8:	f040 8084 	bne.w	800add4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d002      	beq.n	800acd8 <HAL_UART_Transmit+0x28>
 800acd2:	88fb      	ldrh	r3, [r7, #6]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d101      	bne.n	800acdc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	e07c      	b.n	800add6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d101      	bne.n	800acea <HAL_UART_Transmit+0x3a>
 800ace6:	2302      	movs	r3, #2
 800ace8:	e075      	b.n	800add6 <HAL_UART_Transmit+0x126>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2201      	movs	r2, #1
 800acee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2221      	movs	r2, #33	; 0x21
 800acfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad02:	f7fc f853 	bl	8006dac <HAL_GetTick>
 800ad06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	88fa      	ldrh	r2, [r7, #6]
 800ad0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	88fa      	ldrh	r2, [r7, #6]
 800ad14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad20:	d108      	bne.n	800ad34 <HAL_UART_Transmit+0x84>
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d104      	bne.n	800ad34 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	61bb      	str	r3, [r7, #24]
 800ad32:	e003      	b.n	800ad3c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ad44:	e02d      	b.n	800ada2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	9300      	str	r3, [sp, #0]
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	2180      	movs	r1, #128	; 0x80
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f000 fbfa 	bl	800b54a <UART_WaitOnFlagUntilTimeout>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ad5c:	2303      	movs	r3, #3
 800ad5e:	e03a      	b.n	800add6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10b      	bne.n	800ad7e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	881a      	ldrh	r2, [r3, #0]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad72:	b292      	uxth	r2, r2
 800ad74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	3302      	adds	r3, #2
 800ad7a:	61bb      	str	r3, [r7, #24]
 800ad7c:	e008      	b.n	800ad90 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad7e:	69fb      	ldr	r3, [r7, #28]
 800ad80:	781a      	ldrb	r2, [r3, #0]
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	b292      	uxth	r2, r2
 800ad88:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1cb      	bne.n	800ad46 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	9300      	str	r3, [sp, #0]
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2200      	movs	r2, #0
 800adb6:	2140      	movs	r1, #64	; 0x40
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f000 fbc6 	bl	800b54a <UART_WaitOnFlagUntilTimeout>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d001      	beq.n	800adc8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 800adc4:	2303      	movs	r3, #3
 800adc6:	e006      	b.n	800add6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2220      	movs	r2, #32
 800adcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800add0:	2300      	movs	r3, #0
 800add2:	e000      	b.n	800add6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 800add4:	2302      	movs	r3, #2
  }
}
 800add6:	4618      	mov	r0, r3
 800add8:	3720      	adds	r7, #32
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}
	...

0800ade0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ade0:	b5b0      	push	{r4, r5, r7, lr}
 800ade2:	b088      	sub	sp, #32
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ade8:	2300      	movs	r3, #0
 800adea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	689a      	ldr	r2, [r3, #8]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	691b      	ldr	r3, [r3, #16]
 800adf4:	431a      	orrs	r2, r3
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	695b      	ldr	r3, [r3, #20]
 800adfa:	431a      	orrs	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	69db      	ldr	r3, [r3, #28]
 800ae00:	4313      	orrs	r3, r2
 800ae02:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	4bb1      	ldr	r3, [pc, #708]	; (800b0d0 <UART_SetConfig+0x2f0>)
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	6812      	ldr	r2, [r2, #0]
 800ae12:	69f9      	ldr	r1, [r7, #28]
 800ae14:	430b      	orrs	r3, r1
 800ae16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	68da      	ldr	r2, [r3, #12]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	430a      	orrs	r2, r1
 800ae2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	699b      	ldr	r3, [r3, #24]
 800ae32:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4aa6      	ldr	r2, [pc, #664]	; (800b0d4 <UART_SetConfig+0x2f4>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d004      	beq.n	800ae48 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	69fa      	ldr	r2, [r7, #28]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ae52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	6812      	ldr	r2, [r2, #0]
 800ae5a:	69f9      	ldr	r1, [r7, #28]
 800ae5c:	430b      	orrs	r3, r1
 800ae5e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae66:	f023 010f 	bic.w	r1, r3, #15
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	430a      	orrs	r2, r1
 800ae74:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a97      	ldr	r2, [pc, #604]	; (800b0d8 <UART_SetConfig+0x2f8>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d120      	bne.n	800aec2 <UART_SetConfig+0xe2>
 800ae80:	4b96      	ldr	r3, [pc, #600]	; (800b0dc <UART_SetConfig+0x2fc>)
 800ae82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae86:	f003 0303 	and.w	r3, r3, #3
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	d816      	bhi.n	800aebc <UART_SetConfig+0xdc>
 800ae8e:	a201      	add	r2, pc, #4	; (adr r2, 800ae94 <UART_SetConfig+0xb4>)
 800ae90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae94:	0800aea5 	.word	0x0800aea5
 800ae98:	0800aeb1 	.word	0x0800aeb1
 800ae9c:	0800aeab 	.word	0x0800aeab
 800aea0:	0800aeb7 	.word	0x0800aeb7
 800aea4:	2301      	movs	r3, #1
 800aea6:	76fb      	strb	r3, [r7, #27]
 800aea8:	e0e7      	b.n	800b07a <UART_SetConfig+0x29a>
 800aeaa:	2302      	movs	r3, #2
 800aeac:	76fb      	strb	r3, [r7, #27]
 800aeae:	e0e4      	b.n	800b07a <UART_SetConfig+0x29a>
 800aeb0:	2304      	movs	r3, #4
 800aeb2:	76fb      	strb	r3, [r7, #27]
 800aeb4:	e0e1      	b.n	800b07a <UART_SetConfig+0x29a>
 800aeb6:	2308      	movs	r3, #8
 800aeb8:	76fb      	strb	r3, [r7, #27]
 800aeba:	e0de      	b.n	800b07a <UART_SetConfig+0x29a>
 800aebc:	2310      	movs	r3, #16
 800aebe:	76fb      	strb	r3, [r7, #27]
 800aec0:	e0db      	b.n	800b07a <UART_SetConfig+0x29a>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a86      	ldr	r2, [pc, #536]	; (800b0e0 <UART_SetConfig+0x300>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d132      	bne.n	800af32 <UART_SetConfig+0x152>
 800aecc:	4b83      	ldr	r3, [pc, #524]	; (800b0dc <UART_SetConfig+0x2fc>)
 800aece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aed2:	f003 030c 	and.w	r3, r3, #12
 800aed6:	2b0c      	cmp	r3, #12
 800aed8:	d828      	bhi.n	800af2c <UART_SetConfig+0x14c>
 800aeda:	a201      	add	r2, pc, #4	; (adr r2, 800aee0 <UART_SetConfig+0x100>)
 800aedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee0:	0800af15 	.word	0x0800af15
 800aee4:	0800af2d 	.word	0x0800af2d
 800aee8:	0800af2d 	.word	0x0800af2d
 800aeec:	0800af2d 	.word	0x0800af2d
 800aef0:	0800af21 	.word	0x0800af21
 800aef4:	0800af2d 	.word	0x0800af2d
 800aef8:	0800af2d 	.word	0x0800af2d
 800aefc:	0800af2d 	.word	0x0800af2d
 800af00:	0800af1b 	.word	0x0800af1b
 800af04:	0800af2d 	.word	0x0800af2d
 800af08:	0800af2d 	.word	0x0800af2d
 800af0c:	0800af2d 	.word	0x0800af2d
 800af10:	0800af27 	.word	0x0800af27
 800af14:	2300      	movs	r3, #0
 800af16:	76fb      	strb	r3, [r7, #27]
 800af18:	e0af      	b.n	800b07a <UART_SetConfig+0x29a>
 800af1a:	2302      	movs	r3, #2
 800af1c:	76fb      	strb	r3, [r7, #27]
 800af1e:	e0ac      	b.n	800b07a <UART_SetConfig+0x29a>
 800af20:	2304      	movs	r3, #4
 800af22:	76fb      	strb	r3, [r7, #27]
 800af24:	e0a9      	b.n	800b07a <UART_SetConfig+0x29a>
 800af26:	2308      	movs	r3, #8
 800af28:	76fb      	strb	r3, [r7, #27]
 800af2a:	e0a6      	b.n	800b07a <UART_SetConfig+0x29a>
 800af2c:	2310      	movs	r3, #16
 800af2e:	76fb      	strb	r3, [r7, #27]
 800af30:	e0a3      	b.n	800b07a <UART_SetConfig+0x29a>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a6b      	ldr	r2, [pc, #428]	; (800b0e4 <UART_SetConfig+0x304>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d120      	bne.n	800af7e <UART_SetConfig+0x19e>
 800af3c:	4b67      	ldr	r3, [pc, #412]	; (800b0dc <UART_SetConfig+0x2fc>)
 800af3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800af46:	2b30      	cmp	r3, #48	; 0x30
 800af48:	d013      	beq.n	800af72 <UART_SetConfig+0x192>
 800af4a:	2b30      	cmp	r3, #48	; 0x30
 800af4c:	d814      	bhi.n	800af78 <UART_SetConfig+0x198>
 800af4e:	2b20      	cmp	r3, #32
 800af50:	d009      	beq.n	800af66 <UART_SetConfig+0x186>
 800af52:	2b20      	cmp	r3, #32
 800af54:	d810      	bhi.n	800af78 <UART_SetConfig+0x198>
 800af56:	2b00      	cmp	r3, #0
 800af58:	d002      	beq.n	800af60 <UART_SetConfig+0x180>
 800af5a:	2b10      	cmp	r3, #16
 800af5c:	d006      	beq.n	800af6c <UART_SetConfig+0x18c>
 800af5e:	e00b      	b.n	800af78 <UART_SetConfig+0x198>
 800af60:	2300      	movs	r3, #0
 800af62:	76fb      	strb	r3, [r7, #27]
 800af64:	e089      	b.n	800b07a <UART_SetConfig+0x29a>
 800af66:	2302      	movs	r3, #2
 800af68:	76fb      	strb	r3, [r7, #27]
 800af6a:	e086      	b.n	800b07a <UART_SetConfig+0x29a>
 800af6c:	2304      	movs	r3, #4
 800af6e:	76fb      	strb	r3, [r7, #27]
 800af70:	e083      	b.n	800b07a <UART_SetConfig+0x29a>
 800af72:	2308      	movs	r3, #8
 800af74:	76fb      	strb	r3, [r7, #27]
 800af76:	e080      	b.n	800b07a <UART_SetConfig+0x29a>
 800af78:	2310      	movs	r3, #16
 800af7a:	76fb      	strb	r3, [r7, #27]
 800af7c:	e07d      	b.n	800b07a <UART_SetConfig+0x29a>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a59      	ldr	r2, [pc, #356]	; (800b0e8 <UART_SetConfig+0x308>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d120      	bne.n	800afca <UART_SetConfig+0x1ea>
 800af88:	4b54      	ldr	r3, [pc, #336]	; (800b0dc <UART_SetConfig+0x2fc>)
 800af8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800af92:	2bc0      	cmp	r3, #192	; 0xc0
 800af94:	d013      	beq.n	800afbe <UART_SetConfig+0x1de>
 800af96:	2bc0      	cmp	r3, #192	; 0xc0
 800af98:	d814      	bhi.n	800afc4 <UART_SetConfig+0x1e4>
 800af9a:	2b80      	cmp	r3, #128	; 0x80
 800af9c:	d009      	beq.n	800afb2 <UART_SetConfig+0x1d2>
 800af9e:	2b80      	cmp	r3, #128	; 0x80
 800afa0:	d810      	bhi.n	800afc4 <UART_SetConfig+0x1e4>
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d002      	beq.n	800afac <UART_SetConfig+0x1cc>
 800afa6:	2b40      	cmp	r3, #64	; 0x40
 800afa8:	d006      	beq.n	800afb8 <UART_SetConfig+0x1d8>
 800afaa:	e00b      	b.n	800afc4 <UART_SetConfig+0x1e4>
 800afac:	2300      	movs	r3, #0
 800afae:	76fb      	strb	r3, [r7, #27]
 800afb0:	e063      	b.n	800b07a <UART_SetConfig+0x29a>
 800afb2:	2302      	movs	r3, #2
 800afb4:	76fb      	strb	r3, [r7, #27]
 800afb6:	e060      	b.n	800b07a <UART_SetConfig+0x29a>
 800afb8:	2304      	movs	r3, #4
 800afba:	76fb      	strb	r3, [r7, #27]
 800afbc:	e05d      	b.n	800b07a <UART_SetConfig+0x29a>
 800afbe:	2308      	movs	r3, #8
 800afc0:	76fb      	strb	r3, [r7, #27]
 800afc2:	e05a      	b.n	800b07a <UART_SetConfig+0x29a>
 800afc4:	2310      	movs	r3, #16
 800afc6:	76fb      	strb	r3, [r7, #27]
 800afc8:	e057      	b.n	800b07a <UART_SetConfig+0x29a>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a47      	ldr	r2, [pc, #284]	; (800b0ec <UART_SetConfig+0x30c>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d125      	bne.n	800b020 <UART_SetConfig+0x240>
 800afd4:	4b41      	ldr	r3, [pc, #260]	; (800b0dc <UART_SetConfig+0x2fc>)
 800afd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afe2:	d017      	beq.n	800b014 <UART_SetConfig+0x234>
 800afe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afe8:	d817      	bhi.n	800b01a <UART_SetConfig+0x23a>
 800afea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afee:	d00b      	beq.n	800b008 <UART_SetConfig+0x228>
 800aff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aff4:	d811      	bhi.n	800b01a <UART_SetConfig+0x23a>
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d003      	beq.n	800b002 <UART_SetConfig+0x222>
 800affa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800affe:	d006      	beq.n	800b00e <UART_SetConfig+0x22e>
 800b000:	e00b      	b.n	800b01a <UART_SetConfig+0x23a>
 800b002:	2300      	movs	r3, #0
 800b004:	76fb      	strb	r3, [r7, #27]
 800b006:	e038      	b.n	800b07a <UART_SetConfig+0x29a>
 800b008:	2302      	movs	r3, #2
 800b00a:	76fb      	strb	r3, [r7, #27]
 800b00c:	e035      	b.n	800b07a <UART_SetConfig+0x29a>
 800b00e:	2304      	movs	r3, #4
 800b010:	76fb      	strb	r3, [r7, #27]
 800b012:	e032      	b.n	800b07a <UART_SetConfig+0x29a>
 800b014:	2308      	movs	r3, #8
 800b016:	76fb      	strb	r3, [r7, #27]
 800b018:	e02f      	b.n	800b07a <UART_SetConfig+0x29a>
 800b01a:	2310      	movs	r3, #16
 800b01c:	76fb      	strb	r3, [r7, #27]
 800b01e:	e02c      	b.n	800b07a <UART_SetConfig+0x29a>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a2b      	ldr	r2, [pc, #172]	; (800b0d4 <UART_SetConfig+0x2f4>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d125      	bne.n	800b076 <UART_SetConfig+0x296>
 800b02a:	4b2c      	ldr	r3, [pc, #176]	; (800b0dc <UART_SetConfig+0x2fc>)
 800b02c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b030:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b038:	d017      	beq.n	800b06a <UART_SetConfig+0x28a>
 800b03a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b03e:	d817      	bhi.n	800b070 <UART_SetConfig+0x290>
 800b040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b044:	d00b      	beq.n	800b05e <UART_SetConfig+0x27e>
 800b046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b04a:	d811      	bhi.n	800b070 <UART_SetConfig+0x290>
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d003      	beq.n	800b058 <UART_SetConfig+0x278>
 800b050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b054:	d006      	beq.n	800b064 <UART_SetConfig+0x284>
 800b056:	e00b      	b.n	800b070 <UART_SetConfig+0x290>
 800b058:	2300      	movs	r3, #0
 800b05a:	76fb      	strb	r3, [r7, #27]
 800b05c:	e00d      	b.n	800b07a <UART_SetConfig+0x29a>
 800b05e:	2302      	movs	r3, #2
 800b060:	76fb      	strb	r3, [r7, #27]
 800b062:	e00a      	b.n	800b07a <UART_SetConfig+0x29a>
 800b064:	2304      	movs	r3, #4
 800b066:	76fb      	strb	r3, [r7, #27]
 800b068:	e007      	b.n	800b07a <UART_SetConfig+0x29a>
 800b06a:	2308      	movs	r3, #8
 800b06c:	76fb      	strb	r3, [r7, #27]
 800b06e:	e004      	b.n	800b07a <UART_SetConfig+0x29a>
 800b070:	2310      	movs	r3, #16
 800b072:	76fb      	strb	r3, [r7, #27]
 800b074:	e001      	b.n	800b07a <UART_SetConfig+0x29a>
 800b076:	2310      	movs	r3, #16
 800b078:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a15      	ldr	r2, [pc, #84]	; (800b0d4 <UART_SetConfig+0x2f4>)
 800b080:	4293      	cmp	r3, r2
 800b082:	f040 809f 	bne.w	800b1c4 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b086:	7efb      	ldrb	r3, [r7, #27]
 800b088:	2b08      	cmp	r3, #8
 800b08a:	d837      	bhi.n	800b0fc <UART_SetConfig+0x31c>
 800b08c:	a201      	add	r2, pc, #4	; (adr r2, 800b094 <UART_SetConfig+0x2b4>)
 800b08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b092:	bf00      	nop
 800b094:	0800b0b9 	.word	0x0800b0b9
 800b098:	0800b0fd 	.word	0x0800b0fd
 800b09c:	0800b0c1 	.word	0x0800b0c1
 800b0a0:	0800b0fd 	.word	0x0800b0fd
 800b0a4:	0800b0c7 	.word	0x0800b0c7
 800b0a8:	0800b0fd 	.word	0x0800b0fd
 800b0ac:	0800b0fd 	.word	0x0800b0fd
 800b0b0:	0800b0fd 	.word	0x0800b0fd
 800b0b4:	0800b0f5 	.word	0x0800b0f5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0b8:	f7fd fee8 	bl	8008e8c <HAL_RCC_GetPCLK1Freq>
 800b0bc:	6178      	str	r0, [r7, #20]
        break;
 800b0be:	e022      	b.n	800b106 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0c0:	4b0b      	ldr	r3, [pc, #44]	; (800b0f0 <UART_SetConfig+0x310>)
 800b0c2:	617b      	str	r3, [r7, #20]
        break;
 800b0c4:	e01f      	b.n	800b106 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0c6:	f7fd fe49 	bl	8008d5c <HAL_RCC_GetSysClockFreq>
 800b0ca:	6178      	str	r0, [r7, #20]
        break;
 800b0cc:	e01b      	b.n	800b106 <UART_SetConfig+0x326>
 800b0ce:	bf00      	nop
 800b0d0:	cfff69f3 	.word	0xcfff69f3
 800b0d4:	40008000 	.word	0x40008000
 800b0d8:	40013800 	.word	0x40013800
 800b0dc:	40021000 	.word	0x40021000
 800b0e0:	40004400 	.word	0x40004400
 800b0e4:	40004800 	.word	0x40004800
 800b0e8:	40004c00 	.word	0x40004c00
 800b0ec:	40005000 	.word	0x40005000
 800b0f0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0f8:	617b      	str	r3, [r7, #20]
        break;
 800b0fa:	e004      	b.n	800b106 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	76bb      	strb	r3, [r7, #26]
        break;
 800b104:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 8119 	beq.w	800b340 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b112:	4a95      	ldr	r2, [pc, #596]	; (800b368 <UART_SetConfig+0x588>)
 800b114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b118:	461a      	mov	r2, r3
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b120:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	685a      	ldr	r2, [r3, #4]
 800b126:	4613      	mov	r3, r2
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	4413      	add	r3, r2
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d305      	bcc.n	800b13e <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	685b      	ldr	r3, [r3, #4]
 800b136:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b138:	68ba      	ldr	r2, [r7, #8]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d902      	bls.n	800b144 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	76bb      	strb	r3, [r7, #26]
 800b142:	e0fd      	b.n	800b340 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	4618      	mov	r0, r3
 800b148:	f04f 0100 	mov.w	r1, #0
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b150:	4a85      	ldr	r2, [pc, #532]	; (800b368 <UART_SetConfig+0x588>)
 800b152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b156:	b29a      	uxth	r2, r3
 800b158:	f04f 0300 	mov.w	r3, #0
 800b15c:	f7f5 f8a0 	bl	80002a0 <__aeabi_uldivmod>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	4610      	mov	r0, r2
 800b166:	4619      	mov	r1, r3
 800b168:	f04f 0200 	mov.w	r2, #0
 800b16c:	f04f 0300 	mov.w	r3, #0
 800b170:	020b      	lsls	r3, r1, #8
 800b172:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b176:	0202      	lsls	r2, r0, #8
 800b178:	6879      	ldr	r1, [r7, #4]
 800b17a:	6849      	ldr	r1, [r1, #4]
 800b17c:	0849      	lsrs	r1, r1, #1
 800b17e:	4608      	mov	r0, r1
 800b180:	f04f 0100 	mov.w	r1, #0
 800b184:	1814      	adds	r4, r2, r0
 800b186:	eb43 0501 	adc.w	r5, r3, r1
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	461a      	mov	r2, r3
 800b190:	f04f 0300 	mov.w	r3, #0
 800b194:	4620      	mov	r0, r4
 800b196:	4629      	mov	r1, r5
 800b198:	f7f5 f882 	bl	80002a0 <__aeabi_uldivmod>
 800b19c:	4602      	mov	r2, r0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1aa:	d308      	bcc.n	800b1be <UART_SetConfig+0x3de>
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1b2:	d204      	bcs.n	800b1be <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	693a      	ldr	r2, [r7, #16]
 800b1ba:	60da      	str	r2, [r3, #12]
 800b1bc:	e0c0      	b.n	800b340 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	76bb      	strb	r3, [r7, #26]
 800b1c2:	e0bd      	b.n	800b340 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	69db      	ldr	r3, [r3, #28]
 800b1c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1cc:	d164      	bne.n	800b298 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 800b1ce:	7efb      	ldrb	r3, [r7, #27]
 800b1d0:	2b08      	cmp	r3, #8
 800b1d2:	d828      	bhi.n	800b226 <UART_SetConfig+0x446>
 800b1d4:	a201      	add	r2, pc, #4	; (adr r2, 800b1dc <UART_SetConfig+0x3fc>)
 800b1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1da:	bf00      	nop
 800b1dc:	0800b201 	.word	0x0800b201
 800b1e0:	0800b209 	.word	0x0800b209
 800b1e4:	0800b211 	.word	0x0800b211
 800b1e8:	0800b227 	.word	0x0800b227
 800b1ec:	0800b217 	.word	0x0800b217
 800b1f0:	0800b227 	.word	0x0800b227
 800b1f4:	0800b227 	.word	0x0800b227
 800b1f8:	0800b227 	.word	0x0800b227
 800b1fc:	0800b21f 	.word	0x0800b21f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b200:	f7fd fe44 	bl	8008e8c <HAL_RCC_GetPCLK1Freq>
 800b204:	6178      	str	r0, [r7, #20]
        break;
 800b206:	e013      	b.n	800b230 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b208:	f7fd fe56 	bl	8008eb8 <HAL_RCC_GetPCLK2Freq>
 800b20c:	6178      	str	r0, [r7, #20]
        break;
 800b20e:	e00f      	b.n	800b230 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b210:	4b56      	ldr	r3, [pc, #344]	; (800b36c <UART_SetConfig+0x58c>)
 800b212:	617b      	str	r3, [r7, #20]
        break;
 800b214:	e00c      	b.n	800b230 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b216:	f7fd fda1 	bl	8008d5c <HAL_RCC_GetSysClockFreq>
 800b21a:	6178      	str	r0, [r7, #20]
        break;
 800b21c:	e008      	b.n	800b230 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b21e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b222:	617b      	str	r3, [r7, #20]
        break;
 800b224:	e004      	b.n	800b230 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800b226:	2300      	movs	r3, #0
 800b228:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	76bb      	strb	r3, [r7, #26]
        break;
 800b22e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	2b00      	cmp	r3, #0
 800b234:	f000 8084 	beq.w	800b340 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23c:	4a4a      	ldr	r2, [pc, #296]	; (800b368 <UART_SetConfig+0x588>)
 800b23e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b242:	461a      	mov	r2, r3
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	fbb3 f3f2 	udiv	r3, r3, r2
 800b24a:	005a      	lsls	r2, r3, #1
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	085b      	lsrs	r3, r3, #1
 800b252:	441a      	add	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	fbb2 f3f3 	udiv	r3, r2, r3
 800b25c:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	2b0f      	cmp	r3, #15
 800b262:	d916      	bls.n	800b292 <UART_SetConfig+0x4b2>
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b26a:	d212      	bcs.n	800b292 <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	b29b      	uxth	r3, r3
 800b270:	f023 030f 	bic.w	r3, r3, #15
 800b274:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	085b      	lsrs	r3, r3, #1
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	f003 0307 	and.w	r3, r3, #7
 800b280:	b29a      	uxth	r2, r3
 800b282:	89fb      	ldrh	r3, [r7, #14]
 800b284:	4313      	orrs	r3, r2
 800b286:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	89fa      	ldrh	r2, [r7, #14]
 800b28e:	60da      	str	r2, [r3, #12]
 800b290:	e056      	b.n	800b340 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	76bb      	strb	r3, [r7, #26]
 800b296:	e053      	b.n	800b340 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b298:	7efb      	ldrb	r3, [r7, #27]
 800b29a:	2b08      	cmp	r3, #8
 800b29c:	d827      	bhi.n	800b2ee <UART_SetConfig+0x50e>
 800b29e:	a201      	add	r2, pc, #4	; (adr r2, 800b2a4 <UART_SetConfig+0x4c4>)
 800b2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a4:	0800b2c9 	.word	0x0800b2c9
 800b2a8:	0800b2d1 	.word	0x0800b2d1
 800b2ac:	0800b2d9 	.word	0x0800b2d9
 800b2b0:	0800b2ef 	.word	0x0800b2ef
 800b2b4:	0800b2df 	.word	0x0800b2df
 800b2b8:	0800b2ef 	.word	0x0800b2ef
 800b2bc:	0800b2ef 	.word	0x0800b2ef
 800b2c0:	0800b2ef 	.word	0x0800b2ef
 800b2c4:	0800b2e7 	.word	0x0800b2e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2c8:	f7fd fde0 	bl	8008e8c <HAL_RCC_GetPCLK1Freq>
 800b2cc:	6178      	str	r0, [r7, #20]
        break;
 800b2ce:	e013      	b.n	800b2f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2d0:	f7fd fdf2 	bl	8008eb8 <HAL_RCC_GetPCLK2Freq>
 800b2d4:	6178      	str	r0, [r7, #20]
        break;
 800b2d6:	e00f      	b.n	800b2f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2d8:	4b24      	ldr	r3, [pc, #144]	; (800b36c <UART_SetConfig+0x58c>)
 800b2da:	617b      	str	r3, [r7, #20]
        break;
 800b2dc:	e00c      	b.n	800b2f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2de:	f7fd fd3d 	bl	8008d5c <HAL_RCC_GetSysClockFreq>
 800b2e2:	6178      	str	r0, [r7, #20]
        break;
 800b2e4:	e008      	b.n	800b2f8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b2e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2ea:	617b      	str	r3, [r7, #20]
        break;
 800b2ec:	e004      	b.n	800b2f8 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	76bb      	strb	r3, [r7, #26]
        break;
 800b2f6:	bf00      	nop
    }

    if (pclk != 0U)
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d020      	beq.n	800b340 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b302:	4a19      	ldr	r2, [pc, #100]	; (800b368 <UART_SetConfig+0x588>)
 800b304:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b308:	461a      	mov	r2, r3
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	085b      	lsrs	r3, r3, #1
 800b316:	441a      	add	r2, r3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b320:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b0f      	cmp	r3, #15
 800b326:	d909      	bls.n	800b33c <UART_SetConfig+0x55c>
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b32e:	d205      	bcs.n	800b33c <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	b29a      	uxth	r2, r3
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	60da      	str	r2, [r3, #12]
 800b33a:	e001      	b.n	800b340 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b35c:	7ebb      	ldrb	r3, [r7, #26]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3720      	adds	r7, #32
 800b362:	46bd      	mov	sp, r7
 800b364:	bdb0      	pop	{r4, r5, r7, pc}
 800b366:	bf00      	nop
 800b368:	0800cf68 	.word	0x0800cf68
 800b36c:	00f42400 	.word	0x00f42400

0800b370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00a      	beq.n	800b39a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b39e:	f003 0302 	and.w	r3, r3, #2
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00a      	beq.n	800b3bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	430a      	orrs	r2, r1
 800b3ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3c0:	f003 0304 	and.w	r3, r3, #4
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00a      	beq.n	800b3de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	430a      	orrs	r2, r1
 800b3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e2:	f003 0308 	and.w	r3, r3, #8
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00a      	beq.n	800b400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	430a      	orrs	r2, r1
 800b3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b404:	f003 0310 	and.w	r3, r3, #16
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00a      	beq.n	800b422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	430a      	orrs	r2, r1
 800b420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b426:	f003 0320 	and.w	r3, r3, #32
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00a      	beq.n	800b444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	430a      	orrs	r2, r1
 800b442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01a      	beq.n	800b486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	430a      	orrs	r2, r1
 800b464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b46a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b46e:	d10a      	bne.n	800b486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	430a      	orrs	r2, r1
 800b484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00a      	beq.n	800b4a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	430a      	orrs	r2, r1
 800b4a6:	605a      	str	r2, [r3, #4]
  }
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	af02      	add	r7, sp, #8
 800b4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4c4:	f7fb fc72 	bl	8006dac <HAL_GetTick>
 800b4c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0308 	and.w	r3, r3, #8
 800b4d4:	2b08      	cmp	r3, #8
 800b4d6:	d10e      	bne.n	800b4f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 f82f 	bl	800b54a <UART_WaitOnFlagUntilTimeout>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d001      	beq.n	800b4f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	e025      	b.n	800b542 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f003 0304 	and.w	r3, r3, #4
 800b500:	2b04      	cmp	r3, #4
 800b502:	d10e      	bne.n	800b522 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f819 	bl	800b54a <UART_WaitOnFlagUntilTimeout>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d001      	beq.n	800b522 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e00f      	b.n	800b542 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2220      	movs	r2, #32
 800b526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2220      	movs	r2, #32
 800b52e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b09c      	sub	sp, #112	; 0x70
 800b54e:	af00      	add	r7, sp, #0
 800b550:	60f8      	str	r0, [r7, #12]
 800b552:	60b9      	str	r1, [r7, #8]
 800b554:	603b      	str	r3, [r7, #0]
 800b556:	4613      	mov	r3, r2
 800b558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b55a:	e0a9      	b.n	800b6b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b55c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b562:	f000 80a5 	beq.w	800b6b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b566:	f7fb fc21 	bl	8006dac <HAL_GetTick>
 800b56a:	4602      	mov	r2, r0
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b572:	429a      	cmp	r2, r3
 800b574:	d302      	bcc.n	800b57c <UART_WaitOnFlagUntilTimeout+0x32>
 800b576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d140      	bne.n	800b5fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b584:	e853 3f00 	ldrex	r3, [r3]
 800b588:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b58a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b58c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b590:	667b      	str	r3, [r7, #100]	; 0x64
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b59a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b59c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b5a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b5a2:	e841 2300 	strex	r3, r2, [r1]
 800b5a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b5a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d1e6      	bne.n	800b57c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	3308      	adds	r3, #8
 800b5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5b8:	e853 3f00 	ldrex	r3, [r3]
 800b5bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c0:	f023 0301 	bic.w	r3, r3, #1
 800b5c4:	663b      	str	r3, [r7, #96]	; 0x60
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	3308      	adds	r3, #8
 800b5cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b5ce:	64ba      	str	r2, [r7, #72]	; 0x48
 800b5d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5d6:	e841 2300 	strex	r3, r2, [r1]
 800b5da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b5dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1e5      	bne.n	800b5ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2220      	movs	r2, #32
 800b5e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2220      	movs	r2, #32
 800b5ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e069      	b.n	800b6d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f003 0304 	and.w	r3, r3, #4
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d051      	beq.n	800b6b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	69db      	ldr	r3, [r3, #28]
 800b612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b61a:	d149      	bne.n	800b6b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b624:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62e:	e853 3f00 	ldrex	r3, [r3]
 800b632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b636:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b63a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	461a      	mov	r2, r3
 800b642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b644:	637b      	str	r3, [r7, #52]	; 0x34
 800b646:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b64a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b64c:	e841 2300 	strex	r3, r2, [r1]
 800b650:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1e6      	bne.n	800b626 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3308      	adds	r3, #8
 800b65e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	e853 3f00 	ldrex	r3, [r3]
 800b666:	613b      	str	r3, [r7, #16]
   return(result);
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	f023 0301 	bic.w	r3, r3, #1
 800b66e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	3308      	adds	r3, #8
 800b676:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b678:	623a      	str	r2, [r7, #32]
 800b67a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67c:	69f9      	ldr	r1, [r7, #28]
 800b67e:	6a3a      	ldr	r2, [r7, #32]
 800b680:	e841 2300 	strex	r3, r2, [r1]
 800b684:	61bb      	str	r3, [r7, #24]
   return(result);
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d1e5      	bne.n	800b658 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2220      	movs	r2, #32
 800b690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2220      	movs	r2, #32
 800b698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2220      	movs	r2, #32
 800b6a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	e010      	b.n	800b6d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	69da      	ldr	r2, [r3, #28]
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	68ba      	ldr	r2, [r7, #8]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	bf0c      	ite	eq
 800b6c0:	2301      	moveq	r3, #1
 800b6c2:	2300      	movne	r3, #0
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	79fb      	ldrb	r3, [r7, #7]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	f43f af46 	beq.w	800b55c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3770      	adds	r7, #112	; 0x70
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b6da:	b480      	push	{r7}
 800b6dc:	b085      	sub	sp, #20
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d101      	bne.n	800b6f0 <HAL_UARTEx_DisableFifoMode+0x16>
 800b6ec:	2302      	movs	r3, #2
 800b6ee:	e027      	b.n	800b740 <HAL_UARTEx_DisableFifoMode+0x66>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2224      	movs	r2, #36	; 0x24
 800b6fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f022 0201 	bic.w	r2, r2, #1
 800b716:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b71e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2220      	movs	r2, #32
 800b732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3714      	adds	r7, #20
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d101      	bne.n	800b764 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b760:	2302      	movs	r3, #2
 800b762:	e02d      	b.n	800b7c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2224      	movs	r2, #36	; 0x24
 800b770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f022 0201 	bic.w	r2, r2, #1
 800b78a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	430a      	orrs	r2, r1
 800b79e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f84f 	bl	800b844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2220      	movs	r2, #32
 800b7b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d101      	bne.n	800b7e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b7dc:	2302      	movs	r3, #2
 800b7de:	e02d      	b.n	800b83c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2224      	movs	r2, #36	; 0x24
 800b7ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f022 0201 	bic.w	r2, r2, #1
 800b806:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	430a      	orrs	r2, r1
 800b81a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f811 	bl	800b844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2220      	movs	r2, #32
 800b82e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b850:	2b00      	cmp	r3, #0
 800b852:	d108      	bne.n	800b866 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b864:	e031      	b.n	800b8ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b866:	2308      	movs	r3, #8
 800b868:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b86a:	2308      	movs	r3, #8
 800b86c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	0e5b      	lsrs	r3, r3, #25
 800b876:	b2db      	uxtb	r3, r3
 800b878:	f003 0307 	and.w	r3, r3, #7
 800b87c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	0f5b      	lsrs	r3, r3, #29
 800b886:	b2db      	uxtb	r3, r3
 800b888:	f003 0307 	and.w	r3, r3, #7
 800b88c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b88e:	7bbb      	ldrb	r3, [r7, #14]
 800b890:	7b3a      	ldrb	r2, [r7, #12]
 800b892:	4911      	ldr	r1, [pc, #68]	; (800b8d8 <UARTEx_SetNbDataToProcess+0x94>)
 800b894:	5c8a      	ldrb	r2, [r1, r2]
 800b896:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b89a:	7b3a      	ldrb	r2, [r7, #12]
 800b89c:	490f      	ldr	r1, [pc, #60]	; (800b8dc <UARTEx_SetNbDataToProcess+0x98>)
 800b89e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
 800b8ae:	7b7a      	ldrb	r2, [r7, #13]
 800b8b0:	4909      	ldr	r1, [pc, #36]	; (800b8d8 <UARTEx_SetNbDataToProcess+0x94>)
 800b8b2:	5c8a      	ldrb	r2, [r1, r2]
 800b8b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b8b8:	7b7a      	ldrb	r2, [r7, #13]
 800b8ba:	4908      	ldr	r1, [pc, #32]	; (800b8dc <UARTEx_SetNbDataToProcess+0x98>)
 800b8bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8be:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b8ca:	bf00      	nop
 800b8cc:	3714      	adds	r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr
 800b8d6:	bf00      	nop
 800b8d8:	0800cf80 	.word	0x0800cf80
 800b8dc:	0800cf88 	.word	0x0800cf88

0800b8e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8e0:	b084      	sub	sp, #16
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	f107 001c 	add.w	r0, r7, #28
 800b8ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f000 fa6c 	bl	800bddc <USB_CoreReset>
 800b904:	4603      	mov	r3, r0
 800b906:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d106      	bne.n	800b91c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b912:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	639a      	str	r2, [r3, #56]	; 0x38
 800b91a:	e005      	b.n	800b928 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b920:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800b928:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3710      	adds	r7, #16
 800b92e:	46bd      	mov	sp, r7
 800b930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b934:	b004      	add	sp, #16
 800b936:	4770      	bx	lr

0800b938 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	f023 0201 	bic.w	r2, r3, #1
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b94c:	2300      	movs	r3, #0
}
 800b94e:	4618      	mov	r0, r3
 800b950:	370c      	adds	r7, #12
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr

0800b95a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b084      	sub	sp, #16
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	460b      	mov	r3, r1
 800b964:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b966:	2300      	movs	r3, #0
 800b968:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b976:	78fb      	ldrb	r3, [r7, #3]
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d115      	bne.n	800b9a8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b988:	2001      	movs	r0, #1
 800b98a:	f7fb fa1b 	bl	8006dc4 <HAL_Delay>
      ms++;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	3301      	adds	r3, #1
 800b992:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 fa13 	bl	800bdc0 <USB_GetMode>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d01e      	beq.n	800b9de <USB_SetCurrentMode+0x84>
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2b31      	cmp	r3, #49	; 0x31
 800b9a4:	d9f0      	bls.n	800b988 <USB_SetCurrentMode+0x2e>
 800b9a6:	e01a      	b.n	800b9de <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b9a8:	78fb      	ldrb	r3, [r7, #3]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d115      	bne.n	800b9da <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b9ba:	2001      	movs	r0, #1
 800b9bc:	f7fb fa02 	bl	8006dc4 <HAL_Delay>
      ms++;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f9fa 	bl	800bdc0 <USB_GetMode>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d005      	beq.n	800b9de <USB_SetCurrentMode+0x84>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2b31      	cmp	r3, #49	; 0x31
 800b9d6:	d9f0      	bls.n	800b9ba <USB_SetCurrentMode+0x60>
 800b9d8:	e001      	b.n	800b9de <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e005      	b.n	800b9ea <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2b32      	cmp	r3, #50	; 0x32
 800b9e2:	d101      	bne.n	800b9e8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e000      	b.n	800b9ea <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
	...

0800b9f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b086      	sub	sp, #24
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ba02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ba0e:	2300      	movs	r3, #0
 800ba10:	613b      	str	r3, [r7, #16]
 800ba12:	e009      	b.n	800ba28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	3340      	adds	r3, #64	; 0x40
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	2200      	movs	r2, #0
 800ba20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	3301      	adds	r3, #1
 800ba26:	613b      	str	r3, [r7, #16]
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	2b0e      	cmp	r3, #14
 800ba2c:	d9f2      	bls.n	800ba14 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ba2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d11c      	bne.n	800ba6e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba42:	f043 0302 	orr.w	r3, r3, #2
 800ba46:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	601a      	str	r2, [r3, #0]
 800ba6c:	e005      	b.n	800ba7a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba80:	461a      	mov	r2, r3
 800ba82:	2300      	movs	r3, #0
 800ba84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba94:	461a      	mov	r2, r3
 800ba96:	680b      	ldr	r3, [r1, #0]
 800ba98:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ba9a:	2103      	movs	r1, #3
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 f955 	bl	800bd4c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800baa2:	2110      	movs	r1, #16
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 f8f1 	bl	800bc8c <USB_FlushTxFifo>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d001      	beq.n	800bab4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 f91b 	bl	800bcf0 <USB_FlushRxFifo>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d001      	beq.n	800bac4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800bac0:	2301      	movs	r3, #1
 800bac2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baca:	461a      	mov	r2, r3
 800bacc:	2300      	movs	r3, #0
 800bace:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bad6:	461a      	mov	r2, r3
 800bad8:	2300      	movs	r3, #0
 800bada:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bae2:	461a      	mov	r2, r3
 800bae4:	2300      	movs	r3, #0
 800bae6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bae8:	2300      	movs	r3, #0
 800baea:	613b      	str	r3, [r7, #16]
 800baec:	e043      	b.n	800bb76 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	015a      	lsls	r2, r3, #5
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	4413      	add	r3, r2
 800baf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb04:	d118      	bne.n	800bb38 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d10a      	bne.n	800bb22 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	015a      	lsls	r2, r3, #5
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4413      	add	r3, r2
 800bb14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb18:	461a      	mov	r2, r3
 800bb1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bb1e:	6013      	str	r3, [r2, #0]
 800bb20:	e013      	b.n	800bb4a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	015a      	lsls	r2, r3, #5
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	4413      	add	r3, r2
 800bb2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb2e:	461a      	mov	r2, r3
 800bb30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	e008      	b.n	800bb4a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	015a      	lsls	r2, r3, #5
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	4413      	add	r3, r2
 800bb40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb44:	461a      	mov	r2, r3
 800bb46:	2300      	movs	r3, #0
 800bb48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	015a      	lsls	r2, r3, #5
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	4413      	add	r3, r2
 800bb52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb56:	461a      	mov	r2, r3
 800bb58:	2300      	movs	r3, #0
 800bb5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	015a      	lsls	r2, r3, #5
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	4413      	add	r3, r2
 800bb64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb68:	461a      	mov	r2, r3
 800bb6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bb6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	3301      	adds	r3, #1
 800bb74:	613b      	str	r3, [r7, #16]
 800bb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d3b7      	bcc.n	800baee <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bb7e:	2300      	movs	r3, #0
 800bb80:	613b      	str	r3, [r7, #16]
 800bb82:	e043      	b.n	800bc0c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	015a      	lsls	r2, r3, #5
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb9a:	d118      	bne.n	800bbce <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10a      	bne.n	800bbb8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	015a      	lsls	r2, r3, #5
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbae:	461a      	mov	r2, r3
 800bbb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	e013      	b.n	800bbe0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	015a      	lsls	r2, r3, #5
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bbca:	6013      	str	r3, [r2, #0]
 800bbcc:	e008      	b.n	800bbe0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	015a      	lsls	r2, r3, #5
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbda:	461a      	mov	r2, r3
 800bbdc:	2300      	movs	r3, #0
 800bbde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	015a      	lsls	r2, r3, #5
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbec:	461a      	mov	r2, r3
 800bbee:	2300      	movs	r3, #0
 800bbf0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	015a      	lsls	r2, r3, #5
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbfe:	461a      	mov	r2, r3
 800bc00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	613b      	str	r3, [r7, #16]
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc0e:	693a      	ldr	r2, [r7, #16]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d3b7      	bcc.n	800bb84 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bc26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bc34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	f043 0210 	orr.w	r2, r3, #16
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	699a      	ldr	r2, [r3, #24]
 800bc46:	4b10      	ldr	r3, [pc, #64]	; (800bc88 <USB_DevInit+0x294>)
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bc4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d005      	beq.n	800bc60 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	699b      	ldr	r3, [r3, #24]
 800bc58:	f043 0208 	orr.w	r2, r3, #8
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bc60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d107      	bne.n	800bc76 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	699b      	ldr	r3, [r3, #24]
 800bc6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc6e:	f043 0304 	orr.w	r3, r3, #4
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bc76:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3718      	adds	r7, #24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bc82:	b004      	add	sp, #16
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop
 800bc88:	803c3800 	.word	0x803c3800

0800bc8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bc96:	2300      	movs	r3, #0
 800bc98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	60fb      	str	r3, [r7, #12]
 800bca0:	4a12      	ldr	r2, [pc, #72]	; (800bcec <USB_FlushTxFifo+0x60>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d901      	bls.n	800bcaa <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bca6:	2303      	movs	r3, #3
 800bca8:	e01a      	b.n	800bce0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	daf3      	bge.n	800bc9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	019b      	lsls	r3, r3, #6
 800bcba:	f043 0220 	orr.w	r2, r3, #32
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	60fb      	str	r3, [r7, #12]
 800bcc8:	4a08      	ldr	r2, [pc, #32]	; (800bcec <USB_FlushTxFifo+0x60>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d901      	bls.n	800bcd2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	e006      	b.n	800bce0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	691b      	ldr	r3, [r3, #16]
 800bcd6:	f003 0320 	and.w	r3, r3, #32
 800bcda:	2b20      	cmp	r3, #32
 800bcdc:	d0f1      	beq.n	800bcc2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	00030d40 	.word	0x00030d40

0800bcf0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	4a11      	ldr	r2, [pc, #68]	; (800bd48 <USB_FlushRxFifo+0x58>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d901      	bls.n	800bd0c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800bd08:	2303      	movs	r3, #3
 800bd0a:	e017      	b.n	800bd3c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	691b      	ldr	r3, [r3, #16]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	daf3      	bge.n	800bcfc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bd14:	2300      	movs	r3, #0
 800bd16:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2210      	movs	r2, #16
 800bd1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	3301      	adds	r3, #1
 800bd22:	60fb      	str	r3, [r7, #12]
 800bd24:	4a08      	ldr	r2, [pc, #32]	; (800bd48 <USB_FlushRxFifo+0x58>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d901      	bls.n	800bd2e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800bd2a:	2303      	movs	r3, #3
 800bd2c:	e006      	b.n	800bd3c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	f003 0310 	and.w	r3, r3, #16
 800bd36:	2b10      	cmp	r3, #16
 800bd38:	d0f1      	beq.n	800bd1e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr
 800bd48:	00030d40 	.word	0x00030d40

0800bd4c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b085      	sub	sp, #20
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	78fb      	ldrb	r3, [r7, #3]
 800bd66:	68f9      	ldr	r1, [r7, #12]
 800bd68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3714      	adds	r7, #20
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr

0800bd7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bd7e:	b480      	push	{r7}
 800bd80:	b085      	sub	sp, #20
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bd98:	f023 0303 	bic.w	r3, r3, #3
 800bd9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdac:	f043 0302 	orr.w	r3, r3, #2
 800bdb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bdb2:	2300      	movs	r3, #0
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3714      	adds	r7, #20
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	f003 0301 	and.w	r3, r3, #1
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b085      	sub	sp, #20
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bde4:	2300      	movs	r3, #0
 800bde6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	3301      	adds	r3, #1
 800bdec:	60fb      	str	r3, [r7, #12]
 800bdee:	4a13      	ldr	r2, [pc, #76]	; (800be3c <USB_CoreReset+0x60>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d901      	bls.n	800bdf8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	e01a      	b.n	800be2e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	daf3      	bge.n	800bde8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800be00:	2300      	movs	r3, #0
 800be02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	691b      	ldr	r3, [r3, #16]
 800be08:	f043 0201 	orr.w	r2, r3, #1
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	3301      	adds	r3, #1
 800be14:	60fb      	str	r3, [r7, #12]
 800be16:	4a09      	ldr	r2, [pc, #36]	; (800be3c <USB_CoreReset+0x60>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d901      	bls.n	800be20 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800be1c:	2303      	movs	r3, #3
 800be1e:	e006      	b.n	800be2e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d0f1      	beq.n	800be10 <USB_CoreReset+0x34>

  return HAL_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop
 800be3c:	00030d40 	.word	0x00030d40

0800be40 <__errno>:
 800be40:	4b01      	ldr	r3, [pc, #4]	; (800be48 <__errno+0x8>)
 800be42:	6818      	ldr	r0, [r3, #0]
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	200002cc 	.word	0x200002cc

0800be4c <__sflush_r>:
 800be4c:	898a      	ldrh	r2, [r1, #12]
 800be4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be52:	4605      	mov	r5, r0
 800be54:	0710      	lsls	r0, r2, #28
 800be56:	460c      	mov	r4, r1
 800be58:	d458      	bmi.n	800bf0c <__sflush_r+0xc0>
 800be5a:	684b      	ldr	r3, [r1, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	dc05      	bgt.n	800be6c <__sflush_r+0x20>
 800be60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be62:	2b00      	cmp	r3, #0
 800be64:	dc02      	bgt.n	800be6c <__sflush_r+0x20>
 800be66:	2000      	movs	r0, #0
 800be68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be6e:	2e00      	cmp	r6, #0
 800be70:	d0f9      	beq.n	800be66 <__sflush_r+0x1a>
 800be72:	2300      	movs	r3, #0
 800be74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be78:	682f      	ldr	r7, [r5, #0]
 800be7a:	602b      	str	r3, [r5, #0]
 800be7c:	d032      	beq.n	800bee4 <__sflush_r+0x98>
 800be7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be80:	89a3      	ldrh	r3, [r4, #12]
 800be82:	075a      	lsls	r2, r3, #29
 800be84:	d505      	bpl.n	800be92 <__sflush_r+0x46>
 800be86:	6863      	ldr	r3, [r4, #4]
 800be88:	1ac0      	subs	r0, r0, r3
 800be8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be8c:	b10b      	cbz	r3, 800be92 <__sflush_r+0x46>
 800be8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be90:	1ac0      	subs	r0, r0, r3
 800be92:	2300      	movs	r3, #0
 800be94:	4602      	mov	r2, r0
 800be96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be98:	6a21      	ldr	r1, [r4, #32]
 800be9a:	4628      	mov	r0, r5
 800be9c:	47b0      	blx	r6
 800be9e:	1c43      	adds	r3, r0, #1
 800bea0:	89a3      	ldrh	r3, [r4, #12]
 800bea2:	d106      	bne.n	800beb2 <__sflush_r+0x66>
 800bea4:	6829      	ldr	r1, [r5, #0]
 800bea6:	291d      	cmp	r1, #29
 800bea8:	d82c      	bhi.n	800bf04 <__sflush_r+0xb8>
 800beaa:	4a2a      	ldr	r2, [pc, #168]	; (800bf54 <__sflush_r+0x108>)
 800beac:	40ca      	lsrs	r2, r1
 800beae:	07d6      	lsls	r6, r2, #31
 800beb0:	d528      	bpl.n	800bf04 <__sflush_r+0xb8>
 800beb2:	2200      	movs	r2, #0
 800beb4:	6062      	str	r2, [r4, #4]
 800beb6:	04d9      	lsls	r1, r3, #19
 800beb8:	6922      	ldr	r2, [r4, #16]
 800beba:	6022      	str	r2, [r4, #0]
 800bebc:	d504      	bpl.n	800bec8 <__sflush_r+0x7c>
 800bebe:	1c42      	adds	r2, r0, #1
 800bec0:	d101      	bne.n	800bec6 <__sflush_r+0x7a>
 800bec2:	682b      	ldr	r3, [r5, #0]
 800bec4:	b903      	cbnz	r3, 800bec8 <__sflush_r+0x7c>
 800bec6:	6560      	str	r0, [r4, #84]	; 0x54
 800bec8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beca:	602f      	str	r7, [r5, #0]
 800becc:	2900      	cmp	r1, #0
 800bece:	d0ca      	beq.n	800be66 <__sflush_r+0x1a>
 800bed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bed4:	4299      	cmp	r1, r3
 800bed6:	d002      	beq.n	800bede <__sflush_r+0x92>
 800bed8:	4628      	mov	r0, r5
 800beda:	f000 fa11 	bl	800c300 <_free_r>
 800bede:	2000      	movs	r0, #0
 800bee0:	6360      	str	r0, [r4, #52]	; 0x34
 800bee2:	e7c1      	b.n	800be68 <__sflush_r+0x1c>
 800bee4:	6a21      	ldr	r1, [r4, #32]
 800bee6:	2301      	movs	r3, #1
 800bee8:	4628      	mov	r0, r5
 800beea:	47b0      	blx	r6
 800beec:	1c41      	adds	r1, r0, #1
 800beee:	d1c7      	bne.n	800be80 <__sflush_r+0x34>
 800bef0:	682b      	ldr	r3, [r5, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d0c4      	beq.n	800be80 <__sflush_r+0x34>
 800bef6:	2b1d      	cmp	r3, #29
 800bef8:	d001      	beq.n	800befe <__sflush_r+0xb2>
 800befa:	2b16      	cmp	r3, #22
 800befc:	d101      	bne.n	800bf02 <__sflush_r+0xb6>
 800befe:	602f      	str	r7, [r5, #0]
 800bf00:	e7b1      	b.n	800be66 <__sflush_r+0x1a>
 800bf02:	89a3      	ldrh	r3, [r4, #12]
 800bf04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf08:	81a3      	strh	r3, [r4, #12]
 800bf0a:	e7ad      	b.n	800be68 <__sflush_r+0x1c>
 800bf0c:	690f      	ldr	r7, [r1, #16]
 800bf0e:	2f00      	cmp	r7, #0
 800bf10:	d0a9      	beq.n	800be66 <__sflush_r+0x1a>
 800bf12:	0793      	lsls	r3, r2, #30
 800bf14:	680e      	ldr	r6, [r1, #0]
 800bf16:	bf08      	it	eq
 800bf18:	694b      	ldreq	r3, [r1, #20]
 800bf1a:	600f      	str	r7, [r1, #0]
 800bf1c:	bf18      	it	ne
 800bf1e:	2300      	movne	r3, #0
 800bf20:	eba6 0807 	sub.w	r8, r6, r7
 800bf24:	608b      	str	r3, [r1, #8]
 800bf26:	f1b8 0f00 	cmp.w	r8, #0
 800bf2a:	dd9c      	ble.n	800be66 <__sflush_r+0x1a>
 800bf2c:	6a21      	ldr	r1, [r4, #32]
 800bf2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf30:	4643      	mov	r3, r8
 800bf32:	463a      	mov	r2, r7
 800bf34:	4628      	mov	r0, r5
 800bf36:	47b0      	blx	r6
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	dc06      	bgt.n	800bf4a <__sflush_r+0xfe>
 800bf3c:	89a3      	ldrh	r3, [r4, #12]
 800bf3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf42:	81a3      	strh	r3, [r4, #12]
 800bf44:	f04f 30ff 	mov.w	r0, #4294967295
 800bf48:	e78e      	b.n	800be68 <__sflush_r+0x1c>
 800bf4a:	4407      	add	r7, r0
 800bf4c:	eba8 0800 	sub.w	r8, r8, r0
 800bf50:	e7e9      	b.n	800bf26 <__sflush_r+0xda>
 800bf52:	bf00      	nop
 800bf54:	20400001 	.word	0x20400001

0800bf58 <_fflush_r>:
 800bf58:	b538      	push	{r3, r4, r5, lr}
 800bf5a:	690b      	ldr	r3, [r1, #16]
 800bf5c:	4605      	mov	r5, r0
 800bf5e:	460c      	mov	r4, r1
 800bf60:	b913      	cbnz	r3, 800bf68 <_fflush_r+0x10>
 800bf62:	2500      	movs	r5, #0
 800bf64:	4628      	mov	r0, r5
 800bf66:	bd38      	pop	{r3, r4, r5, pc}
 800bf68:	b118      	cbz	r0, 800bf72 <_fflush_r+0x1a>
 800bf6a:	6983      	ldr	r3, [r0, #24]
 800bf6c:	b90b      	cbnz	r3, 800bf72 <_fflush_r+0x1a>
 800bf6e:	f000 f887 	bl	800c080 <__sinit>
 800bf72:	4b14      	ldr	r3, [pc, #80]	; (800bfc4 <_fflush_r+0x6c>)
 800bf74:	429c      	cmp	r4, r3
 800bf76:	d11b      	bne.n	800bfb0 <_fflush_r+0x58>
 800bf78:	686c      	ldr	r4, [r5, #4]
 800bf7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0ef      	beq.n	800bf62 <_fflush_r+0xa>
 800bf82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf84:	07d0      	lsls	r0, r2, #31
 800bf86:	d404      	bmi.n	800bf92 <_fflush_r+0x3a>
 800bf88:	0599      	lsls	r1, r3, #22
 800bf8a:	d402      	bmi.n	800bf92 <_fflush_r+0x3a>
 800bf8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf8e:	f000 f93a 	bl	800c206 <__retarget_lock_acquire_recursive>
 800bf92:	4628      	mov	r0, r5
 800bf94:	4621      	mov	r1, r4
 800bf96:	f7ff ff59 	bl	800be4c <__sflush_r>
 800bf9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf9c:	07da      	lsls	r2, r3, #31
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	d4e0      	bmi.n	800bf64 <_fflush_r+0xc>
 800bfa2:	89a3      	ldrh	r3, [r4, #12]
 800bfa4:	059b      	lsls	r3, r3, #22
 800bfa6:	d4dd      	bmi.n	800bf64 <_fflush_r+0xc>
 800bfa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfaa:	f000 f92d 	bl	800c208 <__retarget_lock_release_recursive>
 800bfae:	e7d9      	b.n	800bf64 <_fflush_r+0xc>
 800bfb0:	4b05      	ldr	r3, [pc, #20]	; (800bfc8 <_fflush_r+0x70>)
 800bfb2:	429c      	cmp	r4, r3
 800bfb4:	d101      	bne.n	800bfba <_fflush_r+0x62>
 800bfb6:	68ac      	ldr	r4, [r5, #8]
 800bfb8:	e7df      	b.n	800bf7a <_fflush_r+0x22>
 800bfba:	4b04      	ldr	r3, [pc, #16]	; (800bfcc <_fflush_r+0x74>)
 800bfbc:	429c      	cmp	r4, r3
 800bfbe:	bf08      	it	eq
 800bfc0:	68ec      	ldreq	r4, [r5, #12]
 800bfc2:	e7da      	b.n	800bf7a <_fflush_r+0x22>
 800bfc4:	0800cfb0 	.word	0x0800cfb0
 800bfc8:	0800cfd0 	.word	0x0800cfd0
 800bfcc:	0800cf90 	.word	0x0800cf90

0800bfd0 <std>:
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	b510      	push	{r4, lr}
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	e9c0 3300 	strd	r3, r3, [r0]
 800bfda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfde:	6083      	str	r3, [r0, #8]
 800bfe0:	8181      	strh	r1, [r0, #12]
 800bfe2:	6643      	str	r3, [r0, #100]	; 0x64
 800bfe4:	81c2      	strh	r2, [r0, #14]
 800bfe6:	6183      	str	r3, [r0, #24]
 800bfe8:	4619      	mov	r1, r3
 800bfea:	2208      	movs	r2, #8
 800bfec:	305c      	adds	r0, #92	; 0x5c
 800bfee:	f000 f97f 	bl	800c2f0 <memset>
 800bff2:	4b05      	ldr	r3, [pc, #20]	; (800c008 <std+0x38>)
 800bff4:	6263      	str	r3, [r4, #36]	; 0x24
 800bff6:	4b05      	ldr	r3, [pc, #20]	; (800c00c <std+0x3c>)
 800bff8:	62a3      	str	r3, [r4, #40]	; 0x28
 800bffa:	4b05      	ldr	r3, [pc, #20]	; (800c010 <std+0x40>)
 800bffc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bffe:	4b05      	ldr	r3, [pc, #20]	; (800c014 <std+0x44>)
 800c000:	6224      	str	r4, [r4, #32]
 800c002:	6323      	str	r3, [r4, #48]	; 0x30
 800c004:	bd10      	pop	{r4, pc}
 800c006:	bf00      	nop
 800c008:	0800ca81 	.word	0x0800ca81
 800c00c:	0800caa3 	.word	0x0800caa3
 800c010:	0800cadb 	.word	0x0800cadb
 800c014:	0800caff 	.word	0x0800caff

0800c018 <_cleanup_r>:
 800c018:	4901      	ldr	r1, [pc, #4]	; (800c020 <_cleanup_r+0x8>)
 800c01a:	f000 b8af 	b.w	800c17c <_fwalk_reent>
 800c01e:	bf00      	nop
 800c020:	0800bf59 	.word	0x0800bf59

0800c024 <__sfmoreglue>:
 800c024:	b570      	push	{r4, r5, r6, lr}
 800c026:	1e4a      	subs	r2, r1, #1
 800c028:	2568      	movs	r5, #104	; 0x68
 800c02a:	4355      	muls	r5, r2
 800c02c:	460e      	mov	r6, r1
 800c02e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c032:	f000 f9b5 	bl	800c3a0 <_malloc_r>
 800c036:	4604      	mov	r4, r0
 800c038:	b140      	cbz	r0, 800c04c <__sfmoreglue+0x28>
 800c03a:	2100      	movs	r1, #0
 800c03c:	e9c0 1600 	strd	r1, r6, [r0]
 800c040:	300c      	adds	r0, #12
 800c042:	60a0      	str	r0, [r4, #8]
 800c044:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c048:	f000 f952 	bl	800c2f0 <memset>
 800c04c:	4620      	mov	r0, r4
 800c04e:	bd70      	pop	{r4, r5, r6, pc}

0800c050 <__sfp_lock_acquire>:
 800c050:	4801      	ldr	r0, [pc, #4]	; (800c058 <__sfp_lock_acquire+0x8>)
 800c052:	f000 b8d8 	b.w	800c206 <__retarget_lock_acquire_recursive>
 800c056:	bf00      	nop
 800c058:	20001618 	.word	0x20001618

0800c05c <__sfp_lock_release>:
 800c05c:	4801      	ldr	r0, [pc, #4]	; (800c064 <__sfp_lock_release+0x8>)
 800c05e:	f000 b8d3 	b.w	800c208 <__retarget_lock_release_recursive>
 800c062:	bf00      	nop
 800c064:	20001618 	.word	0x20001618

0800c068 <__sinit_lock_acquire>:
 800c068:	4801      	ldr	r0, [pc, #4]	; (800c070 <__sinit_lock_acquire+0x8>)
 800c06a:	f000 b8cc 	b.w	800c206 <__retarget_lock_acquire_recursive>
 800c06e:	bf00      	nop
 800c070:	20001613 	.word	0x20001613

0800c074 <__sinit_lock_release>:
 800c074:	4801      	ldr	r0, [pc, #4]	; (800c07c <__sinit_lock_release+0x8>)
 800c076:	f000 b8c7 	b.w	800c208 <__retarget_lock_release_recursive>
 800c07a:	bf00      	nop
 800c07c:	20001613 	.word	0x20001613

0800c080 <__sinit>:
 800c080:	b510      	push	{r4, lr}
 800c082:	4604      	mov	r4, r0
 800c084:	f7ff fff0 	bl	800c068 <__sinit_lock_acquire>
 800c088:	69a3      	ldr	r3, [r4, #24]
 800c08a:	b11b      	cbz	r3, 800c094 <__sinit+0x14>
 800c08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c090:	f7ff bff0 	b.w	800c074 <__sinit_lock_release>
 800c094:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c098:	6523      	str	r3, [r4, #80]	; 0x50
 800c09a:	4b13      	ldr	r3, [pc, #76]	; (800c0e8 <__sinit+0x68>)
 800c09c:	4a13      	ldr	r2, [pc, #76]	; (800c0ec <__sinit+0x6c>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c0a2:	42a3      	cmp	r3, r4
 800c0a4:	bf04      	itt	eq
 800c0a6:	2301      	moveq	r3, #1
 800c0a8:	61a3      	streq	r3, [r4, #24]
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f000 f820 	bl	800c0f0 <__sfp>
 800c0b0:	6060      	str	r0, [r4, #4]
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f000 f81c 	bl	800c0f0 <__sfp>
 800c0b8:	60a0      	str	r0, [r4, #8]
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f000 f818 	bl	800c0f0 <__sfp>
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	60e0      	str	r0, [r4, #12]
 800c0c4:	2104      	movs	r1, #4
 800c0c6:	6860      	ldr	r0, [r4, #4]
 800c0c8:	f7ff ff82 	bl	800bfd0 <std>
 800c0cc:	68a0      	ldr	r0, [r4, #8]
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	2109      	movs	r1, #9
 800c0d2:	f7ff ff7d 	bl	800bfd0 <std>
 800c0d6:	68e0      	ldr	r0, [r4, #12]
 800c0d8:	2202      	movs	r2, #2
 800c0da:	2112      	movs	r1, #18
 800c0dc:	f7ff ff78 	bl	800bfd0 <std>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	61a3      	str	r3, [r4, #24]
 800c0e4:	e7d2      	b.n	800c08c <__sinit+0xc>
 800c0e6:	bf00      	nop
 800c0e8:	0800cff0 	.word	0x0800cff0
 800c0ec:	0800c019 	.word	0x0800c019

0800c0f0 <__sfp>:
 800c0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f2:	4607      	mov	r7, r0
 800c0f4:	f7ff ffac 	bl	800c050 <__sfp_lock_acquire>
 800c0f8:	4b1e      	ldr	r3, [pc, #120]	; (800c174 <__sfp+0x84>)
 800c0fa:	681e      	ldr	r6, [r3, #0]
 800c0fc:	69b3      	ldr	r3, [r6, #24]
 800c0fe:	b913      	cbnz	r3, 800c106 <__sfp+0x16>
 800c100:	4630      	mov	r0, r6
 800c102:	f7ff ffbd 	bl	800c080 <__sinit>
 800c106:	3648      	adds	r6, #72	; 0x48
 800c108:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c10c:	3b01      	subs	r3, #1
 800c10e:	d503      	bpl.n	800c118 <__sfp+0x28>
 800c110:	6833      	ldr	r3, [r6, #0]
 800c112:	b30b      	cbz	r3, 800c158 <__sfp+0x68>
 800c114:	6836      	ldr	r6, [r6, #0]
 800c116:	e7f7      	b.n	800c108 <__sfp+0x18>
 800c118:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c11c:	b9d5      	cbnz	r5, 800c154 <__sfp+0x64>
 800c11e:	4b16      	ldr	r3, [pc, #88]	; (800c178 <__sfp+0x88>)
 800c120:	60e3      	str	r3, [r4, #12]
 800c122:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c126:	6665      	str	r5, [r4, #100]	; 0x64
 800c128:	f000 f86c 	bl	800c204 <__retarget_lock_init_recursive>
 800c12c:	f7ff ff96 	bl	800c05c <__sfp_lock_release>
 800c130:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c134:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c138:	6025      	str	r5, [r4, #0]
 800c13a:	61a5      	str	r5, [r4, #24]
 800c13c:	2208      	movs	r2, #8
 800c13e:	4629      	mov	r1, r5
 800c140:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c144:	f000 f8d4 	bl	800c2f0 <memset>
 800c148:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c14c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c150:	4620      	mov	r0, r4
 800c152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c154:	3468      	adds	r4, #104	; 0x68
 800c156:	e7d9      	b.n	800c10c <__sfp+0x1c>
 800c158:	2104      	movs	r1, #4
 800c15a:	4638      	mov	r0, r7
 800c15c:	f7ff ff62 	bl	800c024 <__sfmoreglue>
 800c160:	4604      	mov	r4, r0
 800c162:	6030      	str	r0, [r6, #0]
 800c164:	2800      	cmp	r0, #0
 800c166:	d1d5      	bne.n	800c114 <__sfp+0x24>
 800c168:	f7ff ff78 	bl	800c05c <__sfp_lock_release>
 800c16c:	230c      	movs	r3, #12
 800c16e:	603b      	str	r3, [r7, #0]
 800c170:	e7ee      	b.n	800c150 <__sfp+0x60>
 800c172:	bf00      	nop
 800c174:	0800cff0 	.word	0x0800cff0
 800c178:	ffff0001 	.word	0xffff0001

0800c17c <_fwalk_reent>:
 800c17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c180:	4606      	mov	r6, r0
 800c182:	4688      	mov	r8, r1
 800c184:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c188:	2700      	movs	r7, #0
 800c18a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c18e:	f1b9 0901 	subs.w	r9, r9, #1
 800c192:	d505      	bpl.n	800c1a0 <_fwalk_reent+0x24>
 800c194:	6824      	ldr	r4, [r4, #0]
 800c196:	2c00      	cmp	r4, #0
 800c198:	d1f7      	bne.n	800c18a <_fwalk_reent+0xe>
 800c19a:	4638      	mov	r0, r7
 800c19c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1a0:	89ab      	ldrh	r3, [r5, #12]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d907      	bls.n	800c1b6 <_fwalk_reent+0x3a>
 800c1a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	d003      	beq.n	800c1b6 <_fwalk_reent+0x3a>
 800c1ae:	4629      	mov	r1, r5
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	47c0      	blx	r8
 800c1b4:	4307      	orrs	r7, r0
 800c1b6:	3568      	adds	r5, #104	; 0x68
 800c1b8:	e7e9      	b.n	800c18e <_fwalk_reent+0x12>
	...

0800c1bc <__libc_init_array>:
 800c1bc:	b570      	push	{r4, r5, r6, lr}
 800c1be:	4d0d      	ldr	r5, [pc, #52]	; (800c1f4 <__libc_init_array+0x38>)
 800c1c0:	4c0d      	ldr	r4, [pc, #52]	; (800c1f8 <__libc_init_array+0x3c>)
 800c1c2:	1b64      	subs	r4, r4, r5
 800c1c4:	10a4      	asrs	r4, r4, #2
 800c1c6:	2600      	movs	r6, #0
 800c1c8:	42a6      	cmp	r6, r4
 800c1ca:	d109      	bne.n	800c1e0 <__libc_init_array+0x24>
 800c1cc:	4d0b      	ldr	r5, [pc, #44]	; (800c1fc <__libc_init_array+0x40>)
 800c1ce:	4c0c      	ldr	r4, [pc, #48]	; (800c200 <__libc_init_array+0x44>)
 800c1d0:	f000 fdd6 	bl	800cd80 <_init>
 800c1d4:	1b64      	subs	r4, r4, r5
 800c1d6:	10a4      	asrs	r4, r4, #2
 800c1d8:	2600      	movs	r6, #0
 800c1da:	42a6      	cmp	r6, r4
 800c1dc:	d105      	bne.n	800c1ea <__libc_init_array+0x2e>
 800c1de:	bd70      	pop	{r4, r5, r6, pc}
 800c1e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1e4:	4798      	blx	r3
 800c1e6:	3601      	adds	r6, #1
 800c1e8:	e7ee      	b.n	800c1c8 <__libc_init_array+0xc>
 800c1ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ee:	4798      	blx	r3
 800c1f0:	3601      	adds	r6, #1
 800c1f2:	e7f2      	b.n	800c1da <__libc_init_array+0x1e>
 800c1f4:	0800d030 	.word	0x0800d030
 800c1f8:	0800d030 	.word	0x0800d030
 800c1fc:	0800d030 	.word	0x0800d030
 800c200:	0800d034 	.word	0x0800d034

0800c204 <__retarget_lock_init_recursive>:
 800c204:	4770      	bx	lr

0800c206 <__retarget_lock_acquire_recursive>:
 800c206:	4770      	bx	lr

0800c208 <__retarget_lock_release_recursive>:
 800c208:	4770      	bx	lr

0800c20a <__swhatbuf_r>:
 800c20a:	b570      	push	{r4, r5, r6, lr}
 800c20c:	460e      	mov	r6, r1
 800c20e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c212:	2900      	cmp	r1, #0
 800c214:	b096      	sub	sp, #88	; 0x58
 800c216:	4614      	mov	r4, r2
 800c218:	461d      	mov	r5, r3
 800c21a:	da07      	bge.n	800c22c <__swhatbuf_r+0x22>
 800c21c:	2300      	movs	r3, #0
 800c21e:	602b      	str	r3, [r5, #0]
 800c220:	89b3      	ldrh	r3, [r6, #12]
 800c222:	061a      	lsls	r2, r3, #24
 800c224:	d410      	bmi.n	800c248 <__swhatbuf_r+0x3e>
 800c226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c22a:	e00e      	b.n	800c24a <__swhatbuf_r+0x40>
 800c22c:	466a      	mov	r2, sp
 800c22e:	f000 fd55 	bl	800ccdc <_fstat_r>
 800c232:	2800      	cmp	r0, #0
 800c234:	dbf2      	blt.n	800c21c <__swhatbuf_r+0x12>
 800c236:	9a01      	ldr	r2, [sp, #4]
 800c238:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c23c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c240:	425a      	negs	r2, r3
 800c242:	415a      	adcs	r2, r3
 800c244:	602a      	str	r2, [r5, #0]
 800c246:	e7ee      	b.n	800c226 <__swhatbuf_r+0x1c>
 800c248:	2340      	movs	r3, #64	; 0x40
 800c24a:	2000      	movs	r0, #0
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	b016      	add	sp, #88	; 0x58
 800c250:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c254 <__smakebuf_r>:
 800c254:	898b      	ldrh	r3, [r1, #12]
 800c256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c258:	079d      	lsls	r5, r3, #30
 800c25a:	4606      	mov	r6, r0
 800c25c:	460c      	mov	r4, r1
 800c25e:	d507      	bpl.n	800c270 <__smakebuf_r+0x1c>
 800c260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c264:	6023      	str	r3, [r4, #0]
 800c266:	6123      	str	r3, [r4, #16]
 800c268:	2301      	movs	r3, #1
 800c26a:	6163      	str	r3, [r4, #20]
 800c26c:	b002      	add	sp, #8
 800c26e:	bd70      	pop	{r4, r5, r6, pc}
 800c270:	ab01      	add	r3, sp, #4
 800c272:	466a      	mov	r2, sp
 800c274:	f7ff ffc9 	bl	800c20a <__swhatbuf_r>
 800c278:	9900      	ldr	r1, [sp, #0]
 800c27a:	4605      	mov	r5, r0
 800c27c:	4630      	mov	r0, r6
 800c27e:	f000 f88f 	bl	800c3a0 <_malloc_r>
 800c282:	b948      	cbnz	r0, 800c298 <__smakebuf_r+0x44>
 800c284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c288:	059a      	lsls	r2, r3, #22
 800c28a:	d4ef      	bmi.n	800c26c <__smakebuf_r+0x18>
 800c28c:	f023 0303 	bic.w	r3, r3, #3
 800c290:	f043 0302 	orr.w	r3, r3, #2
 800c294:	81a3      	strh	r3, [r4, #12]
 800c296:	e7e3      	b.n	800c260 <__smakebuf_r+0xc>
 800c298:	4b0d      	ldr	r3, [pc, #52]	; (800c2d0 <__smakebuf_r+0x7c>)
 800c29a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c29c:	89a3      	ldrh	r3, [r4, #12]
 800c29e:	6020      	str	r0, [r4, #0]
 800c2a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2a4:	81a3      	strh	r3, [r4, #12]
 800c2a6:	9b00      	ldr	r3, [sp, #0]
 800c2a8:	6163      	str	r3, [r4, #20]
 800c2aa:	9b01      	ldr	r3, [sp, #4]
 800c2ac:	6120      	str	r0, [r4, #16]
 800c2ae:	b15b      	cbz	r3, 800c2c8 <__smakebuf_r+0x74>
 800c2b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	f000 fd23 	bl	800cd00 <_isatty_r>
 800c2ba:	b128      	cbz	r0, 800c2c8 <__smakebuf_r+0x74>
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	f023 0303 	bic.w	r3, r3, #3
 800c2c2:	f043 0301 	orr.w	r3, r3, #1
 800c2c6:	81a3      	strh	r3, [r4, #12]
 800c2c8:	89a0      	ldrh	r0, [r4, #12]
 800c2ca:	4305      	orrs	r5, r0
 800c2cc:	81a5      	strh	r5, [r4, #12]
 800c2ce:	e7cd      	b.n	800c26c <__smakebuf_r+0x18>
 800c2d0:	0800c019 	.word	0x0800c019

0800c2d4 <memcpy>:
 800c2d4:	440a      	add	r2, r1
 800c2d6:	4291      	cmp	r1, r2
 800c2d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2dc:	d100      	bne.n	800c2e0 <memcpy+0xc>
 800c2de:	4770      	bx	lr
 800c2e0:	b510      	push	{r4, lr}
 800c2e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2ea:	4291      	cmp	r1, r2
 800c2ec:	d1f9      	bne.n	800c2e2 <memcpy+0xe>
 800c2ee:	bd10      	pop	{r4, pc}

0800c2f0 <memset>:
 800c2f0:	4402      	add	r2, r0
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d100      	bne.n	800c2fa <memset+0xa>
 800c2f8:	4770      	bx	lr
 800c2fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c2fe:	e7f9      	b.n	800c2f4 <memset+0x4>

0800c300 <_free_r>:
 800c300:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c302:	2900      	cmp	r1, #0
 800c304:	d048      	beq.n	800c398 <_free_r+0x98>
 800c306:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c30a:	9001      	str	r0, [sp, #4]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	f1a1 0404 	sub.w	r4, r1, #4
 800c312:	bfb8      	it	lt
 800c314:	18e4      	addlt	r4, r4, r3
 800c316:	f000 fd15 	bl	800cd44 <__malloc_lock>
 800c31a:	4a20      	ldr	r2, [pc, #128]	; (800c39c <_free_r+0x9c>)
 800c31c:	9801      	ldr	r0, [sp, #4]
 800c31e:	6813      	ldr	r3, [r2, #0]
 800c320:	4615      	mov	r5, r2
 800c322:	b933      	cbnz	r3, 800c332 <_free_r+0x32>
 800c324:	6063      	str	r3, [r4, #4]
 800c326:	6014      	str	r4, [r2, #0]
 800c328:	b003      	add	sp, #12
 800c32a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c32e:	f000 bd0f 	b.w	800cd50 <__malloc_unlock>
 800c332:	42a3      	cmp	r3, r4
 800c334:	d90b      	bls.n	800c34e <_free_r+0x4e>
 800c336:	6821      	ldr	r1, [r4, #0]
 800c338:	1862      	adds	r2, r4, r1
 800c33a:	4293      	cmp	r3, r2
 800c33c:	bf04      	itt	eq
 800c33e:	681a      	ldreq	r2, [r3, #0]
 800c340:	685b      	ldreq	r3, [r3, #4]
 800c342:	6063      	str	r3, [r4, #4]
 800c344:	bf04      	itt	eq
 800c346:	1852      	addeq	r2, r2, r1
 800c348:	6022      	streq	r2, [r4, #0]
 800c34a:	602c      	str	r4, [r5, #0]
 800c34c:	e7ec      	b.n	800c328 <_free_r+0x28>
 800c34e:	461a      	mov	r2, r3
 800c350:	685b      	ldr	r3, [r3, #4]
 800c352:	b10b      	cbz	r3, 800c358 <_free_r+0x58>
 800c354:	42a3      	cmp	r3, r4
 800c356:	d9fa      	bls.n	800c34e <_free_r+0x4e>
 800c358:	6811      	ldr	r1, [r2, #0]
 800c35a:	1855      	adds	r5, r2, r1
 800c35c:	42a5      	cmp	r5, r4
 800c35e:	d10b      	bne.n	800c378 <_free_r+0x78>
 800c360:	6824      	ldr	r4, [r4, #0]
 800c362:	4421      	add	r1, r4
 800c364:	1854      	adds	r4, r2, r1
 800c366:	42a3      	cmp	r3, r4
 800c368:	6011      	str	r1, [r2, #0]
 800c36a:	d1dd      	bne.n	800c328 <_free_r+0x28>
 800c36c:	681c      	ldr	r4, [r3, #0]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	6053      	str	r3, [r2, #4]
 800c372:	4421      	add	r1, r4
 800c374:	6011      	str	r1, [r2, #0]
 800c376:	e7d7      	b.n	800c328 <_free_r+0x28>
 800c378:	d902      	bls.n	800c380 <_free_r+0x80>
 800c37a:	230c      	movs	r3, #12
 800c37c:	6003      	str	r3, [r0, #0]
 800c37e:	e7d3      	b.n	800c328 <_free_r+0x28>
 800c380:	6825      	ldr	r5, [r4, #0]
 800c382:	1961      	adds	r1, r4, r5
 800c384:	428b      	cmp	r3, r1
 800c386:	bf04      	itt	eq
 800c388:	6819      	ldreq	r1, [r3, #0]
 800c38a:	685b      	ldreq	r3, [r3, #4]
 800c38c:	6063      	str	r3, [r4, #4]
 800c38e:	bf04      	itt	eq
 800c390:	1949      	addeq	r1, r1, r5
 800c392:	6021      	streq	r1, [r4, #0]
 800c394:	6054      	str	r4, [r2, #4]
 800c396:	e7c7      	b.n	800c328 <_free_r+0x28>
 800c398:	b003      	add	sp, #12
 800c39a:	bd30      	pop	{r4, r5, pc}
 800c39c:	20000354 	.word	0x20000354

0800c3a0 <_malloc_r>:
 800c3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3a2:	1ccd      	adds	r5, r1, #3
 800c3a4:	f025 0503 	bic.w	r5, r5, #3
 800c3a8:	3508      	adds	r5, #8
 800c3aa:	2d0c      	cmp	r5, #12
 800c3ac:	bf38      	it	cc
 800c3ae:	250c      	movcc	r5, #12
 800c3b0:	2d00      	cmp	r5, #0
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	db01      	blt.n	800c3ba <_malloc_r+0x1a>
 800c3b6:	42a9      	cmp	r1, r5
 800c3b8:	d903      	bls.n	800c3c2 <_malloc_r+0x22>
 800c3ba:	230c      	movs	r3, #12
 800c3bc:	6033      	str	r3, [r6, #0]
 800c3be:	2000      	movs	r0, #0
 800c3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3c2:	f000 fcbf 	bl	800cd44 <__malloc_lock>
 800c3c6:	4921      	ldr	r1, [pc, #132]	; (800c44c <_malloc_r+0xac>)
 800c3c8:	680a      	ldr	r2, [r1, #0]
 800c3ca:	4614      	mov	r4, r2
 800c3cc:	b99c      	cbnz	r4, 800c3f6 <_malloc_r+0x56>
 800c3ce:	4f20      	ldr	r7, [pc, #128]	; (800c450 <_malloc_r+0xb0>)
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	b923      	cbnz	r3, 800c3de <_malloc_r+0x3e>
 800c3d4:	4621      	mov	r1, r4
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	f000 fb42 	bl	800ca60 <_sbrk_r>
 800c3dc:	6038      	str	r0, [r7, #0]
 800c3de:	4629      	mov	r1, r5
 800c3e0:	4630      	mov	r0, r6
 800c3e2:	f000 fb3d 	bl	800ca60 <_sbrk_r>
 800c3e6:	1c43      	adds	r3, r0, #1
 800c3e8:	d123      	bne.n	800c432 <_malloc_r+0x92>
 800c3ea:	230c      	movs	r3, #12
 800c3ec:	6033      	str	r3, [r6, #0]
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	f000 fcae 	bl	800cd50 <__malloc_unlock>
 800c3f4:	e7e3      	b.n	800c3be <_malloc_r+0x1e>
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	1b5b      	subs	r3, r3, r5
 800c3fa:	d417      	bmi.n	800c42c <_malloc_r+0x8c>
 800c3fc:	2b0b      	cmp	r3, #11
 800c3fe:	d903      	bls.n	800c408 <_malloc_r+0x68>
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	441c      	add	r4, r3
 800c404:	6025      	str	r5, [r4, #0]
 800c406:	e004      	b.n	800c412 <_malloc_r+0x72>
 800c408:	6863      	ldr	r3, [r4, #4]
 800c40a:	42a2      	cmp	r2, r4
 800c40c:	bf0c      	ite	eq
 800c40e:	600b      	streq	r3, [r1, #0]
 800c410:	6053      	strne	r3, [r2, #4]
 800c412:	4630      	mov	r0, r6
 800c414:	f000 fc9c 	bl	800cd50 <__malloc_unlock>
 800c418:	f104 000b 	add.w	r0, r4, #11
 800c41c:	1d23      	adds	r3, r4, #4
 800c41e:	f020 0007 	bic.w	r0, r0, #7
 800c422:	1ac2      	subs	r2, r0, r3
 800c424:	d0cc      	beq.n	800c3c0 <_malloc_r+0x20>
 800c426:	1a1b      	subs	r3, r3, r0
 800c428:	50a3      	str	r3, [r4, r2]
 800c42a:	e7c9      	b.n	800c3c0 <_malloc_r+0x20>
 800c42c:	4622      	mov	r2, r4
 800c42e:	6864      	ldr	r4, [r4, #4]
 800c430:	e7cc      	b.n	800c3cc <_malloc_r+0x2c>
 800c432:	1cc4      	adds	r4, r0, #3
 800c434:	f024 0403 	bic.w	r4, r4, #3
 800c438:	42a0      	cmp	r0, r4
 800c43a:	d0e3      	beq.n	800c404 <_malloc_r+0x64>
 800c43c:	1a21      	subs	r1, r4, r0
 800c43e:	4630      	mov	r0, r6
 800c440:	f000 fb0e 	bl	800ca60 <_sbrk_r>
 800c444:	3001      	adds	r0, #1
 800c446:	d1dd      	bne.n	800c404 <_malloc_r+0x64>
 800c448:	e7cf      	b.n	800c3ea <_malloc_r+0x4a>
 800c44a:	bf00      	nop
 800c44c:	20000354 	.word	0x20000354
 800c450:	20000358 	.word	0x20000358

0800c454 <__sfputc_r>:
 800c454:	6893      	ldr	r3, [r2, #8]
 800c456:	3b01      	subs	r3, #1
 800c458:	2b00      	cmp	r3, #0
 800c45a:	b410      	push	{r4}
 800c45c:	6093      	str	r3, [r2, #8]
 800c45e:	da08      	bge.n	800c472 <__sfputc_r+0x1e>
 800c460:	6994      	ldr	r4, [r2, #24]
 800c462:	42a3      	cmp	r3, r4
 800c464:	db01      	blt.n	800c46a <__sfputc_r+0x16>
 800c466:	290a      	cmp	r1, #10
 800c468:	d103      	bne.n	800c472 <__sfputc_r+0x1e>
 800c46a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c46e:	f000 bb53 	b.w	800cb18 <__swbuf_r>
 800c472:	6813      	ldr	r3, [r2, #0]
 800c474:	1c58      	adds	r0, r3, #1
 800c476:	6010      	str	r0, [r2, #0]
 800c478:	7019      	strb	r1, [r3, #0]
 800c47a:	4608      	mov	r0, r1
 800c47c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c480:	4770      	bx	lr

0800c482 <__sfputs_r>:
 800c482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c484:	4606      	mov	r6, r0
 800c486:	460f      	mov	r7, r1
 800c488:	4614      	mov	r4, r2
 800c48a:	18d5      	adds	r5, r2, r3
 800c48c:	42ac      	cmp	r4, r5
 800c48e:	d101      	bne.n	800c494 <__sfputs_r+0x12>
 800c490:	2000      	movs	r0, #0
 800c492:	e007      	b.n	800c4a4 <__sfputs_r+0x22>
 800c494:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c498:	463a      	mov	r2, r7
 800c49a:	4630      	mov	r0, r6
 800c49c:	f7ff ffda 	bl	800c454 <__sfputc_r>
 800c4a0:	1c43      	adds	r3, r0, #1
 800c4a2:	d1f3      	bne.n	800c48c <__sfputs_r+0xa>
 800c4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c4a8 <_vfiprintf_r>:
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	460d      	mov	r5, r1
 800c4ae:	b09d      	sub	sp, #116	; 0x74
 800c4b0:	4614      	mov	r4, r2
 800c4b2:	4698      	mov	r8, r3
 800c4b4:	4606      	mov	r6, r0
 800c4b6:	b118      	cbz	r0, 800c4c0 <_vfiprintf_r+0x18>
 800c4b8:	6983      	ldr	r3, [r0, #24]
 800c4ba:	b90b      	cbnz	r3, 800c4c0 <_vfiprintf_r+0x18>
 800c4bc:	f7ff fde0 	bl	800c080 <__sinit>
 800c4c0:	4b89      	ldr	r3, [pc, #548]	; (800c6e8 <_vfiprintf_r+0x240>)
 800c4c2:	429d      	cmp	r5, r3
 800c4c4:	d11b      	bne.n	800c4fe <_vfiprintf_r+0x56>
 800c4c6:	6875      	ldr	r5, [r6, #4]
 800c4c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4ca:	07d9      	lsls	r1, r3, #31
 800c4cc:	d405      	bmi.n	800c4da <_vfiprintf_r+0x32>
 800c4ce:	89ab      	ldrh	r3, [r5, #12]
 800c4d0:	059a      	lsls	r2, r3, #22
 800c4d2:	d402      	bmi.n	800c4da <_vfiprintf_r+0x32>
 800c4d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c4d6:	f7ff fe96 	bl	800c206 <__retarget_lock_acquire_recursive>
 800c4da:	89ab      	ldrh	r3, [r5, #12]
 800c4dc:	071b      	lsls	r3, r3, #28
 800c4de:	d501      	bpl.n	800c4e4 <_vfiprintf_r+0x3c>
 800c4e0:	692b      	ldr	r3, [r5, #16]
 800c4e2:	b9eb      	cbnz	r3, 800c520 <_vfiprintf_r+0x78>
 800c4e4:	4629      	mov	r1, r5
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	f000 fb7a 	bl	800cbe0 <__swsetup_r>
 800c4ec:	b1c0      	cbz	r0, 800c520 <_vfiprintf_r+0x78>
 800c4ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c4f0:	07dc      	lsls	r4, r3, #31
 800c4f2:	d50e      	bpl.n	800c512 <_vfiprintf_r+0x6a>
 800c4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f8:	b01d      	add	sp, #116	; 0x74
 800c4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4fe:	4b7b      	ldr	r3, [pc, #492]	; (800c6ec <_vfiprintf_r+0x244>)
 800c500:	429d      	cmp	r5, r3
 800c502:	d101      	bne.n	800c508 <_vfiprintf_r+0x60>
 800c504:	68b5      	ldr	r5, [r6, #8]
 800c506:	e7df      	b.n	800c4c8 <_vfiprintf_r+0x20>
 800c508:	4b79      	ldr	r3, [pc, #484]	; (800c6f0 <_vfiprintf_r+0x248>)
 800c50a:	429d      	cmp	r5, r3
 800c50c:	bf08      	it	eq
 800c50e:	68f5      	ldreq	r5, [r6, #12]
 800c510:	e7da      	b.n	800c4c8 <_vfiprintf_r+0x20>
 800c512:	89ab      	ldrh	r3, [r5, #12]
 800c514:	0598      	lsls	r0, r3, #22
 800c516:	d4ed      	bmi.n	800c4f4 <_vfiprintf_r+0x4c>
 800c518:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c51a:	f7ff fe75 	bl	800c208 <__retarget_lock_release_recursive>
 800c51e:	e7e9      	b.n	800c4f4 <_vfiprintf_r+0x4c>
 800c520:	2300      	movs	r3, #0
 800c522:	9309      	str	r3, [sp, #36]	; 0x24
 800c524:	2320      	movs	r3, #32
 800c526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c52a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c52e:	2330      	movs	r3, #48	; 0x30
 800c530:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c6f4 <_vfiprintf_r+0x24c>
 800c534:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c538:	f04f 0901 	mov.w	r9, #1
 800c53c:	4623      	mov	r3, r4
 800c53e:	469a      	mov	sl, r3
 800c540:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c544:	b10a      	cbz	r2, 800c54a <_vfiprintf_r+0xa2>
 800c546:	2a25      	cmp	r2, #37	; 0x25
 800c548:	d1f9      	bne.n	800c53e <_vfiprintf_r+0x96>
 800c54a:	ebba 0b04 	subs.w	fp, sl, r4
 800c54e:	d00b      	beq.n	800c568 <_vfiprintf_r+0xc0>
 800c550:	465b      	mov	r3, fp
 800c552:	4622      	mov	r2, r4
 800c554:	4629      	mov	r1, r5
 800c556:	4630      	mov	r0, r6
 800c558:	f7ff ff93 	bl	800c482 <__sfputs_r>
 800c55c:	3001      	adds	r0, #1
 800c55e:	f000 80aa 	beq.w	800c6b6 <_vfiprintf_r+0x20e>
 800c562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c564:	445a      	add	r2, fp
 800c566:	9209      	str	r2, [sp, #36]	; 0x24
 800c568:	f89a 3000 	ldrb.w	r3, [sl]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f000 80a2 	beq.w	800c6b6 <_vfiprintf_r+0x20e>
 800c572:	2300      	movs	r3, #0
 800c574:	f04f 32ff 	mov.w	r2, #4294967295
 800c578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c57c:	f10a 0a01 	add.w	sl, sl, #1
 800c580:	9304      	str	r3, [sp, #16]
 800c582:	9307      	str	r3, [sp, #28]
 800c584:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c588:	931a      	str	r3, [sp, #104]	; 0x68
 800c58a:	4654      	mov	r4, sl
 800c58c:	2205      	movs	r2, #5
 800c58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c592:	4858      	ldr	r0, [pc, #352]	; (800c6f4 <_vfiprintf_r+0x24c>)
 800c594:	f7f3 fe34 	bl	8000200 <memchr>
 800c598:	9a04      	ldr	r2, [sp, #16]
 800c59a:	b9d8      	cbnz	r0, 800c5d4 <_vfiprintf_r+0x12c>
 800c59c:	06d1      	lsls	r1, r2, #27
 800c59e:	bf44      	itt	mi
 800c5a0:	2320      	movmi	r3, #32
 800c5a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5a6:	0713      	lsls	r3, r2, #28
 800c5a8:	bf44      	itt	mi
 800c5aa:	232b      	movmi	r3, #43	; 0x2b
 800c5ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c5b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c5b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c5b6:	d015      	beq.n	800c5e4 <_vfiprintf_r+0x13c>
 800c5b8:	9a07      	ldr	r2, [sp, #28]
 800c5ba:	4654      	mov	r4, sl
 800c5bc:	2000      	movs	r0, #0
 800c5be:	f04f 0c0a 	mov.w	ip, #10
 800c5c2:	4621      	mov	r1, r4
 800c5c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5c8:	3b30      	subs	r3, #48	; 0x30
 800c5ca:	2b09      	cmp	r3, #9
 800c5cc:	d94e      	bls.n	800c66c <_vfiprintf_r+0x1c4>
 800c5ce:	b1b0      	cbz	r0, 800c5fe <_vfiprintf_r+0x156>
 800c5d0:	9207      	str	r2, [sp, #28]
 800c5d2:	e014      	b.n	800c5fe <_vfiprintf_r+0x156>
 800c5d4:	eba0 0308 	sub.w	r3, r0, r8
 800c5d8:	fa09 f303 	lsl.w	r3, r9, r3
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	9304      	str	r3, [sp, #16]
 800c5e0:	46a2      	mov	sl, r4
 800c5e2:	e7d2      	b.n	800c58a <_vfiprintf_r+0xe2>
 800c5e4:	9b03      	ldr	r3, [sp, #12]
 800c5e6:	1d19      	adds	r1, r3, #4
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	9103      	str	r1, [sp, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	bfbb      	ittet	lt
 800c5f0:	425b      	neglt	r3, r3
 800c5f2:	f042 0202 	orrlt.w	r2, r2, #2
 800c5f6:	9307      	strge	r3, [sp, #28]
 800c5f8:	9307      	strlt	r3, [sp, #28]
 800c5fa:	bfb8      	it	lt
 800c5fc:	9204      	strlt	r2, [sp, #16]
 800c5fe:	7823      	ldrb	r3, [r4, #0]
 800c600:	2b2e      	cmp	r3, #46	; 0x2e
 800c602:	d10c      	bne.n	800c61e <_vfiprintf_r+0x176>
 800c604:	7863      	ldrb	r3, [r4, #1]
 800c606:	2b2a      	cmp	r3, #42	; 0x2a
 800c608:	d135      	bne.n	800c676 <_vfiprintf_r+0x1ce>
 800c60a:	9b03      	ldr	r3, [sp, #12]
 800c60c:	1d1a      	adds	r2, r3, #4
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	9203      	str	r2, [sp, #12]
 800c612:	2b00      	cmp	r3, #0
 800c614:	bfb8      	it	lt
 800c616:	f04f 33ff 	movlt.w	r3, #4294967295
 800c61a:	3402      	adds	r4, #2
 800c61c:	9305      	str	r3, [sp, #20]
 800c61e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c704 <_vfiprintf_r+0x25c>
 800c622:	7821      	ldrb	r1, [r4, #0]
 800c624:	2203      	movs	r2, #3
 800c626:	4650      	mov	r0, sl
 800c628:	f7f3 fdea 	bl	8000200 <memchr>
 800c62c:	b140      	cbz	r0, 800c640 <_vfiprintf_r+0x198>
 800c62e:	2340      	movs	r3, #64	; 0x40
 800c630:	eba0 000a 	sub.w	r0, r0, sl
 800c634:	fa03 f000 	lsl.w	r0, r3, r0
 800c638:	9b04      	ldr	r3, [sp, #16]
 800c63a:	4303      	orrs	r3, r0
 800c63c:	3401      	adds	r4, #1
 800c63e:	9304      	str	r3, [sp, #16]
 800c640:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c644:	482c      	ldr	r0, [pc, #176]	; (800c6f8 <_vfiprintf_r+0x250>)
 800c646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c64a:	2206      	movs	r2, #6
 800c64c:	f7f3 fdd8 	bl	8000200 <memchr>
 800c650:	2800      	cmp	r0, #0
 800c652:	d03f      	beq.n	800c6d4 <_vfiprintf_r+0x22c>
 800c654:	4b29      	ldr	r3, [pc, #164]	; (800c6fc <_vfiprintf_r+0x254>)
 800c656:	bb1b      	cbnz	r3, 800c6a0 <_vfiprintf_r+0x1f8>
 800c658:	9b03      	ldr	r3, [sp, #12]
 800c65a:	3307      	adds	r3, #7
 800c65c:	f023 0307 	bic.w	r3, r3, #7
 800c660:	3308      	adds	r3, #8
 800c662:	9303      	str	r3, [sp, #12]
 800c664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c666:	443b      	add	r3, r7
 800c668:	9309      	str	r3, [sp, #36]	; 0x24
 800c66a:	e767      	b.n	800c53c <_vfiprintf_r+0x94>
 800c66c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c670:	460c      	mov	r4, r1
 800c672:	2001      	movs	r0, #1
 800c674:	e7a5      	b.n	800c5c2 <_vfiprintf_r+0x11a>
 800c676:	2300      	movs	r3, #0
 800c678:	3401      	adds	r4, #1
 800c67a:	9305      	str	r3, [sp, #20]
 800c67c:	4619      	mov	r1, r3
 800c67e:	f04f 0c0a 	mov.w	ip, #10
 800c682:	4620      	mov	r0, r4
 800c684:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c688:	3a30      	subs	r2, #48	; 0x30
 800c68a:	2a09      	cmp	r2, #9
 800c68c:	d903      	bls.n	800c696 <_vfiprintf_r+0x1ee>
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d0c5      	beq.n	800c61e <_vfiprintf_r+0x176>
 800c692:	9105      	str	r1, [sp, #20]
 800c694:	e7c3      	b.n	800c61e <_vfiprintf_r+0x176>
 800c696:	fb0c 2101 	mla	r1, ip, r1, r2
 800c69a:	4604      	mov	r4, r0
 800c69c:	2301      	movs	r3, #1
 800c69e:	e7f0      	b.n	800c682 <_vfiprintf_r+0x1da>
 800c6a0:	ab03      	add	r3, sp, #12
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	462a      	mov	r2, r5
 800c6a6:	4b16      	ldr	r3, [pc, #88]	; (800c700 <_vfiprintf_r+0x258>)
 800c6a8:	a904      	add	r1, sp, #16
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	f3af 8000 	nop.w
 800c6b0:	4607      	mov	r7, r0
 800c6b2:	1c78      	adds	r0, r7, #1
 800c6b4:	d1d6      	bne.n	800c664 <_vfiprintf_r+0x1bc>
 800c6b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6b8:	07d9      	lsls	r1, r3, #31
 800c6ba:	d405      	bmi.n	800c6c8 <_vfiprintf_r+0x220>
 800c6bc:	89ab      	ldrh	r3, [r5, #12]
 800c6be:	059a      	lsls	r2, r3, #22
 800c6c0:	d402      	bmi.n	800c6c8 <_vfiprintf_r+0x220>
 800c6c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6c4:	f7ff fda0 	bl	800c208 <__retarget_lock_release_recursive>
 800c6c8:	89ab      	ldrh	r3, [r5, #12]
 800c6ca:	065b      	lsls	r3, r3, #25
 800c6cc:	f53f af12 	bmi.w	800c4f4 <_vfiprintf_r+0x4c>
 800c6d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c6d2:	e711      	b.n	800c4f8 <_vfiprintf_r+0x50>
 800c6d4:	ab03      	add	r3, sp, #12
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	462a      	mov	r2, r5
 800c6da:	4b09      	ldr	r3, [pc, #36]	; (800c700 <_vfiprintf_r+0x258>)
 800c6dc:	a904      	add	r1, sp, #16
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f000 f880 	bl	800c7e4 <_printf_i>
 800c6e4:	e7e4      	b.n	800c6b0 <_vfiprintf_r+0x208>
 800c6e6:	bf00      	nop
 800c6e8:	0800cfb0 	.word	0x0800cfb0
 800c6ec:	0800cfd0 	.word	0x0800cfd0
 800c6f0:	0800cf90 	.word	0x0800cf90
 800c6f4:	0800cff4 	.word	0x0800cff4
 800c6f8:	0800cffe 	.word	0x0800cffe
 800c6fc:	00000000 	.word	0x00000000
 800c700:	0800c483 	.word	0x0800c483
 800c704:	0800cffa 	.word	0x0800cffa

0800c708 <_printf_common>:
 800c708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c70c:	4616      	mov	r6, r2
 800c70e:	4699      	mov	r9, r3
 800c710:	688a      	ldr	r2, [r1, #8]
 800c712:	690b      	ldr	r3, [r1, #16]
 800c714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c718:	4293      	cmp	r3, r2
 800c71a:	bfb8      	it	lt
 800c71c:	4613      	movlt	r3, r2
 800c71e:	6033      	str	r3, [r6, #0]
 800c720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c724:	4607      	mov	r7, r0
 800c726:	460c      	mov	r4, r1
 800c728:	b10a      	cbz	r2, 800c72e <_printf_common+0x26>
 800c72a:	3301      	adds	r3, #1
 800c72c:	6033      	str	r3, [r6, #0]
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	0699      	lsls	r1, r3, #26
 800c732:	bf42      	ittt	mi
 800c734:	6833      	ldrmi	r3, [r6, #0]
 800c736:	3302      	addmi	r3, #2
 800c738:	6033      	strmi	r3, [r6, #0]
 800c73a:	6825      	ldr	r5, [r4, #0]
 800c73c:	f015 0506 	ands.w	r5, r5, #6
 800c740:	d106      	bne.n	800c750 <_printf_common+0x48>
 800c742:	f104 0a19 	add.w	sl, r4, #25
 800c746:	68e3      	ldr	r3, [r4, #12]
 800c748:	6832      	ldr	r2, [r6, #0]
 800c74a:	1a9b      	subs	r3, r3, r2
 800c74c:	42ab      	cmp	r3, r5
 800c74e:	dc26      	bgt.n	800c79e <_printf_common+0x96>
 800c750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c754:	1e13      	subs	r3, r2, #0
 800c756:	6822      	ldr	r2, [r4, #0]
 800c758:	bf18      	it	ne
 800c75a:	2301      	movne	r3, #1
 800c75c:	0692      	lsls	r2, r2, #26
 800c75e:	d42b      	bmi.n	800c7b8 <_printf_common+0xb0>
 800c760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c764:	4649      	mov	r1, r9
 800c766:	4638      	mov	r0, r7
 800c768:	47c0      	blx	r8
 800c76a:	3001      	adds	r0, #1
 800c76c:	d01e      	beq.n	800c7ac <_printf_common+0xa4>
 800c76e:	6823      	ldr	r3, [r4, #0]
 800c770:	68e5      	ldr	r5, [r4, #12]
 800c772:	6832      	ldr	r2, [r6, #0]
 800c774:	f003 0306 	and.w	r3, r3, #6
 800c778:	2b04      	cmp	r3, #4
 800c77a:	bf08      	it	eq
 800c77c:	1aad      	subeq	r5, r5, r2
 800c77e:	68a3      	ldr	r3, [r4, #8]
 800c780:	6922      	ldr	r2, [r4, #16]
 800c782:	bf0c      	ite	eq
 800c784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c788:	2500      	movne	r5, #0
 800c78a:	4293      	cmp	r3, r2
 800c78c:	bfc4      	itt	gt
 800c78e:	1a9b      	subgt	r3, r3, r2
 800c790:	18ed      	addgt	r5, r5, r3
 800c792:	2600      	movs	r6, #0
 800c794:	341a      	adds	r4, #26
 800c796:	42b5      	cmp	r5, r6
 800c798:	d11a      	bne.n	800c7d0 <_printf_common+0xc8>
 800c79a:	2000      	movs	r0, #0
 800c79c:	e008      	b.n	800c7b0 <_printf_common+0xa8>
 800c79e:	2301      	movs	r3, #1
 800c7a0:	4652      	mov	r2, sl
 800c7a2:	4649      	mov	r1, r9
 800c7a4:	4638      	mov	r0, r7
 800c7a6:	47c0      	blx	r8
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	d103      	bne.n	800c7b4 <_printf_common+0xac>
 800c7ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b4:	3501      	adds	r5, #1
 800c7b6:	e7c6      	b.n	800c746 <_printf_common+0x3e>
 800c7b8:	18e1      	adds	r1, r4, r3
 800c7ba:	1c5a      	adds	r2, r3, #1
 800c7bc:	2030      	movs	r0, #48	; 0x30
 800c7be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7c2:	4422      	add	r2, r4
 800c7c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c7c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c7cc:	3302      	adds	r3, #2
 800c7ce:	e7c7      	b.n	800c760 <_printf_common+0x58>
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	4622      	mov	r2, r4
 800c7d4:	4649      	mov	r1, r9
 800c7d6:	4638      	mov	r0, r7
 800c7d8:	47c0      	blx	r8
 800c7da:	3001      	adds	r0, #1
 800c7dc:	d0e6      	beq.n	800c7ac <_printf_common+0xa4>
 800c7de:	3601      	adds	r6, #1
 800c7e0:	e7d9      	b.n	800c796 <_printf_common+0x8e>
	...

0800c7e4 <_printf_i>:
 800c7e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e8:	460c      	mov	r4, r1
 800c7ea:	4691      	mov	r9, r2
 800c7ec:	7e27      	ldrb	r7, [r4, #24]
 800c7ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c7f0:	2f78      	cmp	r7, #120	; 0x78
 800c7f2:	4680      	mov	r8, r0
 800c7f4:	469a      	mov	sl, r3
 800c7f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7fa:	d807      	bhi.n	800c80c <_printf_i+0x28>
 800c7fc:	2f62      	cmp	r7, #98	; 0x62
 800c7fe:	d80a      	bhi.n	800c816 <_printf_i+0x32>
 800c800:	2f00      	cmp	r7, #0
 800c802:	f000 80d8 	beq.w	800c9b6 <_printf_i+0x1d2>
 800c806:	2f58      	cmp	r7, #88	; 0x58
 800c808:	f000 80a3 	beq.w	800c952 <_printf_i+0x16e>
 800c80c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c814:	e03a      	b.n	800c88c <_printf_i+0xa8>
 800c816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c81a:	2b15      	cmp	r3, #21
 800c81c:	d8f6      	bhi.n	800c80c <_printf_i+0x28>
 800c81e:	a001      	add	r0, pc, #4	; (adr r0, 800c824 <_printf_i+0x40>)
 800c820:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c824:	0800c87d 	.word	0x0800c87d
 800c828:	0800c891 	.word	0x0800c891
 800c82c:	0800c80d 	.word	0x0800c80d
 800c830:	0800c80d 	.word	0x0800c80d
 800c834:	0800c80d 	.word	0x0800c80d
 800c838:	0800c80d 	.word	0x0800c80d
 800c83c:	0800c891 	.word	0x0800c891
 800c840:	0800c80d 	.word	0x0800c80d
 800c844:	0800c80d 	.word	0x0800c80d
 800c848:	0800c80d 	.word	0x0800c80d
 800c84c:	0800c80d 	.word	0x0800c80d
 800c850:	0800c99d 	.word	0x0800c99d
 800c854:	0800c8c1 	.word	0x0800c8c1
 800c858:	0800c97f 	.word	0x0800c97f
 800c85c:	0800c80d 	.word	0x0800c80d
 800c860:	0800c80d 	.word	0x0800c80d
 800c864:	0800c9bf 	.word	0x0800c9bf
 800c868:	0800c80d 	.word	0x0800c80d
 800c86c:	0800c8c1 	.word	0x0800c8c1
 800c870:	0800c80d 	.word	0x0800c80d
 800c874:	0800c80d 	.word	0x0800c80d
 800c878:	0800c987 	.word	0x0800c987
 800c87c:	680b      	ldr	r3, [r1, #0]
 800c87e:	1d1a      	adds	r2, r3, #4
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	600a      	str	r2, [r1, #0]
 800c884:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c88c:	2301      	movs	r3, #1
 800c88e:	e0a3      	b.n	800c9d8 <_printf_i+0x1f4>
 800c890:	6825      	ldr	r5, [r4, #0]
 800c892:	6808      	ldr	r0, [r1, #0]
 800c894:	062e      	lsls	r6, r5, #24
 800c896:	f100 0304 	add.w	r3, r0, #4
 800c89a:	d50a      	bpl.n	800c8b2 <_printf_i+0xce>
 800c89c:	6805      	ldr	r5, [r0, #0]
 800c89e:	600b      	str	r3, [r1, #0]
 800c8a0:	2d00      	cmp	r5, #0
 800c8a2:	da03      	bge.n	800c8ac <_printf_i+0xc8>
 800c8a4:	232d      	movs	r3, #45	; 0x2d
 800c8a6:	426d      	negs	r5, r5
 800c8a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8ac:	485e      	ldr	r0, [pc, #376]	; (800ca28 <_printf_i+0x244>)
 800c8ae:	230a      	movs	r3, #10
 800c8b0:	e019      	b.n	800c8e6 <_printf_i+0x102>
 800c8b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c8b6:	6805      	ldr	r5, [r0, #0]
 800c8b8:	600b      	str	r3, [r1, #0]
 800c8ba:	bf18      	it	ne
 800c8bc:	b22d      	sxthne	r5, r5
 800c8be:	e7ef      	b.n	800c8a0 <_printf_i+0xbc>
 800c8c0:	680b      	ldr	r3, [r1, #0]
 800c8c2:	6825      	ldr	r5, [r4, #0]
 800c8c4:	1d18      	adds	r0, r3, #4
 800c8c6:	6008      	str	r0, [r1, #0]
 800c8c8:	0628      	lsls	r0, r5, #24
 800c8ca:	d501      	bpl.n	800c8d0 <_printf_i+0xec>
 800c8cc:	681d      	ldr	r5, [r3, #0]
 800c8ce:	e002      	b.n	800c8d6 <_printf_i+0xf2>
 800c8d0:	0669      	lsls	r1, r5, #25
 800c8d2:	d5fb      	bpl.n	800c8cc <_printf_i+0xe8>
 800c8d4:	881d      	ldrh	r5, [r3, #0]
 800c8d6:	4854      	ldr	r0, [pc, #336]	; (800ca28 <_printf_i+0x244>)
 800c8d8:	2f6f      	cmp	r7, #111	; 0x6f
 800c8da:	bf0c      	ite	eq
 800c8dc:	2308      	moveq	r3, #8
 800c8de:	230a      	movne	r3, #10
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8e6:	6866      	ldr	r6, [r4, #4]
 800c8e8:	60a6      	str	r6, [r4, #8]
 800c8ea:	2e00      	cmp	r6, #0
 800c8ec:	bfa2      	ittt	ge
 800c8ee:	6821      	ldrge	r1, [r4, #0]
 800c8f0:	f021 0104 	bicge.w	r1, r1, #4
 800c8f4:	6021      	strge	r1, [r4, #0]
 800c8f6:	b90d      	cbnz	r5, 800c8fc <_printf_i+0x118>
 800c8f8:	2e00      	cmp	r6, #0
 800c8fa:	d04d      	beq.n	800c998 <_printf_i+0x1b4>
 800c8fc:	4616      	mov	r6, r2
 800c8fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800c902:	fb03 5711 	mls	r7, r3, r1, r5
 800c906:	5dc7      	ldrb	r7, [r0, r7]
 800c908:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c90c:	462f      	mov	r7, r5
 800c90e:	42bb      	cmp	r3, r7
 800c910:	460d      	mov	r5, r1
 800c912:	d9f4      	bls.n	800c8fe <_printf_i+0x11a>
 800c914:	2b08      	cmp	r3, #8
 800c916:	d10b      	bne.n	800c930 <_printf_i+0x14c>
 800c918:	6823      	ldr	r3, [r4, #0]
 800c91a:	07df      	lsls	r7, r3, #31
 800c91c:	d508      	bpl.n	800c930 <_printf_i+0x14c>
 800c91e:	6923      	ldr	r3, [r4, #16]
 800c920:	6861      	ldr	r1, [r4, #4]
 800c922:	4299      	cmp	r1, r3
 800c924:	bfde      	ittt	le
 800c926:	2330      	movle	r3, #48	; 0x30
 800c928:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c92c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c930:	1b92      	subs	r2, r2, r6
 800c932:	6122      	str	r2, [r4, #16]
 800c934:	f8cd a000 	str.w	sl, [sp]
 800c938:	464b      	mov	r3, r9
 800c93a:	aa03      	add	r2, sp, #12
 800c93c:	4621      	mov	r1, r4
 800c93e:	4640      	mov	r0, r8
 800c940:	f7ff fee2 	bl	800c708 <_printf_common>
 800c944:	3001      	adds	r0, #1
 800c946:	d14c      	bne.n	800c9e2 <_printf_i+0x1fe>
 800c948:	f04f 30ff 	mov.w	r0, #4294967295
 800c94c:	b004      	add	sp, #16
 800c94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c952:	4835      	ldr	r0, [pc, #212]	; (800ca28 <_printf_i+0x244>)
 800c954:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c958:	6823      	ldr	r3, [r4, #0]
 800c95a:	680e      	ldr	r6, [r1, #0]
 800c95c:	061f      	lsls	r7, r3, #24
 800c95e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c962:	600e      	str	r6, [r1, #0]
 800c964:	d514      	bpl.n	800c990 <_printf_i+0x1ac>
 800c966:	07d9      	lsls	r1, r3, #31
 800c968:	bf44      	itt	mi
 800c96a:	f043 0320 	orrmi.w	r3, r3, #32
 800c96e:	6023      	strmi	r3, [r4, #0]
 800c970:	b91d      	cbnz	r5, 800c97a <_printf_i+0x196>
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	f023 0320 	bic.w	r3, r3, #32
 800c978:	6023      	str	r3, [r4, #0]
 800c97a:	2310      	movs	r3, #16
 800c97c:	e7b0      	b.n	800c8e0 <_printf_i+0xfc>
 800c97e:	6823      	ldr	r3, [r4, #0]
 800c980:	f043 0320 	orr.w	r3, r3, #32
 800c984:	6023      	str	r3, [r4, #0]
 800c986:	2378      	movs	r3, #120	; 0x78
 800c988:	4828      	ldr	r0, [pc, #160]	; (800ca2c <_printf_i+0x248>)
 800c98a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c98e:	e7e3      	b.n	800c958 <_printf_i+0x174>
 800c990:	065e      	lsls	r6, r3, #25
 800c992:	bf48      	it	mi
 800c994:	b2ad      	uxthmi	r5, r5
 800c996:	e7e6      	b.n	800c966 <_printf_i+0x182>
 800c998:	4616      	mov	r6, r2
 800c99a:	e7bb      	b.n	800c914 <_printf_i+0x130>
 800c99c:	680b      	ldr	r3, [r1, #0]
 800c99e:	6826      	ldr	r6, [r4, #0]
 800c9a0:	6960      	ldr	r0, [r4, #20]
 800c9a2:	1d1d      	adds	r5, r3, #4
 800c9a4:	600d      	str	r5, [r1, #0]
 800c9a6:	0635      	lsls	r5, r6, #24
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	d501      	bpl.n	800c9b0 <_printf_i+0x1cc>
 800c9ac:	6018      	str	r0, [r3, #0]
 800c9ae:	e002      	b.n	800c9b6 <_printf_i+0x1d2>
 800c9b0:	0671      	lsls	r1, r6, #25
 800c9b2:	d5fb      	bpl.n	800c9ac <_printf_i+0x1c8>
 800c9b4:	8018      	strh	r0, [r3, #0]
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	6123      	str	r3, [r4, #16]
 800c9ba:	4616      	mov	r6, r2
 800c9bc:	e7ba      	b.n	800c934 <_printf_i+0x150>
 800c9be:	680b      	ldr	r3, [r1, #0]
 800c9c0:	1d1a      	adds	r2, r3, #4
 800c9c2:	600a      	str	r2, [r1, #0]
 800c9c4:	681e      	ldr	r6, [r3, #0]
 800c9c6:	6862      	ldr	r2, [r4, #4]
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	f7f3 fc18 	bl	8000200 <memchr>
 800c9d0:	b108      	cbz	r0, 800c9d6 <_printf_i+0x1f2>
 800c9d2:	1b80      	subs	r0, r0, r6
 800c9d4:	6060      	str	r0, [r4, #4]
 800c9d6:	6863      	ldr	r3, [r4, #4]
 800c9d8:	6123      	str	r3, [r4, #16]
 800c9da:	2300      	movs	r3, #0
 800c9dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9e0:	e7a8      	b.n	800c934 <_printf_i+0x150>
 800c9e2:	6923      	ldr	r3, [r4, #16]
 800c9e4:	4632      	mov	r2, r6
 800c9e6:	4649      	mov	r1, r9
 800c9e8:	4640      	mov	r0, r8
 800c9ea:	47d0      	blx	sl
 800c9ec:	3001      	adds	r0, #1
 800c9ee:	d0ab      	beq.n	800c948 <_printf_i+0x164>
 800c9f0:	6823      	ldr	r3, [r4, #0]
 800c9f2:	079b      	lsls	r3, r3, #30
 800c9f4:	d413      	bmi.n	800ca1e <_printf_i+0x23a>
 800c9f6:	68e0      	ldr	r0, [r4, #12]
 800c9f8:	9b03      	ldr	r3, [sp, #12]
 800c9fa:	4298      	cmp	r0, r3
 800c9fc:	bfb8      	it	lt
 800c9fe:	4618      	movlt	r0, r3
 800ca00:	e7a4      	b.n	800c94c <_printf_i+0x168>
 800ca02:	2301      	movs	r3, #1
 800ca04:	4632      	mov	r2, r6
 800ca06:	4649      	mov	r1, r9
 800ca08:	4640      	mov	r0, r8
 800ca0a:	47d0      	blx	sl
 800ca0c:	3001      	adds	r0, #1
 800ca0e:	d09b      	beq.n	800c948 <_printf_i+0x164>
 800ca10:	3501      	adds	r5, #1
 800ca12:	68e3      	ldr	r3, [r4, #12]
 800ca14:	9903      	ldr	r1, [sp, #12]
 800ca16:	1a5b      	subs	r3, r3, r1
 800ca18:	42ab      	cmp	r3, r5
 800ca1a:	dcf2      	bgt.n	800ca02 <_printf_i+0x21e>
 800ca1c:	e7eb      	b.n	800c9f6 <_printf_i+0x212>
 800ca1e:	2500      	movs	r5, #0
 800ca20:	f104 0619 	add.w	r6, r4, #25
 800ca24:	e7f5      	b.n	800ca12 <_printf_i+0x22e>
 800ca26:	bf00      	nop
 800ca28:	0800d005 	.word	0x0800d005
 800ca2c:	0800d016 	.word	0x0800d016

0800ca30 <iprintf>:
 800ca30:	b40f      	push	{r0, r1, r2, r3}
 800ca32:	4b0a      	ldr	r3, [pc, #40]	; (800ca5c <iprintf+0x2c>)
 800ca34:	b513      	push	{r0, r1, r4, lr}
 800ca36:	681c      	ldr	r4, [r3, #0]
 800ca38:	b124      	cbz	r4, 800ca44 <iprintf+0x14>
 800ca3a:	69a3      	ldr	r3, [r4, #24]
 800ca3c:	b913      	cbnz	r3, 800ca44 <iprintf+0x14>
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f7ff fb1e 	bl	800c080 <__sinit>
 800ca44:	ab05      	add	r3, sp, #20
 800ca46:	9a04      	ldr	r2, [sp, #16]
 800ca48:	68a1      	ldr	r1, [r4, #8]
 800ca4a:	9301      	str	r3, [sp, #4]
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f7ff fd2b 	bl	800c4a8 <_vfiprintf_r>
 800ca52:	b002      	add	sp, #8
 800ca54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca58:	b004      	add	sp, #16
 800ca5a:	4770      	bx	lr
 800ca5c:	200002cc 	.word	0x200002cc

0800ca60 <_sbrk_r>:
 800ca60:	b538      	push	{r3, r4, r5, lr}
 800ca62:	4d06      	ldr	r5, [pc, #24]	; (800ca7c <_sbrk_r+0x1c>)
 800ca64:	2300      	movs	r3, #0
 800ca66:	4604      	mov	r4, r0
 800ca68:	4608      	mov	r0, r1
 800ca6a:	602b      	str	r3, [r5, #0]
 800ca6c:	f7f4 fcfa 	bl	8001464 <_sbrk>
 800ca70:	1c43      	adds	r3, r0, #1
 800ca72:	d102      	bne.n	800ca7a <_sbrk_r+0x1a>
 800ca74:	682b      	ldr	r3, [r5, #0]
 800ca76:	b103      	cbz	r3, 800ca7a <_sbrk_r+0x1a>
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	bd38      	pop	{r3, r4, r5, pc}
 800ca7c:	2000161c 	.word	0x2000161c

0800ca80 <__sread>:
 800ca80:	b510      	push	{r4, lr}
 800ca82:	460c      	mov	r4, r1
 800ca84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca88:	f000 f968 	bl	800cd5c <_read_r>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	bfab      	itete	ge
 800ca90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ca92:	89a3      	ldrhlt	r3, [r4, #12]
 800ca94:	181b      	addge	r3, r3, r0
 800ca96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ca9a:	bfac      	ite	ge
 800ca9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ca9e:	81a3      	strhlt	r3, [r4, #12]
 800caa0:	bd10      	pop	{r4, pc}

0800caa2 <__swrite>:
 800caa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caa6:	461f      	mov	r7, r3
 800caa8:	898b      	ldrh	r3, [r1, #12]
 800caaa:	05db      	lsls	r3, r3, #23
 800caac:	4605      	mov	r5, r0
 800caae:	460c      	mov	r4, r1
 800cab0:	4616      	mov	r6, r2
 800cab2:	d505      	bpl.n	800cac0 <__swrite+0x1e>
 800cab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cab8:	2302      	movs	r3, #2
 800caba:	2200      	movs	r2, #0
 800cabc:	f000 f930 	bl	800cd20 <_lseek_r>
 800cac0:	89a3      	ldrh	r3, [r4, #12]
 800cac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800caca:	81a3      	strh	r3, [r4, #12]
 800cacc:	4632      	mov	r2, r6
 800cace:	463b      	mov	r3, r7
 800cad0:	4628      	mov	r0, r5
 800cad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cad6:	f000 b871 	b.w	800cbbc <_write_r>

0800cada <__sseek>:
 800cada:	b510      	push	{r4, lr}
 800cadc:	460c      	mov	r4, r1
 800cade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cae2:	f000 f91d 	bl	800cd20 <_lseek_r>
 800cae6:	1c43      	adds	r3, r0, #1
 800cae8:	89a3      	ldrh	r3, [r4, #12]
 800caea:	bf15      	itete	ne
 800caec:	6560      	strne	r0, [r4, #84]	; 0x54
 800caee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800caf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800caf6:	81a3      	strheq	r3, [r4, #12]
 800caf8:	bf18      	it	ne
 800cafa:	81a3      	strhne	r3, [r4, #12]
 800cafc:	bd10      	pop	{r4, pc}

0800cafe <__sclose>:
 800cafe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb02:	f000 b8db 	b.w	800ccbc <_close_r>

0800cb06 <strcpy>:
 800cb06:	4603      	mov	r3, r0
 800cb08:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb0c:	f803 2b01 	strb.w	r2, [r3], #1
 800cb10:	2a00      	cmp	r2, #0
 800cb12:	d1f9      	bne.n	800cb08 <strcpy+0x2>
 800cb14:	4770      	bx	lr
	...

0800cb18 <__swbuf_r>:
 800cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1a:	460e      	mov	r6, r1
 800cb1c:	4614      	mov	r4, r2
 800cb1e:	4605      	mov	r5, r0
 800cb20:	b118      	cbz	r0, 800cb2a <__swbuf_r+0x12>
 800cb22:	6983      	ldr	r3, [r0, #24]
 800cb24:	b90b      	cbnz	r3, 800cb2a <__swbuf_r+0x12>
 800cb26:	f7ff faab 	bl	800c080 <__sinit>
 800cb2a:	4b21      	ldr	r3, [pc, #132]	; (800cbb0 <__swbuf_r+0x98>)
 800cb2c:	429c      	cmp	r4, r3
 800cb2e:	d12b      	bne.n	800cb88 <__swbuf_r+0x70>
 800cb30:	686c      	ldr	r4, [r5, #4]
 800cb32:	69a3      	ldr	r3, [r4, #24]
 800cb34:	60a3      	str	r3, [r4, #8]
 800cb36:	89a3      	ldrh	r3, [r4, #12]
 800cb38:	071a      	lsls	r2, r3, #28
 800cb3a:	d52f      	bpl.n	800cb9c <__swbuf_r+0x84>
 800cb3c:	6923      	ldr	r3, [r4, #16]
 800cb3e:	b36b      	cbz	r3, 800cb9c <__swbuf_r+0x84>
 800cb40:	6923      	ldr	r3, [r4, #16]
 800cb42:	6820      	ldr	r0, [r4, #0]
 800cb44:	1ac0      	subs	r0, r0, r3
 800cb46:	6963      	ldr	r3, [r4, #20]
 800cb48:	b2f6      	uxtb	r6, r6
 800cb4a:	4283      	cmp	r3, r0
 800cb4c:	4637      	mov	r7, r6
 800cb4e:	dc04      	bgt.n	800cb5a <__swbuf_r+0x42>
 800cb50:	4621      	mov	r1, r4
 800cb52:	4628      	mov	r0, r5
 800cb54:	f7ff fa00 	bl	800bf58 <_fflush_r>
 800cb58:	bb30      	cbnz	r0, 800cba8 <__swbuf_r+0x90>
 800cb5a:	68a3      	ldr	r3, [r4, #8]
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	60a3      	str	r3, [r4, #8]
 800cb60:	6823      	ldr	r3, [r4, #0]
 800cb62:	1c5a      	adds	r2, r3, #1
 800cb64:	6022      	str	r2, [r4, #0]
 800cb66:	701e      	strb	r6, [r3, #0]
 800cb68:	6963      	ldr	r3, [r4, #20]
 800cb6a:	3001      	adds	r0, #1
 800cb6c:	4283      	cmp	r3, r0
 800cb6e:	d004      	beq.n	800cb7a <__swbuf_r+0x62>
 800cb70:	89a3      	ldrh	r3, [r4, #12]
 800cb72:	07db      	lsls	r3, r3, #31
 800cb74:	d506      	bpl.n	800cb84 <__swbuf_r+0x6c>
 800cb76:	2e0a      	cmp	r6, #10
 800cb78:	d104      	bne.n	800cb84 <__swbuf_r+0x6c>
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	f7ff f9eb 	bl	800bf58 <_fflush_r>
 800cb82:	b988      	cbnz	r0, 800cba8 <__swbuf_r+0x90>
 800cb84:	4638      	mov	r0, r7
 800cb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb88:	4b0a      	ldr	r3, [pc, #40]	; (800cbb4 <__swbuf_r+0x9c>)
 800cb8a:	429c      	cmp	r4, r3
 800cb8c:	d101      	bne.n	800cb92 <__swbuf_r+0x7a>
 800cb8e:	68ac      	ldr	r4, [r5, #8]
 800cb90:	e7cf      	b.n	800cb32 <__swbuf_r+0x1a>
 800cb92:	4b09      	ldr	r3, [pc, #36]	; (800cbb8 <__swbuf_r+0xa0>)
 800cb94:	429c      	cmp	r4, r3
 800cb96:	bf08      	it	eq
 800cb98:	68ec      	ldreq	r4, [r5, #12]
 800cb9a:	e7ca      	b.n	800cb32 <__swbuf_r+0x1a>
 800cb9c:	4621      	mov	r1, r4
 800cb9e:	4628      	mov	r0, r5
 800cba0:	f000 f81e 	bl	800cbe0 <__swsetup_r>
 800cba4:	2800      	cmp	r0, #0
 800cba6:	d0cb      	beq.n	800cb40 <__swbuf_r+0x28>
 800cba8:	f04f 37ff 	mov.w	r7, #4294967295
 800cbac:	e7ea      	b.n	800cb84 <__swbuf_r+0x6c>
 800cbae:	bf00      	nop
 800cbb0:	0800cfb0 	.word	0x0800cfb0
 800cbb4:	0800cfd0 	.word	0x0800cfd0
 800cbb8:	0800cf90 	.word	0x0800cf90

0800cbbc <_write_r>:
 800cbbc:	b538      	push	{r3, r4, r5, lr}
 800cbbe:	4d07      	ldr	r5, [pc, #28]	; (800cbdc <_write_r+0x20>)
 800cbc0:	4604      	mov	r4, r0
 800cbc2:	4608      	mov	r0, r1
 800cbc4:	4611      	mov	r1, r2
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	602a      	str	r2, [r5, #0]
 800cbca:	461a      	mov	r2, r3
 800cbcc:	f7f4 fbf9 	bl	80013c2 <_write>
 800cbd0:	1c43      	adds	r3, r0, #1
 800cbd2:	d102      	bne.n	800cbda <_write_r+0x1e>
 800cbd4:	682b      	ldr	r3, [r5, #0]
 800cbd6:	b103      	cbz	r3, 800cbda <_write_r+0x1e>
 800cbd8:	6023      	str	r3, [r4, #0]
 800cbda:	bd38      	pop	{r3, r4, r5, pc}
 800cbdc:	2000161c 	.word	0x2000161c

0800cbe0 <__swsetup_r>:
 800cbe0:	4b32      	ldr	r3, [pc, #200]	; (800ccac <__swsetup_r+0xcc>)
 800cbe2:	b570      	push	{r4, r5, r6, lr}
 800cbe4:	681d      	ldr	r5, [r3, #0]
 800cbe6:	4606      	mov	r6, r0
 800cbe8:	460c      	mov	r4, r1
 800cbea:	b125      	cbz	r5, 800cbf6 <__swsetup_r+0x16>
 800cbec:	69ab      	ldr	r3, [r5, #24]
 800cbee:	b913      	cbnz	r3, 800cbf6 <__swsetup_r+0x16>
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	f7ff fa45 	bl	800c080 <__sinit>
 800cbf6:	4b2e      	ldr	r3, [pc, #184]	; (800ccb0 <__swsetup_r+0xd0>)
 800cbf8:	429c      	cmp	r4, r3
 800cbfa:	d10f      	bne.n	800cc1c <__swsetup_r+0x3c>
 800cbfc:	686c      	ldr	r4, [r5, #4]
 800cbfe:	89a3      	ldrh	r3, [r4, #12]
 800cc00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc04:	0719      	lsls	r1, r3, #28
 800cc06:	d42c      	bmi.n	800cc62 <__swsetup_r+0x82>
 800cc08:	06dd      	lsls	r5, r3, #27
 800cc0a:	d411      	bmi.n	800cc30 <__swsetup_r+0x50>
 800cc0c:	2309      	movs	r3, #9
 800cc0e:	6033      	str	r3, [r6, #0]
 800cc10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc14:	81a3      	strh	r3, [r4, #12]
 800cc16:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1a:	e03e      	b.n	800cc9a <__swsetup_r+0xba>
 800cc1c:	4b25      	ldr	r3, [pc, #148]	; (800ccb4 <__swsetup_r+0xd4>)
 800cc1e:	429c      	cmp	r4, r3
 800cc20:	d101      	bne.n	800cc26 <__swsetup_r+0x46>
 800cc22:	68ac      	ldr	r4, [r5, #8]
 800cc24:	e7eb      	b.n	800cbfe <__swsetup_r+0x1e>
 800cc26:	4b24      	ldr	r3, [pc, #144]	; (800ccb8 <__swsetup_r+0xd8>)
 800cc28:	429c      	cmp	r4, r3
 800cc2a:	bf08      	it	eq
 800cc2c:	68ec      	ldreq	r4, [r5, #12]
 800cc2e:	e7e6      	b.n	800cbfe <__swsetup_r+0x1e>
 800cc30:	0758      	lsls	r0, r3, #29
 800cc32:	d512      	bpl.n	800cc5a <__swsetup_r+0x7a>
 800cc34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc36:	b141      	cbz	r1, 800cc4a <__swsetup_r+0x6a>
 800cc38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc3c:	4299      	cmp	r1, r3
 800cc3e:	d002      	beq.n	800cc46 <__swsetup_r+0x66>
 800cc40:	4630      	mov	r0, r6
 800cc42:	f7ff fb5d 	bl	800c300 <_free_r>
 800cc46:	2300      	movs	r3, #0
 800cc48:	6363      	str	r3, [r4, #52]	; 0x34
 800cc4a:	89a3      	ldrh	r3, [r4, #12]
 800cc4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc50:	81a3      	strh	r3, [r4, #12]
 800cc52:	2300      	movs	r3, #0
 800cc54:	6063      	str	r3, [r4, #4]
 800cc56:	6923      	ldr	r3, [r4, #16]
 800cc58:	6023      	str	r3, [r4, #0]
 800cc5a:	89a3      	ldrh	r3, [r4, #12]
 800cc5c:	f043 0308 	orr.w	r3, r3, #8
 800cc60:	81a3      	strh	r3, [r4, #12]
 800cc62:	6923      	ldr	r3, [r4, #16]
 800cc64:	b94b      	cbnz	r3, 800cc7a <__swsetup_r+0x9a>
 800cc66:	89a3      	ldrh	r3, [r4, #12]
 800cc68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc70:	d003      	beq.n	800cc7a <__swsetup_r+0x9a>
 800cc72:	4621      	mov	r1, r4
 800cc74:	4630      	mov	r0, r6
 800cc76:	f7ff faed 	bl	800c254 <__smakebuf_r>
 800cc7a:	89a0      	ldrh	r0, [r4, #12]
 800cc7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc80:	f010 0301 	ands.w	r3, r0, #1
 800cc84:	d00a      	beq.n	800cc9c <__swsetup_r+0xbc>
 800cc86:	2300      	movs	r3, #0
 800cc88:	60a3      	str	r3, [r4, #8]
 800cc8a:	6963      	ldr	r3, [r4, #20]
 800cc8c:	425b      	negs	r3, r3
 800cc8e:	61a3      	str	r3, [r4, #24]
 800cc90:	6923      	ldr	r3, [r4, #16]
 800cc92:	b943      	cbnz	r3, 800cca6 <__swsetup_r+0xc6>
 800cc94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc98:	d1ba      	bne.n	800cc10 <__swsetup_r+0x30>
 800cc9a:	bd70      	pop	{r4, r5, r6, pc}
 800cc9c:	0781      	lsls	r1, r0, #30
 800cc9e:	bf58      	it	pl
 800cca0:	6963      	ldrpl	r3, [r4, #20]
 800cca2:	60a3      	str	r3, [r4, #8]
 800cca4:	e7f4      	b.n	800cc90 <__swsetup_r+0xb0>
 800cca6:	2000      	movs	r0, #0
 800cca8:	e7f7      	b.n	800cc9a <__swsetup_r+0xba>
 800ccaa:	bf00      	nop
 800ccac:	200002cc 	.word	0x200002cc
 800ccb0:	0800cfb0 	.word	0x0800cfb0
 800ccb4:	0800cfd0 	.word	0x0800cfd0
 800ccb8:	0800cf90 	.word	0x0800cf90

0800ccbc <_close_r>:
 800ccbc:	b538      	push	{r3, r4, r5, lr}
 800ccbe:	4d06      	ldr	r5, [pc, #24]	; (800ccd8 <_close_r+0x1c>)
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	4608      	mov	r0, r1
 800ccc6:	602b      	str	r3, [r5, #0]
 800ccc8:	f7f4 fb97 	bl	80013fa <_close>
 800cccc:	1c43      	adds	r3, r0, #1
 800ccce:	d102      	bne.n	800ccd6 <_close_r+0x1a>
 800ccd0:	682b      	ldr	r3, [r5, #0]
 800ccd2:	b103      	cbz	r3, 800ccd6 <_close_r+0x1a>
 800ccd4:	6023      	str	r3, [r4, #0]
 800ccd6:	bd38      	pop	{r3, r4, r5, pc}
 800ccd8:	2000161c 	.word	0x2000161c

0800ccdc <_fstat_r>:
 800ccdc:	b538      	push	{r3, r4, r5, lr}
 800ccde:	4d07      	ldr	r5, [pc, #28]	; (800ccfc <_fstat_r+0x20>)
 800cce0:	2300      	movs	r3, #0
 800cce2:	4604      	mov	r4, r0
 800cce4:	4608      	mov	r0, r1
 800cce6:	4611      	mov	r1, r2
 800cce8:	602b      	str	r3, [r5, #0]
 800ccea:	f7f4 fb92 	bl	8001412 <_fstat>
 800ccee:	1c43      	adds	r3, r0, #1
 800ccf0:	d102      	bne.n	800ccf8 <_fstat_r+0x1c>
 800ccf2:	682b      	ldr	r3, [r5, #0]
 800ccf4:	b103      	cbz	r3, 800ccf8 <_fstat_r+0x1c>
 800ccf6:	6023      	str	r3, [r4, #0]
 800ccf8:	bd38      	pop	{r3, r4, r5, pc}
 800ccfa:	bf00      	nop
 800ccfc:	2000161c 	.word	0x2000161c

0800cd00 <_isatty_r>:
 800cd00:	b538      	push	{r3, r4, r5, lr}
 800cd02:	4d06      	ldr	r5, [pc, #24]	; (800cd1c <_isatty_r+0x1c>)
 800cd04:	2300      	movs	r3, #0
 800cd06:	4604      	mov	r4, r0
 800cd08:	4608      	mov	r0, r1
 800cd0a:	602b      	str	r3, [r5, #0]
 800cd0c:	f7f4 fb91 	bl	8001432 <_isatty>
 800cd10:	1c43      	adds	r3, r0, #1
 800cd12:	d102      	bne.n	800cd1a <_isatty_r+0x1a>
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	b103      	cbz	r3, 800cd1a <_isatty_r+0x1a>
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	bd38      	pop	{r3, r4, r5, pc}
 800cd1c:	2000161c 	.word	0x2000161c

0800cd20 <_lseek_r>:
 800cd20:	b538      	push	{r3, r4, r5, lr}
 800cd22:	4d07      	ldr	r5, [pc, #28]	; (800cd40 <_lseek_r+0x20>)
 800cd24:	4604      	mov	r4, r0
 800cd26:	4608      	mov	r0, r1
 800cd28:	4611      	mov	r1, r2
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	602a      	str	r2, [r5, #0]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	f7f4 fb8a 	bl	8001448 <_lseek>
 800cd34:	1c43      	adds	r3, r0, #1
 800cd36:	d102      	bne.n	800cd3e <_lseek_r+0x1e>
 800cd38:	682b      	ldr	r3, [r5, #0]
 800cd3a:	b103      	cbz	r3, 800cd3e <_lseek_r+0x1e>
 800cd3c:	6023      	str	r3, [r4, #0]
 800cd3e:	bd38      	pop	{r3, r4, r5, pc}
 800cd40:	2000161c 	.word	0x2000161c

0800cd44 <__malloc_lock>:
 800cd44:	4801      	ldr	r0, [pc, #4]	; (800cd4c <__malloc_lock+0x8>)
 800cd46:	f7ff ba5e 	b.w	800c206 <__retarget_lock_acquire_recursive>
 800cd4a:	bf00      	nop
 800cd4c:	20001614 	.word	0x20001614

0800cd50 <__malloc_unlock>:
 800cd50:	4801      	ldr	r0, [pc, #4]	; (800cd58 <__malloc_unlock+0x8>)
 800cd52:	f7ff ba59 	b.w	800c208 <__retarget_lock_release_recursive>
 800cd56:	bf00      	nop
 800cd58:	20001614 	.word	0x20001614

0800cd5c <_read_r>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	4d07      	ldr	r5, [pc, #28]	; (800cd7c <_read_r+0x20>)
 800cd60:	4604      	mov	r4, r0
 800cd62:	4608      	mov	r0, r1
 800cd64:	4611      	mov	r1, r2
 800cd66:	2200      	movs	r2, #0
 800cd68:	602a      	str	r2, [r5, #0]
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	f7f4 fb0c 	bl	8001388 <_read>
 800cd70:	1c43      	adds	r3, r0, #1
 800cd72:	d102      	bne.n	800cd7a <_read_r+0x1e>
 800cd74:	682b      	ldr	r3, [r5, #0]
 800cd76:	b103      	cbz	r3, 800cd7a <_read_r+0x1e>
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	bd38      	pop	{r3, r4, r5, pc}
 800cd7c:	2000161c 	.word	0x2000161c

0800cd80 <_init>:
 800cd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd82:	bf00      	nop
 800cd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd86:	bc08      	pop	{r3}
 800cd88:	469e      	mov	lr, r3
 800cd8a:	4770      	bx	lr

0800cd8c <_fini>:
 800cd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd8e:	bf00      	nop
 800cd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd92:	bc08      	pop	{r3}
 800cd94:	469e      	mov	lr, r3
 800cd96:	4770      	bx	lr
